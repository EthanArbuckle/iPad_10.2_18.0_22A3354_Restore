uint64_t sub_10011F7C4(uint64_t a1, uint64_t a2, int a3)
{
  CFAbsoluteTime Current;
  double v7;
  NSObject *v8;
  uint64_t v9;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  double v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  NSObject *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  uint8_t *v32;
  int v33;
  uint64_t v34;
  uint8_t buf[520];
  __int128 v36[7];
  char v37;

  objc_msgSend(*(id *)(a1 + 8), "silo");
  Current = CFAbsoluteTimeGetCurrent();
  v7 = *(double *)(a1 + 104);
  if (Current < v7)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#Warning Last confident location is in future, timestamp,%.03lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      v29 = *(_QWORD *)(a1 + 104);
      v33 = 134217984;
      v34 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "#Warning Last confident location is in future, timestamp,%.03lf", COERCE_DOUBLE(&v33));
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLastConfidentLocation::isPreviousLocationPreferred(const CLDaemonLocation &, BOOL)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    *(_DWORD *)(a1 + 28) = 0xFFFF;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 48) = xmmword_101BAFC90;
    *(_OWORD *)(a1 + 64) = _Q1;
    *(_OWORD *)(a1 + 80) = _Q1;
    *(_OWORD *)(a1 + 96) = _Q1;
    *(_DWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 132) = 0;
    *(_QWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 140) = 0;
    *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 156) = 0;
    *(_QWORD *)(a1 + 172) = 0;
    *(_QWORD *)(a1 + 164) = 0;
    *(_BYTE *)(a1 + 180) = 0;
    sub_10012A33C(buf);
    memcpy((void *)(a1 + 184), buf, 0x201uLL);
    sub_1002B7674(a1 + 704, v36);
    v14 = v36[6];
    *(_OWORD *)(a1 + 784) = v36[5];
    *(_OWORD *)(a1 + 800) = v14;
    *(_BYTE *)(a1 + 816) = v37;
    v15 = v36[2];
    *(_OWORD *)(a1 + 720) = v36[1];
    *(_OWORD *)(a1 + 736) = v15;
    v16 = v36[4];
    *(_OWORD *)(a1 + 752) = v36[3];
    *(_OWORD *)(a1 + 768) = v16;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v36[0] + 1);
    if (*((_QWORD *)&v36[0] + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v36[0] + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v7 = *(double *)(a1 + 104);
  }
  v20 = *(double *)(a2 + 76);
  if (v20 < v7)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v21 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_QWORD *)(a2 + 76);
      v23 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Skipping new location with an older timestamp,%.03lf,cached,%.03lf", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Skipping new location with an older timestamp,%.03lf,cached,%.03lf");
LABEL_45:
    v32 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLastConfidentLocation::isPreviousLocationPreferred(const CLDaemonLocation &, BOOL)", "%s\n", v28);
    if (v32 != buf)
      free(v32);
    return 1;
  }
  if (*(double *)(a1 + 48) < 65.0)
  {
    v25 = *(double *)(a2 + 20) >= 65.0 ? 1 : a3;
    if (v20 < v7 + 10.0 && v25 != 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      v27 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Skipping new location, since having recent more confident location", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Skipping new location, since having recent more confident location");
      goto LABEL_45;
    }
  }
  return 0;
}

uint64_t sub_10011FD08(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  NSObject *v8;
  _BOOL4 v9;
  NSObject *v10;
  _BOOL4 v11;
  NSObject *v12;
  _BOOL4 v13;
  uint8_t *v14;
  _QWORD v15[2];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1 + 8), "silo");
  result = 0;
  v4 = *(double *)(a2 + 20);
  if (v4 > 100.0 || v4 < 0.0)
    return result;
  if (sub_10011CE88(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (sub_10011CE88(*(double *)(a2 + 100), *(double *)(a2 + 108)))
    {
      if (sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
        v5 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Skipping new location with coordinate in null-island", buf, 2u);
        }
        v6 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v6)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
          LOWORD(v15[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Skipping new location with coordinate in null-island", v15, 2, v15[0]);
LABEL_39:
          v14 = (uint8_t *)v7;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLLastConfidentLocation::isQualifiedAsConfident(const CLDaemonLocation &)", "%s\n", v7);
          if (v14 != buf)
            free(v14);
          return 0;
        }
      }
      else
      {
        if (!sub_10011CE64(*(double *)(a2 + 100), *(double *)(a2 + 108)))
          return 1;
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
        v12 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Skipping new location with rawCoordinate in null-island", buf, 2u);
        }
        v13 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v13)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
          LOWORD(v15[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Skipping new location with rawCoordinate in null-island", v15, 2, v15[0]);
          goto LABEL_39;
        }
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      v10 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Skipping new location with invalid rawCoordinate", buf, 2u);
      }
      v11 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v11)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
        LOWORD(v15[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Skipping new location with invalid rawCoordinate", v15, 2, v15[0]);
        goto LABEL_39;
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Skipping new location with invalid coordinate", buf, 2u);
    }
    v9 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Skipping new location with invalid coordinate", v15, 2, v15[0]);
      goto LABEL_39;
    }
  }
  return result;
}

void sub_10012019C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLeechedNotification:withData:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1001202AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001202C0(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1001203D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001203E4(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1001204F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100120508(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100120618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10012062C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onLocationNotification:data:", a2, a3);
}

id sub_10012063C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onLocationNotification:data:", a2, a3);
}

void sub_10012064C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_10012075C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100120770(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100120880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100120894(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1001209A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1001209B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onLocationNotification:data:", a2, a3);
}

void sub_1001209C8(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100120BB0(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100120B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100120BB0(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[28];
  _BYTE v25[513];
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  char v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[2];
  _BYTE v45[513];
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;

  if (*a3 == 5)
  {
    v22 = a4[6];
    v23 = a4[7];
    *(_OWORD *)v24 = a4[8];
    *(_OWORD *)&v24[12] = *(__int128 *)((char *)a4 + 140);
    v18 = a4[2];
    v19 = a4[3];
    v20 = a4[4];
    v21 = a4[5];
    v16 = *a4;
    v17 = a4[1];
    memcpy(v25, a4 + 10, sizeof(v25));
    v6 = *((_QWORD *)a4 + 85);
    v7 = *((_QWORD *)a4 + 86);
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = *(__int128 *)((char *)a4 + 776);
    v32 = *(__int128 *)((char *)a4 + 760);
    v33 = v10;
    v11 = *(__int128 *)((char *)a4 + 712);
    v28 = *(__int128 *)((char *)a4 + 696);
    v29 = v11;
    v12 = *(__int128 *)((char *)a4 + 744);
    v30 = *(__int128 *)((char *)a4 + 728);
    v31 = v12;
    v34 = *((_BYTE *)a4 + 792);
    v37 = v17;
    v36 = v16;
    v41 = v21;
    v40 = v20;
    v39 = v19;
    v38 = v18;
    *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)&v24[12];
    v44[0] = *(_OWORD *)v24;
    v43 = v23;
    v42 = v22;
    memcpy(v45, v25, sizeof(v45));
    v46 = v6;
    v47 = v7;
    v26 = 0;
    v27 = 0;
    v13 = *(__int128 *)((char *)a4 + 776);
    v52 = *(__int128 *)((char *)a4 + 760);
    v53 = v13;
    v54 = *((_BYTE *)a4 + 792);
    v14 = *(__int128 *)((char *)a4 + 712);
    v48 = *(__int128 *)((char *)a4 + 696);
    v49 = v14;
    v15 = *(__int128 *)((char *)a4 + 728);
    v51 = *(__int128 *)((char *)a4 + 744);
    v50 = v15;
    v35 = 16;
    sub_1001312E8(a1, (uint64_t)&v35);
    sub_100126D5C((uint64_t)&v35);
  }
}

void sub_100120D74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100126D5C((uint64_t)&STACK[0x320]);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100120D90(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100120F68(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100120F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100120F68(uint64_t result, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  uint64_t v5;
  double v6;
  double v7;
  float v8;
  float v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*a3 == 5)
  {
    v5 = result;
    v6 = *(double *)((char *)a4 + 4);
    v7 = *(double *)((char *)a4 + 12);
    v8 = v6;
    v9 = v7;
    (*(void (**)(_QWORD, float, float))(**(_QWORD **)(result + 8256) + 48))(*(_QWORD *)(result + 8256), v8, v9);
    result = *(_QWORD *)(v5 + 8368);
    if (result)
      result = sub_100CAE1D4(result, v6, v7);
    if (*(_BYTE *)(v5 + 10320))
    {
      v10 = *a4;
      *(_OWORD *)(v5 + 9744) = a4[1];
      *(_OWORD *)(v5 + 9728) = v10;
      v11 = a4[2];
      v12 = a4[3];
      v13 = a4[4];
      *(_OWORD *)(v5 + 9808) = a4[5];
      *(_OWORD *)(v5 + 9792) = v13;
      *(_OWORD *)(v5 + 9776) = v12;
      *(_OWORD *)(v5 + 9760) = v11;
      v14 = *(__int128 *)((char *)a4 + 140);
      v15 = a4[6];
      v16 = a4[7];
      *(_OWORD *)(v5 + 9856) = a4[8];
      *(_OWORD *)(v5 + 9840) = v16;
      *(_OWORD *)(v5 + 9824) = v15;
      *(_OWORD *)(v5 + 9868) = v14;
    }
  }
  return result;
}

float *sub_100121024(float *result, float a2, float a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

float *sub_10012102C(uint64_t a1, float a2, float a3)
{
  return sub_100121034(a1 + 440, a2, a3);
}

float *sub_100121034(uint64_t a1, float a2, float a3)
{
  return sub_100121024((float *)(a1 + 48), a2, a3);
}

void sub_10012103C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiTilesManager::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B26E8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiTilesManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B26E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiTilesManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100121224(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100121204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100121224(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  double v7;
  double v8;
  double v9;
  _BOOL4 v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  double v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  NSObject *v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  NSObject *v44;
  unsigned int v45;
  const char *v46;
  int v47;
  const char *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned int v57;
  const char *v58;
  const char *v59;
  const char *v60;
  void *v61[2];
  char v62;
  _BYTE __p[18];
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  void **v67;
  uint8_t buf[4];
  _BYTE v69[14];
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  _BYTE *v73;

  if (!*(_BYTE *)(a1 + 413))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v32 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, ignore leech when LS off", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: onLocationNotification, ignore leech when LS off", __p, 2);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v33);
LABEL_66:
    if (v34 != buf)
      free(v34);
    return;
  }
  if (!*(_BYTE *)(a1 + 217))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v35 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v36 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v69 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v47 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)__p = 67240192;
      *(_DWORD *)&__p[4] = v47;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %{public}d", __p, 8);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
    if (*a3 == 5)
    {
      v37 = *(_OWORD *)a4;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a1 + 232) = v37;
      v38 = *(_OWORD *)(a4 + 32);
      v39 = *(_OWORD *)(a4 + 48);
      v40 = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a1 + 312) = v40;
      *(_OWORD *)(a1 + 264) = v38;
      *(_OWORD *)(a1 + 280) = v39;
      v41 = *(_OWORD *)(a4 + 96);
      v42 = *(_OWORD *)(a4 + 112);
      v43 = *(_OWORD *)(a4 + 128);
      *(_OWORD *)(a1 + 372) = *(_OWORD *)(a4 + 140);
      *(_OWORD *)(a1 + 344) = v42;
      *(_OWORD *)(a1 + 360) = v43;
      *(_OWORD *)(a1 + 328) = v41;
    }
    return;
  }
  if (*a3 == 5)
  {
    v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
    v8 = *(double *)(a1 + 392);
    v9 = *(double *)(a1 + 252);
    v10 = v9 > *(double *)(a4 + 20) && v9 > 100.0;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(_QWORD *)(a1 + 392);
      v12 = *(_QWORD *)(a1 + 400);
      sub_100071A00(a4, __p);
      v14 = (v65 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 134349827;
      *(_QWORD *)v69 = v13;
      *(_WORD *)&v69[8] = 1026;
      *(_DWORD *)&v69[10] = v10;
      v70 = 2050;
      v71 = v12;
      v72 = 2081;
      v73 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s", buf, 0x26u);
      if (SBYTE3(v65) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v50 = qword_1022A0048;
      v52 = *(_QWORD *)(a1 + 392);
      v51 = *(_QWORD *)(a1 + 400);
      sub_100071A00(a4, v61);
      if (v62 >= 0)
        v53 = v61;
      else
        v53 = (void **)v61[0];
      *(_DWORD *)__p = 134349827;
      *(_QWORD *)&__p[4] = v52;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v10;
      v64 = 2050;
      v65 = v51;
      v66 = 2081;
      v67 = v53;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v50, 2, "WIFITILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s", __p, 38);
      v55 = v54;
      if (v62 < 0)
        operator delete(v61[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v55);
      if (v55 != (char *)buf)
        free(v55);
    }
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 248) = v15;
    v16 = *(_OWORD *)(a4 + 32);
    v17 = *(_OWORD *)(a4 + 48);
    v18 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 312) = v18;
    *(_OWORD *)(a1 + 264) = v16;
    *(_OWORD *)(a1 + 280) = v17;
    v19 = *(_OWORD *)(a4 + 96);
    v20 = *(_OWORD *)(a4 + 112);
    v21 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 372) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 344) = v20;
    *(_OWORD *)(a1 + 360) = v21;
    *(_OWORD *)(a1 + 328) = v19;
    v22 = v7 - v8 >= 600.0 || v10;
    if (v22 == 1)
    {
      v23 = *(double *)(a1 + 252);
      if (v23 >= 0.0 && v23 <= 5000.0)
      {
        sub_1002394C4(a1, a1 + 232, v7);
        sub_100075414(a1, 0, v7);
        sub_100238F50(a1, a1 + 232);
        *(double *)(a1 + 392) = v7;
      }
    }
    if (*(_BYTE *)(a1 + 216))
    {
      v24 = v7 - *(double *)(a1 + 400) >= 330.0 || v10;
      if (v24 == 1)
      {
        v25 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 232) = *(_OWORD *)a4;
        *(_OWORD *)(a1 + 248) = v25;
        v26 = *(_OWORD *)(a4 + 32);
        v27 = *(_OWORD *)(a4 + 48);
        v28 = *(_OWORD *)(a4 + 80);
        *(_OWORD *)(a1 + 296) = *(_OWORD *)(a4 + 64);
        *(_OWORD *)(a1 + 312) = v28;
        *(_OWORD *)(a1 + 264) = v26;
        *(_OWORD *)(a1 + 280) = v27;
        v29 = *(_OWORD *)(a4 + 96);
        v30 = *(_OWORD *)(a4 + 112);
        v31 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)(a1 + 372) = *(_OWORD *)(a4 + 140);
        *(_OWORD *)(a1 + 344) = v30;
        *(_OWORD *)(a1 + 360) = v31;
        *(_OWORD *)(a1 + 328) = v29;
        *(double *)(a1 + 400) = v7;
      }
    }
    return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  v44 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v45 = *a3;
    v46 = sub_1001B49F8(*a3);
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v69 = v45;
    *(_WORD *)&v69[4] = 2080;
    *(_QWORD *)&v69[6] = v46;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "WIFITILE: onLocationNotification, unknown notificaiton, %d, %s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v56 = qword_1022A02D8;
    v57 = *a3;
    v58 = sub_1001B49F8(*a3);
    *(_DWORD *)__p = 67109378;
    *(_DWORD *)&__p[4] = v57;
    *(_WORD *)&__p[8] = 2080;
    *(_QWORD *)&__p[10] = v58;
    LODWORD(v60) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 2, "WIFITILE: onLocationNotification, unknown notificaiton, %d, %s", __p, v60);
    v34 = (uint8_t *)v59;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v59);
    goto LABEL_66;
  }
}

void sub_100121C2C(__n128 *a1, __n128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void **v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  double v14;
  __n128 v15;
  int v16;
  unint64_t v17;
  __int16 v18;
  double v19;
  uint8_t buf[4];
  unint64_t v21;
  __int16 v22;
  double v23;

  v15 = *a2;
  v3 = a1[8].n128_u64[1];
  if (v3)
    (*(void (**)(unint64_t, __n128 *))(*(_QWORD *)v3 + 48))(v3, &v15);
  v4 = a1[3].n128_u64[1];
  if (v4)
  {
    v5 = v4 + a1[3].n128_u64[0] - 1;
    v6 = (void **)a1[1].n128_u64[1];
    v7 = (*(double **)((char *)v6 + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)))[2 * v5];
    if (v7 > v15.n128_f64[0])
    {
      v8 = a1[2].n128_u64[0];
      a1[3].n128_u64[1] = 0;
      v9 = v8 - (_QWORD)v6;
      if (v9 >= 0x11)
      {
        do
        {
          operator delete(*v6);
          v10 = a1[2].n128_u64[0];
          v6 = (void **)(a1[1].n128_u64[1] + 8);
          a1[1].n128_u64[1] = (unint64_t)v6;
          v9 = v10 - (_QWORD)v6;
        }
        while (v9 > 0x10);
      }
      if (v9 >> 3 == 1)
      {
        v11 = 128;
      }
      else
      {
        if (v9 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218C9D0);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v21 = v15.n128_u64[0];
            v22 = 2048;
            v23 = v7;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10218C9D0);
            v16 = 134218240;
            v17 = v15.n128_u64[0];
            v18 = 2048;
            v19 = v7;
            LODWORD(v14) = 22;
            v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v16), v14);
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorLocationCoordinate>::add(const T &) [T = CLOutdoorLocationCoordinate]", "%s\n", v13);
            if (v13 != (char *)buf)
              free(v13);
          }
          goto LABEL_17;
        }
        v11 = 256;
      }
      a1[3].n128_u64[0] = v11;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_100121EC8((__n128 *)a1[1].n128_u64, &v15);
  a1[6] = v15;
}

__n128 sub_100121EC8(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E6231C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

uint64_t sub_100121F50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void sub_100121F6C(uint64_t a1, __n128 *a2)
{
  sub_100121C2C((__n128 *)(a1 + 936), a2);
}

void sub_100121F74(uint64_t *a1, float *a2)
{
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  double v14;
  int v15;
  uint64_t *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  uint64_t *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1;
    if (*((char *)a1 + 23) < 0)
      v5 = (uint64_t *)*a1;
    v6 = *(_QWORD *)a2;
    v7 = a2[2];
    v8 = a2[3];
    *(_DWORD *)buf = 136315906;
    v24 = v5;
    v25 = 2048;
    v26 = v6;
    v27 = 2048;
    v28 = v7;
    v29 = 2048;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "LocationCoordinate,context,%s,startTime,%f,latitude,%f,longitude,%f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v9 = *(_QWORD *)a2;
    v10 = a2[2];
    v11 = a2[3];
    v15 = 136315906;
    v16 = a1;
    v17 = 2048;
    v18 = v9;
    v19 = 2048;
    v20 = v10;
    v21 = 2048;
    v22 = v11;
    LODWORD(v14) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "LocationCoordinate,context,%s,startTime,%f,latitude,%f,longitude,%f", (const char *)&v15, v14);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logLocationCoordinate(const CLOutdoorLocationCoordinate &)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_100122194(uint64_t a1, int *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  unint64_t v19;

  CLProfilingIdentify("CLMotionState7::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AFCE0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionState7::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AFCE0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionState7::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10012236C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10012234C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

unint64_t sub_10012236C(unint64_t result, uint64_t a2, int *a3, uint64_t a4)
{
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t i;
  id v18;
  _DWORD v19[39];
  _OWORD v20[8];
  _OWORD v21[2];
  _OWORD v22[8];
  _OWORD v23[2];

  v6 = (unsigned __int8 *)result;
  v7 = *a3;
  if (*a3 > 13)
  {
    if (v7 == 14)
    {
      v18 = sub_101345C5C(result);
      return sub_10006C088(v6, v18, v6[532]);
    }
    else if (v7 == 22)
    {
      v13 = *(_OWORD *)(a4 + 112);
      v20[6] = *(_OWORD *)(a4 + 96);
      v20[7] = v13;
      v21[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(a4 + 140);
      v14 = *(_OWORD *)(a4 + 48);
      v20[2] = *(_OWORD *)(a4 + 32);
      v20[3] = v14;
      v15 = *(_OWORD *)(a4 + 80);
      v20[4] = *(_OWORD *)(a4 + 64);
      v20[5] = v15;
      v16 = *(_OWORD *)(a4 + 16);
      v20[0] = *(_OWORD *)a4;
      v20[1] = v16;
      v19[0] = 9;
      (*(void (**)(unint64_t, _DWORD *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 152))(result, v19, v20, 1, 0xFFFFFFFFLL, 0);
      result = sub_10104BD1C(*(int **)(a4 + 800));
      if (result)
      {
        for (i = 0; i < result; ++i)
        {
          sub_10104B598(*(_QWORD *)(a4 + 800), i, (uint64_t)v19);
          sub_1001242D0((uint64_t)v6, a3, (uint64_t)v19);
          result = sub_10104BD1C(*(int **)(a4 + 800));
        }
      }
    }
  }
  else
  {
    if (v7)
      v8 = v7 == 5;
    else
      v8 = 1;
    if (v8)
    {
      sub_1001242D0(result, a3, a4);
      v9 = *(_OWORD *)(a4 + 112);
      v22[6] = *(_OWORD *)(a4 + 96);
      v22[7] = v9;
      v23[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)(a4 + 140);
      v10 = *(_OWORD *)(a4 + 48);
      v22[2] = *(_OWORD *)(a4 + 32);
      v22[3] = v10;
      v11 = *(_OWORD *)(a4 + 80);
      v22[4] = *(_OWORD *)(a4 + 64);
      v22[5] = v11;
      v12 = *(_OWORD *)(a4 + 16);
      v22[0] = *(_OWORD *)a4;
      v22[1] = v12;
      v19[0] = 9;
      return (*(uint64_t (**)(unsigned __int8 *, _DWORD *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 152))(v6, v19, v22, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

void sub_100122558(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v35[20];
  __int16 v36;
  _QWORD *v37;
  __int16 v38;
  std::__shared_weak_count *v39;
  _QWORD **v40;
  _QWORD *v41[3];
  std::__shared_weak_count *v42;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102147D30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v35 = 2082;
      *(_QWORD *)&v35[2] = "";
      *(_WORD *)&v35[10] = 2082;
      *(_QWORD *)&v35[12] = "activity";
      v36 = 2082;
      v37 = v10;
      v38 = 2050;
      v39 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v40 = v41;
      memset(v41, 0, sizeof(v41));
      v42 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v40);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v35, *(_QWORD **)&v35[8]);
      v21 = v42;
      if (v42)
      {
        v22 = (unint64_t *)&v42->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v40, v41[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0xB8uLL);
      v25 = a3[7];
      *(_OWORD *)(v24 + 120) = a3[6];
      *(_OWORD *)(v24 + 136) = v25;
      v26 = a3[9];
      *(_OWORD *)(v24 + 152) = a3[8];
      *(_OWORD *)(v24 + 168) = v26;
      v27 = a3[3];
      *(_OWORD *)(v24 + 56) = a3[2];
      *(_OWORD *)(v24 + 72) = v27;
      v28 = a3[5];
      *(_OWORD *)(v24 + 88) = a3[4];
      *(_OWORD *)(v24 + 104) = v28;
      v29 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102147E80;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 40) = v29;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v35 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v30 = *(std::__shared_weak_count **)v35;
      if (*(_QWORD *)v35)
      {
        v31 = (unint64_t *)(*(_QWORD *)v35 + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1001249A0();
    os_activity_scope_leave(&state);
  }
}

void sub_100122BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100122C14(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_1001234BC(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_100122FE8(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102147D30);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102147D30);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100122FE8(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1001234BC(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_1001230C4(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_1001234BC(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

id sub_100123110(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB78B1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB78B1 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102147EC0);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionState_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1001234BC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1005EA65C(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100123110(a1);
  else
    return 0;
}

void sub_100123534(uint64_t a1, const CLMotionActivity *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLVehicleStateNotifier::onMotionStateUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLVehicleStateNotifier::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLVehicleStateNotifier::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100123710(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001236EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100123710(uint64_t a1, uint64_t a2, const CLMotionActivity *a3, int *a4)
{
  if (a3->type == 9)
  {
    sub_100123768(a1, (uint64_t)a4);
  }
  else if (a3->type == 1)
  {
    sub_10144C670(a1, a4, a3);
  }
  sub_100123B54(a1);
  sub_10144CB18(a1);
}

void sub_100123768(uint64_t a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  double *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  if (*(double *)(a2 + 20) <= 150.0 && vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a2 + 76)) <= 30.0)
  {
    if (*(_BYTE *)(a1 + 1104))
    {
      v4 = *(double *)(a1 + 1232) + 60.0;
      if (v4 < sub_100124100(*(double *)(a1 + 1240), *(double *)(a1 + 1248), *(double *)(a2 + 4), *(double *)(a2 + 12)))
      {
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        v5 = qword_10229FCB8;
        if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "VEHICULAR: too far from center of DNDLOI", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCB0 != -1)
            dispatch_once(&qword_10229FCB0, &stru_1021B7120);
          v12[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: too far from center of DNDLOI", v12, 2);
          v11 = (uint8_t *)v10;
          sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVisitByLocation(const CLClientLocation &)", "%s\n", v10);
          if (v11 != buf)
            free(v11);
        }
        sub_10144CF90(a1);
      }
    }
    else
    {
      v6 = (double *)(a1 + 1256);
      if (sub_100124100(*(double *)(a1 + 1256), *(double *)(a1 + 1264), *(double *)(a2 + 4), *(double *)(a2 + 12)) >= 10.0
        || !*(_BYTE *)(a1 + 1209)
        || *(double *)(a1 + 1264) == kCLLocationCoordinate2DInvalid.longitude
        || *v6 == kCLLocationCoordinate2DInvalid.latitude)
      {
        *(_OWORD *)v6 = *(_OWORD *)(a2 + 4);
        if (*(_QWORD *)(a1 + 1152) == 2 || *(_BYTE *)(a1 + 1208) || !*(_BYTE *)(a1 + 1209))
          sub_10022E0A8(a1, (_OWORD *)a2);
      }
      else
      {
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        v7 = qword_10229FCB8;
        if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "VEHICULAR: skipping repeated nearby location", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCB0 != -1)
            dispatch_once(&qword_10229FCB0, &stru_1021B7120);
          v12[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "VEHICULAR: skipping repeated nearby location", v12, 2);
          v9 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVisitByLocation(const CLClientLocation &)", "%s\n", v8);
          if (v9 != buf)
            free(v9);
        }
      }
    }
  }
}

void sub_100123B54(uint64_t a1)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v14;
  __objc2_class *v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  const __CFString *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BOOL4 v49;
  uint8_t buf[4];
  const __CFString *v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  _BOOL4 v65;

  v2 = sub_10012409C(a1);
  HIDWORD(v33) = v2;
  if ((v2 & 1) != 0)
    v4 = 1;
  else
    v4 = sub_1001364C8(v3, v2, (_DWORD *)(a1 + 936), (double *)(a1 + 144));
  v5 = 0;
  v3.n128_u64[0] = *(_QWORD *)(a1 + 144);
  if (v3.n128_f64[0] <= 0.0)
  {
    v6 = v4;
  }
  else
  {
    v3.n128_u64[0] = *(_QWORD *)(a1 + 152);
    v6 = v4;
    if (v3.n128_f64[0] < 0.0)
    {
      v5 = *(_DWORD *)(a1 + 1136) == 2;
      if (*(_DWORD *)(a1 + 1136) == 2)
        v6 = 2;
      else
        v6 = v4;
    }
  }
  if (CLMotionActivity::isTypeInVehicle(*(unsigned int *)(a1 + 936), v3))
    v7 = *(_BYTE *)(a1 + 1032) & 0x1F;
  else
    v7 = 0;
  if (*(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0)
    v8 = v7 | 0x10;
  else
    v8 = v7;
  v10 = *(_DWORD *)(a1 + 1272) == 1 || *(_QWORD *)(a1 + 1280) == 1;
  v11 = *(_QWORD *)(a1 + 1152);
  if (v6 != *(_QWORD *)(a1 + 1144)
    || v4 != v11
    || (v11 = v4, v8 != *(_QWORD *)(a1 + 1160))
    || (v11 = v4, *(_QWORD *)(a1 + 1168) != v10))
  {
    if (*(_DWORD *)(a1 + 1136) == 3)
    {
      if (v4 != 2 || v11 == 2)
      {
        v14 = v4 == 2 || v11 != 2;
        if (v14 || *(double *)(a1 + 144) > 0.0 && *(double *)(a1 + 152) < 0.0)
          v12 = 0;
        else
          v12 = 2;
      }
      else
      {
        v12 = 1;
      }
    }
    else
    {
      v12 = 2;
    }
    sub_10144D398((id *)a1, v12);
    *(_QWORD *)(a1 + 1144) = v6;
    *(_QWORD *)(a1 + 1152) = v4;
    *(_QWORD *)(a1 + 1160) = v8;
    *(_QWORD *)(a1 + 1168) = v10;
    v15 = DefaultObserver;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021B7120);
    v16 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(unsigned __int8 *)(a1 + 1104);
      v18 = *(unsigned __int8 *)(a1 + 1208);
      v19 = sub_1001240F8(*(_QWORD *)(a1 + 1112));
      v20 = *(unsigned __int8 *)(a1 + 1140);
      *(_DWORD *)buf = 134350848;
      v51 = (const __CFString *)v4;
      v52 = 2050;
      v53 = v8;
      v54 = 1026;
      v55 = HIDWORD(v33);
      v56 = 1026;
      v57 = v17;
      v15 = DefaultObserver;
      v58 = 1026;
      v59 = v18;
      v60 = 1026;
      v61 = v19;
      v62 = 1026;
      v63 = v20;
      v64 = 1026;
      v65 = v5;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "VEHICULAR: state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u, dndOverride, %{public}u", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021B7120);
      v24 = qword_10229FCB8;
      v25 = *(unsigned __int8 *)(a1 + 1104);
      v26 = *(unsigned __int8 *)(a1 + 1208);
      v27 = sub_1001240F8(*(_QWORD *)(a1 + 1112));
      v28 = *(unsigned __int8 *)(a1 + 1140);
      v34 = 134350848;
      v35 = (const __CFString *)v4;
      v36 = 2050;
      v37 = v8;
      v38 = 1026;
      v39 = HIDWORD(v33);
      v40 = 1026;
      v41 = v25;
      v42 = 1026;
      v43 = v26;
      v44 = 1026;
      v45 = v27;
      v46 = 1026;
      v47 = v28;
      v48 = 1026;
      v49 = v5;
      LODWORD(v33) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "VEHICULAR: state, %{public}lu, hints, %{public}lu, fpSuppress, %{public}u, inDNDLOI, %{public}u, inFastSuppressionRange, %{public}u, wifiPowered, %{public}u, disableFpSuppressDnD, %{public}u, dndOverride, %{public}u", &v34, v33);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVehicularDnd()", "%s\n", v29);
      if (v30 != buf)
        free(v30);
      v15 = DefaultObserver;
    }
    v21 = *(_QWORD *)(a1 + 1568);
    if (v21)
    {
      sub_100CB0AE0(v21, v6, v10, v8);
      v22 = sub_100CB09E4(*(_QWORD *)(a1 + 1568));
      if (v22)
      {
        AnalyticsSendEvent(CFSTR("com.apple.carexperience.vehiclestate"), v22);
        if (v15[81].superclass != (__objc2_class *)-1)
          dispatch_once(&qword_10229FCB0, &stru_1021B7120);
        v23 = qword_10229FCB8;
        if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v51 = CFSTR("com.apple.carexperience.vehiclestate");
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "VEHICULAR: submitted metrics, %@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v15[81].superclass != (__objc2_class *)-1)
            dispatch_once(&qword_10229FCB0, &stru_1021B7120);
          v34 = 138412290;
          v35 = CFSTR("com.apple.carexperience.vehiclestate");
          LODWORD(v33) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "VEHICULAR: submitted metrics, %@", &v34, v33);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLVehicleStateNotifier::updateVehicularDnd()", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
      }
    }
    sub_10144C044(a1);
    sub_10144E6EC((_QWORD *)a1);
  }
}

uint64_t sub_10012409C(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 1292))
    return 1;
  if (!*(_BYTE *)(a1 + 1104) && !*(_BYTE *)(a1 + 1208))
    return 0;
  result = sub_1001240F8(*(_QWORD *)(a1 + 1112));
  if ((_DWORD)result)
    return *(_BYTE *)(a1 + 1140) == 0;
  return result;
}

uint64_t sub_1001240F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 144);
}

long double sub_100124104(double a1, double a2, double a3, double a4)
{
  double v9;
  double v10;
  double v11;

  if (sub_10011E6FC(a1, a2, a3, a4))
    return sub_1010B916C(a1, a2, a3, a4);
  v10 = 0.0;
  v11 = 0.0;
  sub_1001241A4(&v11, &v10, &v9, a1, a2, 0.0, a3, a4, 0.0);
  return sqrt(v10 * v10 + v11 * v11);
}

double sub_1001241A4(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  __double2 v19;
  double v20;
  double result;

  v14 = 360.0;
  if (a5 < 0.0)
    a5 = a5 + 360.0;
  if (a8 < 0.0)
    a8 = a8 + 360.0;
  v15 = a8 - a5;
  if (v15 > 180.0)
  {
    v14 = -360.0;
LABEL_8:
    v15 = v15 + v14;
    goto LABEL_9;
  }
  if (v15 < -180.0)
    goto LABEL_8;
LABEL_9:
  v16 = (a7 - a4) * 0.0174532925;
  v17 = (a6 + a9) * 0.5;
  v18 = v15 * 0.0174532925;
  v19 = __sincos_stret((a4 + a7) * 0.0174532925 * 0.5);
  v20 = sqrt(v19.__sinval * -0.00669437999 * v19.__sinval + 1.0);
  *a1 = v16 * (v17 + 6335439.33 / (v20 * (v20 * v20)));
  *a2 = v19.__cosval * (v17 + 6378137.0 / v20) * v18;
  result = a9 - a6;
  *a3 = a9 - a6;
  return result;
}

void sub_1001242D0(uint64_t a1, int *a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int32x2_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t buf;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  CFAbsoluteTime v67;
  uint64_t v68;
  char v69;
  uint64_t (**v70)();
  CFAbsoluteTime Current;
  uint64_t v72;
  _BYTE v73[10];
  __int16 v74;
  _BYTE v75[20];
  _BYTE v76[32];
  uint64_t v77;
  __int128 v78;
  char v79;

  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
  v6 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *a2;
    v8 = *(_DWORD *)(a3 + 96);
    v9 = *(_QWORD *)(a3 + 44);
    v10 = *(_QWORD *)(a3 + 52);
    v11 = *(_QWORD *)(a3 + 76);
    v12 = *(_QWORD *)(a3 + 20);
    v13 = *(_QWORD *)(a3 + 4);
    v14 = *(_QWORD *)(a3 + 12);
    LODWORD(buf) = 67110912;
    HIDWORD(buf) = v7;
    v53 = 1024;
    v54 = v8;
    v55 = 2048;
    v56 = v9;
    v57 = 2048;
    v58 = v10;
    v59 = 2048;
    v60 = v11;
    v61 = 2048;
    v62 = v12;
    v63 = 2048;
    v64 = v13;
    v65 = 2048;
    v66 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Notification, Type, Speed, SpeedUncertainty, LocationTimestamp, hAcc, Lat, Long, %d, %d, %f, %f, %f, %f, %f, %f", (uint8_t *)&buf, 0x4Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
    v43 = *a2;
    v44 = *(_DWORD *)(a3 + 96);
    v45 = *(_QWORD *)(a3 + 44);
    v46 = *(_QWORD *)(a3 + 52);
    v47 = *(_QWORD *)(a3 + 76);
    v48 = *(_QWORD *)(a3 + 20);
    v49 = *(_QWORD *)(a3 + 4);
    v50 = *(_QWORD *)(a3 + 12);
    LODWORD(v70) = 67110912;
    HIDWORD(v70) = v43;
    LOWORD(Current) = 1024;
    *(_DWORD *)((char *)&Current + 2) = v44;
    HIWORD(Current) = 2048;
    v72 = v45;
    *(_WORD *)v73 = 2048;
    *(_QWORD *)&v73[2] = v46;
    v74 = 2048;
    *(_QWORD *)v75 = v47;
    *(_WORD *)&v75[8] = 2048;
    *(_QWORD *)&v75[10] = v48;
    *(_WORD *)&v75[18] = 2048;
    *(_QWORD *)v76 = v49;
    *(_WORD *)&v76[8] = 2048;
    *(_QWORD *)&v76[10] = v50;
    v51 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "Notification, Type, Speed, SpeedUncertainty, LocationTimestamp, hAcc, Lat, Long, %d, %d, %f, %f, %f, %f, %f, %f", &v70, 74);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionState7::logLocation(const CLLocationProvider_Type::Notification &, const CLDaemonLocation &) const", "%s\n", v51);
    if (v51 != (char *)&buf)
      free(v51);
  }
  if (*(_BYTE *)(a1 + 528))
  {
    v70 = off_102171A40;
    v73[8] = *(_DWORD *)(a3 + 96);
    *(_OWORD *)&v75[4] = *(_OWORD *)(a3 + 44);
    v15 = *(_BYTE *)(a1 + 530);
    v16 = vdup_n_s32(v15 == 0);
    v17.i64[0] = v16.u32[0];
    v17.i64[1] = v16.u32[1];
    *(int8x16_t *)v76 = vandq_s8(*(int8x16_t *)(a3 + 4), (int8x16_t)vcgezq_s64(vshlq_n_s64(v17, 0x3FuLL)));
    *(_OWORD *)&v76[16] = *(_OWORD *)(a3 + 20);
    v77 = *(_QWORD *)(a3 + 36);
    v78 = *(_OWORD *)(a3 + 60);
    v79 = v15;
    *(_QWORD *)v73 = *(_QWORD *)(a3 + 76);
    Current = CFAbsoluteTimeGetCurrent();
    v18 = sub_1011B78D4();
    sub_1011B8DB0(v18, (uint64_t)&v70);
    sub_1015EB864(&buf);
    sub_101605154((uint64_t)&buf);
    v69 |= 1u;
    v67 = Current;
    v19 = v68;
    v20 = *(_QWORD *)(a3 + 76);
    *(_WORD *)(v68 + 100) |= 0x100u;
    *(_QWORD *)(v19 + 72) = v20;
    v21 = v68;
    v22 = *(_DWORD *)(a3 + 96);
    *(_WORD *)(v68 + 100) |= 0x1000u;
    *(_DWORD *)(v21 + 96) = v22;
    v23 = v68;
    v24 = *(_QWORD *)(a3 + 44);
    *(_WORD *)(v68 + 100) |= 0x40u;
    *(_QWORD *)(v23 + 56) = v24;
    v25 = v68;
    v26 = *(_QWORD *)(a3 + 52);
    *(_WORD *)(v68 + 100) |= 0x80u;
    *(_QWORD *)(v25 + 64) = v26;
    v27 = v68;
    v28 = *(double *)(a3 + 4);
    if (!*(_BYTE *)(a1 + 530))
      v28 = 0.0;
    *(_WORD *)(v68 + 100) |= 0x10u;
    *(double *)(v27 + 40) = v28;
    v29 = v68;
    v30 = *(double *)(a3 + 12);
    if (!*(_BYTE *)(a1 + 530))
      v30 = 0.0;
    *(_WORD *)(v68 + 100) |= 0x20u;
    *(double *)(v29 + 48) = v30;
    v31 = v68;
    v32 = *(_QWORD *)(a3 + 20);
    *(_WORD *)(v68 + 100) |= 8u;
    *(_QWORD *)(v31 + 32) = v32;
    v33 = v68;
    v34 = *(_QWORD *)(a3 + 28);
    *(_WORD *)(v68 + 100) |= 1u;
    *(_QWORD *)(v33 + 8) = v34;
    v35 = v68;
    v36 = *(_QWORD *)(a3 + 36);
    *(_WORD *)(v68 + 100) |= 0x200u;
    *(_QWORD *)(v35 + 80) = v36;
    v37 = v68;
    v38 = *(_QWORD *)(a3 + 60);
    *(_WORD *)(v68 + 100) |= 2u;
    *(_QWORD *)(v37 + 16) = v38;
    v39 = v68;
    v40 = *(_QWORD *)(a3 + 68);
    *(_WORD *)(v68 + 100) |= 4u;
    *(_QWORD *)(v39 + 24) = v40;
    v41 = v68;
    v42 = *(unsigned __int8 *)(a1 + 530);
    *(_WORD *)(v68 + 100) |= 0x800u;
    *(_DWORD *)(v41 + 92) = v42;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021AFD20);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)&buf);
    sub_1015EE304((PB::Base *)&buf);
  }
}

void sub_100124780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1001247A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  ++*(_DWORD *)(a1 + 436);
  v3 = *(unsigned int *)(a2 + 96);
  if (v3 > 0xD)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      v6 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67109120;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "The location type is undefined (%d).", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v7 = *(_DWORD *)(a2 + 96);
      v9[0] = 67109120;
      v9[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 16, "The location type is undefined (%d).", v9);
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::updateLocationUpdateSessionWithLocation(const CLClientLocation &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    ++*(_DWORD *)(a1 + 496);
  }
  else
  {
    ++*(_DWORD *)(a1 + 4 * v3 + 440);
  }
  if (*(_BYTE *)(a1 + 58))
    ++*(_DWORD *)(a1 + 500);
}

void sub_1001249A0()
{
  operator new();
}

void sub_100124A50(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  NSObject *v33;
  int v34;
  void **v35;
  void **v36;
  std::string *p_p;
  __n128 v38;
  __n128 v39;
  std::string __p;
  __n128 v41;
  _QWORD v42[5];
  uint64_t v43[2];
  void *v44[2];
  char v45;
  _BYTE v46[2208];
  _BYTE v47[3528];
  _DWORD v48[2];
  __int16 v49;
  const char *v50;
  __int16 v51;
  void **v52;
  __int16 v53;
  std::string *v54;
  _BYTE v55[2208];
  _BYTE v56[3536];
  _DWORD v57[202];
  _BYTE v58[856];
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[72];
  __int128 v62;
  _OWORD v63[2];
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  __int16 v68;
  uint64_t v69;
  char v70;
  __int16 v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  std::string v76;
  _BYTE v77[3480];
  _DWORD v78[7];
  char v79;
  uint64_t v80;
  char v81;
  _DWORD v82[202];
  _BYTE v83[2208];
  _BYTE v84[3528];

  sub_100129E24(v82);
  sub_100129E24(v57);
  sub_100125B54((uint64_t)v82, a2);
  sub_1001262B0((uint64_t)v84, a2 + 808);
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_100134E88;
  v42[3] = &unk_10217D888;
  v42[4] = a2;
  v43[0] = mach_absolute_time();
  v43[1] = (uint64_t)v42;
  nullsub_34(&__p);
  sub_10012FB60((uint64_t)v82, v44);
  sub_10012EBF4(v44, v48);
  sub_100125B54((uint64_t)v82, (uint64_t)v48);
  sub_100125F78((uint64_t)v83, (uint64_t)v55);
  sub_1001262B0((uint64_t)v84, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  sub_10012FEAC((uint64_t)v82, v44);
  sub_10012F288((int *)v44, v48);
  sub_100125B54((uint64_t)v82, (uint64_t)v48);
  sub_100125F78((uint64_t)v83, (uint64_t)v55);
  sub_1001262B0((uint64_t)v84, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  sub_100130054((uint64_t)v82, v44);
  sub_10012F578((uint64_t *)a1, v44, v48);
  sub_100125B54((uint64_t)v82, (uint64_t)v48);
  sub_100125F78((uint64_t)v83, (uint64_t)v55);
  sub_1001262B0((uint64_t)v84, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  v6 = *(_QWORD *)(a1 + 24);
  v41.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v41.n128_u64[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_10012FA64((__n128 *)&__p, &v41);
  sub_1001308D8((uint64_t)v82, v44);
  sub_100130434((uint64_t *)&__p, (int *)v44, v48);
  sub_100125B54((uint64_t)v82, (uint64_t)v48);
  sub_100125F78((uint64_t)v83, (uint64_t)v55);
  sub_1001262B0((uint64_t)v84, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)v41.n128_u64[1];
  if (v41.n128_u64[1])
  {
    v13 = (unint64_t *)(v41.n128_u64[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  sub_1001309F0(&__p, (__int128 *)(a1 + 32));
  sub_100130A3C((uint64_t)v82, v44);
  sub_10013060C(&__p, (int *)v44, v48);
  sub_100125B54((uint64_t)v82, (uint64_t)v48);
  sub_100125F78((uint64_t)v83, (uint64_t)v55);
  sub_1001262B0((uint64_t)v84, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = *(_QWORD *)(a1 + 24);
  v39.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v39.n128_u64[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  sub_10012FA64((__n128 *)&__p, &v39);
  sub_10012FA74((uint64_t)v82, v44);
  sub_10012E8EC((uint64_t *)&__p, (int *)v44, v48);
  sub_100125B54((uint64_t)v82, (uint64_t)v48);
  sub_100125F78((uint64_t)v83, (uint64_t)v55);
  sub_1001262B0((uint64_t)v84, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  v18 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)v39.n128_u64[1];
  if (v39.n128_u64[1])
  {
    v22 = (unint64_t *)(v39.n128_u64[1] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  sub_100130314(a3);
  sub_1001262B0(a3 + 1352, (uint64_t)v84);
  sub_100130140((uint64_t)v82, v44);
  sub_10012F770((int *)v44, v48);
  sub_100125B54((uint64_t)v57, (uint64_t)v48);
  sub_100125F78((uint64_t)v58, (uint64_t)v55);
  sub_1001262B0((uint64_t)v77, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  *(_OWORD *)(a3 + 216) = *(_OWORD *)&v61[56];
  *(_OWORD *)(a3 + 232) = v62;
  *(_OWORD *)(a3 + 248) = v63[0];
  *(_OWORD *)(a3 + 257) = *(_OWORD *)((char *)v63 + 9);
  nullsub_34(&__p);
  sub_10012F9A8((uint64_t)v82, v44);
  sub_10012E7BC((int *)v44, v48);
  sub_100125B54((uint64_t)v57, (uint64_t)v48);
  sub_100125F78((uint64_t)v58, (uint64_t)v55);
  sub_1001262B0((uint64_t)v77, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  sub_10055B0CC(a3, (uint64_t)&v60);
  sub_10055B158(a3 + 56, (uint64_t)v61);
  sub_1001262B0(a3 + 1352, (uint64_t)v77);
  sub_100130258((uint64_t)v82, v44);
  sub_10012F898((int *)v44, v48);
  sub_100125B54((uint64_t)v57, (uint64_t)v48);
  sub_100125F78((uint64_t)v58, (uint64_t)v55);
  sub_1001262B0((uint64_t)v77, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  sub_10055ADF0(a3 + 112, (uint64_t)&v59);
  *(_DWORD *)(a3 + 208) = v64;
  *(_BYTE *)(a3 + 212) = v65;
  sub_10012FC1C((uint64_t)v82, v44);
  sub_10012DC20((int *)v44, v48);
  sub_100125B54((uint64_t)v57, (uint64_t)v48);
  sub_100125F78((uint64_t)v58, (uint64_t)v55);
  sub_1001262B0((uint64_t)v77, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  *(_QWORD *)(a3 + 280) = v66;
  *(_BYTE *)(a3 + 288) = v67;
  *(_WORD *)(a3 + 296) = v68;
  *(_QWORD *)(a3 + 304) = v69;
  *(_BYTE *)(a3 + 312) = v70;
  *(_WORD *)(a3 + 320) = v71;
  v24 = *(_QWORD *)(a1 + 24);
  v38.n128_u64[0] = *(_QWORD *)(a1 + 16);
  v38.n128_u64[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  sub_10012FA64((__n128 *)&__p, &v38);
  sub_10012FF68((uint64_t)v82, v44);
  sub_10012F3BC((uint64_t *)&__p, (int *)v44, v48);
  sub_100125B54((uint64_t)v57, (uint64_t)v48);
  sub_100125F78((uint64_t)v58, (uint64_t)v55);
  sub_1001262B0((uint64_t)v77, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  v27 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v28 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)v38.n128_u64[1];
  if (v38.n128_u64[1])
  {
    v31 = (unint64_t *)(v38.n128_u64[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_WORD *)(a3 + 322) = v72;
  sub_10055B1E4(a3 + 328, (uint64_t)&v73);
  sub_10055B34C(a3 + 1136, (uint64_t)&v74);
  *(_QWORD *)(a3 + 4852) = *(_QWORD *)&v78[5];
  *(_BYTE *)(a3 + 4860) = v79;
  *(_QWORD *)(a3 + 4864) = v80;
  *(_BYTE *)(a3 + 4872) = v81;
  sub_100349198((_QWORD *)(a3 + 4832), (uint64_t *)v78);
  sub_10012FCD8((uint64_t)v82, v44);
  sub_10012F008((int *)v44, v48);
  sub_100125B54((uint64_t)v57, (uint64_t)v48);
  sub_100125F78((uint64_t)v58, (uint64_t)v55);
  sub_1001262B0((uint64_t)v77, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  sub_10055B67C(a3 + 1168, (uint64_t)&v75);
  sub_10012FDF0((uint64_t)v82, v44);
  sub_10012F164((int *)v44, v48);
  sub_100125B54((uint64_t)v57, (uint64_t)v48);
  sub_100125F78((uint64_t)v58, (uint64_t)v55);
  sub_1001262B0((uint64_t)v77, (uint64_t)v56);
  sub_100126B34((uint64_t)v56);
  sub_100126A1C((uint64_t)v55);
  sub_100126D5C((uint64_t)v48);
  sub_100126B34((uint64_t)v47);
  sub_100126A1C((uint64_t)v46);
  sub_100126D5C((uint64_t)v44);
  sub_1003AF708((std::string *)(a3 + 1320), &v76);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10219C4A8);
  v33 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    sub_1001C4494(a2 + 3832, v44);
    v34 = v45;
    v35 = (void **)v44[0];
    sub_1001C4494(a3 + 4376, &__p);
    v36 = v44;
    if (v34 < 0)
      v36 = v35;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v48[0] = 68289538;
    v48[1] = 0;
    v49 = 2082;
    v50 = "";
    v51 = 2082;
    v52 = v36;
    v53 = 2082;
    v54 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"wifi location update request state change\", \"before\":%{public, location:escape_only}s, \"after\":%{public, location:escape_only}s}", (uint8_t *)v48, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v45 < 0)
      operator delete(v44[0]);
  }
  sub_100134E40(v43);
  sub_100126B34((uint64_t)v77);
  sub_100126A1C((uint64_t)v58);
  sub_100126D5C((uint64_t)v57);
  sub_100126B34((uint64_t)v84);
  sub_100126A1C((uint64_t)v83);
  sub_100126D5C((uint64_t)v82);
}

void sub_100125868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
    operator delete(__p);
  sub_1001316A8(v39);
  sub_100134E40(&a32);
  sub_10055829C((uint64_t)&STACK[0x33B8]);
  sub_10055829C((uint64_t)&STACK[0x4D48]);
  _Unwind_Resume(a1);
}

void sub_100125B54(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  int v7;
  _BYTE *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  int v28;

  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v6 = (_BYTE *)(a2 + 8);
    v27 = a2 + 8;
    v7 = v4 ^ (v4 >> 31);
    v8 = (_BYTE *)(a1 + 8);
    switch(v7)
    {
      case 0:
      case 1:
      case 2:
      case 13:
      case 17:
      case 27:
      case 28:
      case 29:
        return;
      case 3:
      case 12:
      case 14:
      case 23:
        *v8 = *v6;
        return;
      case 4:
      case 9:
      case 11:
      case 15:
      case 19:
      case 22:
      case 25:
      case 26:
        *(_DWORD *)v8 = *(_DWORD *)v6;
        return;
      case 5:
      case 6:
        sub_10031F180(a1 + 8, (uint64_t)v6);
        return;
      case 7:
        sub_100135990(&v27, a1 + 8);
        return;
      case 8:
        sub_10055A20C(&v27, a1 + 8);
        return;
      case 10:
      case 20:
      case 21:
        *(_QWORD *)v8 = *(_QWORD *)v6;
        return;
      case 16:
        v10 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)v8 = *(_OWORD *)v6;
        *(_OWORD *)(a1 + 24) = v10;
        v11 = *(_OWORD *)(a2 + 40);
        v12 = *(_OWORD *)(a2 + 56);
        v13 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = v13;
        *(_OWORD *)(a1 + 40) = v11;
        *(_OWORD *)(a1 + 56) = v12;
        v14 = *(_OWORD *)(a2 + 104);
        v15 = *(_OWORD *)(a2 + 120);
        v16 = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
        *(_OWORD *)(a1 + 120) = v15;
        *(_OWORD *)(a1 + 136) = v16;
        *(_OWORD *)(a1 + 104) = v14;
        memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
        sub_100349198((_QWORD *)(a1 + 688), (uint64_t *)(a2 + 688));
        v18 = *(_OWORD *)(a2 + 720);
        v17 = *(_OWORD *)(a2 + 736);
        *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
        *(_OWORD *)(a1 + 720) = v18;
        *(_OWORD *)(a1 + 736) = v17;
        v20 = *(_OWORD *)(a2 + 768);
        v19 = *(_OWORD *)(a2 + 784);
        v21 = *(_OWORD *)(a2 + 752);
        *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
        *(_OWORD *)(a1 + 768) = v20;
        *(_OWORD *)(a1 + 784) = v19;
        *(_OWORD *)(a1 + 752) = v21;
        return;
      case 18:
        *(_OWORD *)v8 = *(_OWORD *)v6;
        return;
      case 24:
        v22 = *(_QWORD *)v6;
        *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
        *(_QWORD *)v8 = v22;
        std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        v24 = *(_OWORD *)(a2 + 80);
        v23 = *(_OWORD *)(a2 + 96);
        v25 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
        *(_OWORD *)(a1 + 80) = v24;
        *(_OWORD *)(a1 + 96) = v23;
        *(_OWORD *)(a1 + 64) = v25;
        std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
        return;
      default:
        goto LABEL_44;
    }
  }
  v27 = a1;
  v28 = v5 ^ (v5 >> 31);
  v9 = (__int128 *)(a2 + 8);
  switch(v28)
  {
    case 0:
      sub_100126D5C(a1);
      *(_DWORD *)a1 = 0;
      return;
    case 1:
      sub_100126D5C(a1);
      v26 = 1;
      goto LABEL_42;
    case 2:
      sub_100126D5C(a1);
      v26 = 2;
      goto LABEL_42;
    case 3:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      v26 = 3;
      goto LABEL_42;
    case 4:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 4;
      goto LABEL_42;
    case 5:
    case 6:
      sub_10055A640((uint64_t)&v27, (uint64_t)v9);
      return;
    case 7:
      sub_10012CABC((uint64_t)&v27, (uint64_t)v9);
      return;
    case 8:
      sub_10055A700((uint64_t)&v27, (uint64_t)v9);
      return;
    case 9:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 9;
      goto LABEL_42;
    case 10:
      sub_100126D5C(a1);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v9;
      v26 = 10;
      goto LABEL_42;
    case 11:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 11;
      goto LABEL_42;
    case 12:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      v26 = 12;
      goto LABEL_42;
    case 13:
      sub_100126D5C(a1);
      v26 = 13;
      goto LABEL_42;
    case 14:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      v26 = 14;
      goto LABEL_42;
    case 15:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 15;
      goto LABEL_42;
    case 16:
      sub_100126C78((uint64_t)&v27, v9);
      return;
    case 17:
      sub_100126D5C(a1);
      v26 = 17;
      goto LABEL_42;
    case 18:
      sub_100126D5C(a1);
      *(_OWORD *)(a1 + 8) = *v9;
      v26 = 18;
      goto LABEL_42;
    case 19:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 19;
      goto LABEL_42;
    case 20:
      sub_100126D5C(a1);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v9;
      v26 = 20;
      goto LABEL_42;
    case 21:
      sub_100126D5C(a1);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v9;
      v26 = 21;
      goto LABEL_42;
    case 22:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 22;
      goto LABEL_42;
    case 23:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *(_BYTE *)v9;
      v26 = 23;
      goto LABEL_42;
    case 24:
      sub_10012A5B4((uint64_t)&v27, (uint64_t *)v9);
      return;
    case 25:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 25;
      goto LABEL_42;
    case 26:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v9;
      v26 = 26;
      goto LABEL_42;
    case 27:
      sub_100126D5C(a1);
      v26 = 27;
      goto LABEL_42;
    case 28:
      sub_100126D5C(a1);
      v26 = 28;
      goto LABEL_42;
    case 29:
      sub_100126D5C(a1);
      v26 = 29;
LABEL_42:
      *(_DWORD *)a1 = v26;
      return;
    default:
LABEL_44:
      sub_10055A5D8();
  }
}

uint64_t sub_100125F78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 64) = v7;
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  v8 = *(_OWORD *)(a2 + 184);
  v9 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  v10 = *(_OWORD *)(a2 + 216);
  v11 = *(_OWORD *)(a2 + 232);
  v12 = *(_OWORD *)(a2 + 241);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 241) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 216) = v10;
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  }
  else
  {
    sub_10055A83C(a1 + 264, *(uint64_t **)(a2 + 264), *(uint64_t **)(a2 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 3));
    *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
    *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
    sub_1001261BC((_QWORD *)(a1 + 296), *(_QWORD **)(a2 + 312), 0);
    *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
    sub_1001267C4((_QWORD *)(a1 + 336), *(uint64_t **)(a2 + 352), 0);
    *(_DWORD *)(a1 + 408) = *(_DWORD *)(a2 + 408);
    sub_1001268EC((_QWORD *)(a1 + 376), *(uint64_t **)(a2 + 392), 0);
    *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
    sub_1001261BC((_QWORD *)(a1 + 416), *(_QWORD **)(a2 + 432), 0);
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a2 + 488);
    sub_1001261BC((_QWORD *)(a1 + 456), *(_QWORD **)(a2 + 472), 0);
  }
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x120uLL);
  sub_1003AF708((std::string *)(a1 + 784), (const std::string *)(a2 + 784));
  *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  if (a1 != a2)
    sub_10055ABFC((char *)(a1 + 824), *(char **)(a2 + 824), *(_QWORD *)(a2 + 832), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 832) - *(_QWORD *)(a2 + 824)) >> 3));
  *(_WORD *)(a1 + 848) = *(_WORD *)(a2 + 848);
  sub_10055ADF0(a1 + 856, a2 + 856);
  sub_10055B0CC(a1 + 952, a2 + 952);
  sub_10055B158(a1 + 1008, a2 + 1008);
  v13 = *(_OWORD *)(a2 + 1064);
  v14 = *(_OWORD *)(a2 + 1080);
  v15 = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = v15;
  *(_OWORD *)(a1 + 1064) = v13;
  *(_OWORD *)(a1 + 1080) = v14;
  v16 = *(_OWORD *)(a2 + 1128);
  v17 = *(_OWORD *)(a2 + 1144);
  v18 = *(_OWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v17;
  *(_OWORD *)(a1 + 1160) = v18;
  *(_OWORD *)(a1 + 1128) = v16;
  sub_10055B1E4(a1 + 1184, a2 + 1184);
  sub_10055B34C(a1 + 1992, a2 + 1992);
  sub_10055B67C(a1 + 2024, a2 + 2024);
  sub_1003AF708((std::string *)(a1 + 2176), (const std::string *)(a2 + 2176));
  return a1;
}

void sub_1001261BC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      v9 = (_QWORD *)*v8;
      sub_100129080(a1, v8);
      a2 = (_QWORD *)*a2;
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v10 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_100128F68(a1, a2 + 2);
      a2 = (_QWORD *)*a2;
    }
  }
}

void sub_10012627C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_10012629C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1001262B0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  sub_100349198((_QWORD *)(a1 + 144), (uint64_t *)(a2 + 144));
  sub_100349198((_QWORD *)(a1 + 160), (uint64_t *)(a2 + 160));
  sub_10012664C((_QWORD *)(a1 + 184), (_QWORD *)(a2 + 184));
  sub_10031F180(a1 + 232, a2 + 232);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  v10 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v10;
  v11 = *(_OWORD *)(a2 + 368);
  v12 = *(_OWORD *)(a2 + 384);
  v13 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v13;
  *(_OWORD *)(a1 + 368) = v11;
  *(_OWORD *)(a1 + 384) = v12;
  v14 = *(_OWORD *)(a2 + 432);
  v15 = *(_OWORD *)(a2 + 448);
  v16 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 476) = *(_OWORD *)(a2 + 476);
  *(_OWORD *)(a1 + 448) = v15;
  *(_OWORD *)(a1 + 464) = v16;
  *(_OWORD *)(a1 + 432) = v14;
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 1016), (uint64_t *)(a2 + 1016));
  v17 = *(_OWORD *)(a2 + 1032);
  v18 = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1064) = v18;
  *(_OWORD *)(a1 + 1032) = v17;
  v19 = *(_OWORD *)(a2 + 1080);
  v20 = *(_OWORD *)(a2 + 1096);
  v21 = *(_OWORD *)(a2 + 1112);
  *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
  *(_OWORD *)(a1 + 1096) = v20;
  *(_OWORD *)(a1 + 1112) = v21;
  *(_OWORD *)(a1 + 1080) = v19;
  v22 = *(_OWORD *)(a2 + 1248);
  v23 = *(_OWORD *)(a2 + 1264);
  v24 = *(_OWORD *)(a2 + 1232);
  *(_OWORD *)(a1 + 1276) = *(_OWORD *)(a2 + 1276);
  *(_OWORD *)(a1 + 1232) = v24;
  *(_OWORD *)(a1 + 1264) = v23;
  *(_OWORD *)(a1 + 1248) = v22;
  v25 = *(_OWORD *)(a2 + 1184);
  v26 = *(_OWORD *)(a2 + 1200);
  v27 = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1168) = v27;
  *(_OWORD *)(a1 + 1200) = v26;
  *(_OWORD *)(a1 + 1184) = v25;
  v28 = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1152) = v28;
  memcpy((void *)(a1 + 1296), (const void *)(a2 + 1296), 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 1816), (uint64_t *)(a2 + 1816));
  v30 = *(_OWORD *)(a2 + 1848);
  v29 = *(_OWORD *)(a2 + 1864);
  *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
  *(_OWORD *)(a1 + 1848) = v30;
  *(_OWORD *)(a1 + 1864) = v29;
  v32 = *(_OWORD *)(a2 + 1896);
  v31 = *(_OWORD *)(a2 + 1912);
  v33 = *(_OWORD *)(a2 + 1880);
  *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
  *(_OWORD *)(a1 + 1896) = v32;
  *(_OWORD *)(a1 + 1912) = v31;
  *(_OWORD *)(a1 + 1880) = v33;
  *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a2 + 1936);
  sub_10055C058((_QWORD *)(a1 + 1944), (_QWORD *)(a2 + 1944));
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a2 + 1992);
  memcpy((void *)(a1 + 2000), (const void *)(a2 + 2000), 0x170uLL);
  memcpy((void *)(a1 + 2368), (const void *)(a2 + 2368), 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 2888), (uint64_t *)(a2 + 2888));
  v35 = *(_OWORD *)(a2 + 2920);
  v34 = *(_OWORD *)(a2 + 2936);
  *(_OWORD *)(a1 + 2904) = *(_OWORD *)(a2 + 2904);
  *(_OWORD *)(a1 + 2920) = v35;
  *(_OWORD *)(a1 + 2936) = v34;
  v37 = *(_OWORD *)(a2 + 2968);
  v36 = *(_OWORD *)(a2 + 2984);
  v38 = *(_OWORD *)(a2 + 2952);
  *(_BYTE *)(a1 + 3000) = *(_BYTE *)(a2 + 3000);
  *(_OWORD *)(a1 + 2968) = v37;
  *(_OWORD *)(a1 + 2984) = v36;
  *(_OWORD *)(a1 + 2952) = v38;
  v39 = *(_BYTE *)(a2 + 3016);
  *(_QWORD *)(a1 + 3008) = *(_QWORD *)(a2 + 3008);
  *(_BYTE *)(a1 + 3016) = v39;
  v40 = *(_BYTE *)(a2 + 3032);
  *(_QWORD *)(a1 + 3024) = *(_QWORD *)(a2 + 3024);
  *(_BYTE *)(a1 + 3032) = v40;
  std::string::operator=((std::string *)(a1 + 3040), (const std::string *)(a2 + 3040));
  *(_OWORD *)(a1 + 3064) = *(_OWORD *)(a2 + 3064);
  v41 = *(_OWORD *)(a2 + 3096);
  v42 = *(_OWORD *)(a2 + 3112);
  v43 = *(_OWORD *)(a2 + 3124);
  *(_OWORD *)(a1 + 3080) = *(_OWORD *)(a2 + 3080);
  *(_OWORD *)(a1 + 3124) = v43;
  *(_OWORD *)(a1 + 3112) = v42;
  *(_OWORD *)(a1 + 3096) = v41;
  std::string::operator=((std::string *)(a1 + 3144), (const std::string *)(a2 + 3144));
  v44 = *(_OWORD *)(a2 + 3200);
  v45 = *(_OWORD *)(a2 + 3184);
  *(_OWORD *)(a1 + 3168) = *(_OWORD *)(a2 + 3168);
  *(_OWORD *)(a1 + 3184) = v45;
  *(_OWORD *)(a1 + 3200) = v44;
  v46 = *(_OWORD *)(a2 + 3232);
  v47 = *(_OWORD *)(a2 + 3248);
  v48 = *(_OWORD *)(a2 + 3264);
  *(_OWORD *)(a1 + 3216) = *(_OWORD *)(a2 + 3216);
  *(_OWORD *)(a1 + 3264) = v48;
  *(_OWORD *)(a1 + 3248) = v47;
  *(_OWORD *)(a1 + 3232) = v46;
  v49 = *(_OWORD *)(a2 + 3296);
  v50 = *(_OWORD *)(a2 + 3312);
  v51 = *(_BYTE *)(a2 + 3328);
  *(_OWORD *)(a1 + 3280) = *(_OWORD *)(a2 + 3280);
  *(_BYTE *)(a1 + 3328) = v51;
  *(_OWORD *)(a1 + 3312) = v50;
  *(_OWORD *)(a1 + 3296) = v49;
  if (a1 != a2)
  {
    sub_10055A83C(a1 + 3336, *(uint64_t **)(a2 + 3336), *(uint64_t **)(a2 + 3344), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 3344) - *(_QWORD *)(a2 + 3336)) >> 3));
    *(_DWORD *)(a1 + 3392) = *(_DWORD *)(a2 + 3392);
    sub_1001261BC((_QWORD *)(a1 + 3360), *(_QWORD **)(a2 + 3376), 0);
  }
  v52 = *(_OWORD *)(a2 + 3400);
  *(_QWORD *)(a1 + 3416) = *(_QWORD *)(a2 + 3416);
  *(_OWORD *)(a1 + 3400) = v52;
  v53 = *(_OWORD *)(a2 + 3424);
  v54 = *(_OWORD *)(a2 + 3440);
  v55 = *(_OWORD *)(a2 + 3456);
  *(_QWORD *)(a1 + 3471) = *(_QWORD *)(a2 + 3471);
  *(_OWORD *)(a1 + 3456) = v55;
  *(_OWORD *)(a1 + 3440) = v54;
  *(_OWORD *)(a1 + 3424) = v53;
  sub_100349198((_QWORD *)(a1 + 3480), (uint64_t *)(a2 + 3480));
  v56 = *(_OWORD *)(a2 + 3505);
  *(_OWORD *)(a1 + 3496) = *(_OWORD *)(a2 + 3496);
  *(_OWORD *)(a1 + 3505) = v56;
  return a1;
}

_QWORD *sub_10012664C(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;

  if (a1 != a2)
  {
    v4 = a2[4];
    v5 = a2[1];
    v6 = a2[2];
    v7 = (char **)(v5 + 8 * (v4 >> 8));
    if (v6 == v5)
    {
      v8 = 0;
      v11 = 0;
      v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
    }
    else
    {
      v8 = &(*v7)[16 * v4];
      v9 = a2[5] + v4;
      v10 = (char *)(v5 + 8 * (v9 >> 8));
      v11 = (char *)(*(_QWORD *)v10 + 16 * v9);
    }
    sub_10055B854(a1, v7, v8, v10, v11);
  }
  return a1;
}

uint64_t sub_1001266D4(uint64_t result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 32);
  v5 = v4 + *(_QWORD *)(result + 40);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(_QWORD *)(result + 16);
  v8 = (char *)(v6 + 8 * (v5 >> 8));
  if (v7 == v6)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 16 * v5;
  if (v9 != a3)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 4) + 32 * (v8 - a2);
    v11 = a3 - *(_QWORD *)a2;
    v12 = v10 - (v11 >> 4);
    if (v12 >= 1)
    {
      v13 = (char *)(v6 + 8 * (v4 >> 8));
      if (v7 == v6)
        v14 = 0;
      else
        v14 = *(_QWORD *)v13 + 16 * v4;
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3)
        v15 = 0;
      else
        v15 = (v11 >> 4) + 32 * (a2 - v13) - ((v14 - *(_QWORD *)v13) >> 4);
      sub_1004CE854((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        result = sub_1004A5844(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_1001267C4(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v8[2] = (void *)v4[2];
        v8[3] = (void *)v4[3];
        std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
        v11 = *(_OWORD *)(v4 + 7);
        v12 = *(_OWORD *)(v4 + 9);
        v13 = *(_OWORD *)(v4 + 11);
        v8[13] = (void *)v4[13];
        *(_OWORD *)(v8 + 11) = v13;
        *(_OWORD *)(v8 + 9) = v12;
        *(_OWORD *)(v8 + 7) = v11;
        v10 = (void **)*v8;
        sub_100129080(a1, v8);
        v4 = (uint64_t *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_100126C34((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_100129324(a1, (uint64_t)(v4 + 2));
    v4 = (uint64_t *)*v4;
  }
}

void sub_1001268BC(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  sub_100126C34(v1, v2);
  __cxa_rethrow();
}

void sub_1001268D8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1001268EC(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t i;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  uint64_t *v14;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[2];
      v9 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v8 + 5) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(v8 + 3) = v9;
      v10 = *(_OWORD *)(a2 + 7);
      v11 = *(_OWORD *)(a2 + 9);
      v12 = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(v8 + 13) = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(v8 + 11) = v12;
      *(_OWORD *)(v8 + 9) = v11;
      *(_OWORD *)(v8 + 7) = v10;
      v13 = (uint64_t *)*v8;
      sub_100129080(a1, v8);
      a2 = (uint64_t *)*a2;
      v8 = v13;
      if (!v13)
        goto LABEL_9;
    }
    do
    {
      v14 = (uint64_t *)*v8;
      operator delete(v8);
      v8 = v14;
    }
    while (v14);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_10012902C(a1, (uint64_t)(a2 + 2));
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_1001269DC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1001269FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_100126A1C(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  if (*(_BYTE *)(a1 + 2200) && *(char *)(a1 + 2199) < 0)
    operator delete(*(void **)(a1 + 2176));
  sub_10055CBA8(a1 + 2024);
  if (*(_BYTE *)(a1 + 2016))
  {
    v2 = *(void **)(a1 + 1992);
    if (v2)
    {
      *(_QWORD *)(a1 + 2000) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 1984))
    sub_100261F44(a1 + 1864);
  if (*(_BYTE *)(a1 + 1056))
    sub_100067AC4(a1 + 1008);
  if (*(_BYTE *)(a1 + 1000))
    sub_100067AC4(a1 + 952);
  sub_10055CBF0(a1 + 856);
  v3 = *(void **)(a1 + 824);
  if (v3)
  {
    *(_QWORD *)(a1 + 832) = v3;
    operator delete(v3);
  }
  if (*(_BYTE *)(a1 + 808) && *(char *)(a1 + 807) < 0)
    operator delete(*(void **)(a1 + 784));
  sub_100067AC4(a1 + 456);
  sub_100067AC4(a1 + 416);
  sub_100067AC4(a1 + 376);
  sub_100126BFC(a1 + 336);
  sub_100067AC4(a1 + 296);
  v5 = (void **)(a1 + 264);
  sub_10055C824(&v5);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_100126B34(uint64_t a1)
{
  void **v3;

  sub_100261F44(a1 + 3480);
  sub_100067AC4(a1 + 3360);
  v3 = (void **)(a1 + 3336);
  sub_10055C824(&v3);
  if (*(char *)(a1 + 3167) < 0)
    operator delete(*(void **)(a1 + 3144));
  if (*(char *)(a1 + 3063) < 0)
    operator delete(*(void **)(a1 + 3040));
  sub_100261F44(a1 + 2888);
  sub_10047F6F4((_QWORD *)(a1 + 1944));
  sub_100261F44(a1 + 1816);
  sub_100261F44(a1 + 1016);
  if (*(_BYTE *)(a1 + 320) && *(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  *(_QWORD *)(a1 + 176) = off_102143308;
  sub_1004A4854((_QWORD *)(a1 + 184));
  sub_100261F44(a1 + 160);
  sub_100261F44(a1 + 144);
  return a1;
}

uint64_t sub_100126BFC(uint64_t a1)
{
  void *v2;

  sub_100126C34(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100126C34(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0)
        operator delete(v2[4]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

__n128 sub_100126C78(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;

  sub_100126D5C(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  v5 = *a2;
  *(_OWORD *)(v4 + 24) = a2[1];
  *(_OWORD *)(v4 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  *(_OWORD *)(v4 + 88) = a2[5];
  *(_OWORD *)(v4 + 72) = v8;
  *(_OWORD *)(v4 + 56) = v7;
  *(_OWORD *)(v4 + 40) = v6;
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  *(_OWORD *)(v4 + 148) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(v4 + 136) = v11;
  *(_OWORD *)(v4 + 120) = v10;
  *(_OWORD *)(v4 + 104) = v9;
  memcpy((void *)(v4 + 168), a2 + 10, 0x201uLL);
  *(_QWORD *)(v4 + 688) = *((_QWORD *)a2 + 85);
  v12 = *((_QWORD *)a2 + 86);
  *(_QWORD *)(v4 + 696) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(__int128 *)((char *)a2 + 696);
  v16 = *(__int128 *)((char *)a2 + 728);
  *(_OWORD *)(v4 + 720) = *(__int128 *)((char *)a2 + 712);
  *(_OWORD *)(v4 + 736) = v16;
  *(_OWORD *)(v4 + 704) = v15;
  result = *(__n128 *)((char *)a2 + 744);
  v18 = *(__int128 *)((char *)a2 + 760);
  v19 = *(__int128 *)((char *)a2 + 776);
  *(_BYTE *)(v4 + 800) = *((_BYTE *)a2 + 792);
  *(_OWORD *)(v4 + 768) = v18;
  *(_OWORD *)(v4 + 784) = v19;
  *(__n128 *)(v4 + 752) = result;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

void sub_100126D5C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  void **v3;

  v1 = a1 + 8;
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      return;
    case 5:
    case 6:
      if (*(_BYTE *)(a1 + 96))
      {
        if (*(char *)(a1 + 39) < 0)
          operator delete(*(void **)(a1 + 16));
      }
      break;
    case 7:
      sub_10012CA84((uint64_t)&v2, v1);
      break;
    case 8:
      v3 = (void **)(a1 + 8);
      sub_100279AA4(&v3);
      break;
    case 0x10:
      sub_100261F44(a1 + 688);
      break;
    case 0x18:
      sub_10012A570((uint64_t)&v2, v1);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_100126E0C(uint64_t a1, uint64_t a2, __IOHIDServiceClient *a3, uint64_t a4)
{
  int Type;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void (*v18)(_QWORD, uint64_t, __IOHIDServiceClient *, uint64_t);
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  const __CFNumber *RegistryID;
  NSObject *v24;
  uint64_t *i;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  NSObject *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int16 v42;
  uint64_t valuePtr;
  _BYTE v44[22];
  _BYTE buf[1628];

  if (a3)
  {
    Type = IOHIDEventGetType(a4);
    if (Type)
    {
      v9 = *(uint64_t **)(a1 + 8);
      v10 = *(uint64_t **)(a1 + 16);
      if (v9 != v10)
      {
        v11 = Type;
        do
        {
          v12 = (std::__shared_weak_count *)v9[1];
          if (v12)
          {
            v13 = *v9;
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v15 = __ldxr(p_shared_weak_owners);
            while (__stxr(v15 + 1, p_shared_weak_owners));
            v16 = std::__shared_weak_count::lock(v12);
            *(_QWORD *)&buf[8] = v16;
            if (v16)
            {
              v17 = v16;
              *(_QWORD *)buf = v13;
              if (v13)
              {
                v18 = *(void (**)(_QWORD, uint64_t, __IOHIDServiceClient *, uint64_t))(v13 + 48);
                if (v18)
                {
                  if (*(__IOHIDServiceClient **)(v13 + 24) == a3 || (v19 = *(_DWORD *)(v13 + 144)) != 0 && v19 == v11)
                    v18(*(_QWORD *)(v13 + 56), a2, a3, a4);
                }
              }
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v21 = __ldaxr(p_shared_owners);
              while (__stlxr(v21 - 1, p_shared_owners));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            std::__shared_weak_count::__release_weak(v12);
          }
          v9 += 2;
        }
        while (v9 != v10);
      }
    }
    else
    {
      valuePtr = 0;
      RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(a3);
      CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v24 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        *(_QWORD *)&buf[4] = a3;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = valuePtr;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Got null event,sender %{private}p,registryID %{public}llx", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102165728);
        *(_DWORD *)v44 = 134283777;
        *(_QWORD *)&v44[4] = a3;
        *(_WORD *)&v44[12] = 2050;
        *(_QWORD *)&v44[14] = valuePtr;
        v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[CLIoHidInterface] Got null event,sender %{private}p,registryID %{public}llx", v44, 22);
        sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v40);
        if (v40 != buf)
          free(v40);
      }
      v26 = *(uint64_t **)(a1 + 8);
      for (i = *(uint64_t **)(a1 + 16); v26 != i; v26 += 2)
      {
        v27 = (std::__shared_weak_count *)v26[1];
        if (v27)
        {
          v28 = *v26;
          v29 = (unint64_t *)&v27->__shared_weak_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v31 = std::__shared_weak_count::lock(v27);
          *(_QWORD *)&v44[8] = v31;
          if (v31)
          {
            v32 = v31;
            *(_QWORD *)v44 = v28;
            if (v28)
            {
              if (*(_QWORD *)(v28 + 8) == valuePtr && *(_QWORD *)(v28 + 128))
              {
                if (qword_10229FC70 != -1)
                  dispatch_once(&qword_10229FC70, &stru_102165728);
                v33 = qword_10229FC78;
                if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Fetching historical events", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FC70 != -1)
                    dispatch_once(&qword_10229FC70, &stru_102165728);
                  v42 = 0;
                  LODWORD(v41) = 2;
                  v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Fetching historical events", &v42, v41);
                  sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v38);
                  if (v38 != buf)
                    free(v38);
                }
                (*(void (**)(_QWORD))(v28 + 128))(*(_QWORD *)(v28 + 136));
              }
              else
              {
                if (qword_10229FC70 != -1)
                  dispatch_once(&qword_10229FC70, &stru_102165728);
                v34 = qword_10229FC78;
                if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Did not fetch historical events", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_10229FC70 != -1)
                    dispatch_once(&qword_10229FC70, &stru_102165728);
                  v42 = 0;
                  LODWORD(v41) = 2;
                  v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Did not fetch historical events", &v42, v41);
                  sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v37);
                  if (v37 != buf)
                    free(v37);
                }
              }
            }
            v35 = (unint64_t *)&v32->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v22 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Received null sender", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      *(_WORD *)v44 = 0;
      v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Received null sender", v44, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "%s\n", v39);
      if (v39 != buf)
        free(v39);
    }
  }
}

void sub_100127514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  std::__shared_weak_count *v5;
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_100127554(uint64_t a1)
{
  void *v2;

  sub_10012758C(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_10012758C(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_1001275D0(uint64_t a1)
{
  return sub_100127554(a1 + 24);
}

void sub_1001275D8(uint64_t a1)
{
  char v1;

  sub_10055CAE0((uint64_t)&v1, a1 + 24);
}

void sub_1001275FC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1001275FC(a1, *a2);
    sub_1001275FC(a1, a2[1]);
    sub_10055CB64((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100127644(uint64_t a1)
{
  return sub_100127554(a1 + 24);
}

void sub_10012764C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v6;
  uint64_t v7;
  BOOL v8;
  NSObject *v9;
  char *v10;
  unint64_t TimeStamp;
  _WORD v12[8];
  uint64_t v13;
  _BYTE *v14;
  uint8_t buf[1640];

  v13 = 0;
  v14 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v14, &v13);
  v7 = v13;
  v6 = v14;
  if (v14)
    v8 = v13 <= 0;
  else
    v8 = 1;
  if (v8)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_1021477D0);
    v9 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021477D0);
      v12[0] = 0;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Empty payload", v12, 2);
      sub_100512490("Generic", 1, 0, 0, "static void CLSPU::onCMAServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  else
  {
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    *(_QWORD *)buf = sub_100127828(TimeStamp);
    sub_1001278E4(a1, v6, v7, buf);
  }
}

double sub_100127828(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&qword_10230F970;
  if (*(double *)&qword_10230F970 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_10230F970 = v2;
  }
  return v2 * (double)a1;
}

void sub_1001278E4(uint64_t a1, _BYTE *a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  NSObject *v9;
  _QWORD *v10;
  _QWORD *v11;
  double v12;
  char *v13;
  uint64_t v14;
  _DWORD v15[2];
  __int16 v16;
  uint64_t v17;
  uint8_t buf[8];
  __int16 v19;
  uint64_t v20;

  sub_100127B9C();
  sub_100127BDC();
  if (a3)
    v8 = *a2;
  else
    v8 = 0;
  HIBYTE(v14) = v8;
  *(_QWORD *)(a1 + 352) = *a4;
  if ((sub_100127C3C(a1 + 152, a2, a3) & 1) == 0)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v9 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v8;
      v19 = 2048;
      v20 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "CMMotionCoprocessorReply::visit() type %d, length %lu failed.", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v15[0] = 67109376;
      v15[1] = v8;
      v16 = 2048;
      v17 = a3;
      LODWORD(v14) = 18;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "CMMotionCoprocessorReply::visit() type %d, length %lu failed.", v15, v14);
      sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::onMotionCoprocessor(const uint8_t *, size_t, const CFTimeInterval &)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  if (*(_BYTE *)(a1 + 652))
  {
    *(_QWORD *)buf = (char *)&v14 + 7;
    v10 = sub_10103837C(a1 + 1832, (unsigned __int8 *)&v14 + 7, (uint64_t)&unk_101B9EB60, (_BYTE **)buf);
    ++v10[3];
  }
  else
  {
    sub_1001282C8(a1);
    *(_QWORD *)buf = (char *)&v14 + 7;
    v11 = sub_10103837C(a1 + 1872, (unsigned __int8 *)&v14 + 7, (uint64_t)&unk_101B9EB60, (_BYTE **)buf);
    ++v11[3];
    v12 = sub_100078B88();
    if (v12 - *(double *)(a1 + 1824) > 300.0)
    {
      sub_101032190(a1, 0);
      *(double *)(a1 + 1824) = v12;
    }
  }
}

uint64_t sub_100127B9C()
{
  if (qword_1023061B0 != -1)
    dispatch_once(&qword_1023061B0, &stru_1021632C8);
  return qword_1023110F8;
}

void sub_100127BDC()
{
  CFRunLoopRef Current;

  Current = CFRunLoopGetCurrent();
  if (qword_1023061B0 != -1)
    dispatch_once(&qword_1023061B0, &stru_1021632C8);
  if (Current != *(CFRunLoopRef *)qword_1023110F8)
    sub_101911F2C();
}

uint64_t sub_100127C3C(uint64_t a1, _BYTE *a2, int a3)
{
  uint64_t v3;
  void (*v4)(void);

  v3 = 0;
  switch(*a2)
  {
    case 1:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 16);
      goto LABEL_162;
    case 2:
      if (a3 != 72)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 24);
      goto LABEL_162;
    case 3:
      if (a3 != 105)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 32);
      goto LABEL_162;
    case 4:
      if (a3 != 64)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 40);
      goto LABEL_162;
    case 5:
      if (a3 != 16)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 56);
      goto LABEL_162;
    case 6:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 64);
      goto LABEL_162;
    case 7:
      if (a3 != 212)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 72);
      goto LABEL_162;
    case 8:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 80);
      goto LABEL_162;
    case 9:
      if (a3 != 212)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 88);
      goto LABEL_162;
    case 0xA:
      if (a3 != 193)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 272);
      goto LABEL_162;
    case 0xC:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 96);
      goto LABEL_162;
    case 0xD:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 104);
      goto LABEL_162;
    case 0xE:
      if (a3 != 55)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 112);
      goto LABEL_162;
    case 0xF:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 120);
      goto LABEL_162;
    case 0x11:
      if (a3 != 36)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 128);
      goto LABEL_162;
    case 0x14:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 152);
      goto LABEL_162;
    case 0x15:
      if (a3 != 48)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 160);
      goto LABEL_162;
    case 0x17:
      if (a3 != 21)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 168);
      goto LABEL_162;
    case 0x18:
      if (a3 != 89)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 176);
      goto LABEL_162;
    case 0x19:
      if (a3 != 218)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 192);
      goto LABEL_162;
    case 0x1B:
      if (a3 != 132)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 200);
      goto LABEL_162;
    case 0x1C:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 48);
      goto LABEL_162;
    case 0x1D:
      if (a3 != 32)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 136);
      goto LABEL_162;
    case 0x1F:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 184);
      goto LABEL_162;
    case 0x20:
      if (a3 != 157)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 208);
      goto LABEL_162;
    case 0x21:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 216);
      goto LABEL_162;
    case 0x22:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 224);
      goto LABEL_162;
    case 0x23:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 232);
      goto LABEL_162;
    case 0x24:
      if (a3 != 28)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 248);
      goto LABEL_162;
    case 0x25:
      if (a3 != 21)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 256);
      goto LABEL_162;
    case 0x26:
      if (a3 != 16)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 264);
      goto LABEL_162;
    case 0x27:
      if (a3 != 205)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 280);
      goto LABEL_162;
    case 0x28:
      if (a3 != 25)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 288);
      goto LABEL_162;
    case 0x29:
      if (a3 != 69)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 296);
      goto LABEL_162;
    case 0x2B:
      if (a3 != 28)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 240);
      goto LABEL_162;
    case 0x2C:
      if (a3 != 29)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 312);
      goto LABEL_162;
    case 0x2D:
      if (a3 != 37)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 320);
      goto LABEL_162;
    case 0x2E:
      if (a3 != 45)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 328);
      goto LABEL_162;
    case 0x2F:
      if (a3 != 113)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 336);
      goto LABEL_162;
    case 0x30:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 304);
      goto LABEL_162;
    case 0x31:
      if (a3 != 68)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 352);
      goto LABEL_162;
    case 0x32:
      if (a3 != 43)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 360);
      goto LABEL_162;
    case 0x33:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 368);
      goto LABEL_162;
    case 0x34:
      if (a3 != 49)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 384);
      goto LABEL_162;
    case 0x35:
      if (a3 != 20)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 392);
      goto LABEL_162;
    case 0x36:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 400);
      goto LABEL_162;
    case 0x37:
      if (a3 != 30)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 408);
      goto LABEL_162;
    case 0x38:
      if (a3 != 28)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 416);
      goto LABEL_162;
    case 0x39:
      if (a3 != 57)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 344);
      goto LABEL_162;
    case 0x3A:
      if (a3 != 232)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 376);
      goto LABEL_162;
    case 0x3B:
      if (a3 != 44)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 472);
      goto LABEL_162;
    case 0x3C:
      if (a3 != 10)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 488);
      goto LABEL_162;
    case 0x40:
      if (a3 != 29)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 424);
      goto LABEL_162;
    case 0x41:
      if (a3 != 9)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 440);
      goto LABEL_162;
    case 0x42:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 448);
      goto LABEL_162;
    case 0x43:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 496);
      goto LABEL_162;
    case 0x44:
      if (a3 != 76)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 456);
      goto LABEL_162;
    case 0x45:
      if (a3 != 39)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 504);
      goto LABEL_162;
    case 0x47:
      if (a3 != 45)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 512);
      goto LABEL_162;
    case 0x48:
      if (a3 != 16)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 528);
      goto LABEL_162;
    case 0x49:
      if (a3 != 83)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 520);
      goto LABEL_162;
    case 0x4A:
      if (a3 != 51)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 544);
      goto LABEL_162;
    case 0x4B:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 552);
      goto LABEL_162;
    case 0x4C:
      if (a3 != 10)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 536);
      goto LABEL_162;
    case 0x4D:
      if (a3 != 13)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 480);
      goto LABEL_162;
    case 0x4E:
      if (a3 != 58)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 464);
      goto LABEL_162;
    case 0x4F:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 560);
      goto LABEL_162;
    case 0x50:
      if (a3 != 18)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 568);
      goto LABEL_162;
    case 0x52:
      if (a3 != 26)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 576);
      goto LABEL_162;
    case 0x53:
      if (a3 != 22)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 584);
      goto LABEL_162;
    case 0x54:
      if (a3 != 17)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 592);
      goto LABEL_162;
    case 0x55:
      if (a3 != 20)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 600);
      goto LABEL_162;
    case 0x56:
      if (a3 != 113)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 608);
      goto LABEL_162;
    case 0x57:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 616);
      goto LABEL_162;
    case 0x58:
      if (a3 != 61)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 624);
      goto LABEL_162;
    case 0x59:
      if (a3 != 47)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 432);
      goto LABEL_162;
    case 0x5A:
      if (a3 != 210)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 632);
      goto LABEL_162;
    case 0x5B:
      if (a3 != 80)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 640);
      goto LABEL_162;
    case 0x5C:
      if (a3 != 17)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 648);
      goto LABEL_162;
    case 0xB0:
      if (a3 != 17)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 144);
LABEL_162:
      v4();
      return 1;
    default:
      return v3;
  }
}

void sub_1001282C8(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double v17;
  int v18;
  uint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  __int128 *v25;
  __int128 *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count_vtbl *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  __int128 *v44;
  __int128 *i;
  __int128 v46;
  NSObject *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  int v54;
  int v55;
  int v56;
  NSObject *v57;
  char *v58;
  uint64_t v59;
  std::__shared_count *v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63[2];
  uint64_t v64[2];
  uint64_t v65[2];
  int v66;
  double v67;
  __int16 v68;
  _BYTE v69[18];
  __int16 v70;
  uint64_t v71;
  _BYTE buf[32];
  __int128 v73;
  __int128 v74;

  if (!*(_BYTE *)(a1 + 859))
  {
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
    v3 = *(void ***)(a1 + 504);
    v4 = *(_QWORD *)(a1 + 512);
    *(_QWORD *)(a1 + 536) = 0;
    v5 = v4 - (_QWORD)v3;
    if (v5 >= 0x11)
    {
      do
      {
        operator delete(*v3);
        v6 = *(_QWORD *)(a1 + 512);
        v3 = (void **)(*(_QWORD *)(a1 + 504) + 8);
        *(_QWORD *)(a1 + 504) = v3;
        v5 = v6 - (_QWORD)v3;
      }
      while (v5 > 0x10);
    }
    if (v5 >> 3 == 1)
    {
      v7 = 12;
    }
    else
    {
      if (v5 >> 3 != 2)
        goto LABEL_10;
      v7 = 25;
    }
    *(_QWORD *)(a1 + 528) = v7;
    goto LABEL_10;
  }
  v2 = sub_100128CC8();
  sub_100128CC4(buf, v2, (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a1 + 432) - *(_QWORD *)(a1 + 424)) >> 4)) > 1);
  sub_100128C64(buf);
LABEL_10:
  if (*(_BYTE *)(a1 + 859)
    || (v30 = *(_QWORD *)(a1 + 1264)) != 0 && ((*(void (**)(void))(v30 + 16))(), *(_BYTE *)(a1 + 859)))
  {
    v8 = *(_QWORD *)(a1 + 424);
    v9 = *(_QWORD *)(a1 + 432);
    if (v8 != v9)
    {
      v60 = (std::__shared_count *)(a1 + 424);
      do
      {
        v10 = *(double *)(v8 + 8);
        v11 = *(double *)(a1 + 1408);
        if (v10 > v11 && v10 < v11 + 600.0)
        {
          if (qword_10229FCB0 != -1)
            dispatch_once(&qword_10229FCB0, &stru_10219AC88);
          v13 = qword_10229FCB8;
          if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
          {
            v14 = *(_QWORD *)(v8 + 8);
            v15 = *(_DWORD *)(v8 + 24);
            v16 = *(_QWORD *)(v8 + 72);
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)&buf[4] = v14;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v15;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v16;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#fmc After vehicle disconnect, startTime, %{public}f, stepCount, %d, currentPace, %f", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FCB0 != -1)
              dispatch_once(&qword_10229FCB0, &stru_10219AC88);
            v17 = *(double *)(v8 + 8);
            v18 = *(_DWORD *)(v8 + 24);
            v19 = *(_QWORD *)(v8 + 72);
            v66 = 134349568;
            v67 = v17;
            v68 = 1024;
            *(_DWORD *)v69 = v18;
            *(_WORD *)&v69[4] = 2048;
            *(_QWORD *)&v69[6] = v19;
            LODWORD(v59) = 28;
            v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "#fmc After vehicle disconnect, startTime, %{public}f, stepCount, %d, currentPace, %f", &v66, v59);
            sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::notifyClientsWithBufferedData()", "%s\n", v20);
            if (v20 != buf)
              free(v20);
          }
        }
        v8 += 176;
      }
      while (v8 != v9);
      v21 = (std::__shared_weak_count *)operator new(0x30uLL);
      v21->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      v21->__shared_weak_owners_ = 0;
      v21->__vftable = (std::__shared_weak_count_vtbl *)off_10219AEB8;
      v21[1].std::__shared_count = *v60;
      v21[1].__shared_weak_owners_ = *(_QWORD *)(a1 + 440);
      v60->__vftable = 0;
      *(_QWORD *)(a1 + 432) = 0;
      *(_QWORD *)(a1 + 440) = 0;
      v65[0] = (uint64_t)&v21[1];
      v65[1] = (uint64_t)v21;
      sub_100237D40(a1, v65);
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *(unsigned __int8 *)(a1 + 859);
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
    if (v24)
    {
      if (*(_QWORD *)(a1 + 448) != *(_QWORD *)(a1 + 456))
      {
        sub_100197040();
        if (sub_100195F08())
        {
          v25 = *(__int128 **)(a1 + 448);
          v26 = *(__int128 **)(a1 + 456);
          while (v25 != v26)
          {
            v27 = *v25;
            v28 = v25[1];
            v29 = v25[3];
            v73 = v25[2];
            v74 = v29;
            *(_OWORD *)buf = v27;
            *(_OWORD *)&buf[16] = v28;
            sub_10014C2F4(a1, 20, (uint64_t)buf, 64);
            v25 += 4;
          }
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 432) = *(_QWORD *)(a1 + 424);
  }
  if (*(_BYTE *)(a1 + 860))
  {
    v32 = *(std::__shared_weak_count_vtbl **)(a1 + 448);
    v31 = *(_QWORD *)(a1 + 456);
    if (v32 != (std::__shared_weak_count_vtbl *)v31)
    {
      v33 = (std::__shared_weak_count *)operator new(0x30uLL);
      v33->__shared_owners_ = 0;
      v34 = (unint64_t *)&v33->__shared_owners_;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)off_10219AF08;
      v33[1].__vftable = v32;
      v35 = *(_QWORD *)(a1 + 464);
      v33[1].__shared_owners_ = v31;
      v33[1].__shared_weak_owners_ = v35;
      *(_QWORD *)(a1 + 448) = 0;
      *(_QWORD *)(a1 + 456) = 0;
      *(_QWORD *)(a1 + 464) = 0;
      v64[0] = (uint64_t)&v33[1];
      v64[1] = (uint64_t)v33;
      sub_100161118(a1, v64);
      do
        v36 = __ldaxr(v34);
      while (__stlxr(v36 - 1, v34));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
  }
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a1 + 448);
  if (*(_BYTE *)(a1 + 859))
  {
    v38 = *(std::__shared_weak_count_vtbl **)(a1 + 472);
    v37 = *(_QWORD *)(a1 + 480);
    if (v38 != (std::__shared_weak_count_vtbl *)v37)
    {
      v39 = (std::__shared_weak_count *)operator new(0x30uLL);
      v39->__shared_owners_ = 0;
      v40 = (unint64_t *)&v39->__shared_owners_;
      v39->__shared_weak_owners_ = 0;
      v39->__vftable = (std::__shared_weak_count_vtbl *)off_10219AF58;
      v39[1].__vftable = v38;
      v41 = *(_QWORD *)(a1 + 488);
      v39[1].__shared_owners_ = v37;
      v39[1].__shared_weak_owners_ = v41;
      *(_QWORD *)(a1 + 472) = 0;
      *(_QWORD *)(a1 + 480) = 0;
      *(_QWORD *)(a1 + 488) = 0;
      v63[0] = (uint64_t)&v39[1];
      v63[1] = (uint64_t)v39;
      sub_1010236A8(a1, v63);
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v43 = *(unsigned __int8 *)(a1 + 859);
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
    if (v43)
    {
      v44 = *(__int128 **)(a1 + 544);
      for (i = *(__int128 **)(a1 + 552); v44 != i; v44 += 2)
      {
        v46 = v44[1];
        v61 = *v44;
        v62 = v46;
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
        v47 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349824;
          *(_QWORD *)&buf[4] = *((_QWORD *)&v61 + 1);
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v62;
          *(_WORD *)&buf[22] = 2050;
          *(_QWORD *)&buf[24] = *((_QWORD *)&v62 + 1);
          LOWORD(v73) = 2050;
          *(_QWORD *)((char *)&v73 + 2) = v61;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "notifying,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
          v66 = 134349824;
          v67 = *((double *)&v61 + 1);
          v68 = 2050;
          *(_QWORD *)v69 = v62;
          *(_WORD *)&v69[8] = 2050;
          *(_QWORD *)&v69[10] = *((_QWORD *)&v62 + 1);
          v70 = 2050;
          v71 = v61;
          LODWORD(v59) = 42;
          v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "notifying,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f", &v66, v59);
          sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::notifyClientsWithBufferedData()", "%s\n", v48);
          if (v48 != buf)
            free(v48);
        }
        sub_10014C2F4(a1, 35, (uint64_t)&v61, 32);
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 480) = *(_QWORD *)(a1 + 472);
  }
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a1 + 544);
  v50 = *(_QWORD *)(a1 + 400);
  v49 = *(_QWORD *)(a1 + 408);
  if (v50 != v49)
  {
    do
    {
      sub_10014C2F4(a1, v50 != v49 - 160, v50, 160);
      v51 = *(double *)(v50 + 8);
      v52 = *(double *)(a1 + 1408);
      if (v51 > v52 && v51 < v52 + 600.0)
      {
        v54 = *(_DWORD *)(v50 + 24);
        v55 = *(unsigned __int8 *)(v50 + 28);
        v56 = *(unsigned __int8 *)(v50 + 29);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_10219AC88);
        v57 = qword_10229FCB8;
        if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349824;
          *(double *)&buf[4] = v51;
          *(_WORD *)&buf[12] = 1026;
          *(_DWORD *)&buf[14] = v54;
          *(_WORD *)&buf[18] = 1026;
          *(_DWORD *)&buf[20] = v55;
          *(_WORD *)&buf[24] = 1026;
          *(_DWORD *)&buf[26] = v56;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "#fmc After vehicle disconnect, startTime, %{public}f, motionType, %{public}d, confidence, %{public}d, mounted, %{public}d", buf, 0x1Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCB0 != -1)
            dispatch_once(&qword_10229FCB0, &stru_10219AC88);
          v66 = 134349824;
          v67 = v51;
          v68 = 1026;
          *(_DWORD *)v69 = v54;
          *(_WORD *)&v69[4] = 1026;
          *(_DWORD *)&v69[6] = v55;
          *(_WORD *)&v69[10] = 1026;
          *(_DWORD *)&v69[12] = v56;
          LODWORD(v59) = 30;
          v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "#fmc After vehicle disconnect, startTime, %{public}f, motionType, %{public}d, confidence, %{public}d, mounted, %{public}d", &v66, v59);
          sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::notifyClientsWithBufferedData()", "%s\n", v58);
          if (v58 != buf)
            free(v58);
        }
      }
      v49 = *(_QWORD *)(a1 + 408);
      v50 += 160;
    }
    while (v50 != v49);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(a1 + 400);
  }
}

void sub_100128BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100128C20(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "resumeAfterPendingStepCountNotifications");
  return a1;
}

uint64_t sub_100128C68(uint64_t a1, void *a2, int a3)
{
  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = a3;
  if (a3)
  {
    objc_msgSend(objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "pause");
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLOutdoorService")), "pause");
  }
  return a1;
}

uint64_t sub_100128CC8()
{
  if (qword_1023061C0 != -1)
    dispatch_once(&qword_1023061C0, &stru_1021632E8);
  return qword_1023061B8;
}

uint64_t sub_100128D08(uint64_t a1)
{
  char v2;

  return sub_1004B7A58((uint64_t)&v2, a1 + 24);
}

void sub_100128D2C(uint64_t a1)
{
  CLConnectionMessage::~CLConnectionMessage((CLConnectionMessage *)(a1 + 24));
}

void sub_100128D38(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  char *v3;
  NSObject *v5;
  _WORD v6[8];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;

  if (*(unsigned __int16 *)(a2 + 2) < 0x11u)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v5 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1040;
      v12 = 72;
      v13 = 2098;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"received AOP log\", \"log\":%{public, location:CMMotionCoprocessorReply_Log}.*P}", buf, 0x22u);
    }
  }
  else
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v2 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Invalid CMMotionCoprocessorReply::Log structure.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v6[0] = 0;
      v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 1, "Invalid CMMotionCoprocessorReply::Log structure.", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitLog(const CMMotionCoprocessorReply::Log *)", "%s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
}

_QWORD *sub_100128F68(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  sub_100128FBC((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_100129080(a1, v4);
}

void sub_100128FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100128FBC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x18uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *v6 = 0;
  v6[1] = 0;
  v6[2] = *a2;
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_100129380((uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_100129014(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_10012902C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  sub_1001296A4((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_100129080(a1, v4);
}

void sub_100129064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100129080(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = a2 + 2;
  v5 = sub_100129380((uint64_t)(a2 + 2));
  a2[1] = v5;
  v6 = sub_1001290DC((uint64_t)a1, v5, v4);
  sub_10012923C(a1, a2, v6);
  return a2;
}

_QWORD *sub_1001290DC(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    sub_100129388(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (v16)
  {
    v17 = (_QWORD *)*v16;
    if (*v16)
    {
      v18 = 0;
      do
      {
        v19 = v17[1];
        if (v14 > 1)
        {
          v20 = v17[1];
          if (v19 >= v6)
            v20 = v19 % v6;
        }
        else
        {
          v20 = v19 & (v6 - 1);
        }
        if (v20 != v15)
          break;
        v21 = v19 == a2 && sub_10009483C(v17 + 2, a3);
        if ((v18 & !v21 & 1) != 0)
          break;
        v18 |= v21;
        v16 = (_QWORD *)*v16;
        v17 = (_QWORD *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

_QWORD *sub_10012923C(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

_QWORD *sub_100129324(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  sub_100129618((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_100129080(a1, v4);
}

void sub_10012935C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_100279070((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100129380(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_100129388(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_100129464(a1, prime);
  }
}

void sub_100129464(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL4 v16;
  _QWORD *v17;

  if (a2)
  {
    if (a2 >> 61)
      sub_10025955C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v13 = i[1];
        if (v10 > 1)
        {
          if (v13 >= a2)
            v13 %= a2;
        }
        else
        {
          v13 &= a2 - 1;
        }
        if (v13 == v8)
        {
          v7 = i;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          v14 = (_QWORD *)*i;
          if (*i)
          {
            v15 = i;
            while (1)
            {
              v16 = sub_10009483C(i + 2, v14 + 2);
              v17 = (_QWORD *)*v15;
              if (!v16)
                break;
              v14 = (_QWORD *)*v17;
              v15 = (_QWORD *)*v15;
              if (!*v17)
                goto LABEL_31;
            }
            v14 = (_QWORD *)*v15;
            v17 = v15;
          }
          else
          {
            v17 = i;
          }
LABEL_31:
          *v7 = v14;
          *v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = i;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = i;
          v8 = v13;
        }
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

uint64_t sub_100129618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  v7 = sub_10055AB7C((uint64_t)(v6 + 2), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_100129380(v7);
  v6[1] = result;
  return result;
}

void sub_100129688(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1001296A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;

  v5 = a1 + 16;
  v6 = operator new(0x78uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *v6 = 0;
  v6[1] = 0;
  v7 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 5) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 6) = v7;
  v6[14] = *(_QWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 2) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 3) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 4) = v9;
  *(_BYTE *)(a3 + 16) = 1;
  result = sub_100129380((uint64_t)(v6 + 2));
  v6[1] = result;
  return result;
}

void sub_100129718(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL sub_100129730(uint64_t a1, int a2, int *a3, __int128 *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t **v32;
  __int128 v33;
  uint64_t v34;
  uint64_t **v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _BYTE v51[12];
  __int16 v52;
  int v53;
  _BYTE buf[12];
  __int16 v55;
  int v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  void *v59;
  char v60;
  std::__shared_weak_count *v61;
  id v62;

  v50 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v49 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v51 = v25;
        v34 = *(_QWORD *)(v25 + 56);
        *(_QWORD *)buf = &v50;
        v35 = sub_100117BEC((uint64_t **)(v25 + 40), &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v36 = *a4;
        *(_OWORD *)((char *)v35 + 52) = *(__int128 *)((char *)a4 + 12);
        *(_OWORD *)(v35 + 5) = v36;
        sub_100129CA0((uint64_t)buf);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1001357CC();
        }

        v37 = v61;
        if (v61)
        {
          p_shared_owners = (unint64_t *)&v61->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        if (v60 < 0)
          operator delete(v59);
        v40 = v58;
        if (v58)
        {
          v41 = (unint64_t *)&v58->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v43 = v57;
        if (v57)
        {
          v44 = (unint64_t *)&v57->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v51 = a1 + 64;
        v29 = byte_1022A20B8;
        HIDWORD(v48) = v16;
        *(_QWORD *)buf = (char *)&v48 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v48 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v48) = *a3;
        *(_QWORD *)buf = (char *)&v48 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v48 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        HIDWORD(v48) = *a3;
        *(_QWORD *)buf = (char *)&v48 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v48 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v50;
        v32 = sub_100117BEC(v31 + 5, &v50, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v33 = *a4;
        *(_OWORD *)((char *)v32 + 52) = *(__int128 *)((char *)a4 + 12);
        *(_OWORD *)(v32 + 5) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v49 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213E430);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v55 = 1026;
    v56 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213E430);
    v46 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v46 = (_QWORD *)*v46;
    *(_DWORD *)v51 = 136446466;
    *(_QWORD *)&v51[4] = v46;
    v52 = 1026;
    v53 = v50;
    LODWORD(v48) = 18;
    v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v51,
                    v48);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v47);
    if (v47 != buf)
      free(v47);
    return 0;
  }
  return result;
}

void sub_100129C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100129CA0(uint64_t a1)
{
  __int128 v9;

  *(_DWORD *)a1 = 0xFFFF;
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  v9 = _Q0;
  *(_OWORD *)(a1 + 36) = _Q0;
  *(_OWORD *)(a1 + 52) = _Q0;
  *(_OWORD *)(a1 + 68) = _Q0;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_BYTE *)(a1 + 152) = 0;
  sub_10012A33C(a1 + 160);
  *(_BYTE *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_QWORD *)(a1 + 813) = 0;
  *(_QWORD *)(a1 + 832) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = xmmword_101BB56D0;
  *(_OWORD *)(a1 + 864) = unk_101BB56E0;
  *(_OWORD *)(a1 + 880) = xmmword_101BB56C0;
  *(_QWORD *)(a1 + 896) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_DWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 936) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 944) = v9;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_DWORD *)(a1 + 1176) = 78;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)(a1 + 1368) = _D0;
  *(_QWORD *)(a1 + 1376) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 1384) = -1082130432;
  *(_QWORD *)(a1 + 1392) = 0x7FF8000000000000;
  *(_QWORD *)(a1 + 1400) = 0;
  *(_DWORD *)(a1 + 1408) = -1082130432;
  *(_WORD *)(a1 + 1416) = 0x8000;
  *(_BYTE *)(a1 + 1418) = 0;
  *(_QWORD *)(a1 + 1424) = 0;
  *(_WORD *)(a1 + 1432) = 0x8000;
  *(_QWORD *)(a1 + 1440) = 0x100000003;
  *(_DWORD *)(a1 + 1448) = 2;
  *(_BYTE *)(a1 + 1452) = 0;
  *(_DWORD *)(a1 + 1456) = -1;
  *(_QWORD *)(a1 + 1464) = 0;
  *(_BYTE *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1476) = 0;
  *(_BYTE *)(a1 + 1480) = 0;
  *(_QWORD *)(a1 + 1520) = 0;
  *(_DWORD *)(a1 + 1512) = 0;
  *(_QWORD *)(a1 + 1504) = 0;
  *(_OWORD *)(a1 + 1488) = 0u;
  return a1;
}

_DWORD *sub_100129E24(_DWORD *a1)
{
  *a1 = 0;
  sub_10012A454((uint64_t)(a1 + 202));
  sub_100129E88((uint64_t)(a1 + 754));
  return a1;
}

void sub_100129E64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100126A1C(v2);
  sub_100126D5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100129E88(uint64_t a1)
{
  char *v2;
  char *v3;
  _QWORD *v9;
  int v10;
  int v11;
  __int128 v13;
  uint64_t v14;
  char v15;

  *(_BYTE *)(sub_10012A3BC(a1) + 136) = 0;
  v2 = (char *)operator new(0x40uLL);
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)(a1 + 144) = v2 + 24;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = off_102143268;
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 7) = 0;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *(_QWORD *)(a1 + 152) = v2;
  v3 = (char *)operator new(0x48uLL);
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = off_1021432B8;
  *((_QWORD *)v3 + 1) = 0;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_DWORD *)v3 + 14) = 1065353216;
  *((_QWORD *)v3 + 8) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 160) = v3 + 24;
  *(_QWORD *)(a1 + 168) = v3;
  *(_QWORD *)(a1 + 176) = off_102143308;
  *(_BYTE *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 336) = 0xFFFF;
  *(_QWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v13 = _Q0;
  *(_OWORD *)(a1 + 356) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 372) = _Q0;
  *(_OWORD *)(a1 + 388) = _Q0;
  *(_OWORD *)(a1 + 404) = _Q0;
  *(_DWORD *)(a1 + 420) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 424) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 452) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 460) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  sub_10012A33C(a1 + 496);
  *(_DWORD *)(a1 + 1136) = 0xFFFF;
  *(_QWORD *)(a1 + 1148) = 0;
  *(_QWORD *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1156) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 1172) = v13;
  *(_OWORD *)(a1 + 1188) = v13;
  *(_OWORD *)(a1 + 1204) = v13;
  *(_DWORD *)(a1 + 1220) = 0;
  *(_QWORD *)(a1 + 1224) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1240) = 0;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1252) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1260) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_BYTE *)(a1 + 1288) = 0;
  sub_10012A33C(a1 + 1296);
  v14 = 0x4066800000000000;
  sub_101225C68(a1 + 1936, &v14);
  sub_10012A340(a1 + 2000);
  sub_10012A340(a1 + 2184);
  sub_10012A33C(a1 + 2368);
  *(_QWORD *)(a1 + 3008) = 0;
  *(_BYTE *)(a1 + 3016) = 0;
  sub_100193D7C(a1 + 3024);
  *(_DWORD *)(a1 + 3168) = 0;
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_BYTE *)(a1 + 3208) = 1;
  *(_DWORD *)(a1 + 3212) = 0;
  *(_QWORD *)(a1 + 3216) = 0x4018000000000000;
  *(_DWORD *)(a1 + 3224) = 0;
  *(_BYTE *)(a1 + 3228) = 0;
  *(_OWORD *)(a1 + 3232) = 0u;
  *(_OWORD *)(a1 + 3248) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_OWORD *)(a1 + 3312) = 0u;
  *(_BYTE *)(a1 + 3328) = 0;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_OWORD *)(a1 + 3352) = 0u;
  *(_OWORD *)(a1 + 3368) = 0u;
  *(_DWORD *)(a1 + 3392) = 1065353216;
  *(_DWORD *)(a1 + 3400) = -1;
  *(_QWORD *)(a1 + 3420) = 0;
  *(_DWORD *)(a1 + 3428) = 0;
  *(_QWORD *)(a1 + 3404) = 0;
  *(_QWORD *)(a1 + 3412) = 0;
  *(_DWORD *)(a1 + 3432) = 16777217;
  *(_OWORD *)(a1 + 3440) = 0u;
  *(_OWORD *)(a1 + 3456) = 0u;
  *(_DWORD *)(a1 + 3472) = 1176256512;
  *(_WORD *)(a1 + 3476) = 0;
  *(_BYTE *)(a1 + 3478) = 0;
  v9 = operator new(0x158uLL);
  v9[2] = 0;
  *v9 = off_102143340;
  v9[1] = 0;
  sub_10055CA20((uint64_t)&v15, (uint64_t)(v9 + 3));
  *(_QWORD *)(a1 + 3480) = v9 + 3;
  *(_QWORD *)(a1 + 3488) = v9;
  *(_BYTE *)(a1 + 3496) = 0;
  *(_QWORD *)(a1 + 3500) = sub_10012A3B0();
  *(_DWORD *)(a1 + 3508) = v10;
  *(_QWORD *)(a1 + 3512) = sub_10012A3B0();
  *(_DWORD *)(a1 + 3520) = v11;
  return a1;
}

void sub_10012A174(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;

  sub_10055C894(v5);
  sub_10055A600(v4);
  sub_100261F44(v1 + 2888);
  sub_10047F6F4((_QWORD *)(v1 + 1944));
  sub_100261F44(v1 + 1816);
  sub_100261F44(v1 + 1016);
  if (*(_BYTE *)(v1 + 320))
  {
    if (*(char *)(v1 + 263) < 0)
      operator delete(*(void **)(v1 + 240));
  }
  *(_QWORD *)(v1 + 176) = v6 + 16;
  sub_1004A4854(v3);
  sub_100261F44(v2 + 16);
  sub_100261F44(v2);
  _Unwind_Resume(a1);
}

double sub_10012A214(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_101BAFC90;
  *(_QWORD *)(a1 + 16) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = -1082130432;
  *(_BYTE *)(a1 + 52) = 1;
  *(_DWORD *)(a1 + 56) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_DWORD *)(a1 + 124) = -1;
  *(_QWORD *)(a1 + 136) = -1;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 312) = -1;
  *(_DWORD *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 336) = xmmword_101BAFC90;
  *(_DWORD *)(a1 + 352) = 1;
  *(_BYTE *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 384) = _Q1;
  *(_OWORD *)(a1 + 400) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 416) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 480) = _Q1;
  *(_OWORD *)(a1 + 496) = xmmword_101BAFEE0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 544) = xmmword_101BAFEE0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = -1;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 592) = _Q1;
  *(_WORD *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 610) = 0;
  *(_DWORD *)(a1 + 628) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_BYTE *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 280) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 316) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  result = 0.0;
  *(_OWORD *)(a1 + 612) = xmmword_101BDBEE0;
  return result;
}

__n128 sub_10012A340(uint64_t a1)
{
  __n128 result;

  *(_DWORD *)a1 = 0xFFFF;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 4) = 0;
  *(_OWORD *)(a1 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 36) = result;
  *(__n128 *)(a1 + 52) = result;
  *(__n128 *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 180) = 0;
  *(_WORD *)(a1 + 182) = 0;
  return result;
}

uint64_t sub_10012A3B0()
{
  return 0x90800000000;
}

uint64_t sub_10012A3BC(uint64_t a1)
{
  sub_10012A3E0(a1);
  return a1;
}

double sub_10012A3E0(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_101C47AE0;
  *(_OWORD *)(a1 + 16) = xmmword_101C47AE0;
  *(_QWORD *)(a1 + 32) = sub_10012A448()[3];
  *(_QWORD *)(a1 + 40) = sub_10012A448()[4];
  *(_QWORD *)(a1 + 48) = sub_10012A448()[5];
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 56) = _Q0;
  *(_OWORD *)(a1 + 72) = _Q0;
  *(_BYTE *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t *sub_10012A448()
{
  return &qword_102313D90;
}

uint64_t sub_10012A454(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  sub_100193D7C(a1 + 8);
  *(_DWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 156) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_BYTE *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 328) = 1065353216;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_DWORD *)(a1 + 368) = 1065353216;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_DWORD *)(a1 + 408) = 1065353216;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1065353216;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_DWORD *)(a1 + 488) = 1065353216;
  *(_BYTE *)(a1 + 496) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  sub_10012A340(a1 + 600);
  *(_BYTE *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 808) = 0;
  *(_BYTE *)(a1 + 816) = 0;
  *(_BYTE *)(a1 + 856) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1008) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1120) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1132) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1144) = 0;
  *(_WORD *)(a1 + 1152) = 0;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_BYTE *)(a1 + 1984) = 0;
  *(_BYTE *)(a1 + 1992) = 0;
  *(_BYTE *)(a1 + 2016) = 0;
  *(_BYTE *)(a1 + 2024) = 0;
  *(_BYTE *)(a1 + 2168) = 0;
  *(_BYTE *)(a1 + 2176) = 0;
  *(_BYTE *)(a1 + 2200) = 0;
  *(_WORD *)(a1 + 848) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_DWORD *)(a1 + 1176) = 0;
  return a1;
}

void sub_10012A570(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 143) < 0)
    operator delete(*(void **)(a2 + 120));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

void sub_10012A5B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 __p;
  uint64_t v19;

  v10 = *a2;
  v11 = *((_BYTE *)a2 + 8);
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4(&v12, (void *)a2[2], a2[3]);
  }
  else
  {
    v12 = *((_OWORD *)a2 + 1);
    v13 = a2[4];
  }
  v15 = *(_OWORD *)(a2 + 7);
  v16 = *(_OWORD *)(a2 + 9);
  v17[0] = *(_OWORD *)(a2 + 11);
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a2 + 100);
  v14 = *(_OWORD *)(a2 + 5);
  if (*((char *)a2 + 143) < 0)
  {
    sub_100115CE4(&__p, (void *)a2[15], a2[16]);
  }
  else
  {
    __p = *(_OWORD *)(a2 + 15);
    v19 = a2[17];
  }
  sub_100126D5C(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  *(_BYTE *)(v4 + 16) = v11;
  *(_QWORD *)(v4 + 8) = v10;
  v5 = v13;
  *(_OWORD *)(v4 + 24) = v12;
  *(_QWORD *)(v4 + 40) = v5;
  v12 = 0uLL;
  v13 = 0;
  *(_OWORD *)(v4 + 48) = v14;
  v7 = v16;
  v6 = v17[0];
  v8 = v15;
  *(_OWORD *)(v4 + 108) = *(_OWORD *)((char *)v17 + 12);
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 96) = v6;
  *(_OWORD *)(v4 + 64) = v8;
  v9 = v19;
  *(_OWORD *)(v4 + 128) = __p;
  *(_QWORD *)(v4 + 144) = v9;
  __p = 0uLL;
  v19 = 0;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
}

void sub_10012A728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012A744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float32_t FloatValue;
  float32_t v8;
  float v9;
  unint64_t TimeStamp;
  double v11;
  float32x2_t v12;
  float v13;

  result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 21)
  {
    FloatValue = IOHIDEventGetFloatValue(a4, 1376256);
    v12.f32[0] = FloatValue;
    v8 = IOHIDEventGetFloatValue(a4, 1376257);
    v12.f32[1] = v8;
    v9 = IOHIDEventGetFloatValue(a4, 1376258);
    v13 = v9;
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v11 = sub_100127828(TimeStamp);
    return sub_10012A7EC(a1, &v12, &v11);
  }
  return result;
}

uint64_t sub_10012A7EC(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v6;
  void *v7;
  float v8;
  float32x2_t v9;
  NSObject *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CFAbsoluteTime Current;
  double v16;
  float32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v26;
  double v27;
  double v28;
  double v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  float v36;
  __int32 v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[22];
  __int16 v52;
  double v53;
  _BYTE v54[12];
  double v55;

  v6 = *a3;
  if (*a3 > *(double *)(a1 + 64) + 1.0)
  {
    v7 = (void *)(*(uint64_t (**)(_QWORD, const __CFString *, double))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), CFSTR("AppleVoltageDictionary"), v6);
    objc_msgSend(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("COMPASS_TEMP")), "floatValue");
    *(float *)(a1 + 72) = v8 / 100.0;
    *(double *)(a1 + 64) = *a3;

    v6 = *a3;
  }
  v9 = vsub_f32(*a2, *(float32x2_t *)(a1 + 48));
  v34 = v6;
  v35 = *(double *)&v9;
  v9.i32[0] = *(_DWORD *)(a1 + 72);
  v36 = a2[1].f32[0] - *(float *)(a1 + 56);
  v37 = v9.i32[0];
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_1021694E0);
  v10 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
  {
    v11 = a2->f32[0];
    v12 = a2->f32[1];
    v13 = a2[1].f32[0];
    v14 = *a3;
    *(_DWORD *)buf = 136316162;
    v39 = "Magnetometer";
    v40 = 2048;
    v41 = v11;
    v42 = 2048;
    v43 = v12;
    v44 = 2048;
    v45 = v13;
    v46 = 2048;
    v47 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021694E0);
    v26 = a2->f32[0];
    v27 = a2->f32[1];
    v28 = a2[1].f32[0];
    v29 = *a3;
    *(_DWORD *)v51 = 136316162;
    *(_QWORD *)&v51[4] = "Magnetometer";
    *(_WORD *)&v51[12] = 2048;
    *(double *)&v51[14] = v26;
    v52 = 2048;
    v53 = v27;
    *(_WORD *)v54 = 2048;
    *(double *)&v54[2] = v28;
    *(_WORD *)&v54[10] = 2048;
    v55 = v29;
    LODWORD(v32) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", v51, v32, v33, v34, v35);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLMagnetometer::onMagnetometerData(const CLMotionTypeMagneticField &, const CLMotionTypeTimestamp &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)v51 = off_1021715C8;
    Current = CFAbsoluteTimeGetCurrent();
    v16 = *a3;
    *(CFAbsoluteTime *)&v51[8] = Current;
    v17 = *a2;
    v53 = v16;
    *(float32x2_t *)v54 = v17;
    *(_DWORD *)&v54[8] = a2[1].i32[0];
    v18 = sub_1011B78D4();
    sub_1011B8DB0(v18, (uint64_t)v51);
    sub_1015EB864(buf);
    sub_101604D6C((uint64_t)buf);
    v50 |= 1u;
    v48 = *(_QWORD *)&v51[8];
    v19 = v49;
    v20 = *a3;
    *(_BYTE *)(v49 + 36) |= 1u;
    *(double *)(v19 + 8) = v20;
    v21 = v49;
    LODWORD(v20) = a2->i32[0];
    *(_BYTE *)(v49 + 36) |= 8u;
    *(_DWORD *)(v21 + 24) = LODWORD(v20);
    v22 = v49;
    LODWORD(v20) = a2->i32[1];
    *(_BYTE *)(v49 + 36) |= 0x10u;
    *(_DWORD *)(v22 + 28) = LODWORD(v20);
    v23 = v49;
    LODWORD(v20) = a2[1].i32[0];
    *(_BYTE *)(v49 + 36) |= 0x20u;
    *(_DWORD *)(v23 + 32) = LODWORD(v20);
    v24 = v49;
    LODWORD(v20) = *(_DWORD *)(a1 + 72);
    *(_BYTE *)(v49 + 36) |= 4u;
    *(_DWORD *)(v24 + 20) = LODWORD(v20);
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102169500);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  return sub_10012AC18(a1, 0, (uint64_t)&v34, 24);
}

void sub_10012ABF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10012AC18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  v9 = a2;
  v10 = v8 + 80 * (int)a2;
  v11 = *(_QWORD **)(v10 + 32);
  if (v11 != (_QWORD *)(v10 + 40))
  {
    do
    {
      v12 = *((_DWORD *)v11 + 10);
      if (!v12)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[4] + 16))(v11[4], a2, a3, a4);
        v12 = *((_DWORD *)v11 + 10);
      }
      *((_DWORD *)v11 + 10) = (v12 + 1) % *((_DWORD *)v11 + 11);
      v13 = (_QWORD *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v11[2];
          v15 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v8 = *(_QWORD *)(v7 + 16);
      v11 = v14;
    }
    while (v14 != (_QWORD *)(v8 + 80 * v9 + 40));
  }
  v16 = v8 + 80 * v9;
  v17 = *(_QWORD *)(v16 + 64);
  if (v17 != v16 + 56)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v17 + 16) + 16))(*(_QWORD *)(v17 + 16), a2, a3, a4);
      v17 = *(_QWORD *)(v17 + 8);
    }
    while (v17 != *(_QWORD *)(v7 + 16) + 80 * v9 + 56);
  }
  return result;
}

uint64_t sub_10012AD4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

id sub_10012AD58(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v15;
  uint64_t v16;
  _QWORD v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD __dst[7];
  int v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  unint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  int v42;

  if (a4 >= 0x70)
    v8 = 112;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0x71)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102159C90);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v36 = 0x8000000101BE55C7 & 0x7FFFFFFFFFFFFFFFLL;
      v37 = 2048;
      v38 = 112;
      v39 = 2048;
      v40 = a4;
      v41 = 1024;
      v42 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102159C90);
      v27 = 136315906;
      v28 = 0x8000000101BE55C7 & 0x7FFFFFFFFFFFFFFFLL;
      v29 = 2048;
      v30 = 112;
      v31 = 2048;
      v32 = a4;
      v33 = 1024;
      v34 = a2;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v27, 38, v16, LODWORD(v17[0]));
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLCompass_Type::Sample>::dispatchData(int, const void *, size_t) [T = CLCompass_Type::Sample]", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100206470;
  v17[3] = &unk_102159D08;
  v17[4] = v12;
  v17[5] = v11;
  v22 = __dst[4];
  v23 = __dst[5];
  v24 = __dst[6];
  v18 = __dst[0];
  v19 = __dst[1];
  v21 = __dst[3];
  v20 = __dst[2];
  v25 = v10;
  return objc_msgSend(v13, "async:", v17);
}

float *sub_10012B01C(float *result, uint64_t a2)
{
  float v2;

  v2 = (float)(int)sqrtf((float)((float)(result[3] * result[3]) + (float)(result[2] * result[2]))+ (float)(result[4] * result[4]));
  if (*(float *)(a2 + 100) < v2)
    *(float *)(a2 + 100) = v2;
  if (*(float *)(a2 + 96) > v2)
    *(float *)(a2 + 96) = v2;
  return result;
}

__n128 sub_10012B060(__int128 *a1, uint64_t a2)
{
  int v2;
  int v3;
  float v4;
  int v5;
  int v6;
  signed int v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  if (*(_BYTE *)(a2 + 40))
  {
    v2 = *(_DWORD *)(a2 + 324);
    if (v2 == 6)
    {
      *(_DWORD *)(a2 + 264) = *((_DWORD *)a1 + 10);
      v3 = *((_DWORD *)a1 + 11);
      *(_DWORD *)(a2 + 92) = v3;
      v4 = *((float *)a1 + 24);
      if (v4 > -1.0)
      {
        *(_BYTE *)(a2 + 393) = v3;
        if (v3 - 4 >= 2)
        {
          if (v3 == 2)
          {
            ++*(_DWORD *)(a2 + 404);
            *(float *)(a2 + 412) = v4 + *(float *)(a2 + 412);
            *(float *)(a2 + 420) = v4;
            *(float *)(a2 + 428) = v4;
          }
        }
        else
        {
          ++*(_DWORD *)(a2 + 408);
          *(float *)(a2 + 416) = v4 + *(float *)(a2 + 416);
          *(float *)(a2 + 424) = v4;
          *(float *)(a2 + 432) = v4;
        }
        *(_BYTE *)(a2 + 392) = v3;
      }
    }
    else
    {
      v4 = *((float *)a1 + 24);
    }
    if (v4 <= -1.0)
    {
      v5 = *((_DWORD *)a1 + 11);
    }
    else
    {
      ++*(_DWORD *)(a2 + 444);
      v5 = *((_DWORD *)a1 + 11);
      if ((_BYTE)v5)
      {
        if (*((_DWORD *)a1 + 11) == 2)
          ++*(_DWORD *)(a2 + 436);
      }
      else
      {
        ++*(_DWORD *)(a2 + 440);
      }
    }
    *(_BYTE *)(a2 + 272) |= *((_BYTE *)a1 + 104);
    if (*(_DWORD *)(a2 + 92) < v5)
      *(_DWORD *)(a2 + 92) = v5;
    if (v5 <= 0)
    {
      v6 = *(_DWORD *)(a2 + 88);
      if (v2 > 0 || !v6)
        *(_DWORD *)(a2 + 88) = v6 + 1;
    }
    v7 = llround((float)(*((float *)a1 + 25) * 180.0) / 3.14159265);
    if (*(_DWORD *)(a2 + 188) > v7)
      v7 = *(_DWORD *)(a2 + 188);
    *(_DWORD *)(a2 + 188) = v7;
    *(_DWORD *)(a2 + 268) = *((_DWORD *)a1 + 10);
  }
  v8 = *a1;
  v9 = a1[2];
  *(_OWORD *)(a2 + 296) = a1[1];
  *(_OWORD *)(a2 + 312) = v9;
  *(_OWORD *)(a2 + 280) = v8;
  result = (__n128)a1[3];
  v11 = a1[4];
  v12 = a1[6];
  *(_OWORD *)(a2 + 360) = a1[5];
  *(_OWORD *)(a2 + 376) = v12;
  *(__n128 *)(a2 + 328) = result;
  *(_OWORD *)(a2 + 344) = v11;
  return result;
}

uint64_t sub_10012B1F4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  double Current;
  double v9;
  double v10;
  double v11;
  NSObject *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  int v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  double v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  const std::string::value_type *v30;
  uint64_t v31;
  const std::string::value_type *v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  int v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  const char *v44;
  double v45;
  std::string *v46;
  uint64_t v47;
  char *v48;
  double v49;
  std::string v50;
  std::string v51;
  double v52;
  _BYTE __p[28];
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  const char *v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  uint64_t v67;
  uint8_t buf[4];
  _BYTE *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  unsigned int v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  double v83;
  __int16 v84;
  double v85;
  __int16 v86;
  uint64_t v87;

  v6 = sub_10012B6A8(a1, a2, a3);
  if ((_DWORD)v6)
  {
    if (*a2 <= 0x27 && ((1 << *a2) & 0x800000041FLL) != 0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      if (*(_BYTE *)(a1 + 110))
      {
        v9 = *(double *)(a3 + 88);
        if (v9 >= 0.0)
        {
          v10 = v9 + *(double *)(a3 + 76);
          v11 = v10 - Current;
          if (v10 < Current)
            v11 = 0.0;
          else
            v10 = Current;
          *(double *)(a3 + 76) = v10;
          *(double *)(a3 + 88) = v11;
        }
        else
        {
          *(double *)(a3 + 76) = Current;
        }
      }
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214EF30);
      v12 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        sub_1015A2E04(&v51, "Restored-");
        v13 = *(char *)(a1 + 31);
        if (v13 >= 0)
          v14 = (const std::string::value_type *)(a1 + 8);
        else
          v14 = *(const std::string::value_type **)(a1 + 8);
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(a1 + 31);
        else
          v15 = *(_QWORD *)(a1 + 16);
        v16 = std::string::append(&v51, v14, v15);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v16->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        v18 = __p[23];
        v19 = *(_BYTE **)__p;
        v20 = *(_QWORD *)(a3 + 4);
        v21 = *(_QWORD *)(a3 + 12);
        v22 = *(_QWORD *)(a3 + 20);
        v23 = *(_DWORD *)(a3 + 96);
        v24 = sub_10014D1E0(v23);
        v25 = *(double *)(a3 + 76);
        v26 = __p;
        if (v18 < 0)
          v26 = v19;
        v27 = *(_QWORD *)(a3 + 88);
        *(_DWORD *)buf = 136317442;
        v69 = v26;
        v70 = 1024;
        v71 = 1;
        v72 = 2048;
        v73 = v20;
        v74 = 2048;
        v75 = v21;
        v76 = 2048;
        v77 = v22;
        v78 = 1024;
        v79 = v23;
        v80 = 2080;
        v81 = v24;
        v82 = 2048;
        v83 = v25;
        v84 = 2048;
        v85 = Current - v25;
        v86 = 2048;
        v87 = v27;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,LocationTimestamp,%.3f,Age,%.3f,Lifespan,%.3f,", buf, 0x5Eu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_10214EF30);
        v29 = qword_1022A02F8;
        sub_1015A2E04(&v50, "Restored-");
        v32 = *(const std::string::value_type **)(a1 + 8);
        v31 = a1 + 8;
        v30 = v32;
        v33 = *(char *)(v31 + 23);
        if (v33 >= 0)
          v34 = (const std::string::value_type *)v31;
        else
          v34 = v30;
        if (v33 >= 0)
          v35 = *(unsigned __int8 *)(v31 + 23);
        else
          v35 = *(_QWORD *)(v31 + 8);
        v36 = std::string::append(&v50, v34, v35);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v38 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
        v39 = v51.__r_.__value_.__r.__words[0];
        v40 = *(_QWORD *)(a3 + 4);
        v41 = *(_QWORD *)(a3 + 12);
        v42 = *(_QWORD *)(a3 + 20);
        v43 = *(_DWORD *)(a3 + 96);
        v44 = sub_10014D1E0(v43);
        v45 = *(double *)(a3 + 76);
        v46 = &v51;
        if (v38 < 0)
          v46 = (std::string *)v39;
        v47 = *(_QWORD *)(a3 + 88);
        *(_DWORD *)__p = 136317442;
        *(_QWORD *)&__p[4] = v46;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1;
        *(_WORD *)&__p[18] = 2048;
        *(_QWORD *)&__p[20] = v40;
        v54 = 2048;
        v55 = v41;
        v56 = 2048;
        v57 = v42;
        v58 = 1024;
        v59 = v43;
        v60 = 2080;
        v61 = v44;
        v62 = 2048;
        v63 = v45;
        v64 = 2048;
        v65 = Current - v45;
        v66 = 2048;
        v67 = v47;
        v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,LocationTimestamp,%.3f,Age,%.3f,Lifespan,%.3f,", __p, 94, v49, *(double *)&v50.__r_.__value_.__l.__data_, *(double *)&v50.__r_.__value_.__l.__size_, LODWORD(v50.__r_.__value_.__r.__words[2]), v51.__r_.__value_.__l.__data_, *(double *)&v51.__r_.__value_.__l.__size_, *(double *)&v51.__r_.__value_.__r.__words[2], v52);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        sub_100512490("LOCATION", 1, 0, 2, "virtual BOOL CLLocationProvider::getNotification(const CLLocationProvider_Type::Notification &, CLLocationProvider_Type::NotificationData &)", "%s\n", v48);
        if (v48 != (char *)buf)
          free(v48);
      }
    }
  }
  return v6;
}

void sub_10012B648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (v24 < 0)
    operator delete(v23);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10012B6A8(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v12;
  *(_OWORD *)(a3 + 16) = v13;
  v14 = *(_OWORD *)(v12 + 32);
  v15 = *(_OWORD *)(v12 + 48);
  v16 = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(a3 + 80) = v16;
  *(_OWORD *)(a3 + 32) = v14;
  *(_OWORD *)(a3 + 48) = v15;
  v17 = *(_OWORD *)(v12 + 96);
  v18 = *(_OWORD *)(v12 + 112);
  v19 = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(a3 + 140) = *(_OWORD *)(v12 + 140);
  *(_OWORD *)(a3 + 112) = v18;
  *(_OWORD *)(a3 + 128) = v19;
  *(_OWORD *)(a3 + 96) = v17;
  memcpy((void *)(a3 + 160), (const void *)(v12 + 160), 0x201uLL);
  sub_100349198((_QWORD *)(a3 + 680), (uint64_t *)(v12 + 680));
  v21 = *(_OWORD *)(v12 + 712);
  v20 = *(_OWORD *)(v12 + 728);
  *(_OWORD *)(a3 + 696) = *(_OWORD *)(v12 + 696);
  *(_OWORD *)(a3 + 712) = v21;
  *(_OWORD *)(a3 + 728) = v20;
  v23 = *(_OWORD *)(v12 + 760);
  v22 = *(_OWORD *)(v12 + 776);
  v24 = *(_OWORD *)(v12 + 744);
  *(_BYTE *)(a3 + 792) = *(_BYTE *)(v12 + 792);
  *(_OWORD *)(a3 + 760) = v23;
  *(_OWORD *)(a3 + 776) = v22;
  *(_OWORD *)(a3 + 744) = v24;
  sub_100349198((_QWORD *)(a3 + 800), (uint64_t *)(v12 + 800));
  *(_OWORD *)(a3 + 816) = *(_OWORD *)(v12 + 816);
  v25 = *(_OWORD *)(v12 + 880);
  v27 = *(_OWORD *)(v12 + 832);
  v26 = *(_OWORD *)(v12 + 848);
  *(_OWORD *)(a3 + 864) = *(_OWORD *)(v12 + 864);
  *(_OWORD *)(a3 + 880) = v25;
  *(_OWORD *)(a3 + 832) = v27;
  *(_OWORD *)(a3 + 848) = v26;
  *(_QWORD *)(a3 + 896) = *(_QWORD *)(v12 + 896);
  std::string::operator=((std::string *)(a3 + 904), (const std::string *)(v12 + 904));
  v29 = *(_OWORD *)(v12 + 944);
  v28 = *(_OWORD *)(v12 + 960);
  *(_OWORD *)(a3 + 928) = *(_OWORD *)(v12 + 928);
  *(_OWORD *)(a3 + 944) = v29;
  *(_OWORD *)(a3 + 960) = v28;
  v30 = *(_OWORD *)(v12 + 1024);
  v32 = *(_OWORD *)(v12 + 976);
  v31 = *(_OWORD *)(v12 + 992);
  *(_OWORD *)(a3 + 1008) = *(_OWORD *)(v12 + 1008);
  *(_OWORD *)(a3 + 1024) = v30;
  *(_OWORD *)(a3 + 976) = v32;
  *(_OWORD *)(a3 + 992) = v31;
  v33 = *(_OWORD *)(v12 + 1056);
  v34 = *(_OWORD *)(v12 + 1072);
  v35 = *(_OWORD *)(v12 + 1088);
  *(_OWORD *)(a3 + 1040) = *(_OWORD *)(v12 + 1040);
  *(_OWORD *)(a3 + 1088) = v35;
  *(_OWORD *)(a3 + 1072) = v34;
  *(_OWORD *)(a3 + 1056) = v33;
  v36 = *(_OWORD *)(v12 + 1120);
  v37 = *(_OWORD *)(v12 + 1136);
  v38 = *(_QWORD *)(v12 + 1152);
  *(_OWORD *)(a3 + 1104) = *(_OWORD *)(v12 + 1104);
  *(_QWORD *)(a3 + 1152) = v38;
  *(_OWORD *)(a3 + 1136) = v37;
  *(_OWORD *)(a3 + 1120) = v36;
  sub_100349198((_QWORD *)(a3 + 1160), (uint64_t *)(v12 + 1160));
  *(_OWORD *)(a3 + 1176) = *(_OWORD *)(v12 + 1176);
  v39 = *(_OWORD *)(v12 + 1240);
  v41 = *(_OWORD *)(v12 + 1192);
  v40 = *(_OWORD *)(v12 + 1208);
  *(_OWORD *)(a3 + 1224) = *(_OWORD *)(v12 + 1224);
  *(_OWORD *)(a3 + 1240) = v39;
  *(_OWORD *)(a3 + 1192) = v41;
  *(_OWORD *)(a3 + 1208) = v40;
  v42 = *(_OWORD *)(v12 + 1304);
  v44 = *(_OWORD *)(v12 + 1256);
  v43 = *(_OWORD *)(v12 + 1272);
  *(_OWORD *)(a3 + 1288) = *(_OWORD *)(v12 + 1288);
  *(_OWORD *)(a3 + 1304) = v42;
  *(_OWORD *)(a3 + 1256) = v44;
  *(_OWORD *)(a3 + 1272) = v43;
  v45 = *(void **)(a3 + 1320);
  *(_QWORD *)(a3 + 1320) = *(id *)(v12 + 1320);

  *(_OWORD *)(a3 + 1328) = *(_OWORD *)(v12 + 1328);
  v46 = *(_OWORD *)(v12 + 1344);
  v47 = *(_OWORD *)(v12 + 1360);
  v48 = *(_OWORD *)(v12 + 1376);
  *(_OWORD *)(a3 + 1392) = *(_OWORD *)(v12 + 1392);
  *(_OWORD *)(a3 + 1376) = v48;
  *(_OWORD *)(a3 + 1360) = v47;
  *(_OWORD *)(a3 + 1344) = v46;
  v49 = *(_OWORD *)(v12 + 1408);
  v50 = *(_OWORD *)(v12 + 1424);
  v51 = *(_OWORD *)(v12 + 1440);
  *(_OWORD *)(a3 + 1456) = *(_OWORD *)(v12 + 1456);
  *(_OWORD *)(a3 + 1440) = v51;
  *(_OWORD *)(a3 + 1424) = v50;
  *(_OWORD *)(a3 + 1408) = v49;
  v52 = *(_OWORD *)(v12 + 1472);
  v53 = *(_OWORD *)(v12 + 1488);
  v54 = *(_OWORD *)(v12 + 1504);
  *(_QWORD *)(a3 + 1520) = *(_QWORD *)(v12 + 1520);
  *(_OWORD *)(a3 + 1504) = v54;
  *(_OWORD *)(a3 + 1488) = v53;
  *(_OWORD *)(a3 + 1472) = v52;
  return 1;
}

void sub_10012B8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  unint64_t TimeStamp;
  _WORD v11[8];
  int64_t v12;
  _BYTE *v13;
  uint8_t buf[8];

  v12 = 0;
  v13 = 0;
  IOHIDEventGetVendorDefinedData(a4, &v13, &v12);
  if (v13)
    v6 = v12 <= 0;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165948);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Empty payload, returning", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165948);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Empty payload, returning", v11, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "static void CLCompass7::onDeviceMotionServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    *(_QWORD *)buf = sub_100127828(TimeStamp);
    sub_10012BAC0(a1, v13, v12, (double *)buf);
  }
}

void sub_10012BAC0(uint64_t a1, _BYTE *a2, size_t a3, double *a4)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  double v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  float v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  _BYTE __dst[100];

  sub_10012BC38(__dst, a2, a3);
  v6 = *(_QWORD **)(a1 + 144);
  if (!v6)
    operator new();
  sub_10012BCA4(__dst, v6);
  v7 = *(_QWORD *)(a1 + 144);
  v8 = *(_OWORD *)(v7 + 8);
  v9 = *(_OWORD *)(v7 + 56);
  v10 = *(_OWORD *)(v7 + 88);
  v32 = *(_OWORD *)(v7 + 72);
  v33 = v10;
  v34 = *(_DWORD *)(v7 + 104);
  v11 = *(_OWORD *)(v7 + 24);
  v29[0] = v8;
  v29[1] = v11;
  v30 = *(_OWORD *)(v7 + 40);
  v31 = v9;
  v12 = *(unsigned int *)(a1 + 132);
  if (!(_DWORD)v12 || *(_QWORD *)((char *)v29 + 4) == v12)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    sub_10012BD0C(a1, (uint64_t)v29, a4, (uint64_t)&v23);
    if ((WORD1(v29[0]) & 0x100) != 0)
    {
      v13 = *a4;
      v16 = v25;
      v17 = v26;
      v18 = v27;
      v14 = v23;
      v15 = v24;
      v22 = 0;
      v19 = v28;
      v20 = HIDWORD(v29[0]);
      v21 = sqrtf((float)((float)(*(float *)&v31 * *(float *)&v31) + (float)(*((float *)&v30 + 3) * *((float *)&v30 + 3)))+ (float)(*((float *)&v31 + 1) * *((float *)&v31 + 1)));
      LOBYTE(v22) = *(_BYTE *)(a1 + 28);
      sub_10012AC18(a1, 0, (uint64_t)&v13, 112);
    }
  }
}

_BYTE *sub_10012BC38(_BYTE *__dst, _BYTE *a2, size_t a3)
{
  uint64_t v4;

  if (a3 && ((*a2 - 1) > 3u ? (v4 = 0) : (v4 = qword_101BB6DD0[(char)(*a2 - 1)]), v4 == a3))
    memcpy(__dst, a2, a3);
  else
    *__dst = -1;
  return __dst;
}

_BYTE *sub_10012BCA4(_BYTE *result, _QWORD *a2)
{
  if ((*result - 1) <= 3u)
    return (_BYTE *)(*(uint64_t (**)(_QWORD *, _BYTE *))(*a2 + 8 * (*result - 1) + 16))(a2, result);
  return result;
}

__n128 sub_10012BCD8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[1];
  *(_OWORD *)(a1 + 40) = a2[2];
  *(_OWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 8) = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(__n128 *)(a1 + 56) = result;
  return result;
}

void sub_10012BD0C(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  char v23;
  float v24;
  float v25;
  char v26;
  unsigned int v27;
  NSObject *v28;
  double v29;
  double v30;
  CFAbsoluteTime Current;
  double v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  float v63;
  float v64;
  double v65;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  const char *v70;
  uint8_t *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double *v79;
  double v80;
  double v81;
  float32x4_t v82;
  uint8_t buf[4];
  const char *v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;
  __int16 v145;
  int v146;
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;
  __int16 v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  _BYTE v158[22];
  __int16 v159;
  double v160;
  _BYTE v161[40];
  _BYTE v162[12];
  double v163;
  _BYTE v164[10];
  __int16 v165;
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  double v172;
  __int16 v173;
  double v174;
  __int16 v175;
  double v176;
  __int16 v177;
  double v178;
  __int16 v179;
  double v180;
  __int16 v181;
  double v182;
  __int16 v183;
  double v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  int v200;
  __int16 v201;
  int v202;
  __int16 v203;
  int v204;
  __int16 v205;
  int v206;
  __int16 v207;
  int v208;
  __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  __int16 v213;
  int v214;
  __int16 v215;
  uint64_t v216;

  v79 = a3;
  v82 = *(float32x4_t *)(a2 + 28);
  sub_10012C97C(&v82, v82);
  v7 = sub_10012C7A4(v82.f32);
  v9 = v8;
  v11 = v10;
  LODWORD(v74) = *(_DWORD *)(a2 + 92);
  HIDWORD(v74) = *(_DWORD *)(a2 + 88);
  HIDWORD(v73) = *(_DWORD *)(a2 + 96);
  v12 = *(float *)(a2 + 16);
  v13 = v12 - *(float *)(a2 + 76);
  v78 = *(double *)(a2 + 20);
  v14 = *(float *)&v78 - *(float *)(a2 + 80);
  v15 = *((float *)&v78 + 1) - *(float *)(a2 + 84);
  *(float *)&v80 = v13;
  *((float *)&v80 + 1) = v14;
  *(float *)&v81 = v15;
  v16 = sub_10012C854(v82.f32);
  v77 = COERCE_DOUBLE(__PAIR64__(LODWORD(v16), v17));
  HIDWORD(v76) = v18;
  v19 = 0;
  v20 = 0.0;
  do
  {
    v20 = v20 + (float)(*(float *)((char *)&v80 + v19) * *(float *)((char *)&v80 + v19));
    v19 += 4;
  }
  while (v19 != 12);
  LODWORD(v76) = sqrtf(v20);
  *(float *)&v75 = (float)((float)((float)(v11 * v15) + (float)(v9 * v14)) + (float)(v7 * v13)) / *(float *)&v76;
  *((float *)&v75 + 1) = *(float *)&v76 * sqrtf(1.0 - (float)(*(float *)&v75 * *(float *)&v75));
  sub_10012C904(a1, *(float *)(a2 + 72), fabsf(*((float *)&v75 + 1)));
  v22 = v21;
  v23 = *(_BYTE *)(a2 + 1);
  v24 = *(float *)(a2 + 68);
  v25 = -1.0;
  if (*(double *)(a1 + 256) != -1.0)
    v25 = sub_10012C9E0(v24, *(double *)(a1 + 240));
  if (*(_BYTE *)(a1 + 129))
  {
    v22 = -1.0;
    v26 = 0;
  }
  else
  {
    v26 = v23;
  }
  v27 = *(unsigned __int16 *)(a2 + 2);
  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021658C0);
  v28 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136324098;
    v29 = *(float *)(a2 + 32);
    v86 = *(float *)(a2 + 28);
    v88 = v29;
    LODWORD(v29) = *(_DWORD *)(a2 + 40);
    v90 = *(float *)(a2 + 36);
    v92 = *(float *)&v29;
    v94 = *((float *)&v74 + 1);
    v96 = *(float *)&v74;
    v98 = *((float *)&v73 + 1);
    v100 = *((float *)&v77 + 1);
    v102 = *((float *)&v76 + 1);
    v104 = *(float *)&v77;
    v106 = v12;
    v108 = *(float *)&v78;
    v110 = *((float *)&v78 + 1);
    v112 = v7;
    v114 = v9;
    v116 = v11;
    v118 = v24;
    v120 = v25;
    v122 = v22;
    v30 = *v79;
    v84 = "GyroCompass";
    v85 = 2048;
    v87 = 2048;
    v89 = 2048;
    v91 = 2048;
    v93 = 2048;
    v95 = 2048;
    v97 = 2048;
    v99 = 2048;
    v101 = 2048;
    v103 = 2048;
    v105 = 2048;
    v107 = 2048;
    v109 = 2048;
    v111 = 2048;
    v113 = 2048;
    v115 = 2048;
    v117 = 2048;
    v119 = 2048;
    v121 = 2048;
    v123 = 1024;
    v124 = v26;
    v125 = 1024;
    v126 = (v27 >> 4) & 1;
    v127 = 1024;
    v128 = (v27 >> 3) & 1;
    v129 = 1024;
    v130 = (v27 >> 2) & 1;
    v131 = 1024;
    v132 = (v27 >> 5) & 1;
    v133 = 1024;
    v134 = (v27 >> 6) & 1;
    v135 = 1024;
    v136 = (v27 >> 8) & 1;
    v137 = 1024;
    v138 = (v27 >> 1) & 1;
    v139 = 1024;
    v140 = v27 & 1;
    v141 = 1024;
    v142 = (v27 >> 10) & 1;
    v143 = 1024;
    v144 = (v27 >> 9) & 1;
    v145 = 1024;
    v146 = (v27 >> 11) & 1;
    v147 = 1024;
    v148 = (v27 >> 12) & 1;
    v149 = 1024;
    v150 = (v27 >> 13) & 1;
    v151 = 1024;
    v152 = (v27 >> 14) & 1;
    v153 = 2048;
    v154 = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Type,%s,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,magBiasEstVar.x,%.8f,.y,%.8f,.z,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,visualLocalizationCorrection,%d,initalized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,north,%d,visualLocalization,%d,timestamp,%f", buf, 0x12Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
    v65 = *(float *)(a2 + 28);
    v66 = *(float *)(a2 + 32);
    v67 = *(float *)(a2 + 36);
    v68 = *(float *)(a2 + 40);
    v69 = *(_QWORD *)v79;
    *(_DWORD *)v158 = 136324098;
    *(_QWORD *)&v158[4] = "GyroCompass";
    *(_WORD *)&v158[12] = 2048;
    *(double *)&v158[14] = v65;
    v159 = 2048;
    v160 = v66;
    *(_WORD *)v161 = 2048;
    *(double *)&v161[2] = v67;
    *(_WORD *)&v161[10] = 2048;
    *(double *)&v161[12] = v68;
    *(_WORD *)&v161[20] = 2048;
    *(double *)&v161[22] = *((float *)&v74 + 1);
    *(_WORD *)&v161[30] = 2048;
    *(double *)&v161[32] = *(float *)&v74;
    *(_WORD *)v162 = 2048;
    *(double *)&v162[2] = *((float *)&v73 + 1);
    *(_WORD *)&v162[10] = 2048;
    v163 = *((float *)&v77 + 1);
    *(_WORD *)v164 = 2048;
    *(double *)&v164[2] = *((float *)&v76 + 1);
    v165 = 2048;
    v166 = *(float *)&v77;
    v167 = 2048;
    v168 = v12;
    v169 = 2048;
    v170 = *(float *)&v78;
    v171 = 2048;
    v172 = *((float *)&v78 + 1);
    v173 = 2048;
    v174 = v7;
    v175 = 2048;
    v176 = v9;
    v177 = 2048;
    v178 = v11;
    v179 = 2048;
    v180 = v24;
    v181 = 2048;
    v182 = v25;
    v183 = 2048;
    v184 = v22;
    v185 = 1024;
    v186 = v26;
    v187 = 1024;
    v188 = (v27 >> 4) & 1;
    v189 = 1024;
    v190 = (v27 >> 3) & 1;
    v191 = 1024;
    v192 = (v27 >> 2) & 1;
    v193 = 1024;
    v194 = (v27 >> 5) & 1;
    v195 = 1024;
    v196 = (v27 >> 6) & 1;
    v197 = 1024;
    v198 = (v27 >> 8) & 1;
    v199 = 1024;
    v200 = (v27 >> 1) & 1;
    v201 = 1024;
    v202 = v27 & 1;
    v203 = 1024;
    v204 = (v27 >> 10) & 1;
    v205 = 1024;
    v206 = (v27 >> 9) & 1;
    v207 = 1024;
    v208 = (v27 >> 11) & 1;
    v209 = 1024;
    v210 = (v27 >> 12) & 1;
    v211 = 1024;
    v212 = (v27 >> 13) & 1;
    v213 = 1024;
    v214 = (v27 >> 14) & 1;
    v215 = 2048;
    v216 = v69;
    LODWORD(v72) = 302;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Type,%s,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,magBiasEstVar.x,%.8f,.y,%.8f,.z,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,biasEstimation,%d,yawCorrection,%d,gravityCorrection,%d,courseCorrection,%d,visualLocalizationCorrection,%d,initalized,%d,accelSaturated,%d,gyroSaturated,%d,compassCalibration,%d,gyroCalibration,%d,course,%d,gmm,%d,north,%d,visualLocalization,%d,timestamp,%f", v158, v72, COERCE_DOUBLE(&v204), v73, v74, v75, v76,
      v77,
      v78,
      *(double *)&v79,
      v80,
      v81,
      *(double *)v82.i64,
      *(double *)&v82.i64[1]);
    v71 = (uint8_t *)v70;
    sub_100512490("Generic", 1, 0, 2, "CLMotionTypeCompass CLCompass7::populateMotionType(const CMDeviceMotionReport::Compass &, const CFTimeInterval &)", "%s\n", v70);
    if (v71 != buf)
      free(v71);
  }
  if (*(_BYTE *)(a1 + 29))
  {
    *(_QWORD *)v158 = off_102171830;
    Current = CFAbsoluteTimeGetCurrent();
    v32 = *v79;
    *(CFAbsoluteTime *)&v158[8] = Current;
    v160 = v32;
    *(_OWORD *)v161 = *(_OWORD *)(a2 + 28);
    *(_QWORD *)&v161[16] = *(_QWORD *)(a2 + 56);
    LODWORD(Current) = *(_DWORD *)(a2 + 64);
    *(float32x2_t *)&v161[28] = vmul_f32(*(float32x2_t *)(a2 + 44), (float32x2_t)vdup_n_s32(0x42652EE1u));
    *(float *)&v32 = *(float *)(a2 + 52) * 57.296;
    *(_DWORD *)&v161[24] = LODWORD(Current);
    *(_DWORD *)&v161[36] = LODWORD(v32);
    *(float *)v162 = v12;
    *(double *)&v162[4] = v78;
    LOBYTE(v163) = v26;
    *((float *)&v163 + 1) = v24;
    *(float *)v164 = v25;
    *(float *)&v164[4] = v22;
    v33 = *(_DWORD *)(a1 + 132);
    LODWORD(v166) = 2;
    HIDWORD(v166) = v33;
    v167 = *(_WORD *)(a2 + 2);
    v34 = sub_1011B78D4();
    sub_1011B8DB0(v34, (uint64_t)v158);
    sub_1015EB864(buf);
    sub_101604FC4((uint64_t)buf);
    v157 |= 1u;
    v155 = *(_QWORD *)&v158[8];
    v35 = v156;
    v36 = *(_QWORD *)v79;
    *(_DWORD *)(v156 + 124) |= 0x10u;
    *(_QWORD *)(v35 + 40) = v36;
    v37 = v156;
    v38 = *(float *)(a2 + 28);
    *(_DWORD *)(v156 + 124) |= 2u;
    *(double *)(v37 + 16) = v38;
    v39 = v156;
    v40 = *(float *)(a2 + 32);
    *(_DWORD *)(v156 + 124) |= 4u;
    *(double *)(v39 + 24) = v40;
    v41 = v156;
    v42 = *(float *)(a2 + 36);
    *(_DWORD *)(v156 + 124) |= 8u;
    *(double *)(v41 + 32) = v42;
    v43 = v156;
    v44 = *(float *)(a2 + 40);
    *(_DWORD *)(v156 + 124) |= 1u;
    *(double *)(v43 + 8) = v44;
    v45 = v156;
    LODWORD(v44) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v156 + 124) |= 0x40000u;
    *(_DWORD *)(v45 + 100) = LODWORD(v44);
    v46 = v156;
    LODWORD(v44) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v156 + 124) |= 0x80000u;
    *(_DWORD *)(v46 + 104) = LODWORD(v44);
    v47 = v156;
    LODWORD(v44) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v156 + 124) |= 0x100000u;
    *(_DWORD *)(v47 + 108) = LODWORD(v44);
    v48 = v156;
    *(float *)&v44 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)(v156 + 124) |= 0x2000u;
    *(_DWORD *)(v48 + 80) = LODWORD(v44);
    v49 = v156;
    *(float *)&v44 = *(float *)(a2 + 48) * 57.296;
    *(_DWORD *)(v156 + 124) |= 0x4000u;
    *(_DWORD *)(v49 + 84) = LODWORD(v44);
    v50 = v156;
    *(float *)&v44 = *(float *)(a2 + 52) * 57.296;
    *(_DWORD *)(v156 + 124) |= 0x8000u;
    *(_DWORD *)(v50 + 88) = LODWORD(v44);
    v51 = v156;
    *(_DWORD *)(v156 + 124) |= 0x100u;
    *(float *)(v51 + 60) = v12;
    v52 = v156;
    *(_DWORD *)(v156 + 124) |= 0x200u;
    *(_DWORD *)(v52 + 64) = LODWORD(v78);
    v53 = v156;
    *(_DWORD *)(v156 + 124) |= 0x400u;
    *(_DWORD *)(v53 + 68) = HIDWORD(v78);
    v54 = v156;
    *(_DWORD *)(v156 + 124) |= 0x80u;
    *(_DWORD *)(v54 + 56) = v26;
    v55 = v156;
    *(_DWORD *)(v156 + 124) |= 0x800u;
    *(float *)(v55 + 72) = v24;
    v56 = v156;
    *(_DWORD *)(v156 + 124) |= 0x20000u;
    *(float *)(v56 + 96) = v25;
    v57 = v156;
    *(_DWORD *)(v156 + 124) |= 0x20u;
    *(float *)(v57 + 48) = v22;
    v58 = v156;
    *(_DWORD *)(v156 + 124) |= 0x1000u;
    *(_DWORD *)(v58 + 76) = 2;
    v59 = v156;
    v60 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)(v156 + 124) |= 0x40u;
    *(_DWORD *)(v59 + 52) = v60;
    v61 = v156;
    v62 = *(unsigned __int16 *)(a2 + 2);
    *(_DWORD *)(v156 + 124) |= 0x10000u;
    *(_DWORD *)(v61 + 92) = v62;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_102165968);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  v63 = acosf(*(float *)&v75);
  *(_QWORD *)(a4 + 40) = 0;
  *(_DWORD *)a4 = HIDWORD(v77);
  *(_DWORD *)(a4 + 4) = HIDWORD(v76);
  *(_DWORD *)(a4 + 8) = LODWORD(v77);
  *(double *)(a4 + 12) = v80;
  *(_DWORD *)(a4 + 20) = LODWORD(v81);
  *(float *)(a4 + 24) = v24;
  *(float *)(a4 + 28) = v25;
  *(float *)(a4 + 32) = v22;
  *(_DWORD *)(a4 + 36) = v26;
  *(_DWORD *)(a4 + 44) = LODWORD(v76);
  *(float *)(a4 + 48) = (float)(v63 * -57.296) + 90.0;
  *(_DWORD *)(a4 + 52) = HIDWORD(v75);
  v64 = v82.f32[2];
  *(double *)(a4 + 56) = v82.f32[3];
  *(float64x2_t *)(a4 + 64) = vcvtq_f64_f32(*(float32x2_t *)v82.f32);
  *(double *)(a4 + 80) = v64;
}

void sub_10012C784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

float sub_10012C7A4(float *a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float result;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  _DWORD v11[3];

  v1 = 0;
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[1];
  result = (float)((float)(v3 * v4) - (float)(*a1 * v2)) + (float)((float)(v3 * v4) - (float)(*a1 * v2));
  v6 = (float)-(float)(v3 * *a1) - (float)(v4 * v2);
  v7 = (float)((float)((float)(v4 * v4) + (float)(*a1 * *a1)) * 2.0) + -1.0;
  *(float *)v11 = result;
  *(float *)&v11[1] = v6 + v6;
  *(float *)&v11[2] = v7;
  v8 = 0.0;
  do
  {
    v8 = v8 + (float)(*(float *)&v11[v1] * *(float *)&v11[v1]);
    ++v1;
  }
  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    v9 = 0;
    v10 = 0.0;
    do
    {
      v10 = v10 + (float)(*(float *)&v11[v9] * *(float *)&v11[v9]);
      ++v9;
    }
    while (v9 != 3);
    return result / sqrtf(v10);
  }
  return result;
}

float sub_10012C854(float *a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float result;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  float v11[3];

  v1 = 0;
  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  result = (float)((float)((float)(*a1 * *a1) + (float)(v3 * v3)) * 2.0) + -1.0;
  v6 = (float)((float)(*a1 * v2) - (float)(v3 * v4)) + (float)((float)(*a1 * v2) - (float)(v3 * v4));
  v7 = (float)((float)(v3 * v2) + (float)(*a1 * v4)) + (float)((float)(v3 * v2) + (float)(*a1 * v4));
  v11[0] = result;
  v11[1] = v6;
  v11[2] = v7;
  v8 = 0.0;
  do
  {
    v8 = v8 + (float)(v11[v1] * v11[v1]);
    ++v1;
  }
  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    v9 = 0;
    v10 = 0.0;
    do
    {
      v10 = v10 + (float)(v11[v9] * v11[v9]);
      ++v9;
    }
    while (v9 != 3);
    return result / sqrtf(v10);
  }
  return result;
}

void sub_10012C904(uint64_t a1, float a2, float a3)
{
  if (a2 != -1.0 && *(_BYTE *)(a1 + 272) && a3 > 0.0)
    asinf(5.0 / a3);
}

float32x4_t sub_10012C97C(float32x4_t *a1, float32x4_t result)
{
  float v2;

  result.f32[0] = sqrtf((float)((float)((float)(a1->f32[1] * a1->f32[1]) + (float)(a1->f32[0] * a1->f32[0]))+ (float)(a1->f32[2] * a1->f32[2]))+ (float)(a1->f32[3] * a1->f32[3]));
  v2 = result.f32[0] + -1.0;
  if ((float)(result.f32[0] + -1.0) <= 0.0)
    v2 = -(float)(result.f32[0] + -1.0);
  if (v2 >= 0.00000011921)
  {
    if (result.f32[0] == 0.0)
    {
      a1->i64[0] = 0;
      a1->i64[1] = 0x3F80000000000000;
    }
    else
    {
      result = vdivq_f32(*a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 0));
      *a1 = result;
    }
  }
  return result;
}

double sub_10012C9E0(double a1, double a2)
{
  double result;
  double v3;

  result = a1 + a2;
  v3 = 360.0;
  if (result >= 360.0)
  {
    v3 = -360.0;
    return result + v3;
  }
  if (result < 0.0)
    return result + v3;
  return result;
}

_QWORD *sub_10012CA10(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t TimeStamp;
  double v6;
  void *v7;
  _QWORD v8[6];

  if (result)
  {
    v4 = result;
    TimeStamp = IOHIDEventGetTimeStamp(a4);
    v6 = sub_100127828(TimeStamp);
    v7 = (void *)v4[5];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1002079F8;
    v8[3] = &unk_102143528;
    v8[4] = v4;
    *(double *)&v8[5] = v6;
    return objc_msgSend(v7, "async:", v8);
  }
  return result;
}

uint64_t sub_10012CA84(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 144) && *(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  return sub_100127554(a2);
}

uint64_t sub_10012CABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v10[5];
  uint64_t v11;
  char v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int8 v20;

  sub_10012D700((uint64_t)v10, a2);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 48);
  sub_10031F08C(&v13, a2 + 56);
  sub_100126D5C(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  sub_10012D080(*(_QWORD *)a1 + 8, v10);
  *(_QWORD *)(v4 + 48) = v11;
  *(_BYTE *)(v4 + 56) = v12;
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 152) = 0;
  if (v20)
  {
    *(_QWORD *)(v4 + 64) = v13;
    v5 = v15;
    *(_OWORD *)(v4 + 72) = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 88) = v5;
    __p[1] = 0;
    v15 = 0;
    __p[0] = 0;
    v6 = v19;
    v7 = v16;
    v8 = v18;
    *(_OWORD *)(v4 + 112) = v17;
    *(_OWORD *)(v4 + 128) = v8;
    *(_OWORD *)(v4 + 96) = v7;
    *(_QWORD *)(v4 + 144) = v6;
    *(_BYTE *)(v4 + 152) = 1;
    LODWORD(v6) = v20;
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
    if ((_DWORD)v6 && SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
  else
  {
    **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  }
  return sub_100127554((uint64_t)v10);
}

void sub_10012CBC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100127554((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10012CBDC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a1 + 176) = off_102143308;
  sub_10012D660(a1 + 184, (_QWORD *)(a2 + 184));
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    v10 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = v10;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    v11 = *(_OWORD *)(a2 + 264);
    v12 = *(_OWORD *)(a2 + 280);
    v13 = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 280) = v12;
    *(_OWORD *)(a1 + 296) = v13;
    *(_OWORD *)(a1 + 264) = v11;
    *(_BYTE *)(a1 + 320) = 1;
  }
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  v14 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v14;
  v15 = *(_OWORD *)(a2 + 368);
  v16 = *(_OWORD *)(a2 + 384);
  v17 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v17;
  *(_OWORD *)(a1 + 368) = v15;
  *(_OWORD *)(a1 + 384) = v16;
  v18 = *(_OWORD *)(a2 + 432);
  v19 = *(_OWORD *)(a2 + 448);
  v20 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 476) = *(_OWORD *)(a2 + 476);
  *(_OWORD *)(a1 + 448) = v19;
  *(_OWORD *)(a1 + 464) = v20;
  *(_OWORD *)(a1 + 432) = v18;
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x201uLL);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_OWORD *)(a2 + 1016) = 0u;
  v22 = *(_OWORD *)(a2 + 1096);
  v21 = *(_OWORD *)(a2 + 1112);
  v23 = *(_OWORD *)(a2 + 1080);
  *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
  *(_OWORD *)(a1 + 1096) = v22;
  *(_OWORD *)(a1 + 1112) = v21;
  *(_OWORD *)(a1 + 1080) = v23;
  v25 = *(_OWORD *)(a2 + 1048);
  v24 = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v25;
  *(_OWORD *)(a1 + 1064) = v24;
  v26 = *(_OWORD *)(a2 + 1248);
  v27 = *(_OWORD *)(a2 + 1264);
  v28 = *(_OWORD *)(a2 + 1232);
  *(_OWORD *)(a1 + 1276) = *(_OWORD *)(a2 + 1276);
  *(_OWORD *)(a1 + 1232) = v28;
  *(_OWORD *)(a1 + 1264) = v27;
  *(_OWORD *)(a1 + 1248) = v26;
  v29 = *(_OWORD *)(a2 + 1184);
  v30 = *(_OWORD *)(a2 + 1200);
  v31 = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1168) = v31;
  *(_OWORD *)(a1 + 1200) = v30;
  *(_OWORD *)(a1 + 1184) = v29;
  v32 = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v32;
  memcpy((void *)(a1 + 1296), (const void *)(a2 + 1296), 0x201uLL);
  *(_QWORD *)(a1 + 1816) = *(_QWORD *)(a2 + 1816);
  *(_QWORD *)(a1 + 1824) = *(_QWORD *)(a2 + 1824);
  *(_OWORD *)(a2 + 1816) = 0u;
  v33 = *(_OWORD *)(a2 + 1880);
  v34 = *(_OWORD *)(a2 + 1896);
  v35 = *(_OWORD *)(a2 + 1912);
  *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
  *(_OWORD *)(a1 + 1896) = v34;
  *(_OWORD *)(a1 + 1912) = v35;
  *(_OWORD *)(a1 + 1880) = v33;
  v36 = *(_OWORD *)(a2 + 1832);
  v37 = *(_OWORD *)(a2 + 1864);
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a2 + 1848);
  *(_OWORD *)(a1 + 1864) = v37;
  *(_OWORD *)(a1 + 1832) = v36;
  *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a2 + 1936);
  *(_QWORD *)(a1 + 1944) = *(_QWORD *)(a2 + 1944);
  *(_QWORD *)(a1 + 1952) = *(_QWORD *)(a2 + 1952);
  *(_QWORD *)(a1 + 1960) = *(_QWORD *)(a2 + 1960);
  *(_QWORD *)(a1 + 1968) = *(_QWORD *)(a2 + 1968);
  *(_OWORD *)(a2 + 1960) = 0u;
  *(_OWORD *)(a2 + 1944) = 0u;
  *(_QWORD *)(a1 + 1976) = *(_QWORD *)(a2 + 1976);
  *(_QWORD *)(a1 + 1984) = *(_QWORD *)(a2 + 1984);
  *(_OWORD *)(a2 + 1976) = 0u;
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a2 + 1992);
  memcpy((void *)(a1 + 2000), (const void *)(a2 + 2000), 0x170uLL);
  memcpy((void *)(a1 + 2368), (const void *)(a2 + 2368), 0x201uLL);
  *(_QWORD *)(a1 + 2888) = *(_QWORD *)(a2 + 2888);
  *(_QWORD *)(a1 + 2896) = *(_QWORD *)(a2 + 2896);
  *(_OWORD *)(a2 + 2888) = 0u;
  v39 = *(_OWORD *)(a2 + 2968);
  v38 = *(_OWORD *)(a2 + 2984);
  v40 = *(_OWORD *)(a2 + 2952);
  *(_BYTE *)(a1 + 3000) = *(_BYTE *)(a2 + 3000);
  *(_OWORD *)(a1 + 2968) = v39;
  *(_OWORD *)(a1 + 2984) = v38;
  *(_OWORD *)(a1 + 2952) = v40;
  v42 = *(_OWORD *)(a2 + 2920);
  v41 = *(_OWORD *)(a2 + 2936);
  *(_OWORD *)(a1 + 2904) = *(_OWORD *)(a2 + 2904);
  *(_OWORD *)(a1 + 2920) = v42;
  *(_OWORD *)(a1 + 2936) = v41;
  v43 = *(_QWORD *)(a2 + 3008);
  *(_BYTE *)(a1 + 3016) = *(_BYTE *)(a2 + 3016);
  *(_QWORD *)(a1 + 3008) = v43;
  v44 = *(_BYTE *)(a2 + 3032);
  *(_QWORD *)(a1 + 3024) = *(_QWORD *)(a2 + 3024);
  *(_BYTE *)(a1 + 3032) = v44;
  v45 = *(_QWORD *)(a2 + 3056);
  *(_OWORD *)(a1 + 3040) = *(_OWORD *)(a2 + 3040);
  *(_QWORD *)(a1 + 3056) = v45;
  *(_QWORD *)(a2 + 3056) = 0;
  *(_OWORD *)(a2 + 3040) = 0u;
  v46 = *(_OWORD *)(a2 + 3124);
  v47 = *(_OWORD *)(a2 + 3112);
  v48 = *(_OWORD *)(a2 + 3096);
  *(_OWORD *)(a1 + 3080) = *(_OWORD *)(a2 + 3080);
  *(_OWORD *)(a1 + 3096) = v48;
  *(_OWORD *)(a1 + 3112) = v47;
  *(_OWORD *)(a1 + 3124) = v46;
  *(_OWORD *)(a1 + 3064) = *(_OWORD *)(a2 + 3064);
  v49 = *(_QWORD *)(a2 + 3160);
  *(_OWORD *)(a1 + 3144) = *(_OWORD *)(a2 + 3144);
  *(_QWORD *)(a1 + 3160) = v49;
  *(_QWORD *)(a2 + 3160) = 0;
  *(_OWORD *)(a2 + 3144) = 0u;
  v50 = *(_OWORD *)(a2 + 3168);
  v51 = *(_OWORD *)(a2 + 3184);
  *(_OWORD *)(a1 + 3200) = *(_OWORD *)(a2 + 3200);
  *(_OWORD *)(a1 + 3184) = v51;
  *(_OWORD *)(a1 + 3168) = v50;
  v52 = *(_OWORD *)(a2 + 3216);
  v53 = *(_OWORD *)(a2 + 3232);
  v54 = *(_OWORD *)(a2 + 3248);
  *(_OWORD *)(a1 + 3264) = *(_OWORD *)(a2 + 3264);
  *(_OWORD *)(a1 + 3248) = v54;
  *(_OWORD *)(a1 + 3232) = v53;
  *(_OWORD *)(a1 + 3216) = v52;
  v55 = *(_OWORD *)(a2 + 3280);
  v56 = *(_OWORD *)(a2 + 3296);
  v57 = *(_OWORD *)(a2 + 3312);
  *(_BYTE *)(a1 + 3328) = *(_BYTE *)(a2 + 3328);
  *(_OWORD *)(a1 + 3312) = v57;
  *(_OWORD *)(a1 + 3296) = v56;
  *(_OWORD *)(a1 + 3280) = v55;
  *(_QWORD *)(a1 + 3352) = 0;
  *(_OWORD *)(a1 + 3336) = 0u;
  *(_QWORD *)(a1 + 3336) = *(_QWORD *)(a2 + 3336);
  *(_QWORD *)(a1 + 3344) = *(_QWORD *)(a2 + 3344);
  *(_QWORD *)(a1 + 3352) = *(_QWORD *)(a2 + 3352);
  *(_QWORD *)(a2 + 3352) = 0;
  *(_OWORD *)(a2 + 3336) = 0u;
  sub_10012D080(a1 + 3360, (uint64_t *)(a2 + 3360));
  v58 = *(_OWORD *)(a2 + 3400);
  *(_QWORD *)(a1 + 3416) = *(_QWORD *)(a2 + 3416);
  *(_OWORD *)(a1 + 3400) = v58;
  v59 = *(_OWORD *)(a2 + 3424);
  v60 = *(_OWORD *)(a2 + 3440);
  v61 = *(_OWORD *)(a2 + 3456);
  *(_QWORD *)(a1 + 3471) = *(_QWORD *)(a2 + 3471);
  *(_OWORD *)(a1 + 3456) = v61;
  *(_OWORD *)(a1 + 3440) = v60;
  *(_OWORD *)(a1 + 3424) = v59;
  *(_QWORD *)(a1 + 3480) = *(_QWORD *)(a2 + 3480);
  *(_QWORD *)(a1 + 3488) = *(_QWORD *)(a2 + 3488);
  *(_OWORD *)(a2 + 3480) = 0u;
  v62 = *(_OWORD *)(a2 + 3496);
  *(_OWORD *)(a1 + 3505) = *(_OWORD *)(a2 + 3505);
  *(_OWORD *)(a1 + 3496) = v62;
  return a1;
}

void sub_10012D064(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012D080(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_10012D0F0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 v77;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  v10 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 176) = off_102143308;
  sub_10012D660(a1 + 184, (_QWORD *)(a2 + 184));
  sub_10031F08C((_BYTE *)(a1 + 232), a2 + 232);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  v16 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v16;
  v17 = *(_OWORD *)(a2 + 368);
  v18 = *(_OWORD *)(a2 + 384);
  v19 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v19;
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 384) = v18;
  v20 = *(_OWORD *)(a2 + 432);
  v21 = *(_OWORD *)(a2 + 448);
  v22 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 476) = *(_OWORD *)(a2 + 476);
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 464) = v22;
  *(_OWORD *)(a1 + 432) = v20;
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x201uLL);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  v23 = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1024) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *(_OWORD *)(a2 + 1032);
  v27 = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1064) = v27;
  *(_OWORD *)(a1 + 1032) = v26;
  v28 = *(_OWORD *)(a2 + 1080);
  v29 = *(_OWORD *)(a2 + 1096);
  v30 = *(_OWORD *)(a2 + 1112);
  *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
  *(_OWORD *)(a1 + 1096) = v29;
  *(_OWORD *)(a1 + 1112) = v30;
  *(_OWORD *)(a1 + 1080) = v28;
  v31 = *(_OWORD *)(a2 + 1184);
  v32 = *(_OWORD *)(a2 + 1200);
  v33 = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1168) = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1216) = v33;
  *(_OWORD *)(a1 + 1200) = v32;
  *(_OWORD *)(a1 + 1184) = v31;
  v34 = *(_OWORD *)(a2 + 1248);
  v35 = *(_OWORD *)(a2 + 1264);
  v36 = *(_OWORD *)(a2 + 1276);
  *(_OWORD *)(a1 + 1232) = *(_OWORD *)(a2 + 1232);
  *(_OWORD *)(a1 + 1276) = v36;
  *(_OWORD *)(a1 + 1264) = v35;
  *(_OWORD *)(a1 + 1248) = v34;
  v37 = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1152) = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v37;
  memcpy((void *)(a1 + 1296), (const void *)(a2 + 1296), 0x201uLL);
  *(_QWORD *)(a1 + 1816) = *(_QWORD *)(a2 + 1816);
  v38 = *(_QWORD *)(a2 + 1824);
  *(_QWORD *)(a1 + 1824) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = *(_OWORD *)(a2 + 1832);
  v42 = *(_OWORD *)(a2 + 1864);
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)(a2 + 1848);
  *(_OWORD *)(a1 + 1864) = v42;
  *(_OWORD *)(a1 + 1832) = v41;
  v43 = *(_OWORD *)(a2 + 1880);
  v44 = *(_OWORD *)(a2 + 1896);
  v45 = *(_OWORD *)(a2 + 1912);
  *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
  *(_OWORD *)(a1 + 1896) = v44;
  *(_OWORD *)(a1 + 1912) = v45;
  *(_OWORD *)(a1 + 1880) = v43;
  *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a2 + 1936);
  sub_10018EDC0(a1 + 1944, (_QWORD *)(a2 + 1944));
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a2 + 1992);
  memcpy((void *)(a1 + 2000), (const void *)(a2 + 2000), 0x170uLL);
  memcpy((void *)(a1 + 2368), (const void *)(a2 + 2368), 0x201uLL);
  *(_QWORD *)(a1 + 2888) = *(_QWORD *)(a2 + 2888);
  v46 = *(_QWORD *)(a2 + 2896);
  *(_QWORD *)(a1 + 2896) = v46;
  if (v46)
  {
    v47 = (unint64_t *)(v46 + 8);
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v49 = *(_OWORD *)(a2 + 2904);
  v50 = *(_OWORD *)(a2 + 2936);
  *(_OWORD *)(a1 + 2920) = *(_OWORD *)(a2 + 2920);
  *(_OWORD *)(a1 + 2936) = v50;
  *(_OWORD *)(a1 + 2904) = v49;
  v51 = *(_OWORD *)(a2 + 2952);
  v52 = *(_OWORD *)(a2 + 2968);
  v53 = *(_OWORD *)(a2 + 2984);
  *(_BYTE *)(a1 + 3000) = *(_BYTE *)(a2 + 3000);
  *(_OWORD *)(a1 + 2968) = v52;
  *(_OWORD *)(a1 + 2984) = v53;
  *(_OWORD *)(a1 + 2952) = v51;
  v54 = *(_QWORD *)(a2 + 3008);
  *(_BYTE *)(a1 + 3016) = *(_BYTE *)(a2 + 3016);
  *(_QWORD *)(a1 + 3008) = v54;
  v55 = *(_QWORD *)(a2 + 3024);
  *(_BYTE *)(a1 + 3032) = *(_BYTE *)(a2 + 3032);
  *(_QWORD *)(a1 + 3024) = v55;
  if (*(char *)(a2 + 3063) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 3040), *(void **)(a2 + 3040), *(_QWORD *)(a2 + 3048));
  }
  else
  {
    v56 = *(_OWORD *)(a2 + 3040);
    *(_QWORD *)(a1 + 3056) = *(_QWORD *)(a2 + 3056);
    *(_OWORD *)(a1 + 3040) = v56;
  }
  *(_OWORD *)(a1 + 3064) = *(_OWORD *)(a2 + 3064);
  v57 = *(_OWORD *)(a2 + 3080);
  v58 = *(_OWORD *)(a2 + 3096);
  v59 = *(_OWORD *)(a2 + 3112);
  *(_OWORD *)(a1 + 3124) = *(_OWORD *)(a2 + 3124);
  *(_OWORD *)(a1 + 3112) = v59;
  *(_OWORD *)(a1 + 3096) = v58;
  *(_OWORD *)(a1 + 3080) = v57;
  v60 = (_BYTE *)(a1 + 3144);
  if (*(char *)(a2 + 3167) < 0)
  {
    sub_100115CE4(v60, *(void **)(a2 + 3144), *(_QWORD *)(a2 + 3152));
  }
  else
  {
    v61 = *(_OWORD *)(a2 + 3144);
    *(_QWORD *)(a1 + 3160) = *(_QWORD *)(a2 + 3160);
    *(_OWORD *)v60 = v61;
  }
  v62 = *(_OWORD *)(a2 + 3168);
  v63 = *(_OWORD *)(a2 + 3184);
  *(_OWORD *)(a1 + 3200) = *(_OWORD *)(a2 + 3200);
  *(_OWORD *)(a1 + 3184) = v63;
  *(_OWORD *)(a1 + 3168) = v62;
  v64 = *(_OWORD *)(a2 + 3216);
  v65 = *(_OWORD *)(a2 + 3232);
  v66 = *(_OWORD *)(a2 + 3248);
  *(_OWORD *)(a1 + 3264) = *(_OWORD *)(a2 + 3264);
  *(_OWORD *)(a1 + 3248) = v66;
  *(_OWORD *)(a1 + 3232) = v65;
  *(_OWORD *)(a1 + 3216) = v64;
  v67 = *(_OWORD *)(a2 + 3280);
  v68 = *(_OWORD *)(a2 + 3296);
  v69 = *(_OWORD *)(a2 + 3312);
  *(_BYTE *)(a1 + 3328) = *(_BYTE *)(a2 + 3328);
  *(_OWORD *)(a1 + 3312) = v69;
  *(_OWORD *)(a1 + 3296) = v68;
  *(_OWORD *)(a1 + 3280) = v67;
  *(_QWORD *)(a1 + 3352) = 0;
  *(_OWORD *)(a1 + 3336) = 0u;
  sub_10055CC6C((_QWORD *)(a1 + 3336), *(uint64_t **)(a2 + 3336), *(uint64_t **)(a2 + 3344), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 3344) - *(_QWORD *)(a2 + 3336)) >> 3));
  sub_10012E3D0(a1 + 3360, a2 + 3360);
  v70 = *(_OWORD *)(a2 + 3400);
  *(_QWORD *)(a1 + 3416) = *(_QWORD *)(a2 + 3416);
  *(_OWORD *)(a1 + 3400) = v70;
  v71 = *(_OWORD *)(a2 + 3424);
  v72 = *(_OWORD *)(a2 + 3440);
  v73 = *(_OWORD *)(a2 + 3456);
  *(_QWORD *)(a1 + 3471) = *(_QWORD *)(a2 + 3471);
  *(_OWORD *)(a1 + 3456) = v73;
  *(_OWORD *)(a1 + 3440) = v72;
  *(_OWORD *)(a1 + 3424) = v71;
  *(_QWORD *)(a1 + 3480) = *(_QWORD *)(a2 + 3480);
  v74 = *(_QWORD *)(a2 + 3488);
  *(_QWORD *)(a1 + 3488) = v74;
  if (v74)
  {
    v75 = (unint64_t *)(v74 + 8);
    do
      v76 = __ldxr(v75);
    while (__stxr(v76 + 1, v75));
  }
  v77 = *(_OWORD *)(a2 + 3496);
  *(_OWORD *)(a1 + 3505) = *(_OWORD *)(a2 + 3505);
  *(_OWORD *)(a1 + 3496) = v77;
  return a1;
}

void sub_10012D5A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;

  if (*(char *)(v1 + 3063) < 0)
    operator delete(*v6);
  sub_100261F44(v1 + 2888);
  sub_10047F6F4(v5);
  sub_100261F44(v1 + 1816);
  sub_100261F44(v1 + 1016);
  if (*(_BYTE *)(v1 + 320))
  {
    if (*(char *)(v1 + 263) < 0)
      operator delete(*(void **)(v1 + 240));
  }
  *(_QWORD *)(v1 + 176) = v7 + 16;
  sub_1004A4854(v4);
  sub_100261F44(v3);
  sub_100261F44(v2);
  _Unwind_Resume(a1);
}

void sub_10012D658()
{
  JUMPOUT(0x10012D640);
}

uint64_t sub_10012D660(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int128 *v8;
  unint64_t v9;
  char *v10;
  __int128 *v11;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v4 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    v8 = 0;
    v11 = 0;
    v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    v8 = (__int128 *)(*(_QWORD *)v7 + 16 * v4);
    v9 = a2[5] + v4;
    v10 = (char *)(v5 + 8 * (v9 >> 8));
    v11 = (__int128 *)(*(_QWORD *)v10 + 16 * v9);
  }
  sub_10055CFCC((_QWORD *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_10012D6EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012D700(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_10012D8CC(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_10012D75C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100127554(v1);
  _Unwind_Resume(a1);
}

void sub_10012D774(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_10025955C();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_10012D8CC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];
  uint64_t v26;

  v25[0] = *a2;
  v7 = sub_100129380((uint64_t)v25);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            v25[0] = v13[2];
            v15 = sub_100129380((uint64_t)v25);
            v26 = *a2;
            if (v15 == sub_100129380((uint64_t)&v26))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_10012DB58(a1, v8, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9)
          v23 %= v9;
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v13 = (_QWORD *)v25[0];
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_10012DB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10)
{
  if (__p)
    sub_10055A1C0((uint64_t)&a10, __p);
  _Unwind_Resume(exception_object);
}

__n128 sub_10012DB58@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  __n128 *v8;
  unsigned __int8 *v9;
  __n128 v10;
  __n128 result;

  v7 = a1 + 16;
  v8 = (__n128 *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = a2;
  v8[1].n128_u64[0] = *(_QWORD *)a3;
  v9 = &v8[1].n128_u8[8];
  if (*(char *)(a3 + 31) < 0)
  {
    sub_100115CE4(v9, *(void **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a3 + 8);
    v8[2].n128_u64[1] = *(_QWORD *)(a3 + 24);
  }
  v10 = *(__n128 *)(a3 + 48);
  v8[3] = *(__n128 *)(a3 + 32);
  v8[4] = v10;
  result = *(__n128 *)(a3 + 64);
  v8[5] = result;
  v8[6].n128_u64[0] = *(_QWORD *)(a3 + 80);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10012DC04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_10055A1C0(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10012DC20(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10012FC7C(v4, (uint64_t)a1);
  sub_10012E608(a1, (uint64_t)v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012DCC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10012DCE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v4 = sub_10055CDBC(a1, a2);
  sub_10055CE24(v4 + 56, a2 + 56);
  sub_10055CD68((_BYTE *)(a1 + 112), a2 + 112);
  v5 = *(_OWORD *)(a2 + 208);
  v6 = *(_OWORD *)(a2 + 224);
  v7 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v7;
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 224) = v6;
  v8 = *(_OWORD *)(a2 + 272);
  v9 = *(_OWORD *)(a2 + 288);
  v10 = *(_OWORD *)(a2 + 304);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 288) = v9;
  *(_OWORD *)(a1 + 304) = v10;
  *(_OWORD *)(a1 + 272) = v8;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  if (*(_BYTE *)(a2 + 1128))
  {
    v11 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v11;
    v12 = *(_OWORD *)(a2 + 360);
    v13 = *(_OWORD *)(a2 + 376);
    v14 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v14;
    *(_OWORD *)(a1 + 360) = v12;
    *(_OWORD *)(a1 + 376) = v13;
    v15 = *(_OWORD *)(a2 + 424);
    v16 = *(_OWORD *)(a2 + 440);
    v17 = *(_OWORD *)(a2 + 456);
    *(_OWORD *)(a1 + 468) = *(_OWORD *)(a2 + 468);
    *(_OWORD *)(a1 + 440) = v16;
    *(_OWORD *)(a1 + 456) = v17;
    *(_OWORD *)(a1 + 424) = v15;
    memcpy((void *)(a1 + 488), (const void *)(a2 + 488), 0x201uLL);
    *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
    v18 = *(_QWORD *)(a2 + 1016);
    *(_QWORD *)(a1 + 1016) = v18;
    if (v18)
    {
      v19 = (unint64_t *)(v18 + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v21 = *(_OWORD *)(a2 + 1024);
    v22 = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1040) = v22;
    *(_OWORD *)(a1 + 1024) = v21;
    v23 = *(_OWORD *)(a2 + 1072);
    v24 = *(_OWORD *)(a2 + 1088);
    v25 = *(_OWORD *)(a2 + 1104);
    *(_BYTE *)(a1 + 1120) = *(_BYTE *)(a2 + 1120);
    *(_OWORD *)(a1 + 1104) = v25;
    *(_OWORD *)(a1 + 1088) = v24;
    *(_OWORD *)(a1 + 1072) = v23;
    *(_BYTE *)(a1 + 1128) = 1;
  }
  sub_10055CE8C(a1 + 1136, a2 + 1136);
  sub_10055CF30((_BYTE *)(a1 + 1168), a2 + 1168);
  sub_10055CF84(a1 + 1320, (__int128 *)(a2 + 1320));
  sub_10012D0F0(a1 + 1352, a2 + 1352);
  return a1;
}

void sub_10012DE68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void **v6;
  void *v8;

  if (*(_BYTE *)(v1 + 1344) && *(char *)(v1 + 1343) < 0)
    operator delete(*v6);
  sub_10055CBA8(v5);
  if (*(_BYTE *)(v1 + 1160))
  {
    v8 = *v4;
    if (*v4)
    {
      *(_QWORD *)(v1 + 1144) = v8;
      operator delete(v8);
    }
  }
  if (*(_BYTE *)(v1 + 1128))
    sub_100261F44(v1 + 1008);
  sub_10055CBF0(v3);
  if (*(_BYTE *)(v1 + 104))
    sub_100067AC4(v2);
  if (*(_BYTE *)(v1 + 48))
    sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012DF0C(uint64_t a1, uint64_t a2)
{
  char v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = v4;
  if (*(char *)(a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 64) = v6;
  v9 = (_BYTE *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_100115CE4(v9, *(void **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)v9 = v10;
  }
  v11 = *(_OWORD *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  v13 = *(_OWORD *)(a2 + 200);
  v14 = *(_OWORD *)(a2 + 216);
  v15 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 200) = v13;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  sub_10055CC6C((_QWORD *)(a1 + 264), *(uint64_t **)(a2 + 264), *(uint64_t **)(a2 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 272) - *(_QWORD *)(a2 + 264)) >> 3));
  *(_BYTE *)(a1 + 288) = *(_BYTE *)(a2 + 288);
  sub_10012E3D0(a1 + 296, a2 + 296);
  sub_10012E520(a1 + 336, a2 + 336);
  sub_10012E594(a1 + 376, a2 + 376);
  sub_10012E3D0(a1 + 416, a2 + 416);
  sub_10012E3D0(a1 + 456, a2 + 456);
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x120uLL);
  sub_1002A2230(a1 + 784, (__int128 *)(a2 + 784));
  *(_BYTE *)(a1 + 816) = *(_BYTE *)(a2 + 816);
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 840) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  sub_10055CCF0((_QWORD *)(a1 + 824), *(const void **)(a2 + 824), *(_QWORD *)(a2 + 832), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*(_QWORD *)(a2 + 832) - *(_QWORD *)(a2 + 824)) >> 3));
  *(_WORD *)(a1 + 848) = *(_WORD *)(a2 + 848);
  sub_10055CD68((_BYTE *)(a1 + 856), a2 + 856);
  sub_10055CDBC(a1 + 952, a2 + 952);
  sub_10055CE24(a1 + 1008, a2 + 1008);
  v16 = *(_OWORD *)(a2 + 1064);
  v17 = *(_OWORD *)(a2 + 1080);
  v18 = *(_OWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1096) = *(_OWORD *)(a2 + 1096);
  *(_OWORD *)(a1 + 1112) = v18;
  *(_OWORD *)(a1 + 1064) = v16;
  *(_OWORD *)(a1 + 1080) = v17;
  v19 = *(_OWORD *)(a2 + 1128);
  v20 = *(_OWORD *)(a2 + 1144);
  v21 = *(_OWORD *)(a2 + 1160);
  *(_DWORD *)(a1 + 1176) = *(_DWORD *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v20;
  *(_OWORD *)(a1 + 1160) = v21;
  *(_OWORD *)(a1 + 1128) = v19;
  *(_BYTE *)(a1 + 1184) = 0;
  *(_BYTE *)(a1 + 1984) = 0;
  if (*(_BYTE *)(a2 + 1984))
  {
    v22 = *(_OWORD *)(a2 + 1200);
    *(_OWORD *)(a1 + 1184) = *(_OWORD *)(a2 + 1184);
    *(_OWORD *)(a1 + 1200) = v22;
    v23 = *(_OWORD *)(a2 + 1216);
    v24 = *(_OWORD *)(a2 + 1232);
    v25 = *(_OWORD *)(a2 + 1264);
    *(_OWORD *)(a1 + 1248) = *(_OWORD *)(a2 + 1248);
    *(_OWORD *)(a1 + 1264) = v25;
    *(_OWORD *)(a1 + 1216) = v23;
    *(_OWORD *)(a1 + 1232) = v24;
    v26 = *(_OWORD *)(a2 + 1280);
    v27 = *(_OWORD *)(a2 + 1296);
    v28 = *(_OWORD *)(a2 + 1312);
    *(_OWORD *)(a1 + 1324) = *(_OWORD *)(a2 + 1324);
    *(_OWORD *)(a1 + 1296) = v27;
    *(_OWORD *)(a1 + 1312) = v28;
    *(_OWORD *)(a1 + 1280) = v26;
    memcpy((void *)(a1 + 1344), (const void *)(a2 + 1344), 0x201uLL);
    *(_QWORD *)(a1 + 1864) = *(_QWORD *)(a2 + 1864);
    v29 = *(_QWORD *)(a2 + 1872);
    *(_QWORD *)(a1 + 1872) = v29;
    if (v29)
    {
      v30 = (unint64_t *)(v29 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = *(_OWORD *)(a2 + 1880);
    v33 = *(_OWORD *)(a2 + 1912);
    *(_OWORD *)(a1 + 1896) = *(_OWORD *)(a2 + 1896);
    *(_OWORD *)(a1 + 1912) = v33;
    *(_OWORD *)(a1 + 1880) = v32;
    v34 = *(_OWORD *)(a2 + 1928);
    v35 = *(_OWORD *)(a2 + 1944);
    v36 = *(_OWORD *)(a2 + 1960);
    *(_BYTE *)(a1 + 1976) = *(_BYTE *)(a2 + 1976);
    *(_OWORD *)(a1 + 1944) = v35;
    *(_OWORD *)(a1 + 1960) = v36;
    *(_OWORD *)(a1 + 1928) = v34;
    *(_BYTE *)(a1 + 1984) = 1;
  }
  sub_10055CE8C(a1 + 1992, a2 + 1992);
  sub_10055CF30((_BYTE *)(a1 + 2024), a2 + 2024);
  sub_10055CF84(a1 + 2176, (__int128 *)(a2 + 2176));
  return a1;
}

void sub_10012E284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void **v16;
  uint64_t v17;

  if (*(char *)(v17 + 47) < 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

void sub_10012E3A0()
{
  JUMPOUT(0x10012E360);
}

void sub_10012E3A8()
{
  JUMPOUT(0x10012E368);
}

void sub_10012E3B0()
{
  JUMPOUT(0x10012E370);
}

void sub_10012E3B8()
{
  JUMPOUT(0x10012E378);
}

void sub_10012E3C0()
{
  JUMPOUT(0x10012E380);
}

void sub_10012E3C8()
{
  JUMPOUT(0x10012E390);
}

uint64_t sub_10012E3D0(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1000AF824(a1, i + 2, i + 2);
  return a1;
}

void sub_10012E42C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

void sub_10012E444(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_10012D774(a1, prime);
  }
}

uint64_t sub_10012E520(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_10014D354(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_10012E57C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100126BFC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012E594(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_10012E444(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_10014D644(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_10012E5F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

void sub_10012E608(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int *v4;
  _DWORD *v5;

  v4 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 9:
    case 0xC:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1D:
      sub_100130820(a3, a2);
      break;
    case 2:
      sub_100D88D00(a2, (uint64_t)a3);
      break;
    case 3:
      sub_100D88904(a2, v4, (uint64_t)a3);
      break;
    case 4:
      sub_100D886B8(a2, v4, (uint64_t)a3);
      break;
    case 5:
      sub_100D89150(a2, (uint64_t)v4, (uint64_t)a3);
      break;
    case 6:
      sub_100D89348(a2, a3);
      break;
    case 7:
      sub_100216930(a2, (uint64_t)a3);
      break;
    case 8:
      sub_100D893A4(a2, (uint64_t)a3);
      break;
    case 0xA:
      sub_100D89ED0(a2, v4, (uint64_t)a3);
      break;
    case 0xB:
      sub_100D895A4(a2, (uint64_t)a3);
      break;
    case 0xD:
      sub_100D8A270(a2, (uint64_t)a3);
      break;
    case 0x14:
      sub_100D89CC4(a2, (uint64_t)a3);
      break;
    case 0x15:
      sub_100D898F0(a2, v4, (uint64_t)a3);
      break;
    case 0x18:
      sub_1000156CC(a2, (uint64_t)a3);
      break;
    case 0x1A:
      v5 = sub_100130820(a3, a2);
      if (*(int *)(a2 + 6472) <= 0 && !*((_BYTE *)v5 + 1961))
        *((_BYTE *)v5 + 1961) = 1;
      break;
    case 0x1B:
      sub_100D88F24(a2, (uint64_t)a3);
      break;
    case 0x1C:
      sub_100D8A450(a2, (uint64_t)a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012E7BC(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10012FA08(v4, (uint64_t)a1);
  sub_10012E880(a1, (uint64_t)v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012E864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012E880(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_100130768(a3, a2);
      break;
    case 7:
      sub_1002151E0(a2, (uint64_t)(a1 + 2), (uint64_t)a3);
      break;
    case 8:
      sub_100C59868(a2, a3);
      break;
    case 0x1D:
      sub_100C59C28(a2, a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012E8EC(uint64_t *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _DWORD v8[202];
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_10012FAD4(v8, (uint64_t)a2, a1);
  sub_10012E9EC(a2, (uint64_t)v8, a3);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_100126B34((uint64_t)&v10);
  sub_100126A1C((uint64_t)&v9);
  sub_100126D5C((uint64_t)v8);
}

void sub_10012E9D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100559D80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012E9EC(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int *v3;
  uint64_t v4;

  v3 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      v4 = a2;
      goto LABEL_3;
    case 1:
      v4 = a2;
      goto LABEL_3;
    case 2:
      v4 = a2;
      goto LABEL_3;
    case 3:
      sub_1011373E0(a2, a3);
      return;
    case 4:
      v4 = a2;
      goto LABEL_3;
    case 5:
      v4 = a2;
      goto LABEL_3;
    case 6:
      v4 = a2;
      goto LABEL_3;
    case 7:
      sub_100215690(a2, (uint64_t)v3, (uint64_t)a3);
      return;
    case 8:
      sub_101136988(a2, (uint64_t)a3);
      return;
    case 9:
      v4 = a2;
      goto LABEL_3;
    case 0xA:
      v4 = a2;
      goto LABEL_3;
    case 0xB:
      v4 = a2;
      goto LABEL_3;
    case 0xC:
      v4 = a2;
      goto LABEL_3;
    case 0xD:
      v4 = a2;
      goto LABEL_3;
    case 0xE:
      v4 = a2;
      goto LABEL_3;
    case 0xF:
      v4 = a2;
      goto LABEL_3;
    case 0x10:
      v4 = a2;
      goto LABEL_3;
    case 0x11:
      v4 = a2;
      goto LABEL_3;
    case 0x12:
      v4 = a2;
      goto LABEL_3;
    case 0x13:
      v4 = a2;
      goto LABEL_3;
    case 0x14:
      sub_1011362C4(a2, (uint64_t)a3);
      return;
    case 0x15:
      v4 = a2;
      goto LABEL_3;
    case 0x16:
      sub_1011364C4(a2, v3, (uint64_t)a3);
      return;
    case 0x17:
      v4 = a2;
      goto LABEL_3;
    case 0x18:
      sub_10006F7F8(a2, (uint64_t)v3, (uint64_t)a3);
      return;
    case 0x19:
      v4 = a2;
      goto LABEL_3;
    case 0x1A:
      v4 = a2;
      goto LABEL_3;
    case 0x1B:
      v4 = a2;
      goto LABEL_3;
    case 0x1C:
      v4 = a2;
LABEL_3:
      sub_100130E4C(v4, a3);
      break;
    case 0x1D:
      sub_101135144(a2, (uint64_t)a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012EBF4(_DWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10012FBC0(v4, (uint64_t)a1);
  sub_10012ECB8(a1, (uint64_t)v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012EC9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012ECB8(_DWORD *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  __n128 *v3;
  _BYTE *v5;
  _DWORD *v6;
  uint64_t v7;

  v3 = (__n128 *)(a1 + 2);
  v5 = a3 + 1508;
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 0:
    case 1:
    case 0x13:
      sub_100131230(a3, a2);
      break;
    case 2:
      sub_100DBB030(a2, (uint64_t)a3);
      break;
    case 3:
      sub_100DBB430(a2, v3, (uint64_t)a3);
      break;
    case 4:
      sub_100DBA9C4(a2, v3, (uint64_t)a3);
      break;
    case 5:
      sub_100DBAC50(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 6:
      sub_100DBAE40(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 7:
      sub_10006C704(a2, (uint64_t)v3, a3);
      break;
    case 8:
      sub_100DBB6C4(a2, (uint64_t *)v3, (uint64_t)a3);
      break;
    case 9:
      sub_100DBC690(a2, (int *)v3, (uint64_t)a3);
      break;
    case 0xA:
      sub_100DBD0AC(a2, v3, a3);
      break;
    case 0xB:
      sub_100DBC5F8(a2, (int *)v3, (uint64_t)a3);
      break;
    case 0xC:
      sub_100131230(a3, a2);
      v5[417] = v3->n128_u8[0];
      break;
    case 0xD:
      v6 = sub_100131230(a3, a2);
      if ((*(_DWORD *)(a2 + 6440) - 1) >= 2)
        v7 = 0;
      else
        v7 = *(_QWORD *)(a2 + 6456);
      *((_QWORD *)v6 + 753) = v7;
      if (*(int *)(a2 + 6472) >= 1)
        *v5 = 1;
      break;
    case 0xE:
      sub_100131230(a3, a2);
      v5[418] = v3->n128_u8[0];
      break;
    case 0xF:
      sub_100131230(a3, a2)[1611] = v3->n128_u32[0];
      break;
    case 0x10:
      sub_100130E8C(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 0x11:
      sub_100DBE58C(a2, a3);
      break;
    case 0x12:
      sub_100DBD118(a2, v3, (uint64_t)a3);
      break;
    case 0x14:
      sub_100DBD82C(a2, (int *)v3, (uint64_t)a3);
      break;
    case 0x15:
      sub_100DBD180(a2, v3, (uint64_t)a3);
      break;
    case 0x16:
      sub_100DBE314(a2, v3, a3);
      break;
    case 0x17:
      sub_100DC3474(a2, (unsigned __int8 *)v3, (uint64_t)a3);
      break;
    case 0x18:
      sub_10006E534(a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 0x19:
      sub_10001A520(a2, v3, (uint64_t)a3);
      break;
    case 0x1A:
      sub_100DC2EF0(a2, v3, (uint64_t)a3);
      break;
    case 0x1B:
      sub_100DBA6A4(a2, (uint64_t)a3);
      break;
    case 0x1C:
      sub_100131230(a3, a2)[1605] = 0;
      break;
    case 0x1D:
      sub_100DC3C60(a2, (uint64_t)a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012F008(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10012FD38(v4, (uint64_t)a1);
  sub_10012F0CC(a1, (uint64_t)v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012F0B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012F0CC(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *v3;

  v3 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x18:
    case 0x1A:
    case 0x1C:
    case 0x1D:
      sub_100130938(a3, a2);
      break;
    case 1:
      sub_100D7838C(a2, a3);
      break;
    case 4:
      sub_100D785E8(a2, v3, a3);
      break;
    case 9:
      sub_100D7871C(a2, v3, a3);
      break;
    case 0x17:
      sub_100D78850(a2, a3);
      break;
    case 0x19:
      sub_100216BC4(a2, v3, a3);
      break;
    case 0x1B:
      sub_100D78980(a2, a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012F164(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10012FE50(v4, (uint64_t)a1);
  sub_10012F228(a1, (uint64_t)v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012F20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012F228(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1D:
      sub_10012FD94(a3, a2);
      break;
    case 0x14:
      sub_100E4C660(a2, a1 + 2, a3);
      break;
    case 0x1C:
      sub_100E4C3D8(a2, a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012F288(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_10012FF0C(v4, (uint64_t)a1);
  sub_10012F34C(a1, (uint64_t)v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012F330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012F34C(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      sub_100130B38(a3, a2);
      break;
    case 7:
      sub_100217020(a2, a3);
      break;
    case 9:
      sub_100F4D5E0(a2, a3);
      break;
    case 0x14:
      sub_100F4D59C(a2, a3);
      break;
    case 0x18:
      sub_100216F30(a2, a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012F3BC(uint64_t *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _DWORD v8[202];
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  sub_10012FFC8(v8, (uint64_t)a2, a1);
  sub_10012F4BC(a2, v8, a3);
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_100126B34((uint64_t)&v10);
  sub_100126A1C((uint64_t)&v9);
  sub_100126D5C((uint64_t)v8);
}

void sub_10012F4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100559D80((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012F4BC(int *a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  int *v3;

  v3 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x1A:
    case 0x1C:
      sub_10013128C(a3, (uint64_t)a2);
      break;
    case 4:
      sub_100559C90((uint64_t)a2, v3, (uint64_t)a3);
      break;
    case 7:
      sub_100217304((uint64_t)a2, (uint64_t)v3, (uint64_t)a3);
      break;
    case 8:
      sub_100558D00((uint64_t)a2, a3);
      break;
    case 0x13:
      sub_1005599E8(a2, v3, (uint64_t)a3);
      break;
    case 0x14:
      sub_100558BF8((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x18:
      sub_100217134(a2, (uint64_t)a3);
      break;
    case 0x19:
      sub_100217220((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x1B:
      sub_1005582D4((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_1005594DC((uint64_t)a2, a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012F578(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  _DWORD v16[202];
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v5 = a1[1];
  v14 = *a1;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_1001300B4(v16, (uint64_t)a2, &v14);
  sub_10012F6DC(a2, (uint64_t)v16, a3);
  v8 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100126B34((uint64_t)&v18);
  sub_100126A1C((uint64_t)&v17);
  sub_100126D5C((uint64_t)v16);
  v11 = v15;
  if (v15)
  {
    v12 = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_10012F6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100559D80((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012F6DC(_DWORD *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t **v3;

  v3 = (uint64_t **)(a1 + 2);
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_100130B94(a3, a2);
      break;
    case 7:
      sub_100217588(a2, (uint64_t)a3);
      break;
    case 8:
      sub_100C1E2D4(a2, v3, (uint64_t)a3);
      break;
    case 9:
      sub_100C1E630(a2, v3, (uint64_t)a3);
      break;
    case 0x14:
      sub_100C1DFFC(a2, (uint64_t)a3);
      break;
    case 0x18:
      sub_100184A18(a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_100C1E824(a2, (uint64_t)a3);
      break;
    default:
      sub_10055A5D8();
  }
}

void sub_10012F770(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_1001301A0(v4, (uint64_t)a1);
  sub_10012F834(a1, (uint64_t)v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012F818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10012F834@<D0>(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  double result;

  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      sub_100130BF0(a3, a2);
      break;
    case 7:
      result = sub_1002178CC(a2, (uint64_t)a3);
      break;
    case 0x14:
      result = sub_100A9B974(a2, (uint64_t)a3);
      break;
    case 0x18:
      result = sub_100217844(a2, (uint64_t)a3);
      break;
    default:
      sub_10055A5D8();
  }
  return result;
}

void sub_10012F898(int *a1@<X1>, _DWORD *a2@<X8>)
{
  _DWORD v4[202];
  uint64_t v5;
  uint64_t v6;

  sub_1001302B8(v4, (uint64_t)a1);
  sub_10012F95C(a1, v4, a2);
  sub_100126B34((uint64_t)&v6);
  sub_100126A1C((uint64_t)&v5);
  sub_100126D5C((uint64_t)v4);
}

void sub_10012F940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10055829C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10012F95C(int *a1@<X0>, _BYTE *a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      sub_1001301FC(a3, (uint64_t)a2);
      break;
    case 0x17:
      sub_101223828(a2, (uint64_t)a3);
      break;
    default:
      sub_10055A5D8();
  }
}

uint64_t sub_10012F9A8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012F9F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FA08(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10012FA50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10012FA64(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

uint64_t sub_10012FA74@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012FAC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FAD4(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v6;
  _QWORD *v7;

  v6 = sub_100129E24(a1);
  v7 = v6 + 1636;
  *((_OWORD *)v6 + 409) = 0u;
  sub_100125B54((uint64_t)v6, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  sub_100349198(v7, a3);
  return a1;
}

void sub_10012FB44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012FB60@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012FBAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FBC0(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10012FC08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012FC1C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012FC68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FC7C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10012FCC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012FCD8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012FD24(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FD38(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10012FD80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FD94(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10012FDDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012FDF0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012FE3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FE50(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10012FE98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012FEAC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012FEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FF0C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10012FF54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10012FF68@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10012FFB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10012FFC8(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v6;
  _QWORD *v7;

  v6 = sub_100129E24(a1);
  v7 = v6 + 1636;
  *((_OWORD *)v6 + 409) = 0u;
  sub_100125B54((uint64_t)v6, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  sub_100349198(v7, a3);
  return a1;
}

void sub_100130038(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100130054@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1001300A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1001300B4(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v6;
  _QWORD *v7;

  v6 = sub_100129E24(a1);
  v7 = v6 + 1636;
  *((_OWORD *)v6 + 409) = 0u;
  sub_100125B54((uint64_t)v6, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  sub_100349198(v7, a3);
  return a1;
}

void sub_100130124(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100261F44(v2);
  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100130140@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_10013018C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1001301A0(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1001301E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1001301FC(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100130244(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100130258@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_1001302A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1001302B8(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100130300(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100130314(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1312) = 0;
  *(_BYTE *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1344) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  sub_100129E88(a1 + 1352);
  return a1;
}

void sub_1001303B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v6;

  if (*(_BYTE *)(v1 + 1344) && *(char *)(v1 + 1343) < 0)
    operator delete(*(void **)(v1 + 1320));
  sub_10055CBA8(v4);
  if (*(_BYTE *)(v1 + 1160))
  {
    v6 = *(void **)(v1 + 1136);
    if (v6)
    {
      *(_QWORD *)(v1 + 1144) = v6;
      operator delete(v6);
    }
  }
  if (*(_BYTE *)(v1 + 1128))
    sub_100261F44(v1 + 1008);
  sub_10055CBF0(v3);
  if (*(_BYTE *)(v1 + 104))
    sub_100067AC4(v2);
  if (*(_BYTE *)(v1 + 48))
    sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

void sub_100130434(uint64_t *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v12[808];
  uint64_t v13;
  _QWORD v14[442];
  std::__shared_weak_count *v15;

  v5 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  sub_100130C4C((uint64_t)v12, (uint64_t)a2);
  v14[441] = v5;
  v15 = v6;
  sub_1001305A8(a2, (uint64_t)v12, a3);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_100126B34((uint64_t)v14);
  sub_100126A1C((uint64_t)&v13);
  sub_100126D5C((uint64_t)v12);
}

void sub_100130584(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100559D80((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001305A8@<X0>(int *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = (uint64_t)(a1 + 2);
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      result = (uint64_t)sub_10013087C(a3, a2);
      break;
    case 7:
      result = sub_100216B64(a2, v3, a3);
      break;
    case 0x14:
      result = sub_1008093EC(a2, v3, a3);
      break;
    default:
      sub_10055A5D8();
  }
  return result;
}

void sub_10013060C(const std::string *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  _QWORD v5[101];
  uint64_t v6;
  uint64_t v7;
  void *__p;
  char v9;

  sub_100130A9C(v5, (uint64_t)a2, a1);
  sub_1001306EC(a2, v5, a3);
  if (v9 < 0)
    operator delete(__p);
  sub_100126B34((uint64_t)&v7);
  sub_100126A1C((uint64_t)&v6);
  sub_100126D5C((uint64_t)v5);
}

void sub_1001306D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100939020((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001306EC(int *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
      sub_100130994(a3, (uint64_t)a2);
      break;
    case 7:
      sub_100216DBC((uint64_t)a2, (uint64_t)a3);
      break;
    case 8:
      sub_100936134(a2, (uint64_t)a3);
      break;
    case 0x14:
      sub_100936070((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x18:
      sub_100216CF8((uint64_t)a2, (uint64_t)a3);
      break;
    case 0x1D:
      sub_100938338(a2, (uint64_t)a3);
      break;
    default:
      sub_10055A5D8();
  }
}

_DWORD *sub_100130768(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1001307B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_1001307C4(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_10013080C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100130820(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100130868(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10013087C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1001308C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001308D8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_100130924(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100130938(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100130980(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100130994(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1001309DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001309F0(_QWORD *__dst, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  return __dst;
}

uint64_t sub_100130A3C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_100129E24(a2);
  sub_100125B54((uint64_t)a2, a1);
  sub_100125F78((uint64_t)(a2 + 202), a1 + 808);
  return sub_1001262B0((uint64_t)(a2 + 754), a1 + 3016);
}

void sub_100130A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100130A9C(_DWORD *a1, uint64_t a2, const std::string *a3)
{
  _DWORD *v6;
  std::string *v7;

  v6 = sub_100129E24(a1);
  v7 = (std::string *)(v6 + 1636);
  *((_QWORD *)v6 + 820) = 0;
  *((_OWORD *)v6 + 409) = 0u;
  sub_100125B54((uint64_t)v6, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  std::string::operator=(v7, a3);
  return a1;
}

void sub_100130B10(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 6567) < 0)
    operator delete(*v2);
  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100130B38(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100130B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100130B94(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100130BDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100130BF0(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100130C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100130C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100130CBC(a1, a2);
  sub_10012DF0C(v4 + 808, a2 + 808);
  sub_10012D0F0(a1 + 3016, a2 + 3016);
  return a1;
}

void sub_100130C98(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_100126A1C(v2);
  sub_100126D5C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100130CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;

  v4 = a1 + 8;
  v23 = v4;
  v6 = *(_DWORD *)a2;
  v5 = a2 + 8;
  switch(v6 ^ (v6 >> 31))
  {
    case 0:
    case 1:
    case 2:
    case 0xD:
    case 0x11:
    case 0x1B:
    case 0x1C:
    case 0x1D:
      break;
    case 3:
    case 0xC:
    case 0xE:
    case 0x17:
      *(_BYTE *)v4 = *(_BYTE *)v5;
      break;
    case 4:
    case 9:
    case 0xB:
    case 0xF:
    case 0x13:
    case 0x16:
    case 0x19:
    case 0x1A:
      *(_DWORD *)v4 = *(_DWORD *)v5;
      break;
    case 5:
    case 6:
      sub_10031F08C((_BYTE *)v4, v5);
      break;
    case 7:
      sub_10014DA1C(&v23, v5);
      break;
    case 8:
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_10055A7B8((_QWORD *)v4, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      break;
    case 0xA:
    case 0x14:
    case 0x15:
      *(_QWORD *)v4 = *(_QWORD *)v5;
      break;
    case 0x10:
      v7 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)v4 = *(_OWORD *)v5;
      *(_OWORD *)(v4 + 16) = v7;
      v8 = *(_OWORD *)(v5 + 32);
      v9 = *(_OWORD *)(v5 + 48);
      v10 = *(_OWORD *)(v5 + 80);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v4 + 80) = v10;
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)(v4 + 48) = v9;
      v11 = *(_OWORD *)(v5 + 96);
      v12 = *(_OWORD *)(v5 + 112);
      v13 = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v4 + 140) = *(_OWORD *)(v5 + 140);
      *(_OWORD *)(v4 + 112) = v12;
      *(_OWORD *)(v4 + 128) = v13;
      *(_OWORD *)(v4 + 96) = v11;
      memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
      *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
      v14 = *(_QWORD *)(a2 + 696);
      *(_QWORD *)(a1 + 696) = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v17 = *(_OWORD *)(a2 + 704);
      v18 = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 736) = v18;
      *(_OWORD *)(a1 + 704) = v17;
      v19 = *(_OWORD *)(a2 + 752);
      v20 = *(_OWORD *)(a2 + 768);
      v21 = *(_OWORD *)(a2 + 784);
      *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
      *(_OWORD *)(a1 + 768) = v20;
      *(_OWORD *)(a1 + 784) = v21;
      *(_OWORD *)(a1 + 752) = v19;
      break;
    case 0x12:
      *(_OWORD *)v4 = *(_OWORD *)v5;
      break;
    case 0x18:
      sub_10014D944(&v23, (uint64_t *)v5);
      break;
    default:
      sub_10055A5D8();
  }
  *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

_DWORD *sub_100130E4C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;

  if (*(double *)(a1 + 1428) == -1.0 && !*(_DWORD *)(a1 + 1564))
    return sub_1001307C4(a2, a1);
  v3 = sub_101940544();
  return (_DWORD *)sub_100130E8C(v3);
}

_DWORD *sub_100130E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  NSObject *v13;
  void **v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  _BYTE buf[12];
  char v26;
  int v27;
  _BYTE *v28;
  void *__p[2];
  char v30;

  result = sub_100131230((_DWORD *)a3, a1);
  if (*(_DWORD *)(a2 + 96) != 4 || *(_DWORD *)(a2 + 84) >= 0x42u)
  {
    v6 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a3 + 3448) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a3 + 3464) = v6;
    *(_OWORD *)(a3 + 3480) = *(_OWORD *)(a2 + 128);
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a3 + 3384) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a3 + 3400) = v7;
    v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a3 + 3416) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a3 + 3432) = v8;
    *(_OWORD *)(a3 + 3492) = *(_OWORD *)(a2 + 140);
    v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a3 + 3352) = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 3368) = v9;
    memcpy((void *)(a3 + 3512), (const void *)(a2 + 160), 0x201uLL);
    sub_100349198((_QWORD *)(a3 + 4032), (uint64_t *)(a2 + 680));
    v10 = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a3 + 4096) = *(_OWORD *)(a2 + 744);
    v11 = *(_OWORD *)(a2 + 776);
    *(_OWORD *)(a3 + 4112) = *(_OWORD *)(a2 + 760);
    *(_OWORD *)(a3 + 4128) = v11;
    v12 = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a3 + 4048) = *(_OWORD *)(a2 + 696);
    *(_OWORD *)(a3 + 4064) = v12;
    *(_BYTE *)(a3 + 4144) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a3 + 4080) = v10;
    if (*(_DWORD *)(a2 + 96) == 6)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102186A00);
      v13 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        sub_100B9444C(a2, __p);
        v14 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, updating reference cell location to %{private}s", buf, 0xCu);
        if (v30 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102186A00);
        v22 = qword_1022A0048;
        sub_100B9444C(a2, buf);
        if (v26 >= 0)
          v23 = buf;
        else
          v23 = *(_BYTE **)buf;
        v27 = 136380675;
        v28 = v23;
        v24 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v22, 2, "WifiCalc, integrity, updating reference cell location to %{private}s", &v27, 12);
        if (v26 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::System::LeechLocation &) const", "%s\n", v24);
        if (v24 != (char *)__p)
          free(v24);
      }
      v15 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a3 + 4248) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a3 + 4264) = v15;
      *(_OWORD *)(a3 + 4280) = *(_OWORD *)(a2 + 128);
      v16 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 4184) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a3 + 4200) = v16;
      v17 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a3 + 4216) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a3 + 4232) = v17;
      v18 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a3 + 4152) = *(_OWORD *)a2;
      *(_OWORD *)(a3 + 4292) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a3 + 4168) = v18;
      memcpy((void *)(a3 + 4312), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a3 + 4832), (uint64_t *)(a2 + 680));
      v19 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a3 + 4896) = *(_OWORD *)(a2 + 744);
      v20 = *(_OWORD *)(a2 + 776);
      *(_OWORD *)(a3 + 4912) = *(_OWORD *)(a2 + 760);
      *(_OWORD *)(a3 + 4928) = v20;
      *(_BYTE *)(a3 + 4944) = *(_BYTE *)(a2 + 792);
      v21 = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a3 + 4848) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a3 + 4864) = v21;
      *(_OWORD *)(a3 + 4880) = v19;
    }
    return (_DWORD *)sub_101225C88(a3 + 4952, a2);
  }
  return result;
}

void sub_100131210(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_100131230(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_100131278(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_10013128C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_100129E24(a1);
  sub_100125B54((uint64_t)v4, a2);
  sub_100125F78((uint64_t)(a1 + 202), a2 + 808);
  sub_1001262B0((uint64_t)(a1 + 754), a2 + 3016);
  return a1;
}

void sub_1001312D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1001312E8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  char *v10;
  _BYTE v11[4880];
  _BYTE v12[3528];
  id v13[3];
  int v14;
  const char *v15;
  int v16;
  const char *v17;
  int v18[202];
  _BYTE v19[3528];

  sub_100131938(v13, (uint64_t)"wifi1Event", 0);
  v18[0] = 0;
  sub_100129E88((uint64_t)v19);
  sub_100131B34((uint64_t)v18, a2);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v5 = sub_100134FD4(v18);
    v14 = 136446210;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@WifiLogic, handleInput, %{public}s", (uint8_t *)&v14, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v14, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v8 = qword_1022A0058;
    v9 = sub_100134FD4(v18);
    v16 = 136446210;
    v17 = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, &v14, 1628, &_mh_execute_header, v8, 0, "@WifiLogic, handleInput, %{public}s", &v16, 12);
    sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleEvent(CL::Wifi1::Events::EventUnion)", "%s\n", v10);
    if (v10 != (char *)&v14)
      free(v10);
  }
  sub_10012CBDC((uint64_t)v12, a1 + 224);
  sub_1001B7478(a1, (uint64_t)v12, (uint64_t)&v14);
  sub_100132064((uint64_t)v19, (uint64_t)&v14);
  sub_100126B34((uint64_t)&v14);
  sub_100126B34((uint64_t)v12);
  sub_100124A50(a1 + 168, (uint64_t)v18, (uint64_t)&v14);
  sub_10012DCE4((uint64_t)v11, (uint64_t)&v14);
  v6 = sub_1001324B0(a1, (uint64_t)v11);
  sub_1001316A8((uint64_t)v11);
  sub_1001316A8((uint64_t)&v14);
  sub_100126B34((uint64_t)v19);
  sub_100126D5C((uint64_t)v18);
  sub_100131740(v13);
  return v6;
}

void sub_1001315FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100126B34(v1);
  sub_100126D5C((uint64_t)&STACK[0x3428]);
  sub_100131740((id *)&STACK[0x20E8]);
  _Unwind_Resume(a1);
}

void sub_100131688(void *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  JUMPOUT(0x100131680);
}

void sub_100131698()
{
  JUMPOUT(0x100131668);
}

void sub_1001316A0()
{
  JUMPOUT(0x100131680);
}

uint64_t sub_1001316A8(uint64_t a1)
{
  void *v2;

  sub_100126B34(a1 + 1352);
  if (*(_BYTE *)(a1 + 1344) && *(char *)(a1 + 1343) < 0)
    operator delete(*(void **)(a1 + 1320));
  sub_10055CBA8(a1 + 1168);
  if (*(_BYTE *)(a1 + 1160))
  {
    v2 = *(void **)(a1 + 1136);
    if (v2)
    {
      *(_QWORD *)(a1 + 1144) = v2;
      operator delete(v2);
    }
  }
  if (*(_BYTE *)(a1 + 1128))
    sub_100261F44(a1 + 1008);
  sub_10055CBF0(a1 + 112);
  if (*(_BYTE *)(a1 + 104))
    sub_100067AC4(a1 + 56);
  if (*(_BYTE *)(a1 + 48))
    sub_100067AC4(a1);
  return a1;
}

id *sub_100131740(id *a1)
{
  NSObject *v2;
  id v3;
  id v5;
  char *v6;
  int v7;
  id *v8;
  __int16 v9;
  id v10;
  uint8_t buf[4];
  id *v12;
  __int16 v13;
  id v14;

  if (a1[1])
  {
    if (qword_1022A02B0 != -1)
      dispatch_once(&qword_1022A02B0, &stru_1021D8050);
    v2 = qword_1022A02B8;
    if (os_log_type_enabled((os_log_t)qword_1022A02B8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = a1[1];
      *(_DWORD *)buf = 134349314;
      v12 = a1;
      v13 = 2114;
      v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "os_transaction releasing: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02B0 != -1)
        dispatch_once(&qword_1022A02B0, &stru_1021D8050);
      v5 = a1[1];
      v7 = 134349314;
      v8 = a1;
      v9 = 2114;
      v10 = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02B8, 0, "os_transaction releasing: (%{public}p) %{public}@", &v7, 22);
      sub_100512490("Generic", 1, 0, 2, "CLAutoOSTransaction::~CLAutoOSTransaction()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }

    a1[1] = 0;
  }

  *a1 = 0;
  return a1;
}

void sub_10013192C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_100131938(_QWORD *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  int v11;
  _QWORD *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;

  *a1 = os_transaction_create(a2);
  a1[1] = 0;
  if (!a3)
  {
    a1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2);
    if (qword_1022A02B0 != -1)
      dispatch_once(&qword_1022A02B0, &stru_1021D8050);
    v6 = qword_1022A02B8;
    if (os_log_type_enabled((os_log_t)qword_1022A02B8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = a1[1];
      *(_DWORD *)buf = 134349314;
      v16 = a1;
      v17 = 2114;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "os_transaction created: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02B0 != -1)
        dispatch_once(&qword_1022A02B0, &stru_1021D8050);
      v9 = a1[1];
      v11 = 134349314;
      v12 = a1;
      v13 = 2114;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02B8, 0, "os_transaction created: (%{public}p) %{public}@", &v11, 22);
      sub_100512490("Generic", 1, 0, 2, "CLAutoOSTransaction::CLAutoOSTransaction(const char *, LoggingPolicy)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
  return a1;
}

void sub_100131B34(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t *v40;
  int v41;

  v4 = *(_DWORD *)a1;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    v6 = (_BYTE *)(a2 + 8);
    v40 = (uint64_t *)(a2 + 8);
    v7 = (_BYTE *)(a1 + 8);
    switch(v4 ^ (v4 >> 31))
    {
      case 0:
      case 1:
      case 2:
      case 0xD:
      case 0x11:
      case 0x1B:
      case 0x1C:
      case 0x1D:
        return;
      case 3:
      case 0xC:
      case 0xE:
      case 0x17:
        *v7 = *v6;
        return;
      case 4:
      case 9:
      case 0xB:
      case 0xF:
      case 0x13:
      case 0x16:
      case 0x19:
      case 0x1A:
        *(_DWORD *)v7 = *(_DWORD *)v6;
        return;
      case 5:
      case 6:
        sub_1005C7FFC(a1 + 8, a2 + 8);
        return;
      case 7:
        sub_1006B158C(&v40, (uint64_t)v7);
        return;
      case 8:
        sub_1000ADC24((uint64_t *)(a1 + 8));
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)v6 = 0;
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        return;
      case 0xA:
      case 0x14:
      case 0x15:
        *(_QWORD *)v7 = *(_QWORD *)v6;
        return;
      case 0x10:
        v9 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)v7 = *(_OWORD *)v6;
        *(_OWORD *)(a1 + 24) = v9;
        v10 = *(_OWORD *)(a2 + 40);
        v11 = *(_OWORD *)(a2 + 56);
        v12 = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = v12;
        *(_OWORD *)(a1 + 40) = v10;
        *(_OWORD *)(a1 + 56) = v11;
        v13 = *(_OWORD *)(a2 + 104);
        v14 = *(_OWORD *)(a2 + 120);
        v15 = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
        *(_OWORD *)(a1 + 120) = v14;
        *(_OWORD *)(a1 + 136) = v15;
        *(_OWORD *)(a1 + 104) = v13;
        memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
        sub_1002B7674(a1 + 688, (__int128 *)(a2 + 688));
        v17 = *(_OWORD *)(a2 + 720);
        v16 = *(_OWORD *)(a2 + 736);
        *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
        *(_OWORD *)(a1 + 720) = v17;
        *(_OWORD *)(a1 + 736) = v16;
        v19 = *(_OWORD *)(a2 + 768);
        v18 = *(_OWORD *)(a2 + 784);
        v20 = *(_OWORD *)(a2 + 752);
        *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
        *(_OWORD *)(a1 + 768) = v19;
        *(_OWORD *)(a1 + 784) = v18;
        *(_OWORD *)(a1 + 752) = v20;
        return;
      case 0x12:
        *(_OWORD *)v7 = *(_OWORD *)v6;
        return;
      case 0x18:
        sub_1006B16CC(&v40, (uint64_t)v7);
        return;
      default:
        goto LABEL_44;
    }
  }
  v40 = (uint64_t *)a1;
  v41 = v5 ^ (v5 >> 31);
  v8 = (_BYTE *)(a2 + 8);
  switch(v41)
  {
    case 0:
      sub_100126D5C(a1);
      *(_DWORD *)a1 = 0;
      return;
    case 1:
      sub_100126D5C(a1);
      v21 = 1;
      goto LABEL_42;
    case 2:
      sub_100126D5C(a1);
      v21 = 2;
      goto LABEL_42;
    case 3:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *v8;
      v21 = 3;
      goto LABEL_42;
    case 4:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 4;
      goto LABEL_42;
    case 5:
    case 6:
      sub_1006B1788((uint64_t)&v40, a2 + 8);
      return;
    case 7:
      sub_10014D894((uint64_t)&v40, a2 + 8);
      return;
    case 8:
      sub_100126D5C(a1);
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)v8 = 0;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      v21 = 8;
      goto LABEL_42;
    case 9:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 9;
      goto LABEL_42;
    case 10:
      sub_100126D5C(a1);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v8;
      v21 = 10;
      goto LABEL_42;
    case 11:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 11;
      goto LABEL_42;
    case 12:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *v8;
      v21 = 12;
      goto LABEL_42;
    case 13:
      sub_100126D5C(a1);
      v21 = 13;
      goto LABEL_42;
    case 14:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *v8;
      v21 = 14;
      goto LABEL_42;
    case 15:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 15;
      goto LABEL_42;
    case 16:
      sub_100126D5C(a1);
      v22 = *(_OWORD *)v8;
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v22;
      v23 = *(_OWORD *)(a2 + 40);
      v24 = *(_OWORD *)(a2 + 56);
      v25 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v25;
      *(_OWORD *)(a1 + 56) = v24;
      *(_OWORD *)(a1 + 40) = v23;
      v26 = *(_OWORD *)(a2 + 104);
      v27 = *(_OWORD *)(a2 + 120);
      v28 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 148) = *(_OWORD *)(a2 + 148);
      *(_OWORD *)(a1 + 136) = v28;
      *(_OWORD *)(a1 + 120) = v27;
      *(_OWORD *)(a1 + 104) = v26;
      memcpy((void *)(a1 + 168), (const void *)(a2 + 168), 0x201uLL);
      *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 688);
      *(_OWORD *)(a2 + 688) = 0u;
      v29 = *(_OWORD *)(a2 + 704);
      v30 = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 736) = v30;
      *(_OWORD *)(a1 + 704) = v29;
      v32 = *(_OWORD *)(a2 + 752);
      v31 = *(_OWORD *)(a2 + 768);
      v33 = *(_OWORD *)(a2 + 784);
      *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
      *(_OWORD *)(a1 + 768) = v31;
      *(_OWORD *)(a1 + 784) = v33;
      *(_OWORD *)(a1 + 752) = v32;
      v21 = 16;
      goto LABEL_42;
    case 17:
      sub_100126D5C(a1);
      v21 = 17;
      goto LABEL_42;
    case 18:
      sub_100126D5C(a1);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v8;
      v21 = 18;
      goto LABEL_42;
    case 19:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 19;
      goto LABEL_42;
    case 20:
      sub_100126D5C(a1);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v8;
      v21 = 20;
      goto LABEL_42;
    case 21:
      sub_100126D5C(a1);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)v8;
      v21 = 21;
      goto LABEL_42;
    case 22:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 22;
      goto LABEL_42;
    case 23:
      sub_100126D5C(a1);
      *(_BYTE *)(a1 + 8) = *v8;
      v21 = 23;
      goto LABEL_42;
    case 24:
      sub_100126D5C(a1);
      v34 = *(_QWORD *)v8;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)(a1 + 8) = v34;
      v35 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v35;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      v37 = *(_OWORD *)(a2 + 80);
      v36 = *(_OWORD *)(a2 + 96);
      v38 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
      *(_OWORD *)(a1 + 80) = v37;
      *(_OWORD *)(a1 + 96) = v36;
      *(_OWORD *)(a1 + 64) = v38;
      v39 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = v39;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 128) = 0;
      v21 = 24;
      goto LABEL_42;
    case 25:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 25;
      goto LABEL_42;
    case 26:
      sub_100126D5C(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v8;
      v21 = 26;
      goto LABEL_42;
    case 27:
      sub_100126D5C(a1);
      v21 = 27;
      goto LABEL_42;
    case 28:
      sub_100126D5C(a1);
      v21 = 28;
      goto LABEL_42;
    case 29:
      sub_100126D5C(a1);
      v21 = 29;
LABEL_42:
      *(_DWORD *)a1 = v21;
      return;
    default:
LABEL_44:
      sub_10055A5D8();
  }
}

uint64_t sub_100132064(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  void **v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void **v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  v7 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  sub_1002B7674(a1 + 144, (__int128 *)(a2 + 144));
  sub_1002B7674(a1 + 160, (__int128 *)(a2 + 160));
  sub_10012664C((_QWORD *)(a1 + 184), (_QWORD *)(a2 + 184));
  sub_1005C7FFC(a1 + 232, a2 + 232);
  *(_WORD *)(a1 + 328) = *(_WORD *)(a2 + 328);
  v10 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v10;
  v11 = *(_OWORD *)(a2 + 368);
  v12 = *(_OWORD *)(a2 + 384);
  v13 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v13;
  *(_OWORD *)(a1 + 368) = v11;
  *(_OWORD *)(a1 + 384) = v12;
  v14 = *(_OWORD *)(a2 + 432);
  v15 = *(_OWORD *)(a2 + 448);
  v16 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 476) = *(_OWORD *)(a2 + 476);
  *(_OWORD *)(a1 + 448) = v15;
  *(_OWORD *)(a1 + 464) = v16;
  *(_OWORD *)(a1 + 432) = v14;
  memcpy((void *)(a1 + 496), (const void *)(a2 + 496), 0x201uLL);
  sub_1002B7674(a1 + 1016, (__int128 *)(a2 + 1016));
  v17 = *(_OWORD *)(a2 + 1032);
  v18 = *(_OWORD *)(a2 + 1064);
  *(_OWORD *)(a1 + 1048) = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1064) = v18;
  *(_OWORD *)(a1 + 1032) = v17;
  v19 = *(_OWORD *)(a2 + 1080);
  v20 = *(_OWORD *)(a2 + 1096);
  v21 = *(_OWORD *)(a2 + 1112);
  *(_BYTE *)(a1 + 1128) = *(_BYTE *)(a2 + 1128);
  *(_OWORD *)(a1 + 1096) = v20;
  *(_OWORD *)(a1 + 1112) = v21;
  *(_OWORD *)(a1 + 1080) = v19;
  v22 = *(_OWORD *)(a2 + 1248);
  v23 = *(_OWORD *)(a2 + 1264);
  v24 = *(_OWORD *)(a2 + 1232);
  *(_OWORD *)(a1 + 1276) = *(_OWORD *)(a2 + 1276);
  *(_OWORD *)(a1 + 1232) = v24;
  *(_OWORD *)(a1 + 1264) = v23;
  *(_OWORD *)(a1 + 1248) = v22;
  v25 = *(_OWORD *)(a2 + 1184);
  v26 = *(_OWORD *)(a2 + 1200);
  v27 = *(_OWORD *)(a2 + 1168);
  *(_OWORD *)(a1 + 1216) = *(_OWORD *)(a2 + 1216);
  *(_OWORD *)(a1 + 1168) = v27;
  *(_OWORD *)(a1 + 1200) = v26;
  *(_OWORD *)(a1 + 1184) = v25;
  v28 = *(_OWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1136) = *(_OWORD *)(a2 + 1136);
  *(_OWORD *)(a1 + 1152) = v28;
  memcpy((void *)(a1 + 1296), (const void *)(a2 + 1296), 0x201uLL);
  sub_1002B7674(a1 + 1816, (__int128 *)(a2 + 1816));
  v30 = *(_OWORD *)(a2 + 1848);
  v29 = *(_OWORD *)(a2 + 1864);
  *(_OWORD *)(a1 + 1832) = *(_OWORD *)(a2 + 1832);
  *(_OWORD *)(a1 + 1848) = v30;
  *(_OWORD *)(a1 + 1864) = v29;
  v32 = *(_OWORD *)(a2 + 1896);
  v31 = *(_OWORD *)(a2 + 1912);
  v33 = *(_OWORD *)(a2 + 1880);
  *(_BYTE *)(a1 + 1928) = *(_BYTE *)(a2 + 1928);
  *(_OWORD *)(a1 + 1896) = v32;
  *(_OWORD *)(a1 + 1912) = v31;
  *(_OWORD *)(a1 + 1880) = v33;
  *(_QWORD *)(a1 + 1936) = *(_QWORD *)(a2 + 1936);
  sub_1006B117C((_QWORD *)(a1 + 1944), a2 + 1944);
  *(_QWORD *)(a1 + 1992) = *(_QWORD *)(a2 + 1992);
  memcpy((void *)(a1 + 2000), (const void *)(a2 + 2000), 0x170uLL);
  memcpy((void *)(a1 + 2368), (const void *)(a2 + 2368), 0x201uLL);
  sub_1002B7674(a1 + 2888, (__int128 *)(a2 + 2888));
  v35 = *(_OWORD *)(a2 + 2920);
  v34 = *(_OWORD *)(a2 + 2936);
  *(_OWORD *)(a1 + 2904) = *(_OWORD *)(a2 + 2904);
  *(_OWORD *)(a1 + 2920) = v35;
  *(_OWORD *)(a1 + 2936) = v34;
  v37 = *(_OWORD *)(a2 + 2968);
  v36 = *(_OWORD *)(a2 + 2984);
  v38 = *(_OWORD *)(a2 + 2952);
  *(_BYTE *)(a1 + 3000) = *(_BYTE *)(a2 + 3000);
  *(_OWORD *)(a1 + 2968) = v37;
  *(_OWORD *)(a1 + 2984) = v36;
  *(_OWORD *)(a1 + 2952) = v38;
  v39 = *(_BYTE *)(a2 + 3016);
  *(_QWORD *)(a1 + 3008) = *(_QWORD *)(a2 + 3008);
  *(_BYTE *)(a1 + 3016) = v39;
  v40 = *(_BYTE *)(a2 + 3032);
  *(_QWORD *)(a1 + 3024) = *(_QWORD *)(a2 + 3024);
  *(_BYTE *)(a1 + 3032) = v40;
  v41 = (void **)(a1 + 3040);
  if (*(char *)(a1 + 3063) < 0)
    operator delete(*v41);
  v42 = *(_OWORD *)(a2 + 3040);
  *(_QWORD *)(a1 + 3056) = *(_QWORD *)(a2 + 3056);
  *(_OWORD *)v41 = v42;
  *(_BYTE *)(a2 + 3063) = 0;
  *(_BYTE *)(a2 + 3040) = 0;
  v43 = *(_OWORD *)(a2 + 3124);
  v44 = *(_OWORD *)(a2 + 3112);
  v45 = *(_OWORD *)(a2 + 3096);
  *(_OWORD *)(a1 + 3080) = *(_OWORD *)(a2 + 3080);
  *(_OWORD *)(a1 + 3096) = v45;
  *(_OWORD *)(a1 + 3112) = v44;
  *(_OWORD *)(a1 + 3124) = v43;
  *(_OWORD *)(a1 + 3064) = *(_OWORD *)(a2 + 3064);
  v46 = (void **)(a1 + 3144);
  if (*(char *)(a1 + 3167) < 0)
    operator delete(*v46);
  v47 = *(_OWORD *)(a2 + 3144);
  *(_QWORD *)(a1 + 3160) = *(_QWORD *)(a2 + 3160);
  *(_OWORD *)v46 = v47;
  *(_BYTE *)(a2 + 3167) = 0;
  *(_BYTE *)(a2 + 3144) = 0;
  v48 = *(_OWORD *)(a2 + 3264);
  v49 = *(_OWORD *)(a2 + 3248);
  v50 = *(_OWORD *)(a2 + 3232);
  *(_OWORD *)(a1 + 3216) = *(_OWORD *)(a2 + 3216);
  *(_OWORD *)(a1 + 3232) = v50;
  *(_OWORD *)(a1 + 3248) = v49;
  *(_OWORD *)(a1 + 3264) = v48;
  v51 = *(_OWORD *)(a2 + 3200);
  v52 = *(_OWORD *)(a2 + 3184);
  *(_OWORD *)(a1 + 3168) = *(_OWORD *)(a2 + 3168);
  *(_OWORD *)(a1 + 3184) = v52;
  *(_OWORD *)(a1 + 3200) = v51;
  v53 = *(_OWORD *)(a2 + 3280);
  v54 = *(_OWORD *)(a2 + 3296);
  v55 = *(_OWORD *)(a2 + 3312);
  *(_BYTE *)(a1 + 3328) = *(_BYTE *)(a2 + 3328);
  *(_OWORD *)(a1 + 3312) = v55;
  *(_OWORD *)(a1 + 3296) = v54;
  *(_OWORD *)(a1 + 3280) = v53;
  sub_100132440((void ***)(a1 + 3336));
  *(_QWORD *)(a1 + 3336) = *(_QWORD *)(a2 + 3336);
  *(_QWORD *)(a1 + 3344) = *(_QWORD *)(a2 + 3344);
  *(_QWORD *)(a1 + 3352) = *(_QWORD *)(a2 + 3352);
  *(_QWORD *)(a2 + 3352) = 0;
  *(_OWORD *)(a2 + 3336) = 0u;
  sub_1000A6464(a1 + 3360, (uint64_t *)(a2 + 3360));
  v56 = *(_OWORD *)(a2 + 3400);
  *(_QWORD *)(a1 + 3416) = *(_QWORD *)(a2 + 3416);
  *(_OWORD *)(a1 + 3400) = v56;
  v57 = *(_OWORD *)(a2 + 3424);
  v58 = *(_OWORD *)(a2 + 3440);
  v59 = *(_OWORD *)(a2 + 3456);
  *(_QWORD *)(a1 + 3471) = *(_QWORD *)(a2 + 3471);
  *(_OWORD *)(a1 + 3456) = v59;
  *(_OWORD *)(a1 + 3440) = v58;
  *(_OWORD *)(a1 + 3424) = v57;
  sub_1002B7674(a1 + 3480, (__int128 *)(a2 + 3480));
  v60 = *(_OWORD *)(a2 + 3505);
  *(_OWORD *)(a1 + 3496) = *(_OWORD *)(a2 + 3496);
  *(_OWORD *)(a1 + 3505) = v60;
  return a1;
}

void sub_100132440(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        sub_100279AA4(&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1001324B0(uint64_t a1, uint64_t a2)
{
  double v4;
  int v5;
  NSObject *v6;
  char *v7;
  _QWORD *v8;
  NSObject *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  NSObject *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  char v25;
  NSObject *v26;
  int v27;
  const char *v28;
  int v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  _BOOL4 v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  NSObject *v47;
  double v48;
  NSObject *v49;
  int v50;
  NSObject *v51;
  double v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  NSObject *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  NSObject *v72;
  float v73;
  float v74;
  float v75;
  NSObject *v76;
  uint64_t v77;
  NSObject *v78;
  std::__shared_weak_count *v79;
  unint64_t *p_shared_owners;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  NSObject *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  const char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  int v129;
  char *v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  float v135;
  float v136;
  float v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  void *__dst[2];
  double v151;
  int v152;
  int v153;
  uint64_t v154;
  __int16 v155;
  _BYTE v156[40];
  _BYTE v157[10];
  __int16 v158;
  double v159;
  __int16 v160;
  int v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  uint64_t v165;
  __int16 v166;
  int v167;
  __int16 v168;
  double v169;
  __int16 v170;
  int v171;
  _BYTE __p[48];
  __int128 v173;
  _BYTE v174[32];
  __int128 v175;
  __int128 v176;
  _OWORD v177[2];
  _BYTE v178[513];
  uint64_t v179;
  std::__shared_weak_count *v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  char v187;
  __int128 v188;
  void *v189;
  char v190;
  std::__shared_weak_count *v191;
  id v192;
  int v193;
  unint64_t v194;
  int v195;
  uint64_t v196;
  _DWORD v197[202];
  _BYTE v198[54];
  _BYTE v199[10];
  __int16 v200;
  double v201;
  __int16 v202;
  int v203;
  __int16 v204;
  uint64_t v205;
  __int16 v206;
  uint64_t v207;
  __int16 v208;
  int v209;
  __int16 v210;
  double v211;
  __int16 v212;
  int v213;

  sub_1001262B0(a1 + 224, a2 + 1352);
  if (*(_BYTE *)(a2 + 1312))
  {
    v5 = sub_10022DDF8(a1, (uint64_t *)(a2 + 1168));
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v198 = 67240192;
      *(_DWORD *)&v198[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, newUpdate, didStart, %{public}d", v198, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      *(_DWORD *)__p = 67240192;
      *(_DWORD *)&__p[4] = v5;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, newUpdate, didStart, %{public}d", __p, 8);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v7);
      if (v7 != v198)
        free(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  if (*(_BYTE *)(a2 + 1344))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v8 = (_QWORD *)(a2 + 1320);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v10 = (_QWORD *)(a2 + 1320);
      if (*(char *)(a2 + 1343) < 0)
        v10 = (_QWORD *)*v8;
      *(_DWORD *)v198 = 136446210;
      *(_QWORD *)&v198[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@WsbReproc, reason, %{public}s", v198, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      if (*(char *)(a2 + 1343) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)__p = 136446210;
      *(_QWORD *)&__p[4] = v8;
      LODWORD(v148) = 12;
      v119 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WsbReproc, reason, %{public}s", __p, v148);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v119);
      if (v119 != v198)
        free(v119);
    }
    v197[0] = 29;
    sub_1001312E8(a1, v197);
    sub_100126D5C((uint64_t)v197);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v11 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, reprocWsb", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      *(_WORD *)__p = 0;
      LODWORD(v148) = 2;
      v120 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, reprocWsb", __p, v148);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v120);
      if (v120 != v198)
        free(v120);
    }
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v12 = *(_QWORD **)(a2 + 16);
    memset(__p, 0, 24);
    v13 = 0;
    if (v12)
    {
      v14 = v12;
      do
      {
        ++v13;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    sub_1006B2BAC(__p, v12, 0, v13);
    v15 = (*(uint64_t (**)(_QWORD, _BYTE *, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 160))(*(_QWORD *)(a1 + 120), __p, *(unsigned __int8 *)(a2 + 40), *(unsigned __int8 *)(a2 + 41), a2 + 44);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v16 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, alsreq", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      LOWORD(v153) = 0;
      LODWORD(v148) = 2;
      v121 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, alsreq", &v153, v148);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v121);
      if (v121 != v198)
        free(v121);
    }
    v196 = v15;
    v195 = 21;
    sub_1001312E8(a1, &v195);
    sub_100126D5C((uint64_t)&v195);
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
  }
  if (*(_BYTE *)(a2 + 104))
  {
    v17 = *(_QWORD **)(a2 + 72);
    memset(__p, 0, 24);
    v18 = 0;
    if (v17)
    {
      v19 = v17;
      do
      {
        ++v18;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    sub_1006B2BAC(__p, v17, 0, v18);
    v194 = (*(unsigned int (**)(_QWORD, _BYTE *, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 160))(*(_QWORD *)(a1 + 120), __p, 1, 0, a2 + 96) | (unint64_t)&_mh_execute_header;
    v193 = 21;
    sub_1001312E8(a1, &v193);
    sub_100126D5C((uint64_t)&v193);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v20 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v198 = 134349056;
      *(_QWORD *)&v198[4] = (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, alswsb, aps, %{public}lu", v198, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v153 = 134349056;
      v154 = (uint64_t)(*(_QWORD *)&__p[8] - *(_QWORD *)__p) >> 3;
      LODWORD(v148) = 12;
      v122 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, alswsb, aps, %{public}lu", &v153, v148);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v122);
      if (v122 != v198)
        free(v122);
    }
    if (*(_QWORD *)__p)
    {
      *(_QWORD *)&__p[8] = *(_QWORD *)__p;
      operator delete(*(void **)__p);
    }
  }
  if (!*(_BYTE *)(a2 + 200))
  {
    HIDWORD(v149) = v5;
    goto LABEL_80;
  }
  v21 = *(_QWORD *)(a1 + 120);
  v22 = *(_BYTE *)(a2 + 112);
  v23 = *(_DWORD *)(a2 + 128);
  v24 = *(unsigned __int8 *)(a2 + 132);
  if (*(char *)(a2 + 159) < 0)
  {
    sub_100115CE4(__dst, *(void **)(a2 + 136), *(_QWORD *)(a2 + 144));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a2 + 136);
    v151 = *(double *)(a2 + 152);
  }
  v25 = *(_BYTE *)(a2 + 192);
  if (v25)
  {
    memset(v198, 0, 24);
    sub_10027205C(v198, *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
    v25 = 1;
  }
  else
  {
    v198[0] = 0;
  }
  v198[24] = v25;
  HIDWORD(v149) = (*(uint64_t (**)(uint64_t, _QWORD, BOOL, BOOL, void **, _BYTE *))(*(_QWORD *)v21 + 144))(v21, v22, v23 == 1, v24 != 0, __dst, v198);
  if (v198[24] && *(_QWORD *)v198)
  {
    *(_QWORD *)&v198[8] = *(_QWORD *)v198;
    operator delete(*(void **)v198);
  }
  if (SHIBYTE(v151) < 0)
    operator delete(__dst[0]);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v26 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v27 = *(char *)(a2 + 112);
    v28 = "normal";
    v29 = *(unsigned __int8 *)(a2 + 132);
    if (*(_DWORD *)(a2 + 128) == 1)
      v28 = "low";
    *(_DWORD *)v198 = 68290050;
    if (v29)
      v30 = "low";
    else
      v30 = "default";
    *(_DWORD *)&v198[4] = 0;
    *(_WORD *)&v198[8] = 2082;
    *(_QWORD *)&v198[10] = "";
    *(_WORD *)&v198[18] = 1026;
    *(_DWORD *)&v198[20] = v27;
    *(_WORD *)&v198[24] = 2082;
    *(_QWORD *)&v198[26] = v28;
    *(_WORD *)&v198[34] = 2082;
    *(_QWORD *)&v198[36] = v30;
    *(_WORD *)&v198[44] = 1026;
    *(_DWORD *)&v198[46] = HIDWORD(v149);
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"requesting wifi scan\", \"scan_type\":%{public}d, \"priority\":%{public, location:escape_only}s, \"latency\":%{public, location:escape_only}s, \"scan_request_successful\":%{public}hhd}", v198, 0x32u);
    v31 = qword_1022A0050;
    if (((v5 ^ 1 | HIDWORD(v149)) & 1) != 0)
      goto LABEL_75;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
LABEL_72:
    v32 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "value of didStartScan being reset to false after successfully beginning a scan", v198, 2u);
    }
    v33 = sub_1001BFF7C(115, 0);
    v31 = qword_1022A0050;
    if (v33)
    {
      bzero(v198, 0x65CuLL);
      if (v31 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      *(_WORD *)__p = 0;
      LODWORD(v149) = 2;
      v147 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 16, "value of didStartScan being reset to false after successfully beginning a scan", __p, v149);
      sub_100512490("Generic", 1, 0, 0, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v147);
      if (v147 != v198)
        free(v147);
      v31 = qword_1022A0050;
    }
LABEL_75:
    if (v31 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    goto LABEL_77;
  }
  if (((v5 ^ 1 | HIDWORD(v149)) & 1) == 0)
    goto LABEL_72;
LABEL_77:
  v34 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v198 = 67240192;
    *(_DWORD *)&v198[4] = HIDWORD(v149);
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, scanreq, didStart, %{public}d", v198, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v198, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    *(_DWORD *)__p = 67240192;
    *(_DWORD *)&__p[4] = HIDWORD(v149);
    LODWORD(v149) = 8;
    v123 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, scanreq, didStart, %{public}d", __p, v149);
    sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v123);
    if (v123 != v198)
      free(v123);
  }
LABEL_80:
  if (!*(_BYTE *)(a2 + 212))
    goto LABEL_94;
  v35 = *(_DWORD *)(a2 + 208);
  if (!v35)
  {
    v36 = 21;
    v37 = 22;
    goto LABEL_85;
  }
  if (v35 == 1)
  {
    v36 = 22;
    v37 = 21;
LABEL_85:
    (*(void (**)(void))(**(_QWORD **)(a1 + 120) + 8 * v37))();
    (*(void (**)(void))(**(_QWORD **)(a1 + 120) + 8 * v36))();
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v38 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a2 + 208))
      v39 = "powoffajon";
    else
      v39 = "ajoffpowon";
    *(_DWORD *)v198 = 136446210;
    *(_QWORD *)&v198[4] = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "@WifiLogic, decision, wifipower, %{public}s", v198, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v198, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    if (*(_DWORD *)(a2 + 208))
      v124 = "powoffajon";
    else
      v124 = "ajoffpowon";
    *(_DWORD *)__p = 136446210;
    *(_QWORD *)&__p[4] = v124;
    LODWORD(v149) = 12;
    v125 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiLogic, decision, wifipower, %{public}s", __p, v149);
    sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v125);
    if (v125 != v198)
      free(v125);
  }
LABEL_94:
  if (*(_BYTE *)(a2 + 272))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v40 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v41 = *(_QWORD *)(a2 + 256);
      v42 = *(_QWORD *)(a2 + 264);
      *(_QWORD *)v198 = 68289539;
      *(_WORD *)&v198[8] = 2082;
      *(_QWORD *)&v198[10] = "";
      *(_WORD *)&v198[18] = 2049;
      *(_QWORD *)&v198[20] = v41;
      *(_WORD *)&v198[28] = 2049;
      *(_QWORD *)&v198[30] = v42;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"requesting wifi tile download\", \"latitude\":\"%{private}f\", \"longitude\":\"%{private}f\"}", v198, 0x26u);
    }
    (*(void (**)(_QWORD, uint64_t, double, double))(**(_QWORD **)(a1 + 120) + 208))(*(_QWORD *)(a1 + 120), a2 + 216, *(double *)(a2 + 256), *(double *)(a2 + 264));
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v43 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v44 = *(_QWORD *)(a2 + 256);
      v45 = *(_QWORD *)(a2 + 264);
      *(_DWORD *)v198 = 134283777;
      *(_QWORD *)&v198[4] = v44;
      *(_WORD *)&v198[12] = 2049;
      *(_QWORD *)&v198[14] = v45;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, tiledl, %{private}.02f, %{private}.02f", v198, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v126 = *(_QWORD *)(a2 + 256);
      v127 = *(_QWORD *)(a2 + 264);
      *(_DWORD *)__p = 134283777;
      *(_QWORD *)&__p[4] = v126;
      *(_WORD *)&__p[12] = 2049;
      *(_QWORD *)&__p[14] = v127;
      LODWORD(v149) = 22;
      v128 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, tiledl, %{private}.02f, %{private}.02f", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v128);
      if (v128 != v198)
        free(v128);
    }
  }
  if (*(_BYTE *)(a2 + 288))
  {
    v46 = *(double *)(a2 + 280);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v47 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v198 = 68289282;
      *(_WORD *)&v198[8] = 2082;
      *(_QWORD *)&v198[10] = "";
      *(_WORD *)&v198[18] = 2050;
      *(double *)&v198[20] = v46;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"update schedule of refresh timer\", \"delay_s\":\"%{public}.09f\"}", v198, 0x1Cu);
    }
    sub_10001C6E8(a1, v48, v46);
    *(_BYTE *)(a1 + 152) = *(double *)(a2 + 280) == 15.0;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v49 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v50 = *(unsigned __int8 *)(a1 + 152);
      *(_DWORD *)v198 = 134349312;
      *(double *)&v198[4] = v46;
      *(_WORD *)&v198[12] = 1026;
      *(_DWORD *)&v198[14] = v50;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, timer, %{public}.1f, reIssue, %{public}d", v198, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v129 = *(unsigned __int8 *)(a1 + 152);
      *(_DWORD *)__p = 134349312;
      *(double *)&__p[4] = v46;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v129;
      LODWORD(v149) = 18;
      v130 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, timer, %{public}.1f, reIssue, %{public}d", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v130);
      if (v130 != v198)
        free(v130);
    }
  }
  if (*(_BYTE *)(a2 + 297))
  {
    sub_10001C6E8(a1, v4, 1.79769313e308);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v51 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, timer, cancel", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      *(_WORD *)__p = 0;
      LODWORD(v149) = 2;
      v131 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, timer, cancel", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v131);
      if (v131 != v198)
        free(v131);
    }
  }
  if (*(_BYTE *)(a2 + 312))
  {
    v52 = *(double *)(a2 + 304);
    objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", v52);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v53 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v198 = 134349056;
      *(double *)&v198[4] = v52;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, wsbtimer, %{public}.1f", v198, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      *(_DWORD *)__p = 134349056;
      *(double *)&__p[4] = v52;
      LODWORD(v149) = 12;
      v132 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, wsbtimer, %{public}.1f", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v132);
      if (v132 != v198)
        free(v132);
    }
  }
  if (*(_BYTE *)(a2 + 321))
  {
    objc_msgSend(*(id *)(a1 + 144), "setNextFireDelay:", 1.79769313e308);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v54 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, wsbtimer, cancel", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      *(_WORD *)__p = 0;
      LODWORD(v149) = 2;
      v133 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, wsbtimer, cancel", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v133);
      if (v133 != v198)
        free(v133);
    }
  }
  if (*(_BYTE *)(a2 + 323))
  {
    sub_10001947C(1u);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214CDF0);
    v55 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "@ClxWifi, Fix, 0, ll, N/A", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214CDF0);
      *(_WORD *)__p = 0;
      LODWORD(v149) = 2;
      v134 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxWifi, Fix, 0, ll, N/A", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v134);
      if (v134 != v198)
        free(v134);
    }
    *(_BYTE *)(a1 + 152) = 0;
    v56 = *(_QWORD *)(a1 + 120);
    *(_DWORD *)v198 = 9;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v56 + 104))(v56, v198, 1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v57 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyUnavail", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      *(_WORD *)__p = 0;
      LODWORD(v149) = 2;
      v139 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, notifyUnavail", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v139);
      if (v139 != v198)
        free(v139);
    }
  }
  if (*(_BYTE *)(a2 + 1128))
  {
    sub_100129CA0((uint64_t)__p);
    v58 = *(_OWORD *)(a2 + 440);
    v175 = *(_OWORD *)(a2 + 424);
    v176 = v58;
    v177[0] = *(_OWORD *)(a2 + 456);
    *(_OWORD *)((char *)v177 + 12) = *(_OWORD *)(a2 + 468);
    v59 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)&__p[32] = *(_OWORD *)(a2 + 360);
    v173 = v59;
    v60 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)v174 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)&v174[16] = v60;
    v61 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)__p = *(_OWORD *)(a2 + 328);
    *(_OWORD *)&__p[16] = v61;
    memcpy(v178, (const void *)(a2 + 488), sizeof(v178));
    sub_100349198(&v179, (uint64_t *)(a2 + 1008));
    v62 = *(_OWORD *)(a2 + 1072);
    v63 = *(_OWORD *)(a2 + 1104);
    v185 = *(_OWORD *)(a2 + 1088);
    v186 = v63;
    v64 = *(_OWORD *)(a2 + 1040);
    v181 = *(_OWORD *)(a2 + 1024);
    v182 = v64;
    v183 = *(_OWORD *)(a2 + 1056);
    v184 = v62;
    v187 = *(_BYTE *)(a2 + 1120);
    v65 = *(double *)(a2 + 4792);
    v66 = *(double *)(a2 + 4528);
    v67 = *(double *)(a2 + 4544);
    v68 = *(double *)&v174[12];
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214CEE0);
    v69 = v65 - v66;
    v70 = v65 - v67;
    v71 = v65 - v68;
    v72 = qword_1022A02F8;
    if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
    {
      v73 = v69;
      v74 = v70;
      v75 = v71;
      *(_DWORD *)v198 = 136318466;
      *(_QWORD *)&v198[4] = "WiFi";
      *(_WORD *)&v198[12] = 1024;
      *(_DWORD *)&v198[14] = 1;
      *(_WORD *)&v198[18] = 2048;
      *(_QWORD *)&v198[20] = *(_QWORD *)&__p[4];
      *(_WORD *)&v198[28] = 2048;
      *(_QWORD *)&v198[30] = *(_QWORD *)&__p[12];
      *(_WORD *)&v198[38] = 2048;
      *(_QWORD *)&v198[40] = *(_QWORD *)&__p[20];
      *(_WORD *)&v198[48] = 1024;
      *(_DWORD *)&v198[50] = *(_DWORD *)&v174[20];
      *(_WORD *)v199 = 2048;
      *(double *)&v199[2] = v73;
      v200 = 2048;
      v201 = v74;
      v202 = 1024;
      v203 = 0;
      v204 = 2048;
      v205 = *(_QWORD *)&__p[28];
      v206 = 2048;
      v207 = *(_QWORD *)&__p[36];
      v208 = 1024;
      v209 = 0;
      v210 = 2048;
      v211 = v75;
      v212 = 1024;
      v213 = v177[0];
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3f,sinceReg,%.3f,Confirmed,%d,Altitude,%.2f,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%f,integrity,%d", v198, 0x7Au);
    }
    if (sub_1001BFF7C(117, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214CEE0);
      v135 = v69;
      v136 = v70;
      v137 = v71;
      v153 = 136318466;
      v154 = (uint64_t)"WiFi";
      v155 = 1024;
      *(_DWORD *)v156 = 1;
      *(_WORD *)&v156[4] = 2048;
      *(_QWORD *)&v156[6] = *(_QWORD *)&__p[4];
      *(_WORD *)&v156[14] = 2048;
      *(_QWORD *)&v156[16] = *(_QWORD *)&__p[12];
      *(_WORD *)&v156[24] = 2048;
      *(_QWORD *)&v156[26] = *(_QWORD *)&__p[20];
      *(_WORD *)&v156[34] = 1024;
      *(_DWORD *)&v156[36] = *(_DWORD *)&v174[20];
      *(_WORD *)v157 = 2048;
      *(double *)&v157[2] = v135;
      v158 = 2048;
      v159 = v136;
      v160 = 1024;
      v161 = 0;
      v162 = 2048;
      v163 = *(_QWORD *)&__p[28];
      v164 = 2048;
      v165 = *(_QWORD *)&__p[36];
      v166 = 1024;
      v167 = 0;
      v168 = 2048;
      v169 = v137;
      v170 = 1024;
      v171 = v177[0];
      v138 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3f,sinceReg,%.3f,Confirmed,%d,Altitude,%.2f,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%f,integrity,%d", (const char *)&v153, 122, *(double *)__dst, *(double *)&__dst[1], v151, v152);
      sub_100512490("LOCATION", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v138);
      if (v138 != v198)
        free(v138);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214CDF0);
    v76 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v198 = 134284801;
      *(_QWORD *)&v198[4] = *(_QWORD *)&__p[4];
      *(_WORD *)&v198[12] = 2049;
      *(_QWORD *)&v198[14] = *(_QWORD *)&__p[12];
      *(_WORD *)&v198[22] = 2050;
      *(_QWORD *)&v198[24] = *(_QWORD *)&__p[20];
      *(_WORD *)&v198[32] = 2049;
      *(_QWORD *)&v198[34] = *(_QWORD *)&__p[28];
      *(_WORD *)&v198[42] = 2050;
      *(_QWORD *)&v198[44] = *(_QWORD *)&__p[36];
      *(_WORD *)&v198[52] = 2050;
      *(_QWORD *)v199 = *(_QWORD *)&v174[12];
      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, alt, %{private}.1f, altunc, %{public}.1f, timestamp, %{public}.3f", v198, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214CDF0);
      v153 = 134284801;
      v154 = *(_QWORD *)&__p[4];
      v155 = 2049;
      *(_QWORD *)v156 = *(_QWORD *)&__p[12];
      *(_WORD *)&v156[8] = 2050;
      *(_QWORD *)&v156[10] = *(_QWORD *)&__p[20];
      *(_WORD *)&v156[18] = 2049;
      *(_QWORD *)&v156[20] = *(_QWORD *)&__p[28];
      *(_WORD *)&v156[28] = 2050;
      *(_QWORD *)&v156[30] = *(_QWORD *)&__p[36];
      *(_WORD *)&v156[38] = 2050;
      *(_QWORD *)v157 = *(_QWORD *)&v174[12];
      LODWORD(v149) = 62;
      v140 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, alt, %{private}.1f, altunc, %{public}.1f, timestamp, %{public}.3f", &v153, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v140);
      if (v140 != v198)
        free(v140);
    }
    sub_10001947C(0);
    v77 = *(_QWORD *)(a1 + 120);
    *(_DWORD *)v198 = 0;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v77 + 112))(v77, v198, __p, 0, 0xFFFFFFFFLL, 0);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v78 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyLoc", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      LOWORD(v153) = 0;
      LODWORD(v149) = 2;
      v141 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, notifyLoc", &v153, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v141);
      if (v141 != v198)
        free(v141);
    }

    v79 = v191;
    if (v191)
    {
      p_shared_owners = (unint64_t *)&v191->__shared_owners_;
      do
        v81 = __ldaxr(p_shared_owners);
      while (__stlxr(v81 - 1, p_shared_owners));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v190 < 0)
      operator delete(v189);
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
    if (*((_QWORD *)&v188 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v85 = v180;
    if (v180)
    {
      v86 = (unint64_t *)&v180->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
  }
  if (*(_BYTE *)(a2 + 1160))
  {
    if (*(_QWORD *)(a2 + 1136) == *(_QWORD *)(a2 + 1144))
      sub_101904F2C(qword_1022A0050 == -1);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v88 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v89 = 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 1144) - *(_QWORD *)(a2 + 1136)) >> 2);
      *(_DWORD *)v198 = 134349056;
      *(_QWORD *)&v198[4] = v89;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "notifying clients of %{public}ld batched wifi locations", v198, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v142 = 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 1144) - *(_QWORD *)(a2 + 1136)) >> 2);
      *(_DWORD *)__p = 134349056;
      *(_QWORD *)&__p[4] = v142;
      LODWORD(v149) = 12;
      v143 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "notifying clients of %{public}ld batched wifi locations", __p, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v143);
      if (v143 != v198)
        free(v143);
    }
    sub_100129CA0((uint64_t)__p);
    v90 = *(_QWORD *)(a2 + 1144);
    v91 = *(_OWORD *)(v90 - 140);
    *(_OWORD *)__p = *(_OWORD *)(v90 - 156);
    *(_OWORD *)&__p[16] = v91;
    v92 = *(_OWORD *)(v90 - 108);
    v93 = *(_OWORD *)(v90 - 76);
    v94 = *(_OWORD *)(v90 - 124);
    *(_OWORD *)v174 = *(_OWORD *)(v90 - 92);
    *(_OWORD *)&v174[16] = v93;
    *(_OWORD *)&__p[32] = v94;
    v173 = v92;
    v95 = *(_OWORD *)(v90 - 44);
    v96 = *(_OWORD *)(v90 - 28);
    v97 = *(_OWORD *)(v90 - 60);
    *(_OWORD *)((char *)v177 + 12) = *(_OWORD *)(v90 - 16);
    v176 = v95;
    v177[0] = v96;
    v175 = v97;
    sub_1006B2C20((uint64_t *)(a2 + 1136), v198);
    v98 = *(_OWORD *)v198;
    *(_QWORD *)v198 = 0;
    *(_QWORD *)&v198[8] = 0;
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
    v188 = v98;
    if (v99)
    {
      v100 = (unint64_t *)&v99->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = *(std::__shared_weak_count **)&v198[8];
    if (*(_QWORD *)&v198[8])
    {
      v103 = (unint64_t *)(*(_QWORD *)&v198[8] + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v105 = *(_QWORD *)(a1 + 120);
    *(_DWORD *)v198 = 22;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v105 + 112))(v105, v198, __p, 0, 0xFFFFFFFFLL, 0);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v106 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v107 = 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 1144) - *(_QWORD *)(a2 + 1136)) >> 2);
      *(_DWORD *)v198 = 134349056;
      *(_QWORD *)&v198[4] = v107;
      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "WsbCalc, notify, %{public}lu", v198, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v144 = 0x6F96F96F96F96F97 * ((uint64_t)(*(_QWORD *)(a2 + 1144) - *(_QWORD *)(a2 + 1136)) >> 2);
      v153 = 134349056;
      v154 = v144;
      LODWORD(v149) = 12;
      v145 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbCalc, notify, %{public}lu", &v153, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v145);
      if (v145 != v198)
        free(v145);
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v108 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v198 = 0;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "@WifiLogic, decision, notifyBatched", v198, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v198, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      LOWORD(v153) = 0;
      LODWORD(v149) = 2;
      v146 = (char *)_os_log_send_and_compose_impl(2, 0, v198, 1628, &_mh_execute_header, qword_1022A0058, 2, "@WifiLogic, decision, notifyBatched", &v153, v149);
      sub_100512490("Generic", 1, 0, 2, "CLWifiLocationProvider::HandleEventResults CLWifiLocationProvider::handleLogicOutput(CL::Wifi1::Output)", "%s\n", v146);
      if (v146 != v198)
        free(v146);
    }

    v109 = v191;
    if (v191)
    {
      v110 = (unint64_t *)&v191->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v190 < 0)
      operator delete(v189);
    v112 = (std::__shared_weak_count *)*((_QWORD *)&v188 + 1);
    if (*((_QWORD *)&v188 + 1))
    {
      v113 = (unint64_t *)(*((_QWORD *)&v188 + 1) + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = v180;
    if (v180)
    {
      v116 = (unint64_t *)&v180->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
  }
  return HIDWORD(v149);
}

void sub_100134D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p)
{
  sub_1004B4F0C((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_100134E40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = mach_absolute_time();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v2, v3, v4);
  return a1;
}

void sub_100134E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10219C4A8);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v8 = sub_100134FD4(*(int **)(a1 + 32));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 4248);
    v10[0] = 68290562;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "elapsed";
    v15 = 2050;
    v16 = a2;
    v17 = 2050;
    v18 = a3;
    v19 = 2050;
    v20 = v6;
    v21 = 2082;
    v22 = v8;
    v23 = 2050;
    v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLWifi1SystemLogic::apply\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"event\":%{public, location:escape_only}s, \"now_s\":\"%{public}.09f\"}", (uint8_t *)v10, 0x4Eu);
  }
}

const char *sub_100134FD4(int *a1)
{
  int v1;
  const char *result;

  v1 = *a1 ^ (*a1 >> 31);
  result = "None";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = "Wifi::ScanReady";
      break;
    case 2:
      result = "Wifi::ScanError";
      break;
    case 3:
      result = "Wifi::ScanBusy";
      break;
    case 4:
      result = "Wifi::Power";
      break;
    case 5:
      result = "Wifi::LinkStatus";
      break;
    case 6:
      result = "Wifi::Roam";
      break;
    case 7:
      result = "Wifi::Scan";
      break;
    case 8:
      result = "Wifi::Wsb";
      break;
    case 9:
      result = "System::Privacy";
      break;
    case 10:
      result = "System::Reachability";
      break;
    case 11:
      result = "System::CoarseMotion";
      break;
    case 12:
      result = "System::BatterySaverMode";
      break;
    case 13:
      result = "System::DeviceWake";
      break;
    case 14:
      result = "System::CompanionNearby";
      break;
    case 15:
      result = "System::SignalEnvironment";
      break;
    case 16:
      result = "System::LeechLocation";
      break;
    case 17:
      result = "System::MetricHeartbeat";
      break;
    case 18:
      result = "System::Elevation";
      break;
    case 19:
      result = "Network::AlsError";
      break;
    case 20:
      result = "Network::AlsFinished";
      break;
    case 21:
      result = "Network::AlsRequestResult";
      break;
    case 22:
      result = "Network::AlsAllUnknown";
      break;
    case 23:
      result = "Client::EmergencyState";
      break;
    case 24:
      result = "Client::LocationRequest";
      break;
    case 25:
      result = "Client::Registration";
      break;
    case 26:
      result = "Client::Unregistration";
      break;
    case 27:
      result = "Client::UpdateTimer";
      break;
    case 28:
      result = "Client::WsbTimer";
      break;
    case 29:
      result = "ReprocessWifiScanBuffer";
      break;
    default:
      sub_10055A5D8();
  }
  return result;
}

__n128 sub_100135170(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 *v3;
  __n128 result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[8];
  unsigned int v13;

  v3 = (__n128 *)(*(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 64));
  result = *a3;
  v3[1].n128_u64[0] = a3[1].n128_u64[0];
  *v3 = result;
  v5 = *(_DWORD *)(a1 + 68);
  v6 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v6;
  if (v6 >= v5)
  {
    v8 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(void **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10085F564;
    v12[3] = &unk_1021579E0;
    v12[4] = v9;
    v12[5] = v8;
    v13 = v6;
    v12[6] = v10;
    v12[7] = v7;
    objc_msgSend(v11, "async:", v12);
    operator new[]();
  }
  return result;
}

void sub_10013523C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  char *v7;
  float FloatValue;
  float v9;
  float v10;
  unint64_t TimeStamp;
  double v12[2];
  uint8_t buf[4];
  float v14;
  float v15;

  if (IOHIDEventGetType(a4) == 13)
  {
    if (IOHIDEventGetIntegerValue(a4, 851971) == 1)
    {
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_102163688);
      v6 = qword_10229FD68;
      if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received shake data, discarding.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD60 != -1)
          dispatch_once(&qword_10229FD60, &stru_102163688);
        LOWORD(v12[0]) = 0;
        v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 2, "Received shake data, discarding.", v12, 2);
        sub_100512490("Generic", 1, 0, 2, "static void CLAccelerometer::onAccelerometerIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v7);
        if (v7 != (char *)buf)
          free(v7);
      }
    }
    else
    {
      FloatValue = IOHIDEventGetFloatValue(a4, 851968);
      *(float *)buf = FloatValue;
      v9 = IOHIDEventGetFloatValue(a4, 851969);
      v14 = v9;
      v10 = IOHIDEventGetFloatValue(a4, 851970);
      v15 = v10;
      TimeStamp = IOHIDEventGetTimeStamp(a4);
      v12[0] = sub_100127828(TimeStamp);
      sub_100135454(a1, (uint64_t)buf, v12);
    }
  }
}

uint64_t sub_100135454(uint64_t a1, uint64_t a2, double *a3)
{
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  CFAbsoluteTime Current;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  char v17;
  double v19;
  double v20;
  double v21;
  double v22;
  char *v23;
  double v24;
  double v25;
  double v26[2];
  int v27;
  uint8_t buf[4];
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint64_t v36;
  char v37;
  _BYTE v38[22];
  __int16 v39;
  double v40;
  _BYTE v41[12];

  v26[0] = *a3;
  v26[1] = *(double *)a2;
  v27 = *(_DWORD *)(a2 + 8);
  if (qword_10229FD60 != -1)
    dispatch_once(&qword_10229FD60, &stru_102163688);
  v6 = qword_10229FD68;
  if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(float *)a2;
    v8 = *(float *)(a2 + 4);
    v9 = *(float *)(a2 + 8);
    v10 = *a3;
    *(_DWORD *)buf = 134218752;
    v29 = v7;
    v30 = 2048;
    v31 = v8;
    v32 = 2048;
    v33 = v9;
    v34 = 2048;
    v35 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Accelerometer] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD60 != -1)
      dispatch_once(&qword_10229FD60, &stru_102163688);
    v19 = *(float *)a2;
    v20 = *(float *)(a2 + 4);
    v21 = *(float *)(a2 + 8);
    v22 = *a3;
    *(_DWORD *)v38 = 134218752;
    *(double *)&v38[4] = v19;
    *(_WORD *)&v38[12] = 2048;
    *(double *)&v38[14] = v20;
    v39 = 2048;
    v40 = v21;
    *(_WORD *)v41 = 2048;
    *(double *)&v41[2] = v22;
    LODWORD(v24) = 42;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 2, "[Accelerometer] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", COERCE_DOUBLE(v38), v24, v25, v26[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLAccelerometer::onAccelerometerData(const CLMotionTypeAcceleration &, const CLMotionTypeTimestamp &)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  if (*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)v38 = off_1021713A8;
    Current = CFAbsoluteTimeGetCurrent();
    v12 = *(double *)a2;
    *(_DWORD *)&v41[8] = *(_DWORD *)(a2 + 8);
    v13 = *a3;
    *(CFAbsoluteTime *)&v38[8] = Current;
    v40 = v13;
    *(double *)v41 = v12;
    v14 = sub_1011B78D4();
    sub_1011B8DB0(v14, (uint64_t)v38);
    sub_1015EB864(buf);
    sub_101604A4C((uint64_t)buf);
    v37 |= 1u;
    v36 = *(_QWORD *)&v38[8];
    v15 = v33;
    v16 = *a3;
    v17 = *(_BYTE *)(*(_QWORD *)&v33 + 32);
    *(_BYTE *)(*(_QWORD *)&v33 + 32) = v17 | 1;
    *(double *)(*(_QWORD *)&v15 + 8) = v16;
    LODWORD(v16) = *(_DWORD *)a2;
    *(_BYTE *)(*(_QWORD *)&v15 + 32) = v17 | 5;
    *(_DWORD *)(*(_QWORD *)&v15 + 20) = LODWORD(v16);
    LODWORD(v16) = *(_DWORD *)(a2 + 4);
    *(_BYTE *)(*(_QWORD *)&v15 + 32) = v17 | 0xD;
    *(_DWORD *)(*(_QWORD *)&v15 + 24) = LODWORD(v16);
    LODWORD(v16) = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(*(_QWORD *)&v15 + 32) = v17 | 0x1D;
    *(_DWORD *)(*(_QWORD *)&v15 + 28) = LODWORD(v16);
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021636A8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  return sub_10012AC18(a1, 0, (uint64_t)v26, 24);
}

void sub_1001357AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1001357CC()
{
  operator new();
}

void sub_100135860()
{
  operator delete();
}

const void **sub_100135888(uint64_t a1)
{
  const void **result;

  result = *(const void ***)(a1 + 32);
  if (result)
  {
    sub_1001358BC(result);
    operator delete();
  }
  return result;
}

const void **sub_1001358BC(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t sub_1001358EC(uint64_t a1, int *a2, uint64_t a3)
{
  int v6;

  v6 = *a2;
  if (*a2 > 0x27)
    return sub_10012B1F4(a1, a2, a3);
  if (((1 << v6) & 0x8000000038) != 0)
    return 0;
  if (((1 << v6) & 3) != 0 && sub_100135D1C(a1 + 184, a3))
    return 1;
  else
    return sub_10012B1F4(a1, a2, a3);
}

const void **sub_100135984(uint64_t a1)
{
  return sub_1001358BC((const void **)(a1 + 24));
}

void sub_100135990(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  if (*a1 != a2)
  {
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(v3 + 32);
    sub_1001359E8((_QWORD *)a2, *(uint64_t **)(v3 + 16), 0);
  }
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v3 + 40);
  *(_BYTE *)(a2 + 48) = *(_BYTE *)(v3 + 48);
  sub_10031F180(a2 + 56, v3 + 56);
}

void sub_1001359E8(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  const std::string *v4;
  uint64_t v6;
  uint64_t i;
  void **v8;
  BOOL v9;
  void **v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = (const std::string *)a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (void **)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v8[2] = (void *)v4->__r_.__value_.__r.__words[2];
        std::string::operator=((std::string *)v8 + 1, v4 + 1);
        v11 = *(_OWORD *)&v4[2].__r_.__value_.__l.__data_;
        v12 = *(_OWORD *)&v4[2].__r_.__value_.__r.__words[2];
        v13 = *(_OWORD *)&v4[3].__r_.__value_.__r.__words[1];
        v8[12] = v4[4].__r_.__value_.__l.__data_;
        *((_OWORD *)v8 + 4) = v12;
        *((_OWORD *)v8 + 5) = v13;
        *((_OWORD *)v8 + 3) = v11;
        v10 = (void **)*v8;
        sub_100135B00(a1, v8);
        v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != (const std::string *)a3);
    }
    sub_10012758C((int)a1, v10);
  }
  while (v4 != (const std::string *)a3)
  {
    sub_10055A084(a1, (uint64_t *)&v4->__r_.__value_.__r.__words[2]);
    v4 = (const std::string *)v4->__r_.__value_.__r.__words[0];
  }
}

void sub_100135AD0(void *a1)
{
  int v1;
  void **v2;

  __cxa_begin_catch(a1);
  sub_10012758C(v1, v2);
  __cxa_rethrow();
}

void sub_100135AEC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_100135B00(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v4 = a2 + 2;
  v8 = a2[2];
  v5 = sub_100129380((uint64_t)&v8);
  a2[1] = v5;
  v6 = sub_100135B6C((uint64_t)a1, v5, v4);
  sub_10012923C(a1, a2, v6);
  return a2;
}

_QWORD *sub_100135B6C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 1;
    if (v6 >= 3)
      v9 = (v6 & (v6 - 1)) != 0;
    v10 = v9 | (2 * v6);
    v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11)
      v12 = v11;
    else
      v12 = v10;
    sub_100559DC4(a1, v12);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v13 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v13.i16[0] = vaddlv_u8(v13);
  v14 = v13.u32[0];
  if (v13.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (v16)
  {
    v17 = (_QWORD *)*v16;
    if (*v16)
    {
      v18 = 0;
      do
      {
        v19 = v17[1];
        if (v14 > 1)
        {
          v20 = v17[1];
          if (v19 >= v6)
            v20 = v19 % v6;
        }
        else
        {
          v20 = v19 & (v6 - 1);
        }
        if (v20 != v15)
          break;
        if (v19 == a2)
        {
          v25 = v17[2];
          v21 = sub_100129380((uint64_t)&v25);
          v24 = *a3;
          v22 = v21 == sub_100129380((uint64_t)&v24);
        }
        else
        {
          v22 = 0;
        }
        if ((v18 & !v22 & 1) != 0)
          break;
        v18 |= v22;
        v16 = (_QWORD *)*v16;
        v17 = (_QWORD *)*v16;
      }
      while (*v16);
    }
  }
  return v16;
}

double sub_100135CFC(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_1001362E0(a1 - 152, a2).n128_u64[0];
  return result;
}

void sub_100135D04(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

BOOL sub_100135D1C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  objc_msgSend(*(id *)(a1 + 8), "silo");
  *(_DWORD *)(a1 + 824) = 1;
  v4 = sub_100135DF0(a1);
  if (v4)
  {
    v5 = *(_OWORD *)(a1 + 44);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 28);
    *(_OWORD *)(a2 + 16) = v5;
    v6 = *(_OWORD *)(a1 + 60);
    v7 = *(_OWORD *)(a1 + 76);
    v8 = *(_OWORD *)(a1 + 108);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 92);
    *(_OWORD *)(a2 + 80) = v8;
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)(a2 + 48) = v7;
    v9 = *(_OWORD *)(a1 + 124);
    v10 = *(_OWORD *)(a1 + 140);
    v11 = *(_OWORD *)(a1 + 156);
    *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a2 + 112) = v10;
    *(_OWORD *)(a2 + 128) = v11;
    *(_OWORD *)(a2 + 96) = v9;
    memcpy((void *)(a2 + 160), (const void *)(a1 + 184), 0x201uLL);
    sub_100349198((_QWORD *)(a2 + 680), (uint64_t *)(a1 + 704));
    v13 = *(_OWORD *)(a1 + 736);
    v12 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a2 + 696) = *(_OWORD *)(a1 + 720);
    *(_OWORD *)(a2 + 712) = v13;
    *(_OWORD *)(a2 + 728) = v12;
    v15 = *(_OWORD *)(a1 + 784);
    v14 = *(_OWORD *)(a1 + 800);
    v16 = *(_OWORD *)(a1 + 768);
    *(_BYTE *)(a2 + 792) = *(_BYTE *)(a1 + 816);
    *(_OWORD *)(a2 + 760) = v15;
    *(_OWORD *)(a2 + 776) = v14;
    *(_OWORD *)(a2 + 744) = v16;
  }
  return v4;
}

BOOL sub_100135DF0(uint64_t a1)
{
  double Current;
  double v3;
  NSObject *v4;
  uint64_t v5;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL8 result;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint8_t buf[520];
  __int128 v27[7];
  char v28;

  if (*(double *)(a1 + 48) <= 0.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v18 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Last confident location not available", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v19 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Last confident location not available");
LABEL_31:
    v21 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLastConfidentLocation::isLastConfidentLocationValid()", "%s\n", v19);
    if (v21 != buf)
      free(v21);
    return 0;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 104);
  if (Current >= v3 + 1800.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = 0x409C200000000000;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Last confident location too old, maxAge = %.1lf", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v19 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Last confident location too old, maxAge = %.1lf");
    goto LABEL_31;
  }
  if (Current < v3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 104);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Warning Last confident location is in future, timestamp,%.03lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9B18);
      v22 = *(_QWORD *)(a1 + 104);
      v24 = 134217984;
      v25 = v22;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "#Warning Last confident location is in future, timestamp,%.03lf", COERCE_DOUBLE(&v24));
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLastConfidentLocation::isLastConfidentLocationValid()", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    *(_DWORD *)(a1 + 28) = 0xFFFF;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 48) = xmmword_101BAFC90;
    *(_OWORD *)(a1 + 64) = _Q1;
    *(_OWORD *)(a1 + 80) = _Q1;
    *(_OWORD *)(a1 + 96) = _Q1;
    *(_DWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 116) = 0xBFF0000000000000;
    *(_QWORD *)(a1 + 132) = 0;
    *(_QWORD *)(a1 + 124) = 0;
    *(_DWORD *)(a1 + 140) = 0;
    *(_QWORD *)(a1 + 144) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 152) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 156) = 0;
    *(_QWORD *)(a1 + 172) = 0;
    *(_QWORD *)(a1 + 164) = 0;
    *(_BYTE *)(a1 + 180) = 0;
    sub_10012A33C(buf);
    memcpy((void *)(a1 + 184), buf, 0x201uLL);
    sub_1002B7674(a1 + 704, v27);
    v11 = v27[6];
    *(_OWORD *)(a1 + 784) = v27[5];
    *(_OWORD *)(a1 + 800) = v11;
    *(_BYTE *)(a1 + 816) = v28;
    v12 = v27[2];
    *(_OWORD *)(a1 + 720) = v27[1];
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v27[4];
    *(_OWORD *)(a1 + 752) = v27[3];
    *(_OWORD *)(a1 + 768) = v13;
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v27[0] + 1);
    if (*((_QWORD *)&v27[0] + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v27[0] + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    return 0;
  }
  return 1;
}

__n128 sub_1001362E0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_10219AC48);
  v4 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 1);
    v6 = *(_QWORD *)(a2 + 9);
    *(_DWORD *)buf = 134218240;
    v16 = v5;
    v17 = 2048;
    v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MotionCoprocessor received TimeSync data machTimestamp,%llu,oscarTimestamp,%llu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v8 = *(_QWORD *)(a2 + 1);
    v9 = *(_QWORD *)(a2 + 9);
    v11 = 134218240;
    v12 = v8;
    v13 = 2048;
    v14 = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 2, "MotionCoprocessor received TimeSync data machTimestamp,%llu,oscarTimestamp,%llu", &v11, 22);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitTimeSync(const CMMotionCoprocessorReply::TimeSync *)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  result = *(__n128 *)a2;
  *(_BYTE *)(a1 + 1400) = *(_BYTE *)(a2 + 16);
  *(__n128 *)(a1 + 1384) = result;
  return result;
}

uint64_t sub_1001364C8(__n128 a1, uint64_t a2, _DWORD *a3, double *a4)
{
  _BOOL4 v6;

  v6 = a4[1] > 0.0 && *a4 > 0.0;
  a1.n128_f64[0] = *a4;
  if ((CLMotionActivity::isTypeInVehicle(*a3, a1) & 1) != 0 || *a4 > 0.0 && a4[1] < 0.0)
    return 2;
  if (*a3)
    return 1;
  return v6;
}

void sub_10013653C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStreamingAwareLocationProvider::onLocalLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218BF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onLocalLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218BF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onLocalLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100136714(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001366F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100136714(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double Current;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v7 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v8 = (int)*a3;
    v12[0] = 68289282;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2050;
    v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received local notification\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)v12, 0x1Cu);
  }
  v9 = *(_QWORD *)(a1 + 128);
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100136828(v9, 0, a3, a4, Current);
}

uint64_t sub_100136828(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t a4, double a5)
{
  unsigned int v8;
  NSObject *v10;
  uint64_t **v11;
  uint64_t *v12;
  int v13;
  NSObject *v14;
  void **v15;
  uint64_t **v16;
  uint64_t *v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  int v33;
  NSObject *v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  int *v44;
  int v45;
  uint64_t v46;
  int *v47;
  int *v50;
  int *v51;
  uint64_t v52;
  int *v53;
  int v54;
  uint64_t v55;
  int *v56;
  int v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  int *v62;
  const char *v64;
  char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  _BYTE buf[32];
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;

  v8 = a2;
  HIDWORD(v66) = a2;
  if (*a3 >= 3u)
  {
    if (*a3 != 9)
      goto LABEL_16;
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v14 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Source no longer available\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}", buf, 0x1Cu);
    }
    *(_QWORD *)buf = (char *)&v66 + 4;
    v12 = sub_100136FD4((uint64_t **)(a1 + 40), (int *)&v66 + 1, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
    v13 = 1;
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v10 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Source now available\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld}", buf, 0x1Cu);
    }
    v11 = (uint64_t **)(a1 + 40);
    if (*(_DWORD *)(a4 + 96) == 1)
    {
      *(_QWORD *)buf = (char *)&v66 + 4;
      v12 = sub_100136FD4(v11, (int *)&v66 + 1, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
      v13 = 3;
    }
    else
    {
      *(_QWORD *)buf = (char *)&v66 + 4;
      v12 = sub_100136FD4(v11, (int *)&v66 + 1, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
      v13 = 2;
    }
  }
  *((_DWORD *)v12 + 8) = v13;
  v8 = HIDWORD(v66);
LABEL_16:
  if (v8 == 1)
  {
    v15 = (void **)(a1 + 64);
    v16 = (uint64_t **)(a1 + 40);
    if (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64) < 0x2CDuLL)
    {
      *(_QWORD *)buf = (char *)&v66 + 4;
      v20 = sub_100136FD4(v16, (int *)&v66 + 1, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
      v21 = v20;
      v22 = *(_QWORD *)(a1 + 80);
      v23 = *(char **)(a1 + 72);
      if ((unint64_t)v23 >= v22)
      {
        v25 = (char *)*v15;
        v26 = (v23 - (_BYTE *)*v15) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          sub_100259694();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)sub_100260634(a1 + 80, v29);
          v25 = *(char **)(a1 + 64);
          v23 = *(char **)(a1 + 72);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[4 * v26];
        v32 = &v30[4 * v29];
        *(_DWORD *)v31 = *((_DWORD *)v21 + 8);
        v24 = v31 + 4;
        while (v23 != v25)
        {
          v33 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v33;
          v31 -= 4;
        }
        *(_QWORD *)(a1 + 64) = v31;
        *(_QWORD *)(a1 + 72) = v24;
        *(_QWORD *)(a1 + 80) = v32;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_DWORD *)v23 = *((_DWORD *)v20 + 8);
        v24 = v23 + 4;
      }
      *(_QWORD *)(a1 + 72) = v24;
      v19 = 180;
    }
    else
    {
      *(_QWORD *)buf = (char *)&v66 + 4;
      v17 = sub_100136FD4(v16, (int *)&v66 + 1, (uint64_t)&unk_101B9EB60, (unsigned int **)buf);
      v18 = *(_DWORD *)(a1 + 88);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (v18 % 180)) = *((_DWORD *)v17 + 8);
      v19 = v18 + 1;
    }
    *(_DWORD *)(a1 + 88) = v19;
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v34 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
    {
      v35 = *(int **)(a1 + 64);
      v36 = *(int **)(a1 + 72);
      if (v35 == v36)
      {
        v43 = 0;
        v37 = 0;
        v40 = 0;
        v46 = 0;
      }
      else
      {
        v37 = 0;
        v38 = *(int **)(a1 + 64);
        do
        {
          v39 = *v38++;
          if (v39 == 3)
            ++v37;
        }
        while (v38 != v36);
        v40 = 0;
        v41 = *(int **)(a1 + 64);
        do
        {
          v42 = *v41++;
          if (v42 == 2)
            ++v40;
        }
        while (v41 != v36);
        v43 = 0;
        v44 = *(int **)(a1 + 64);
        do
        {
          v45 = *v44++;
          if (v45 == 1)
            ++v43;
        }
        while (v44 != v36);
        v46 = 0;
        v47 = *(int **)(a1 + 64);
        do
        {
          if (!*v47++)
            ++v46;
        }
        while (v47 != v36);
      }
      *(_DWORD *)buf = 134350080;
      *(_QWORD *)&buf[4] = v37;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v40;
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = v43;
      v78 = 2050;
      v79 = v46;
      v80 = 2050;
      v81 = v36 - v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Companion Availability Statistics,ahq,%{public}ld,a,%{public}ld,ua,%{public}ld,uk,%{public}ld,s,%{public}zu", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10218AF40);
      v50 = *(int **)(a1 + 64);
      v51 = *(int **)(a1 + 72);
      if (v50 == v51)
      {
        v58 = 0;
        v52 = 0;
        v55 = 0;
        v61 = 0;
      }
      else
      {
        v52 = 0;
        v53 = *(int **)(a1 + 64);
        do
        {
          v54 = *v53++;
          if (v54 == 3)
            ++v52;
        }
        while (v53 != v51);
        v55 = 0;
        v56 = *(int **)(a1 + 64);
        do
        {
          v57 = *v56++;
          if (v57 == 2)
            ++v55;
        }
        while (v56 != v51);
        v58 = 0;
        v59 = *(int **)(a1 + 64);
        do
        {
          v60 = *v59++;
          if (v60 == 1)
            ++v58;
        }
        while (v59 != v51);
        v61 = 0;
        v62 = *(int **)(a1 + 64);
        do
        {
          if (!*v62++)
            ++v61;
        }
        while (v62 != v51);
      }
      v67 = 134350080;
      v68 = v52;
      v69 = 2050;
      v70 = v55;
      v71 = 2050;
      v72 = v58;
      v73 = 2050;
      v74 = v61;
      v75 = 2050;
      v76 = v51 - v50;
      LODWORD(v66) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 2, "Companion Availability Statistics,ahq,%{public}ld,a,%{public}ld,ua,%{public}ld,uk,%{public}ld,s,%{public}zu", &v67, v66);
      v65 = (char *)v64;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLStreamingAwareLocationProviderStateMachine::receivedLocationNotification(LocationSource, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, CFAbsoluteTime)", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
  }
  (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, a5);
  return (*(uint64_t (**)(uint64_t, _QWORD, _DWORD *, uint64_t, double))(*(_QWORD *)a1 + 104))(a1, HIDWORD(v66), a3, a4, a5);
}

uint64_t sub_100136EE0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;

  if (a2 == 39)
    v3 = 0;
  else
    v3 = a2;
  if (a2 < 6)
    v3 = 0;
  v5 = v3;
  return (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 - 120)
                                                                                               + 152))(a1 - 120, &v5, a3, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100136F28(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32), *a3, a4);
}

uint64_t *sub_100136F40(uint64_t a1)
{
  char *v1;
  int v2;
  uint64_t *v3;
  int v4;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (char *)dword_101C29188;
  while (!*(_QWORD *)(a1 + 16))
  {
LABEL_8:
    v1 += 4;
    if (v1 == "44CLStreamingAwareLocationProviderStateMachine")
      return sub_100E3384C(a1, 0);
  }
  v2 = *(_DWORD *)v1;
  v3 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    v4 = *((_DWORD *)v3 + 7);
    if (v2 >= v4)
      break;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      goto LABEL_8;
  }
  if (v4 < v2)
  {
    ++v3;
    goto LABEL_7;
  }
  v12 = 0;
  v13 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v11 = _Q0;
  return sub_1001AF928(a1, 0, (uint64_t)&v11);
}

uint64_t *sub_100136FD4(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_1000145B0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t sub_100137090(_BYTE *a1, _DWORD *a2)
{
  int v5;

  sub_1001B3B80();
  if (!*a2 && !a1[109])
  {
    v5 = 9;
    (*(void (**)(_BYTE *, int *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v5, 1, 0xFFFFFFFFLL);
  }
  return 1;
}

void sub_1001370F4(uint64_t a1, _DWORD *a2, _BYTE *a3, uint64_t a4)
{
  sub_1001370FC(a4, a2, a3);
}

void sub_1001370FC(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  int v4;
  _BOOL4 v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  _BOOL4 v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  _BOOL4 v24;

  if (*a2 == 6)
  {
    *(_BYTE *)(a1 + 1417) = *a3;
    v4 = *(unsigned __int8 *)(a1 + 1416);
    goto LABEL_5;
  }
  if (*a2 == 5)
  {
    v4 = *a3;
    *(_BYTE *)(a1 + 1416) = v4;
LABEL_5:
    BYTE6(v13) = 25;
    if (v4)
      v5 = 1;
    else
      v5 = *(_BYTE *)(a1 + 1417) != 0;
    HIBYTE(v13) = v5;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v9 = *(unsigned __int8 *)(a1 + 1417);
      v10 = *(unsigned __int8 *)(a1 + 1416);
      *(_DWORD *)buf = 67109632;
      v20 = v9;
      v21 = 1024;
      v22 = v10;
      v23 = 1024;
      v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending induced motion: touch, %d, vibe, %d, sum, %d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v11 = *(unsigned __int8 *)(a1 + 1416);
      v15 = 1024;
      v16 = v11;
      v17 = 1024;
      v18 = v5;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Sending induced motion: touch, %d, vibe, %d, sum, %d", &v14, 20, 67109632);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::onInducedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    sub_10013746C(a1 + 192, (__int16 *)&v13 + 3, 0);
    return;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Unhandled notification from CLMotionState in CLMotionCoprocessor.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    LOWORD(v14) = 0;
    LODWORD(v13) = 2;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Unhandled notification from CLMotionState in CLMotionCoprocessor.", &v14, v13);
    sub_100512490("Generic", 1, 0, 0, "void CLMotionCoprocessor::onInducedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
}

void sub_10013746C(uint64_t a1, __int16 *a2, void *aBlock)
{
  void *v4;
  NSObject *v5;
  _QWORD v6[7];
  _QWORD v7[6];
  __int16 v8;

  if (*(_QWORD *)(a1 + 8))
  {
    v7[0] = 0;
    v7[1] = v7;
    v7[2] = 0x3812000000;
    v7[3] = sub_10103A188;
    v7[4] = nullsub_1385;
    v7[5] = &unk_102080316;
    v8 = *a2;
    if (aBlock)
      v4 = _Block_copy(aBlock);
    else
      v4 = 0;
    v5 = *(NSObject **)a1;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10020813C;
    v6[3] = &unk_102147938;
    v6[5] = v7;
    v6[6] = a1;
    v6[4] = v4;
    dispatch_async(v5, v6);
    _Block_object_dispose(v7, 8);
  }
  else if (aBlock)
  {
    (*((void (**)(void *, _QWORD))aBlock + 2))(aBlock, 0);
  }
}

void sub_100137558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100137570(uint64_t a1, int *a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  NSObject *v8;
  int v9;
  NSObject *v10;
  void *v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD block[5];
  _DWORD v19[4];
  uint8_t buf[4];
  int v21;

  if (!*a2)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,on,GnssProviderInternal", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v19[0]) = 0;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,GnssProviderInternal", v19, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  if (sub_1001B3B80())
  {
    switch(*a2)
    {
      case 28:
        sub_100853644((_QWORD *)(a1 + 120), 1);
        break;
      case 29:
        sub_100852EB8((_QWORD *)(a1 + 120), 1);
        break;
      case 30:
      case 31:
      case 32:
      case 33:
      case 36:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
        return 1;
      case 34:
        sub_100219C54(a1 + 120, 1);
        break;
      case 35:
        sub_100853964((_QWORD *)(a1 + 120), 1);
        break;
      case 37:
        sub_100854040(a1 + 120, 1);
        break;
      case 38:
        sub_100853C84(a1 + 120, 1);
        break;
      case 44:
        sub_100855640(a1 + 120, 1);
        break;
      case 45:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v10 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "kNotificationGNSSStatusIndication registered", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102189B38);
          LOWORD(v19[0]) = 0;
          LODWORD(v17) = 2;
          v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "kNotificationGNSSStatusIndication registered", v19, v17);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v15);
          if (v15 != (char *)buf)
            free(v15);
        }
        v11 = *(void **)(a1 + 32);
        if (v11)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_100E069AC;
          block[3] = &unk_10212ECA0;
          block[4] = a1;
          dispatch_async((dispatch_queue_t)objc_msgSend(objc_msgSend(v11, "silo"), "queue"), block);
        }
        break;
      default:
        if (!*a2)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102189B38);
          v8 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Start location in location notification", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102189B38);
            LOWORD(v19[0]) = 0;
            LODWORD(v17) = 2;
            v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Start location in location notification", v19, v17);
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v16);
            if (v16 != (char *)buf)
              free(v16);
          }
          sub_1000C473C(a1, a2);
          sub_10000CAA0(a1);
          *(_DWORD *)buf = *a2;
          v9 = sub_1001B7864(a1, (int *)buf, 1);
          sub_10004FFE4(a1, 1, v9, a2);
        }
        break;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v6 = *a2;
      *(_DWORD *)buf = 67240192;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Internal registeration for notification,%{public}d,failed", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v12 = *a2;
      v19[0] = 67240192;
      v19[1] = v12;
      LODWORD(v17) = 8;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "Internal registeration for notification,%{public}d,failed", v19, v17);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGnssProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  return 1;
}

id sub_100137BFC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onGnssAvailabilityPredictorNotification:data:", a2, a3);
}

void sub_100137C0C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  v5 = *a2;
  sub_10011D234((uint64_t)v15, a3);
  objc_msgSend(a4, "onLocationNotification:data:", v5, v15);

  v6 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v19 < 0)
    operator delete(__p);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_100137D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100137DBC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void **v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __int128 v14;
  char *v15;
  double v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  double v26;

  v3 = a2[1];
  v17 = *a2;
  v18 = v3;
  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 48))(v4, &v17);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
  {
    v6 = v5 + *(_QWORD *)(a1 + 48) - 1;
    v7 = *(void ***)(a1 + 24);
    v8 = (*(double **)((char *)v7 + ((v6 >> 4) & 0xFFFFFFFFFFFFFF8)))[4 * (v6 & 0x7F)];
    if (v8 > *(double *)&v17)
    {
      v9 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 56) = 0;
      v10 = v9 - (_QWORD)v7;
      if (v10 >= 0x11)
      {
        do
        {
          operator delete(*v7);
          v11 = *(_QWORD *)(a1 + 32);
          v7 = (void **)(*(_QWORD *)(a1 + 24) + 8);
          *(_QWORD *)(a1 + 24) = v7;
          v10 = v11 - (_QWORD)v7;
        }
        while (v10 > 0x10);
      }
      if (v10 >> 3 == 1)
      {
        v12 = 64;
      }
      else
      {
        if (v10 >> 3 != 2)
        {
LABEL_12:
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10218C9D0);
          v13 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134218240;
            v24 = v17;
            v25 = 2048;
            v26 = v8;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "time rollback on add, newItemTime, %f, lastItemTime, %f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_10218C9D0);
            v19 = 134218240;
            v20 = v17;
            v21 = 2048;
            v22 = v8;
            LODWORD(v16) = 22;
            v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "time rollback on add, newItemTime, %f, lastItemTime, %f", COERCE_DOUBLE(&v19), v16);
            sub_100512490("Generic", 1, 0, 2, "void CLSourceBuffer<CLOutdoorGnssAvailabilityPredictor>::add(const T &) [T = CLOutdoorGnssAvailabilityPredictor]", "%s\n", v15);
            if (v15 != (char *)buf)
              free(v15);
          }
          goto LABEL_17;
        }
        v12 = 128;
      }
      *(_QWORD *)(a1 + 48) = v12;
      goto LABEL_12;
    }
  }
LABEL_17:
  sub_100138058((_QWORD *)(a1 + 16), (uint64_t)&v17);
  v14 = v18;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 112) = v14;
}

__n128 sub_100138058(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100E62A1C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

uint64_t sub_1001380E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void sub_100138100(uint64_t a1, __int128 *a2)
{
  sub_100137DBC(a1 + 1888, a2);
}

void sub_100138108(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_102167990);
  v3 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    v5 = *((_DWORD *)a2 + 2);
    v6 = *((_DWORD *)a2 + 3);
    v8 = a2[2];
    v7 = a2[3];
    *(_DWORD *)buf = 134219009;
    v27 = v4;
    v28 = 2048;
    v29 = v7;
    v30 = 1025;
    v31 = v5;
    v32 = 1025;
    v33 = v6;
    v34 = 2049;
    v35 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GnssAvailabilityPredictor,startTime,%f,mctTime,%f,measSource,%{private}d,state,%{private}d,stateProbability,%{private}f", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_102167990);
    v9 = *a2;
    v10 = *((_DWORD *)a2 + 2);
    v11 = *((_DWORD *)a2 + 3);
    v13 = a2[2];
    v12 = a2[3];
    v16 = 134219009;
    v17 = v9;
    v18 = 2048;
    v19 = v12;
    v20 = 1025;
    v21 = v10;
    v22 = 1025;
    v23 = v11;
    v24 = 2049;
    v25 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "GnssAvailabilityPredictor,startTime,%f,mctTime,%f,measSource,%{private}d,state,%{private}d,stateProbability,%{private}f", &v16, 44);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorInputs::logGnssAvailabilityPredictor(const CLOutdoorGnssAvailabilityPredictor &)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
}

void sub_100138E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100138EA0(uint64_t a1, uint64_t a2)
{
  return sub_10014BD34(a1 - 152, a2);
}

uint64_t sub_100138EAC(_QWORD *a1, unsigned int *a2)
{
  int v4;
  uint64_t **v5;
  double Current;
  uint64_t v7;
  int *v8;

  sub_1001B3B80();
  v4 = *a2;
  if (*a2 >= 3)
  {
    if (v4 != 9)
    {
      objc_msgSend(*(id *)(a1[25] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(a1[25] + 8), *a2, 0);
      v7 = 0;
      v8 = &dword_101C2A0D4;
      while (dword_101C2A0C8[v7] != *a2)
      {
        if (++v7 == 3)
          goto LABEL_9;
      }
      v8 = &dword_101C2A0C8[v7];
LABEL_9:
      if ((char *)v8 - (char *)dword_101C2A0C8 != 12)
        objc_msgSend(*(id *)(a1[26] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(a1[26] + 8));
    }
  }
  else
  {
    v5 = (uint64_t **)a1[16];
    Current = CFAbsoluteTimeGetCurrent();
    sub_10001982C(v5, v4, 1, Current);
  }
  return 1;
}

uint64_t sub_100138F74(uint64_t a1, unsigned int *a2)
{
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[4];
  int v21;
  int v22;
  const char *v23;
  uint8_t buf[4];
  const char *v25;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    LODWORD(v25) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CellLoc, registerForNotificationInternal, notification, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v13 = *a2;
    v22 = 67240192;
    LODWORD(v23) = v13;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "CellLoc, registerForNotificationInternal, notification, %{public}d", &v22, 8);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
  }
  sub_1001B3B80();
  if (*a2 <= 4 && ((1 << *a2) & 0x19) != 0)
  {
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider")), "resetRetryCounters:", CFSTR("CLUnifiedCellLocationProvider"));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v7 = sub_1001B49F8(*a2);
      *(_DWORD *)buf = 136446210;
      v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CellFlow, locreq, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v15 = qword_1022A0048;
      v16 = sub_1001B49F8(*a2);
      v22 = 136446210;
      v23 = v16;
      LODWORD(v19) = 12;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "CellFlow, locreq, %{public}s", &v22, v19);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
    v8 = *(_QWORD *)(a1 + 136);
    sub_10013F950(buf, CFSTR("kCellInfoNotification"));
    objc_msgSend(*(id *)(v8 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v8 + 8), sub_1001CFE7C((unsigned int *)buf), 0);
    v9 = *(_QWORD *)(a1 + 136);
    sub_10013F950(buf, CFSTR("kCellMonitorRefreshResultNotification"));
    objc_msgSend(*(id *)(v9 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v9 + 8), sub_1001CFE7C((unsigned int *)buf), 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 144) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8), 3, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 144) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8), 0, 0);
    if (!*a2)
    {
      sub_100019640(a1, "register");
      *(_DWORD *)buf = 0;
      v10 = sub_1001B7864(a1, (int *)buf, 1);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021846D8);
      v11 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        LODWORD(v25) = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "UclpMetric, registrant, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021846D8);
        v22 = 67240192;
        LODWORD(v23) = v10;
        LODWORD(v19) = 8;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "UclpMetric, registrant, %{public}d", &v22, v19);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v18);
        if (v18 != (char *)buf)
          free(v18);
      }
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100D93974;
      v20[3] = &unk_102146830;
      v21 = v10;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.cellloc.registrant"), v20);
      if (*(double *)(a1 + 1208) == 0.0)
        *(CFAbsoluteTime *)(a1 + 1208) = CFAbsoluteTimeGetCurrent();
      ++*(_DWORD *)(a1 + 1184);
    }
  }
  return 1;
}

uint64_t sub_10013953C(uint64_t a1, _DWORD *a2)
{
  sub_1001B3B80();
  if (*a2 >= 3u)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8));
  return 1;
}

void sub_100139580(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationAwarenessProvider::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10219F928);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationAwarenessProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationAwarenessProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100139758(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100139738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100139758(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  _BYTE buf[32];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];

  if (*a3 == *(_DWORD *)(a1 + 312))
  {
    *(_DWORD *)buf = 0;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
      v6 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Received location\"}", buf, 0x12u);
      }
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a4 + 76);
      sub_100139A0C(a1);
      v7 = *(_OWORD *)(a4 + 112);
      v21 = *(_OWORD *)(a4 + 96);
      v22 = v7;
      v23[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v23 + 12) = *(_OWORD *)(a4 + 140);
      v8 = *(_OWORD *)(a4 + 48);
      v17 = *(_OWORD *)(a4 + 32);
      v18 = v8;
      v9 = *(_OWORD *)(a4 + 80);
      v19 = *(_OWORD *)(a4 + 64);
      v20 = v9;
      v10 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)buf = *(_OWORD *)a4;
      *(_OWORD *)&buf[16] = v10;
      v15 = 0;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v15, buf, 1, 0xFFFFFFFFLL, 0);
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
      v14 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness #warning Received location without clients\"}", buf, 0x12u);
      }
      if (*(_DWORD *)(a1 + 312) != 48)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 264) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 264) + 8));
        *(_DWORD *)(a1 + 312) = 48;
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness #warning Unexpected notification\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", buf, 0x1Cu);
    }
  }
}

void sub_100139A0C(uint64_t a1)
{
  double *v2;
  uint64_t v3;
  double v4;
  NSObject *v5;
  int v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  _BYTE v12[18];
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  int v16;

  sub_100139C48(a1, (uint64_t)v12);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)v12;
  *(_BYTE *)(a1 + 144) = v12[16];
  *(CFAbsoluteTime *)(a1 + 184) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)v12 = 0;
  if (sub_1001B7864(a1, (int *)v12, 1) && *(_BYTE *)(a1 + 248))
  {
    v2 = (double *)(a1 + 128);
    *(_BYTE *)(a1 + 288) = 1;
    if (*(_BYTE *)(a1 + 144))
      v3 = 3;
    else
      v3 = 4;
    sub_100139D54((_DWORD *)a1, v3);
    sub_100139DB4(a1, 1);
    if (*(_BYTE *)(a1 + 249))
    {
      v4 = *v2;
    }
    else
    {
      *v2 = INFINITY;
      v4 = INFINITY;
    }
    v8 = *(double *)(a1 + 184) + *(double *)(a1 + 120);
    if (vabdd_f64(v8, *(double *)(a1 + 160)) < v4)
    {
      sub_100139E48(a1);
      v9 = *(double *)(a1 + 128);
      v10 = INFINITY;
      if (v9 != INFINITY)
      {
        v11 = *(double *)(a1 + 160);
LABEL_22:
        v10 = v9 + v11;
        goto LABEL_23;
      }
      goto LABEL_23;
    }
    if (vabdd_f64(v8, *(double *)(a1 + 168)) < *(double *)(a1 + 136))
    {
      sub_100139E48(a1);
      v9 = *(double *)(a1 + 168);
      v10 = -INFINITY;
      if (v9 != -INFINITY)
      {
        v11 = *(double *)(a1 + 136);
        goto LABEL_22;
      }
LABEL_23:
      sub_100139F7C((double *)a1, v10);
      return;
    }
    sub_1010BE578(a1);
  }
  else
  {
    if (*(_BYTE *)(a1 + 288))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
      v5 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v12 = 0;
        v6 = sub_1001B7864(a1, (int *)v12, 1);
        v7 = *(unsigned __int8 *)(a1 + 248);
        *(_QWORD *)v12 = 68289538;
        *(_WORD *)&v12[8] = 2082;
        *(_QWORD *)&v12[10] = "";
        v13 = 1026;
        v14 = v6 != 0;
        v15 = 1026;
        v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Shutting down\", \"hasClients\":%{public}hhd, \"bigSwitch\":%{public}hhd}", v12, 0x1Eu);
      }
      sub_1010BD690(a1);
    }
    *(_BYTE *)(a1 + 288) = 0;
  }
}

uint64_t sub_100139C48@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  double v11;
  double v12;
  double *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  *(int64x2_t *)a2 = vdupq_n_s64(0x7FF0000000000000uLL);
  *(_BYTE *)(a2 + 16) = 0;
  v2 = *(_QWORD *)(result + 64);
  if (v2)
  {
    v3 = result + 64;
    do
    {
      v4 = *(_DWORD *)(v2 + 32);
      v5 = v4 < 0;
      if (v4 >= 0)
        v6 = (uint64_t *)v2;
      else
        v6 = (uint64_t *)(v2 + 8);
      if (!v5)
        v3 = v2;
      v2 = *v6;
    }
    while (*v6);
    if (v3 != result + 64 && *(int *)(v3 + 32) <= 0)
    {
      v7 = *(_QWORD **)(v3 + 40);
      v8 = (_QWORD *)(v3 + 48);
      if (v7 != v8)
      {
        v9 = 0;
        v10 = *(unsigned __int8 *)(result + 152);
        v11 = INFINITY;
        v12 = INFINITY;
        do
        {
          v13 = (double *)(v7 + 5);
          if (v10)
            v14 = 5;
          else
            v14 = 8;
          if (!v10)
            v13 = (double *)(v7 + 8);
          if (*(double *)&v7[v14] < v11)
            v11 = *(double *)&v7[v14];
          *(double *)a2 = v11;
          if (v13[1] < v12)
            v12 = v13[1];
          *(double *)(a2 + 8) = v12;
          v9 = v9 || *((_BYTE *)v13 + 16) != 0;
          *(_BYTE *)(a2 + 16) = v9;
          v15 = (_QWORD *)v7[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (_QWORD *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (_QWORD *)v7[2];
              v17 = *v16 == (_QWORD)v7;
              v7 = v16;
            }
            while (!v17);
          }
          v7 = v16;
        }
        while (v16 != v8);
      }
    }
  }
  return result;
}

_DWORD *sub_100139D54(_DWORD *result, uint64_t a2)
{
  int v2;
  _DWORD *v4;

  v2 = result[78];
  if (v2 != (_DWORD)a2)
  {
    v4 = result;
    if (v2 != 48)
      result = objc_msgSend(*(id *)(*((_QWORD *)result + 33) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)result + 33) + 8));
    if ((_DWORD)a2 != 48)
      result = objc_msgSend(*(id *)(*((_QWORD *)v4 + 33) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v4 + 33) + 8), a2, 0);
    v4[78] = a2;
  }
  return result;
}

uint64_t sub_100139DB4(uint64_t a1, int a2)
{
  uint64_t result;
  void *v5;

  sub_100197040();
  result = sub_10011E0F0();
  if ((result & 1) == 0 && *(unsigned __int8 *)(a1 + 153) != a2)
  {
    *(_BYTE *)(a1 + 153) = a2;
    v5 = *(void **)(a1 + 328);
    if (a2)
    {
      objc_msgSend(v5, "startMonitoringScenarioTriggerOfType:forClient:", 1, CLISP_ME_TOKEN);
      return (uint64_t)objc_msgSend(*(id *)(a1 + 328), "startMonitoringScenarioTriggerOfType:forClient:", 2, CLISP_ME_TOKEN);
    }
    else
    {
      objc_msgSend(v5, "stopMonitoringScenarioTriggerOfType:forClient:", 1, CLISP_ME_TOKEN);
      result = (uint64_t)objc_msgSend(*(id *)(a1 + 328), "stopMonitoringScenarioTriggerOfType:forClient:", 2, CLISP_ME_TOKEN);
      *(_BYTE *)(a1 + 152) = 0;
    }
  }
  return result;
}

double sub_100139E48(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 289))
  {
    *(_BYTE *)(a1 + 289) = 0;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 296);
      v6[0] = 68289282;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2050;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Awareness stopping active location request and releasing power assertion\", \"powerAssertion\":\"%{public}p\"}", (uint8_t *)v6, 0x1Cu);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 272) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 272) + 8), 1);
    objc_msgSend(*(id *)(a1 + 304), "setNextFireDelay:", 1.79769313e308);
    v4 = *(_QWORD *)(a1 + 296);
    *(_QWORD *)(a1 + 296) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    result = *(double *)(a1 + 184);
    *(double *)(a1 + 168) = result;
  }
  return result;
}

void sub_100139F7C(double *a1, double a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  double v12;

  if (a2 == INFINITY)
  {
    if (a1[22] != INFINITY)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
      v4 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 68289026;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Awareness Disabling wakes\"}", (uint8_t *)&v7, 0x12u);
      }
      a1[22] = INFINITY;
      sub_10016E3C4((uint64_t)(a1 + 24));
    }
  }
  else if (a1[23] >= a2)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10219F948);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Awareness Wake time is in the past\", \"wakeTime_s\":\"%{public}.09f\"}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10219F948);
    }
    v6 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Awareness Wake time is in the past", "{\"msg%{public}.0s\":\"#Awareness Wake time is in the past\", \"wakeTime_s\":\"%{public}.09f\"}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  else if (vabdd_f64(a1[22], a2) >= a1[14])
  {
    sub_1001F40D0((uint64_t)(a1 + 24), a2);
    a1[22] = a2;
  }
}

uint64_t sub_10013A1FC(uint64_t a1, int *a2)
{
  int v4;
  NSObject *v5;
  double v6;
  NSObject *v7;
  double v8;
  char *v10;
  char *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  sub_1001B3B80();
  v4 = *a2;
  if (*a2 == 40)
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v5 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLAccessory,PauseExternalLocation,1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v12[0] = 0;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,PauseExternalLocation,1", v12, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLAccessoryLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    v6 = sub_1001FCBB4();
    sub_100753C7C(a1 + 1984, 1);
    sub_10115B500(a1 + 2544, 0, v6);
  }
  else if (v4 == 29)
  {
    if (!*(_BYTE *)(a1 + 1363))
    {
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v7 = qword_1022A0008;
      if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLAccessory,EnableAccessoryNMEAScreening,0,airborne,1", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021506B8);
        v12[0] = 0;
        v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLAccessory,EnableAccessoryNMEAScreening,0,airborne,1", v12, 2);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLAccessoryLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v11);
        if (v11 != (char *)buf)
          free(v11);
      }
      v8 = sub_1001FCBB4();
      sub_10115B500(a1 + 2544, 0, v8);
      *(_BYTE *)(a1 + 1985) = 0;
      sub_100738320(a1 + 1984);
    }
  }
  else if (!v4)
  {
    sub_10000E5FC(a1);
  }
  return 1;
}

void sub_10013A540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPipelineLocationProvider::onLocationControllerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A47E0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPipelineLocationProvider::onLocationControllerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A47E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPipelineLocationProvider::onLocationControllerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10013A710(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10013A6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10013A710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::chrono::steady_clock::time_point v6;

  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  sub_100171EF4(*(_QWORD *)(a1 + 144), v6.__d_.__rep_, a4);
  sub_10014DA74(a1, a4, a4 + 160);
}

uint64_t sub_10013A760(uint64_t a1, _DWORD *a2)
{
  std::chrono::steady_clock::time_point v3;

  if (*a2 == 28)
  {
    v3.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    sub_100253424(*(_QWORD *)(a1 + 144), v3.__d_.__rep_);
  }
  return 1;
}

void sub_10013A79C(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistancePosition::onLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102190680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistancePosition::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102190680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistancePosition::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10013A974((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10013A954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10013A974(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  _BYTE *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  int v13;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  NSObject *v41;
  int v42;
  int v43;
  unint64_t *p_shared_owners;
  _DWORD v45[2];
  __int16 v46;
  const char *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  _BYTE buf[96];
  __int128 v53;
  __int128 v54;
  _BYTE v55[28];
  _BYTE v56[520];
  uint64_t v57;
  std::__shared_weak_count *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;

  v7 = (_BYTE *)(a1 + 11672);
  if (*(_BYTE *)(a1 + 11672))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v9;
      v10 = v8;
      v11 = OS_LOG_TYPE_DEFAULT;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Received location notification\", \"notification\":%{public}d}", buf, 0x18u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v13 = *a3;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v13;
      v10 = v12;
      v11 = OS_LOG_TYPE_DEBUG;
      goto LABEL_10;
    }
  }
  if (*a3 == 33)
  {
    *(_DWORD *)buf = 0xFFFF;
    *(_QWORD *)&buf[12] = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    v53 = 0uLL;
    *(_QWORD *)&buf[88] = 0xBFF0000000000000;
    *(_QWORD *)((char *)&v54 + 4) = 0xBFF0000000000000;
    LODWORD(v54) = 0;
    HIDWORD(v54) = 0x7FFFFFFF;
    memset(v55, 0, 25);
    sub_10012A33C(v56);
    v33 = *(_OWORD *)(a4 + 112);
    v53 = *(_OWORD *)(a4 + 96);
    v54 = v33;
    *(_OWORD *)v55 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v55[12] = *(_OWORD *)(a4 + 140);
    v34 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&buf[48] = v34;
    v35 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&buf[80] = v35;
    v36 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)buf = *(_OWORD *)a4;
    *(_OWORD *)&buf[16] = v36;
    memcpy(v37, (const void *)(a4 + 160), 0x201uLL);
    sub_100349198(&v57, (uint64_t *)(a4 + 680));
    v38 = *(_OWORD *)(a4 + 776);
    v63 = *(_OWORD *)(a4 + 760);
    v64 = v38;
    v39 = *(_OWORD *)(a4 + 712);
    v59 = *(_OWORD *)(a4 + 696);
    v60 = v39;
    v40 = *(_OWORD *)(a4 + 744);
    v61 = *(_OWORD *)(a4 + 728);
    v62 = v40;
    v65 = *(_BYTE *)(a4 + 792);
    if (((_DWORD)v53 == 11 || (_DWORD)v53 == 4) && sub_10013E6DC(a1, (uint64_t)buf, a1 + 4812))
      sub_10023F2A4(a1 + 72, (uint64_t)buf, (uint64_t)v56);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v42 = *v7;
      v43 = *(unsigned __int8 *)(a1 + 1536);
      v45[0] = 68289538;
      v45[1] = 0;
      v46 = 2082;
      v47 = "";
      v48 = 1026;
      v49 = v42;
      v50 = 1026;
      v51 = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,\", \"fInEmergency\":%{public}hhd, \"fPositionAssistanceRunning\":%{public}hhd}", (uint8_t *)v45, 0x1Eu);
    }
    if (*v7 || *(_BYTE *)(a1 + 1536))
      sub_10013AEB8(a1, (uint64_t)buf, 1, 1);
    v29 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      goto LABEL_36;
    }
  }
  else if (*a3 == 5)
  {
    *(_DWORD *)buf = 0xFFFF;
    *(_QWORD *)&buf[12] = 0;
    *(_QWORD *)&buf[4] = 0;
    *(_OWORD *)&buf[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&buf[36] = _Q0;
    *(_OWORD *)&buf[52] = _Q0;
    *(_OWORD *)&buf[68] = _Q0;
    *(_DWORD *)&buf[84] = 0;
    v53 = 0uLL;
    *(_QWORD *)&buf[88] = 0xBFF0000000000000;
    *(_QWORD *)((char *)&v54 + 4) = 0xBFF0000000000000;
    LODWORD(v54) = 0;
    HIDWORD(v54) = 0x7FFFFFFF;
    memset(v55, 0, 25);
    sub_10012A33C(v56);
    v19 = *(_OWORD *)(a4 + 112);
    v53 = *(_OWORD *)(a4 + 96);
    v54 = v19;
    *(_OWORD *)v55 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v55[12] = *(_OWORD *)(a4 + 140);
    v20 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&buf[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&buf[48] = v20;
    v21 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&buf[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&buf[80] = v21;
    v22 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)buf = *(_OWORD *)a4;
    *(_OWORD *)&buf[16] = v22;
    memcpy(v23, (const void *)(a4 + 160), 0x201uLL);
    sub_100349198(&v57, (uint64_t *)(a4 + 680));
    v24 = *(_OWORD *)(a4 + 776);
    v63 = *(_OWORD *)(a4 + 760);
    v64 = v24;
    v25 = *(_OWORD *)(a4 + 712);
    v59 = *(_OWORD *)(a4 + 696);
    v60 = v25;
    v26 = *(_OWORD *)(a4 + 744);
    v61 = *(_OWORD *)(a4 + 728);
    v62 = v26;
    v65 = *(_BYTE *)(a4 + 792);
    sub_10013AEB8(a1, (uint64_t)buf, 0, 1);
    v27 = *(_BYTE **)(a1 + 11680);
    if (v27 && sub_100155F90(v27, a4) && *(_QWORD *)(a1 + 64))
    {
      LOBYTE(v45[0]) = sub_100368AC4(*(unsigned __int8 **)(a1 + 11680));
      v28 = *(_QWORD *)(a1 + 64);
      if (!v28)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v28 + 48))(v28, v45);
    }
    v29 = v58;
    if (v58)
    {
      v30 = (unint64_t *)&v58->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
LABEL_36:
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
}

void sub_10013AE9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10013AEB8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _BYTE *v7;
  const void *v8;
  double v9;
  double Current;
  uint64_t v11;
  void **v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  void **v21;
  double v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint32_t v42;
  double v43;
  void **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void **v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  void **v66;
  const char *v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  uint64_t v71;
  void **v72;
  double v73;
  uint64_t v74;
  void **v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  void **v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  void **v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  void **v92;
  NSObject *v93;
  os_log_type_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  char v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  NSObject *v132;
  os_log_type_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  void **v137;
  uint32_t v138;
  uint64_t v139;
  void **v140;
  uint64_t v141;
  uint32_t v142;
  uint64_t *v143;
  int v144;
  int v145;
  int v146;
  double v148;
  int v149;
  uint64_t v150;
  void **v151;
  const char *v152;
  NSObject *v153;
  os_log_type_t v154;
  uint64_t v155;
  const char *v156;
  NSObject *v157;
  os_log_type_t v158;
  NSObject *v159;
  int v160;
  int v161;
  const char *v162;
  uint8_t *v163;
  uint64_t v164;
  uint32_t v165;
  char v166;
  uint64_t v167;
  void **v168;
  NSObject *v169;
  os_log_type_t v170;
  uint64_t v171;
  void **v172;
  uint64_t v173;
  void **v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  void **v178;
  uint64_t v179;
  void **v180;
  uint64_t v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  int v186;
  int v187;
  int v188;
  NSObject *v189;
  os_log_type_t v190;
  uint64_t v191;
  void **v192;
  uint32_t v193;
  char v194;
  double *v195;
  uint64_t v196;
  int v197;
  int v198;
  double v199;
  int v200;
  int v201;
  int v202;
  NSObject *v203;
  os_log_type_t v204;
  uint64_t v205;
  NSObject *v206;
  os_log_type_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  void **v222;
  uint64_t v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  uint64_t v229;
  int v230;
  int v231;
  double v232;
  int v233;
  int v234;
  int v235;
  int v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  int v243;
  NSObject *v244;
  os_log_type_t v245;
  uint64_t v246;
  void **v247;
  NSObject *v248;
  os_log_type_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  int v256;
  char v257;
  uint64_t v258;
  int v259;
  int v260;
  int v261;
  int v262;
  uint64_t v263;
  void **v264;
  uint64_t v265;
  int v266;
  int v267;
  int v268;
  int v269;
  uint64_t v270;
  int v271;
  int v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  int v277;
  int v278;
  int v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  int v284;
  uint64_t v285;
  uint8_t buf[4];
  int v288;
  __int16 v289;
  const char *v290;
  __int16 v291;
  _BYTE v292[24];
  _BYTE v293[12];
  _BYTE v294[6];
  _BYTE v295[6];
  _BYTE v296[10];
  __int16 v297;
  int v298;
  void *v299[2];
  char v300;

  v7 = (_BYTE *)(a1 + 11544);
  v8 = (const void *)(a2 + 160);
  v9 = sub_1001FC7BC(a2, a2 + 160);
  Current = CFAbsoluteTimeGetCurrent();
  if (v7[128])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      sub_100071A00(a2, v299);
      if (v300 >= 0)
        v12 = v299;
      else
        v12 = (void **)v299[0];
      v13 = *(float *)(a2 + 476);
      v14 = *(_DWORD *)(a2 + 472);
      v15 = *(_DWORD *)(a2 + 128);
      v16 = *(_DWORD *)(a2 + 132);
      v17 = *(_DWORD *)(a2 + 136);
      *(_DWORD *)buf = 68291331;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v291 = 2081;
      *(_QWORD *)v292 = v12;
      *(_WORD *)&v292[8] = 1026;
      *(_DWORD *)&v292[10] = v15;
      *(_WORD *)&v292[14] = 2050;
      *(double *)&v292[16] = v13;
      *(_WORD *)v293 = 1026;
      *(_DWORD *)&v293[2] = v14;
      *(_WORD *)&v293[6] = 1026;
      *(_DWORD *)&v293[8] = v16;
      *(_WORD *)v294 = 1026;
      *(_DWORD *)&v294[2] = v17;
      *(_WORD *)v295 = 1026;
      *(_DWORD *)&v295[2] = a3;
      *(_WORD *)v296 = 2050;
      *(double *)&v296[2] = v9;
      v297 = 1026;
      v298 = a4;
      v18 = v11;
      v19 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      sub_100071A00(a2, v299);
      if (v300 >= 0)
        v21 = v299;
      else
        v21 = (void **)v299[0];
      v22 = *(float *)(a2 + 476);
      v23 = *(_DWORD *)(a2 + 472);
      v24 = *(_DWORD *)(a2 + 128);
      v25 = *(_DWORD *)(a2 + 132);
      v26 = *(_DWORD *)(a2 + 136);
      *(_DWORD *)buf = 68291331;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v291 = 2081;
      *(_QWORD *)v292 = v21;
      *(_WORD *)&v292[8] = 1026;
      *(_DWORD *)&v292[10] = v24;
      *(_WORD *)&v292[14] = 2050;
      *(double *)&v292[16] = v22;
      *(_WORD *)v293 = 1026;
      *(_DWORD *)&v293[2] = v23;
      *(_WORD *)&v293[6] = 1026;
      *(_DWORD *)&v293[8] = v25;
      *(_WORD *)v294 = 1026;
      *(_DWORD *)&v294[2] = v26;
      *(_WORD *)v295 = 1026;
      *(_DWORD *)&v295[2] = a3;
      *(_WORD *)v296 = 2050;
      *(double *)&v296[2] = v9;
      v297 = 1026;
      v298 = a4;
      v18 = v20;
      v19 = OS_LOG_TYPE_DEBUG;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #GnssAssistancePosition,handlePositionAssistance\", \"location,\":%{private, location:escape_only}s, \"integrity\":%{public}d, \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d, \"referenceFrame\":%{public}d, \"rawReferenceFrame\":%{public}d, \"isCpiCandidate\":%{public}d, \"age\":\"%{public}.1f\", \"isExternalLocationHandling\":%{public}d}", buf, 0x54u);
      if (v300 < 0)
        operator delete(v299[0]);
    }
  }
  if (*(_DWORD *)(a2 + 96))
    v27 = 1;
  else
    v27 = *(_BYTE *)(a2 + 516) == 0;
  v28 = !v27;
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (v7[128])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v36 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 68289026;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,hunc invalid\"}";
      v37 = v36;
      v38 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v41 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        return;
      *(_DWORD *)buf = 68289026;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,hunc invalid\"}";
      v37 = v41;
      v38 = OS_LOG_TYPE_DEBUG;
    }
    v42 = 18;
    goto LABEL_129;
  }
  v29 = sub_10013E154(a1);
  v30 = v29;
  v31 = *(_DWORD *)(a2 + 96);
  if ((v31 == 11 || v31 == 4) && !v7[128] && ((v29 & 1) != 0 || *(_BYTE *)(a1 + 1571)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v48 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    v49 = v7[128];
    v50 = *(unsigned __int8 *)(a1 + 1571);
    *(_DWORD *)buf = 68289794;
    v288 = 0;
    v289 = 2082;
    v290 = "";
    v291 = 1026;
    *(_DWORD *)v292 = v49;
    *(_WORD *)&v292[4] = 1026;
    *(_DWORD *)&v292[6] = v30;
    *(_WORD *)&v292[10] = 1026;
    *(_DWORD *)&v292[12] = v50;
    v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,ignoring wifi location assistance in tunnel or a"
          "irborne\", \"InEmergency\":%{public}d, \"InTunnel\":%{public}d, \"IsAirborne\":%{public}d}";
    v37 = v48;
    v38 = OS_LOG_TYPE_DEBUG;
    v42 = 36;
    goto LABEL_129;
  }
  if (*(double *)(a1 + 6428) > 0.0)
  {
    v32 = 3080;
    if (a3)
      v32 = 3236;
    if (sub_10013E378(a1, a2, a1 + v32 + 1576))
    {
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v33 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          return;
        v34 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)buf = 68289282;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v291 = 1026;
        *(_DWORD *)v292 = v34;
        v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isCellOverridingRecentWifi\", \"location.type\":%{public}d}";
LABEL_102:
        v37 = v33;
        v38 = OS_LOG_TYPE_DEFAULT;
LABEL_128:
        v42 = 24;
        goto LABEL_129;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v51 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        return;
      v53 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 68289282;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v291 = 1026;
      *(_DWORD *)v292 = v53;
      v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isCellOverridingRecentWifi\", \"location.type\":%{public}d}";
      goto LABEL_127;
    }
  }
  if (a3)
    v39 = a1 + 4812;
  else
    v39 = a1 + 4656;
  v285 = v39;
  if (sub_10013E8F4(a1, a2, v39))
  {
    if (v7[128])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v33 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return;
      v40 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 68289282;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v291 = 1026;
      *(_DWORD *)v292 = v40;
      v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isWifiOverridingRecentPipeline\", \"location.t"
            "ype\":%{public}d}";
      goto LABEL_102;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v51 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    v52 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)buf = 68289282;
    v288 = 0;
    v289 = 2082;
    v290 = "";
    v291 = 1026;
    *(_DWORD *)v292 = v52;
    v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, validate,drop,isWifiOverridingRecentPipeline\", \"location.type\":%{public}d}";
LABEL_127:
    v37 = v51;
    v38 = OS_LOG_TYPE_DEBUG;
    goto LABEL_128;
  }
  if (*v7)
  {
    v43 = sub_1001FC7BC(a1 + 10744, a1 + 10904);
    if (v43 < 0.0 || v43 > 10.0)
    {
      v44 = *(void ***)(a1 + 8176);
      v45 = *(_QWORD *)(a1 + 8184);
      *(_QWORD *)(a1 + 8208) = 0;
      v46 = v45 - (_QWORD)v44;
      if (v46 >= 0x11)
      {
        do
        {
          operator delete(*v44);
          v44 = (void **)(*(_QWORD *)(a1 + 8176) + 8);
          *(_QWORD *)(a1 + 8176) = v44;
          v46 = *(_QWORD *)(a1 + 8184) - (_QWORD)v44;
        }
        while (v46 > 0x10);
      }
      if (v46 >> 3 == 1)
      {
        v47 = 256;
        goto LABEL_79;
      }
      if (v46 >> 3 == 2)
      {
        v47 = 512;
LABEL_79:
        *(_QWORD *)(a1 + 8200) = v47;
      }
    }
  }
  if (*(double *)(a2 + 44) >= 0.0 && *(double *)(a2 + 52) > 0.0)
  {
    sub_100EB2A54(a1 + 10744, a2);
    sub_1000D796C((_QWORD *)(a1 + 8168), (double *)(a2 + 44));
    v54 = *(_QWORD *)(a1 + 8208);
    if (v54 >= 0x15)
    {
      v55 = *(_QWORD *)(a1 + 8200);
      *(_QWORD *)(a1 + 8208) = v54 - 1;
      *(_QWORD *)(a1 + 8200) = v55 + 1;
      sub_10047F604(a1 + 8168, 1);
    }
    if (v7[128])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v56 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v57 = v56;
        v58 = OS_LOG_TYPE_DEFAULT;
LABEL_93:
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,valid speed\"}", buf, 0x12u);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v59 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v57 = v59;
        v58 = OS_LOG_TYPE_DEBUG;
        goto LABEL_93;
      }
    }
  }
  if (v9 <= 60.0 && v9 >= 0.0)
    goto LABEL_96;
  if (*(double *)(a2 + 20) < 500.0)
  {
    *(_QWORD *)(a2 + 20) = 0x407F400000000000;
    if (v7[128])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v61 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        sub_100071A00(a2, v299);
        if (v300 >= 0)
          v62 = v299;
        else
          v62 = (void **)v299[0];
        *(_DWORD *)buf = 68289283;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v291 = 2081;
        *(_QWORD *)v292 = v62;
        v63 = v61;
        v64 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_138;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v71 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        sub_100071A00(a2, v299);
        if (v300 >= 0)
          v72 = v299;
        else
          v72 = (void **)v299[0];
        *(_DWORD *)buf = 68289283;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v291 = 2081;
        *(_QWORD *)v292 = v72;
        v63 = v71;
        v64 = OS_LOG_TYPE_DEBUG;
LABEL_138:
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,hunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
        if (v300 < 0)
          operator delete(v299[0]);
      }
    }
  }
  v73 = *(double *)(a2 + 36);
  if (v73 > 0.0 && v73 < 200.0)
  {
    *(_QWORD *)(a2 + 36) = 0x4069000000000000;
    if (v7[128])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v74 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_96;
      sub_100071A00(a2, v299);
      if (v300 >= 0)
        v75 = v299;
      else
        v75 = (void **)v299[0];
      *(_DWORD *)buf = 68289283;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v291 = 2081;
      *(_QWORD *)v292 = v75;
      v76 = v74;
      v77 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v78 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_96;
      sub_100071A00(a2, v299);
      if (v300 >= 0)
        v79 = v299;
      else
        v79 = (void **)v299[0];
      *(_DWORD *)buf = 68289283;
      v288 = 0;
      v289 = 2082;
      v290 = "";
      v291 = 2081;
      *(_QWORD *)v292 = v79;
      v76 = v78;
      v77 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,vunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v300 < 0)
      operator delete(v299[0]);
  }
LABEL_96:
  switch(*(_DWORD *)(a2 + 96))
  {
    case 0:
      if (!v28)
        goto LABEL_254;
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v80 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v81 = *(_QWORD *)(a2 + 76);
          *(_DWORD *)buf = 68289282;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 2050;
          *(_QWORD *)v292 = v81;
          v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, inTunnelEndPointAssistance\", \"timestamp\":\"%{public}f\"}";
          v83 = v80;
          v84 = OS_LOG_TYPE_DEFAULT;
LABEL_341:
          v142 = 28;
          goto LABEL_253;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v175 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v176 = *(_QWORD *)(a2 + 76);
          *(_DWORD *)buf = 68289282;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 2050;
          *(_QWORD *)v292 = v176;
          v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, inTunnelEndPointAssistance\", \"timestamp\":\"%{public}f\"}";
          v83 = v175;
          v84 = OS_LOG_TYPE_DEBUG;
          goto LABEL_341;
        }
      }
      goto LABEL_254;
    case 1:
    case 9:
      if (v9 >= 0.0 && v9 <= 6.0 && *(_BYTE *)(a1 + 1572))
      {
        if (v7[128])
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v65 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            sub_100071A00(a2, v299);
            if (v300 >= 0)
              v66 = v299;
            else
              v66 = (void **)v299[0];
            *(_DWORD *)buf = 68289283;
            v288 = 0;
            v289 = 2082;
            v290 = "";
            v291 = 2081;
            *(_QWORD *)v292 = v66;
            v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GPS fix\", \"location,\":%{private, location:escape_only}s}";
            v68 = v65;
            v69 = OS_LOG_TYPE_DEFAULT;
LABEL_233:
            v138 = 28;
            goto LABEL_365;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v136 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            sub_100071A00(a2, v299);
            if (v300 >= 0)
              v137 = v299;
            else
              v137 = (void **)v299[0];
            *(_DWORD *)buf = 68289283;
            v288 = 0;
            v289 = 2082;
            v290 = "";
            v291 = 2081;
            *(_QWORD *)v292 = v137;
            v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GPS fix\", \"location,\":%{private, location:escape_only}s}";
            v68 = v136;
            v69 = OS_LOG_TYPE_DEBUG;
            goto LABEL_233;
          }
        }
        return;
      }
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v91 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          goto LABEL_254;
        sub_100071A00(a2, v299);
        if (v300 >= 0)
          v92 = v299;
        else
          v92 = (void **)v299[0];
        *(_DWORD *)buf = 68289539;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v291 = 2081;
        *(_QWORD *)v292 = v92;
        *(_WORD *)&v292[8] = 2050;
        *(double *)&v292[10] = v9;
        v93 = v91;
        v94 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v139 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_254;
        sub_100071A00(a2, v299);
        if (v300 >= 0)
          v140 = v299;
        else
          v140 = (void **)v299[0];
        *(_DWORD *)buf = 68289539;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v291 = 2081;
        *(_QWORD *)v292 = v140;
        *(_WORD *)&v292[8] = 2050;
        *(double *)&v292[10] = v9;
        v93 = v139;
        v94 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, qualified GPS location back to GPS as assistance\", \"location,\":%{private, location:escape_only}s, \"age\":\"%{public}.1f\"}", buf, 0x26u);
      if (v300 < 0)
        operator delete(v299[0]);
      goto LABEL_254;
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v33 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v60 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)buf = 68289282;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 1026;
          *(_DWORD *)v292 = v60;
          v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unsupported\", \"locationType\":%{public}d}";
          goto LABEL_102;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v51 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v70 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)buf = 68289282;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 1026;
          *(_DWORD *)v292 = v70;
          v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Unsupported\", \"locationType\":%{public}d}";
          goto LABEL_127;
        }
      }
      return;
    case 3:
      *(double *)(a1 + 11608) = sub_1001FCBB4();
      if (vabdd_f64(*(double *)(a1 + 11600), Current) >= 1.0)
      {
        *(double *)(a1 + 11600) = Current;
        goto LABEL_254;
      }
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v85 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          sub_100071A00(a2, v299);
          if (v300 >= 0)
            v86 = v299;
          else
            v86 = (void **)v299[0];
          v87 = *(_QWORD *)(a1 + 11600);
          *(_DWORD *)buf = 68289539;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 2081;
          *(_QWORD *)v292 = v86;
          *(_WORD *)&v292[8] = 2050;
          *(_QWORD *)&v292[10] = v87;
          v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate accessory location\", \"location,\":%{pri"
                "vate, location:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
          goto LABEL_225;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v177 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          sub_100071A00(a2, v299);
          if (v300 >= 0)
            v180 = v299;
          else
            v180 = (void **)v299[0];
          v181 = *(_QWORD *)(a1 + 11600);
          *(_DWORD *)buf = 68289539;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 2081;
          *(_QWORD *)v292 = v180;
          *(_WORD *)&v292[8] = 2050;
          *(_QWORD *)&v292[10] = v181;
          v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate accessory location\", \"location,\":%{pri"
                "vate, location:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
          goto LABEL_363;
        }
      }
      return;
    case 6:
      v95 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 6408) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 6424) = v95;
      v96 = *(_OWORD *)(a2 + 32);
      v97 = *(_OWORD *)(a2 + 48);
      v98 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 6472) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 6488) = v98;
      *(_OWORD *)(a1 + 6440) = v96;
      *(_OWORD *)(a1 + 6456) = v97;
      v99 = *(_OWORD *)(a2 + 96);
      v100 = *(_OWORD *)(a2 + 112);
      v101 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 6548) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 6520) = v100;
      *(_OWORD *)(a1 + 6536) = v101;
      *(_OWORD *)(a1 + 6504) = v99;
      memcpy((void *)(a1 + 6568), v8, 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 7088), (uint64_t *)(a2 + 680));
      v103 = *(_OWORD *)(a2 + 712);
      v102 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 7104) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 7120) = v103;
      *(_OWORD *)(a1 + 7136) = v102;
      v105 = *(_OWORD *)(a2 + 760);
      v104 = *(_OWORD *)(a2 + 776);
      v106 = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 7152) = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 7200) = v106;
      *(_OWORD *)(a1 + 7184) = v104;
      *(_OWORD *)(a1 + 7168) = v105;
      if (a3 && a4)
      {
        v107 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 7224) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 7208) = v107;
        v108 = *(_OWORD *)(a2 + 32);
        v109 = *(_OWORD *)(a2 + 48);
        v110 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 7288) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 7272) = v110;
        *(_OWORD *)(a1 + 7256) = v109;
        *(_OWORD *)(a1 + 7240) = v108;
        v111 = *(_OWORD *)(a2 + 140);
        v112 = *(_OWORD *)(a2 + 96);
        v113 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 7336) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 7320) = v113;
        *(_OWORD *)(a1 + 7304) = v112;
        *(_OWORD *)(a1 + 7348) = v111;
        memcpy((void *)(a1 + 7368), v8, 0x201uLL);
        sub_100349198((_QWORD *)(a1 + 7888), (uint64_t *)(a2 + 680));
        v115 = *(_OWORD *)(a2 + 712);
        v114 = *(_OWORD *)(a2 + 728);
        *(_OWORD *)(a1 + 7904) = *(_OWORD *)(a2 + 696);
        *(_OWORD *)(a1 + 7920) = v115;
        *(_OWORD *)(a1 + 7936) = v114;
        v117 = *(_OWORD *)(a2 + 760);
        v116 = *(_OWORD *)(a2 + 776);
        v118 = *(_BYTE *)(a2 + 792);
        *(_OWORD *)(a1 + 7952) = *(_OWORD *)(a2 + 744);
        *(_BYTE *)(a1 + 8000) = v118;
        *(_OWORD *)(a1 + 7984) = v116;
        *(_OWORD *)(a1 + 7968) = v117;
      }
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v119 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,cell location\"}";
          goto LABEL_206;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v141 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,cell location\"}";
          goto LABEL_251;
        }
      }
      goto LABEL_254;
    case 7:
      v120 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 8024) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 8008) = v120;
      v121 = *(_OWORD *)(a2 + 32);
      v122 = *(_OWORD *)(a2 + 48);
      v123 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 8088) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 8072) = v123;
      *(_OWORD *)(a1 + 8056) = v122;
      *(_OWORD *)(a1 + 8040) = v121;
      v124 = *(_OWORD *)(a2 + 140);
      v125 = *(_OWORD *)(a2 + 96);
      v126 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 8136) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 8120) = v126;
      *(_OWORD *)(a1 + 8104) = v125;
      *(_OWORD *)(a1 + 8148) = v124;
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v119 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289026;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,LAC location\"}";
          goto LABEL_206;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v141 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,LAC location\"}";
          goto LABEL_251;
        }
      }
      goto LABEL_254;
    case 0xA:
      if (vabdd_f64(*(double *)(a1 + 11600), Current) >= 1.0)
      {
        *(double *)(a1 + 11600) = Current;
        if (!v7[128] || *(double *)(a2 + 36) > 0.0)
        {
LABEL_254:
          v143 = *(uint64_t **)(a1 + 1552);
          if (v143)
          {
            v144 = *(_DWORD *)(a2 + 96);
            do
            {
              v145 = *((_DWORD *)v143 + 7);
              if (v144 >= v145)
              {
                if (v145 >= v144)
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_102190660);
                  v159 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                  {
                    v160 = *(_DWORD *)(a2 + 96);
                    *(_DWORD *)buf = 67109120;
                    v288 = v160;
                    _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,rejecting position assistance due to location type blocklist,%d", buf, 8u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v161 = *(_DWORD *)(a2 + 96);
                    LODWORD(v299[0]) = 67109120;
                    HIDWORD(v299[0]) = v161;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssAssistancePosition,rejecting position assistance due to location type blocklist,%d", v299);
                    v163 = (uint8_t *)v162;
                    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::handlePositionAssistance(GNSS::DaemonLocation &, BOOL, BOOL)", "%s\n", v162);
                    if (v163 != buf)
                      free(v163);
                  }
                  return;
                }
                ++v143;
              }
              v143 = (uint64_t *)*v143;
            }
            while (v143);
          }
          if (a3)
          {
            v146 = *(_DWORD *)(a2 + 96);
            if (v146 != 4 && v146 != 11)
            {
              if (v7[128])
              {
                if (v146 != 10)
                {
                  v166 = (v146 - 6) < 3 ? 1 : v28;
                  if ((v166 & 1) == 0)
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v167 = qword_1022A0078;
                    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_416;
                    sub_100071A00(a2, v299);
                    if (v300 >= 0)
                      v168 = v299;
                    else
                      v168 = (void **)v299[0];
                    *(_DWORD *)buf = 68289539;
                    v288 = 0;
                    v289 = 2082;
                    v290 = "";
                    v291 = 2081;
                    *(_QWORD *)v292 = v168;
                    *(_WORD *)&v292[8] = 1026;
                    *(_DWORD *)&v292[10] = 0;
                    v169 = v167;
                    v170 = OS_LOG_TYPE_DEFAULT;
                    goto LABEL_323;
                  }
                }
              }
              else if ((v28 & 1) == 0)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_102190660);
                v171 = qword_1022A0078;
                if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                  goto LABEL_416;
                sub_100071A00(a2, v299);
                if (v300 >= 0)
                  v172 = v299;
                else
                  v172 = (void **)v299[0];
                *(_DWORD *)buf = 68289539;
                v288 = 0;
                v289 = 2082;
                v290 = "";
                v291 = 2081;
                *(_QWORD *)v292 = v172;
                *(_WORD *)&v292[8] = 1026;
                *(_DWORD *)&v292[10] = 0;
                v169 = v171;
                v170 = OS_LOG_TYPE_DEBUG;
LABEL_323:
                _os_log_impl((void *)&_mh_execute_header, v169, v170, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not WiFi nor cell/pipelined during emergency and TunnelEndPointAssist location for CPI\", \"location,\":%{private, location:escape_only}s, \"isTunnelEndPointAssistance\":%{public}d}", buf, 0x22u);
                if (v300 < 0)
                  operator delete(v299[0]);
                goto LABEL_416;
              }
            }
          }
          if (!sub_10013E6DC(a1, a2, v285) || !sub_10013F000(a1, a2, v9))
          {
            if (v7[128])
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102190660);
              v155 = qword_1022A0078;
              if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                goto LABEL_416;
              *(_DWORD *)buf = 68289026;
              v288 = 0;
              v289 = 2082;
              v290 = "";
              v156 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,repeated or invalid position\"}";
              v157 = v155;
              v158 = OS_LOG_TYPE_DEFAULT;
            }
            else
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102190660);
              v164 = qword_1022A0078;
              if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                goto LABEL_416;
              *(_DWORD *)buf = 68289026;
              v288 = 0;
              v289 = 2082;
              v290 = "";
              v156 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,repeated or invalid position\"}";
              v157 = v164;
              v158 = OS_LOG_TYPE_DEBUG;
            }
            v165 = 18;
LABEL_301:
            _os_log_impl((void *)&_mh_execute_header, v157, v158, v156, buf, v165);
LABEL_416:
            if (v7[128])
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102190660);
              v209 = qword_1022A0078;
              if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                return;
              v210 = *(_DWORD *)(a2 + 96);
              v211 = *(_QWORD *)(a2 + 4);
              v212 = *(_QWORD *)(a2 + 12);
              v213 = *(_QWORD *)(a2 + 28);
              v214 = *(_DWORD *)(a2 + 84);
              *(_DWORD *)buf = 68290307;
              v288 = 0;
              v289 = 2082;
              v290 = "";
              v291 = 1026;
              *(_DWORD *)v292 = v210;
              *(_WORD *)&v292[4] = 2049;
              *(_QWORD *)&v292[6] = v211;
              *(_WORD *)&v292[14] = 2049;
              *(_QWORD *)&v292[16] = v212;
              *(_WORD *)v293 = 2050;
              *(_QWORD *)&v293[2] = v213;
              *(_WORD *)&v293[10] = 1026;
              *(_DWORD *)v294 = v214;
              v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding location\", \"type\":%{public}d, \""
                    "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"conf\":%{public}d}";
              v37 = v209;
              v38 = OS_LOG_TYPE_DEFAULT;
            }
            else
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_102190660);
              v215 = qword_1022A0078;
              if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                return;
              v216 = *(_DWORD *)(a2 + 96);
              v217 = *(_QWORD *)(a2 + 4);
              v218 = *(_QWORD *)(a2 + 12);
              v219 = *(_QWORD *)(a2 + 28);
              v220 = *(_DWORD *)(a2 + 84);
              *(_DWORD *)buf = 68290307;
              v288 = 0;
              v289 = 2082;
              v290 = "";
              v291 = 1026;
              *(_DWORD *)v292 = v216;
              *(_WORD *)&v292[4] = 2049;
              *(_QWORD *)&v292[6] = v217;
              *(_WORD *)&v292[14] = 2049;
              *(_QWORD *)&v292[16] = v218;
              *(_WORD *)v293 = 2050;
              *(_QWORD *)&v293[2] = v219;
              *(_WORD *)&v293[10] = 1026;
              *(_DWORD *)v294 = v220;
              v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding location\", \"type\":%{public}d, \""
                    "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"conf\":%{public}d}";
              v37 = v215;
              v38 = OS_LOG_TYPE_DEBUG;
            }
            v42 = 60;
            goto LABEL_129;
          }
          if (*(double *)(a1 + 5628) > 0.0)
          {
            v148 = sub_1001FC7BC(a1 + 5608, a1 + 5768);
            if (v148 >= 0.0)
              v149 = v28;
            else
              v149 = 0;
            if (v149 == 1 && v148 < 3.0)
            {
              if (v7[128])
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_102190660);
                v150 = qword_1022A0078;
                if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_384;
                sub_100071A00(a2, v299);
                if (v300 >= 0)
                  v151 = v299;
                else
                  v151 = (void **)v299[0];
                *(_DWORD *)buf = 68289539;
                v288 = 0;
                v289 = 2082;
                v290 = "";
                v291 = 2081;
                *(_QWORD *)v292 = v151;
                *(_WORD *)&v292[8] = 2050;
                *(double *)&v292[10] = v148;
                v152 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding tunnel end point assistance,as G"
                       "NSS is still fresh\", \"location,\":%{private, location:escape_only}s, \"gpsAge\":\"%{public}f\"}";
                v153 = v150;
                v154 = OS_LOG_TYPE_DEFAULT;
              }
              else
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_102190660);
                v191 = qword_1022A0078;
                if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                  goto LABEL_384;
                sub_100071A00(a2, v299);
                if (v300 >= 0)
                  v192 = v299;
                else
                  v192 = (void **)v299[0];
                *(_DWORD *)buf = 68289539;
                v288 = 0;
                v289 = 2082;
                v290 = "";
                v291 = 2081;
                *(_QWORD *)v292 = v192;
                *(_WORD *)&v292[8] = 2050;
                *(double *)&v292[10] = v148;
                v152 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not feeding tunnel end point assistance,as G"
                       "NSS is still fresh\", \"location,\":%{private, location:escape_only}s, \"gpsAge\":\"%{public}f\"}";
                v153 = v191;
                v154 = OS_LOG_TYPE_DEBUG;
              }
              v193 = 38;
LABEL_382:
              _os_log_impl((void *)&_mh_execute_header, v153, v154, v152, buf, v193);
              if (v300 < 0)
                operator delete(v299[0]);
LABEL_384:
              v194 = 1;
LABEL_393:
              if (!v7[128] || *(double *)(a2 + 36) > 0.0)
              {
LABEL_415:
                if ((v194 & 1) != 0)
                  goto LABEL_416;
LABEL_450:
                v236 = sub_10013EAEC(a1, a2);
                if (v236 != -1)
                {
                  if (v7[128])
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v237 = qword_1022A0078;
                    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_469;
                    v238 = *(_DWORD *)(a2 + 96);
                    v239 = *(_QWORD *)(a2 + 4);
                    v240 = *(_QWORD *)(a2 + 12);
                    v241 = *(_QWORD *)(a2 + 28);
                    v242 = *(_DWORD *)(a2 + 84);
                    v243 = (int)*(double *)(a2 + 36);
                    *(_DWORD *)buf = 68291075;
                    v288 = 0;
                    v289 = 2082;
                    v290 = "";
                    v291 = 1026;
                    *(_DWORD *)v292 = v238;
                    *(_WORD *)&v292[4] = 2049;
                    *(_QWORD *)&v292[6] = v239;
                    *(_WORD *)&v292[14] = 2049;
                    *(_QWORD *)&v292[16] = v240;
                    *(_WORD *)v293 = 2050;
                    *(_QWORD *)&v293[2] = v241;
                    *(_WORD *)&v293[10] = 1026;
                    *(_DWORD *)v294 = v242;
                    *(_WORD *)&v294[4] = 1026;
                    *(_DWORD *)v295 = a3;
                    *(_WORD *)&v295[4] = 1026;
                    *(_DWORD *)v296 = v236;
                    *(_WORD *)&v296[4] = 1026;
                    *(_DWORD *)&v296[6] = v243;
                    v244 = v237;
                    v245 = OS_LOG_TYPE_DEFAULT;
                  }
                  else
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v250 = qword_1022A0078;
                    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                      goto LABEL_469;
                    v251 = *(_DWORD *)(a2 + 96);
                    v252 = *(_QWORD *)(a2 + 4);
                    v253 = *(_QWORD *)(a2 + 12);
                    v254 = *(_QWORD *)(a2 + 28);
                    v255 = *(_DWORD *)(a2 + 84);
                    v256 = (int)*(double *)(a2 + 36);
                    *(_DWORD *)buf = 68291075;
                    v288 = 0;
                    v289 = 2082;
                    v290 = "";
                    v291 = 1026;
                    *(_DWORD *)v292 = v251;
                    *(_WORD *)&v292[4] = 2049;
                    *(_QWORD *)&v292[6] = v252;
                    *(_WORD *)&v292[14] = 2049;
                    *(_QWORD *)&v292[16] = v253;
                    *(_WORD *)v293 = 2050;
                    *(_QWORD *)&v293[2] = v254;
                    *(_WORD *)&v293[10] = 1026;
                    *(_DWORD *)v294 = v255;
                    *(_WORD *)&v294[4] = 1026;
                    *(_DWORD *)v295 = a3;
                    *(_WORD *)&v295[4] = 1026;
                    *(_DWORD *)v296 = v236;
                    *(_WORD *)&v296[4] = 1026;
                    *(_DWORD *)&v296[6] = v256;
                    v244 = v250;
                    v245 = OS_LOG_TYPE_DEBUG;
                  }
                  _os_log_impl((void *)&_mh_execute_header, v244, v245, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,confidence\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"confidence\":%{public}d, \"isCpi\":%{public}d, \"verifiedConf\":%{public}d, \"altUnc\":%{public}d}", buf, 0x4Eu);
LABEL_469:
                  *(_DWORD *)(a2 + 84) = v236;
                  if (sub_10013E570(a1 + 3984, a2))
                  {
                    v257 = 1;
                    *(_BYTE *)(a1 + 3979) = 1;
                  }
                  else
                  {
                    v257 = 0;
                  }
                  *(_BYTE *)(a1 + 3977) = v257;
                  if (!a3)
                  {
                    sub_1001550DC(a1, a2, a4);
                    if (!*(_BYTE *)(a1 + 1572) && a4 && (*(_DWORD *)(a2 + 96) | 8) == 9)
                      *(_BYTE *)(a1 + 1572) = 1;
                    return;
                  }
                  sub_100015EC0(a1, a2);
                  if (v7[128])
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v258 = qword_1022A0078;
                    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                      return;
                    v259 = *(unsigned __int8 *)(a1 + 3979);
                    v260 = *(unsigned __int8 *)(a1 + 3977);
                    v261 = *(unsigned __int8 *)(a1 + 3978);
                    v262 = *(_DWORD *)(a1 + 3980);
                    *(_DWORD *)buf = 68290050;
                    v288 = 0;
                    v289 = 2082;
                    v290 = "";
                    v291 = 1026;
                    *(_DWORD *)v292 = v259;
                    *(_WORD *)&v292[4] = 1026;
                    *(_DWORD *)&v292[6] = v260;
                    *(_WORD *)&v292[10] = 1026;
                    *(_DWORD *)&v292[12] = v261;
                    *(_WORD *)&v292[16] = 1026;
                    *(_DWORD *)&v292[18] = v262;
                    v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,injected\", \"was"
                          "HELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{publi"
                          "c}d, \"heloRejectReason\":%{public}d}";
                    v37 = v258;
                    v38 = OS_LOG_TYPE_DEFAULT;
                  }
                  else
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v275 = qword_1022A0078;
                    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                      return;
                    v276 = *(unsigned __int8 *)(a1 + 3979);
                    v277 = *(unsigned __int8 *)(a1 + 3977);
                    v278 = *(unsigned __int8 *)(a1 + 3978);
                    v279 = *(_DWORD *)(a1 + 3980);
                    *(_DWORD *)buf = 68290050;
                    v288 = 0;
                    v289 = 2082;
                    v290 = "";
                    v291 = 1026;
                    *(_DWORD *)v292 = v276;
                    *(_WORD *)&v292[4] = 1026;
                    *(_DWORD *)&v292[6] = v277;
                    *(_WORD *)&v292[10] = 1026;
                    *(_DWORD *)&v292[12] = v278;
                    *(_WORD *)&v292[16] = 1026;
                    *(_DWORD *)&v292[18] = v279;
                    v35 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,injected\", \"was"
                          "HELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{publi"
                          "c}d, \"heloRejectReason\":%{public}d}";
                    v37 = v275;
                    v38 = OS_LOG_TYPE_DEBUG;
                  }
                  v42 = 42;
LABEL_129:
                  _os_log_impl((void *)&_mh_execute_header, v37, v38, v35, buf, v42);
                  return;
                }
                if (v7[128])
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_102190660);
                  v246 = qword_1022A0078;
                  if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_491;
                  sub_100071A00(a2, v299);
                  if (v300 >= 0)
                    v247 = v299;
                  else
                    v247 = (void **)v299[0];
                  *(_DWORD *)buf = 68289283;
                  v288 = 0;
                  v289 = 2082;
                  v290 = "";
                  v291 = 2081;
                  *(_QWORD *)v292 = v247;
                  v248 = v246;
                  v249 = OS_LOG_TYPE_DEFAULT;
                }
                else
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_102190660);
                  v263 = qword_1022A0078;
                  if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                    goto LABEL_491;
                  sub_100071A00(a2, v299);
                  if (v300 >= 0)
                    v264 = v299;
                  else
                    v264 = (void **)v299[0];
                  *(_DWORD *)buf = 68289283;
                  v288 = 0;
                  v289 = 2082;
                  v290 = "";
                  v291 = 2081;
                  *(_QWORD *)v292 = v264;
                  v248 = v263;
                  v249 = OS_LOG_TYPE_DEBUG;
                }
                _os_log_impl((void *)&_mh_execute_header, v248, v249, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,cell cross-check produce invalid location confidence\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
                if (v300 < 0)
                  operator delete(v299[0]);
LABEL_491:
                if (v7[128])
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_102190660);
                  v265 = qword_1022A0078;
                  if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_416;
                  v266 = *(unsigned __int8 *)(a1 + 3979);
                  v267 = *(unsigned __int8 *)(a1 + 3977);
                  v268 = *(unsigned __int8 *)(a1 + 3978);
                  v269 = *(_DWORD *)(a1 + 3980);
                  *(_DWORD *)buf = 68290050;
                  v288 = 0;
                  v289 = 2082;
                  v290 = "";
                  v291 = 1026;
                  *(_DWORD *)v292 = v266;
                  *(_WORD *)&v292[4] = 1026;
                  *(_DWORD *)&v292[6] = v267;
                  *(_WORD *)&v292[10] = 1026;
                  *(_DWORD *)&v292[12] = v268;
                  *(_WORD *)&v292[16] = 1026;
                  *(_DWORD *)&v292[18] = v269;
                  v156 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,rejected\", \"wasH"
                         "ELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{public}"
                         "d, \"heloRejectReason\":%{public}d}";
                  v157 = v265;
                  v158 = OS_LOG_TYPE_DEFAULT;
                }
                else
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_102190660);
                  v270 = qword_1022A0078;
                  if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                    goto LABEL_416;
                  v271 = *(unsigned __int8 *)(a1 + 3979);
                  v272 = *(unsigned __int8 *)(a1 + 3977);
                  v273 = *(unsigned __int8 *)(a1 + 3978);
                  v274 = *(_DWORD *)(a1 + 3980);
                  *(_DWORD *)buf = 68290050;
                  v288 = 0;
                  v289 = 2082;
                  v290 = "";
                  v291 = 1026;
                  *(_DWORD *)v292 = v271;
                  *(_WORD *)&v292[4] = 1026;
                  *(_DWORD *)&v292[6] = v272;
                  *(_WORD *)&v292[10] = 1026;
                  *(_DWORD *)&v292[12] = v273;
                  *(_WORD *)&v292[16] = 1026;
                  *(_DWORD *)&v292[18] = v274;
                  v156 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, fGnssCachedInfo.fHELOAWDData,rejected\", \"wasH"
                         "ELOInjected\":%{public}d, \"wasLastHELOInjected\":%{public}d, \"wasLastHELORejected\":%{public}"
                         "d, \"heloRejectReason\":%{public}d}";
                  v157 = v270;
                  v158 = OS_LOG_TYPE_DEBUG;
                }
                v165 = 42;
                goto LABEL_301;
              }
              if (sub_100219C74(a1 + 2376))
              {
                v195 = (double *)(a1 + 2404);
                if (*(double *)(a1 + 2404) != 0.0
                  && *(double *)(a1 + 2412) < 3000.0
                  && vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 2452)) < 10.0)
                {
                  if (v7[128])
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v196 = qword_1022A0078;
                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                    {
                      v197 = (int)*(double *)(a2 + 28);
                      v198 = (int)*(double *)(a2 + 36);
                      v199 = *(double *)(a1 + 2412);
                      v200 = (int)*v195;
                      v201 = *(_DWORD *)(a2 + 96);
                      v202 = *(_DWORD *)(a1 + 2472);
                      *(_DWORD *)buf = 68290562;
                      v288 = 0;
                      v289 = 2082;
                      v290 = "";
                      v291 = 1026;
                      *(_DWORD *)v292 = v201;
                      *(_WORD *)&v292[4] = 1026;
                      *(_DWORD *)&v292[6] = v202;
                      *(_WORD *)&v292[10] = 1026;
                      *(_DWORD *)&v292[12] = v197;
                      *(_WORD *)&v292[16] = 1026;
                      *(_DWORD *)&v292[18] = v198;
                      *(_WORD *)&v292[22] = 1026;
                      *(_DWORD *)v293 = v200;
                      *(_WORD *)&v293[4] = 1026;
                      *(_DWORD *)&v293[6] = (int)v199;
                      v203 = v196;
                      v204 = OS_LOG_TYPE_DEFAULT;
LABEL_448:
                      _os_log_impl((void *)&_mh_execute_header, v203, v204, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite altitude with prior TCP altitude\", \"location type\":%{public}d, \"last tightly coupled position type\":%{public}d, \"altPrior\":%{public}d, \"altUncPrior\":%{public}d, \"altNew\":%{public}d, \"altUncNew\":%{public}d}", buf, 0x36u);
                    }
                  }
                  else
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_102190660);
                    v229 = qword_1022A0078;
                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                    {
                      v230 = (int)*(double *)(a2 + 28);
                      v231 = (int)*(double *)(a2 + 36);
                      v232 = *(double *)(a1 + 2412);
                      v233 = (int)*v195;
                      v234 = *(_DWORD *)(a2 + 96);
                      v235 = *(_DWORD *)(a1 + 2472);
                      *(_DWORD *)buf = 68290562;
                      v288 = 0;
                      v289 = 2082;
                      v290 = "";
                      v291 = 1026;
                      *(_DWORD *)v292 = v234;
                      *(_WORD *)&v292[4] = 1026;
                      *(_DWORD *)&v292[6] = v235;
                      *(_WORD *)&v292[10] = 1026;
                      *(_DWORD *)&v292[12] = v230;
                      *(_WORD *)&v292[16] = 1026;
                      *(_DWORD *)&v292[18] = v231;
                      *(_WORD *)&v292[22] = 1026;
                      *(_DWORD *)v293 = v233;
                      *(_WORD *)&v293[4] = 1026;
                      *(_DWORD *)&v293[6] = (int)v232;
                      v203 = v229;
                      v204 = OS_LOG_TYPE_DEBUG;
                      goto LABEL_448;
                    }
                  }
                  *(_OWORD *)(a2 + 28) = *(_OWORD *)v195;
                  *(_DWORD *)(a2 + 476) = *(_DWORD *)(a1 + 2852);
                  *(_DWORD *)(a2 + 472) = *(_DWORD *)(a1 + 2848);
                  if ((v194 & 1) != 0)
                    goto LABEL_416;
                  goto LABEL_450;
                }
              }
              if (v7[128])
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_102190660);
                v205 = qword_1022A0078;
                if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_414;
                *(_DWORD *)buf = 68289026;
                v288 = 0;
                v289 = 2082;
                v290 = "";
                v206 = v205;
                v207 = OS_LOG_TYPE_DEFAULT;
              }
              else
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_102190660);
                v208 = qword_1022A0078;
                if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                  goto LABEL_414;
                *(_DWORD *)buf = 68289026;
                v288 = 0;
                v289 = 2082;
                v290 = "";
                v206 = v208;
                v207 = OS_LOG_TYPE_DEBUG;
              }
              _os_log_impl((void *)&_mh_execute_header, v206, v207, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite altitude with default invalid value\"}", buf, 0x12u);
LABEL_414:
              *(_OWORD *)(a2 + 28) = xmmword_101C2D010;
              goto LABEL_415;
            }
            if (v148 < 10.0)
            {
              if (v7[128])
              {
                if (v7[168] && (*(_DWORD *)(a2 + 84) < 0x45u || *(double *)(a2 + 20) > 100.0))
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_102190660);
                  v173 = qword_1022A0078;
                  if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_384;
                  sub_100071A00(a2, v299);
                  if (v300 >= 0)
                    v174 = v299;
                  else
                    v174 = (void **)v299[0];
                  *(_DWORD *)buf = 68289283;
                  v288 = 0;
                  v289 = 2082;
                  v290 = "";
                  v291 = 2081;
                  *(_QWORD *)v292 = v174;
                  v152 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,recent GPS low confidence\", \"location,\""
                         ":%{private, location:escape_only}s}";
                  v153 = v173;
                  v154 = OS_LOG_TYPE_DEFAULT;
                  goto LABEL_437;
                }
              }
              else if (*(_DWORD *)(a2 + 84) < 0x45u || *(double *)(a2 + 20) > 100.0)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_102190660);
                v221 = qword_1022A0078;
                if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                  goto LABEL_384;
                sub_100071A00(a2, v299);
                if (v300 >= 0)
                  v222 = v299;
                else
                  v222 = (void **)v299[0];
                *(_DWORD *)buf = 68289283;
                v288 = 0;
                v289 = 2082;
                v290 = "";
                v291 = 2081;
                *(_QWORD *)v292 = v222;
                v152 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,recent GPS low confidence\", \"location,\":%"
                       "{private, location:escape_only}s}";
                v153 = v221;
                v154 = OS_LOG_TYPE_DEBUG;
LABEL_437:
                v193 = 28;
                goto LABEL_382;
              }
            }
          }
          v194 = 0;
          goto LABEL_393;
        }
        if (sub_100219C74(a1 + 4812) && vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 4888)) < 10.0)
        {
          if (v7[128])
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
            v127 = qword_1022A0078;
            if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              goto LABEL_443;
            v128 = (int)*(double *)(a2 + 28);
            v129 = (int)*(double *)(a2 + 36);
            v130 = (int)*(double *)(a1 + 4840);
            v131 = (int)*(double *)(a1 + 4848);
            *(_DWORD *)buf = 68290050;
            v288 = 0;
            v289 = 2082;
            v290 = "";
            v291 = 1026;
            *(_DWORD *)v292 = v128;
            *(_WORD *)&v292[4] = 1026;
            *(_DWORD *)&v292[6] = v129;
            *(_WORD *)&v292[10] = 1026;
            *(_DWORD *)&v292[12] = v130;
            *(_WORD *)&v292[16] = 1026;
            *(_DWORD *)&v292[18] = v131;
            v132 = v127;
            v133 = OS_LOG_TYPE_DEFAULT;
          }
          else
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
            v223 = qword_1022A0078;
            if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              goto LABEL_443;
            v224 = (int)*(double *)(a2 + 28);
            v225 = (int)*(double *)(a2 + 36);
            v226 = (int)*(double *)(a1 + 4840);
            v227 = (int)*(double *)(a1 + 4848);
            *(_DWORD *)buf = 68290050;
            v288 = 0;
            v289 = 2082;
            v290 = "";
            v291 = 1026;
            *(_DWORD *)v292 = v224;
            *(_WORD *)&v292[4] = 1026;
            *(_DWORD *)&v292[6] = v225;
            *(_WORD *)&v292[10] = 1026;
            *(_DWORD *)&v292[12] = v226;
            *(_WORD *)&v292[16] = 1026;
            *(_DWORD *)&v292[18] = v227;
            v132 = v223;
            v133 = OS_LOG_TYPE_DEBUG;
          }
          _os_log_impl((void *)&_mh_execute_header, v132, v133, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite pipelined altitude with prior TCP altitude\", \"altPrior\":%{public}d, \"altUncPrior\":%{public}d, \"altNew\":%{public}d, \"altUncNew\":%{public}d}", buf, 0x2Au);
LABEL_443:
          *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 4840);
          *(_DWORD *)(a2 + 476) = *(_DWORD *)(a1 + 5284);
          v228 = *(_DWORD *)(a1 + 5280);
LABEL_512:
          *(_DWORD *)(a2 + 472) = v228;
          goto LABEL_254;
        }
        if (!sub_100219C74(a1 + 7208) || vabdd_f64(*(double *)(a2 + 76), *(double *)(a1 + 7284)) >= 10.0)
        {
          if (v7[128])
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
            v119 = qword_1022A0078;
            if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              goto LABEL_254;
            *(_DWORD *)buf = 68289026;
            v288 = 0;
            v289 = 2082;
            v290 = "";
            v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Stored TCP and cell locations are not valid\"}";
LABEL_206:
            v83 = v119;
            v84 = OS_LOG_TYPE_DEFAULT;
          }
          else
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
            v141 = qword_1022A0078;
            if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              goto LABEL_254;
            *(_DWORD *)buf = 68289026;
            v288 = 0;
            v289 = 2082;
            v290 = "";
            v82 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Stored TCP and cell locations are not valid\"}";
LABEL_251:
            v83 = v141;
            v84 = OS_LOG_TYPE_DEBUG;
          }
          v142 = 18;
LABEL_253:
          _os_log_impl((void *)&_mh_execute_header, v83, v84, v82, buf, v142);
          goto LABEL_254;
        }
        if (v7[128])
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v184 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            goto LABEL_511;
          v185 = (int)*(double *)(a2 + 28);
          v186 = (int)*(double *)(a2 + 36);
          v187 = (int)*(double *)(a1 + 7236);
          v188 = (int)*(double *)(a1 + 7244);
          *(_DWORD *)buf = 68290050;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 1026;
          *(_DWORD *)v292 = v185;
          *(_WORD *)&v292[4] = 1026;
          *(_DWORD *)&v292[6] = v186;
          *(_WORD *)&v292[10] = 1026;
          *(_DWORD *)&v292[12] = v187;
          *(_WORD *)&v292[16] = 1026;
          *(_DWORD *)&v292[18] = v188;
          v189 = v184;
          v190 = OS_LOG_TYPE_DEFAULT;
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v280 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            goto LABEL_511;
          v281 = (int)*(double *)(a2 + 28);
          v282 = (int)*(double *)(a2 + 36);
          v283 = (int)*(double *)(a1 + 7236);
          v284 = (int)*(double *)(a1 + 7244);
          *(_DWORD *)buf = 68290050;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 1026;
          *(_DWORD *)v292 = v281;
          *(_WORD *)&v292[4] = 1026;
          *(_DWORD *)&v292[6] = v282;
          *(_WORD *)&v292[10] = 1026;
          *(_DWORD *)&v292[12] = v283;
          *(_WORD *)&v292[16] = 1026;
          *(_DWORD *)&v292[18] = v284;
          v189 = v280;
          v190 = OS_LOG_TYPE_DEBUG;
        }
        _os_log_impl((void *)&_mh_execute_header, v189, v190, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Overwrite pipelined altitude with prior cell location altitude\", \"altPrior\":%{public}d, \"altUncPrior\":%{public}d, \"altNew\":%{public}d, \"altUncNew\":%{public}d}", buf, 0x2Au);
LABEL_511:
        *(_OWORD *)(a2 + 28) = *(_OWORD *)(a1 + 7236);
        *(_DWORD *)(a2 + 476) = *(_DWORD *)(a1 + 7684);
        v228 = *(_DWORD *)(a1 + 7680);
        goto LABEL_512;
      }
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v85 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          return;
        sub_100071A00(a2, v299);
        if (v300 >= 0)
          v88 = v299;
        else
          v88 = (void **)v299[0];
        v89 = *(_QWORD *)(a1 + 11600);
        *(_DWORD *)buf = 68289539;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v291 = 2081;
        *(_QWORD *)v292 = v88;
        *(_WORD *)&v292[8] = 2050;
        *(_QWORD *)&v292[10] = v89;
        v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate pipe location\", \"location,\":%{private, l"
              "ocation:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
LABEL_225:
        v68 = v85;
        v69 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v177 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          return;
        sub_100071A00(a2, v299);
        if (v300 >= 0)
          v178 = v299;
        else
          v178 = (void **)v299[0];
        v179 = *(_QWORD *)(a1 + 11600);
        *(_DWORD *)buf = 68289539;
        v288 = 0;
        v289 = 2082;
        v290 = "";
        v291 = 2081;
        *(_QWORD *)v292 = v178;
        *(_WORD *)&v292[8] = 2050;
        *(_QWORD *)&v292[10] = v179;
        v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate pipe location\", \"location,\":%{private, l"
              "ocation:escape_only}s, \"timeOfLastHighRateAssistance\":\"%{public}f\"}";
LABEL_363:
        v68 = v177;
        v69 = OS_LOG_TYPE_DEBUG;
      }
      v138 = 38;
LABEL_365:
      _os_log_impl((void *)&_mh_execute_header, v68, v69, v67, buf, v138);
      if (v300 < 0)
        operator delete(v299[0]);
      return;
    case 0xB:
      v90 = sub_1001FCBB4();
      if (v90 - *(double *)(a1 + 11616) >= *(double *)(a1 + 11624))
      {
        *(double *)(a1 + 11616) = v90;
        goto LABEL_254;
      }
      if (v7[128])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v85 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          sub_100071A00(a2, v299);
          if (v300 >= 0)
            v134 = v299;
          else
            v134 = (void **)v299[0];
          v135 = *(_QWORD *)(a1 + 11616);
          *(_DWORD *)buf = 68289539;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 2081;
          *(_QWORD *)v292 = v134;
          *(_WORD *)&v292[8] = 2050;
          *(_QWORD *)&v292[10] = v135;
          v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate WiFi2 location\", \"location,\":%{private"
                ", location:escape_only}s, \"machTimeOfLastHighRateWifi2Assistance\":\"%{public}f\"}";
          goto LABEL_225;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v177 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          sub_100071A00(a2, v299);
          if (v300 >= 0)
            v182 = v299;
          else
            v182 = (void **)v299[0];
          v183 = *(_QWORD *)(a1 + 11616);
          *(_DWORD *)buf = 68289539;
          v288 = 0;
          v289 = 2082;
          v290 = "";
          v291 = 2081;
          *(_QWORD *)v292 = v182;
          *(_WORD *)&v292[8] = 2050;
          *(_QWORD *)&v292[10] = v183;
          v67 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,high rate WiFi2 location\", \"location,\":%{private"
                ", location:escape_only}s, \"machTimeOfLastHighRateWifi2Assistance\":\"%{public}f\"}";
          goto LABEL_363;
        }
      }
      return;
    default:
      goto LABEL_254;
  }
}

uint64_t sub_10013E154(uint64_t a1)
{
  double v2;
  uint64_t v3;
  NSObject *v5;
  int v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;

  v2 = sub_1001FCBB4();
  if (vabdd_f64(v2, *(double *)(a1 + 4608)) > 10.0)
    return 0;
  if (*(_BYTE *)(a1 + 4650))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v5 = qword_1022A0078;
    v3 = 1;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v6 = *(unsigned __int8 *)(a1 + 4650);
      v7 = *(double *)(a1 + 4624);
      v13 = 68289795;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v6;
      v19 = 2049;
      v20 = v7;
      v21 = 2049;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, TBA\", \"isTunnel\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\"}", (uint8_t *)&v13, 0x2Cu);
    }
  }
  else
  {
    v8 = *(double *)(a1 + 11664);
    if (v8 <= 0.0)
      return 0;
    v9 = vabdd_f64(v2, v8);
    v10 = *(_BYTE *)(a1 + 4648) && v9 < 10.0;
    if (!v10 || *(_DWORD *)(a1 + 11556) > 1u)
      return 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a1 + 11556);
      v13 = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v12;
      v19 = 2050;
      v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,TBA,Current location close to tunnel\", \"gnssContent\":%{public}d, \"gnssContentAge\":\"%{public}.1f\"}", (uint8_t *)&v13, 0x22u);
    }
    return 1;
  }
  return v3;
}

uint64_t sub_10013E378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;

  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFFE) != 6)
    return 0;
  v4 = *(_DWORD *)(a3 + 96);
  if (v4 == 4 || v4 == 11)
  {
    if (*(_DWORD *)(a3 + 84) >= 0x45u)
      goto LABEL_11;
    return 0;
  }
  v6 = 0;
  if (v4 == 10 && *(_DWORD *)(a3 + 84) > 0x44u)
  {
LABEL_11:
    if (*(double *)(a3 + 20) > 0.0 && vabdd_f64(*(double *)(a2 + 76), *(double *)(a3 + 76)) < 1.0)
    {
      if (*(_BYTE *)(a1 + 11672))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v7 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          return 1;
        v8 = *(_DWORD *)(a2 + 96);
        v14 = 68289282;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        v18 = 1026;
        v19 = v8;
        v9 = v7;
        v10 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v12 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          return 1;
        v13 = *(_DWORD *)(a2 + 96);
        v14 = 68289282;
        v15 = 0;
        v16 = 2082;
        v17 = "";
        v18 = 1026;
        v19 = v13;
        v9 = v12;
        v10 = OS_LOG_TYPE_DEBUG;
      }
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Ignoring location assistance, recentGoodWifi\", \"location.type\":%{public}d}", (uint8_t *)&v14, 0x18u);
      return 1;
    }
    return 0;
  }
  return v6;
}

BOOL sub_10013E570(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(double *)(a1 + 4) == *(double *)(a2 + 4)
      && *(double *)(a1 + 12) == *(double *)(a2 + 12)
      && *(double *)(a1 + 20) == *(double *)(a2 + 20)
      && *(double *)(a1 + 28) == *(double *)(a2 + 28)
      && *(double *)(a1 + 36) == *(double *)(a2 + 36)
      && *(double *)(a1 + 44) == *(double *)(a2 + 44)
      && *(double *)(a1 + 52) == *(double *)(a2 + 52)
      && *(double *)(a1 + 60) == *(double *)(a2 + 60)
      && *(double *)(a1 + 68) == *(double *)(a2 + 68)
      && *(double *)(a1 + 76) == *(double *)(a2 + 76)
      && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84)
      && *(double *)(a1 + 88) == *(double *)(a2 + 88)
      && *(_DWORD *)(a1 + 96) == *(_DWORD *)(a2 + 96)
      && *(double *)(a1 + 100) == *(double *)(a2 + 100)
      && *(double *)(a1 + 108) == *(double *)(a2 + 108)
      && *(double *)(a1 + 116) == *(double *)(a2 + 116)
      && *(_DWORD *)(a1 + 124) == *(_DWORD *)(a2 + 124)
      && *(_DWORD *)(a1 + 128) == *(_DWORD *)(a2 + 128)
      && *(_DWORD *)(a1 + 132) == *(_DWORD *)(a2 + 132)
      && *(_DWORD *)(a1 + 136) == *(_DWORD *)(a2 + 136)
      && *(_DWORD *)(a1 + 140) == *(_DWORD *)(a2 + 140);
}

BOOL sub_10013E6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4;
  _BOOL8 result;
  double v6;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  _BOOL4 v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;

  if (*(_BYTE *)(a2 + 516))
    v4 = *(_DWORD *)(a2 + 96) == 0;
  else
    v4 = 0;
  result = 1;
  if (!v4 && *(double *)(a3 + 20) > 0.0)
  {
    v6 = *(double *)(a2 + 76) - *(double *)(a3 + 76);
    if (v6 >= 0.0 && v6 < 6.0)
    {
      v8 = *(double *)(a2 + 36);
      v9 = *(double *)(a3 + 36);
      if ((v8 <= 0.0 || v9 >= 0.0)
        && (v8 <= 0.0 || v9 <= 0.0 || vabdd_f64(*(double *)(a2 + 28), *(double *)(a3 + 28)) <= 1.0)
        && *(_DWORD *)(a2 + 84) <= *(_DWORD *)(a3 + 84))
      {
        sub_10011E258((double *)(a1 + 11560), a2, a3);
        if (v10 > 1.0)
          return 1;
        if (*(_BYTE *)(a1 + 11672))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v11 = qword_1022A0078;
          v12 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
          result = 0;
          if (v12)
          {
            v16 = 68289026;
            v17 = 0;
            v18 = 2082;
            v19 = "";
            v13 = v11;
            v14 = OS_LOG_TYPE_DEFAULT;
LABEL_28:
            _os_log_impl((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, same location\"}", (uint8_t *)&v16, 0x12u);
            return 0;
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v15 = qword_1022A0078;
          result = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
          if (result)
          {
            v16 = 68289026;
            v17 = 0;
            v18 = 2082;
            v19 = "";
            v13 = v15;
            v14 = OS_LOG_TYPE_DEBUG;
            goto LABEL_28;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10013E8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  uint64_t v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 96);
  if (v3 != 11 && v3 != 4)
    return 0;
  result = 0;
  if (*(_DWORD *)(a3 + 96) == 10 && *(double *)(a3 + 20) > 0.0)
  {
    if (vabdd_f64(*(double *)(a2 + 76), *(double *)(a3 + 76)) >= 6.0
      || sub_100219C74(a2) && *(double *)(a3 + 36) > *(double *)(a2 + 36))
    {
      return 0;
    }
    if (*(_BYTE *)(a1 + 11672))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v9 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return 1;
      v10 = *(_DWORD *)(a2 + 96);
      v15 = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v10;
      v11 = v9;
      v12 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v13 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        return 1;
      v14 = *(_DWORD *)(a2 + 96);
      v15 = 68289282;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v14;
      v11 = v13;
      v12 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Ignoring location assistance, recentGoodPipeline\", \"location.type\":%{public}d}", (uint8_t *)&v15, 0x18u);
    return 1;
  }
  return result;
}

uint64_t sub_10013EAEC(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  BOOL v8;
  int v9;
  uint64_t v11;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  uint32_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  _BYTE v36[10];
  double v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;

  v2 = (_BYTE *)(a1 + 11672);
  v3 = *(unsigned int *)(a2 + 84);
  v4 = *(_DWORD *)(a2 + 96);
  if (v4)
    v5 = 1;
  else
    v5 = *(_BYTE *)(a2 + 516) == 0;
  if (v5)
  {
    if (*(_BYTE *)(a1 + 11672))
    {
      v8 = v4 > 0xA;
      v9 = (1 << v4) & 0x450;
      if (v8 || v9 == 0)
        goto LABEL_33;
      if ((sub_100182290(a2) & 1) != 0)
      {
        v11 = sub_100EB1058(a1, a2);
        return sub_100EB23B0(a1, v11, a2);
      }
      if (*v2)
      {
LABEL_33:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v21 = qword_1022A0078;
        v20 = 0xFFFFFFFFLL;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          return v20;
        v22 = *(_DWORD *)(a2 + 96);
        v31 = 68289794;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 1026;
        *(_DWORD *)v36 = v22;
        *(_WORD *)&v36[4] = 1026;
        *(_DWORD *)&v36[6] = v3;
        LOWORD(v37) = 1026;
        *(_DWORD *)((char *)&v37 + 2) = -1;
        v23 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid assistance during emergency\", \"location type\":%"
              "{public}d, \"conf\":%{public}d, \"reduced conf\":%{public}d}";
        v24 = v21;
        v25 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v29 = qword_1022A0078;
        v20 = 0xFFFFFFFFLL;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          return v20;
        v30 = *(_DWORD *)(a2 + 96);
        v31 = 68289794;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 1026;
        *(_DWORD *)v36 = v30;
        *(_WORD *)&v36[4] = 1026;
        *(_DWORD *)&v36[6] = v3;
        LOWORD(v37) = 1026;
        *(_DWORD *)((char *)&v37 + 2) = -1;
        v23 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid assistance during emergency\", \"location type\":%"
              "{public}d, \"conf\":%{public}d, \"reduced conf\":%{public}d}";
        v24 = v29;
        v25 = OS_LOG_TYPE_DEBUG;
      }
      v28 = 36;
      goto LABEL_50;
    }
    if (v4 != 4 || *(double *)(a2 + 20) <= 0.0 || v3 < 0x46)
      return v3;
    if ((sub_100182290(a1 + 6408) & 1) != 0)
    {
      v16 = *(double *)(a1 + 6428);
      sub_10011E258((double *)(a1 + 11560), a2, a1 + 6408);
      v18 = v17;
      if (v17 >= 0.0 && v17 <= v16)
        return v3;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v26 = qword_1022A0078;
      v16 = -1.0;
      v18 = -1.0;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_43;
      v31 = 68289026;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, No previous cell location stored\"}", (uint8_t *)&v31, 0x12u);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
LABEL_43:
    v27 = qword_1022A0078;
    v20 = 69;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return v20;
    v31 = 68290050;
    v33 = 2082;
    v32 = 0;
    v34 = "";
    v35 = 2050;
    *(double *)v36 = v18;
    *(_WORD *)&v36[8] = 2050;
    v37 = v16;
    v38 = 1026;
    v39 = v3;
    v40 = 1026;
    v41 = 69;
    v23 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition\", \"distFromWifiToCellOrLAC\":\"%{public}f\", \"crossCheckThre"
          "shold\":\"%{public}f\", \"confPrior\":%{public}d, \"reducedConf\":%{public}d}";
    v24 = v27;
    v25 = OS_LOG_TYPE_DEBUG;
    v28 = 50;
LABEL_50:
    _os_log_impl((void *)&_mh_execute_header, v24, v25, v23, (uint8_t *)&v31, v28);
    return v20;
  }
  if (*(_BYTE *)(a1 + 11672))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v13 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      return v3;
    v31 = 68289026;
    v32 = 0;
    v33 = 2082;
    v34 = "";
    v14 = v13;
    v15 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v19 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return v3;
    v31 = 68289026;
    v32 = 0;
    v33 = 2082;
    v34 = "";
    v14 = v19;
    v15 = OS_LOG_TYPE_DEBUG;
  }
  _os_log_impl((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, adjust,TEPA confidence\"}", (uint8_t *)&v31, 0x12u);
  return v3;
}

BOOL sub_10013F000(uint64_t a1, uint64_t a2, double a3)
{
  double v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  int v50;
  int v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v6 = *(double *)(a2 + 20);
  v7 = v6 > 0.0;
  if (v6 <= 0.0)
  {
    if (*(_BYTE *)(a1 + 11672))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v8 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        goto LABEL_12;
      v9 = *(_QWORD *)(a2 + 20);
      v50 = 68289282;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v54 = 2050;
      v55 = v9;
      v10 = v8;
      v11 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v12 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_12;
      v13 = *(_QWORD *)(a2 + 20);
      v50 = 68289282;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v54 = 2050;
      v55 = v13;
      v10 = v12;
      v11 = OS_LOG_TYPE_DEBUG;
    }
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning invalid assistance location\", \"horizontal accuracy\":\"%{public}f\"}", (uint8_t *)&v50, 0x1Cu);
LABEL_12:
    v6 = *(double *)(a2 + 20);
  }
  if (v6 <= 200000.0)
    goto LABEL_25;
  if (!*(_BYTE *)(a1 + 11672))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v18 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      goto LABEL_24;
    v19 = *(_QWORD *)(a2 + 20);
    v50 = 68289538;
    v51 = 0;
    v52 = 2082;
    v53 = "";
    v54 = 2050;
    v55 = v19;
    v56 = 2050;
    v57 = 0x41086A0000000000;
    v16 = v18;
    v17 = OS_LOG_TYPE_DEBUG;
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning invalid assistance location\", \"horizontalAccuracy\":\"%{public}f\", \"maximumAccuracy\":\"%{public}f\"}", (uint8_t *)&v50, 0x26u);
LABEL_24:
    v7 = 0;
    goto LABEL_25;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v14 = qword_1022A0078;
  v7 = 0;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(_QWORD *)(a2 + 20);
    v50 = 68289538;
    v51 = 0;
    v52 = 2082;
    v53 = "";
    v54 = 2050;
    v55 = v15;
    v56 = 2050;
    v57 = 0x41086A0000000000;
    v16 = v14;
    v17 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_23;
  }
LABEL_25:
  if (a3 >= 0.0)
    goto LABEL_37;
  if (!*(_BYTE *)(a1 + 11672))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v23 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      goto LABEL_36;
    v50 = 68289026;
    v51 = 0;
    v52 = 2082;
    v53 = "";
    v21 = v23;
    v22 = OS_LOG_TYPE_DEBUG;
LABEL_35:
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning invalid assistance location, age < 0\"}", (uint8_t *)&v50, 0x12u);
LABEL_36:
    v7 = 0;
    goto LABEL_37;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v20 = qword_1022A0078;
  v7 = 0;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v50 = 68289026;
    v51 = 0;
    v52 = 2082;
    v53 = "";
    v21 = v20;
    v22 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_35;
  }
LABEL_37:
  if (sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (!*(_BYTE *)(a1 + 11672))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v27 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_48;
      v50 = 68289026;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v25 = v27;
      v26 = OS_LOG_TYPE_DEBUG;
LABEL_47:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning invalid assistance location,null island\"}", (uint8_t *)&v50, 0x12u);
LABEL_48:
      v7 = 0;
      goto LABEL_49;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v24 = qword_1022A0078;
    v7 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v50 = 68289026;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v25 = v24;
      v26 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_47;
    }
  }
LABEL_49:
  v28 = *(double *)(a2 + 4);
  if (v28 < -90.0 || v28 > 90.0)
  {
    if (!*(_BYTE *)(a1 + 11672))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v33 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_61;
      v34 = *(_QWORD *)(a2 + 4);
      v50 = 68289283;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v54 = 2049;
      v55 = v34;
      v31 = v33;
      v32 = OS_LOG_TYPE_DEBUG;
LABEL_60:
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning invalid assistance location\", \"latitude\":\"%{private}.7f\"}", (uint8_t *)&v50, 0x1Cu);
LABEL_61:
      v7 = 0;
      goto LABEL_62;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v29 = qword_1022A0078;
    v7 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v30 = *(_QWORD *)(a2 + 4);
      v50 = 68289283;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v54 = 2049;
      v55 = v30;
      v31 = v29;
      v32 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_60;
    }
  }
LABEL_62:
  v35 = *(double *)(a2 + 12);
  if (v35 < -180.0 || v35 > 180.0)
  {
    if (!*(_BYTE *)(a1 + 11672))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v40 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        goto LABEL_74;
      v41 = *(_QWORD *)(a2 + 12);
      v50 = 68289283;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v54 = 2049;
      v55 = v41;
      v38 = v40;
      v39 = OS_LOG_TYPE_DEBUG;
LABEL_73:
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning invalid assistance location\", \"longitude\":\"%{private}.7f\"}", (uint8_t *)&v50, 0x1Cu);
LABEL_74:
      v7 = 0;
      goto LABEL_75;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v36 = qword_1022A0078;
    v7 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v37 = *(_QWORD *)(a2 + 12);
      v50 = 68289283;
      v51 = 0;
      v52 = 2082;
      v53 = "";
      v54 = 2049;
      v55 = v37;
      v38 = v36;
      v39 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_73;
    }
  }
LABEL_75:
  if (*(double *)(a2 + 36) > 0.0)
  {
    v42 = *(double *)(a2 + 28);
    if (v42 < -450.0 || v42 > 8850.0)
    {
      if (!*(_BYTE *)(a1 + 11672))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v47 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          return 0;
        v48 = *(_QWORD *)(a2 + 28);
        v50 = 68289283;
        v51 = 0;
        v52 = 2082;
        v53 = "";
        v54 = 2049;
        v55 = v48;
        v45 = v47;
        v46 = OS_LOG_TYPE_DEBUG;
LABEL_87:
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning invalid assistance location\", \"altitude\":\"%{private}.2f\"}", (uint8_t *)&v50, 0x1Cu);
        return 0;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v43 = qword_1022A0078;
      v7 = 0;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v44 = *(_QWORD *)(a2 + 28);
        v50 = 68289283;
        v51 = 0;
        v52 = 2082;
        v53 = "";
        v54 = 2049;
        v55 = v44;
        v45 = v43;
        v46 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_87;
      }
    }
  }
  return v7;
}

uint64_t sub_10013F954(uint64_t a1, unsigned int *a2)
{
  NSObject *v5;
  const char *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  NSObject *v16;
  const char *v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  __int16 v25;
  _BYTE v26[808];
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  sub_1001B3B80();
  if (*a2 > 0x16 || ((1 << *a2) & 0x400019) == 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v16 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v17 = sub_1001B49F8(*a2);
      *(_DWORD *)buf = 136446210;
      v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "@WifiLoc, miscregister, %{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v21 = qword_1022A0058;
    v22 = sub_1001B49F8(*a2);
    v27 = 136446210;
    v28 = v22;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "@WifiLoc, miscregister, %{public}s", &v27, 12);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v15);
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v6 = sub_1001B49F8(*a2);
      *(_DWORD *)buf = 0;
      v7 = sub_1001B7864(a1, (int *)buf, 1);
      *(_DWORD *)buf = 3;
      v8 = sub_1001B7864(a1, (int *)buf, 1);
      *(_DWORD *)buf = 4;
      v9 = sub_1001B7864(a1, (int *)buf, 1);
      *(_DWORD *)buf = 136446978;
      v36 = v6;
      v37 = 1026;
      v38 = v7;
      v39 = 1026;
      v40 = v8;
      v41 = 1026;
      v42 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiLogic, entry, register, notification, %{public}s, lsb, %{public}d, %{public}d, %{public}d", buf, 0x1Eu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_18;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v10 = qword_1022A0058;
    v11 = sub_1001B49F8(*a2);
    v27 = 0;
    v12 = sub_1001B7864(a1, &v27, 1);
    v27 = 3;
    v13 = sub_1001B7864(a1, &v27, 1);
    v27 = 4;
    v14 = sub_1001B7864(a1, &v27, 1);
    v27 = 136446978;
    v28 = v11;
    v29 = 1026;
    v30 = v12;
    v31 = 1026;
    v32 = v13;
    v33 = 1026;
    v34 = v14;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "@WifiLogic, entry, register, notification, %{public}s, lsb, %{public}d, %{public}d, %{public}d", &v27, 30);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v15);
  }
  if (v15 != (char *)buf)
    free(v15);
LABEL_18:
  v27 = 0;
  v18 = *a2;
  if (!*a2)
    goto LABEL_21;
  if (v18 == 22)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 24))(*(_QWORD *)(a1 + 120), 12);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120), 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120), 2);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120), 1);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 48))(*(_QWORD *)(a1 + 120), 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 48))(*(_QWORD *)(a1 + 120), 6);
    goto LABEL_29;
  }
  if (v18 == 3)
  {
LABEL_21:
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120), 0);
    if (!*a2)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 56))(*(_QWORD *)(a1 + 120), 7);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v19 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@WifiEntry, register for odometer notification", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        v25 = 0;
        LODWORD(v24) = 2;
        v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiEntry, register for odometer notification", &v25, v24);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v23);
        if (v23 != (char *)buf)
          free(v23);
      }
    }
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120), 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120), 1);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 48))(*(_QWORD *)(a1 + 120), 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 120) + 48))(*(_QWORD *)(a1 + 120), 6);
    (*(void (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 120) + 152))(*(_QWORD *)(a1 + 120), "CLWifiLocationProvider");
    *(_DWORD *)buf = *a2;
    sub_10021C7D8(&v27, (int *)buf);
    sub_100130CBC((uint64_t)v26, (uint64_t)&v27);
    sub_1001312E8(a1, (uint64_t)v26);
    sub_100126D5C((uint64_t)v26);
  }
LABEL_29:
  sub_100126D5C((uint64_t)&v27);
  return 1;
}

void sub_100140008(_Unwind_Exception *a1)
{
  sub_100126D5C((uint64_t)&STACK[0x340]);
  _Unwind_Resume(a1);
}

id sub_10014003C(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2, 0);
}

id sub_100140050(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, 0);
}

void sub_100140064(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssRefLocationCache::onLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192350);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefLocationCache::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192350);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefLocationCache::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10014023C((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10014021C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10014023C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v9;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  _BYTE v26[96];
  __int128 v27;
  __int128 v28;
  _BYTE v29[28];
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_DWORD *)(a4 + 96);
    v9 = *a3;
    *(_QWORD *)v26 = 68289538;
    *(_WORD *)&v26[8] = 2082;
    *(_QWORD *)&v26[10] = "";
    *(_WORD *)&v26[18] = 1026;
    *(_DWORD *)&v26[20] = v8;
    *(_WORD *)&v26[24] = 1026;
    *(_DWORD *)&v26[26] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Location notification received\", \"type\":%{public}d, \"notification\":%{public}d}", v26, 0x1Eu);
  }
  if (*a3 == 33 || *a3 == 5)
  {
    *(_DWORD *)v26 = 0xFFFF;
    *(_OWORD *)&v26[4] = 0uLL;
    *(_OWORD *)&v26[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v26[36] = _Q0;
    *(_OWORD *)&v26[52] = _Q0;
    *(_OWORD *)&v26[68] = _Q0;
    *(_DWORD *)&v26[84] = 0;
    v27 = 0uLL;
    *(_QWORD *)&v26[88] = 0xBFF0000000000000;
    LODWORD(v28) = 0;
    *(_QWORD *)((char *)&v28 + 4) = 0xBFF0000000000000;
    HIDWORD(v28) = 0x7FFFFFFF;
    memset(v29, 0, 25);
    sub_10012A33C(&v30);
    v15 = *(_OWORD *)(a4 + 112);
    v27 = *(_OWORD *)(a4 + 96);
    v28 = v15;
    *(_OWORD *)v29 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)&v29[12] = *(_OWORD *)(a4 + 140);
    v16 = *(_OWORD *)(a4 + 48);
    *(_OWORD *)&v26[32] = *(_OWORD *)(a4 + 32);
    *(_OWORD *)&v26[48] = v16;
    v17 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)&v26[64] = *(_OWORD *)(a4 + 64);
    *(_OWORD *)&v26[80] = v17;
    v18 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)v26 = *(_OWORD *)a4;
    *(_OWORD *)&v26[16] = v18;
    memcpy(v19, (const void *)(a4 + 160), 0x201uLL);
    sub_100349198(&v31, (uint64_t *)(a4 + 680));
    v20 = *(_OWORD *)(a4 + 776);
    v37 = *(_OWORD *)(a4 + 760);
    v38 = v20;
    v21 = *(_OWORD *)(a4 + 712);
    v33 = *(_OWORD *)(a4 + 696);
    v34 = v21;
    v22 = *(_OWORD *)(a4 + 744);
    v35 = *(_OWORD *)(a4 + 728);
    v36 = v22;
    v39 = *(_BYTE *)(a4 + 792);
    sub_10014048C(a1, (uint64_t)v26);
    v23 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_100140478(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10014048C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  double v5;
  NSObject *v6;
  _BYTE *v7;
  double v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint32_t v21;
  NSObject *v22;
  _BYTE *v23;
  double v24;
  NSObject *v25;
  _BYTE *v26;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  NSObject *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  NSObject *v48;
  _BYTE *v49;
  NSObject *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  const char *v55;
  uint8_t *v56;
  const char *v57;
  uint8_t *v58;
  uint8_t buf[4];
  _BYTE v60[14];
  __int16 v61;
  _BYTE *v62;
  __int16 v63;
  int v64;
  __int16 v65;
  double v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  _BYTE v73[12];
  __int16 v74;
  int v75;
  char v76;

  v4 = (const void *)(a2 + 160);
  v5 = sub_1001FC7BC(a2, a2 + 160);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_100071A00(a2, v73);
    v7 = v76 >= 0 ? v73 : *(_BYTE **)v73;
    v8 = *(float *)(a2 + 476);
    v9 = *(_DWORD *)(a2 + 472);
    v10 = *(_DWORD *)(a2 + 128);
    v11 = *(_DWORD *)(a2 + 132);
    v12 = *(_QWORD *)(a1 + 108);
    *(_DWORD *)buf = 68290563;
    *(_DWORD *)v60 = 0;
    *(_WORD *)&v60[4] = 2082;
    *(_QWORD *)&v60[6] = "";
    v61 = 2081;
    v62 = v7;
    v63 = 1026;
    v64 = v10;
    v65 = 2050;
    v66 = v8;
    v67 = 1026;
    v68 = v9;
    v69 = 1026;
    v70 = v11;
    v71 = 2050;
    v72 = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache\", \"location,\":%{private, location:escape_only}s, \"integrity\":%{public}d, \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d, \"referenceFrame\":%{public}d, \"cacheTimestamp\":\"%{public}.1f\"}", buf, 0x42u);
    if (v76 < 0)
      operator delete(*(void **)v73);
  }
  if (*(double *)(a2 + 20) <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v17 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v60 = 0;
    *(_WORD *)&v60[4] = 2082;
    *(_QWORD *)&v60[6] = "";
    v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,drop,hunc invalid\"}";
LABEL_33:
    v16 = v17;
    v21 = 18;
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v15, buf, v21);
    return;
  }
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) != 1 && *(_BYTE *)(a1 + 24))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v13 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(unsigned __int8 *)(a1 + 24);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v60 = 0;
      *(_WORD *)&v60[4] = 2082;
      *(_QWORD *)&v60[6] = "";
      v61 = 1026;
      LODWORD(v62) = v14;
      v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,drop,ignoring non-gps location ass"
            "istance when airborne\", \"IsAirborne\":%{public}d}";
      v16 = v13;
LABEL_28:
      v21 = 24;
      goto LABEL_34;
    }
    return;
  }
  v18 = sub_100140ED0(a1, a2);
  if ((v18 & 1) != 0)
  {
    if (v5 > 60.0 || v5 < 0.0)
    {
      if (*(double *)(a2 + 20) < 500.0)
      {
        *(_QWORD *)(a2 + 20) = 0x407F400000000000;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v22 = qword_1022A0078;
        v18 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v18)
        {
          sub_100071A00(a2, v73);
          v23 = v76 >= 0 ? v73 : *(_BYTE **)v73;
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)v60 = 0;
          *(_WORD *)&v60[4] = 2082;
          *(_QWORD *)&v60[6] = "";
          v61 = 2081;
          v62 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,adjust,hunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v76 < 0)
            operator delete(*(void **)v73);
        }
      }
      v24 = *(double *)(a2 + 36);
      if (v24 > 0.0 && v24 < 200.0)
      {
        *(_QWORD *)(a2 + 36) = 0x4069000000000000;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v25 = qword_1022A0078;
        v18 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
        if ((_DWORD)v18)
        {
          sub_100071A00(a2, v73);
          v26 = v76 >= 0 ? v73 : *(_BYTE **)v73;
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)v60 = 0;
          *(_WORD *)&v60[4] = 2082;
          *(_QWORD *)&v60[6] = "";
          v61 = 2081;
          v62 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,adjust,vunc,age lapsed\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
          if (v76 < 0)
            operator delete(*(void **)v73);
        }
      }
    }
    switch(*(_DWORD *)(a2 + 96))
    {
      case 1:
      case 9:
        v27 = *(double *)(a2 + 76);
        if (v27 - *(double *)(a1 + 992) >= 30.0 || *(double *)(a2 + 20) < *(double *)(a1 + 52))
        {
          *(double *)(a1 + 992) = v27;
          goto LABEL_66;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v50 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v51 = *(_QWORD *)(a1 + 992);
          v52 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)v60 = v51;
          *(_WORD *)&v60[8] = 1026;
          *(_DWORD *)&v60[10] = v52;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,updateReferenceLocationCache,ignoring GPS location,lastGpsTime,%{public}.1lf,type,%{public}d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102192330);
          v53 = *(_QWORD *)(a1 + 992);
          v54 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)v73 = 134349312;
          *(_QWORD *)&v73[4] = v53;
          v74 = 1026;
          v75 = v54;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,updateReferenceLocationCache,ignoring GPS location,lastGpsTime,%{public}.1lf,type,%{public}d", v73, 18);
          v56 = (uint8_t *)v55;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssRefLocationCache::updateReferenceLocationCache(GNSS::DaemonLocation &)", "%s\n", v55);
          if (v56 != buf)
            free(v56);
        }
        return;
      case 2:
      case 5:
      case 0xC:
      case 0xE:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v19 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v20 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)v60 = 0;
          *(_WORD *)&v60[4] = 2082;
          *(_QWORD *)&v60[6] = "";
          v61 = 1026;
          LODWORD(v62) = v20;
          v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,unsupported\", \"locationType\":%{public}d}";
          v16 = v19;
          goto LABEL_28;
        }
        return;
      case 3:
        if (sub_1001FC7BC(a1 + 32, a1 + 192) >= 900.0)
          goto LABEL_66;
        return;
      case 4:
      case 0xB:
        sub_10022E5D4(a1, a2);
        goto LABEL_66;
      case 6:
        v28 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 832) = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 848) = v28;
        v29 = *(_OWORD *)(a2 + 32);
        v30 = *(_OWORD *)(a2 + 48);
        v31 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 912) = v31;
        *(_OWORD *)(a1 + 864) = v29;
        *(_OWORD *)(a1 + 880) = v30;
        v32 = *(_OWORD *)(a2 + 96);
        v33 = *(_OWORD *)(a2 + 112);
        v34 = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 972) = *(_OWORD *)(a2 + 140);
        *(_OWORD *)(a1 + 944) = v33;
        *(_OWORD *)(a1 + 960) = v34;
        *(_OWORD *)(a1 + 928) = v32;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v35 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,updateReferenceLocationCache,cache,Cell location", buf, 2u);
        }
        v18 = sub_1001BFF7C(115, 2);
        if ((_DWORD)v18)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102192330);
          *(_WORD *)v73 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,updateReferenceLocationCache,cache,Cell location", v73, 2);
          v58 = (uint8_t *)v57;
          v18 = sub_100512490("Generic", 1, 0, 2, "void CLGnssRefLocationCache::updateReferenceLocationCache(GNSS::DaemonLocation &)", "%s\n", v57);
          if (v58 != buf)
            free(v58);
        }
        goto LABEL_66;
      default:
LABEL_66:
        if (v5 >= 0.0 && sub_100141578(v18, a2))
        {
          v36 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 48) = v36;
          v37 = *(_OWORD *)(a2 + 32);
          v38 = *(_OWORD *)(a2 + 48);
          v39 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 112) = v39;
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 80) = v38;
          v40 = *(_OWORD *)(a2 + 96);
          v41 = *(_OWORD *)(a2 + 112);
          v42 = *(_OWORD *)(a2 + 128);
          *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 140);
          *(_OWORD *)(a1 + 144) = v41;
          *(_OWORD *)(a1 + 160) = v42;
          *(_OWORD *)(a1 + 128) = v40;
          memcpy((void *)(a1 + 192), v4, 0x201uLL);
          sub_100349198((_QWORD *)(a1 + 712), (uint64_t *)(a2 + 680));
          v44 = *(_OWORD *)(a2 + 712);
          v43 = *(_OWORD *)(a2 + 728);
          *(_OWORD *)(a1 + 728) = *(_OWORD *)(a2 + 696);
          *(_OWORD *)(a1 + 744) = v44;
          *(_OWORD *)(a1 + 760) = v43;
          v46 = *(_OWORD *)(a2 + 760);
          v45 = *(_OWORD *)(a2 + 776);
          v47 = *(_OWORD *)(a2 + 744);
          *(_BYTE *)(a1 + 824) = *(_BYTE *)(a2 + 792);
          *(_OWORD *)(a1 + 792) = v46;
          *(_OWORD *)(a1 + 808) = v45;
          *(_OWORD *)(a1 + 776) = v47;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102192330);
          v48 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            sub_100071A00(a2, v73);
            v49 = v76 >= 0 ? v73 : *(_BYTE **)v73;
            *(_DWORD *)buf = 68289283;
            *(_DWORD *)v60 = 0;
            *(_WORD *)&v60[4] = 2082;
            *(_QWORD *)&v60[6] = "";
            v61 = 2081;
            v62 = v49;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,cached\", \"location,\":%{private, location:escape_only}s}", buf, 0x1Cu);
            if (v76 < 0)
              operator delete(*(void **)v73);
          }
        }
        break;
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v17 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)v60 = 0;
    *(_WORD *)&v60[4] = 2082;
    *(_QWORD *)&v60[6] = "";
    v15 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,updateReferenceLocationCache,drop,not valid for caching\"}";
    goto LABEL_33;
  }
}

uint64_t sub_100140ED0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  unsigned int v17;
  NSObject *v18;
  double v19;
  int v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  _BYTE v29[24];
  uint64_t v30;
  __int128 v31;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  if (*(double *)(a1 + 52) <= 0.0)
    return 1;
  result = sub_100141578(a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = sub_1001FC7BC(a1 + 32, a1 + 192);
  v6 = *(double *)(a2 + 20);
  v7 = *(double *)(a2 + 36);
  if (v7 <= 0.0)
  {
    v9 = 0;
  }
  else
  {
    v8 = *(double *)(a1 + 68);
    v9 = v8 <= 0.0 || v7 <= v8;
  }
  if (v6 >= *(double *)(a1 + 52))
    v9 = 0;
  if (v5 >= 6.0 || v9)
  {
    if (v6 <= 75000.0 || v5 >= 1800.0)
    {
      if (v7 <= 0.0 && *(double *)(a1 + 68) > 0.0 && v5 < 900.0)
      {
        sub_10011E258((double *)(a1 + 1000), a2, a1 + 32);
        v16 = v15;
        if (v15 < 5000.0 || *(double *)(a2 + 20) > v15)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102192330);
          v23 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v24 = *(double *)(a2 + 20);
            v25 = *(double *)(a1 + 68);
            *(_DWORD *)buf = 134349824;
            v33 = v24;
            v34 = 2050;
            v35 = v25;
            v36 = 2050;
            v37 = v5;
            v38 = 2050;
            v39 = v16;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,reject location,no altitude,Hunc,%{public}.1lf,cacheVunc,%{public}.1lf,cacheAge,%{public}.1lf,distance,%{public}.1lf", buf, 0x2Au);
          }
          result = sub_1001BFF7C(115, 2);
          if ((_DWORD)result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102192330);
            v26 = *(_QWORD *)(a2 + 20);
            v27 = *(_QWORD *)(a1 + 68);
            *(_DWORD *)v29 = 134349824;
            *(_QWORD *)&v29[4] = v26;
            *(_WORD *)&v29[12] = 2050;
            *(_QWORD *)&v29[14] = v27;
            *(_WORD *)&v29[22] = 2050;
            LOWORD(v31) = 2050;
            *(double *)((char *)&v31 + 2) = v16;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,isLocationValidForCaching,reject location,no altitude,Hunc,%{public}.1lf,cacheVunc,%{public}.1lf,cacheAge,%{public}.1lf,distance,%{public}.1lf", v29, 42, *(_OWORD *)v29, *(_QWORD *)&v29[16], *(_QWORD *)&v5, v31);
            goto LABEL_60;
          }
          return result;
        }
        sub_100F0CEE4(a1, a2);
      }
      v17 = *(_DWORD *)(a1 + 128);
      if ((v17 & 0xFFFFFFF7) != 1 && (v17 > 0xD || ((1 << v17) & 0x2C10) == 0)
        || *(double *)(a2 + 20) <= 1000.0
        || v5 >= 220.0)
      {
        return sub_10022EA84(a1, a2);
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102192330);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(double *)(a1 + 52);
        v20 = *(_DWORD *)(a1 + 128);
        *(_DWORD *)buf = 134349568;
        v33 = v19;
        v34 = 2050;
        v35 = v5;
        v36 = 1026;
        LODWORD(v37) = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,reject location,cache accurate,cacheHunc,%{public}.1lf,cacheAge,%{public}.1lf,type,%{public}d", buf, 0x1Cu);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v21 = *(_QWORD *)(a1 + 52);
        v22 = *(_DWORD *)(a1 + 128);
        *(_DWORD *)v29 = 134349568;
        *(_QWORD *)&v29[4] = v21;
        *(_WORD *)&v29[12] = 2050;
        *(double *)&v29[14] = v5;
        *(_WORD *)&v29[22] = 1026;
        LODWORD(v30) = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,isLocationValidForCaching,reject location,cache accurate,cacheHunc,%{public}.1lf,cacheAge,%{public}.1lf,type,%{public}d", v29, 28, *(_OWORD *)v29, *(_QWORD *)&v29[16], v30, v31);
        goto LABEL_60;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102192330);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(double *)(a2 + 20);
        *(_DWORD *)buf = 134349312;
        v33 = v13;
        v34 = 2050;
        v35 = v5;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,reject location,large hunc,%{public}.1lf,cacheAge,%{public}.1lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if ((_DWORD)result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102192330);
        v14 = *(_QWORD *)(a2 + 20);
        *(_DWORD *)v29 = 134349312;
        *(_QWORD *)&v29[4] = v14;
        *(_WORD *)&v29[12] = 2050;
        *(double *)&v29[14] = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,isLocationValidForCaching,reject location,large hunc,%{public}.1lf,cacheAge,%{public}.1lf", v29, 22, *(_OWORD *)v29, *(_QWORD *)&v29[16], v30, v31);
        goto LABEL_60;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#GnssRefLocationCache,isLocationValidForCaching,ignoring location as cache is fresh,age,%{public}.1lf", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102192330);
      *(_DWORD *)v29 = 134349056;
      *(double *)&v29[4] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefLocationCache,isLocationValidForCaching,ignoring location as cache is fresh,age,%{public}.1lf", v29, 12, *(_OWORD *)v29, *(_QWORD *)&v29[16], v30, v31);
LABEL_60:
      v28 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssRefLocationCache::isLocationValidForCaching(CLDaemonLocation &)", "%s\n", v11);
      if (v28 != buf)
        free(v28);
      return 0;
    }
  }
  return result;
}

BOOL sub_100141578(uint64_t a1, uint64_t a2)
{
  double v3;
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  NSObject *v10;
  uint32_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v3 = *(double *)(a2 + 20);
  if (v3 <= 0.0 || v3 > 200000.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v4 = qword_1022A0078;
    result = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v9 = *(_QWORD *)(a2 + 20);
    v17 = 68289538;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2050;
    v22 = v9;
    v23 = 2050;
    v24 = 0x41086A0000000000;
    v8 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Warning invalid assistance location\", \"horizontalAccuracy\":\"%{"
         "public}f\", \"maximumAccuracy\":\"%{public}f\"}";
LABEL_12:
    v10 = v4;
    v11 = 38;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v17, v11);
    return 0;
  }
  if (sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12))
    || (v12 = *(double *)(a2 + 4), v12 < -90.0)
    || v12 > 90.0
    || (v13 = *(double *)(a2 + 12), v13 < -180.0)
    || v13 > 180.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102192330);
    v4 = qword_1022A0078;
    result = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v6 = *(_QWORD *)(a2 + 4);
    v7 = *(_QWORD *)(a2 + 12);
    v17 = 68289539;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2049;
    v22 = v6;
    v23 = 2049;
    v24 = v7;
    v8 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Warning invalid assistance location,invalid coordinates\", \"latit"
         "ude\":\"%{private}.7f\", \"longitude\":\"%{private}.7f\"}";
    goto LABEL_12;
  }
  if (*(double *)(a2 + 36) <= 0.0)
    return 1;
  v14 = *(double *)(a2 + 28);
  if (v14 >= -450.0 && v14 <= 8850.0)
    return 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v15 = qword_1022A0078;
  result = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v16 = *(_QWORD *)(a2 + 28);
    v17 = 68289283;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2049;
    v22 = v16;
    v8 = "{\"msg%{public}.0s\":\"#GnssRefLocationCache,Warning invalid assistance location\", \"altitude\":\"%{private}.2f\"}";
    v10 = v15;
    v11 = 28;
    goto LABEL_13;
  }
  return result;
}

void sub_10014184C(__int32 a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onPipelineNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onPipelineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onPipelineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100141E04((int *)a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100141A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100141A34(__int32 a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onWifi2Notification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onWifi2Notification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onWifi2Notification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100144944((int *)a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100141BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100141C1C(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onWifiNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A7CAC(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100141DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100141E04(int *a1, __int32 a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  NSObject *v33;
  int v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t *v43;
  int v44;
  int v45;
  const char *v46;
  uint64_t *v47;
  int v48;
  int v49;
  const char *v50;
  uint64_t *v51;
  const char *v52;
  uint64_t *v53;
  uint64_t v54;
  int32x4_t v55;
  int v56;
  __int16 v57;
  int v58;
  int v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  void *v69;
  char v70;
  std::__shared_weak_count *v71;
  id v72;
  uint64_t buf;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;

  v55.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)&buf);
  sub_100B30A14(v7, &buf);
  LODWORD(buf) = 16;
  v55.i32[0] = 16;
  v55.i32[1] = sub_10142DEC4((int *)&buf);
  v8 = sub_1005EE584();
  LODWORD(buf) = 4;
  sub_1005FA6E8(v8, (unsigned int *)&buf, &v55, a1 + 1281, &v55.i32[2], a3, a4);
  v10 = *a3;
  if (*a3 < 5)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a4 + 96);
      v13 = *(_QWORD *)(a4 + 4);
      v14 = *(_QWORD *)(a4 + 12);
      v15 = *(_QWORD *)(a4 + 20);
      LODWORD(buf) = 67240961;
      HIDWORD(buf) = v12;
      v74 = 2049;
      v75 = v13;
      v76 = 2049;
      v77 = v14;
      v78 = 2050;
      v79 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "onPipelineNotification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01lf", (uint8_t *)&buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v38 = *(_DWORD *)(a4 + 96);
      v39 = *(_QWORD *)(a4 + 4);
      v40 = *(_QWORD *)(a4 + 12);
      v41 = *(_QWORD *)(a4 + 20);
      v59 = 67240961;
      v60 = v38;
      v61 = 2049;
      v62 = v39;
      v63 = 2049;
      v64 = v40;
      v65 = 2050;
      v66 = v41;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "onPipelineNotification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01lf", &v59, 38);
      v43 = (uint64_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onPipelineNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v42);
      if (v43 != &buf)
        free(v43);
    }
    sub_100129CA0((uint64_t)&v59);
    v17 = *(_DWORD *)(a4 + 96);
    if (v17 == 11)
    {
      if (!a1[169])
      {
        v19 = a1[83];
        LODWORD(buf) = 9;
        sub_1001426CC((uint64_t)a1, v19, v16, (unsigned int *)&buf, (uint64_t)&v59);
      }
    }
    else
    {
      if (v17 != 10)
      {
LABEL_17:
        if (v17 == 10)
        {
          a1[169] = 0;
          sub_1001426CC((uint64_t)a1, a1[83], v16, (unsigned int *)a3, a4);
        }
        else if (v17 == 11)
        {
          a1[169] = 1;
        }
        else
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v20 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v21 = *(_DWORD *)(a4 + 96);
            v22 = *a3;
            LODWORD(buf) = 67240448;
            HIDWORD(buf) = v21;
            v74 = 1026;
            LODWORD(v75) = v22;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,Unhandled location type in onPipelineNotification,%{public}d,notification,%{public}d", (uint8_t *)&buf, 0xEu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v44 = *(_DWORD *)(a4 + 96);
            v45 = *a3;
            v55.i32[3] = 67240448;
            v56 = v44;
            v57 = 1026;
            v58 = v45;
            LODWORD(v54) = 14;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,Unhandled location type in onPipelineNotification,%{public}d,notification,%{public}d", (char *)&v55.u64[1] + 4, v54);
            v47 = (uint64_t *)v46;
            sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onPipelineNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v46);
            if (v47 != &buf)
              free(v47);
          }
        }

        v23 = v71;
        if (v71)
        {
          p_shared_owners = (unint64_t *)&v71->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        if (v70 < 0)
          operator delete(v69);
        v26 = v68;
        if (v68)
        {
          v27 = (unint64_t *)&v68->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v67;
        if (v67)
        {
          v30 = (unint64_t *)&v67->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        return;
      }
      if (a1[169] == 1)
      {
        v18 = a1[86];
        LODWORD(buf) = 9;
        sub_1001426CC((uint64_t)a1, v18, v16, (unsigned int *)&buf, (uint64_t)&v59);
      }
    }
    v17 = *(_DWORD *)(a4 + 96);
    goto LABEL_17;
  }
  if (v10 == 9)
  {
    v32 = a1[169];
    if (v32)
    {
      if (v32 == 1)
      {
        sub_1001426CC((uint64_t)a1, a1[86], v9, (unsigned int *)a3, a4);
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v37 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,Unavailable flagged when already in unavailable state", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          LOWORD(v59) = 0;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,Unavailable flagged when already in unavailable state", &v59, 2);
          v53 = (uint64_t *)v52;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onPipelineNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v52);
          if (v53 != &buf)
            free(v53);
        }
      }
    }
    else
    {
      sub_1001426CC((uint64_t)a1, a1[83], v9, (unsigned int *)a3, a4);
    }
    a1[169] = -1;
  }
  else if (v10 == 11)
  {
    sub_1001931A4((uint64_t)a1, a4 + 816);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v33 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v34 = *a3;
      v35 = *(_DWORD *)(a4 + 96);
      LODWORD(buf) = 67240448;
      HIDWORD(buf) = v34;
      v74 = 1026;
      LODWORD(v75) = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,Suspect notification in onPipelineNotification,%{public}d,location type,%{public}d", (uint8_t *)&buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v48 = *a3;
      v49 = *(_DWORD *)(a4 + 96);
      v59 = 67240448;
      v60 = v48;
      v61 = 1026;
      LODWORD(v62) = v49;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,Suspect notification in onPipelineNotification,%{public}d,location type,%{public}d", &v59, 14);
      v51 = (uint64_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onPipelineNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v50);
      if (v51 != &buf)
        free(v51);
    }
    sub_1001426CC((uint64_t)a1, a1[83], v36, (unsigned int *)a3, a4);
  }
}

void sub_100142694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001426CC(uint64_t a1, int a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t **v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t **v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  double v25;
  unsigned int v26;
  double v27;
  double v28;
  double v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BYTE v39[688];
  std::__shared_weak_count *v40;
  int *v41;
  std::__shared_weak_count *v42;
  void *__p;
  char v44;
  double v45;
  double v46;
  double v47;
  std::__shared_weak_count *v48;
  id v49;
  int v50;
  int *v51;

  v50 = a2;
  sub_10011D234((uint64_t)v39, a5);
  v9 = *a4;
  if (v9 <= 0x27)
  {
    if (((1 << v9) & 0x8000000019) != 0)
    {
      sub_100144490(a1, a5);
      v51 = &v50;
      v10 = sub_1001B2798((uint64_t **)(a1 + 240), &v50, (uint64_t)&unk_101B9EB60, &v51);
      v11 = *(_OWORD *)(a5 + 16);
      *((_OWORD *)v10 + 6) = *(_OWORD *)a5;
      *((_OWORD *)v10 + 7) = v11;
      v12 = *(_OWORD *)(a5 + 32);
      v13 = *(_OWORD *)(a5 + 48);
      v14 = *(_OWORD *)(a5 + 80);
      *((_OWORD *)v10 + 10) = *(_OWORD *)(a5 + 64);
      *((_OWORD *)v10 + 11) = v14;
      *((_OWORD *)v10 + 8) = v12;
      *((_OWORD *)v10 + 9) = v13;
      v15 = *(_OWORD *)(a5 + 96);
      v16 = *(_OWORD *)(a5 + 112);
      v17 = *(_OWORD *)(a5 + 128);
      *(_OWORD *)((char *)v10 + 236) = *(_OWORD *)(a5 + 140);
      *((_OWORD *)v10 + 13) = v16;
      *((_OWORD *)v10 + 14) = v17;
      *((_OWORD *)v10 + 12) = v15;
      v51 = &v50;
      v18 = sub_1001B2798((uint64_t **)(a1 + 240), &v50, (uint64_t)&unk_101B9EB60, &v51);
      memcpy(v18 + 32, (const void *)(a5 + 160), 0x201uLL);
      sub_100349198(v18 + 97, (uint64_t *)(a5 + 680));
      v20 = *(_OWORD *)(a5 + 712);
      v19 = *(_OWORD *)(a5 + 728);
      *(_OWORD *)(v18 + 99) = *(_OWORD *)(a5 + 696);
      *(_OWORD *)(v18 + 101) = v20;
      *(_OWORD *)(v18 + 103) = v19;
      v22 = *(_OWORD *)(a5 + 760);
      v21 = *(_OWORD *)(a5 + 776);
      v23 = *(_OWORD *)(a5 + 744);
      *((_BYTE *)v18 + 888) = *(_BYTE *)(a5 + 792);
      *(_OWORD *)(v18 + 107) = v22;
      *(_OWORD *)(v18 + 109) = v21;
      *(_OWORD *)(v18 + 105) = v23;
      sub_100145214(a1, v50, a5);
      sub_1001429E8(a1 + 2000, a5);
    }
    else if (v9 == 9)
    {
      sub_1001430D4(a1, a2);
    }
    else if (v9 == 22)
    {
      v24 = *(_QWORD *)(a1 + 288);
      if (v24)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 456))(v24, a5);
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 288) + 464))(*(_QWORD *)(a1 + 288), v39);
      }
      v25 = -1.0;
      if (sub_1006A7C1C(a1, v41) && *(_QWORD *)(a1 + 1608))
      {
        v26 = +[CLLocationDerivedSpeedEstimator isSupportedForDerivedSpeedEstimate](CLLocationDerivedSpeedEstimator, "isSupportedForDerivedSpeedEstimate");
        v27 = -1.0;
        v28 = -1.0;
        if (v26)
        {
          objc_msgSend(*(id *)(a1 + 1608), "currentEstimate");
          v25 = v29;
        }
      }
      else
      {
        v27 = -1.0;
        v28 = -1.0;
      }
      v45 = v25;
      v46 = v27;
      v47 = v28;
      LODWORD(v51) = 22;
      (*(void (**)(uint64_t, int **, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v51, v39, 0, 0xFFFFFFFFLL, 0);
    }
  }

  v30 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v44 < 0)
    operator delete(__p);
  v33 = v42;
  if (v42)
  {
    v34 = (unint64_t *)&v42->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v40;
  if (v40)
  {
    v37 = (unint64_t *)&v40->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1001429CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001429E8(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  NSObject *v89;
  uint64_t v90;
  double v91;
  const char *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  double v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint8_t *v110;
  int v111;
  double v112;
  __int16 v113;
  const char *v114;
  __int16 v115;
  const char *v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  double v126;
  uint8_t buf[4];
  double v128;
  __int16 v129;
  const char *v130;
  __int16 v131;
  const char *v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  double v142;

  v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 0xFFFFFFF7) == 1)
  {
    if (*(_BYTE *)(a2 + 516))
    {
      *(_QWORD *)(a1 + 3072) = *(_QWORD *)(a2 + 504);
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 1528) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 1544) = v5;
      v6 = *(_OWORD *)(a2 + 32);
      v7 = *(_OWORD *)(a2 + 48);
      v8 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 1592) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 1608) = v8;
      *(_OWORD *)(a1 + 1560) = v6;
      *(_OWORD *)(a1 + 1576) = v7;
      v9 = *(_OWORD *)(a2 + 96);
      v10 = *(_OWORD *)(a2 + 112);
      v11 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 1668) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 1640) = v10;
      *(_OWORD *)(a1 + 1656) = v11;
      *(_OWORD *)(a1 + 1624) = v9;
      memcpy((void *)(a1 + 1688), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 2208), (uint64_t *)(a2 + 680));
      v13 = *(_OWORD *)(a2 + 712);
      v12 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 2224) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 2240) = v13;
      *(_OWORD *)(a1 + 2256) = v12;
      v15 = *(_OWORD *)(a2 + 760);
      v14 = *(_OWORD *)(a2 + 776);
      v16 = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 2272) = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 2320) = v16;
      *(_OWORD *)(a1 + 2304) = v14;
      *(_OWORD *)(a1 + 2288) = v15;
      sub_100349198((_QWORD *)(a1 + 2328), (uint64_t *)(a2 + 800));
      *(_OWORD *)(a1 + 2344) = *(_OWORD *)(a2 + 816);
      v17 = *(_OWORD *)(a2 + 880);
      v19 = *(_OWORD *)(a2 + 832);
      v18 = *(_OWORD *)(a2 + 848);
      *(_OWORD *)(a1 + 2392) = *(_OWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 2408) = v17;
      *(_OWORD *)(a1 + 2360) = v19;
      *(_OWORD *)(a1 + 2376) = v18;
      *(_QWORD *)(a1 + 2424) = *(_QWORD *)(a2 + 896);
      std::string::operator=((std::string *)(a1 + 2432), (const std::string *)(a2 + 904));
      v21 = *(_OWORD *)(a2 + 944);
      v20 = *(_OWORD *)(a2 + 960);
      *(_OWORD *)(a1 + 2456) = *(_OWORD *)(a2 + 928);
      *(_OWORD *)(a1 + 2472) = v21;
      *(_OWORD *)(a1 + 2488) = v20;
      v22 = *(_OWORD *)(a2 + 1024);
      v24 = *(_OWORD *)(a2 + 976);
      v23 = *(_OWORD *)(a2 + 992);
      *(_OWORD *)(a1 + 2536) = *(_OWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 2552) = v22;
      *(_OWORD *)(a1 + 2504) = v24;
      *(_OWORD *)(a1 + 2520) = v23;
      v25 = *(_OWORD *)(a2 + 1056);
      v26 = *(_OWORD *)(a2 + 1072);
      v27 = *(_OWORD *)(a2 + 1088);
      *(_OWORD *)(a1 + 2568) = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 2616) = v27;
      *(_OWORD *)(a1 + 2600) = v26;
      *(_OWORD *)(a1 + 2584) = v25;
      v28 = *(_OWORD *)(a2 + 1120);
      v29 = *(_OWORD *)(a2 + 1136);
      v30 = *(_QWORD *)(a2 + 1152);
      *(_OWORD *)(a1 + 2632) = *(_OWORD *)(a2 + 1104);
      *(_QWORD *)(a1 + 2680) = v30;
      *(_OWORD *)(a1 + 2664) = v29;
      *(_OWORD *)(a1 + 2648) = v28;
      sub_100349198((_QWORD *)(a1 + 2688), (uint64_t *)(a2 + 1160));
      *(_OWORD *)(a1 + 2704) = *(_OWORD *)(a2 + 1176);
      v31 = *(_OWORD *)(a2 + 1224);
      v32 = *(_OWORD *)(a2 + 1240);
      v33 = *(_OWORD *)(a2 + 1208);
      *(_OWORD *)(a1 + 2720) = *(_OWORD *)(a2 + 1192);
      *(_OWORD *)(a1 + 2768) = v32;
      *(_OWORD *)(a1 + 2752) = v31;
      *(_OWORD *)(a1 + 2736) = v33;
      v34 = *(_OWORD *)(a2 + 1288);
      v35 = *(_OWORD *)(a2 + 1304);
      v36 = *(_OWORD *)(a2 + 1272);
      *(_OWORD *)(a1 + 2784) = *(_OWORD *)(a2 + 1256);
      *(_OWORD *)(a1 + 2832) = v35;
      *(_OWORD *)(a1 + 2816) = v34;
      *(_OWORD *)(a1 + 2800) = v36;
      v37 = *(void **)(a1 + 2848);
      *(_QWORD *)(a1 + 2848) = *(id *)(a2 + 1320);

      *(_OWORD *)(a1 + 2856) = *(_OWORD *)(a2 + 1328);
      v38 = *(_OWORD *)(a2 + 1344);
      v39 = *(_OWORD *)(a2 + 1360);
      v40 = *(_OWORD *)(a2 + 1376);
      *(_OWORD *)(a1 + 2920) = *(_OWORD *)(a2 + 1392);
      *(_OWORD *)(a1 + 2904) = v40;
      *(_OWORD *)(a1 + 2888) = v39;
      *(_OWORD *)(a1 + 2872) = v38;
      v41 = *(_OWORD *)(a2 + 1408);
      v42 = *(_OWORD *)(a2 + 1424);
      v43 = *(_OWORD *)(a2 + 1440);
      *(_OWORD *)(a1 + 2984) = *(_OWORD *)(a2 + 1456);
      *(_OWORD *)(a1 + 2968) = v43;
      *(_OWORD *)(a1 + 2952) = v42;
      *(_OWORD *)(a1 + 2936) = v41;
      v44 = *(_OWORD *)(a2 + 1472);
      v45 = *(_OWORD *)(a2 + 1488);
      v46 = *(_OWORD *)(a2 + 1504);
      *(_QWORD *)(a1 + 3048) = *(_QWORD *)(a2 + 1520);
      *(_OWORD *)(a1 + 3032) = v46;
      *(_OWORD *)(a1 + 3016) = v45;
      *(_OWORD *)(a1 + 3000) = v44;
    }
  }
  else
  {
    if (v4 != 3)
      return;
    if (*(_BYTE *)(a2 + 516))
    {
      *(_QWORD *)(a1 + 3064) = *(_QWORD *)(a2 + 504);
    }
    else
    {
      v47 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v47;
      v48 = *(_OWORD *)(a2 + 32);
      v49 = *(_OWORD *)(a2 + 48);
      v50 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v50;
      *(_OWORD *)(a1 + 32) = v48;
      *(_OWORD *)(a1 + 48) = v49;
      v51 = *(_OWORD *)(a2 + 96);
      v52 = *(_OWORD *)(a2 + 112);
      v53 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 112) = v52;
      *(_OWORD *)(a1 + 128) = v53;
      *(_OWORD *)(a1 + 96) = v51;
      memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 680), (uint64_t *)(a2 + 680));
      v55 = *(_OWORD *)(a2 + 712);
      v54 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 696) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 712) = v55;
      *(_OWORD *)(a1 + 728) = v54;
      v57 = *(_OWORD *)(a2 + 760);
      v56 = *(_OWORD *)(a2 + 776);
      v58 = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 760) = v57;
      *(_OWORD *)(a1 + 776) = v56;
      *(_OWORD *)(a1 + 744) = v58;
      sub_100349198((_QWORD *)(a1 + 800), (uint64_t *)(a2 + 800));
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      v59 = *(_OWORD *)(a2 + 880);
      v61 = *(_OWORD *)(a2 + 832);
      v60 = *(_OWORD *)(a2 + 848);
      *(_OWORD *)(a1 + 864) = *(_OWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 880) = v59;
      *(_OWORD *)(a1 + 832) = v61;
      *(_OWORD *)(a1 + 848) = v60;
      *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
      std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a2 + 904));
      v63 = *(_OWORD *)(a2 + 944);
      v62 = *(_OWORD *)(a2 + 960);
      *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
      *(_OWORD *)(a1 + 944) = v63;
      *(_OWORD *)(a1 + 960) = v62;
      v64 = *(_OWORD *)(a2 + 1024);
      v66 = *(_OWORD *)(a2 + 976);
      v65 = *(_OWORD *)(a2 + 992);
      *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 1008);
      *(_OWORD *)(a1 + 1024) = v64;
      *(_OWORD *)(a1 + 976) = v66;
      *(_OWORD *)(a1 + 992) = v65;
      v67 = *(_OWORD *)(a2 + 1056);
      v68 = *(_OWORD *)(a2 + 1072);
      v69 = *(_OWORD *)(a2 + 1088);
      *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 1040);
      *(_OWORD *)(a1 + 1088) = v69;
      *(_OWORD *)(a1 + 1072) = v68;
      *(_OWORD *)(a1 + 1056) = v67;
      v70 = *(_OWORD *)(a2 + 1120);
      v71 = *(_OWORD *)(a2 + 1136);
      v72 = *(_QWORD *)(a2 + 1152);
      *(_OWORD *)(a1 + 1104) = *(_OWORD *)(a2 + 1104);
      *(_QWORD *)(a1 + 1152) = v72;
      *(_OWORD *)(a1 + 1136) = v71;
      *(_OWORD *)(a1 + 1120) = v70;
      sub_100349198((_QWORD *)(a1 + 1160), (uint64_t *)(a2 + 1160));
      *(_OWORD *)(a1 + 1176) = *(_OWORD *)(a2 + 1176);
      v73 = *(_OWORD *)(a2 + 1240);
      v75 = *(_OWORD *)(a2 + 1192);
      v74 = *(_OWORD *)(a2 + 1208);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
      *(_OWORD *)(a1 + 1240) = v73;
      *(_OWORD *)(a1 + 1192) = v75;
      *(_OWORD *)(a1 + 1208) = v74;
      v76 = *(_OWORD *)(a2 + 1304);
      v78 = *(_OWORD *)(a2 + 1256);
      v77 = *(_OWORD *)(a2 + 1272);
      *(_OWORD *)(a1 + 1288) = *(_OWORD *)(a2 + 1288);
      *(_OWORD *)(a1 + 1304) = v76;
      *(_OWORD *)(a1 + 1256) = v78;
      *(_OWORD *)(a1 + 1272) = v77;
      v79 = *(void **)(a1 + 1320);
      *(_QWORD *)(a1 + 1320) = *(id *)(a2 + 1320);

      *(_OWORD *)(a1 + 1328) = *(_OWORD *)(a2 + 1328);
      v80 = *(_OWORD *)(a2 + 1344);
      v81 = *(_OWORD *)(a2 + 1360);
      v82 = *(_OWORD *)(a2 + 1376);
      *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 1392);
      *(_OWORD *)(a1 + 1376) = v82;
      *(_OWORD *)(a1 + 1360) = v81;
      *(_OWORD *)(a1 + 1344) = v80;
      v83 = *(_OWORD *)(a2 + 1408);
      v84 = *(_OWORD *)(a2 + 1424);
      v85 = *(_OWORD *)(a2 + 1440);
      *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 1456);
      *(_OWORD *)(a1 + 1440) = v85;
      *(_OWORD *)(a1 + 1424) = v84;
      *(_OWORD *)(a1 + 1408) = v83;
      v86 = *(_OWORD *)(a2 + 1472);
      v87 = *(_OWORD *)(a2 + 1488);
      v88 = *(_OWORD *)(a2 + 1504);
      *(_QWORD *)(a1 + 1520) = *(_QWORD *)(a2 + 1520);
      *(_OWORD *)(a1 + 1504) = v88;
      *(_OWORD *)(a1 + 1488) = v87;
      *(_OWORD *)(a1 + 1472) = v86;
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10218DF60);
  v89 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v90 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v91 = sub_100B30608(v90, buf);
    if (*(_BYTE *)(a2 + 516))
      v92 = "not saved";
    else
      v92 = "saved";
    v93 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v94 = *(_QWORD *)(a2 + 76);
    v95 = *(_QWORD *)(a2 + 504);
    v96 = *(_QWORD *)(a2 + 4);
    v97 = *(_QWORD *)(a2 + 12);
    v98 = sub_100B303DC();
    v99 = sub_100B309E0(v98);
    *(_DWORD *)buf = 134219779;
    v128 = v91;
    v129 = 2080;
    v130 = v92;
    v131 = 2080;
    v132 = v93;
    v133 = 2048;
    v134 = v94;
    v135 = 2048;
    v136 = v95;
    v137 = 2049;
    v138 = v96;
    v139 = 2049;
    v140 = v97;
    v141 = 2050;
    v142 = v99;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "%.1lf,DeadReckoning,%s,%s,time,%.1lf,machCont,%.1lf,%{private}.8lf,%{private}.8lf,propagation_us,%{public}.3f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218DF60);
    v100 = qword_1022A02D8;
    v101 = sub_1005FECEC();
    if (*(_BYTE *)(a2 + 516))
      v102 = "not saved";
    else
      v102 = "saved";
    v103 = sub_10014D1E0(*(_DWORD *)(a2 + 96));
    v104 = *(_QWORD *)(a2 + 76);
    v105 = *(_QWORD *)(a2 + 504);
    v106 = *(_QWORD *)(a2 + 4);
    v107 = *(_QWORD *)(a2 + 12);
    v108 = sub_100B303DC();
    v111 = 134219779;
    v112 = v101;
    v113 = 2080;
    v114 = v102;
    v115 = 2080;
    v116 = v103;
    v117 = 2048;
    v118 = v104;
    v119 = 2048;
    v120 = v105;
    v121 = 2049;
    v122 = v106;
    v123 = 2049;
    v124 = v107;
    v125 = 2050;
    v126 = sub_100B309E0(v108);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v100, 2, "%.1lf,DeadReckoning,%s,%s,time,%.1lf,machCont,%.1lf,%{private}.8lf,%{private}.8lf,propagation_us,%{public}.3f", &v111, 82);
    v110 = (uint8_t *)v109;
    sub_100512490("Generic", 1, 0, 2, "void PropagationDataHistory::saveData(const CLLocationProvider_Type::NotificationData &)", "%s\n", v109);
    if (v110 != buf)
      free(v110);
  }
}

uint64_t sub_1001430D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t ***v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t *v13;
  uint64_t *v14;
  NSObject *v15;
  _QWORD *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t **v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t **v26;
  int v27;
  int v28;
  double v29;
  NSObject *v30;
  int v31;
  _QWORD *v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  uint64_t *v44;
  uint64_t **v45;
  BOOL v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  double v54;
  uint64_t v55;
  double v56;
  const char *v57;
  char *v58;
  NSObject *v59;
  uint64_t v60;
  _BYTE *v61;
  double v62;
  NSObject *v63;
  _QWORD *v64;
  _QWORD *v65;
  _BYTE *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  double v70;
  NSObject *v71;
  NSObject *v72;
  int v73;
  int v74;
  double v75;
  _BYTE *v76;
  _QWORD *v77;
  const char *v78;
  char *v79;
  uint64_t v80;
  uint64_t **v81;
  _QWORD *v82;
  uint64_t *v83;
  const char *v84;
  char *v85;
  uint64_t v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  double v90;
  const char *v91;
  char *v92;
  uint64_t v93;
  int v94;
  int v95;
  const char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  _BYTE v101[32];
  __int16 v102;
  uint64_t *v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  _BYTE buf[32];
  __int16 v109;
  uint64_t *v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;

  v100 = a2;
  v3 = (uint64_t **)(a1 + 248);
  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
    goto LABEL_11;
  v4 = a1;
  v5 = (uint64_t ***)(a1 + 240);
  v6 = a1 + 248;
  do
  {
    v7 = *(_DWORD *)(v2 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v2;
    else
      v9 = (uint64_t *)(v2 + 8);
    if (!v8)
      v6 = v2;
    v2 = *v9;
  }
  while (*v9);
  if ((uint64_t **)v6 == v3 || *(_DWORD *)(v6 + 32) > a2)
  {
LABEL_11:
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "LocationController,notifyLocationUnavailable,could not find provider from list", buf, 2u);
    }
    v11 = 0;
    if (!sub_1001BFF7C(115, 0))
      return v11;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    *(_WORD *)v101 = 0;
    v75 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "LocationController,notifyLocationUnavailable,could not find provider from list", v101, 2);
    v66 = v76;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v75);
    goto LABEL_114;
  }
  if (!*(_BYTE *)(v6 + 903))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v63 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v64 = (_QWORD *)(v6 + 48);
      if (*(char *)(v6 + 71) < 0)
        v64 = (_QWORD *)*v64;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v64;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,Got location unavailable notification for non-active provider,%{public}s,ignoring", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v65 = (_QWORD *)(v6 + 48);
    if (*(char *)(v6 + 71) < 0)
      v65 = (_QWORD *)*v65;
    *(_DWORD *)v101 = 136446210;
    *(_QWORD *)&v101[4] = v65;
    v62 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,notifyLocationUnavailable,Got location unavailable notification for non-active provider,%{public}s,ignoring", v101, 12);
LABEL_90:
    v66 = v61;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v62);
LABEL_114:
    if (v66 != buf)
      free(v66);
    return 0;
  }
  *(_BYTE *)(v6 + 902) = 1;
  v13 = &qword_1022A0000;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v14 = &qword_1022A0000;
  v15 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v16 = (_QWORD *)(v6 + 48);
    if (*(char *)(v6 + 71) < 0)
      v16 = (_QWORD *)*v16;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,Got location unavailable notification for location provider,%{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v77 = (_QWORD *)(v6 + 48);
    if (*(char *)(v6 + 71) < 0)
      v77 = (_QWORD *)*v77;
    *(_DWORD *)v101 = 136446210;
    *(_QWORD *)&v101[4] = v77;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,notifyLocationUnavailable,Got location unavailable notification for location provider,%{public}s", v101, 12);
    v79 = (char *)v78;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v78);
    if (v79 != buf)
      free(v79);
  }
  if (*(_BYTE *)(v4 + 216))
    sub_1001440EC(v4, (char *)(v6 + 901));
  *(_QWORD *)buf = &v100;
  if (*((double *)sub_1001B2798(v3 - 1, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 23) < 0.0)
  {
    v17 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v18 = sub_100B30608(v17, buf);
    *(_QWORD *)buf = &v100;
    v19 = v18 - *(double *)((char *)sub_1001B2798(v3 - 1, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 172);
    v20 = 15.0;
    if (qword_1022A0020 != -1)
    {
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v20 = 15.0;
    }
    v21 = v19 + v20;
    v22 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = &v100;
      v23 = sub_1001B2798(v3 - 1, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v24 = v23 + 6;
      if (*((char *)v23 + 71) < 0)
        v24 = (_QWORD *)*v24;
      *(_QWORD *)buf = &v100;
      v25 = sub_1001B2798(v3 - 1, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[23];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,setting provider %{public}s location to expire,curr_lifespan,%{public}.1lf,new_lifespan,%{public}.1lf", buf, 0x20u);
      v13 = &qword_1022A0000;
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v80 = qword_1022A0028;
      *(_QWORD *)v101 = &v100;
      v81 = sub_1001B2798(v3 - 1, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)v101);
      v82 = v81 + 6;
      if (*((char *)v81 + 71) < 0)
        v82 = (_QWORD *)*v82;
      *(_QWORD *)v101 = &v100;
      v83 = sub_1001B2798(v3 - 1, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)v101)[23];
      *(_DWORD *)v101 = 136446722;
      *(_QWORD *)&v101[4] = v82;
      *(_WORD *)&v101[12] = 2050;
      *(_QWORD *)&v101[14] = v83;
      *(_WORD *)&v101[22] = 2050;
      *(double *)&v101[24] = v21;
      LODWORD(v98) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v80, 2, "LocationController,notifyLocationUnavailable,setting provider %{public}s location to expire,curr_lifespan,%{public}.1lf,new_lifespan,%{public}.1lf", v101, v98);
      v85 = (char *)v84;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v84);
      if (v85 != buf)
        free(v85);
      v13 = &qword_1022A0000;
    }
    *(_QWORD *)buf = &v100;
    *((double *)sub_1001B2798(v3 - 1, &v100, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 23) = v21;
  }
  v26 = *v5;
  if (*v5 != v3)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0.0;
    v99 = v4;
    do
    {
      if (!*((_BYTE *)v26 + 902) && *((char *)v26 + 900) <= *(char *)(v4 + 161) && *(double *)((char *)v26 + 116) > 0.0)
      {
        if (v13[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v30 = v14[5];
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          v31 = v28;
          v32 = v26 + 6;
          v33 = v27;
          v34 = v14;
          if (*((char *)v26 + 71) < 0)
            v32 = (_QWORD *)*v32;
          v35 = *(uint64_t *)((char *)v26 + 100);
          v36 = *(uint64_t *)((char *)v26 + 108);
          v37 = v26[23];
          v38 = sub_100B303DC();
          *(_DWORD *)buf = 0;
          v39 = sub_100B30608(v38, buf) - *(double *)((char *)v26 + 172);
          v40 = sub_100B303DC();
          v41 = sub_100B309E0(v40);
          *(_DWORD *)buf = 136447491;
          *(_QWORD *)&buf[4] = v32;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2049;
          *(_QWORD *)&buf[24] = v36;
          v109 = 2050;
          v110 = v37;
          v111 = 2050;
          v112 = v39;
          v113 = 2050;
          v114 = v41;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,provider,%{public}s,still available,lat,%{private}.7lf,lon,%{private}.7lf,lifespan,%{public}.1lf,age,%{public}.3fs,propagation_us,%{public}.3f", buf, 0x3Eu);
          v14 = v34;
          v13 = &qword_1022A0000;
          v28 = v31;
          v27 = v33;
          v4 = v99;
        }
        if (sub_1001BFF7C(115, 2))
        {
          v47 = v27;
          v48 = v28;
          bzero(buf, 0x65CuLL);
          if (v13[4] != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v49 = qword_1022A0028;
          v50 = v26 + 6;
          if (*((char *)v26 + 71) < 0)
            v50 = (_QWORD *)*v50;
          v51 = *(uint64_t *)((char *)v26 + 100);
          v52 = *(uint64_t *)((char *)v26 + 108);
          v53 = v26[23];
          v54 = sub_1005FECEC() - *(double *)((char *)v26 + 172);
          v55 = sub_100B303DC();
          v56 = sub_100B309E0(v55);
          *(_DWORD *)v101 = 136447491;
          *(_QWORD *)&v101[4] = v50;
          *(_WORD *)&v101[12] = 2049;
          *(_QWORD *)&v101[14] = v51;
          *(_WORD *)&v101[22] = 2049;
          *(_QWORD *)&v101[24] = v52;
          v102 = 2050;
          v103 = v53;
          v104 = 2050;
          v105 = v54;
          v106 = 2050;
          v107 = v56;
          LODWORD(v98) = 62;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "LocationController,notifyLocationUnavailable,provider,%{public}s,still available,lat,%{private}.7lf,lon,%{private}.7lf,lifespan,%{public}.1lf,age,%{public}.3fs,propagation_us,%{public}.3f", v101, v98);
          v58 = (char *)v57;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v57);
          if (v58 != buf)
            free(v58);
          v14 = &qword_1022A0000;
          v13 = &qword_1022A0000;
          v28 = v48;
          v27 = v47;
        }
        ++v28;
        v42 = *((double *)v26 + 23);
        if (v29 < v42)
          v43 = *((double *)v26 + 23);
        else
          v43 = v29;
        if (v42 < 0.0)
          v27 = 1;
        else
          v29 = v43;
      }
      v44 = v26[1];
      if (v44)
      {
        do
        {
          v45 = (uint64_t **)v44;
          v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          v45 = (uint64_t **)v26[2];
          v46 = *v45 == (uint64_t *)v26;
          v26 = v45;
        }
        while (!v46);
      }
      v26 = v45;
    }
    while (v45 != v3);
    if (!((v28 == 0) | v27 & 1))
    {
      if (v13[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v71 = v14[5];
      if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240704;
        *(_DWORD *)&buf[4] = v28;
        *(_WORD *)&buf[8] = 2050;
        *(double *)&buf[10] = v29;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = 0x402E000000000000;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "LocationController,notifyLocationUnavailable,location available from %{public}d providers,setting location unavailable timer next delay to %{public}.1f plus deadline %{public}.1f sec", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v13[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v86 = v14[5];
        *(_DWORD *)v101 = 67240704;
        *(_DWORD *)&v101[4] = v28;
        *(_WORD *)&v101[8] = 2050;
        *(double *)&v101[10] = v29;
        *(_WORD *)&v101[18] = 2050;
        *(_QWORD *)&v101[20] = 0x402E000000000000;
        LODWORD(v98) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v86, 1, "LocationController,notifyLocationUnavailable,location available from %{public}d providers,setting location unavailable timer next delay to %{public}.1f plus deadline %{public}.1f sec", v101, v98);
        v88 = (char *)v87;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v87);
        if (v88 != buf)
          free(v88);
      }
      objc_msgSend(*(id *)(v4 + 656), "setNextFireDelay:", v29 + 15.0);
      return 0;
    }
    if (v28)
    {
      if (v13[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v59 = v14[5];
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "LocationController,notifyLocationUnavailable,Infinite lifespan location available; not starting location unavailable timer",
          buf,
          2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (v13[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v60 = v14[5];
      *(_WORD *)v101 = 0;
      LODWORD(v98) = 2;
      v62 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 2, "LocationController,notifyLocationUnavailable,Infinite lifespan location available; not starting location u"
              "navailable timer",
              v101,
              v98);
      goto LABEL_90;
    }
  }
  v67 = v13[4];
  if (*(char *)(v4 + 161) <= 0)
  {
    if (v67 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v72 = v14[5];
    if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
    {
      v73 = *(char *)(v4 + 160);
      v74 = *(char *)(v4 + 161);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v73;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v74;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_INFO, "LocationController,notifyLocationUnavailable,Required granularity,%{public}d,not achievable with active granularity,%{public}d,starting fine", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v13[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v93 = v14[5];
      v94 = *(char *)(v4 + 160);
      v95 = *(char *)(v4 + 161);
      *(_DWORD *)v101 = 67240448;
      *(_DWORD *)&v101[4] = v94;
      *(_WORD *)&v101[8] = 1026;
      *(_DWORD *)&v101[10] = v95;
      LODWORD(v98) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v93, 1, "LocationController,notifyLocationUnavailable,Required granularity,%{public}d,not achievable with active granularity,%{public}d,starting fine", v101, v98);
      v97 = (char *)v96;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v96);
      if (v97 != buf)
        free(v97);
    }
    buf[0] = 1;
    sub_100192DD0(v4, buf);
    return 0;
  }
  if (v67 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v68 = v14[5];
  if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
  {
    v69 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v70 = sub_100B30608(v69, buf);
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v70;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "LocationController,notifyLocationUnavailable,No location is available from any provider,notifying clients of location unavailable,now,%{public}.3f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v13[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v89 = v14[5];
    v90 = sub_1005EEB24();
    *(_DWORD *)v101 = 134349056;
    *(double *)&v101[4] = v90;
    LODWORD(v98) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v89, 1, "LocationController,notifyLocationUnavailable,No location is available from any provider,notifying clients of location unavailable,now,%{public}.3f", v101, v98);
    v92 = (char *)v91;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocationUnavailable(LocationProvider)", "%s\n", v91);
    if (v92 != buf)
      free(v92);
  }
  objc_msgSend(*(id *)(v4 + 656), "setNextFireDelay:", 1.79769313e308);
  *(_DWORD *)buf = 9;
  v11 = 1;
  sub_1006A5950(v4, (int *)buf, 1);
  return v11;
}

void sub_1001440EC(uint64_t a1, char *a2)
{
  NSObject *v4;
  int v5;
  _QWORD *v6;
  char v7;
  BOOL v8;
  NSObject *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint8_t buf[4];
  int v23;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "lost location from kDynamicLocationProvider,%{public}d,restarting all worse providers", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v16 = *a2;
    v20 = 67240192;
    v21 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "lost location from kDynamicLocationProvider,%{public}d,restarting all worse providers", &v20, 8);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::restartLessDesirableProviders(const DynamicLocationProvider &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v6 = *(_QWORD **)(a1 + 240);
  if (v6 != (_QWORD *)(a1 + 248))
  {
    v7 = 0;
    do
    {
      if (*((_DWORD *)v6 + 8))
        v8 = *((_BYTE *)v6 + 903) == 0;
      else
        v8 = 0;
      if (v8 && *((char *)v6 + 901) < *a2)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v9 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v10 = *((char *)v6 + 901);
          *(_DWORD *)buf = 67240192;
          v23 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "restarting worse location provider kDynamicLocationProvider,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v13 = *((char *)v6 + 901);
          v20 = 67240192;
          v21 = v13;
          LODWORD(v19) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "restarting worse location provider kDynamicLocationProvider,%{public}d", &v20, v19);
          v15 = (uint8_t *)v14;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::restartLessDesirableProviders(const DynamicLocationProvider &)", "%s\n", v14);
          if (v15 != buf)
            free(v15);
        }
        sub_1001B19A8(a1, *((_DWORD *)v6 + 8));
        v7 = 1;
      }
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v6[2];
          v8 = *v12 == (_QWORD)v6;
          v6 = v12;
        }
        while (!v8);
      }
      v6 = v12;
    }
    while (v12 != (_QWORD *)(a1 + 248));
    if ((v7 & 1) != 0)
      sub_100193388(a1);
  }
}

uint64_t sub_100144490(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  unsigned int v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  int v86;
  __int16 v87;
  double v88;
  uint8_t buf[4];
  const char *v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  unsigned int v100;
  __int16 v101;
  const char *v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  int v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  double v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  __int16 v127;
  double v128;

  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214C640);
  v4 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v30 = *(_QWORD *)(a2 + 4);
    v33 = *(_QWORD *)(a2 + 12);
    v37 = *(_QWORD *)(a2 + 20);
    v5 = *(_DWORD *)(a2 + 96);
    v31 = sub_10014D1E0(v5);
    v35 = *(_QWORD *)(a2 + 44);
    v39 = *(_QWORD *)(a2 + 60);
    v41 = *(_DWORD *)(a2 + 84);
    v43 = *(_QWORD *)(a2 + 88);
    v45 = *(_QWORD *)(a2 + 76);
    v6 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v7 = sub_100B30608(v6, buf) - *(double *)(a2 + 76);
    v8 = *(_QWORD *)(a2 + 28);
    v9 = *(_QWORD *)(a2 + 36);
    v10 = *(_QWORD *)(a2 + 52);
    v11 = *(_QWORD *)(a2 + 68);
    v12 = *(_QWORD *)(a2 + 184);
    v47 = a1;
    v13 = *(_DWORD *)(a2 + 128);
    v14 = sub_100B303DC();
    v15 = sub_100B309E0(v14);
    *(_DWORD *)buf = 136320002;
    v90 = "CL-unfiltered";
    v91 = 1024;
    v92 = 0;
    v93 = 2048;
    v94 = v30;
    v95 = 2048;
    v96 = v33;
    v97 = 2048;
    v98 = v37;
    v99 = 1024;
    v100 = v5;
    v101 = 2080;
    v102 = v31;
    v103 = 2048;
    v104 = v35;
    v105 = 2048;
    v106 = v39;
    v107 = 1024;
    v108 = v41;
    v109 = 2048;
    v110 = v43;
    v111 = 2048;
    v112 = v45;
    v113 = 2048;
    v114 = v7;
    v115 = 2048;
    v116 = v8;
    v117 = 2048;
    v118 = v9;
    v119 = 2048;
    v120 = v10;
    v121 = 2048;
    v122 = v11;
    v123 = 2048;
    v124 = v12;
    v125 = 1024;
    v126 = v13;
    a1 = v47;
    v127 = 2050;
    v128 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d,propagation_us,%{public}.3f", buf, 0xBAu);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    v48 = a1;
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214C640);
    v46 = qword_1022A02F8;
    v17 = *(_QWORD *)(a2 + 4);
    v18 = *(_QWORD *)(a2 + 12);
    v19 = *(_QWORD *)(a2 + 20);
    v20 = *(_DWORD *)(a2 + 96);
    v21 = sub_10014D1E0(v20);
    v22 = *(_QWORD *)(a2 + 44);
    v23 = *(_QWORD *)(a2 + 60);
    v24 = *(_DWORD *)(a2 + 84);
    v36 = *(_QWORD *)(a2 + 88);
    v40 = *(double *)(a2 + 76);
    v25 = sub_1005FECEC() - v40;
    v26 = *(_QWORD *)(a2 + 28);
    v32 = *(_QWORD *)(a2 + 36);
    v34 = *(_QWORD *)(a2 + 52);
    v38 = *(_QWORD *)(a2 + 68);
    v42 = *(_QWORD *)(a2 + 184);
    v44 = *(_DWORD *)(a2 + 128);
    v27 = sub_100B303DC();
    v49 = 136320002;
    v50 = "CL-unfiltered";
    v51 = 1024;
    v52 = 0;
    v53 = 2048;
    v54 = v17;
    v55 = 2048;
    v56 = v18;
    v57 = 2048;
    v58 = v19;
    v59 = 1024;
    v60 = v20;
    v61 = 2080;
    v62 = v21;
    v63 = 2048;
    v64 = v22;
    v65 = 2048;
    v66 = v23;
    v67 = 1024;
    v68 = v24;
    v69 = 2048;
    v70 = v36;
    v71 = 2048;
    v72 = v40;
    v73 = 2048;
    v74 = v25;
    v75 = 2048;
    v76 = v26;
    v77 = 2048;
    v78 = v32;
    v79 = 2048;
    v80 = v34;
    v81 = 2048;
    v82 = v38;
    v83 = 2048;
    v84 = v42;
    v85 = 1024;
    v86 = v44;
    v87 = 2050;
    v88 = sub_100B309E0(v27);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d,propagation_us,%{public}.3f", &v49, 186);
    v29 = (uint8_t *)v28;
    sub_100512490("LOCATION", 1, 0, 2, "void CLLocationController::notifyUnfilteredLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
    a1 = v48;
  }
  *(_DWORD *)buf = 10;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a2, 1, 0xFFFFFFFFLL, 0);
}

void sub_100144944(int *a1, __int32 a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  NSObject *v33;
  int v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t *v43;
  int v44;
  int v45;
  const char *v46;
  uint64_t *v47;
  int v48;
  int v49;
  const char *v50;
  uint64_t *v51;
  const char *v52;
  uint64_t *v53;
  uint64_t v54;
  int32x4_t v55;
  int v56;
  __int16 v57;
  int v58;
  int v59;
  int v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  void *v69;
  char v70;
  std::__shared_weak_count *v71;
  id v72;
  uint64_t buf;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;

  v55.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)&buf);
  sub_100B30A14(v7, &buf);
  LODWORD(buf) = 17;
  v55.i32[0] = 17;
  v55.i32[1] = sub_10142DEC4((int *)&buf);
  v8 = sub_1005EE584();
  LODWORD(buf) = 4;
  sub_1005FA6E8(v8, (unsigned int *)&buf, &v55, a1 + 1281, &v55.i32[2], a3, a4);
  v10 = *a3;
  if (*a3 < 5)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(a4 + 96);
      v13 = *(_QWORD *)(a4 + 4);
      v14 = *(_QWORD *)(a4 + 12);
      v15 = *(_QWORD *)(a4 + 20);
      LODWORD(buf) = 67240961;
      HIDWORD(buf) = v12;
      v74 = 2049;
      v75 = v13;
      v76 = 2049;
      v77 = v14;
      v78 = 2050;
      v79 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "onWifi2Notification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01lf", (uint8_t *)&buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v38 = *(_DWORD *)(a4 + 96);
      v39 = *(_QWORD *)(a4 + 4);
      v40 = *(_QWORD *)(a4 + 12);
      v41 = *(_QWORD *)(a4 + 20);
      v59 = 67240961;
      v60 = v38;
      v61 = 2049;
      v62 = v39;
      v63 = 2049;
      v64 = v40;
      v65 = 2050;
      v66 = v41;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "onWifi2Notification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01lf", &v59, 38);
      v43 = (uint64_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onWifi2Notification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v42);
      if (v43 != &buf)
        free(v43);
    }
    sub_100129CA0((uint64_t)&v59);
    v17 = *(_DWORD *)(a4 + 96);
    if (v17 == 11)
    {
      if (!a1[169])
      {
        v19 = a1[83];
        LODWORD(buf) = 9;
        sub_1001426CC((uint64_t)a1, v19, v16, (unsigned int *)&buf, (uint64_t)&v59);
      }
    }
    else
    {
      if (v17 != 10)
        goto LABEL_17;
      if (a1[169] == 1)
      {
        v18 = a1[86];
        LODWORD(buf) = 9;
        sub_1001426CC((uint64_t)a1, v18, v16, (unsigned int *)&buf, (uint64_t)&v59);
      }
    }
    v17 = *(_DWORD *)(a4 + 96);
LABEL_17:
    if (v17 != 11)
    {
      if (v17 == 10)
      {
        a1[169] = 0;
LABEL_27:

        v23 = v71;
        if (v71)
        {
          p_shared_owners = (unint64_t *)&v71->__shared_owners_;
          do
            v25 = __ldaxr(p_shared_owners);
          while (__stlxr(v25 - 1, p_shared_owners));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        if (v70 < 0)
          operator delete(v69);
        v26 = v68;
        if (v68)
        {
          v27 = (unint64_t *)&v68->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v67;
        if (v67)
        {
          v30 = (unint64_t *)&v67->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        return;
      }
      if (v17 != 1)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v20 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v21 = *(_DWORD *)(a4 + 96);
          v22 = *a3;
          LODWORD(buf) = 67240448;
          HIDWORD(buf) = v21;
          v74 = 1026;
          LODWORD(v75) = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,Unhandled location type in onWifi2Notification,%{public}d,notification,%{public}d", (uint8_t *)&buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v44 = *(_DWORD *)(a4 + 96);
          v45 = *a3;
          v55.i32[3] = 67240448;
          v56 = v44;
          v57 = 1026;
          v58 = v45;
          LODWORD(v54) = 14;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,Unhandled location type in onWifi2Notification,%{public}d,notification,%{public}d", (char *)&v55.u64[1] + 4, v54);
          v47 = (uint64_t *)v46;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onWifi2Notification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v46);
          if (v47 != &buf)
            free(v47);
        }
        goto LABEL_27;
      }
    }
    a1[169] = 1;
    sub_1001426CC((uint64_t)a1, a1[86], v16, (unsigned int *)a3, a4);
    goto LABEL_27;
  }
  if (v10 == 9)
  {
    v32 = a1[169];
    if (v32)
    {
      if (v32 == 1)
      {
        sub_1001426CC((uint64_t)a1, a1[86], v9, (unsigned int *)a3, a4);
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v37 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,Unavailable flagged when already in unavailable state", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          LOWORD(v59) = 0;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,Unavailable flagged when already in unavailable state", &v59, 2);
          v53 = (uint64_t *)v52;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onWifi2Notification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v52);
          if (v53 != &buf)
            free(v53);
        }
      }
    }
    else
    {
      sub_1001426CC((uint64_t)a1, a1[83], v9, (unsigned int *)a3, a4);
    }
    a1[169] = -1;
  }
  else if (v10 == 11)
  {
    sub_100160A08((uint64_t)a1, a4 + 816);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v33 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v34 = *a3;
      v35 = *(_DWORD *)(a4 + 96);
      LODWORD(buf) = 67240448;
      HIDWORD(buf) = v34;
      v74 = 1026;
      LODWORD(v75) = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,Suspect notification in onWifi2Notification,%{public}d,location type,%{public}d", (uint8_t *)&buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v48 = *a3;
      v49 = *(_DWORD *)(a4 + 96);
      v59 = 67240448;
      v60 = v48;
      v61 = 1026;
      LODWORD(v62) = v49;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,Suspect notification in onWifi2Notification,%{public}d,location type,%{public}d", &v59, 14);
      v51 = (uint64_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onWifi2Notification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v50);
      if (v51 != &buf)
        free(v51);
    }
    sub_1001426CC((uint64_t)a1, a1[83], v36, (unsigned int *)a3, a4);
  }
}

void sub_1001451DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100145214(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const char *v25;
  const char *v26;
  char *v27;
  _BOOL8 v28;
  uint64_t v29;
  double v30;
  int v31;
  uint64_t v32;
  int v38;
  int v39;
  int v40;
  int v41;
  void *v42;
  double v43;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  int v48;
  NSObject *v49;
  __int128 v50;
  double v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  int v62;
  uint64_t v63;
  double v64;
  NSObject *v65;
  int v66;
  uint64_t v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  int v75;
  uint64_t v76;
  double v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const char *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  const char *v89;
  id v90;
  double v91;
  double v92;
  NSObject *v93;
  __n128 v94;
  __n128 v95;
  const char *v96;
  NSObject *v97;
  const char *v98;
  NSObject *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  NSObject *v129;
  const char *v130;
  char *v131;
  const char *v132;
  char *v133;
  int v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  const char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  const char *v153;
  const char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  const char *v161;
  const char *v162;
  char *v163;
  const char *v164;
  char *v165;
  const char *v166;
  char *v167;
  int v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  double v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  double v179;
  const char *v180;
  char *v181;
  const char *v182;
  char *v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  char *v188;
  uint64_t v189;
  double v190;
  double v191;
  double v192;
  double v193;
  uint64_t v194;
  double v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  const char *v200;
  int v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  double v206;
  uint64_t v207;
  uint64_t v208;
  double v209;
  double v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  double v217;
  double v218;
  uint64_t v219;
  uint64_t v220;
  double v221;
  double v222;
  double v223;
  uint64_t v224;
  double v225;
  double v226;
  _BYTE *v227;
  double v228;
  _BYTE *v229;
  int v230;
  int v231;
  __int128 v232;
  double v233;
  double v234;
  void **v235;
  uint64_t v236;
  NSDictionary *(*v237)(uint64_t);
  void *v238;
  const char *v239;
  double v240[5];
  uint64_t v241;
  uint64_t v242;
  _BYTE v243[96];
  __int128 v244;
  __int128 v245;
  _BYTE v246[28];
  __int128 v247;
  _OWORD v248[3];
  _OWORD v249[3];
  __int128 v250;
  __int128 v251;
  _OWORD v252[2];
  uint64_t v253;
  int v254;
  int v255;
  uint64_t v256;
  int v257;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  std::__shared_weak_count *v263;
  void *v264;
  char v265;
  unint64_t v266;
  __int128 v267;
  std::__shared_weak_count *v268;
  id v269;
  char v270;
  _BYTE v271[12];
  __int16 v272;
  _BYTE v273[76];
  _BYTE v274[10];
  _BYTE v275[10];
  _BYTE v276[20];
  __int16 v277;
  uint64_t v278;
  __int16 v279;
  uint64_t v280;
  __int16 v281;
  uint64_t v282;
  __int16 v283;
  double v284;
  __int16 v285;
  int v286;
  __int16 v287;
  _BYTE v288[10];
  __int16 v289;
  int v290;
  __int16 v291;
  int v292;
  __int16 v293;
  double v294;
  _BYTE v295[96];
  _BYTE v296[60];
  _BYTE v297[24];
  double v298;
  int v299;
  float v300;
  double v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int16 v308;
  __int128 v309;
  uint64_t v310;
  int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  std::__shared_weak_count *v317;
  void *v318;
  char v319;
  std::__shared_weak_count *v320;
  id v321;
  _BYTE buf[160];
  __int16 v323;
  double v324;
  __int16 v325;
  int v326;
  __int16 v327;
  _BYTE v328[10];
  __int16 v329;
  int v330;
  __int16 v331;
  int v332;
  __int16 v333;
  double v334;
  std::__shared_weak_count *v335;
  std::__shared_weak_count *v336;
  uint64_t v337;
  uint64_t v338;
  void *__p;
  char v340;
  std::__shared_weak_count *v341;
  id v342;

  if (!sub_100148E64(a1, *(_DWORD *)(a3 + 96)))
    return 0;
  v270 = 0;
  sub_10011D234((uint64_t)v248, a3);
  if (*(_BYTE *)(a1 + 671)
    || *(_BYTE *)(a1 + 672)
    || !(*(unsigned int (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 288) + 440))(*(_QWORD *)(a1 + 288), v248))
  {
    goto LABEL_11;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v7 = *(_DWORD *)(a3 + 96);
    v8 = *(_QWORD *)(a3 + 4);
    v9 = *(_QWORD *)(a3 + 12);
    *(_DWORD *)buf = 67240705;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)&buf[8] = 2049;
    *(_QWORD *)&buf[10] = v8;
    *(_WORD *)&buf[18] = 2049;
    *(_QWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "location rejected by IM,locationType,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v184 = *(_DWORD *)(a3 + 96);
    v185 = *(_QWORD *)(a3 + 4);
    v186 = *(_QWORD *)(a3 + 12);
    *(_DWORD *)v295 = 67240705;
    *(_DWORD *)&v295[4] = v184;
    *(_WORD *)&v295[8] = 2049;
    *(_QWORD *)&v295[10] = v185;
    *(_WORD *)&v295[18] = 2049;
    *(_QWORD *)&v295[20] = v186;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "location rejected by IM,locationType,%{public}d,lat,%{private}.7lf,lon,%{private}.7lf", v295, 28);
    v188 = (char *)v187;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v187);
    if (v188 != buf)
      free(v188);
  }
  if (*(_BYTE *)(a1 + 665))
  {
LABEL_11:
    sub_100148544(a1, (uint64_t)v248);
    sub_100148918(a1, (uint64_t)v248);
    v10 = *(_QWORD *)(a1 + 304);
    if (v10)
    {
      v11 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v12 = sub_100B30608(v11, buf);
      sub_100F6A90C(v10, (uint64_t)v248, v12);
    }
    v247 = *(_OWORD *)((char *)v248 + 4);
    if ((*(unsigned int (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 288) + 376))(*(_QWORD *)(a1 + 288), v248))
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 288) + 400))(*(_QWORD *)(a1 + 288), a3);
      v13 = (*(uint64_t (**)(_QWORD, _OWORD *, uint64_t *))(**(_QWORD **)(a1 + 288) + 368))(*(_QWORD *)(a1 + 288), v248, &v253);
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214C640);
      v14 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        v230 = v13;
        v15 = *(_QWORD *)((char *)v248 + 4);
        v16 = *(_QWORD *)((char *)v248 + 12);
        v17 = *(_QWORD *)((char *)&v248[1] + 4);
        v18 = v250;
        v19 = sub_10014D1E0(v250);
        *(_DWORD *)buf = 136319235;
        *(_QWORD *)&buf[4] = "CL-trackrun";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v15;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v16;
        *(_WORD *)&buf[38] = 2048;
        *(_QWORD *)&buf[40] = v17;
        *(_WORD *)&buf[48] = 1026;
        *(_DWORD *)&buf[50] = v18;
        *(_WORD *)&buf[54] = 2082;
        *(_QWORD *)&buf[56] = v19;
        *(_WORD *)&buf[64] = 2050;
        *(_QWORD *)&buf[66] = *(_QWORD *)((char *)v249 + 12);
        *(_WORD *)&buf[74] = 2050;
        *(_QWORD *)&buf[76] = *(_QWORD *)((char *)&v249[1] + 12);
        *(_WORD *)&buf[84] = 1025;
        *(_DWORD *)&buf[86] = v254;
        *(_WORD *)&buf[90] = 1025;
        *(_DWORD *)&buf[92] = v255;
        *(_WORD *)&buf[96] = 1025;
        *(_DWORD *)&buf[98] = v258;
        *(_WORD *)&buf[102] = 1025;
        *(_DWORD *)&buf[104] = v257;
        *(_WORD *)&buf[108] = 1025;
        *(_DWORD *)&buf[110] = v259;
        *(_WORD *)&buf[114] = 1025;
        *(_DWORD *)&buf[116] = v260;
        *(_WORD *)&buf[120] = 2049;
        *(_QWORD *)&buf[122] = v261;
        *(_WORD *)&buf[130] = 2049;
        *(_QWORD *)&buf[132] = v256;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,course,%{public}.1f,timestamp,%{public}.3f,lapCount,%{private}d,laneNumber,%{private}d,laneCount,%{private}d,estimatedLaneNumber,%{private}d,estimatedLaneConfidence,%{private}d,trackProximity,%{private}d,distanceToTrackMeters,%{private}.1lf,trackId,%{private}llu", buf, 0x8Cu);
        v13 = v230;
      }
      if (sub_1001BFF7C(117, 2))
      {
        v231 = v13;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_10214C640);
        v20 = qword_1022A02F8;
        v21 = *(_QWORD *)((char *)v248 + 4);
        v22 = *(_QWORD *)((char *)v248 + 12);
        v23 = *(_QWORD *)((char *)&v248[1] + 4);
        v24 = v250;
        v25 = sub_10014D1E0(v250);
        *(_DWORD *)v295 = 136319235;
        *(_QWORD *)&v295[4] = "CL-trackrun";
        *(_WORD *)&v295[12] = 1024;
        *(_DWORD *)&v295[14] = 1;
        *(_WORD *)&v295[18] = 2048;
        *(_QWORD *)&v295[20] = v21;
        *(_WORD *)&v295[28] = 2048;
        *(_QWORD *)&v295[30] = v22;
        *(_WORD *)&v295[38] = 2048;
        *(_QWORD *)&v295[40] = v23;
        *(_WORD *)&v295[48] = 1026;
        *(_DWORD *)&v295[50] = v24;
        *(_WORD *)&v295[54] = 2082;
        *(_QWORD *)&v295[56] = v25;
        *(_WORD *)&v295[64] = 2050;
        *(_QWORD *)&v295[66] = *(_QWORD *)((char *)v249 + 12);
        *(_WORD *)&v295[74] = 2050;
        *(_QWORD *)&v295[76] = *(_QWORD *)((char *)&v249[1] + 12);
        *(_WORD *)&v295[84] = 1025;
        *(_DWORD *)&v295[86] = v254;
        *(_WORD *)&v295[90] = 1025;
        *(_DWORD *)&v295[92] = v255;
        *(_WORD *)v296 = 1025;
        *(_DWORD *)&v296[2] = v258;
        *(_WORD *)&v296[6] = 1025;
        *(_DWORD *)&v296[8] = v257;
        *(_WORD *)&v296[12] = 1025;
        *(_DWORD *)&v296[14] = v259;
        *(_WORD *)&v296[18] = 1025;
        *(_DWORD *)&v296[20] = v260;
        *(_WORD *)&v296[24] = 2049;
        *(_QWORD *)&v296[26] = v261;
        *(_WORD *)&v296[34] = 2049;
        *(_QWORD *)&v296[36] = v256;
        LODWORD(v189) = 140;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,course,%{public}.1f,timestamp,%{public}.3f,lapCount,%{private}d,laneNumber,%{private}d,laneCount,%{private}d,estimatedLaneNumber,%{private}d,estimatedLaneConfidence,%{private}d,trackProximity,%{private}d,distanceToTrackMeters,%{private}.1lf,trackId,%{private}llu", v295, v189);
        v27 = (char *)v26;
        sub_100512490("LOCATION", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v26);
        if (v27 != buf)
          free(v27);
        v13 = v231;
      }
    }
    else
    {
      v13 = 0;
    }
    sub_100149034((int *)a1, (uint64_t)v248);
    v29 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v30 = sub_100B30608(v29, buf);
    v31 = sub_1001493A4(a1, a2, (uint64_t)v248, v30);
    v270 = v31;
    *(_DWORD *)v243 = 0xFFFF;
    *(_OWORD *)&v243[4] = 0uLL;
    *(_OWORD *)&v243[20] = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)&v243[36] = _Q0;
    *(_OWORD *)&v243[52] = _Q0;
    v232 = _Q0;
    *(_OWORD *)&v243[68] = _Q0;
    *(_DWORD *)&v243[84] = 0;
    v244 = 0uLL;
    *(_QWORD *)&v243[88] = 0xBFF0000000000000;
    *(_QWORD *)((char *)&v245 + 4) = 0xBFF0000000000000;
    LODWORD(v245) = 0;
    HIDWORD(v245) = 0x7FFFFFFF;
    memset(v246, 0, 25);
    if (a2 == 7)
    {
      v38 = *(_BYTE *)(a1 + 673) ? 0 : v31;
      if (v38 == 1)
      {
        v244 = v250;
        v245 = v251;
        *(_OWORD *)v246 = v252[0];
        *(_OWORD *)&v246[12] = *(_OWORD *)((char *)v252 + 12);
        *(_OWORD *)&v243[32] = v248[2];
        *(_OWORD *)&v243[48] = v249[0];
        *(_OWORD *)&v243[64] = v249[1];
        *(_OWORD *)&v243[80] = v249[2];
        v39 = 1;
        *(_OWORD *)v243 = v248[0];
        *(_OWORD *)&v243[16] = v248[1];
        goto LABEL_41;
      }
    }
    if (*(_BYTE *)(a1 + 296))
      v40 = v31;
    else
      v40 = 0;
    if (v40 == 1)
    {
      v41 = sub_1006A5CA4(a1, (uint64_t)v243, (uint64_t)v248, v32, &v270);
    }
    else
    {
      if (*(_BYTE *)(a1 + 296))
      {
        v39 = 0;
        goto LABEL_41;
      }
      v41 = sub_1006A6390(a1, (uint64_t)v243, (uint64_t)v248, &v270);
    }
    v39 = v41;
LABEL_41:
    v42 = *(void **)(a1 + 1608);
    if (v42)
    {
      if (objc_msgSend(v42, "feedLocation:", a3))
      {
        v43 = -1.0;
        if (*(_QWORD *)(a1 + 1608))
        {
          v44 = +[CLLocationDerivedSpeedEstimator isSupportedForDerivedSpeedEstimate](CLLocationDerivedSpeedEstimator, "isSupportedForDerivedSpeedEstimate");
          v45 = -1.0;
          v46 = -1.0;
          if (v44)
          {
            objc_msgSend(*(id *)(a1 + 1608), "currentEstimate");
            v43 = v47;
          }
        }
        else
        {
          v45 = -1.0;
          v46 = -1.0;
        }
        v266 = *(_QWORD *)&v43;
        *(double *)&v267 = v45;
        *((double *)&v267 + 1) = v46;
        if (v270)
          goto LABEL_52;
        if (!*(_BYTE *)(a1 + 665))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v129 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning not notifying location with location derived speed", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            *(_WORD *)v295 = 0;
            LODWORD(v189) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "LocationController,#Warning not notifying location with location derived speed", v295, v189);
            v131 = (char *)v130;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v130);
            if (v131 != buf)
              free(v131);
          }
        }
      }
      else
      {
        v266 = 0xBFF0000000000000;
        v267 = v232;
      }
    }
    if (!v270 && !*(_BYTE *)(a1 + 665))
    {
LABEL_173:
      sub_1001477A8(a1);
      if (v270)
        v28 = 1;
      else
        v28 = *(_BYTE *)(a1 + 665) != 0;
      goto LABEL_176;
    }
LABEL_52:
    sub_10011D234((uint64_t)v295, (uint64_t)v248);
    if (*(_BYTE *)(a1 + 666))
      v48 = v39;
    else
      v48 = 0;
    if (v48 == 1)
    {
      if (*(double *)&v243[20] <= 0.0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v49 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "Notifying using location KF,but no location available", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          *(_WORD *)v271 = 0;
          LODWORD(v189) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "Notifying using location KF,but no location available", v271, v189);
          v183 = (char *)v182;
          sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v182);
          if (v183 != buf)
            free(v183);
        }
      }
      else
      {
        *(_OWORD *)v296 = v244;
        *(_OWORD *)&v296[16] = v245;
        *(_OWORD *)&v296[32] = *(_OWORD *)v246;
        *(_OWORD *)&v296[44] = *(_OWORD *)&v246[12];
        *(_OWORD *)&v295[32] = *(_OWORD *)&v243[32];
        *(_OWORD *)&v295[48] = *(_OWORD *)&v243[48];
        *(_OWORD *)&v295[64] = *(_OWORD *)&v243[64];
        *(_OWORD *)&v295[80] = *(_OWORD *)&v243[80];
        *(_OWORD *)v295 = *(_OWORD *)v243;
        *(_OWORD *)&v295[16] = *(_OWORD *)&v243[16];
      }
    }
    if (*(double *)(a1 + 224) >= 0.0)
      *(_QWORD *)&v295[20] = *(_QWORD *)(a1 + 224);
    if (v13)
      v50 = v247;
    else
      v50 = *(_OWORD *)&v295[4];
    *(_OWORD *)&v296[4] = v50;
    *(_DWORD *)&v296[40] = *(_DWORD *)&v296[36];
    *(_QWORD *)&v296[20] = *(_QWORD *)&v295[60];
    *(_DWORD *)&v296[44] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 328))(*(_QWORD *)(a1 + 288));
    v304 = *(_QWORD *)&v295[20];
    v305 = *(_QWORD *)&v295[28];
    v306 = *(_QWORD *)&v295[36];
    v307 = *(_QWORD *)&v295[68];
    v308 = 0;
    v309 = *(_OWORD *)&v295[4];
    v310 = *(_QWORD *)&v295[20];
    v311 = *(_DWORD *)&v296[36];
    v312 = *(_QWORD *)&v295[28];
    v313 = *(_QWORD *)&v295[36];
    v314 = *(_QWORD *)&v295[60];
    v315 = *(_QWORD *)&v295[68];
    v51 = COERCE_DOUBLE(v297);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 336))(*(_QWORD *)(a1 + 288)))
    {
      (*(void (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)(a1 + 288) + 344))(*(_QWORD *)(a1 + 288), v295, v297);
      LODWORD(v223) = (*(uint64_t (**)(_QWORD, _BYTE *, _BYTE *))(**(_QWORD **)(a1 + 288) + 360))(*(_QWORD *)(a1 + 288), v295, v297);
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214C640);
      v52 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        v207 = *(_QWORD *)&v295[4];
        v215 = *(_QWORD *)&v295[12];
        v219 = *(_QWORD *)&v295[20];
        v53 = *(_DWORD *)v296;
        v211 = sub_10014D1E0(*(unsigned int *)v296);
        v192 = *(double *)&v295[44];
        v193 = *(double *)&v295[60];
        v196 = *(_DWORD *)&v295[84];
        v200 = *(const char **)&v295[88];
        v203 = *(_QWORD *)&v295[76];
        v54 = sub_100B303DC();
        *(_DWORD *)v271 = 0;
        v55 = sub_100B30608(v54, v271);
        v56 = *(double *)&v295[76];
        v57 = *(_QWORD *)&v295[28];
        v58 = *(_QWORD *)&v295[36];
        v59 = *(_QWORD *)&v295[52];
        v60 = *(_QWORD *)&v295[68];
        v61 = v298;
        v62 = *(_DWORD *)&v296[32];
        LODWORD(v190) = v308;
        v63 = sub_100B303DC();
        v64 = sub_100B309E0(v63);
        *(_DWORD *)buf = 136321026;
        *(_QWORD *)&buf[4] = "CL-viofused";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v207;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v215;
        *(_WORD *)&buf[38] = 2048;
        *(_QWORD *)&buf[40] = v219;
        *(_WORD *)&buf[48] = 1024;
        *(_DWORD *)&buf[50] = v53;
        *(_WORD *)&buf[54] = 2080;
        *(_QWORD *)&buf[56] = v211;
        *(_WORD *)&buf[64] = 2048;
        *(double *)&buf[66] = v192;
        *(_WORD *)&buf[74] = 2048;
        *(double *)&buf[76] = v193;
        *(_WORD *)&buf[84] = 1024;
        *(_DWORD *)&buf[86] = v196;
        *(_WORD *)&buf[90] = 2048;
        *(_QWORD *)&buf[92] = v200;
        *(_WORD *)&buf[100] = 2048;
        *(_QWORD *)&buf[102] = v203;
        *(_WORD *)&buf[110] = 2048;
        *(double *)&buf[112] = v55 - v56;
        *(_WORD *)&buf[120] = 2048;
        *(_QWORD *)&buf[122] = v57;
        *(_WORD *)&buf[130] = 2048;
        *(_QWORD *)&buf[132] = v58;
        *(_WORD *)&buf[140] = 2048;
        *(_QWORD *)&buf[142] = v59;
        *(_WORD *)&buf[150] = 2048;
        *(_QWORD *)&buf[152] = v60;
        v323 = 2048;
        v324 = v61;
        v325 = 1024;
        v326 = v62;
        v327 = 1024;
        *(_DWORD *)v328 = LOBYTE(v223) & 1;
        *(_WORD *)&v328[4] = 1024;
        *(_DWORD *)&v328[6] = LOBYTE(v223) & 4;
        v329 = 1024;
        v330 = LOBYTE(v223) & 2;
        v331 = 1024;
        v332 = LODWORD(v190);
        v333 = 2048;
        v334 = v64;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d,isLocationFused,%d,isLocationPropagated,%d,isCourseFused,%d,isCoordinateFused,%d,propagation_us,%.3f", buf, 0xD2u);
        v51 = COERCE_DOUBLE(v297);
      }
      if (sub_1001BFF7C(117, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_10214C640);
        v209 = *(double *)&v295[4];
        v213 = *(_QWORD *)&v295[12];
        v217 = *(double *)&v295[20];
        v221 = *(double *)&qword_1022A02F8;
        v134 = *(_DWORD *)v296;
        v135 = sub_10014D1E0(*(unsigned int *)v296);
        v136 = *(_QWORD *)&v295[44];
        v137 = *(_QWORD *)&v295[60];
        v198 = *(_DWORD *)&v295[84];
        v202 = *(const char **)&v295[88];
        v205 = *(double *)&v295[76];
        v138 = sub_1005FECEC();
        v139 = *(double *)&v295[76];
        v140 = *(_QWORD *)&v295[28];
        v141 = *(_QWORD *)&v295[36];
        v142 = *(_QWORD *)&v295[52];
        v143 = *(_QWORD *)&v295[68];
        v191 = v298;
        LODWORD(v192) = *(_DWORD *)&v296[32];
        LODWORD(v193) = v308;
        v144 = sub_100B303DC();
        v145 = sub_100B309E0(v144);
        *(_DWORD *)v271 = 136321026;
        *(_QWORD *)&v271[4] = "CL-viofused";
        v272 = 1024;
        *(_DWORD *)v273 = 1;
        *(_WORD *)&v273[4] = 2048;
        *(double *)&v273[6] = v209;
        *(_WORD *)&v273[14] = 2048;
        *(_QWORD *)&v273[16] = v213;
        *(_WORD *)&v273[24] = 2048;
        *(double *)&v273[26] = v217;
        *(_WORD *)&v273[34] = 1024;
        *(_DWORD *)&v273[36] = v134;
        *(_WORD *)&v273[40] = 2080;
        *(_QWORD *)&v273[42] = v135;
        *(_WORD *)&v273[50] = 2048;
        *(_QWORD *)&v273[52] = v136;
        *(_WORD *)&v273[60] = 2048;
        *(_QWORD *)&v273[62] = v137;
        *(_WORD *)&v273[70] = 1024;
        *(_DWORD *)&v273[72] = v198;
        *(_WORD *)v274 = 2048;
        *(_QWORD *)&v274[2] = v202;
        *(_WORD *)v275 = 2048;
        *(double *)&v275[2] = v205;
        *(_WORD *)v276 = 2048;
        *(double *)&v276[2] = v138 - v139;
        *(_WORD *)&v276[10] = 2048;
        *(_QWORD *)&v276[12] = v140;
        v277 = 2048;
        v278 = v141;
        v279 = 2048;
        v280 = v142;
        v281 = 2048;
        v282 = v143;
        v283 = 2048;
        v284 = v191;
        v285 = 1024;
        v286 = LODWORD(v192);
        v287 = 1024;
        *(_DWORD *)v288 = LOBYTE(v223) & 1;
        *(_WORD *)&v288[4] = 1024;
        *(_DWORD *)&v288[6] = LOBYTE(v223) & 4;
        v289 = 1024;
        v290 = LOBYTE(v223) & 2;
        v291 = 1024;
        v292 = LODWORD(v193);
        v293 = 2048;
        v294 = v145;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, *(_QWORD *)&v221, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d,isLocationFused,%d,isLocationPropagated,%d,isCourseFused,%d,isCoordinateFused,%d,propagation_us,%.3f", v271, 210, v191, v192, v193, v198, v202, v205, v209,
          v213,
          v217,
          v221,
          v223,
          COERCE_DOUBLE(v297),
          *(double *)&v232,
          *((double *)&v232 + 1),
          v233,
          v234,
          (_DWORD)v235,
          v236,
          (_DWORD)v237,
          (_DWORD)v238,
          (_DWORD)v239,
          v240[0]);
        v147 = (char *)v146;
        sub_100512490("LOCATION", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v146);
        if (v147 != buf)
          free(v147);
        v51 = *(double *)&v227;
      }
    }
    if (*(_BYTE *)(a1 + 667)
      && (*(_BYTE *)(a1 + 668) || *(_BYTE *)(a1 + 669))
      && (*(unsigned int (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a1 + 288) + 192))(*(_QWORD *)(a1 + 288), v295, COERCE_DOUBLE(*(_QWORD *)&v51)))
    {
      if (qword_1022A02F0 != -1)
        dispatch_once(&qword_1022A02F0, &stru_10214C640);
      v65 = qword_1022A02F8;
      if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
      {
        v212 = *(_QWORD *)&v295[4];
        v220 = *(_QWORD *)&v295[12];
        v224 = *(_QWORD *)&v295[20];
        v226 = v51;
        v66 = *(_DWORD *)v296;
        v216 = sub_10014D1E0(*(unsigned int *)v296);
        v194 = *(_QWORD *)&v295[44];
        v197 = *(_QWORD *)&v295[60];
        v201 = *(_DWORD *)&v295[84];
        v204 = *(_QWORD *)&v295[88];
        v208 = *(_QWORD *)&v295[76];
        v67 = sub_100B303DC();
        *(_DWORD *)v271 = 0;
        v68 = sub_100B30608(v67, v271);
        v69 = *(double *)&v295[76];
        v70 = *(_QWORD *)&v295[28];
        v71 = *(_QWORD *)&v295[36];
        v72 = *(_QWORD *)&v295[52];
        v73 = *(_QWORD *)&v295[68];
        v74 = v298;
        v75 = *(_DWORD *)&v296[32];
        v76 = sub_100B303DC();
        v77 = sub_100B309E0(v76);
        *(_DWORD *)buf = 136320002;
        *(_QWORD *)&buf[4] = "CL-mapmatched";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v212;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v220;
        *(_WORD *)&buf[38] = 2048;
        *(_QWORD *)&buf[40] = v224;
        *(_WORD *)&buf[48] = 1024;
        *(_DWORD *)&buf[50] = v66;
        *(_WORD *)&buf[54] = 2080;
        *(_QWORD *)&buf[56] = v216;
        *(_WORD *)&buf[64] = 2048;
        *(_QWORD *)&buf[66] = v194;
        *(_WORD *)&buf[74] = 2048;
        *(_QWORD *)&buf[76] = v197;
        *(_WORD *)&buf[84] = 1024;
        *(_DWORD *)&buf[86] = v201;
        *(_WORD *)&buf[90] = 2048;
        *(_QWORD *)&buf[92] = v204;
        *(_WORD *)&buf[100] = 2048;
        *(_QWORD *)&buf[102] = v208;
        *(_WORD *)&buf[110] = 2048;
        *(double *)&buf[112] = v68 - v69;
        *(_WORD *)&buf[120] = 2048;
        *(_QWORD *)&buf[122] = v70;
        *(_WORD *)&buf[130] = 2048;
        *(_QWORD *)&buf[132] = v71;
        *(_WORD *)&buf[140] = 2048;
        *(_QWORD *)&buf[142] = v72;
        *(_WORD *)&buf[150] = 2048;
        *(_QWORD *)&buf[152] = v73;
        v323 = 2048;
        v324 = v74;
        v325 = 1024;
        v326 = v75;
        v327 = 2048;
        *(double *)v328 = v77;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d,propagation_us,%.3f", buf, 0xBAu);
        v51 = v226;
      }
      if (sub_1001BFF7C(117, 2))
      {
        v228 = v51;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02F0 != -1)
          dispatch_once(&qword_1022A02F0, &stru_10214C640);
        v214 = *(_QWORD *)&v295[4];
        v218 = *(double *)&v295[12];
        v222 = *(double *)&v295[20];
        v225 = *(double *)&qword_1022A02F8;
        v168 = *(_DWORD *)v296;
        v169 = sub_10014D1E0(*(unsigned int *)v296);
        v170 = *(_QWORD *)&v295[44];
        v171 = *(_QWORD *)&v295[60];
        LODWORD(v200) = *(_DWORD *)&v295[84];
        v206 = *(double *)&v295[88];
        v210 = *(double *)&v295[76];
        v172 = sub_1005FECEC();
        v173 = *(double *)&v295[76];
        v174 = *(_QWORD *)&v295[28];
        v175 = *(_QWORD *)&v295[36];
        v176 = *(_QWORD *)&v295[52];
        v177 = *(_QWORD *)&v295[68];
        v195 = v298;
        v199 = *(_DWORD *)&v296[32];
        v178 = sub_100B303DC();
        v179 = sub_100B309E0(v178);
        *(_DWORD *)v271 = 136320002;
        *(_QWORD *)&v271[4] = "CL-mapmatched";
        v272 = 1024;
        *(_DWORD *)v273 = 1;
        *(_WORD *)&v273[4] = 2048;
        *(_QWORD *)&v273[6] = v214;
        *(_WORD *)&v273[14] = 2048;
        *(double *)&v273[16] = v218;
        *(_WORD *)&v273[24] = 2048;
        *(double *)&v273[26] = v222;
        *(_WORD *)&v273[34] = 1024;
        *(_DWORD *)&v273[36] = v168;
        *(_WORD *)&v273[40] = 2080;
        *(_QWORD *)&v273[42] = v169;
        *(_WORD *)&v273[50] = 2048;
        *(_QWORD *)&v273[52] = v170;
        *(_WORD *)&v273[60] = 2048;
        *(_QWORD *)&v273[62] = v171;
        *(_WORD *)&v273[70] = 1024;
        *(_DWORD *)&v273[72] = (_DWORD)v200;
        *(_WORD *)v274 = 2048;
        *(double *)&v274[2] = v206;
        *(_WORD *)v275 = 2048;
        *(double *)&v275[2] = v210;
        *(_WORD *)v276 = 2048;
        *(double *)&v276[2] = v172 - v173;
        *(_WORD *)&v276[10] = 2048;
        *(_QWORD *)&v276[12] = v174;
        v277 = 2048;
        v278 = v175;
        v279 = 2048;
        v280 = v176;
        v281 = 2048;
        v282 = v177;
        v283 = 2048;
        v284 = v195;
        v285 = 1024;
        v286 = v199;
        v287 = 2048;
        *(double *)v288 = v179;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, *(_QWORD *)&v225, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d,propagation_us,%.3f", v271, 186, v190, v192, v195, v199, v200, v206, v210,
          v214,
          v218,
          v222,
          v225,
          v228,
          *(double *)&v232,
          *((double *)&v232 + 1),
          v233,
          v234,
          (_DWORD)v235,
          *(double *)&v236);
        v181 = (char *)v180;
        sub_100512490("LOCATION", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v180);
        if (v181 != buf)
          free(v181);
        v51 = *(double *)&v229;
      }
    }
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 336))(*(_QWORD *)(a1 + 288)))
      (*(void (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a1 + 288) + 352))(*(_QWORD *)(a1 + 288), v295, COERCE_DOUBLE(*(_QWORD *)&v51));
    if (*(_DWORD *)v296 <= 8u && ((1 << v296[0]) & 0x1D0) != 0)
    {
      *(_OWORD *)&v295[44] = v232;
      *(_OWORD *)&v295[60] = v232;
    }
    if (sub_1006A1224(a1, (uint64_t)v295, *(uint64_t *)&v51))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v78 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v79 = *(_QWORD *)&v295[4];
        v80 = *(_QWORD *)&v295[12];
        v81 = *(_QWORD *)&v295[20];
        v82 = *(_DWORD *)v296;
        v83 = sub_10014D1E0(*(unsigned int *)v296);
        *(_DWORD *)buf = 134286083;
        *(_QWORD *)&buf[4] = v79;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v80;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v81;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v82;
        *(_WORD *)&buf[38] = 2082;
        *(_QWORD *)&buf[40] = v83;
        *(_WORD *)&buf[48] = 2049;
        *(_QWORD *)&buf[50] = *(_QWORD *)&v295[28];
        *(_WORD *)&buf[58] = 2050;
        *(_QWORD *)&buf[60] = *(_QWORD *)&v295[36];
        *(_WORD *)&buf[68] = 2050;
        *(_QWORD *)&buf[70] = v302;
        *(_WORD *)&buf[78] = 2050;
        *(_QWORD *)&buf[80] = v303;
        *(_WORD *)&buf[88] = 2049;
        *(double *)&buf[90] = v300;
        *(_WORD *)&buf[98] = 1026;
        *(_DWORD *)&buf[100] = v299;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "DEM,query,%{private}.7f,%{private}.7f,HorUnc,%{public}.2lf,Type,%{public}d,%{public}s,Alt,%{private}.2f,AltUnc,%{public}.2f,GroundAlt,%{public}.2lf,GroundAltUnc,%{public}.2lf,Undulation,%{private}.3lf,UndulationModel,%{public}d,", buf, 0x68u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v148 = qword_1022A0028;
        v149 = *(_QWORD *)&v295[4];
        v150 = *(_QWORD *)&v295[12];
        v151 = *(_QWORD *)&v295[20];
        v152 = *(_DWORD *)v296;
        v153 = sub_10014D1E0(*(unsigned int *)v296);
        *(_DWORD *)v271 = 134286083;
        *(_QWORD *)&v271[4] = v149;
        v272 = 2049;
        *(_QWORD *)v273 = v150;
        *(_WORD *)&v273[8] = 2050;
        *(_QWORD *)&v273[10] = v151;
        *(_WORD *)&v273[18] = 1026;
        *(_DWORD *)&v273[20] = v152;
        *(_WORD *)&v273[24] = 2082;
        *(_QWORD *)&v273[26] = v153;
        *(_WORD *)&v273[34] = 2049;
        *(_QWORD *)&v273[36] = *(_QWORD *)&v295[28];
        *(_WORD *)&v273[44] = 2050;
        *(_QWORD *)&v273[46] = *(_QWORD *)&v295[36];
        *(_WORD *)&v273[54] = 2050;
        *(_QWORD *)&v273[56] = v302;
        *(_WORD *)&v273[64] = 2050;
        *(_QWORD *)&v273[66] = v303;
        *(_WORD *)&v273[74] = 2049;
        *(double *)v274 = v300;
        *(_WORD *)&v274[8] = 1026;
        *(_DWORD *)v275 = v299;
        LODWORD(v189) = 104;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v148, 1, "DEM,query,%{private}.7f,%{private}.7f,HorUnc,%{public}.2lf,Type,%{public}d,%{public}s,Alt,%{private}.2f,AltUnc,%{public}.2f,GroundAlt,%{public}.2lf,GroundAltUnc,%{public}.2lf,Undulation,%{private}.3lf,UndulationModel,%{public}d,", v271, v189);
        v155 = (char *)v154;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v154);
        if (v155 != buf)
          free(v155);
      }
    }
    if ((*(unsigned int (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a1 + 288) + 224))(*(_QWORD *)(a1 + 288), v295, COERCE_DOUBLE(*(_QWORD *)&v51)))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v84 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v85 = *(_QWORD *)&v295[4];
        v86 = *(_QWORD *)&v295[12];
        v87 = *(_QWORD *)&v295[20];
        v88 = *(_DWORD *)v296;
        v89 = sub_10014D1E0(*(unsigned int *)v296);
        *(_DWORD *)buf = 134285571;
        *(_QWORD *)&buf[4] = v85;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v86;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v87;
        *(_WORD *)&buf[32] = 1026;
        *(_DWORD *)&buf[34] = v88;
        *(_WORD *)&buf[38] = 2082;
        *(_QWORD *)&buf[40] = v89;
        *(_WORD *)&buf[48] = 2049;
        *(_QWORD *)&buf[50] = *(_QWORD *)&v295[28];
        *(_WORD *)&buf[58] = 2050;
        *(_QWORD *)&buf[60] = *(_QWORD *)&v295[36];
        *(_WORD *)&buf[68] = 2050;
        *(double *)&buf[70] = v300;
        *(_WORD *)&buf[78] = 1026;
        *(_DWORD *)&buf[80] = v299;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "BaroAlt,%{private}.7f,%{private}.7f,HorUnc,%{public}.2lf,Type,%{public}d,%{public}s,Alt,%{private}.2f,AltUnc,%{public}.2f,undulation,%{public}.3f,undulationModel,%{public}d", buf, 0x54u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v156 = qword_1022A0028;
        v157 = *(_QWORD *)&v295[4];
        v158 = *(_QWORD *)&v295[12];
        v159 = *(_QWORD *)&v295[20];
        v160 = *(_DWORD *)v296;
        v161 = sub_10014D1E0(*(unsigned int *)v296);
        *(_DWORD *)v271 = 134285571;
        *(_QWORD *)&v271[4] = v157;
        v272 = 2049;
        *(_QWORD *)v273 = v158;
        *(_WORD *)&v273[8] = 2050;
        *(_QWORD *)&v273[10] = v159;
        *(_WORD *)&v273[18] = 1026;
        *(_DWORD *)&v273[20] = v160;
        *(_WORD *)&v273[24] = 2082;
        *(_QWORD *)&v273[26] = v161;
        *(_WORD *)&v273[34] = 2049;
        *(_QWORD *)&v273[36] = *(_QWORD *)&v295[28];
        *(_WORD *)&v273[44] = 2050;
        *(_QWORD *)&v273[46] = *(_QWORD *)&v295[36];
        *(_WORD *)&v273[54] = 2050;
        *(double *)&v273[56] = v300;
        *(_WORD *)&v273[64] = 1026;
        *(_DWORD *)&v273[66] = v299;
        LODWORD(v189) = 84;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v156, 1, "BaroAlt,%{private}.7f,%{private}.7f,HorUnc,%{public}.2lf,Type,%{public}d,%{public}s,Alt,%{private}.2f,AltUnc,%{public}.2f,undulation,%{public}.3f,undulationModel,%{public}d", v271, v189);
        v163 = (char *)v162;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v162);
        if (v163 != buf)
          free(v163);
      }
    }
    v241 = 0;
    v242 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 288) + 232))(*(_QWORD *)(a1 + 288), &v241))
    {
      v90 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLGnssProvider"));
      if (v90)
        objc_msgSend(v90, "setBarometricAltitudeAWDData:", v241, v242);
    }
    *(_QWORD *)&v296[48] = 0;
    if ((v299 - 1) <= 1)
      *(double *)&v296[48] = *(double *)&v295[28] + v300;
    v91 = *(double *)&v295[20];
    if (*(double *)&v295[20] >= 0.0 && *(double *)&v295[20] != *(double *)(a1 + 224))
    {
      if (*(double *)&v295[20] < 1.0)
        v91 = 1.0;
      *(double *)&v295[20] = v91;
    }
    v92 = *(double *)&v295[36];
    if (*(double *)&v295[36] >= 0.0)
    {
      if (*(double *)&v295[36] < 3.0)
        v92 = 3.0;
      *(double *)&v295[36] = v92;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214C620);
    v93 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134286593;
      *(_QWORD *)&buf[4] = *(_QWORD *)&v295[4];
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = *(_QWORD *)&v295[12];
      *(_WORD *)&buf[22] = 2050;
      *(_QWORD *)&buf[24] = *(_QWORD *)&v295[20];
      *(_WORD *)&buf[32] = 2049;
      *(_QWORD *)&buf[34] = *(_QWORD *)&v295[44];
      *(_WORD *)&buf[42] = 2049;
      *(_QWORD *)&buf[44] = *(_QWORD *)&v295[60];
      *(_WORD *)&buf[52] = 1026;
      *(_DWORD *)&buf[54] = *(_DWORD *)v296;
      *(_WORD *)&buf[58] = 2049;
      *(_QWORD *)&buf[60] = *(_QWORD *)&v295[28];
      *(_WORD *)&buf[68] = 2050;
      *(_QWORD *)&buf[70] = *(_QWORD *)&v295[36];
      *(_WORD *)&buf[78] = 2049;
      *(_QWORD *)&buf[80] = *(_QWORD *)&v296[48];
      *(_WORD *)&buf[88] = 2050;
      *(_QWORD *)&buf[90] = *(_QWORD *)&v295[52];
      *(_WORD *)&buf[98] = 2050;
      *(_QWORD *)&buf[100] = *(_QWORD *)&v295[68];
      *(_WORD *)&buf[108] = 1025;
      *(_DWORD *)&buf[110] = *(_DWORD *)&v296[44];
      *(_WORD *)&buf[114] = 2050;
      *(_QWORD *)&buf[116] = *(_QWORD *)&v295[76];
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f, ellipsoidalAlt, %{private}.1f, speedUnc, %{public}.1f, courseUnc, %{public}.1f, signalEnv, %{private}d, timestamp, %{public}.3f", buf, 0x7Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      *(_DWORD *)v271 = 134286593;
      *(_QWORD *)&v271[4] = *(_QWORD *)&v295[4];
      v272 = 2049;
      *(_QWORD *)v273 = *(_QWORD *)&v295[12];
      *(_WORD *)&v273[8] = 2050;
      *(_QWORD *)&v273[10] = *(_QWORD *)&v295[20];
      *(_WORD *)&v273[18] = 2049;
      *(_QWORD *)&v273[20] = *(_QWORD *)&v295[44];
      *(_WORD *)&v273[28] = 2049;
      *(_QWORD *)&v273[30] = *(_QWORD *)&v295[60];
      *(_WORD *)&v273[38] = 1026;
      *(_DWORD *)&v273[40] = *(_DWORD *)v296;
      *(_WORD *)&v273[44] = 2049;
      *(_QWORD *)&v273[46] = *(_QWORD *)&v295[28];
      *(_WORD *)&v273[54] = 2050;
      *(_QWORD *)&v273[56] = *(_QWORD *)&v295[36];
      *(_WORD *)&v273[64] = 2049;
      *(_QWORD *)&v273[66] = *(_QWORD *)&v296[48];
      *(_WORD *)&v273[74] = 2050;
      *(_QWORD *)v274 = *(_QWORD *)&v295[52];
      *(_WORD *)&v274[8] = 2050;
      *(_QWORD *)v275 = *(_QWORD *)&v295[68];
      *(_WORD *)&v275[8] = 1025;
      *(_DWORD *)v276 = *(_DWORD *)&v296[44];
      *(_WORD *)&v276[4] = 2050;
      *(_QWORD *)&v276[6] = *(_QWORD *)&v295[76];
      LODWORD(v189) = 124;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f, ellipsoidalAlt, %{private}.1f, speedUnc, %{public}.1f, courseUnc, %{public}.1f, signalEnv, %{private}d, timestamp, %{public}.3f", v271, v189);
      v133 = (char *)v132;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v132);
      if (v133 != buf)
        free(v133);
    }
    if (sub_10011CE64(*(double *)&v295[4], *(double *)&v295[12]))
    {
      v96 = sub_10014D1E0(*(unsigned int *)v296);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      v97 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136380931;
        *(_QWORD *)&buf[4] = "client, null";
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v96;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        *(_DWORD *)v271 = 136380931;
        *(_QWORD *)&v271[4] = "client, null";
        v272 = 2081;
        *(_QWORD *)v273 = v96;
        LODWORD(v189) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", v271, v189);
        v165 = (char *)v164;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v164);
        if (v165 != buf)
          free(v165);
      }
      *(_QWORD *)&v240[0] = _NSConcreteStackBlock;
      *(_QWORD *)&v240[1] = 3221225472;
      *(_QWORD *)&v240[2] = sub_1006A7440;
      *(_QWORD *)&v240[3] = &unk_102131FE8;
      *(_QWORD *)&v240[4] = v96;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), v240);
    }
    v95.n128_u64[0] = *(_QWORD *)&v295[4];
    v94.n128_u64[0] = -1.0;
    if (*(double *)&v295[4] == -1.0)
    {
      v95.n128_u64[0] = *(_QWORD *)&v295[12];
      if (*(double *)&v295[12] == -1.0)
      {
        v98 = sub_10014D1E0(*(unsigned int *)v296);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v99 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = "client, sentinel";
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = v98;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214C620);
          *(_DWORD *)v271 = 136380931;
          *(_QWORD *)&v271[4] = "client, sentinel";
          v272 = 2081;
          *(_QWORD *)v273 = v98;
          LODWORD(v189) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", v271, v189);
          v167 = (char *)v166;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v166);
          if (v167 != buf)
            free(v167);
        }
        v235 = _NSConcreteStackBlock;
        v236 = 3221225472;
        v237 = sub_1006A74E8;
        v238 = &unk_102131FE8;
        v239 = v98;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), &v235);
      }
    }
    *(_DWORD *)buf = 39;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, _QWORD, __n128, __n128))(*(_QWORD *)a1 + 152))(a1, buf, v295, 1, 0xFFFFFFFFLL, 0, v94, v95);
    if (_os_feature_enabled_impl("CoreLocation", "CLLoiLocationProvider"))
    {
      sub_1001595D0(a1 + 352, (uint64_t)v295, buf);
      *(_OWORD *)v296 = *(_OWORD *)&buf[96];
      *(_OWORD *)&v296[16] = *(_OWORD *)&buf[112];
      *(_OWORD *)&v296[32] = *(_OWORD *)&buf[128];
      *(_OWORD *)&v296[44] = *(_OWORD *)&buf[140];
      *(_OWORD *)&v295[32] = *(_OWORD *)&buf[32];
      *(_OWORD *)&v295[48] = *(_OWORD *)&buf[48];
      *(_OWORD *)&v295[64] = *(_OWORD *)&buf[64];
      *(_OWORD *)&v295[80] = *(_OWORD *)&buf[80];
      *(_OWORD *)v295 = *(_OWORD *)buf;
      *(_OWORD *)&v295[16] = *(_OWORD *)&buf[16];
    }
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v295, 1, 0xFFFFFFFFLL, 0);
    *(_QWORD *)v271 = 0xBFF0000000000000;
    HIBYTE(v234) = 0;
    (*(void (**)(_QWORD, _BYTE *, char *, _BYTE *))(**(_QWORD **)(a1 + 288) + 288))(*(_QWORD *)(a1 + 288), v295, (char *)&v234 + 7, v271);
    if (HIBYTE(v234))
    {
      sub_100129CA0((uint64_t)buf);
      v337 = *(_QWORD *)v271;
      v338 = *(_QWORD *)&v295[76];
      LODWORD(v234) = 20;
      (*(void (**)(uint64_t, double *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v234, buf, 1, 0xFFFFFFFFLL, 0);

      v100 = v341;
      if (v341)
      {
        p_shared_owners = (unint64_t *)&v341->__shared_owners_;
        do
          v102 = __ldaxr(p_shared_owners);
        while (__stlxr(v102 - 1, p_shared_owners));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      if (v340 < 0)
        operator delete(__p);
      v103 = v336;
      if (v336)
      {
        v104 = (unint64_t *)&v336->__shared_owners_;
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = v335;
      if (v335)
      {
        v107 = (unint64_t *)&v335->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
          std::__shared_weak_count::__release_weak(v106);
        }
      }
    }
    v109 = *(_QWORD *)(a1 + 312);
    if (v109)
      sub_100E5F198(v109, (uint64_t)v295, v301);
    sub_100151FD4(a1 + 5200, (uint64_t)v295);

    v110 = v320;
    if (v320)
    {
      v111 = (unint64_t *)&v320->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
    if (v319 < 0)
      operator delete(v318);
    v113 = v317;
    if (v317)
    {
      v114 = (unint64_t *)&v317->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    v116 = v316;
    if (v316)
    {
      v117 = (unint64_t *)&v316->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    goto LABEL_173;
  }
  v28 = 0;
LABEL_176:

  v119 = v268;
  if (v268)
  {
    v120 = (unint64_t *)&v268->__shared_owners_;
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if (v265 < 0)
    operator delete(v264);
  v122 = v263;
  if (v263)
  {
    v123 = (unint64_t *)&v263->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  v125 = v262;
  if (v262)
  {
    v126 = (unint64_t *)&v262->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
  return v28;
}

void sub_1001476B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  sub_1004B4F0C((uint64_t)&a61);
  _Unwind_Resume(a1);
}

BOOL sub_100147788(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 2848);
  return v1 && *(_BYTE *)(v1 + 128) != 0;
}

void sub_1001477A8(uint64_t a1)
{
  uint64_t v2;
  double v3;
  char *v4;
  std::string::size_type size;
  uint64_t *v6;
  uint64_t *v7;
  NSObject *v8;
  _BYTE *v9;
  uint64_t v10;
  void **v11;
  std::string *v12;
  uint64_t i;
  uint64_t v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  void **v34;
  std::string *v35;
  char *v36;
  uint64_t v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  std::string v42;
  _BYTE v43[12];
  __int16 v44;
  _BYTE v45[24];
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  _BYTE __p[12];
  __int16 v51;
  _BYTE v52[24];
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;

  v2 = sub_100B303DC();
  *(_DWORD *)__p = 0;
  v3 = sub_100B30608(v2, __p);
  if (v3 - *(double *)(a1 + 1928) >= 900.0)
  {
    *(double *)(a1 + 1928) = v3;
    sub_100197040();
    sub_10075AA9C((uint64_t)__p);
    if (v52[9] >= 0)
      v4 = __p;
    else
      v4 = *(char **)__p;
    sub_1015A2E04(&v42, v4);
    if ((v52[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v42.__r_.__value_.__l.__size_;
    if (!size)
      std::string::assign(&v42, "Local");
    v6 = &qword_1022A0000;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214C620);
    v7 = &qword_1022A0000;
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_100197040();
      v9 = v43;
      sub_10075A1D4((uint64_t)v43);
      if (v45[9] < 0)
        v9 = *(_BYTE **)v43;
      v10 = sub_100197040();
      sub_10075A5A0(v10, (uint64_t)v40);
      if (v41 >= 0)
        v11 = v40;
      else
        v11 = (void **)v40[0];
      v12 = &v42;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = (std::string *)v42.__r_.__value_.__r.__words[0];
      *(_DWORD *)__p = 136446979;
      *(_QWORD *)&__p[4] = v9;
      v51 = 2081;
      *(_QWORD *)v52 = v11;
      *(_WORD *)&v52[8] = 2082;
      *(_QWORD *)&v52[10] = v12;
      *(_WORD *)&v52[18] = 1026;
      *(_DWORD *)&v52[20] = 10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@ClxVersion, Timer, os, %{public}s, model, %{private}s, build, %{public}s, triage, %{public}d", __p, 0x26u);
      if (v41 < 0)
        operator delete(v40[0]);
      if ((v45[9] & 0x80000000) != 0)
        operator delete(*(void **)v43);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      v31 = qword_1022A0048;
      sub_100197040();
      v32 = v40;
      sub_10075A1D4((uint64_t)v40);
      if (v41 < 0)
        v32 = (void **)v40[0];
      v33 = sub_100197040();
      sub_10075A5A0(v33, (uint64_t)v38);
      if (v39 >= 0)
        v34 = v38;
      else
        v34 = (void **)v38[0];
      v35 = &v42;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v35 = (std::string *)v42.__r_.__value_.__r.__words[0];
      *(_DWORD *)v43 = 136446979;
      *(_QWORD *)&v43[4] = v32;
      v44 = 2081;
      *(_QWORD *)v45 = v34;
      *(_WORD *)&v45[8] = 2082;
      *(_QWORD *)&v45[10] = v35;
      *(_WORD *)&v45[18] = 1026;
      *(_DWORD *)&v45[20] = 10;
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v31, 0, "@ClxVersion, Timer, os, %{public}s, model, %{private}s, build, %{public}s, triage, %{public}d", v43, 38);
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::checkStateLogging()", "%s\n", v36);
      if (v36 != __p)
        free(v36);
    }
    for (i = 0; i != 312; i += 24)
    {
      v14 = a1 + i;
      v15 = *(double *)(a1 + i + 1632);
      if (v3 - v15 > 900.0)
      {
        if (v15 >= 1.0)
          v16 = v3 - v15;
        else
          v16 = -1.0;
        if (v6[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v17 = v7[9];
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = v6;
          v19 = *(_QWORD *)(v14 + 1616);
          v20 = *(unsigned __int8 *)(a1 + i + 1624);
          v21 = *(_QWORD *)(v14 + 1632);
          v22 = sub_100B303DC();
          v23 = sub_100B309E0(v22);
          *(_DWORD *)__p = 136447490;
          *(_QWORD *)&__p[4] = v19;
          v51 = 1026;
          *(_DWORD *)v52 = v20;
          *(_WORD *)&v52[4] = 2050;
          *(_QWORD *)&v52[6] = v21;
          *(_WORD *)&v52[14] = 2050;
          *(double *)&v52[16] = v16;
          v53 = 2050;
          v54 = v3;
          v55 = 2050;
          v56 = v23;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@ClxSnapshot, %{public}s, %{public}d, last, %{public}.1f, delta, %{public}.1f, now, %{public}.3f, propagation_us, %{public}.3f", __p, 0x3Au);
          v6 = v18;
          v7 = &qword_1022A0000;
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (v6[8] != -1)
            dispatch_once(&qword_1022A0040, &stru_10214C620);
          v24 = v7[9];
          v25 = *(_QWORD *)(v14 + 1616);
          v26 = *(unsigned __int8 *)(a1 + i + 1624);
          v27 = *(_QWORD *)(v14 + 1632);
          v28 = sub_100B303DC();
          v29 = sub_100B309E0(v28);
          *(_DWORD *)v43 = 136447490;
          *(_QWORD *)&v43[4] = v25;
          v44 = 1026;
          *(_DWORD *)v45 = v26;
          *(_WORD *)&v45[4] = 2050;
          *(_QWORD *)&v45[6] = v27;
          *(_WORD *)&v45[14] = 2050;
          *(double *)&v45[16] = v16;
          v46 = 2050;
          v47 = v3;
          v48 = 2050;
          v49 = v29;
          LODWORD(v37) = 58;
          v30 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "@ClxSnapshot, %{public}s, %{public}d, last, %{public}.1f, delta, %{public}.1f, now, %{public}.3f, propagation_us, %{public}.3f", v43, v37);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::checkStateLogging()", "%s\n", v30);
          v7 = &qword_1022A0000;
          if (v30 != __p)
            free(v30);
        }
      }
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
}

void sub_100147D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100147DF4(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t v7;
  double v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t result;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  id v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BOOL4 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double v34;
  char *v35;
  uint64_t v36;
  _QWORD v37[6];
  _QWORD v38[5];
  int v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  _BYTE buf[24];
  uint64_t v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;

  if (!*(_BYTE *)(a1 + 2419))
  {
    if (!*(_QWORD *)(a1 + 2448))
      *(_QWORD *)(a1 + 2448) = objc_alloc_init(CLNanoRegistry);
    sub_100197040();
    if (sub_1000C4240())
      v4 = (unsigned __int16)objc_msgSend(*(id *)(a1 + 2448), "isAFire6OrOlderWatchPaired") ^ 1;
    else
      v4 = 0;
    *(_WORD *)(a1 + 2418) = v4 | 0x100;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v5 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(a1 + 2419))
        v6 = *(_BYTE *)(a1 + 2418) != 0;
      else
        v6 = 1;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,fIsPhoneThatDoesNotNeedTrackRunProcessing,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      if (*(_BYTE *)(a1 + 2419))
        v26 = *(_BYTE *)(a1 + 2418) != 0;
      else
        v26 = 1;
      v39 = 67240192;
      LODWORD(v40) = v26;
      v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,fIsPhoneThatDoesNotNeedTrackRunProcessing,%{public}d", &v39, 8);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)", "%s\n", v27);
      if (v27 != buf)
        free(v27);
    }
  }
  if (*(_BYTE *)(a1 + 2481))
  {
LABEL_26:
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v10 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a1 + 2424);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#cltr,Not querying for region support due to backoff timer in effect,current,%{public}.0f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      v24 = *(_QWORD *)(a1 + 2424);
      v39 = 134349056;
      v40 = v24;
      LODWORD(v36) = 12;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltr,Not querying for region support due to backoff timer in effect,current,%{public}.0f", &v39, v36);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)", "%s\n", v25);
      if (v25 != buf)
        free(v25);
    }
    goto LABEL_31;
  }
  if (*(_BYTE *)(a1 + 2417)
    && (v7 = sub_100B303DC(), *(_DWORD *)buf = 1, sub_100B30608(v7, buf) - *(double *)(a1 + 2440) <= 86400.0)
    || (*(_DWORD *)(a2 + 96) - 6) < 3
    || ((v8 = *(double *)(a2 + 20), v8 > 0.0) ? (v9 = v8 < 100.0) : (v9 = 0), !v9 || *(_BYTE *)(a1 + 2480)))
  {
    if (!*(_BYTE *)(a1 + 2481))
      goto LABEL_31;
    goto LABEL_26;
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217C3A0);
  v13 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a2 + 4);
    v15 = *(_QWORD *)(a2 + 12);
    v16 = *(_QWORD *)(a2 + 20);
    v17 = sub_1005EEB24();
    v18 = sub_100B303DC();
    v19 = sub_100B309E0(v18);
    *(_DWORD *)buf = 134284545;
    *(_QWORD *)&buf[4] = v14;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v15;
    *(_WORD *)&buf[22] = 2048;
    v50 = v16;
    v51 = 2050;
    v52 = v17;
    v53 = 2050;
    v54 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cltr,Querying for region support,ll,%{private}.7lf,%{private}.7lf,hunc,%.1lf,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v28 = qword_10229FC58;
    v29 = *(_QWORD *)(a2 + 4);
    v30 = *(_QWORD *)(a2 + 12);
    v31 = *(_QWORD *)(a2 + 20);
    v32 = sub_1005EEB24();
    v33 = sub_100B303DC();
    v34 = sub_100B309E0(v33);
    v39 = 134284545;
    v40 = v29;
    v41 = 2049;
    v42 = v30;
    v43 = 2048;
    v44 = v31;
    v45 = 2050;
    v46 = v32;
    v47 = 2050;
    v48 = v34;
    LODWORD(v36) = 52;
    v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 0, "#cltr,Querying for region support,ll,%{private}.7lf,%{private}.7lf,hunc,%.1lf,now,%{public}.3f,propagation_us,%{public}.3f", &v39, v36);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::isTrackRunControllerEnabled(const CLDaemonLocation &)", "%s\n", v35);
    if (v35 != buf)
      free(v35);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v50 = 0;
  v37[5] = a1;
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472;
  v38[2] = sub_100C67B84;
  v38[3] = &unk_10215A148;
  v38[4] = buf;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_100C67D44;
  v37[3] = &unk_10215A198;
  v37[4] = buf;
  if (!*(_QWORD *)(a1 + 2432))
  {
    v20 = objc_alloc_init((Class)GEOMapFeatureAccess);
    *(_QWORD *)(a1 + 2432) = v20;
    if (v20)
    {
      objc_msgSend(v20, "setAllowNetworkTileLoad:", 1);
      objc_msgSend(*(id *)(a1 + 2432), "setAllowStaleData:", 1);
      objc_msgSend(*(id *)(a1 + 2432), "setAllowOfflineData:", 1);
    }
  }
  v21 = *(double *)(a2 + 4);
  v22 = *(double *)(a2 + 12);
  *(_BYTE *)(a1 + 2480) = 1;
  v23 = sub_100B303DC();
  v39 = 1;
  *(double *)(a1 + 2440) = sub_100B30608(v23, &v39);
  sub_100D823D8(a1 + 2496);
  objc_msgSend(*(id *)(a1 + 2432), "findRunningTrackFlagsNear:radius:handler:completionHandler:", v38, v37, v21, v22, *(double *)(a2 + 20) * 5.0);
  _Block_object_dispose(buf, 8);
LABEL_31:
  result = *(_QWORD *)(a1 + 2464);
  if (result)
  {
    result = sub_100148518(result);
    if ((_DWORD)result)
      return sub_1013A68A4();
  }
  return result;
}

void sub_1001484F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

BOOL sub_100148518(uint64_t a1)
{
  return *(_BYTE *)(a1 + 34) && *(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 96) != a1 + 56;
}

void sub_100148544(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  float v7;
  float v8;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  float v15;
  _DWORD *v16;
  _DWORD *v17;
  _BOOL4 v18;
  _DWORD *v19;
  _DWORD *v20;
  void *v21;
  uint64_t v22[3];
  void **v23;
  _DWORD v24[6];
  int v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  _DWORD *v29;

  v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 0xFFFFFFFE) == 0xA)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    if ((v4 & 0xFFFFFFF7) != 1 || *(_BYTE *)(a1 + 5080) == 0)
    {
      v6 = 0;
      goto LABEL_25;
    }
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v7 = *(double *)(a2 + 36);
    LODWORD(v23) = 188;
    *(float *)v24 = v7;
    v25 = 4;
    v27 = (_DWORD *)sub_1006AB798(&v26, &v23);
    sub_1001F8644((uint64_t)v24);
  }
  v6 = sub_1006A7644(a1);
  if (v6)
  {
    sub_1006A78DC(a1, (_DWORD *)(a1 + 320), a2);
    v29 = (_DWORD *)(a1 + 320);
    v8 = *(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 320), (uint64_t)&unk_101B9EB60, &v29)
                   + 132);
    LODWORD(v23) = 186;
    *(float *)v24 = v8;
    v25 = 4;
    v9 = v27;
    if ((unint64_t)v27 >= v28)
    {
      v10 = (_DWORD *)sub_1006AB798(&v26, &v23);
    }
    else
    {
      *v27 = 186;
      v10 = v9 + 10;
      sub_1001F8F88((uint64_t)(v9 + 2), (uint64_t)v24);
    }
    v27 = v10;
    sub_1001F8644((uint64_t)v24);
    v29 = (_DWORD *)(a1 + 320);
    v13 = *((_DWORD *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 320), (uint64_t)&unk_101B9EB60, &v29) + 48);
    LODWORD(v23) = 184;
    v24[0] = v13;
    v25 = 0;
    v12 = v27;
    if ((unint64_t)v27 < v28)
      goto LABEL_16;
LABEL_17:
    v14 = (_DWORD *)sub_1006AB798(&v26, &v23);
    goto LABEL_18;
  }
  v11 = *(_DWORD *)(a2 + 96);
  LODWORD(v23) = 184;
  v24[0] = v11;
  v25 = 0;
  v12 = v27;
  if ((unint64_t)v27 >= v28)
    goto LABEL_17;
LABEL_16:
  *v12 = 184;
  v14 = v12 + 10;
  sub_1001F8F88((uint64_t)(v12 + 2), (uint64_t)v24);
LABEL_18:
  v27 = v14;
  sub_1001F8644((uint64_t)v24);
  v15 = *(double *)(a2 + 36);
  LODWORD(v23) = 185;
  *(float *)v24 = v15;
  v25 = 4;
  v16 = v27;
  if ((unint64_t)v27 >= v28)
  {
    v17 = (_DWORD *)sub_1006AB798(&v26, &v23);
  }
  else
  {
    *v27 = 185;
    v17 = v16 + 10;
    sub_1001F8F88((uint64_t)(v16 + 2), (uint64_t)v24);
  }
  v27 = v17;
  sub_1001F8644((uint64_t)v24);
  LODWORD(v29) = 0;
  v18 = sub_1001594F4((float64_t *)(a2 + 4), (double *)(a2 + 12), &v29);
  LODWORD(v23) = 189;
  v24[0] = v18;
  v25 = 0;
  v19 = v27;
  if ((unint64_t)v27 >= v28)
  {
    v20 = (_DWORD *)sub_1006AB798(&v26, &v23);
  }
  else
  {
    *v27 = 189;
    v20 = v19 + 10;
    sub_1001F8F88((uint64_t)(v19 + 2), (uint64_t)v24);
  }
  v27 = v20;
  sub_1001F8644((uint64_t)v24);
  v21 = *(void **)(a1 + 5096);
  memset(v22, 0, sizeof(v22));
  sub_1006AB68C(v22, v26, (uint64_t)v27, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v27 - v26) >> 3));
  objc_msgSend(v21, "setMeasurements:", sub_1006A7590(v22));
  v23 = (void **)v22;
  sub_1006AB5A0(&v23);
  v23 = (void **)&v26;
  sub_1006AB5A0(&v23);
LABEL_25:
  sub_10015C3F8(a1, a2, v6);
}

void sub_1001488A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  sub_1001F8644(v18);
  a13 = (void **)&a18;
  sub_1006AB5A0(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100148918(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  double v79;
  __int16 v80;
  double v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  double v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  __int16 v102;
  double v103;
  uint8_t buf[4];
  const char *v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  unsigned int v115;
  __int16 v116;
  const char *v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  int v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  double v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  int v141;
  __int16 v142;
  double v143;
  __int16 v144;
  int v145;
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  double v151;

  if (qword_1022A02F0 != -1)
    dispatch_once(&qword_1022A02F0, &stru_10214C640);
  v4 = qword_1022A02F8;
  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a2 + 4);
    v34 = *(_QWORD *)(a2 + 12);
    v38 = *(_QWORD *)(a2 + 20);
    v6 = *(_DWORD *)(a2 + 96);
    v36 = sub_10014D1E0(v6);
    v44 = *(_QWORD *)(a2 + 44);
    v48 = *(_QWORD *)(a2 + 60);
    v50 = *(_DWORD *)(a2 + 84);
    v52 = *(_QWORD *)(a2 + 88);
    v54 = *(_QWORD *)(a2 + 76);
    v7 = sub_100B303DC();
    *(_DWORD *)buf = 0;
    v8 = sub_100B30608(v7, buf) - *(double *)(a2 + 76);
    v9 = *(_QWORD *)(a2 + 28);
    v10 = *(_QWORD *)(a2 + 36);
    v11 = *(_QWORD *)(a2 + 52);
    v32 = *(_QWORD *)(a2 + 68);
    v33 = *(_QWORD *)(a2 + 184);
    v12 = *(float *)(a2 + 476);
    v40 = *(_DWORD *)(a2 + 472);
    v13 = *(_DWORD *)(a2 + 128);
    v42 = *(_DWORD *)(a2 + 132);
    v46 = *(_DWORD *)(a2 + 136);
    v14 = sub_100B303DC();
    v15 = sub_100B309E0(v14);
    *(_DWORD *)buf = 136321027;
    v105 = "CL-prefiltered";
    v106 = 1024;
    v107 = 0;
    v108 = 2048;
    v109 = v5;
    v110 = 2048;
    v111 = v34;
    v112 = 2048;
    v113 = v38;
    v114 = 1026;
    v115 = v6;
    v116 = 2082;
    v117 = v36;
    v118 = 2050;
    v119 = v44;
    v120 = 2050;
    v121 = v48;
    v122 = 1026;
    v123 = v50;
    v124 = 2050;
    v125 = v52;
    v126 = 2050;
    v127 = v54;
    v128 = 2050;
    v129 = v8;
    v130 = 2049;
    v131 = v9;
    v132 = 2050;
    v133 = v10;
    v134 = 2050;
    v135 = v11;
    v136 = 2050;
    v137 = v32;
    v138 = 2050;
    v139 = v33;
    v140 = 1026;
    v141 = v13;
    v142 = 2049;
    v143 = v12;
    v144 = 1026;
    v145 = v40;
    v146 = 1024;
    v147 = v42;
    v148 = 1024;
    v149 = v46;
    v150 = 2050;
    v151 = v15;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course,%{public}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampGps,%{public}.3lf,integrity,%{public}d,undulation,%{private}.3lf,undulationModel,%{public}d,referenceFrame,%d,rawReferenceFrame,%d,propagation_us,%{public}.3f", buf, 0xD6u);
  }
  if (sub_1001BFF7C(117, 2))
  {
    bzero(buf, 0x65CuLL);
    v31 = a1;
    if (qword_1022A02F0 != -1)
      dispatch_once(&qword_1022A02F0, &stru_10214C640);
    v55 = qword_1022A02F8;
    v17 = *(_QWORD *)(a2 + 4);
    v18 = *(_QWORD *)(a2 + 12);
    v19 = *(_QWORD *)(a2 + 20);
    v20 = *(_DWORD *)(a2 + 96);
    v21 = sub_10014D1E0(v20);
    v22 = *(_QWORD *)(a2 + 44);
    v23 = *(_QWORD *)(a2 + 60);
    v24 = *(_DWORD *)(a2 + 84);
    v37 = *(_QWORD *)(a2 + 88);
    v43 = *(double *)(a2 + 76);
    v25 = sub_1005FECEC() - v43;
    v26 = *(_QWORD *)(a2 + 28);
    v35 = *(_QWORD *)(a2 + 36);
    v41 = *(_QWORD *)(a2 + 52);
    v45 = *(_QWORD *)(a2 + 68);
    v47 = *(_QWORD *)(a2 + 184);
    v27 = *(float *)(a2 + 476);
    v49 = *(_DWORD *)(a2 + 472);
    v39 = *(_DWORD *)(a2 + 128);
    v51 = *(_DWORD *)(a2 + 132);
    v53 = *(_DWORD *)(a2 + 136);
    v28 = sub_100B303DC();
    v56 = 136321027;
    v57 = "CL-prefiltered";
    v58 = 1024;
    v59 = 0;
    v60 = 2048;
    v61 = v17;
    v62 = 2048;
    v63 = v18;
    v64 = 2048;
    v65 = v19;
    v66 = 1026;
    v67 = v20;
    v68 = 2082;
    v69 = v21;
    v70 = 2050;
    v71 = v22;
    v72 = 2050;
    v73 = v23;
    v74 = 1026;
    v75 = v24;
    v76 = 2050;
    v77 = v37;
    v78 = 2050;
    v79 = v43;
    v80 = 2050;
    v81 = v25;
    v82 = 2049;
    v83 = v26;
    v84 = 2050;
    v85 = v35;
    v86 = 2050;
    v87 = v41;
    v88 = 2050;
    v89 = v45;
    v90 = 2050;
    v91 = v47;
    v92 = 1026;
    v93 = v39;
    v94 = 2049;
    v95 = v27;
    v96 = 1026;
    v97 = v49;
    v98 = 1024;
    v99 = v51;
    v100 = 1024;
    v101 = v53;
    v102 = 2050;
    v103 = sub_100B309E0(v28);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%{public}d,%{public}s,Speed,%{public}.2f,Course,%{public}.2f,Confidence,%{public}d,Lifespan,%{public}.3f,LocationTimestamp,%{public}.3f,Age,%{public}.3f,Altitude,%{private}.3f,AltitudeAccuracy,%{public}.3f,SpeedAccuracy,%{public}.3f,CourseAccuracy,%{public}.1f,timestampGps,%{public}.3lf,integrity,%{public}d,undulation,%{private}.3lf,undulationModel,%{public}d,referenceFrame,%d,rawReferenceFrame,%d,propagation_us,%{public}.3f", &v56, 214);
    v30 = (uint8_t *)v29;
    sub_100512490("LOCATION", 1, 0, 2, "void CLLocationController::notifyPrefilteredLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v29);
    if (v30 != buf)
      free(v30);
    a1 = v31;
  }
  *(_DWORD *)buf = 33;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a2, 1, 0xFFFFFFFFLL, 0);
}

uint64_t sub_100148E64(uint64_t a1, int a2)
{
  NSObject *v3;
  _BOOL4 v4;
  uint64_t result;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if ((a2 - 1) < 0xB && ((0x7EFu >> (a2 - 1)) & 1) != 0)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "unsupported location type,%{public}d", buf, 8u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v8[0] = 67240192;
    v8[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "unsupported location type,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLLocationController::isLocationTypeSupported(CLLocationType)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
    return 0;
  }
  return result;
}

int *sub_100149034(int *result, uint64_t a2)
{
  int *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint8_t buf[4];
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;

  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
  {
    v3 = result;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v5 = *(_QWORD *)(a2 + 76);
      v6 = *(_QWORD *)(a2 + 160);
      v7 = *(_QWORD *)(a2 + 168);
      v9 = *(_QWORD *)(a2 + 176);
      v8 = *(_QWORD *)(a2 + 184);
      v10 = *(_QWORD *)(a2 + 4);
      v11 = *(_QWORD *)(a2 + 12);
      v12 = *(_QWORD *)(a2 + 20);
      v13 = *(_QWORD *)(a2 + 28);
      v14 = *(_QWORD *)(a2 + 36);
      v15 = *(_QWORD *)(a2 + 44);
      v16 = *(_QWORD *)(a2 + 52);
      v17 = *(_QWORD *)(a2 + 60);
      v18 = *(_QWORD *)(a2 + 68);
      *(_DWORD *)buf = 134352385;
      v64 = v5;
      v65 = 2050;
      v66 = v8;
      v67 = 2050;
      v68 = v6;
      v69 = 2050;
      v70 = v7;
      v71 = 2050;
      v72 = v9;
      v73 = 2049;
      v74 = v10;
      v75 = 2049;
      v76 = v11;
      v77 = 2050;
      v78 = v12;
      v79 = 2049;
      v80 = v13;
      v81 = 2050;
      v82 = v14;
      v83 = 2050;
      v84 = v15;
      v85 = 2050;
      v86 = v16;
      v87 = 2050;
      v88 = v17;
      v89 = 2050;
      v90 = v18;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM,timestamp,%{public}.3lf,timestampGps,%{public}.3lf,odometer,%{public}.3lf,deltaDist,%{public}.3lf,deltaDistUnc,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf,alt,%{private}.3lf,vunc,%{public}.1lf,speed,%{public}.3lf,sunc,%{public}.3lf,course,%{public}.3lf,cunc,%{public}.3lf", buf, 0x8Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v19 = *(_QWORD *)(a2 + 76);
      v20 = *(_QWORD *)(a2 + 160);
      v21 = *(_QWORD *)(a2 + 168);
      v23 = *(_QWORD *)(a2 + 176);
      v22 = *(_QWORD *)(a2 + 184);
      v24 = *(_QWORD *)(a2 + 4);
      v25 = *(_QWORD *)(a2 + 12);
      v26 = *(_QWORD *)(a2 + 20);
      v27 = *(_QWORD *)(a2 + 28);
      v28 = *(_QWORD *)(a2 + 36);
      v29 = *(_QWORD *)(a2 + 44);
      v30 = *(_QWORD *)(a2 + 52);
      v31 = *(_QWORD *)(a2 + 60);
      v32 = *(_QWORD *)(a2 + 68);
      v35 = 134352385;
      v36 = v19;
      v37 = 2050;
      v38 = v22;
      v39 = 2050;
      v40 = v20;
      v41 = 2050;
      v42 = v21;
      v43 = 2050;
      v44 = v23;
      v45 = 2049;
      v46 = v24;
      v47 = 2049;
      v48 = v25;
      v49 = 2050;
      v50 = v26;
      v51 = 2049;
      v52 = v27;
      v53 = 2050;
      v54 = v28;
      v55 = 2050;
      v56 = v29;
      v57 = 2050;
      v58 = v30;
      v59 = 2050;
      v60 = v31;
      v61 = 2050;
      v62 = v32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "GPSODOM,timestamp,%{public}.3lf,timestampGps,%{public}.3lf,odometer,%{public}.3lf,deltaDist,%{public}.3lf,deltaDistUnc,%{public}.3lf,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf,alt,%{private}.3lf,vunc,%{public}.1lf,speed,%{public}.3lf,sunc,%{public}.3lf,course,%{public}.3lf,cunc,%{public}.3lf", &v35, 142);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::gpsOdometerHelper(const CLLocationProvider_Type::NotificationData &)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
    result = *(int **)(a2 + 800);
    if (result && (result = (int *)sub_10104BD1C(result), (unint64_t)result > 1)
      || *(double *)(a2 + 160) >= 0.0 && *(double *)(a2 + 168) >= 0.0 && *(double *)(a2 + 176) >= 0.0)
    {
      *(_DWORD *)buf = 23;
      return (int *)(*(uint64_t (**)(int *, uint8_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, buf, a2, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

uint64_t sub_1001493A4(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  uint64_t *v26;
  NSObject *v27;
  const char *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  const char *v37;
  uint64_t **v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t **v43;
  _QWORD *v44;
  NSObject *v45;
  uint64_t v46;
  double v48;
  NSObject *v49;
  uint64_t v50;
  const char *v51;
  uint64_t **v52;
  _QWORD *v53;
  double v54;
  double v55;
  NSObject *v56;
  uint64_t **v57;
  _QWORD *v58;
  const char *v59;
  _QWORD *v60;
  double v61;
  uint64_t v62;
  _DWORD *v63;
  double v64;
  NSObject *v65;
  uint64_t **v66;
  _QWORD *v67;
  int v68;
  int v69;
  BOOL v70;
  double v71;
  double v72;
  double v73;
  NSObject *v74;
  uint64_t **v75;
  _QWORD *v76;
  const char *v77;
  _QWORD *v78;
  uint64_t **v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  double v84;
  double v85;
  double v86;
  int *v87;
  NSObject *v88;
  uint64_t **v89;
  _QWORD *v90;
  const char *v91;
  _QWORD *v92;
  int v93;
  uint64_t **v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  double v99;
  void *v100;
  double v101;
  double v102;
  int v103;
  int v104;
  int *v105;
  NSObject *v106;
  uint64_t **v107;
  _QWORD *v108;
  NSObject *v109;
  int v110;
  char v111;
  NSObject *v112;
  const char *v113;
  int *v114;
  NSObject *v115;
  unsigned __int8 *v116;
  double v117;
  double v118;
  NSObject *v119;
  uint64_t **v120;
  _QWORD *v121;
  const char *v122;
  _QWORD *v123;
  int v124;
  uint64_t **v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t **v131;
  _QWORD *v132;
  const char *v133;
  _QWORD *v134;
  int v135;
  uint64_t **v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  const char *v141;
  NSObject *v142;
  uint64_t v143;
  const char *v144;
  uint64_t **v145;
  _QWORD *v146;
  uint64_t **v147;
  const char *v148;
  char *v149;
  NSObject *v150;
  const char *v151;
  NSObject *v152;
  uint64_t **v153;
  _QWORD *v154;
  const char *v155;
  _QWORD *v156;
  int v157;
  uint64_t **v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t **v164;
  _QWORD *v165;
  const char *v166;
  _QWORD *v167;
  int v168;
  uint64_t **v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  NSObject *v174;
  uint64_t **v175;
  _QWORD *v176;
  const char *v177;
  _QWORD *v178;
  int v179;
  uint64_t **v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t **v188;
  _QWORD *v189;
  double v190;
  const char *v191;
  char *v192;
  uint64_t v193;
  uint64_t **v194;
  _QWORD *v195;
  int v196;
  const char *v197;
  char *v198;
  uint64_t v199;
  uint64_t **v200;
  _QWORD *v201;
  const char *v202;
  char *v203;
  uint64_t v204;
  uint64_t **v205;
  _QWORD *v206;
  const char *v207;
  _QWORD *v208;
  double v209;
  uint64_t v210;
  const char *v211;
  char *v212;
  const char *v213;
  int v214;
  const char *v215;
  char *v216;
  const char *v217;
  const char *v218;
  char *v219;
  const char *v220;
  char *v221;
  uint64_t v222;
  uint64_t **v223;
  _QWORD *v224;
  const char *v225;
  _QWORD *v226;
  int v227;
  uint64_t **v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  double v233;
  const char *v234;
  char *v235;
  const char *v236;
  char *v237;
  uint64_t v238;
  uint64_t **v239;
  _QWORD *v240;
  const char *v241;
  _QWORD *v242;
  int v243;
  uint64_t **v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  char *v249;
  uint64_t v250;
  uint64_t **v251;
  _QWORD *v252;
  const char *v253;
  _QWORD *v254;
  int v255;
  uint64_t **v256;
  _QWORD *v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  const char *v261;
  char *v262;
  uint64_t v263;
  int *v264;
  int *v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  _BOOL4 v270;
  uint64_t **v271;
  int *v272;
  int v273;
  _BYTE v274[14];
  const char *v275;
  __int16 v276;
  _QWORD *v277;
  __int16 v278;
  double v279;
  __int16 v280;
  _BYTE v281[14];
  __int16 v282;
  uint64_t v283;
  __int16 v284;
  uint64_t v285;
  __int16 v286;
  double v287;
  __int16 v288;
  int v289;
  __int16 v290;
  double v291;
  __int16 v292;
  double v293;
  _BYTE buf[14];
  const char *v295;
  __int16 v296;
  _QWORD *v297;
  __int16 v298;
  double v299;
  __int16 v300;
  _BYTE v301[14];
  __int16 v302;
  uint64_t v303;
  __int16 v304;
  uint64_t v305;
  __int16 v306;
  double v307;
  __int16 v308;
  int v309;
  __int16 v310;
  double v311;
  __int16 v312;
  double v313;

  v273 = a2;
  if (!a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v33 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "LocationController,#Warning, not notifying clients when provider is None", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    *(_WORD *)v274 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning, not notifying clients when provider is None", v274, 2);
    goto LABEL_294;
  }
  v9 = a1 + 248;
  v8 = *(_QWORD *)(a1 + 248);
  if (!v8)
    goto LABEL_12;
  v10 = a1 + 248;
  v11 = *(_QWORD *)(a1 + 248);
  do
  {
    v12 = *(_DWORD *)(v11 + 32);
    v13 = v12 < a2;
    if (v12 >= a2)
      v14 = (uint64_t *)v11;
    else
      v14 = (uint64_t *)(v11 + 8);
    if (!v13)
      v10 = v11;
    v11 = *v14;
  }
  while (*v14);
  if (v10 == v9 || *(_DWORD *)(v10 + 32) > a2)
LABEL_12:
    v10 = a1 + 248;
  v15 = (int *)(a1 + 232);
  if (!v8)
    goto LABEL_23;
  v16 = *v15;
  v17 = a1 + 248;
  v18 = *(_QWORD *)(a1 + 248);
  do
  {
    v19 = *(_DWORD *)(v18 + 32);
    v20 = v19 < v16;
    if (v19 >= v16)
      v21 = (uint64_t *)v18;
    else
      v21 = (uint64_t *)(v18 + 8);
    if (!v20)
      v17 = v18;
    v18 = *v21;
  }
  while (*v21);
  if (v17 == v9 || v16 < *(_DWORD *)(v17 + 32))
LABEL_23:
    v17 = a1 + 248;
  if (!v8)
    goto LABEL_34;
  v22 = *(_DWORD *)(a1 + 236);
  v23 = a1 + 248;
  do
  {
    v24 = *(_DWORD *)(v8 + 32);
    v25 = v24 < v22;
    if (v24 >= v22)
      v26 = (uint64_t *)v8;
    else
      v26 = (uint64_t *)(v8 + 8);
    if (!v25)
      v23 = v8;
    v8 = *v26;
  }
  while (*v26);
  if (v23 == v9 || v22 < *(_DWORD *)(v23 + 32))
LABEL_34:
    v23 = a1 + 248;
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetIsSleeping")&& !*(_BYTE *)(v10 + 903))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v45 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "LocationController,#Warning, not notifying clients when device is sleeping", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    *(_WORD *)v274 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning, not notifying clients when device is sleeping", v274, 2);
    goto LABEL_294;
  }
  if (a2 == 4 && sub_1006A59E0(a1, v10, v17, a4))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v27 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "LocationController,#Warning, not notifying clients in WiFi to GPS transition", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    *(_WORD *)v274 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning, not notifying clients in WiFi to GPS transition", v274, 2);
LABEL_294:
    v149 = (char *)v28;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v28);
    if (v149 == buf)
      return 0;
LABEL_295:
    free(v149);
    return 0;
  }
  v271 = (uint64_t **)(v9 - 8);
  v29 = *(double *)(a1 + 680);
  v30 = sub_10014BCB4(v10 + 96, v29);
  v31 = sub_10014BCB4(v23 + 96, v29);
  v266 = v17 + 96;
  v32 = sub_10014BCB4(v17 + 96, v29);
  v270 = *(_DWORD *)(a1 + 336) == a2 && *(_DWORD *)(v10 + 228) == 2;
  if (*v15 && *v15 != a2 && !*(_BYTE *)(v10 + 903))
  {
    v34 = *(char *)(v10 + 900);
    if (v34 <= *(char *)(v17 + 900) && a4 - *(double *)(v17 + 172) < *(double *)(v17 + 184))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v35 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v36 = *(_QWORD *)(v10 + 100);
        v37 = *(const char **)(v10 + 108);
        *(_QWORD *)buf = &v273;
        v38 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v39 = v38 + 6;
        if (*((char *)v38 + 71) < 0)
          v39 = (_QWORD *)*v39;
        *(_DWORD *)buf = 134284035;
        *(_QWORD *)&buf[4] = v36;
        *(_WORD *)&buf[12] = 2049;
        v295 = v37;
        v296 = 2082;
        v297 = v39;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Got,lat,%{private}.7f,lon,%{private}.7f,for non-active location provider,%{public}s,ignoring", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v40 = qword_1022A0028;
      v41 = *(_QWORD *)(v10 + 100);
      v42 = *(const char **)(v10 + 108);
      *(_QWORD *)v274 = &v273;
      v43 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
      v44 = v43 + 6;
      if (*((char *)v43 + 71) < 0)
        v44 = (_QWORD *)*v44;
LABEL_232:
      *(_DWORD *)v274 = 134284035;
      *(_QWORD *)&v274[4] = v41;
      *(_WORD *)&v274[12] = 2049;
      v275 = v42;
      v276 = 2082;
      v277 = v44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 2, "Got,lat,%{private}.7f,lon,%{private}.7f,for non-active location provider,%{public}s,ignoring", v274, 32);
      v149 = (char *)v148;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v148);
      if (v149 == buf)
        return 0;
      goto LABEL_295;
    }
    if (v34 <= 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v142 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v143 = *(_QWORD *)(v10 + 100);
        v144 = *(const char **)(v10 + 108);
        *(_QWORD *)buf = &v273;
        v145 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v146 = v145 + 6;
        if (*((char *)v145 + 71) < 0)
          v146 = (_QWORD *)*v146;
        *(_DWORD *)buf = 134284035;
        *(_QWORD *)&buf[4] = v143;
        *(_WORD *)&buf[12] = 2049;
        v295 = v144;
        v296 = 2082;
        v297 = v146;
        _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEBUG, "Got,lat,%{private}.7f,lon,%{private}.7f,for non-active location provider,%{public}s,ignoring", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v40 = qword_1022A0028;
      v41 = *(_QWORD *)(v10 + 100);
      v42 = *(const char **)(v10 + 108);
      *(_QWORD *)v274 = &v273;
      v147 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
      v44 = v147 + 6;
      if (*((char *)v147 + 71) < 0)
        v44 = (_QWORD *)*v44;
      goto LABEL_232;
    }
  }
  v267 = v10 + 96;
  v269 = a3;
  v272 = (int *)(a1 + 236);
  v48 = *(double *)(v10 + 172);
  if (a4 - v48 < 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v49 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v50 = *(_QWORD *)(v10 + 100);
      v51 = *(const char **)(v10 + 108);
      *(_QWORD *)buf = &v273;
      v52 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v53 = v52 + 6;
      if (*((char *)v52 + 71) < 0)
        v53 = (_QWORD *)*v53;
      v54 = a4 - *(double *)(v10 + 172);
      *(_DWORD *)buf = 134284547;
      *(_QWORD *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2049;
      v295 = v51;
      v296 = 2082;
      v297 = v53;
      v298 = 2050;
      v299 = v54;
      v300 = 2050;
      *(double *)v301 = a4;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,Got future,lat,%{private}.7f,lon,%{private}.7f,from provider,%{public}s,age,%{public}.3fs,correcting to,%{public}.3fs", buf, 0x34u);
      v15 = (int *)(a1 + 232);
      a3 = v269;
    }
    if (sub_1001BFF7C(115, 2))
    {
      v264 = v15;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v185 = qword_1022A0028;
      v186 = *(_QWORD *)(v10 + 100);
      v187 = *(const char **)(v10 + 108);
      *(_QWORD *)v274 = &v273;
      v188 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
      v189 = v188 + 6;
      if (*((char *)v188 + 71) < 0)
        v189 = (_QWORD *)*v189;
      v190 = a4 - *(double *)(v10 + 172);
      *(_DWORD *)v274 = 134284547;
      *(_QWORD *)&v274[4] = v186;
      *(_WORD *)&v274[12] = 2049;
      v275 = v187;
      v276 = 2082;
      v277 = v189;
      v278 = 2050;
      v279 = v190;
      v280 = 2050;
      *(double *)v281 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v185, 0, "LocationController,#Warning,Got future,lat,%{private}.7f,lon,%{private}.7f,from provider,%{public}s,age,%{public}.3fs,correcting to,%{public}.3fs", v274, 52);
      v192 = (char *)v191;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v191);
      if (v192 != buf)
        free(v192);
      v15 = v264;
      a3 = v269;
    }
    *(double *)(v10 + 172) = a4;
    v48 = a4;
  }
  v55 = *(double *)(v10 + 184);
  if (v55 >= 0.0 && vabdd_f64(a4, v48) > v55)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v56 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = &v273;
      v57 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v58 = v57 + 6;
      if (*((char *)v57 + 71) < 0)
        v58 = (_QWORD *)*v58;
      v59 = *(const char **)(v10 + 100);
      v60 = *(_QWORD **)(v10 + 108);
      v61 = a4 - *(double *)(v10 + 172);
      v62 = *(_QWORD *)(v10 + 184);
      *(_DWORD *)buf = 136447235;
      *(_QWORD *)&buf[4] = v58;
      *(_WORD *)&buf[12] = 2049;
      v295 = v59;
      v296 = 2049;
      v297 = v60;
      v298 = 2050;
      v299 = v61;
      v300 = 2050;
      *(_QWORD *)v301 = v62;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "expiredLocation,provider,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,age,%{public}.3fs,lifespan,%{public}.1fs,(not throwing away)", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v204 = qword_1022A0028;
      *(_QWORD *)v274 = &v273;
      v205 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
      v206 = v205 + 6;
      if (*((char *)v205 + 71) < 0)
        v206 = (_QWORD *)*v206;
      v207 = *(const char **)(v10 + 100);
      v208 = *(_QWORD **)(v10 + 108);
      v209 = a4 - *(double *)(v10 + 172);
      v210 = *(_QWORD *)(v10 + 184);
      *(_DWORD *)v274 = 136447235;
      *(_QWORD *)&v274[4] = v206;
      *(_WORD *)&v274[12] = 2049;
      v275 = v207;
      v276 = 2049;
      v277 = v208;
      v278 = 2050;
      v279 = v209;
      v280 = 2050;
      *(_QWORD *)v281 = v210;
      LODWORD(v263) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v204, 2, "expiredLocation,provider,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,age,%{public}.3fs,lifespan,%{public}.1fs,(not throwing away)", v274, v263);
      v212 = (char *)v211;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v211);
      if (v212 != buf)
        free(v212);
      a3 = v269;
    }
  }
  if (*(_BYTE *)(v10 + 903))
  {
    v63 = (_DWORD *)(a1 + 236);
    if (!*v272
      || *v272 != v273 && *(_DWORD *)(v23 + 180) <= *(_DWORD *)(v10 + 180)
      || (v64 = *(double *)(v23 + 184), v64 >= 0.0) && v64 + *(double *)(v23 + 172) < a4)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v65 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)buf = &v273;
        v66 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v67 = v66 + 6;
        if (*((char *)v66 + 71) < 0)
          v67 = (_QWORD *)*v67;
        v68 = *(_DWORD *)(a3 + 84);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v67;
        *(_WORD *)&buf[12] = 1026;
        LODWORD(v295) = v68;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "current most confident provider,%{public}s,conf,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v193 = qword_1022A0028;
        *(_QWORD *)v274 = &v273;
        v194 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
        v195 = v194 + 6;
        if (*((char *)v194 + 71) < 0)
          v195 = (_QWORD *)*v195;
        v196 = *(_DWORD *)(v269 + 84);
        *(_DWORD *)v274 = 136446466;
        *(_QWORD *)&v274[4] = v195;
        *(_WORD *)&v274[12] = 1026;
        LODWORD(v275) = v196;
        LODWORD(v263) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v193, 2, "current most confident provider,%{public}s,conf,%{public}d", v274, v263);
        v198 = (char *)v197;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v197);
        if (v198 != buf)
          free(v198);
        v63 = (_DWORD *)(a1 + 236);
      }
      *v63 = v273;
      v23 = v10;
    }
  }
  else
  {
    v63 = (_DWORD *)(a1 + 236);
  }
  if (!*v15)
    goto LABEL_155;
  v69 = *(_DWORD *)(a1 + 336);
  v70 = v270;
  if (v273 != v69)
    v70 = 0;
  if (v70)
    goto LABEL_155;
  if (v273 != *v15)
  {
    v71 = *(double *)(v17 + 184);
    if (v71 < 0.0 || a4 - *(double *)(v17 + 172) <= v71)
    {
      if (*(_DWORD *)(v10 + 180) <= *(_DWORD *)(v17 + 180))
      {
        sub_10011E258((double *)(a1 + 120), v267, v266);
        v118 = v117;
        if (v30 >= v32)
        {
          v87 = v15;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v152 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)buf = &v273;
            v153 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v154 = v153 + 6;
            if (*((char *)v153 + 71) < 0)
              v154 = (_QWORD *)*v154;
            v155 = *(const char **)(v10 + 100);
            v156 = *(_QWORD **)(v10 + 108);
            v157 = *(_DWORD *)(v10 + 180);
            *(_QWORD *)buf = v87;
            v158 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v159 = v158 + 6;
            if (*((char *)v158 + 71) < 0)
              v159 = (_QWORD *)*v159;
            v160 = *(_QWORD *)(v17 + 100);
            v161 = *(_QWORD *)(v17 + 108);
            v162 = *(_DWORD *)(v17 + 180);
            *(_DWORD *)buf = 136317699;
            *(_QWORD *)&buf[4] = v154;
            *(_WORD *)&buf[12] = 2049;
            v295 = v155;
            v296 = 2049;
            v297 = v156;
            v298 = 2050;
            v299 = v30;
            v300 = 1026;
            *(_DWORD *)v301 = v157;
            *(_WORD *)&v301[4] = 2082;
            *(_QWORD *)&v301[6] = v159;
            v302 = 2049;
            v303 = v160;
            v304 = 2049;
            v305 = v161;
            v306 = 2050;
            v307 = v32;
            v308 = 1026;
            v309 = v162;
            v310 = 2050;
            v311 = v118;
            _os_log_impl((void *)&_mh_execute_header, v152, OS_LOG_TYPE_DEBUG, "new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser than current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding", buf, 0x68u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_275;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v163 = qword_1022A0028;
          *(_QWORD *)v274 = &v273;
          v164 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
          v165 = v164 + 6;
          if (*((char *)v164 + 71) < 0)
            v165 = (_QWORD *)*v165;
          v166 = *(const char **)(v10 + 100);
          v167 = *(_QWORD **)(v10 + 108);
          v168 = *(_DWORD *)(v10 + 180);
          *(_QWORD *)v274 = v87;
          v169 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
          v170 = v169 + 6;
          if (*((char *)v169 + 71) < 0)
            v170 = (_QWORD *)*v170;
          v171 = *(_QWORD *)(v17 + 100);
          v172 = *(_QWORD *)(v17 + 108);
          v173 = *(_DWORD *)(v17 + 180);
          *(_DWORD *)v274 = 136317699;
          *(_QWORD *)&v274[4] = v165;
          *(_WORD *)&v274[12] = 2049;
          v275 = v166;
          v276 = 2049;
          v277 = v167;
          v278 = 2050;
          v279 = v30;
          v280 = 1026;
          *(_DWORD *)v281 = v168;
          *(_WORD *)&v281[4] = 2082;
          *(_QWORD *)&v281[6] = v170;
          v282 = 2049;
          v283 = v171;
          v284 = 2049;
          v285 = v172;
          v286 = 2050;
          v287 = v32;
          v288 = 1026;
          v289 = v173;
          v290 = 2050;
          v291 = v118;
          LODWORD(v263) = 104;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v163, 2, "new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser than current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding", v274, v263);
        }
        else
        {
          v46 = 1;
          if (v117 < 5000.0 || v117 < v32 * 4.0)
            goto LABEL_156;
          v87 = v15;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v119 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)buf = &v273;
            v120 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v121 = v120 + 6;
            if (*((char *)v120 + 71) < 0)
              v121 = (_QWORD *)*v121;
            v122 = *(const char **)(v10 + 100);
            v123 = *(_QWORD **)(v10 + 108);
            v124 = *(_DWORD *)(v10 + 180);
            *(_QWORD *)buf = v87;
            v125 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v126 = v125 + 6;
            if (*((char *)v125 + 71) < 0)
              v126 = (_QWORD *)*v126;
            v127 = *(_QWORD *)(v17 + 100);
            v128 = *(_QWORD *)(v17 + 108);
            v129 = *(_DWORD *)(v17 + 180);
            *(_DWORD *)buf = 136317699;
            *(_QWORD *)&buf[4] = v121;
            *(_WORD *)&buf[12] = 2049;
            v295 = v122;
            v296 = 2049;
            v297 = v123;
            v298 = 2050;
            v299 = v30;
            v300 = 1026;
            *(_DWORD *)v301 = v124;
            *(_WORD *)&v301[4] = 2082;
            *(_QWORD *)&v301[6] = v126;
            v302 = 2049;
            v303 = v127;
            v304 = 2049;
            v305 = v128;
            v306 = 2050;
            v307 = v32;
            v308 = 1026;
            v309 = v129;
            v310 = 2050;
            v311 = v118;
            _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding", buf, 0x68u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_275;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v130 = qword_1022A0028;
          *(_QWORD *)v274 = &v273;
          v131 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
          v132 = v131 + 6;
          if (*((char *)v131 + 71) < 0)
            v132 = (_QWORD *)*v132;
          v133 = *(const char **)(v10 + 100);
          v134 = *(_QWORD **)(v10 + 108);
          v135 = *(_DWORD *)(v10 + 180);
          *(_QWORD *)v274 = v87;
          v136 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
          v137 = v136 + 6;
          if (*((char *)v136 + 71) < 0)
            v137 = (_QWORD *)*v137;
          v138 = *(_QWORD *)(v17 + 100);
          v139 = *(_QWORD *)(v17 + 108);
          v140 = *(_DWORD *)(v17 + 180);
          *(_DWORD *)v274 = 136317699;
          *(_QWORD *)&v274[4] = v132;
          *(_WORD *)&v274[12] = 2049;
          v275 = v133;
          v276 = 2049;
          v277 = v134;
          v278 = 2050;
          v279 = v30;
          v280 = 1026;
          *(_DWORD *)v281 = v135;
          *(_WORD *)&v281[4] = 2082;
          *(_QWORD *)&v281[6] = v137;
          v282 = 2049;
          v283 = v138;
          v284 = 2049;
          v285 = v139;
          v286 = 2050;
          v287 = v32;
          v288 = 1026;
          v289 = v140;
          v290 = 2050;
          v291 = v118;
          LODWORD(v263) = 104;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v130, 0, "LocationController,#Warning,new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding", v274, v263);
        }
      }
      else
      {
        if (v273 == v69)
          goto LABEL_155;
        sub_10011E258((double *)(a1 + 120), v267, v266);
        if (v30 <= v32)
          goto LABEL_155;
        v86 = v85;
        if (v85 > 5000.0 && v85 > v30 * 4.0 && *(_DWORD *)(v10 + 180) - *(_DWORD *)(v17 + 180) >= 5)
        {
          v87 = v15;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v88 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)buf = &v273;
            v89 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v90 = v89 + 6;
            if (*((char *)v89 + 71) < 0)
              v90 = (_QWORD *)*v90;
            v91 = *(const char **)(v10 + 100);
            v92 = *(_QWORD **)(v10 + 108);
            v93 = *(_DWORD *)(v10 + 180);
            *(_QWORD *)buf = v87;
            v94 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            v95 = v94 + 6;
            if (*((char *)v94 + 71) < 0)
              v95 = (_QWORD *)*v95;
            v96 = *(_QWORD *)(v17 + 100);
            v97 = *(_QWORD *)(v17 + 108);
            v98 = *(_DWORD *)(v17 + 180);
            *(_DWORD *)buf = 136448771;
            *(_QWORD *)&buf[4] = v90;
            *(_WORD *)&buf[12] = 2049;
            v295 = v91;
            v296 = 2049;
            v297 = v92;
            v298 = 2050;
            v299 = v30;
            v300 = 1026;
            *(_DWORD *)v301 = v93;
            *(_WORD *)&v301[4] = 2082;
            *(_QWORD *)&v301[6] = v95;
            v302 = 2049;
            v303 = v96;
            v304 = 2049;
            v305 = v97;
            v306 = 2050;
            v307 = v32;
            v308 = 1026;
            v309 = v98;
            v310 = 2050;
            v311 = v86;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,notifying", buf, 0x68u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v250 = qword_1022A0028;
            *(_QWORD *)v274 = &v273;
            v251 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
            v252 = v251 + 6;
            if (*((char *)v251 + 71) < 0)
              v252 = (_QWORD *)*v252;
            v253 = *(const char **)(v10 + 100);
            v254 = *(_QWORD **)(v10 + 108);
            v255 = *(_DWORD *)(v10 + 180);
            *(_QWORD *)v274 = v87;
            v256 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
            v257 = v256 + 6;
            if (*((char *)v256 + 71) < 0)
              v257 = (_QWORD *)*v257;
            v258 = *(_QWORD *)(v17 + 100);
            v259 = *(_QWORD *)(v17 + 108);
            v260 = *(_DWORD *)(v17 + 180);
            *(_DWORD *)v274 = 136448771;
            *(_QWORD *)&v274[4] = v252;
            *(_WORD *)&v274[12] = 2049;
            v275 = v253;
            v276 = 2049;
            v277 = v254;
            v278 = 2050;
            v279 = v30;
            v280 = 1026;
            *(_DWORD *)v281 = v255;
            *(_WORD *)&v281[4] = 2082;
            *(_QWORD *)&v281[6] = v257;
            v282 = 2049;
            v283 = v258;
            v284 = 2049;
            v285 = v259;
            v286 = 2050;
            v287 = v32;
            v288 = 1026;
            v289 = v260;
            v290 = 2050;
            v291 = v86;
            LODWORD(v263) = 104;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v250, 0, "LocationController,#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with current,%{public}s lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,notifying", v274, v263);
            v262 = (char *)v261;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v261);
            if (v262 != buf)
              free(v262);
          }
          v46 = 1;
          goto LABEL_276;
        }
        v87 = v15;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v174 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)buf = &v273;
          v175 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          v176 = v175 + 6;
          if (*((char *)v175 + 71) < 0)
            v176 = (_QWORD *)*v176;
          v177 = *(const char **)(v10 + 100);
          v178 = *(_QWORD **)(v10 + 108);
          v179 = *(_DWORD *)(v10 + 180);
          *(_QWORD *)buf = v87;
          v180 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
          v181 = v180 + 6;
          if (*((char *)v180 + 71) < 0)
            v181 = (_QWORD *)*v181;
          v182 = *(_QWORD *)(v17 + 100);
          v183 = *(_QWORD *)(v17 + 108);
          v184 = *(_DWORD *)(v17 + 180);
          *(_DWORD *)buf = 136317699;
          *(_QWORD *)&buf[4] = v176;
          *(_WORD *)&buf[12] = 2049;
          v295 = v177;
          v296 = 2049;
          v297 = v178;
          v298 = 2050;
          v299 = v30;
          v300 = 1026;
          *(_DWORD *)v301 = v179;
          *(_WORD *)&v301[4] = 2082;
          *(_QWORD *)&v301[6] = v181;
          v302 = 2049;
          v303 = v182;
          v304 = 2049;
          v305 = v183;
          v306 = 2050;
          v307 = v32;
          v308 = 1026;
          v309 = v184;
          v310 = 2050;
          v311 = v86;
          _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEBUG, "new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser and agrees with current,%{public}s, lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding", buf, 0x68u);
        }
        if (!sub_1001BFF7C(115, 2))
        {
LABEL_275:
          v46 = 0;
LABEL_276:
          v15 = v87;
          goto LABEL_156;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v238 = qword_1022A0028;
        *(_QWORD *)v274 = &v273;
        v239 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
        v240 = v239 + 6;
        if (*((char *)v239 + 71) < 0)
          v240 = (_QWORD *)*v240;
        v241 = *(const char **)(v10 + 100);
        v242 = *(_QWORD **)(v10 + 108);
        v243 = *(_DWORD *)(v10 + 180);
        *(_QWORD *)v274 = v87;
        v244 = sub_1001B2798(v271, v87, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
        v245 = v244 + 6;
        if (*((char *)v244 + 71) < 0)
          v245 = (_QWORD *)*v245;
        v246 = *(_QWORD *)(v17 + 100);
        v247 = *(_QWORD *)(v17 + 108);
        v248 = *(_DWORD *)(v17 + 180);
        *(_DWORD *)v274 = 136317699;
        *(_QWORD *)&v274[4] = v240;
        *(_WORD *)&v274[12] = 2049;
        v275 = v241;
        v276 = 2049;
        v277 = v242;
        v278 = 2050;
        v279 = v30;
        v280 = 1026;
        *(_DWORD *)v281 = v243;
        *(_WORD *)&v281[4] = 2082;
        *(_QWORD *)&v281[6] = v245;
        v282 = 2049;
        v283 = v246;
        v284 = 2049;
        v285 = v247;
        v286 = 2050;
        v287 = v32;
        v288 = 1026;
        v289 = v248;
        v290 = 2050;
        v291 = v86;
        LODWORD(v263) = 104;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v238, 2, "new,%s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,coarser and agrees with current,%{public}s, lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,distance,%{public}.2f,discarding", v274, v263);
      }
      v249 = (char *)v141;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v141);
      if (v249 != buf)
        free(v249);
      goto LABEL_275;
    }
  }
  if (v273 == *v63)
  {
LABEL_155:
    v46 = 1;
    goto LABEL_156;
  }
  sub_10011E258((double *)(a1 + 120), v267, v23 + 96);
  v73 = v72;
  v46 = 1;
  if (v72 > 5000.0
    && v72 > v30 * 4.0
    && v72 > v31 * 4.0
    && v72 > (*(double *)(v10 + 172) - *(double *)(v23 + 172)) * 50.0
    && *(_DWORD *)(v23 + 180) - *(_DWORD *)(v10 + 180) >= 5)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v74 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buf = &v273;
      v75 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v76 = v75 + 6;
      if (*((char *)v75 + 71) < 0)
        v76 = (_QWORD *)*v76;
      v77 = *(const char **)(v10 + 100);
      v78 = *(_QWORD **)(v10 + 108);
      v268 = *(_DWORD *)(v10 + 180);
      *(_QWORD *)buf = a1 + 236;
      v79 = sub_1001B2798(v271, v272, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v80 = v79 + 6;
      if (*((char *)v79 + 71) < 0)
        v80 = (_QWORD *)*v80;
      v81 = *(_QWORD *)(v23 + 100);
      v82 = *(_QWORD *)(v23 + 108);
      v83 = *(_DWORD *)(v23 + 180);
      v84 = a4 - *(double *)(v23 + 172);
      *(_DWORD *)buf = 136449027;
      *(_QWORD *)&buf[4] = v76;
      *(_WORD *)&buf[12] = 2049;
      v295 = v77;
      v296 = 2049;
      v297 = v78;
      v298 = 2050;
      v299 = v30;
      v300 = 1026;
      *(_DWORD *)v301 = v268;
      *(_WORD *)&v301[4] = 2082;
      *(_QWORD *)&v301[6] = v80;
      v302 = 2049;
      v303 = v81;
      v304 = 2049;
      v305 = v82;
      v306 = 2050;
      v307 = v31;
      v308 = 1026;
      v309 = v83;
      v310 = 2050;
      v311 = v84;
      v312 = 2050;
      v313 = v73;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with confident,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,age,%{public}.3f,distance,%{public}.2f,discarding", buf, 0x72u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      v265 = v15;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v222 = qword_1022A0028;
      *(_QWORD *)v274 = &v273;
      v223 = sub_1001B2798(v271, &v273, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
      v224 = v223 + 6;
      if (*((char *)v223 + 71) < 0)
        v224 = (_QWORD *)*v224;
      v225 = *(const char **)(v10 + 100);
      v226 = *(_QWORD **)(v10 + 108);
      v227 = *(_DWORD *)(v10 + 180);
      *(_QWORD *)v274 = a1 + 236;
      v228 = sub_1001B2798(v271, v272, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
      v229 = v228 + 6;
      if (*((char *)v228 + 71) < 0)
        v229 = (_QWORD *)*v229;
      v230 = *(_QWORD *)(v23 + 100);
      v231 = *(_QWORD *)(v23 + 108);
      v232 = *(_DWORD *)(v23 + 180);
      v233 = a4 - *(double *)(v23 + 172);
      *(_DWORD *)v274 = 136449027;
      *(_QWORD *)&v274[4] = v224;
      *(_WORD *)&v274[12] = 2049;
      v275 = v225;
      v276 = 2049;
      v277 = v226;
      v278 = 2050;
      v279 = v30;
      v280 = 1026;
      *(_DWORD *)v281 = v227;
      *(_WORD *)&v281[4] = 2082;
      *(_QWORD *)&v281[6] = v229;
      v282 = 2049;
      v283 = v230;
      v284 = 2049;
      v285 = v231;
      v286 = 2050;
      v287 = v31;
      v288 = 1026;
      v289 = v232;
      v290 = 2050;
      v291 = v233;
      v292 = 2050;
      v293 = v73;
      LODWORD(v263) = 114;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v222, 0, "LocationController,#Warning,new,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,conflicts with confident,%{public}s,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.2f,conf,%{public}d,age,%{public}.3f,distance,%{public}.2f,discarding", v274, v263);
      v235 = (char *)v234;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v234);
      if (v235 != buf)
        free(v235);
      v46 = 0;
      v15 = v265;
    }
    else
    {
      v46 = 0;
    }
  }
LABEL_156:
  if (!*(_BYTE *)(v10 + 903))
    return v46;
  *(_BYTE *)(v10 + 902) = 0;
  v99 = *(double *)(v10 + 184);
  if (v99 < 0.0)
  {
    v100 = *(void **)(a1 + 656);
    v101 = 1.79769313e308;
LABEL_163:
    objc_msgSend(v100, "setNextFireDelay:", v101);
    goto LABEL_164;
  }
  if (v17 == v9 || v99 > *(double *)(v17 + 184) - (a4 - *(double *)(v17 + 172)))
  {
    objc_msgSend(*(id *)(a1 + 656), "nextFireDelay");
    if (v102 != 1.79769313e308)
    {
      v100 = *(void **)(a1 + 656);
      v101 = *(double *)(v10 + 184) + 15.0;
      goto LABEL_163;
    }
  }
LABEL_164:
  v103 = *(char *)(v10 + 900);
  v104 = *(char *)(a1 + 160);
  if (v103 >= v104)
  {
    v105 = v15;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v106 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = v105;
      v107 = sub_1001B2798(v271, v105, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v108 = v107 + 6;
      if (*((char *)v107 + 71) < 0)
        v108 = (_QWORD *)*v108;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v108;
      _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEBUG, "reached the granularity, stopping all providers finer than current,%{public}s ", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v199 = qword_1022A0028;
      *(_QWORD *)v274 = v105;
      v200 = sub_1001B2798(v271, v105, (uint64_t)&unk_101B9EB60, (_DWORD **)v274);
      v201 = v200 + 6;
      if (*((char *)v200 + 71) < 0)
        v201 = (_QWORD *)*v201;
      *(_DWORD *)v274 = 136446210;
      *(_QWORD *)&v274[4] = v201;
      LODWORD(v263) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v199, 2, "reached the granularity, stopping all providers finer than current,%{public}s ", v274, v263);
      v203 = (char *)v202;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v202);
      if (v203 != buf)
        free(v203);
    }
    sub_100232BDC(a1, (_BYTE *)(v10 + 900));
    LOBYTE(v103) = *(_BYTE *)(v10 + 900);
    LOBYTE(v104) = *(_BYTE *)(a1 + 160);
    v15 = v105;
  }
  if ((char)v103 > (char)v104 || !*(_BYTE *)(a1 + 216))
  {
LABEL_185:
    if (!(_DWORD)v46)
      return v46;
    goto LABEL_186;
  }
  if (v273 == *(_DWORD *)(a1 + 336))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v109 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v110 = *(unsigned __int8 *)(v269 + 516);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v270;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v110;
      _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "got accessory,stopping everything less preferred,isShifted,%{public}d,isPropagatedSolution,%{public}d\n", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v214 = *(unsigned __int8 *)(v269 + 516);
      *(_DWORD *)v274 = 67240448;
      *(_DWORD *)&v274[4] = v270;
      *(_WORD *)&v274[8] = 1026;
      *(_DWORD *)&v274[10] = v214;
      LODWORD(v263) = 14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "got accessory,stopping everything less preferred,isShifted,%{public}d,isPropagatedSolution,%{public}d\n", v274, v263);
      v216 = (char *)v215;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v215);
      if (v216 != buf)
        free(v216);
    }
    buf[0] = 5;
    if (*(_BYTE *)(v269 + 516))
      v111 = 1;
    else
      v111 = v270;
    sub_10016037C(a1, buf, v111);
    goto LABEL_185;
  }
  if (!(_DWORD)v46)
    return v46;
  if (v273 == *(_DWORD *)(a1 + 328) && *(_DWORD *)(v10 + 192) == 9)
  {
    v114 = v15;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v115 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEBUG, "stopping all providers below coarse gps", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      *(_WORD *)v274 = 0;
      LODWORD(v263) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "stopping all providers below coarse gps", v274, v263);
      v237 = (char *)v236;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v236);
      if (v237 != buf)
        free(v237);
    }
    buf[0] = 0;
    v116 = buf;
  }
  else
  {
    v114 = v15;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v150 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEBUG, "stopping all providers below newIter", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      *(_WORD *)v274 = 0;
      LODWORD(v263) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "stopping all providers below newIter", v274, v263);
      v221 = (char *)v220;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v220);
      if (v221 != buf)
        free(v221);
    }
    v116 = (unsigned __int8 *)(v10 + 901);
  }
  sub_10016037C(a1, v116, 0);
  v15 = v114;
LABEL_186:
  if (*v15 != v273)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v112 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      if (v10 == v9)
      {
        v113 = "(none)";
      }
      else
      {
        v113 = (const char *)(v10 + 48);
        if (*(char *)(v10 + 71) < 0)
          v113 = *(const char **)v113;
      }
      if (v17 == v9)
      {
        v151 = "(none)";
      }
      else
      {
        v151 = (const char *)(v17 + 48);
        if (*(char *)(v17 + 71) < 0)
          v151 = *(const char **)v151;
      }
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v113;
      *(_WORD *)&buf[12] = 2082;
      v295 = v151;
      _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "changing to provider,%{public}s,from,%{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      if (v10 == v9)
      {
        v213 = "(none)";
      }
      else
      {
        v213 = (const char *)(v10 + 48);
        if (*(char *)(v10 + 71) < 0)
          v213 = *(const char **)v213;
      }
      if (v17 == v9)
      {
        v217 = "(none)";
      }
      else
      {
        v217 = (const char *)(v17 + 48);
        if (*(char *)(v17 + 71) < 0)
          v217 = *(const char **)v217;
      }
      *(_DWORD *)v274 = 136446466;
      *(_QWORD *)&v274[4] = v213;
      *(_WORD *)&v274[12] = 2082;
      v275 = v217;
      LODWORD(v263) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "changing to provider,%{public}s,from,%{public}s", v274, v263);
      v219 = (char *)v218;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)", "%s\n", v218);
      if (v219 != buf)
        free(v219);
    }
    *v15 = v273;
  }
  return 1;
}

double sub_10014BCB4(uint64_t a1, double a2)
{
  int v2;
  double v3;
  int v4;
  double result;
  double v6;

  v2 = *(_DWORD *)(a1 + 128);
  v3 = *(double *)(a1 + 20);
  v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 10 && v2 == 75 && v3 > 0.0)
  {
    result = v3 * a2;
    v6 = 0.038;
    goto LABEL_9;
  }
  if (v4 == 11 && v2 == 75 && v3 > 0.0)
  {
    result = v3 * a2;
    v6 = 0.042;
LABEL_9:
    if (result <= v6)
      return v6;
    return result;
  }
  result = 20.0;
  if (v3 >= 20.0 || v3 <= 0.0 || v4 != 4)
    return *(double *)(a1 + 20);
  return result;
}

uint64_t sub_10014BD34(uint64_t a1, uint64_t a2)
{
  double Current;
  double v5;
  double v6;
  char v7;
  double v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  char *v46;
  uint64_t v47;
  int v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  uint8_t buf[4];
  _BYTE v67[20];
  double v68;
  _BYTE v69[20];
  __int16 v70;
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = (double)*(unint64_t *)(a2 + 5) - (double)*(unint64_t *)(a2 + 41);
  v6 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653))
  {
    if (*(_BYTE *)(a1 + 652))
    {
      v7 = 0;
      goto LABEL_6;
    }
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v7 = 1;
LABEL_6:
  v8 = *(double *)(a1 + 664);
  v9 = *(_QWORD *)(a2 + 33);
  v10 = v5 / 1000000.0;
  if (v9)
  {
    v11 = *(double *)(a1 + 352) + ((double)v9 - (double)*(unint64_t *)(a2 + 41)) / 1000000.0;
    v12 = *(double *)(a1 + 664);
    if ((v7 & 1) == 0)
    {
      v12 = *(double *)(a1 + 664);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_1010231AC(a1);
        *(_BYTE *)(a1 + 653) = 0;
        v12 = *(double *)(a1 + 664);
      }
    }
    v13 = v11 + v12;
  }
  else
  {
    v13 = 0.0;
  }
  v14 = v6 + v10;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v15 = v14 + v8;
  v16 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v17 = *(_QWORD *)(a2 + 41);
    v18 = *(float *)(a2 + 1);
    v19 = *(_QWORD *)(a2 + 5);
    v20 = *(float *)(a2 + 25);
    v21 = *(float *)(a2 + 17);
    v22 = *(float *)(a2 + 29);
    *(_DWORD *)buf = 134351104;
    *(double *)v67 = Current;
    *(_WORD *)&v67[8] = 2050;
    *(_QWORD *)&v67[10] = v17;
    *(_WORD *)&v67[18] = 2050;
    v68 = v18;
    *(_WORD *)v69 = 2050;
    *(_QWORD *)&v69[2] = v19;
    *(_WORD *)&v69[10] = 2050;
    *(double *)&v69[12] = v20;
    v70 = 2050;
    v71 = v15;
    v72 = 2050;
    v73 = v13;
    v74 = 2050;
    v75 = v21;
    v76 = 2050;
    v77 = v22;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{public}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDerivative,%{public}f,absAltUnc,%{public}f", buf, 0x5Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v33 = *(_QWORD *)(a2 + 41);
    v34 = *(float *)(a2 + 1);
    v35 = *(_QWORD *)(a2 + 5);
    v36 = *(float *)(a2 + 25);
    v37 = *(float *)(a2 + 17);
    v38 = *(float *)(a2 + 29);
    v48 = 134351104;
    v49 = Current;
    v50 = 2050;
    v51 = v33;
    v52 = 2050;
    v53 = v34;
    v54 = 2050;
    v55 = v35;
    v56 = 2050;
    v57 = v36;
    v58 = 2050;
    v59 = v15;
    v60 = 2050;
    v61 = v13;
    v62 = 2050;
    v63 = v37;
    v64 = 2050;
    v65 = v38;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{public}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDerivative,%{public}f,absAltUnc,%{public}f", &v48, 92);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitKFFilteredPressure(const CMMotionCoprocessorReply::KFFilteredPressure *)", "%s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
  if (vabdd_f64(Current, *(double *)(a1 + 1424)) > 10.0)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v23 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *(_QWORD *)(a2 + 41);
      v25 = *(float *)(a2 + 1);
      v26 = *(_QWORD *)(a2 + 5);
      v27 = *(float *)(a2 + 25);
      v28 = *(float *)(a2 + 17);
      v29 = *(float *)(a2 + 29);
      *(_DWORD *)buf = 134351104;
      *(double *)v67 = Current;
      *(_WORD *)&v67[8] = 2050;
      *(_QWORD *)&v67[10] = v24;
      *(_WORD *)&v67[18] = 2050;
      v68 = v25;
      *(_WORD *)v69 = 2050;
      *(_QWORD *)&v69[2] = v26;
      *(_WORD *)&v69[10] = 2050;
      *(double *)&v69[12] = v27;
      v70 = 2050;
      v71 = v15;
      v72 = 2050;
      v73 = v13;
      v74 = 2050;
      v75 = v28;
      v76 = 2050;
      v77 = v29;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{public}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDerivative,%{public}f,absAltUnc,%{public}f", buf, 0x5Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219AC68);
      v40 = *(_QWORD *)(a2 + 41);
      v41 = *(float *)(a2 + 1);
      v42 = *(_QWORD *)(a2 + 5);
      v43 = *(float *)(a2 + 25);
      v44 = *(float *)(a2 + 17);
      v45 = *(float *)(a2 + 29);
      v48 = 134351104;
      v49 = Current;
      v50 = 2050;
      v51 = v40;
      v52 = 2050;
      v53 = v41;
      v54 = 2050;
      v55 = v42;
      v56 = 2050;
      v57 = v43;
      v58 = 2050;
      v59 = v15;
      v60 = 2050;
      v61 = v13;
      v62 = 2050;
      v63 = v44;
      v64 = 2050;
      v65 = v45;
      LODWORD(v47) = 92;
      v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "visitKFFilteredPressure,nowAP,%{public}f,nowAOP,%{public}llu,filteredPressure,%{public}f,pressureTimestamp,%{public}llu,kfElevation,%{public}f,wallTimePressureCorrected,%{public}f,wallTimeKFCorrected,%{public}f,temperatureDerivative,%{public}f,absAltUnc,%{public}f", &v48, v47);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitKFFilteredPressure(const CMMotionCoprocessorReply::KFFilteredPressure *)", "%s\n", v46);
      if (v46 != (char *)buf)
        free(v46);
    }
    *(double *)(a1 + 1424) = Current;
  }
  *(_DWORD *)buf = *(_DWORD *)(a2 + 1);
  v30 = *(_QWORD *)(a2 + 21);
  *(double *)&v67[4] = v15;
  *(_QWORD *)&v67[12] = v30;
  LODWORD(v68) = *(_DWORD *)(a2 + 29);
  v31 = *(_QWORD *)(a2 + 13);
  *(double *)v69 = v13;
  *(_QWORD *)&v69[8] = v31;
  return sub_10014C2F4(a1, 30, (uint64_t)buf, 48);
}

uint64_t sub_10014C2F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  v9 = a2;
  v10 = v8 + 80 * (int)a2;
  v11 = *(_QWORD **)(v10 + 32);
  if (v11 != (_QWORD *)(v10 + 40))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[4] + 16))(v11[4], a2, a3, a4);
      *((_DWORD *)v11 + 10) = (*((_DWORD *)v11 + 10) + 1) % *((_DWORD *)v11 + 11);
      v12 = (_QWORD *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v8 = *(_QWORD *)(v7 + 16);
      v11 = v13;
    }
    while (v13 != (_QWORD *)(v8 + 80 * v9 + 40));
  }
  v15 = v8 + 80 * v9;
  v16 = *(_QWORD *)(v15 + 64);
  if (v16 != v15 + 56)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v16 + 16) + 16))(*(_QWORD *)(v16 + 16), a2, a3, a4);
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != *(_QWORD *)(v7 + 16) + 80 * v9 + 56);
  }
  return result;
}

id sub_10014C41C(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v15;
  uint64_t v16;
  _QWORD v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _OWORD __dst[14];
  int v34;
  unint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  unint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  int v49;

  if (a4 >= 0xE0)
    v8 = 224;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0xE1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D6710);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v43 = (unint64_t)"N28CLMotionCoprocessorInterface16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      v44 = 2048;
      v45 = 224;
      v46 = 2048;
      v47 = a4;
      v48 = 1024;
      v49 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D6710);
      v34 = 136315906;
      v35 = (unint64_t)"N28CLMotionCoprocessorInterface16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      v36 = 2048;
      v37 = 224;
      v38 = 2048;
      v39 = a4;
      v40 = 1024;
      v41 = a2;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v34, 38, v16, LODWORD(v17[0]));
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLMotionCoprocessorInterface::NotificationData>::dispatchData(int, const void *, size_t) [T = CLMotionCoprocessorInterface::NotificationData]", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100206BAC;
  v17[3] = &unk_102149C60;
  v17[4] = v12;
  v17[5] = v11;
  v28 = __dst[10];
  v29 = __dst[11];
  v30 = __dst[12];
  v31 = __dst[13];
  v24 = __dst[6];
  v25 = __dst[7];
  v26 = __dst[8];
  v27 = __dst[9];
  v20 = __dst[2];
  v21 = __dst[3];
  v22 = __dst[4];
  v23 = __dst[5];
  v18 = __dst[0];
  v19 = __dst[1];
  v32 = v10;
  return objc_msgSend(v13, "async:", v17);
}

id sub_10014C70C(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v15;
  uint64_t v16;
  _QWORD v17[6];
  __int128 v18;
  __int128 v19;
  unsigned __int128 v20;
  uint64_t v21;
  __int128 __dst;
  __int128 v23;
  unsigned __int128 v24;
  int v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  unint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  int v40;

  LODWORD(__dst) = 2139095039;
  *((_QWORD *)&__dst + 1) = 0x7FEFFFFFFFFFFFFFLL;
  *(int32x2_t *)&v23 = vdup_n_s32(0x7F7FFFFFu);
  DWORD2(v23) = 2139095039;
  v24 = __PAIR128__(v23, 0x7FEFFFFFFFFFFFFFLL);
  if (a4 >= 0x30)
    v8 = 48;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x31)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102159C90);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v34 = 0x8000000101CDD8CCLL & 0x7FFFFFFFFFFFFFFFLL;
      v35 = 2048;
      v36 = 48;
      v37 = 2048;
      v38 = a4;
      v39 = 1024;
      v40 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102159C90);
      v25 = 136315906;
      v26 = 0x8000000101CDD8CCLL & 0x7FFFFFFFFFFFFFFFLL;
      v27 = 2048;
      v28 = 48;
      v29 = 2048;
      v30 = a4;
      v31 = 1024;
      v32 = a2;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v25, 38, v16, LODWORD(v17[0]));
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLBarometerCalibration_Types::CMKFFilteredPressureSample>::dispatchData(int, const void *, size_t) [T = CLBarometerCalibration_Types::CMKFFilteredPressureSample]", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100207A0C;
  v17[3] = &unk_102159C70;
  v17[4] = v12;
  v17[5] = v11;
  v18 = __dst;
  v19 = v23;
  v20 = v24;
  v21 = v10;
  return objc_msgSend(v13, "async:", v17);
}

void sub_10014C9DC(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v34[20];
  __int16 v35;
  _QWORD *v36;
  __int16 v37;
  std::__shared_weak_count *v38;
  _QWORD **v39;
  _QWORD *v40[3];
  std::__shared_weak_count *v41;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10219F928);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v34 = 2082;
      *(_QWORD *)&v34[2] = "";
      *(_WORD *)&v34[10] = 2082;
      *(_QWORD *)&v34[12] = "activity";
      v35 = 2082;
      v36 = v10;
      v37 = 2050;
      v38 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v39 = v40;
      memset(v40, 0, sizeof(v40));
      v41 = 0;
      sub_1010BFD70((uint64_t)buf, a2, (uint64_t)&v39);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v38;
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v34, *(_QWORD **)&v34[8]);
      v21 = v41;
      if (v41)
      {
        v22 = (unint64_t *)&v41->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v39, v40[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0xB8uLL);
      v25 = a3[7];
      *(_OWORD *)(v24 + 120) = a3[6];
      *(_OWORD *)(v24 + 136) = v25;
      *(_OWORD *)(v24 + 152) = a3[8];
      *(_OWORD *)(v24 + 164) = *(_OWORD *)((char *)a3 + 140);
      v26 = a3[3];
      *(_OWORD *)(v24 + 56) = a3[2];
      *(_OWORD *)(v24 + 72) = v26;
      v27 = a3[5];
      *(_OWORD *)(v24 + 88) = a3[4];
      *(_OWORD *)(v24 + 104) = v27;
      v28 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_10219FAA0;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 40) = v28;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v34 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v29 = *(std::__shared_weak_count **)v34;
      if (*(_QWORD *)v34)
      {
        v30 = (unint64_t *)(*(_QWORD *)v34 + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10014D0A0();
    os_activity_scope_leave(&state);
  }
}

void sub_10014D050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10014D0A0()
{
  operator new();
}

const char *sub_10014D1E0(unsigned int a1)
{
  if (a1 <= 0xD)
    return (&off_102174018)[a1];
  else
    return "<error>";
}

uint64_t sub_10014D204(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  double v6;
  __int128 v7;
  __int128 v8;

  v3 = a1 - 152;
  v6 = sub_1001611D4(a1 - 152, *(double *)(a1 + 200));
  v4 = a2[1];
  v7 = *a2;
  v8 = v4;
  return sub_10014C2F4(v3, 8, (uint64_t)&v6, 40);
}

__n128 sub_10014D258@<Q0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xC0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *((_DWORD *)v6 + 7) = **a2;
  *((_DWORD *)v6 + 8) = 0xFFFF;
  *(_QWORD *)(v6 + 36) = 0;
  *(_QWORD *)(v6 + 44) = 0;
  *(_OWORD *)(v6 + 52) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(v6 + 68) = result;
  *(__n128 *)(v6 + 84) = result;
  *(__n128 *)(v6 + 100) = result;
  *((_DWORD *)v6 + 29) = 0;
  *((_DWORD *)v6 + 36) = 0;
  *((_QWORD *)v6 + 15) = 0xBFF0000000000000;
  *((_QWORD *)v6 + 16) = 0;
  *((_QWORD *)v6 + 17) = 0;
  *(_QWORD *)(v6 + 148) = 0xBFF0000000000000;
  *((_DWORD *)v6 + 39) = 0x7FFFFFFF;
  *((_QWORD *)v6 + 20) = 0;
  *((_QWORD *)v6 + 21) = 0;
  v6[184] = 0;
  *((_QWORD *)v6 + 22) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_10014D304(uint64_t a1)
{
  char v1;

  sub_100DC7418((uint64_t)&v1, a1 + 24);
}

void sub_10014D328(uint64_t a1)
{
  char v1;

  sub_1005C86BC((uint64_t)&v1, a1 + 24);
}

uint64_t sub_10014D34C(uint64_t a1)
{
  return sub_100109508(a1 + 24);
}

_QWORD *sub_10014D354(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v24;

  v7 = sub_100129380((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_10009483C(v13 + 2, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_10014D5BC(a1, v8, a3, (uint64_t)&v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *v24 = *v21;
    *v21 = v24;
  }
  else
  {
    *v24 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v24)
    {
      v22 = *(_QWORD *)(*v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24;
    }
  }
  v13 = v24;
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_10014D598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_100279070((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10014D5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_10055AB7C((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_10014D628(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_10014D644(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v7 = sub_100129380((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_10009483C(v13 + 2, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x78uLL);
  *v13 = 0;
  v13[1] = v8;
  v15 = *(_OWORD *)(a3 + 80);
  *((_OWORD *)v13 + 5) = *(_OWORD *)(a3 + 64);
  *((_OWORD *)v13 + 6) = v15;
  v13[14] = *(_QWORD *)(a3 + 96);
  v16 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v13 + 2) = v16;
  v17 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v13 + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v13 + 4) = v17;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_10012E444(a1, v23);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v25)
  {
    *v13 = *v25;
LABEL_38:
    *v25 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v24 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v26 = *(_QWORD *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9)
        v26 %= v9;
    }
    else
    {
      v26 &= v9 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_10014D880(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10014D894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  sub_100126D5C(*(_QWORD *)a1);
  v4 = *(_QWORD *)a1;
  result = sub_10012D080(*(_QWORD *)a1 + 8, (uint64_t *)a2);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v4 + 56) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(v4 + 64) = 0;
  *(_BYTE *)(v4 + 152) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 56);
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v4 + 88) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(v4 + 72) = v6;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    v7 = *(_OWORD *)(a2 + 88);
    v8 = *(_OWORD *)(a2 + 104);
    v9 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(v4 + 144) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(v4 + 112) = v8;
    *(_OWORD *)(v4 + 128) = v9;
    *(_OWORD *)(v4 + 96) = v7;
    *(_BYTE *)(v4 + 152) = 1;
  }
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  return result;
}

_BYTE *sub_10014D944(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE *result;
  __int128 v10;

  v3 = *a1;
  v4 = *a2;
  *(_BYTE *)(v3 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)v3 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    sub_100115CE4((_BYTE *)(v3 + 16), (void *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(v3 + 32) = a2[4];
    *(_OWORD *)(v3 + 16) = v5;
  }
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 5);
  v6 = *(_OWORD *)(a2 + 7);
  v7 = *(_OWORD *)(a2 + 9);
  v8 = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(v3 + 100) = *(_OWORD *)((char *)a2 + 100);
  *(_OWORD *)(v3 + 88) = v8;
  *(_OWORD *)(v3 + 72) = v7;
  *(_OWORD *)(v3 + 56) = v6;
  result = (_BYTE *)(v3 + 120);
  if (*((char *)a2 + 143) < 0)
    return sub_100115CE4(result, (void *)a2[15], a2[16]);
  v10 = *(_OWORD *)(a2 + 15);
  *(_QWORD *)(v3 + 136) = a2[17];
  *(_OWORD *)result = v10;
  return result;
}

void sub_10014DA00(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 39) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_10014DA1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *a1;
  sub_10012D700(*a1, a2);
  *(_QWORD *)(v3 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a2 + 48);
  return sub_10031F08C((_BYTE *)(v3 + 56), a2 + 56);
}

void sub_10014DA60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100127554(v1);
  _Unwind_Resume(a1);
}

void sub_10014DA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  char *v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[2];
  _OWORD v25[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  uint8_t buf[32];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[28];
  int v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  _OWORD v47[102];

  if (objc_msgSend(*(id *)(a1 + 152), "indoord"))
  {
    v6 = objc_msgSend(objc_alloc((Class)CLGpsPosition), "initWithLocation:andPrivateLocation:", a2, v47, sub_10014DF90(a3, v47));
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if (v6)
      {
        objc_msgSend(v6, "gpsLocation");
        v8 = *(_QWORD *)((char *)v47 + 4);
        objc_msgSend(v6, "gpsLocation");
        v9 = *(_QWORD *)((char *)v25 + 12);
        objc_msgSend(v6, "gpsLocation");
        v10 = v22;
      }
      else
      {
        v10 = 0;
        v9 = 0;
        v8 = 0;
        memset(v47, 0, 156);
        v31 = 0u;
        memset(v32, 0, 28);
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        memset(v25, 0, sizeof(v25));
        v23 = 0u;
        memset(v24, 0, 28);
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
        memset(v17, 0, sizeof(v17));
      }
      *(_DWORD *)buf = 134284033;
      *(_QWORD *)&buf[4] = v8;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 1025;
      *(_DWORD *)&buf[24] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Notifying pipelined of a new outdoor location @ %{private}.6lf, %{private}.6lf, type, %{private}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v47, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v11 = qword_1022A0048;
      if (v6)
      {
        objc_msgSend(v6, "gpsLocation");
        v12 = *(_QWORD *)((char *)v25 + 4);
        objc_msgSend(v6, "gpsLocation");
        v13 = *(_QWORD *)((char *)v17 + 12);
        objc_msgSend(v6, "gpsLocation");
        v14 = v38;
      }
      else
      {
        v14 = 0;
        v13 = 0;
        v12 = 0;
        v31 = 0u;
        memset(v32, 0, 28);
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        memset(v25, 0, sizeof(v25));
        v23 = 0u;
        memset(v24, 0, 28);
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v18 = 0u;
        memset(v17, 0, sizeof(v17));
        v39 = 0u;
        memset(v40, 0, sizeof(v40));
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v34 = 0u;
        memset(buf, 0, sizeof(buf));
      }
      v41 = 134284033;
      v42 = v12;
      v43 = 2049;
      v44 = v13;
      v45 = 1025;
      v46 = v14;
      _os_log_send_and_compose_impl(2, 0, v47, 1628, &_mh_execute_header, v11, 2, "Notifying pipelined of a new outdoor location @ %{private}.6lf, %{private}.6lf, type, %{private}d", &v41, 28, v17[0], v17[1], v18, v19, v20, v21, v22, v23, v24[0],
        *(_QWORD *)&v24[1],
        DWORD2(v24[1]),
        v25[0],
        v25[1],
        v26,
        v27,
        v28,
        v29,
        v30,
        v31,
        v32[0],
        *(_QWORD *)&v32[1],
        DWORD2(v32[1]),
        *(_QWORD *)buf,
        *(_QWORD *)&buf[8],
        *(_QWORD *)&buf[16],
        *(_QWORD *)&buf[24],
        v34,
        v35,
        v36,
        v37,
        (_QWORD)v38);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLPipelineLocationProvider::sendOutdoorLocationToPipelined(const CLDaemonLocation &, const CLDaemonLocationPrivate &) const", "%s\n", v15);
      if (v16 != (char *)v47)
        free(v16);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "outdoorLocationAvailable:", v6);

  }
}

double sub_10014DDE8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  int v10;
  double result;

  memcpy(a2, &unk_101C17518, 0x230uLL);
  v4 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v4;
  *(_QWORD *)&v4 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)a2 + 4) = *(_QWORD *)(a1 + 32);
  *((_QWORD *)a2 + 5) = v4;
  *((_DWORD *)a2 + 12) = *(_DWORD *)(a1 + 48);
  *((_BYTE *)a2 + 52) = *(_BYTE *)(a1 + 52);
  *((_DWORD *)a2 + 14) = *(_DWORD *)(a1 + 56);
  a2[4] = *(_OWORD *)(a1 + 64);
  *(_QWORD *)&v4 = *(_QWORD *)(a1 + 88);
  *((_QWORD *)a2 + 10) = *(_QWORD *)(a1 + 80);
  *((_QWORD *)a2 + 11) = v4;
  *((_BYTE *)a2 + 96) = *(_BYTE *)(a1 + 96);
  *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)((char *)a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)((char *)a2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)((char *)a2 + 152) = *(_OWORD *)(a1 + 152);
  v5 = *(_OWORD *)(a1 + 280);
  *(_OWORD *)((char *)a2 + 264) = *(_OWORD *)(a1 + 264);
  *(_OWORD *)((char *)a2 + 280) = v5;
  *(_OWORD *)((char *)a2 + 248) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)((char *)a2 + 232) = *(_OWORD *)(a1 + 232);
  *(_OWORD *)((char *)a2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)((char *)a2 + 200) = *(_OWORD *)(a1 + 200);
  *(_OWORD *)((char *)a2 + 184) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)((char *)a2 + 168) = *(_OWORD *)(a1 + 168);
  *(_OWORD *)((char *)a2 + 296) = *(_OWORD *)(a1 + 296);
  *((_DWORD *)a2 + 78) = *(_DWORD *)(a1 + 312);
  *((_DWORD *)a2 + 79) = *(_DWORD *)(a1 + 316);
  v6 = *(_OWORD *)(a1 + 336);
  a2[20] = *(_OWORD *)(a1 + 320);
  a2[21] = v6;
  *((_DWORD *)a2 + 88) = *(_DWORD *)(a1 + 352);
  *((_BYTE *)a2 + 356) = *(_BYTE *)(a1 + 356);
  *((_QWORD *)a2 + 45) = *(_QWORD *)(a1 + 360);
  v7 = *(_OWORD *)(a1 + 384);
  a2[23] = *(_OWORD *)(a1 + 368);
  a2[24] = v7;
  a2[25] = *(_OWORD *)(a1 + 400);
  *((_QWORD *)a2 + 52) = *(_QWORD *)(a1 + 416);
  *((_BYTE *)a2 + 424) = *(_BYTE *)(a1 + 424);
  *((_BYTE *)a2 + 425) = *(_BYTE *)(a1 + 425);
  a2[27] = *(_OWORD *)(a1 + 432);
  *((_QWORD *)a2 + 56) = *(_QWORD *)(a1 + 448);
  *((_DWORD *)a2 + 114) = *(_DWORD *)(a1 + 456);
  v8 = *(_OWORD *)(a1 + 480);
  a2[29] = *(_OWORD *)(a1 + 464);
  a2[30] = v8;
  a2[31] = *(_OWORD *)(a1 + 496);
  v9 = *(unsigned __int8 *)(a1 + 576);
  if (v9 == 1)
    v10 = 1;
  else
    v10 = 2 * (v9 == 2);
  *((_DWORD *)a2 + 128) = v10;
  *((_QWORD *)a2 + 65) = *(_QWORD *)(a1 + 584);
  *((_QWORD *)a2 + 66) = *(_QWORD *)(a1 + 592);
  result = *(double *)(a1 + 616);
  *((double *)a2 + 67) = result;
  *((_QWORD *)a2 + 68) = *(_QWORD *)(a1 + 624);
  *((_BYTE *)a2 + 552) = *(_BYTE *)(a1 + 632);
  return result;
}

uint64_t sub_10014DF94(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 2788) - 1;
  if (v1 > 5)
    return 0;
  else
    return dword_101C1F520[v1];
}

BOOL sub_10014DFBC(uint64_t a1, int32x2_t *a2)
{
  uint64_t v2;

  return *(_BYTE *)(a1 + 2808) && (v2 = *(_QWORD *)(a1 + 2800)) != 0 && sub_10014DFD8(v2, a2);
}

BOOL sub_10014DFD8(uint64_t a1, int32x2_t *a2)
{
  int v2;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  int v35;
  _BYTE v36[10];
  uint64_t v37;
  _BYTE v38[10];
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  _BYTE v42[10];
  uint64_t v43;
  _BYTE v44[10];
  __int16 v45;
  uint64_t v46;

  v2 = *(unsigned __int8 *)(a1 + 2232);
  if (*(_BYTE *)(a1 + 2232))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a1 + 2160);
      v7 = *(_QWORD *)(a1 + 2168);
      v8 = *(_QWORD *)(a1 + 2184);
      v9 = *(_QWORD *)(a1 + 2176);
      *(_DWORD *)buf = 134349824;
      *(_QWORD *)v42 = v6;
      *(_WORD *)&v42[8] = 2050;
      v43 = v7;
      *(_WORD *)v44 = 2050;
      *(_QWORD *)&v44[2] = v8;
      v45 = 2050;
      v46 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BaroAlt,DriftRate Data,closeLoopError,%{public}lf,durationSinceLastCalibEv,%{public}lf,distanceFromLastCalibEv,%{public}lf,estAltUnc,%{public}lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v24 = *(_QWORD *)(a1 + 2160);
      v25 = *(_QWORD *)(a1 + 2168);
      v26 = *(_QWORD *)(a1 + 2184);
      v27 = *(_QWORD *)(a1 + 2176);
      v35 = 134349824;
      *(_QWORD *)v36 = v24;
      *(_WORD *)&v36[8] = 2050;
      v37 = v25;
      *(_WORD *)v38 = 2050;
      *(_QWORD *)&v38[2] = v26;
      v39 = 2050;
      v40 = v27;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,DriftRate Data,closeLoopError,%{public}lf,durationSinceLastCalibEv,%{public}lf,distanceFromLastCalibEv,%{public}lf,estAltUnc,%{public}lf", &v35, 42);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::getBarometricAltitudeAWDData(CLDaemonStats_Type::BarometricAltitudeDriftRateInfo &) const", "%s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    a2->i32[0] = llround(*(double *)(a1 + 2160) * 10.0);
    v10 = vcvtad_u64_f64(*(double *)(a1 + 2168));
    a2->i32[1] = v10;
    __asm { FMOV            V1.2D, #10.0 }
    a2[1] = vmovn_s64((int64x2_t)vcvtq_u64_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 2176), _Q1))));
    if (v10 >= 5 && *(_DWORD *)(a1 + 3744) <= v10)
    {
      *(_OWORD *)(a1 + 3740) = *(_OWORD *)a2->i8;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v17 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(_DWORD *)(a1 + 3740);
        v19 = *(_DWORD *)(a1 + 3744);
        v20 = *(_DWORD *)(a1 + 3752);
        v21 = *(_DWORD *)(a1 + 3748);
        *(_DWORD *)buf = 67240960;
        *(_DWORD *)v42 = v18;
        *(_WORD *)&v42[4] = 1026;
        *(_DWORD *)&v42[6] = v19;
        LOWORD(v43) = 1026;
        *(_DWORD *)((char *)&v43 + 2) = v20;
        HIWORD(v43) = 1026;
        *(_DWORD *)v44 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BaroAlt,DriftRate Core Analytics Data,closeLoopError,%{public}d,durationSinceLastCalibEv,%{public}d,distanceFromLastCalibEv,%{public}d,estAltUnc,%{public}d", buf, 0x1Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v29 = *(_DWORD *)(a1 + 3740);
        v30 = *(_DWORD *)(a1 + 3744);
        v31 = *(_DWORD *)(a1 + 3752);
        v32 = *(_DWORD *)(a1 + 3748);
        v35 = 67240960;
        *(_DWORD *)v36 = v29;
        *(_WORD *)&v36[4] = 1026;
        *(_DWORD *)&v36[6] = v30;
        LOWORD(v37) = 1026;
        *(_DWORD *)((char *)&v37 + 2) = v31;
        HIWORD(v37) = 1026;
        *(_DWORD *)v38 = v32;
        LODWORD(v34) = 26;
        v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,DriftRate Core Analytics Data,closeLoopError,%{public}d,durationSinceLastCalibEv,%{public}d,distanceFromLastCalibEv,%{public}d,estAltUnc,%{public}d", &v35, v34);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::getBarometricAltitudeAWDData(CLDaemonStats_Type::BarometricAltitudeDriftRateInfo &) const", "%s\n", v33);
        if (v33 != (char *)buf)
          free(v33);
      }
      v22 = sub_10073C788();
      sub_100746F58(v22, (int *)(a1 + 3740));
    }
    *(_BYTE *)(a1 + 2232) = 0;
  }
  return v2 != 0;
}

void sub_10014E3F4(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAWD::HandleLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CE070);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAWD::HandleLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CE070);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAWD::HandleLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10014E5CC((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10014E5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10014E5CC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  if (!sub_101750B38(a1, a3, a4))
  {
    *(_BYTE *)(a1 + 1320) = *(_BYTE *)(a4 + 736);
    if (*a3 == 10)
    {
      if (*(_DWORD *)(a4 + 96) == 3)
        *(_BYTE *)(a1 + 2401) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 2401) = 0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v8 = *a3;
        *(_DWORD *)buf = 67240192;
        v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v9 = *a3;
        v12[0] = 67240192;
        v12[1] = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d", v12, 8);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssAWD::HandleLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

void sub_10014E7C4(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  unsigned int v9;
  unint64_t v10;
  double Current;
  double v12;
  double v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  const char *v26;
  int v27;
  NSObject *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  float64x2_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  NSObject *v69;
  uint64_t v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  const char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  const char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  char *v96;
  const char *v97;
  char *v98;
  double v99;
  double v100;
  os_activity_scope_state_s state;
  double v102;
  _BYTE v103[24];
  uint64_t v104;
  __int16 v105;
  double v106;
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  double v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  __int16 v123;
  double v124;
  _BYTE buf[64];
  double v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;

  CLProfilingIdentify("CLGeomagneticModelProviderDaemon::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    LOBYTE(v102) = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGeomagneticModelProviderDaemon::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "activity";
      *(_WORD *)&buf[28] = 2050;
      *(_QWORD *)&buf[30] = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGeomagneticModelProviderDaemon::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    LOBYTE(v102) = 0;
  }
  HIDWORD(v10) = *a2;
  LODWORD(v10) = *a2;
  v9 = v10 >> 1;
  if (v9 >= 3)
  {
    if (v9 == 7)
    {
      v27 = sub_100BCF098(a4 + 176);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v28 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "new location authorization status for geomagnetic model: %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        *(_DWORD *)v103 = 67240192;
        *(_DWORD *)&v103[4] = v27;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "new location authorization status for geomagnetic model: %{public}d", v103, 8);
        v72 = (char *)v71;
        sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
      if ((v27 - 3) < 2)
      {
        sub_1018D6CFC(a4);
        sub_1018D671C(a4);
      }
      else if ((v27 - 1) <= 1)
      {
        sub_1018D7884(a4);
      }
    }
  }
  else
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (*(double *)((char *)a3 + 20) >= 0.0
      && ((v12 = a3[11], v12 < 0.0) || Current <= v12 + *(double *)((char *)a3 + 76) + *(double *)(a4 + 416))
      && sub_10019CFA0() == 1)
    {
      sub_10014F7DC(a4);
      v13 = *(double *)(a4 + 168);
      if (v13 < 0.0 || *(double *)((char *)a3 + 76) - v13 >= *(double *)(a4 + 416) * 0.5)
      {
        v29 = sub_101893444();
        v30 = *(double *)((char *)a3 + 4);
        v31 = *(double *)((char *)a3 + 12);
        v32 = *(double *)((char *)a3 + 28);
        if (sub_1005E63C4((uint64_t)v103, v30, v31, v32, v29))
        {
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          v33 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
          {
            v34 = *(_QWORD *)((char *)a3 + 76);
            *(_DWORD *)buf = 134349312;
            *(_QWORD *)&buf[4] = v34;
            *(_WORD *)&buf[12] = 2050;
            *(double *)&buf[14] = v29;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "declination calculation failed @ %{public}lf (%{public}f)", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
            v73 = *(_QWORD *)((char *)a3 + 76);
            v121 = 134349312;
            v122 = v73;
            v123 = 2050;
            v124 = v29;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 17, "declination calculation failed @ %{public}lf (%{public}f)", &v121, 22);
            v75 = (char *)v74;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLGeomagneticModelProviderDaemon::getGeomagneticField(const CLDaemonLocation &)", "%s\n", v74);
            if (v75 != buf)
              free(v75);
          }
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          v35 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
          {
            v36 = *(_QWORD *)((char *)a3 + 4);
            v37 = *(_QWORD *)((char *)a3 + 12);
            v38 = *(_QWORD *)((char *)a3 + 28);
            *(_DWORD *)buf = 134218496;
            *(_QWORD *)&buf[4] = v36;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v37;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v38;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning no geomagnetic information available for <%+.8f,%+.8f,%+.3f>", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
            v39 = *(_QWORD *)((char *)a3 + 4);
            v40 = *(_QWORD *)((char *)a3 + 12);
            v41 = *(_QWORD *)((char *)a3 + 28);
            *(_DWORD *)v103 = 134218496;
            *(_QWORD *)&v103[4] = v39;
            *(_WORD *)&v103[12] = 2048;
            *(_QWORD *)&v103[14] = v40;
            *(_WORD *)&v103[22] = 2048;
            v104 = v41;
            LODWORD(v99) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning no geomagnetic information available for <%+.8f,%+.8f,%+.3f>", COERCE_DOUBLE(v103), v99, v100);
            v16 = (char *)v42;
            sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v42);
            goto LABEL_32;
          }
        }
        else
        {
          v43 = vcvtq_f64_f32(*(float32x2_t *)&v103[8]);
          *(float64x2_t *)(a4 + 112) = vcvtq_f64_f32(*(float32x2_t *)v103);
          *(float64x2_t *)(a4 + 128) = v43;
          *(float64x2_t *)(a4 + 144) = vcvtq_f64_f32(*(float32x2_t *)&v103[16]);
          *(double *)(a4 + 160) = *(float *)&v104;
          *(double *)(a4 + 168) = *(double *)((char *)a3 + 76);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          v44 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
          {
            v45 = *(_QWORD *)((char *)a3 + 4);
            v46 = *(_QWORD *)((char *)a3 + 12);
            v47 = *(_QWORD *)((char *)a3 + 28);
            v48 = *(double *)((char *)a3 + 76);
            v49 = *(_QWORD *)(a4 + 152);
            v50 = *(_QWORD *)(a4 + 160);
            v51 = v48 + *(double *)(a4 + 416);
            *(_DWORD *)buf = 134219520;
            *(_QWORD *)&buf[4] = v45;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v46;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v47;
            *(_WORD *)&buf[32] = 2048;
            *(double *)&buf[34] = v48;
            *(_WORD *)&buf[42] = 2048;
            *(_QWORD *)&buf[44] = v49;
            *(_WORD *)&buf[52] = 2048;
            *(_QWORD *)&buf[54] = v50;
            *(_WORD *)&buf[62] = 2048;
            v126 = v51;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f", buf, 0x48u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
            v76 = *(_QWORD *)((char *)a3 + 4);
            v77 = *(_QWORD *)((char *)a3 + 12);
            v78 = *(_QWORD *)((char *)a3 + 28);
            v79 = *(double *)((char *)a3 + 76);
            v80 = *(_QWORD *)(a4 + 152);
            v81 = *(_QWORD *)(a4 + 160);
            v82 = v79 + *(double *)(a4 + 416);
            *(_DWORD *)v103 = 134219520;
            *(_QWORD *)&v103[4] = v76;
            *(_WORD *)&v103[12] = 2048;
            *(_QWORD *)&v103[14] = v77;
            *(_WORD *)&v103[22] = 2048;
            v104 = v78;
            v105 = 2048;
            v106 = v79;
            v107 = 2048;
            v108 = v80;
            v109 = 2048;
            v110 = v81;
            v111 = 2048;
            v112 = v82;
            LODWORD(v99) = 72;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f", COERCE_DOUBLE(v103), v99, v100, *(double *)state.opaque, *(double *)&state.opaque[1], v102);
            v84 = (char *)v83;
            sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v83);
            if (v84 != buf)
              free(v84);
          }
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          v52 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
          {
            v53 = *(_QWORD *)((char *)a3 + 4);
            v54 = *(_QWORD *)((char *)a3 + 12);
            v55 = *(_QWORD *)((char *)a3 + 28);
            v56 = *(_QWORD *)(a4 + 112);
            v57 = *(_QWORD *)(a4 + 120);
            v58 = *(double *)(a4 + 128);
            v59 = *(_QWORD *)(a4 + 136);
            v60 = *(_QWORD *)(a4 + 144);
            v61 = *(_QWORD *)(a4 + 152);
            v62 = *(_QWORD *)(a4 + 160);
            *(_DWORD *)buf = 136317698;
            *(_QWORD *)&buf[4] = "Compass-Geomagnetic";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v53;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v54;
            *(_WORD *)&buf[32] = 2048;
            *(_QWORD *)&buf[34] = v55;
            *(_WORD *)&buf[42] = 2048;
            *(_QWORD *)&buf[44] = v56;
            *(_WORD *)&buf[52] = 2048;
            *(_QWORD *)&buf[54] = v57;
            *(_WORD *)&buf[62] = 2048;
            v126 = v58;
            v127 = 2048;
            v128 = v59;
            v129 = 2048;
            v130 = v60;
            v131 = 2048;
            v132 = v61;
            v133 = 2048;
            v134 = v62;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,", buf, 0x70u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
            v85 = *(_QWORD *)((char *)a3 + 4);
            v86 = *(_QWORD *)((char *)a3 + 12);
            v87 = *(double *)((char *)a3 + 28);
            v88 = *(_QWORD *)(a4 + 112);
            v89 = *(_QWORD *)(a4 + 120);
            v90 = *(double *)(a4 + 128);
            v91 = *(_QWORD *)(a4 + 136);
            v92 = *(_QWORD *)(a4 + 144);
            v93 = *(_QWORD *)(a4 + 152);
            v94 = *(_QWORD *)(a4 + 160);
            *(_DWORD *)v103 = 136317698;
            *(_QWORD *)&v103[4] = "Compass-Geomagnetic";
            *(_WORD *)&v103[12] = 2048;
            *(_QWORD *)&v103[14] = v85;
            *(_WORD *)&v103[22] = 2048;
            v104 = v86;
            v105 = 2048;
            v106 = v87;
            v107 = 2048;
            v108 = v88;
            v109 = 2048;
            v110 = v89;
            v111 = 2048;
            v112 = v90;
            v113 = 2048;
            v114 = v91;
            v115 = 2048;
            v116 = v92;
            v117 = 2048;
            v118 = v93;
            v119 = 2048;
            v120 = v94;
            LODWORD(v99) = 112;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,", v103, v99, v100, *(double *)state.opaque, *(double *)&state.opaque[1], v102);
            v96 = (char *)v95;
            sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v95);
            if (v96 != buf)
              free(v96);
          }
          v63 = *(_OWORD *)(a4 + 128);
          *(_OWORD *)buf = *(_OWORD *)(a4 + 112);
          *(_OWORD *)&buf[16] = v63;
          v64 = *(_OWORD *)(a4 + 160);
          *(_OWORD *)&buf[32] = *(_OWORD *)(a4 + 144);
          *(_OWORD *)&buf[48] = v64;
          *(_DWORD *)v103 = 0;
          (*(void (**)(uint64_t, _BYTE *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 152))(a4, v103, buf, 1, 0xFFFFFFFFLL, 0);
          objc_msgSend(*(id *)(a4 + 368), "setNextFireDelay:", *(double *)(a4 + 416));
          v66 = *(double *)(a4 + 160);
          v65 = *(double *)(a4 + 168);
          v67 = *(double *)(a4 + 136);
          v68 = *(double *)(a4 + 152);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          v69 = qword_10229FD48;
          if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134349056;
            *(double *)&buf[4] = v65;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "caching geomagnetic information @ %{public}.3f", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD40 != -1)
              dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
            *(_DWORD *)v103 = 134349056;
            *(double *)&v103[4] = v65;
            LODWORD(v99) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "caching geomagnetic information @ %{public}.3f", v103, *(_QWORD *)&v99);
            v98 = (char *)v97;
            sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::storeGeomagneticDataToCache()", "%s\n", v97);
            if (v98 != buf)
              free(v98);
          }
          v70 = sub_1001FD94C();
          *(_QWORD *)buf = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v65);
          *(_QWORD *)&buf[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v67));
          *(_QWORD *)&buf[16] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v68));
          *(_QWORD *)&buf[24] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", round(v66));
          +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 4);
          sub_10023EC14(v70);
        }
      }
      else
      {
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        v14 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "current location is still fresh, geomagnetic data is not re-calculated", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          *(_WORD *)v103 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "current location is still fresh, geomagnetic data is not re-calculated", v103, 2);
          v16 = (char *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v15);
LABEL_32:
          if (v16 != buf)
            free(v16);
        }
      }
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v17 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *(_QWORD *)((char *)a3 + 4);
        v19 = *(_QWORD *)((char *)a3 + 12);
        v20 = *(_QWORD *)((char *)a3 + 28);
        v21 = *(_QWORD *)((char *)a3 + 76);
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v19;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v20;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        v22 = *(_QWORD *)((char *)a3 + 4);
        v23 = *(_QWORD *)((char *)a3 + 12);
        v24 = *(_QWORD *)((char *)a3 + 28);
        v25 = *(double *)((char *)a3 + 76);
        *(_DWORD *)v103 = 134218752;
        *(_QWORD *)&v103[4] = v22;
        *(_WORD *)&v103[12] = 2048;
        *(_QWORD *)&v103[14] = v23;
        *(_WORD *)&v103[22] = 2048;
        v104 = v24;
        v105 = 2048;
        v106 = v25;
        LODWORD(v99) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "#Warning geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f", COERCE_DOUBLE(v103), v99, v100, *(double *)state.opaque);
        v16 = (char *)v26;
        sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)", "%s\n", v26);
        goto LABEL_32;
      }
    }
  }
  if (LOBYTE(v102))
    os_activity_scope_leave(&state);
}

void sub_10014F7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_10014F7DC(uint64_t a1)
{
  id result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  result = objc_msgSend(*(id *)(a1 + 376), "setNextFireDelay:", 1.79769313e308);
  if (*(_BYTE *)(a1 + 408))
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v3 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "stopping coarse location for computing geomagnetic data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "stopping coarse location for computing geomagnetic data", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::stopCoarseLocationUpdates()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 400) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8), 2);
    *(_BYTE *)(a1 + 408) = 0;
  }
  return result;
}

void sub_10014F998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10014F9A0(a1, a4);
}

void sub_10014F9A0(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  NSObject *v5;
  double v6;
  uint8_t *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  uint8_t *v11;
  unint64_t TimeStamp;
  double v13;
  __int16 v14;
  int64_t v15;
  unsigned __int8 *v16[2];
  uint8_t buf[1640];

  if (a2)
  {
    v15 = 0;
    v16[0] = 0;
    IOHIDEventGetVendorDefinedData(a2, v16, &v15);
    if (v16[0])
      v4 = v15 <= 0;
    else
      v4 = 1;
    if (!v4)
    {
      TimeStamp = IOHIDEventGetTimeStamp(a2);
      v13 = sub_100127828(TimeStamp);
      sub_10014FC88(a1, v16[0], v15, v13);
      return;
    }
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10219C310);
    v5 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_10219C310);
      v14 = 0;
      v6 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 1, "Empty payload, returning", &v14, 2);
      v8 = v7;
      sub_100512490("Generic", 1, 0, 2, "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)", "%s\n", v6);
LABEL_23:
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10219C310);
    v9 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Event ref invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_10219C310);
      LOWORD(v16[0]) = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 17, "Event ref invalid", v16, 2);
      v8 = v11;
      sub_100512490("Generic", 1, 0, 0, "void CLSPUInertialOdometryInterface::onIoHidEvent(IOHIDEventRef)", "%s\n", v10);
      goto LABEL_23;
    }
  }
}

void sub_10014FC88(uint64_t a1, unsigned __int8 *a2, size_t a3, double a4)
{
  int v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  unsigned __int8 __dst[102];
  int v17;
  int v18;
  __int16 v19;
  size_t v20;
  int buf;
  int v22;
  __int16 v23;
  size_t v24;

  *(double *)(a1 + 24) = a4;
  sub_100155080(__dst, a2, a3);
  if (a3)
    v7 = *a2;
  else
    v7 = 0;
  if (qword_10229FF80 != -1)
    dispatch_once(&qword_10229FF80, &stru_10219C310);
  v8 = qword_10229FF88;
  if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEBUG))
  {
    buf = 67240448;
    v22 = v7;
    v23 = 2050;
    v24 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "type,%{public}d,size,%{public}lu", (uint8_t *)&buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10219C310);
    v17 = 67240448;
    v18 = v7;
    v19 = 2050;
    v20 = a3;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF88, 2, "type,%{public}d,size,%{public}lu", &v17, 18);
    v13 = (int *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLSPUInertialOdometryInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v12);
    if (v13 != &buf)
      free(v13);
  }
  if (v7 == 255)
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10219C310);
    v9 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_FAULT))
    {
      buf = 67240448;
      v22 = 255;
      v23 = 2050;
      v24 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Bad report,type,%{public}d,size,%{public}lu", (uint8_t *)&buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_10219C310);
      v17 = 67240448;
      v18 = 255;
      v19 = 2050;
      v20 = a3;
      LODWORD(v15) = 18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF88, 17, "Bad report,type,%{public}d,size,%{public}lu", &v17, v15);
LABEL_32:
      v14 = (int *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLSPUInertialOdometryInterface::visitIoHidEvent(const uint8_t *, size_t, const CFTimeInterval)", "%s\n", v10);
      if (v14 != &buf)
        free(v14);
    }
  }
  else if ((sub_1001500DC(__dst, (_QWORD *)a1) & 1) == 0)
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10219C310);
    v11 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_FAULT))
    {
      buf = 67240192;
      v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "CMInertialOdometryReport::visit() type %{public}d failed.", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_10219C310);
      v17 = 67240192;
      v18 = v7;
      LODWORD(v15) = 8;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF88, 17, "CMInertialOdometryReport::visit() type %{public}d failed.", &v17, v15);
      goto LABEL_32;
    }
  }
}

uint64_t sub_1001500DC(unsigned __int8 *a1, _QWORD *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a1;
  if (v2 == 1)
  {
    v3 = 2;
    goto LABEL_6;
  }
  if (v2 != 255)
  {
    if (v2 != 2)
      return 1;
    v3 = 3;
LABEL_6:
    (*(void (**)(_QWORD *, unsigned __int8 *))(*a2 + 8 * v3))(a2, a1);
    return 1;
  }
  return 0;
}

_QWORD *sub_100150138(uint64_t a1, uint64_t a2)
{
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int isTypePedestrian;
  _QWORD *result;
  unsigned int v9;
  _OWORD v10[8];
  uint64_t v11;
  unsigned int *v12;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  v3.n128_f64[0] = sub_1000CF518(a1, (uint64_t)v10);
  v4 = LODWORD(v10[0]);
  ++*(_DWORD *)(a2 + 488);
  if (CLMotionActivity::isTypeInVehicle(v4, v3))
  {
    v5 = a2 + 448;
    if (DWORD1(v10[0]) == 2)
      v6 = 6;
    else
      v6 = 3;
    goto LABEL_10;
  }
  isTypePedestrian = CLMotionActivity::isTypePedestrian(v4);
  if ((_DWORD)v4 == 100 || isTypePedestrian)
  {
    v5 = a2 + 448;
    v6 = 2;
    goto LABEL_10;
  }
  if (CLMotionActivity::isTypeStatic(v4))
  {
    v5 = a2 + 448;
    v6 = 1;
LABEL_10:
    v9 = v6;
LABEL_11:
    v12 = &v9;
    result = sub_1000A6778(v5, &v9, (uint64_t)&unk_101B9EB60, &v12);
    ++*((_DWORD *)result + 5);
    return result;
  }
  if (CLMotionActivity::isTypeUnclassifiedMoving(v4))
  {
    v5 = a2 + 448;
    v9 = 0;
    goto LABEL_11;
  }
  if (CLMotionActivity::isTypeCycling(v4))
  {
    v5 = a2 + 448;
    v6 = 4;
    goto LABEL_10;
  }
  result = (_QWORD *)CLMotionActivity::isTypeIndoorActivity(v4);
  if ((_DWORD)result)
  {
    v5 = a2 + 448;
    v6 = 5;
    goto LABEL_10;
  }
  return result;
}

void sub_100150270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSignalEnvironmentProvider::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102183AA8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSignalEnvironmentProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102183AA8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSignalEnvironmentProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100150440(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100150420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100150440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;
  uint64_t v7;
  int v8;
  int v9;
  double v10;
  long double v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  int v20;
  int v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  int v33;
  int v34;
  const char *v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;

  v4 = *(double *)(a4 + 20);
  if (v4 < 0.0 || v4 > 2500.0 || !sub_10011CE88(*(double *)(a4 + 4), *(double *)(a4 + 12)))
    return;
  v7 = *(_QWORD *)(a1 + 128);
  if (!v7)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#Error,CLSE,onLocationNotification,null CSE pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,CLSE,onLocationNotification,null CSE pointer", &v40, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return;
  }
  v39 = 0;
  v9 = *(_DWORD *)(a1 + 120);
  v8 = *(_DWORD *)(a1 + 124);
  v10 = *(double *)(a4 + 4);
  v11 = *(double *)(a4 + 12);
  if (*(char *)(a1 + 479) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 456), *(_QWORD *)(a1 + 464));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 456);
    v38 = *(_QWORD *)(a1 + 472);
  }
  *(_DWORD *)(a1 + 120) = sub_100150C50(v7, (const char *)__p, (_BYTE *)(a1 + 156), v10, v11);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a1 + 124) = 1;
  sub_100151AA4(a1);
  if (!*(_BYTE *)(a1 + 488) || *(double *)(a4 + 20) >= 50.0 || *(_DWORD *)(a1 + 120) != 3)
    goto LABEL_26;
  v15 = *(_QWORD *)(a1 + 480);
  if (v15)
  {
    v16 = sub_10131C31C(v15, *(double *)(a4 + 4), *(double *)(a4 + 12));
    if (v16)
    {
      *(_DWORD *)(a1 + 120) = v16;
      *(_DWORD *)(a1 + 124) = 2;
    }
    sub_101321478(*(_QWORD *)(a1 + 480), a4, 1);
LABEL_26:
    v17 = 0;
    switch(*(_DWORD *)(a1 + 492))
    {
      case 0xFFFFFFFF:
        break;
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
        v17 = *(_DWORD *)(a1 + 492);
        goto LABEL_28;
      default:
LABEL_28:
        *(_DWORD *)(a1 + 120) = v17;
        break;
    }
    switch(*(_DWORD *)(a1 + 496))
    {
      case 0xFFFFFFFF:
        v18 = *(_DWORD *)(a1 + 124);
        break;
      case 1:
        v18 = 1;
        goto LABEL_34;
      case 2:
        v18 = 2;
LABEL_34:
        *(_DWORD *)(a1 + 124) = v18;
        break;
      default:
        v18 = 0;
        *(_DWORD *)(a1 + 124) = 0;
        break;
    }
    if (v9 != *(_DWORD *)(a1 + 120) || v8 != v18)
    {
      LODWORD(v39) = *(_DWORD *)(a1 + 120);
      HIDWORD(v39) = v18;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(_DWORD *)(a1 + 120);
        v21 = *(_DWORD *)(a1 + 124);
        *(_DWORD *)buf = 67240960;
        v49 = v9;
        v50 = 1026;
        v51 = v20;
        v52 = 1026;
        v53 = v8;
        v54 = 1026;
        v55 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d,fromSignalEnvFidelityLevel,%{public}d,toSignalEnvFidelityLevel,%{public}d", buf, 0x1Au);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_42;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v27 = *(_DWORD *)(a1 + 120);
      v28 = *(_DWORD *)(a1 + 124);
      v40 = 67240960;
      v41 = v9;
      v42 = 1026;
      v43 = v27;
      v44 = 1026;
      v45 = v8;
      v46 = 1026;
      v47 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d,fromSignalEnvFidelityLevel,%{public}d,toSignalEnvFidelityLevel,%{public}d", &v40, 26);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v29);
      if (v30 == buf)
        goto LABEL_42;
      goto LABEL_60;
    }
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102183AC8);
  v22 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Error,CLSE,onLocationNotification,null HRSE pointer", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    LOWORD(v40) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,CLSE,onLocationNotification,null HRSE pointer", &v40, 2);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 0, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v23 = *(_DWORD *)(a1 + 124);
  if (v9 != *(_DWORD *)(a1 + 120) || v8 != v23)
  {
    LODWORD(v39) = *(_DWORD *)(a1 + 120);
    HIDWORD(v39) = v23;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(_DWORD *)(a1 + 120);
      v26 = *(_DWORD *)(a1 + 124);
      *(_DWORD *)buf = 67240960;
      v49 = v9;
      v50 = 1026;
      v51 = v25;
      v52 = 1026;
      v53 = v8;
      v54 = 1026;
      v55 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d,fromSignalEnvFidelityLevel,%{public}d,toSignalEnvFidelityLevel,%{public}d", buf, 0x1Au);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_42;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v33 = *(_DWORD *)(a1 + 120);
    v34 = *(_DWORD *)(a1 + 124);
    v40 = 67240960;
    v41 = v9;
    v42 = 1026;
    v43 = v33;
    v44 = 1026;
    v45 = v8;
    v46 = 1026;
    v47 = v34;
    LODWORD(v36) = 26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,fromSignalEnv,%{public}d,toSignalEnv,%{public}d,fromSignalEnvFidelityLevel,%{public}d,toSignalEnvFidelityLevel,%{public}d", &v40, v36);
    v30 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v35);
    if (v30 == buf)
      goto LABEL_42;
LABEL_60:
    free(v30);
LABEL_42:
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, &v39, 1, 0xFFFFFFFFLL, 0);
  }
}

void sub_100150C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100150C50(uint64_t a1, const char *a2, _BYTE *a3, double a4, long double a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  double v19;
  const char *v20;
  double Current;
  double v22;
  unsigned int v23;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  NSObject *v27;
  double v28;
  const char *v29;
  uint8_t *v30;
  NSObject *v31;
  double v32;
  const char *v33;
  int v34;
  int v35;
  int v36;
  FILE *v37;
  unsigned int v38;
  NSObject *v39;
  const char *v40;
  NSObject *v41;
  NSObject *v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  const char *v47;
  double v48;
  const char *v49;
  uint8_t *v50;
  const char *v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  unsigned __int8 __ptr;
  uint64_t v56;
  __int16 v57;
  int v58;
  double v59;
  uint8_t buf[4];
  double v61;
  _BYTE v62[96];
  __int128 v63;
  __int128 v64;
  int v65;
  FILE *v66;
  char v67;

  v11 = a1 + 8;
  v10 = *(_QWORD *)(a1 + 8);
  v56 = a1 + 8;
  (*(void (**)(uint64_t))(v10 + 16))(a1 + 8);
  v57 = 256;
  sub_1001C6800(a5);
  v12 = (a4 + 90.0) * 20.0;
  v14 = v13 * 20.0;
  v15 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v16 = *(_DWORD *)(a1 + 4);
    if ((v16 & 0x80000000) == 0
      && v14 - (double)(v16 + 1) < 0.005
      && (double)v16 - v14 < 0.005
      && v12 - (double)(v15 + 1) < 0.005
      && (double)v15 - v12 < 0.005)
    {
      *a3 = 0;
      v17 = *(unsigned int *)(a1 + 24);
      goto LABEL_79;
    }
  }
  v65 = 0;
  v63 = 0u;
  v64 = 0u;
  memset(v62, 0, sizeof(v62));
  v66 = 0;
  v67 = 0;
  *a3 = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AED78);
  v18 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(double *)&a2;
    if (a2[23] < 0)
      v19 = *(double *)a2;
    *(_DWORD *)buf = 136446210;
    v61 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLSE,getSignalEnvironment,opening,%{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v48 = *(double *)&a2;
    if (a2[23] < 0)
      v48 = *(double *)a2;
    v58 = 136446210;
    v59 = v48;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,getSignalEnvironment,opening,%{public}s", &v58, 12);
    v50 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v49);
    if (v50 != buf)
      free(v50);
  }
  v20 = a2;
  if (a2[23] < 0)
    v20 = *(const char **)a2;
  v66 = fopen(v20, "rb");
  if (!v66)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v27 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v28 = *(double *)&a2;
      if (a2[23] < 0)
        v28 = *(double *)a2;
      *(_DWORD *)buf = 136446210;
      v61 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#Warning,CLSE,getSignalEnvironment,could not open,%{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v58 = 136446210;
    v59 = *(double *)&a2;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,getSignalEnvironment,could not open,%{public}s", &v58, v54);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v29);
    goto LABEL_112;
  }
  if (!sub_10131804C((uint64_t)v62))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v32 = *(double *)&a2;
      if (a2[23] < 0)
        v32 = *(double *)a2;
      *(_DWORD *)buf = 136446210;
      v61 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#Warning,CLSE,getSignalEnvironment,could not read,%{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v58 = 136446210;
    v59 = *(double *)&a2;
    LODWORD(v54) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,getSignalEnvironment,could not read,%{public}s", &v58, v54);
    v30 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v33);
    goto LABEL_112;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v22 = *(double *)&v64;
  v23 = DWORD2(v64);
  if (Current <= v22 + (double)v23 + (double)(random() % 86400))
  {
    *a3 = 0;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLSE,getSignalEnvironment,file has expired - redownload", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AED78);
      LOWORD(v58) = 0;
      LODWORD(v54) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,getSignalEnvironment,file has expired - redownload", &v58, v54);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  if (BYTE8(v63) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v41 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLSE,getSignalEnvironment,file version does not match expected", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    LOWORD(v58) = 0;
    LODWORD(v54) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,getSignalEnvironment,file version does not match expected", &v58, v54);
    v30 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v51);
    goto LABEL_112;
  }
  v34 = (int)v14;
  v35 = (int)v12;
  if ((double)SBYTE10(v63) > a4 || (double)SBYTE11(v63) <= a4)
  {
    *(_DWORD *)a1 = v35;
    *(_DWORD *)(a1 + 4) = v34;
    *(_DWORD *)(a1 + 24) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283521;
      v61 = a4;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "#Warning,CLSE,getSignalEnvironment,latitude,%{private}.9lf,out of range", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AED78);
      v58 = 134283521;
      v59 = a4;
      LODWORD(v54) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,getSignalEnvironment,latitude,%{private}.9lf,out of range", &v58, v54);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    v17 = *(unsigned int *)(a1 + 24);
    goto LABEL_77;
  }
  v36 = v34 + 7200 * (v35 - 20 * SBYTE10(v63) - 1800);
  __ptr = 0;
  if ((v36 / 2) >= HIDWORD(v64))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v44 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v61) = v36 / 2;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "#Warning,CLSE,getSignalEnvironment,byte index,%{public}d,is larger than the data available in the coarse signal environment binary file", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v58 = 67240192;
    LODWORD(v59) = v36 / 2;
    LODWORD(v54) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,getSignalEnvironment,byte index,%{public}d,is larger than the data available in the coarse signal environment binary file", &v58, v54);
    v30 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v45);
    goto LABEL_112;
  }
  v37 = v66;
  fseek(v66, v36 / 2, 1);
  if (fread(&__ptr, 1uLL, 1uLL, v37) != 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v46 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "#Warning,CLSE,getSignalEnvironment,invalid coarse signal environment file - unable to get data byte", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    LOWORD(v58) = 0;
    LODWORD(v54) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,CLSE,getSignalEnvironment,invalid coarse signal environment file - unable to get data byte", &v58, v54);
    v30 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 2, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v47);
    goto LABEL_112;
  }
  v38 = __ptr >> 4;
  if ((v34 & 1) == 0)
    v38 = __ptr & 0xF;
  if (v38 >= 7 || ((0x4Fu >> v38) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#Error,CLSE,getSignalEnvironment,unexpected case,potential file corruption", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_76;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AED78);
    LOWORD(v58) = 0;
    LODWORD(v54) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,CLSE,getSignalEnvironment,unexpected case,potential file corruption", &v58, v54);
    v30 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 0, "CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLCoarseSignalEnvironmentDataManager::getSignalEnvironment(double, double, std::string, BOOL &)", "%s\n", v40);
LABEL_112:
    if (v30 != buf)
      free(v30);
LABEL_76:
    v17 = 0;
    goto LABEL_77;
  }
  v17 = dword_101C4AC28[v38];
  *(_DWORD *)(a1 + 24) = v17;
  *(_DWORD *)a1 = v35;
  *(_DWORD *)(a1 + 4) = v34;
LABEL_77:
  if (v66)
    fclose(v66);
LABEL_79:
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  return v17;
}

void sub_100151A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  FILE *v6;
  va_list va;

  va_start(va, a4);
  v6 = *(FILE **)(v4 + 136);
  if (v6)
    fclose(v6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100151AA4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const std::string::value_type *v5;
  const std::string::value_type *v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  char *v12;
  const char *v13;
  char *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  _WORD v18[8];
  _BYTE v19[12];
  __int16 v20;
  _QWORD *v21;
  __int16 v22;
  uint64_t v23;
  _BYTE buf[12];
  __int16 v25;
  _QWORD *v26;
  __int16 v27;
  uint64_t v28;

  if (*(_BYTE *)(a1 + 156)
    && vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 144)) > (double)*(int *)(a1 + 152) * 21.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 408);
      if (*(char *)(a1 + 431) < 0)
        v3 = (_QWORD *)*v3;
      v4 = (_QWORD *)(a1 + 432);
      if (*(char *)(a1 + 455) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v3;
      v25 = 2082;
      v26 = v4;
      v27 = 2050;
      v28 = 0x4035000000000000;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSE,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v9 = (_QWORD *)(a1 + 408);
      if (*(char *)(a1 + 431) < 0)
        v9 = (_QWORD *)*v9;
      v10 = (_QWORD *)(a1 + 432);
      if (*(char *)(a1 + 455) < 0)
        v10 = (_QWORD *)*v10;
      *(_DWORD *)v19 = 136446722;
      *(_QWORD *)&v19[4] = v9;
      v20 = 2082;
      v21 = v10;
      v22 = 2050;
      v23 = 0x4035000000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,download request,url,%{public}s,storeTo,%{public}s,retryInterval,%{public}.1lf", v19, 32);
      v12 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::downloadFileIfNeeded()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    *(CFAbsoluteTime *)(a1 + 144) = CFAbsoluteTimeGetCurrent();
    *(_QWORD *)v19 = 0x404E000000000000;
    v5 = (const std::string::value_type *)(a1 + 408);
    if (*(char *)(a1 + 431) < 0)
      v5 = *(const std::string::value_type **)v5;
    v6 = (const std::string::value_type *)(a1 + 432);
    if (*(char *)(a1 + 455) < 0)
      v6 = *(const std::string::value_type **)v6;
    if (sub_100604D40(a1 + 160, v5, v6, (double *)v19))
    {
      *(_QWORD *)buf = 0x414BAF7F80000000;
      if ((sub_10060538C(a1 + 160, &dbl_101C24998, (double *)buf) & 1) != 0)
      {
        *(double *)buf = CFAbsoluteTimeGetCurrent() + 21.0 + -0.5;
        sub_100605798((double *)(a1 + 160), (double *)buf);
        return;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLSE,could not setUpdateSource AVL file updater", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102183AC8);
        v18[0] = 0;
        LODWORD(v17) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,could not setUpdateSource AVL file updater", v18, v17);
        v16 = (char *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::downloadFileIfNeeded()", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102183AC8);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLSE,could not setUpdateRate AVl file updater", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102183AC8);
      v18[0] = 0;
      LODWORD(v17) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLSE,could not setUpdateRate AVl file updater", v18, v17);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLSignalEnvironmentProvider::downloadFileIfNeeded()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_100151FD4(uint64_t a1, uint64_t a2)
{
  if (sub_100182290(a2))
  {
    sub_10015274C(a1, a2);
    sub_100152078(a1 + 232, *(double *)(a2 + 20) <= 100.0);
    sub_100152078(a1 + 288, *(double *)(a2 + 20) <= 100.0);
    if (*(_BYTE *)(a1 + 216))
    {
      if (*(double *)(a2 + 20) <= 50.0)
        sub_10113EB2C(a1, (_OWORD *)a2);
    }
  }
}

void sub_100152078(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  double v7;
  int v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int8 *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67240704;
    v18 = v5;
    v19 = 1026;
    v20 = a2;
    v21 = 2050;
    v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,fPosUncThr,%{public}d,posUncThr,%{public}d,posUncTime,%{public}0.1f", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v8 = *(unsigned __int8 *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v12[0] = 67240704;
    v12[1] = v8;
    v13 = 1026;
    v14 = a2;
    v15 = 2050;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,ThrPosUnc,fPosUncThr,%{public}d,posUncThr,%{public}d,posUncTime,%{public}0.1f", v12, 24);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::feedPositionUncBetterThanThreshold(const BOOL)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v7 = sub_1001FCBB4();
  if (a2 && *(_BYTE *)(a1 + 16) && v7 > *(double *)(a1 + 24))
    sub_1001522A0(a1, v7);
  *(_BYTE *)(a1 + 16) = a2;
  *(double *)(a1 + 24) = v7;
}

void sub_1001522A0(uint64_t a1, double a2)
{
  double v4;
  _BOOL4 v5;
  NSObject *v6;
  const char *v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  _BYTE v22[24];
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  _BYTE v26[10];
  _BYTE v27[10];
  __int16 v28;
  uint64_t v29;

  if (*(_BYTE *)(a1 + 48))
  {
    v4 = *(double *)(a1 + 24);
    if (*(_BYTE *)a1)
      v5 = *(double *)(a1 + 8) < v4;
    else
      v5 = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v8 = a2 - v4;
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 67240961;
      *(_DWORD *)v26 = v8 > 10.0;
      *(_WORD *)&v26[4] = 1026;
      *(_DWORD *)&v26[6] = v5;
      *(_WORD *)v27 = 2049;
      *(_QWORD *)&v27[2] = v10;
      v28 = 2049;
      v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,update,fixAfterOutage,%{public}d,staticBeforePreviousFix,%{public}d,staticTime,%{private}0.1f,posUncTime,%{private}0.1f", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v22 = 67240961;
      *(_DWORD *)&v22[4] = v8 > 10.0;
      *(_WORD *)&v22[8] = 1026;
      *(_DWORD *)&v22[10] = v5;
      *(_WORD *)&v22[14] = 2049;
      *(_QWORD *)&v22[16] = v15;
      v23 = 2049;
      v24 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,ThrPosUnc,update,fixAfterOutage,%{public}d,staticBeforePreviousFix,%{public}d,staticTime,%{private}0.1f,posUncTime,%{private}0.1f", v22, 34);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::updateMetrics(const CFTimeInterval)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v12 = v8 <= 10.0 || v5;
    if (v12 != 1)
      return;
    *(double *)(a1 + 40) = *(double *)(a1 + 40) + a2 - *(double *)(a1 + 24);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)v26 = v14;
      *(_WORD *)&v26[8] = 2050;
      *(double *)v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,update,metric,accDurPosUncThr,%{public}0.1f,time,%{public}0.1f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v19 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)v22 = 134349312;
    *(_QWORD *)&v22[4] = v19;
    *(_WORD *)&v22[12] = 2050;
    *(double *)&v22[14] = a2;
    LODWORD(v21) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,ThrPosUnc,update,metric,accDurPosUncThr,%{public}0.1f,time,%{public}0.1f", v22, v21, *(_OWORD *)v22, *(_QWORD *)&v22[16]);
LABEL_35:
    v20 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::ThresholdPosUncMetric::updateMetrics(const CFTimeInterval)", "%s\n", v7);
    if (v20 != buf)
      free(v20);
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#LCStats,ThrPosUnc,posunc,metric collection is not active", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    *(_WORD *)v22 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,ThrPosUnc,posunc,metric collection is not active", v22, 2, *(_OWORD *)v22, *(_QWORD *)&v22[16]);
    goto LABEL_35;
  }
}

void sub_10015274C(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  float v12;
  float v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  const char *v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t *v30;
  double v31;
  float v32;
  float v33;
  uint64_t **v34;
  __int128 v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  int v39;
  float v40;
  double v41;
  float v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  const char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  int v54;
  const char *v55;
  double v56;
  double v57;
  float v58;
  _BYTE v59[28];
  __int16 v60;
  int v61;
  _OWORD buf[102];

  if (!*(_BYTE *)(a1 + 384) || !*(_BYTE *)(a1 + 385))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v16 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(unsigned __int8 *)(a1 + 384);
      v18 = *(unsigned __int8 *)(a1 + 385);
      LODWORD(buf[0]) = 67240448;
      DWORD1(buf[0]) = v17;
      WORD4(buf[0]) = 1026;
      *(_DWORD *)((char *)buf + 10) = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#LCStats,homeVisit,stats not calculated,isHomeVisit,%{public}d,isStatic,%{public}d", (uint8_t *)buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v19 = *(unsigned __int8 *)(a1 + 384);
      v20 = *(unsigned __int8 *)(a1 + 385);
      *(_DWORD *)v59 = 67240448;
      *(_DWORD *)&v59[4] = v19;
      *(_WORD *)&v59[8] = 1026;
      *(_DWORD *)&v59[10] = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,homeVisit,stats not calculated,isHomeVisit,%{public}d,isStatic,%{public}d", v59, 14);
      v15 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::calcHomeVisitStats(const CLDaemonLocation &)", "%s\n", v21);
      goto LABEL_82;
    }
    return;
  }
  v4 = sub_1001FCBB4();
  v5 = *(double *)(a1 + 400);
  sub_1001E4804(buf);
  *(_QWORD *)v59 = 0;
  v6 = v4 - v5;
  if (sub_1001FD98C(*(uint64_t *)&buf[0], "homeVisitAtRestThrSec", v59))
    v7 = *(double *)v59;
  else
    v7 = 300.0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
  if (*((_QWORD *)&buf[0] + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v6 < v7)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v12 = v6;
      LODWORD(buf[0]) = 134349056;
      *(double *)((char *)buf + 4) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#LCStats,homeVisit,stats not computed, duration being at rest for %{public}0.1f sec", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v13 = v6;
      *(_DWORD *)v59 = 134349056;
      *(double *)&v59[4] = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#LCStats,homeVisit,stats not computed, duration being at rest for %{public}0.1f sec", v59, 12);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::calcHomeVisitStats(const CLDaemonLocation &)", "%s\n", v14);
LABEL_82:
      if (v15 != (char *)buf)
        free(v15);
      return;
    }
    return;
  }
  sub_10011E258((double *)(a1 + 176), a1 + 408, a2);
  v24 = v23;
  v25 = *(_QWORD *)(a1 + 576);
  if (!v25)
    goto LABEL_38;
  v26 = *(_DWORD *)(a2 + 96);
  v27 = a1 + 576;
  do
  {
    v28 = *(_DWORD *)(v25 + 32);
    v29 = v28 < v26;
    if (v28 >= v26)
      v30 = (uint64_t *)v25;
    else
      v30 = (uint64_t *)(v25 + 8);
    if (!v29)
      v27 = v25;
    v25 = *v30;
  }
  while (*v30);
  if (v27 == a1 + 576 || v26 < *(_DWORD *)(v27 + 32))
  {
LABEL_38:
    memset((char *)&buf[1] + 8, 0, 40);
    v31 = *(double *)(a2 + 20);
    *(double *)buf = v23;
    *((double *)buf + 1) = v31;
    LODWORD(buf[1]) = *(_DWORD *)(a2 + 140);
    DWORD1(buf[1]) = 1;
    v32 = v23;
    if (v32 >= 100.0)
    {
      if (v32 >= 200.0)
        LODWORD(buf[2]) = 1;
      else
        HIDWORD(buf[1]) = 1;
    }
    else
    {
      DWORD2(buf[1]) = 1;
    }
    if (v31 <= 0.0)
    {
      v58 = 0.0;
    }
    else
    {
      v33 = v24 / v31;
      v58 = v33;
      if (v33 >= 1.0)
      {
        if (v33 >= 3.0)
          HIDWORD(buf[2]) = 1;
        else
          DWORD2(buf[2]) = 1;
        goto LABEL_49;
      }
    }
    DWORD1(buf[2]) = 1;
LABEL_49:
    *(float *)v59 = v24;
    sub_10113D814(v22, buf, (float *)v59, &v58);
    *(_QWORD *)v59 = a2 + 96;
    v34 = sub_101141868((uint64_t **)(a1 + 568), (int *)(a2 + 96), (uint64_t)&unk_101B9EB60, (_DWORD **)v59);
    v35 = buf[1];
    *(_OWORD *)(v34 + 5) = buf[0];
    *(_OWORD *)(v34 + 7) = v35;
    *(_OWORD *)(v34 + 9) = buf[2];
    *(_OWORD *)((char *)v34 + 84) = *(_OWORD *)((char *)&buf[2] + 12);
    goto LABEL_50;
  }
  ++*(_DWORD *)(v27 + 60);
  v40 = v23;
  if (v40 >= 100.0)
  {
    if (v40 >= 200.0)
      ++*(_DWORD *)(v27 + 72);
    else
      ++*(_DWORD *)(v27 + 68);
  }
  else
  {
    ++*(_DWORD *)(v27 + 64);
  }
  v41 = *(double *)(a2 + 20);
  if (v41 <= 0.0)
  {
    v58 = 0.0;
    goto LABEL_67;
  }
  v42 = v24 / v41;
  v58 = v42;
  if (v42 < 1.0)
  {
LABEL_67:
    ++*(_DWORD *)(v27 + 76);
    goto LABEL_68;
  }
  if (v42 >= 3.0)
    ++*(_DWORD *)(v27 + 84);
  else
    ++*(_DWORD *)(v27 + 80);
LABEL_68:
  *(float *)buf = v24;
  sub_10113D814(v22, (_DWORD *)(v27 + 40), (float *)buf, &v58);
  if (v24 > *(double *)(v27 + 40))
  {
    *(double *)(v27 + 40) = v24;
    *(_QWORD *)(v27 + 48) = *(_QWORD *)(a2 + 20);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v43 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      v44 = *(_QWORD *)(a2 + 20);
      v45 = *(_DWORD *)(a2 + 96);
      v46 = *(_DWORD *)(a2 + 140);
      LODWORD(buf[0]) = 134218752;
      *(double *)((char *)buf + 4) = v24;
      WORD6(buf[0]) = 2048;
      *(_QWORD *)((char *)buf + 14) = v44;
      WORD3(buf[1]) = 1024;
      DWORD2(buf[1]) = v45;
      WORD6(buf[1]) = 1024;
      *(_DWORD *)((char *)&buf[1] + 14) = v46;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#LCStats,homeVisit,maxError,%0.2f m,estAcc,%0.2f m,posType,%d,sigEnv,%d", (uint8_t *)buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021A2828);
      v47 = *(_QWORD *)(a2 + 20);
      v48 = *(_DWORD *)(a2 + 96);
      v49 = *(_DWORD *)(a2 + 140);
      *(_DWORD *)v59 = 134218752;
      *(double *)&v59[4] = v24;
      *(_WORD *)&v59[12] = 2048;
      *(_QWORD *)&v59[14] = v47;
      *(_WORD *)&v59[22] = 1024;
      *(_DWORD *)&v59[24] = v48;
      v60 = 1024;
      v61 = v49;
      LODWORD(v56) = 34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,homeVisit,maxError,%0.2f m,estAcc,%0.2f m,posType,%d,sigEnv,%d", COERCE_DOUBLE(v59), v56, LODWORD(v57), LODWORD(v58));
      v51 = (char *)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::calcHomeVisitStats(const CLDaemonLocation &)", "%s\n", v50);
      if (v51 != (char *)buf)
        free(v51);
    }
  }
LABEL_50:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021A2828);
  v36 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    v37 = *(_DWORD *)(a2 + 96);
    v38 = *(_QWORD *)(a2 + 20);
    v39 = *(_DWORD *)(a2 + 140);
    LODWORD(buf[0]) = 67109888;
    DWORD1(buf[0]) = v37;
    WORD4(buf[0]) = 2048;
    *(double *)((char *)buf + 10) = v24;
    WORD1(buf[1]) = 2048;
    *(_QWORD *)((char *)&buf[1] + 4) = v38;
    WORD6(buf[1]) = 1024;
    *(_DWORD *)((char *)&buf[1] + 14) = v39;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#LCStats,homeVisit,posType,%d,distFromCentroid,%0.2f m,estAcc,%0.2f m,sigEnv,%d", (uint8_t *)buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021A2828);
    v52 = *(_DWORD *)(a2 + 96);
    v53 = *(_QWORD *)(a2 + 20);
    v54 = *(_DWORD *)(a2 + 140);
    *(_DWORD *)v59 = 67109888;
    *(_DWORD *)&v59[4] = v52;
    *(_WORD *)&v59[8] = 2048;
    *(double *)&v59[10] = v24;
    *(_WORD *)&v59[18] = 2048;
    *(_QWORD *)&v59[20] = v53;
    v60 = 1024;
    v61 = v54;
    LODWORD(v56) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#LCStats,homeVisit,posType,%d,distFromCentroid,%0.2f m,estAcc,%0.2f m,sigEnv,%d", v59, v56, v57, LODWORD(v58));
    v15 = (char *)v55;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationControllerCAStats::calcHomeVisitStats(const CLDaemonLocation &)", "%s\n", v55);
    goto LABEL_82;
  }
}

void sub_10015306C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100153088(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  int v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLHarvestControllerExternal::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  v10 = *a2;
  if (*a2 == 13)
    *(_BYTE *)(a4 + 288) = *(_BYTE *)(a3 + 824);
  sub_10020063C(*(_QWORD *)(a4 + 40), a1, v10, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100153260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100153280(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLAccessoryLocationProvider::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102150680);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLAccessoryLocationProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102150680);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAccessoryLocationProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100153458(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100153438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100153458(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  unsigned int v15;

  v6 = *a3;
  if ((int)*a3 > 3)
  {
    switch(v6)
    {
      case 0x1Bu:
        sub_100737E84((id *)a1, a4);
        return;
      case 0xAu:
        sub_10015370C(a1 + 1640, a4);
        sub_1017A089C(a1 + 1392, a4, *(_BYTE *)(a4 + 768));
        sub_10016AEC8(a1 + 1984, a4);
        sub_10016FF08((_OWORD *)(a1 + 2544), a4);
        return;
      case 4u:
        goto LABEL_3;
    }
  }
  else if (v6 < 3)
  {
LABEL_3:
    if (!*(_BYTE *)(a1 + 1978))
      sub_1007368E8(a1);
    return;
  }
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v8 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a3;
    *(_DWORD *)buf = 67109120;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning received an unknown location notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v10 = *a3;
    v13[0] = 67109120;
    v13[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "#Warning received an unknown location notification %d", v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

__n128 sub_10015370C(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  __n128 result;
  uint64_t *v6;
  __n128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  _DWORD *v16;

  if (*(_DWORD *)(a2 + 132) != 2)
  {
    v3 = (_DWORD *)(a2 + 96);
    if (*(_DWORD *)(a2 + 96) != 3 && !sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
    {
      v13 = *(_OWORD *)(a2 + 96);
      v14 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)v15 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)&v15[12] = *(_OWORD *)(a2 + 140);
      v9 = *(_OWORD *)(a2 + 32);
      v10 = *(_OWORD *)(a2 + 48);
      v11 = *(_OWORD *)(a2 + 64);
      v12 = *(_OWORD *)(a2 + 80);
      v7 = *(__n128 *)a2;
      v8 = *(_OWORD *)(a2 + 16);
      v16 = v3;
      v6 = sub_100153808(a1 + 232, v3, (uint64_t)&unk_101B9EB60, &v16);
      *(_OWORD *)(v6 + 17) = v14;
      *(_OWORD *)(v6 + 19) = *(_OWORD *)v15;
      *(_OWORD *)(v6 + 21) = *(_OWORD *)&v15[16];
      *(_OWORD *)(v6 + 23) = 0uLL;
      *(_OWORD *)(v6 + 9) = v10;
      *(_OWORD *)(v6 + 11) = v11;
      *(_OWORD *)(v6 + 13) = v12;
      *(_OWORD *)(v6 + 15) = v13;
      result = v7;
      *(__n128 *)(v6 + 3) = v7;
      *(_OWORD *)(v6 + 5) = v8;
      *(_OWORD *)(v6 + 7) = v9;
      v6[25] = 0xBFF0000000000000;
    }
  }
  return result;
}

uint64_t *sub_100153808(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *result;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v20[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 <= v6)
        v4 = v6 % v7;
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      for (result = *v9; result; result = (uint64_t *)*result)
      {
        v11 = result[1];
        if (v11 == v6)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v6)
            return result;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4)
            break;
        }
      }
    }
  }
  sub_100E6FAD8(a1, *a2, a4, (uint64_t)v20);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v20[0] = *v18;
    *v18 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v20[0];
    }
  }
  result = (uint64_t *)v20[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_100153A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100153A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  NSObject *v18;
  char *v20;
  _WORD v21[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 2792))
    return 0;
  if (!*(_QWORD *)(a1 + 2408) || *(_BYTE *)(a3 + 425) != 0)
    return 0;
  v8 = *(_DWORD *)(a2 + 96);
  if ((v8 & 0xFFFFFFF7) != 1 && (v8 | 8) != 11 && (v8 != 2 || *(_BYTE *)(a1 + 2528) == 0))
    return 0;
  sub_100C64BF8(a1);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 2584) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 2600) = v10;
  v11 = *(_OWORD *)(a2 + 32);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 2648) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 2664) = v13;
  *(_OWORD *)(a1 + 2616) = v11;
  *(_OWORD *)(a1 + 2632) = v12;
  v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 112);
  v16 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 2724) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 2696) = v15;
  *(_OWORD *)(a1 + 2712) = v16;
  *(_OWORD *)(a1 + 2680) = v14;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 2408) + 40))(*(_QWORD *)(a1 + 2408), a2, a3);
  v17 = *(void **)(a1 + 2912);
  if (v17 && (_DWORD)result)
  {
    if (!*(_QWORD *)(a1 + 2920))
    {
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
      v18 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "CLMM,Creating mapmatcher OS transaction", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
        v21[0] = 0;
        v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,Creating mapmatcher OS transaction", v21, 2);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationFilterController::mapMatch(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
      *(_QWORD *)(a1 + 2920) = os_transaction_create("CLMapMatcher");
      v17 = *(void **)(a1 + 2912);
    }
    objc_msgSend(v17, "setNextFireDelay:", 300.0);
    return 1;
  }
  return result;
}

double sub_100153CB0(uint64_t a1, uint64_t a2, _BYTE *a3, double *a4)
{
  return sub_1001602FC(a1 + 2536, a2, a3, a4);
}

void sub_100153CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 2848);
  if (v3)
    sub_100161BE4(v3, a2, a3);
}

uint64_t sub_100153CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2848);
  if (result)
    return sub_100162168(result, a2, a3);
  return result;
}

double sub_100153CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  *(_DWORD *)(a1 + 2248) = 0xFFFF;
  *(_QWORD *)(a1 + 2260) = 0;
  v4 = a1 + 2268;
  *(_QWORD *)(a1 + 2252) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 2268) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 2284) = _Q1;
  *(_OWORD *)(a1 + 2300) = _Q1;
  *(_OWORD *)(a1 + 2316) = _Q1;
  *(_DWORD *)(a1 + 2332) = 0;
  *(_QWORD *)(a1 + 2336) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2352) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_DWORD *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2372) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_QWORD *)(a1 + 2384) = 0;
  *(_BYTE *)(a1 + 2400) = 0;
  if (sub_100158484(a1 + 456, a2, a1 + 2248))
  {
    *(_QWORD *)(v4 + 56) = *(_QWORD *)(a2 + 76);
    result = *(double *)(a2 + 76);
    *(double *)(a1 + 2768) = result;
  }
  return result;
}

BOOL sub_100153D7C(uint64_t a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a1 + 2264);
  *a2 = *(_OWORD *)(a1 + 2248);
  a2[1] = v2;
  v3 = *(_OWORD *)(a1 + 2280);
  v4 = *(_OWORD *)(a1 + 2296);
  v5 = *(_OWORD *)(a1 + 2328);
  a2[4] = *(_OWORD *)(a1 + 2312);
  a2[5] = v5;
  a2[2] = v3;
  a2[3] = v4;
  v6 = *(_OWORD *)(a1 + 2344);
  v7 = *(_OWORD *)(a1 + 2360);
  v8 = *(_OWORD *)(a1 + 2376);
  *(_OWORD *)((char *)a2 + 140) = *(_OWORD *)(a1 + 2388);
  a2[7] = v7;
  a2[8] = v8;
  a2[6] = v6;
  return *(double *)(a1 + 2268) >= 0.0;
}

void sub_100153DC0(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 2848);
  if (v3)
    sub_100161CAC(v3, a2, a3);
}

BOOL sub_100153DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE **v3;

  return *(_BYTE *)(a1 + 2808) && (v3 = *(_BYTE ***)(a1 + 2800)) != 0 && sub_10015AC14(v3, a2, a3);
}

uint64_t sub_100153DEC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100EE5BD0;
  v3[3] = &unk_102131FE8;
  v3[4] = a2;
  return AnalyticsSendEventLazy(CFSTR("com.apple.GyroBiasEvaluation"), v3);
}

void sub_100153E44(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCachedLocationController::onLocationUpdateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021595F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCachedLocationController::onLocationUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCachedLocationController::onLocationUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10015401C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100153FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10015401C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  BOOL v6;
  _QWORD *v8;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[8];

  v5 = *a3;
  if (*a3 > 13)
  {
    if (v5 == 14 || v5 == 22)
      return;
  }
  else
  {
    if (v5)
      v6 = v5 == 4;
    else
      v6 = 1;
    if (v6)
    {
      v8 = (_QWORD *)(a1 + 568);
      *(_QWORD *)buf = CFAbsoluteTimeGetCurrent();
      sub_100157FFC(v8, a4, (double *)buf);
      return;
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102159648);
  v10 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v11 = *a3;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLC: Received unknown notification, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v12 = *a3;
    v15[0] = 67240192;
    v15[1] = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Received unknown notification, %{public}d", v15, 8);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onLocationUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

void sub_100154214(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLNetworkLocationProvider::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214FF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNetworkLocationProvider::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214FF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNetworkLocationProvider::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001543EC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001543CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001543EC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE v15[688];
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void *__p;
  char v19;
  std::__shared_weak_count *v20;
  id v21;

  if (*a3 == 5 && *(_BYTE *)(a4 + 672) == 0)
  {
    sub_10011D234((uint64_t)v15, a4);
    sub_100154514(*(_QWORD *)(a1 + 672), (uint64_t)v15);

    v6 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v19 < 0)
      operator delete(__p);
    v9 = v17;
    if (v17)
    {
      v10 = (unint64_t *)&v17->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_100154500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100154514(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 136);
  if (result)
    return sub_1001621B0(result, a2);
  return result;
}

void sub_100154524(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  BOOL v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  const char *v39;
  uint8_t *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  os_activity_scope_state_s state;
  char v67;
  int v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint8_t buf[4];
  _BYTE v83[38];
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  int v87;
  __int16 v88;
  uint64_t v89;

  CLProfilingIdentify("CLNearbydInterfaceManager::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 56), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D6780);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v67 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNearbydInterfaceManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6780);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)v83 = 0;
      *(_WORD *)&v83[4] = 2082;
      *(_QWORD *)&v83[6] = "";
      *(_WORD *)&v83[14] = 2082;
      *(_QWORD *)&v83[16] = "activity";
      *(_WORD *)&v83[24] = 2050;
      *(_QWORD *)&v83[26] = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNearbydInterfaceManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v67 = 0;
  }
  if (!*(_BYTE *)a4)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,gizmo is not nearby.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_64;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    LOWORD(v68) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#assistancerelay,gizmo is not nearby.", &v68, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v16);
LABEL_38:
    if (v17 != buf)
      free(v17);
    goto LABEL_64;
  }
  v9 = sub_1001FCBB4();
  v10 = *(double *)(a4 + 48);
  v11 = sub_10011E634((double *)(a4 + 336), *(double *)(a3 + 4), *(double *)(a3 + 12), *(double *)(a4 + 180), *(double *)(a4 + 188), 0.0);
  if (*a2 != 5)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D67A0);
    v18 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v19 = *a2;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v83 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,Got unknown notification %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_64;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_1021D67A0);
    v20 = *a2;
    v68 = 67109120;
    LODWORD(v69) = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "#NearbydIfMgr,#assistancerelay,Got unknown notification %d", &v68);
    v17 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
    goto LABEL_38;
  }
  v12 = v11;
  if ((sub_100182290(a3) & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v22 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,#warning.lastReceivedLocation is invalid.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_64;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    LOWORD(v68) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#assistancerelay,#warning.lastReceivedLocation is invalid.", &v68, 2);
    v17 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
    goto LABEL_38;
  }
  v13 = v9 - v10;
  if (*(double *)(a3 + 44) >= 11.0)
  {
    v14 = (*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1;
    if ((*(_DWORD *)(a3 + 96) & 0xFFFFFFF7) == 1 && v13 >= 1800.0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v24 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(_QWORD *)(a3 + 4);
        v26 = *(_QWORD *)(a3 + 12);
        v27 = *(_QWORD *)(a3 + 20);
        v28 = *(_QWORD *)(a3 + 76);
        v29 = *(_QWORD *)(a3 + 88);
        v30 = *(_DWORD *)(a3 + 84);
        v31 = *(_QWORD *)(a3 + 44);
        *(_DWORD *)buf = 134285057;
        *(_QWORD *)v83 = v25;
        *(_WORD *)&v83[8] = 2049;
        *(_QWORD *)&v83[10] = v26;
        *(_WORD *)&v83[18] = 2048;
        *(_QWORD *)&v83[20] = v27;
        *(_WORD *)&v83[28] = 2048;
        *(_QWORD *)&v83[30] = v28;
        v84 = 2048;
        v85 = v29;
        v86 = 1024;
        v87 = v30;
        v88 = 2048;
        v89 = v31;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,moving vehicle,lat,%{private}+.6f,lon,%{private}.6f,acc, %.2f,timestamp,%.2f,lifespan,%.2f,confidence,%d,speed,%.3f", buf, 0x44u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_58;
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v32 = *(_QWORD *)(a3 + 4);
      v33 = *(_QWORD *)(a3 + 12);
      v34 = *(_QWORD *)(a3 + 20);
      v35 = *(_QWORD *)(a3 + 76);
      v36 = *(_QWORD *)(a3 + 88);
      v37 = *(_DWORD *)(a3 + 84);
      v38 = *(_QWORD *)(a3 + 44);
      v68 = 134285057;
      v69 = v32;
      v70 = 2049;
      v71 = v33;
      v72 = 2048;
      v73 = v34;
      v74 = 2048;
      v75 = v35;
      v76 = 2048;
      v77 = v36;
      v78 = 1024;
      v79 = v37;
      v80 = 2048;
      v81 = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#assistancerelay,moving vehicle,lat,%{private}+.6f,lon,%{private}.6f,acc, %.2f,timestamp,%.2f,lifespan,%.2f,confidence,%d,speed,%.3f", &v68, 68);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v39);
      goto LABEL_70;
    }
  }
  else
  {
    v14 = 0;
  }
  if (v13 < 3600.0 || v14)
    goto LABEL_64;
  if (v12 > 1000.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v41 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v42 = *(_QWORD *)(a3 + 4);
      v43 = *(_QWORD *)(a3 + 12);
      v44 = *(_QWORD *)(a3 + 20);
      v45 = *(_QWORD *)(a3 + 76);
      v46 = *(_QWORD *)(a3 + 88);
      v47 = *(_DWORD *)(a3 + 84);
      v48 = *(_QWORD *)(a3 + 44);
      *(_DWORD *)buf = 134285057;
      *(_QWORD *)v83 = v42;
      *(_WORD *)&v83[8] = 2049;
      *(_QWORD *)&v83[10] = v43;
      *(_WORD *)&v83[18] = 2048;
      *(_QWORD *)&v83[20] = v44;
      *(_WORD *)&v83[28] = 2048;
      *(_QWORD *)&v83[30] = v45;
      v84 = 2048;
      v85 = v46;
      v86 = 1024;
      v87 = v47;
      v88 = 2048;
      v89 = v48;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,non static,lat,%{private}+.6f,lon,%{private}.6f,acc,%.2f,timestamp, %.2f,lifespan,%.2f,confidence,%d,speed,%.3f", buf, 0x44u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_58;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v57 = *(_QWORD *)(a3 + 4);
    v58 = *(_QWORD *)(a3 + 12);
    v59 = *(_QWORD *)(a3 + 20);
    v60 = *(_QWORD *)(a3 + 76);
    v61 = *(_QWORD *)(a3 + 88);
    v62 = *(_DWORD *)(a3 + 84);
    v63 = *(_QWORD *)(a3 + 44);
    v68 = 134285057;
    v69 = v57;
    v70 = 2049;
    v71 = v58;
    v72 = 2048;
    v73 = v59;
    v74 = 2048;
    v75 = v60;
    v76 = 2048;
    v77 = v61;
    v78 = 1024;
    v79 = v62;
    v80 = 2048;
    v81 = v63;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#assistancerelay,non static,lat,%{private}+.6f,lon,%{private}.6f,acc,%.2f,timestamp, %.2f,lifespan,%.2f,confidence,%d,speed,%.3f", &v68, 68);
    v40 = (uint8_t *)v64;
    sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v64);
LABEL_70:
    if (v40 != buf)
      free(v40);
LABEL_58:
    v49 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(a4 + 176) = *(_OWORD *)a3;
    *(_OWORD *)(a4 + 192) = v49;
    v50 = *(_OWORD *)(a3 + 32);
    v51 = *(_OWORD *)(a3 + 48);
    v52 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(a4 + 240) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(a4 + 256) = v52;
    *(_OWORD *)(a4 + 208) = v50;
    *(_OWORD *)(a4 + 224) = v51;
    v53 = *(_OWORD *)(a3 + 96);
    v54 = *(_OWORD *)(a3 + 112);
    v55 = *(_OWORD *)(a3 + 128);
    *(_OWORD *)(a4 + 316) = *(_OWORD *)(a3 + 140);
    *(_OWORD *)(a4 + 288) = v54;
    *(_OWORD *)(a4 + 304) = v55;
    *(_OWORD *)(a4 + 272) = v53;
    sub_10189209C(a4);
    goto LABEL_64;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D6760);
  v56 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,device is static.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    LOWORD(v68) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#assistancerelay,device is static.", &v68, 2);
    v17 = (uint8_t *)v65;
    sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v65);
    goto LABEL_38;
  }
LABEL_64:
  if (v67)
    os_activity_scope_leave(&state);
}

void sub_100155060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_100155080(_BYTE *__dst, unsigned __int8 *a2, size_t a3)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (!a3)
    goto LABEL_8;
  v4 = *a2;
  v5 = 102;
  if (v4 != 2)
    v5 = 0;
  v6 = v4 == 1;
  v7 = 8;
  if (!v6)
    v7 = v5;
  if (v7 == a3)
    memcpy(__dst, a2, a3);
  else
LABEL_8:
    *__dst = -1;
  return __dst;
}

void sub_1001550DC(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE *v6;
  uint64_t *v7;
  double v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint32_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint32_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  const char *v116;
  uint8_t *v117;
  int v118;
  _OWORD *v119;
  __int16 v120[8];
  _OWORD v121[8];
  _OWORD v122[2];
  _BYTE v123[513];
  uint64_t v124;
  std::__shared_weak_count *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char v132;
  uint8_t buf[4];
  int v134;
  __int16 v135;
  const char *v136;
  __int16 v137;
  _BYTE v138[54];
  __int16 v139;
  int v140;

  v6 = (_BYTE *)(a1 + 9856);
  if (*(_BYTE *)(a1 + 1569) && !*(_BYTE *)(a1 + 1537))
  {
    if (*(_BYTE *)(a1 + 11672))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v20 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 68289026;
      v134 = 0;
      v135 = 2082;
      v136 = "";
      v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GpsReferenceLocation is set\"}";
      goto LABEL_63;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v78 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 68289026;
    v134 = 0;
    v135 = 2082;
    v136 = "";
    v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,GpsReferenceLocation is set\"}";
LABEL_87:
    v66 = v78;
    v67 = OS_LOG_TYPE_DEBUG;
    goto LABEL_88;
  }
  if (!*(_BYTE *)(a1 + 1568))
    goto LABEL_99;
  v7 = (uint64_t *)(a1 + 4660);
  v119 = (_OWORD *)(a1 + 4656);
  v8 = *(double *)(a1 + 4676);
  if (v8 >= 0.0)
  {
    if (v8 > 10000.0 && *(double *)(a2 + 20) < 10000.0)
      goto LABEL_29;
    sub_10011E258((double *)(a1 + 11560), a2, (uint64_t)v119);
    v14 = v13;
    if (v13 > 10000.0)
    {
      if (v6[1816])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v15 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          goto LABEL_29;
        v16 = *(_QWORD *)(a2 + 4);
        v17 = *(_QWORD *)(a2 + 12);
        v18 = *v7;
        v19 = *(_QWORD *)(a1 + 4668);
        *(_DWORD *)buf = 68290307;
        v134 = 0;
        v135 = 2082;
        v136 = "";
        v137 = 2049;
        *(_QWORD *)v138 = v16;
        *(_WORD *)&v138[8] = 2049;
        *(_QWORD *)&v138[10] = v17;
        *(_WORD *)&v138[18] = 2049;
        *(_QWORD *)&v138[20] = v18;
        *(_WORD *)&v138[28] = 2049;
        *(_QWORD *)&v138[30] = v19;
        *(_WORD *)&v138[38] = 2049;
        *(double *)&v138[40] = v14;
        v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning new assistance location differ from prev, sending"
              " to GPS\", \"newLat\":\"%{private}.7f\", \"newLon\":\"%{private}.7f\", \"oldLat\":\"%{private}.7f\", \"old"
              "Lon\":\"%{private}.7f\", \"dist\":\"%{private}.2f\"}";
        v11 = v15;
        v12 = OS_LOG_TYPE_DEFAULT;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v90 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_29;
        v91 = *(_QWORD *)(a2 + 4);
        v92 = *(_QWORD *)(a2 + 12);
        v93 = *v7;
        v94 = *(_QWORD *)(a1 + 4668);
        *(_DWORD *)buf = 68290307;
        v134 = 0;
        v135 = 2082;
        v136 = "";
        v137 = 2049;
        *(_QWORD *)v138 = v91;
        *(_WORD *)&v138[8] = 2049;
        *(_QWORD *)&v138[10] = v92;
        *(_WORD *)&v138[18] = 2049;
        *(_QWORD *)&v138[20] = v93;
        *(_WORD *)&v138[28] = 2049;
        *(_QWORD *)&v138[30] = v94;
        *(_WORD *)&v138[38] = 2049;
        *(double *)&v138[40] = v14;
        v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, #Warning new assistance location differ from prev, sending"
              " to GPS\", \"newLat\":\"%{private}.7f\", \"newLon\":\"%{private}.7f\", \"oldLat\":\"%{private}.7f\", \"old"
              "Lon\":\"%{private}.7f\", \"dist\":\"%{private}.2f\"}";
        v11 = v90;
        v12 = OS_LOG_TYPE_DEBUG;
      }
      v23 = 68;
      goto LABEL_28;
    }
    if (v6[1816])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v83 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v84 = *(_QWORD *)(a2 + 4);
        v85 = *(_QWORD *)(a2 + 12);
        v86 = *v7;
        v87 = *(_QWORD *)(a1 + 4668);
        *(_DWORD *)buf = 68290307;
        v134 = 0;
        v135 = 2082;
        v136 = "";
        v137 = 2049;
        *(_QWORD *)v138 = v84;
        *(_WORD *)&v138[8] = 2049;
        *(_QWORD *)&v138[10] = v85;
        *(_WORD *)&v138[18] = 2049;
        *(_QWORD *)&v138[20] = v86;
        *(_WORD *)&v138[28] = 2049;
        *(_QWORD *)&v138[30] = v87;
        *(_WORD *)&v138[38] = 2049;
        *(double *)&v138[40] = v14;
        v88 = v83;
        v89 = OS_LOG_TYPE_DEFAULT;
LABEL_98:
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,new assistance location differ slightly from prev, not sending to GPS\", \"newLat\":\"%{private}.7f\", \"newLon\":\"%{private}.7f\", \"oldLat\":\"%{private}.7f\", \"oldLon\":\"%{private}.7f\", \"dist\":\"%{private}.2f\"}", buf, 0x44u);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v95 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v96 = *(_QWORD *)(a2 + 4);
        v97 = *(_QWORD *)(a2 + 12);
        v98 = *v7;
        v99 = *(_QWORD *)(a1 + 4668);
        *(_DWORD *)buf = 68290307;
        v134 = 0;
        v135 = 2082;
        v136 = "";
        v137 = 2049;
        *(_QWORD *)v138 = v96;
        *(_WORD *)&v138[8] = 2049;
        *(_QWORD *)&v138[10] = v97;
        *(_WORD *)&v138[18] = 2049;
        *(_QWORD *)&v138[20] = v98;
        *(_WORD *)&v138[28] = 2049;
        *(_QWORD *)&v138[30] = v99;
        *(_WORD *)&v138[38] = 2049;
        *(double *)&v138[40] = v14;
        v88 = v95;
        v89 = OS_LOG_TYPE_DEBUG;
        goto LABEL_98;
      }
    }
LABEL_99:
    if (v6[1816])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v100 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return;
      v101 = *(_DWORD *)(a2 + 96);
      v102 = *(_QWORD *)(a2 + 4);
      v103 = *(_QWORD *)(a2 + 12);
      v104 = *(_QWORD *)(a2 + 28);
      v105 = *(_QWORD *)(a2 + 20);
      v106 = *(_QWORD *)(a2 + 36);
      v107 = *(unsigned __int8 *)(a1 + 1568);
      *(_DWORD *)buf = 68290819;
      v134 = 0;
      v135 = 2082;
      v136 = "";
      v137 = 1026;
      *(_DWORD *)v138 = v101;
      *(_WORD *)&v138[4] = 2049;
      *(_QWORD *)&v138[6] = v102;
      *(_WORD *)&v138[14] = 2049;
      *(_QWORD *)&v138[16] = v103;
      *(_WORD *)&v138[24] = 2050;
      *(_QWORD *)&v138[26] = v104;
      *(_WORD *)&v138[34] = 2050;
      *(_QWORD *)&v138[36] = v105;
      *(_WORD *)&v138[44] = 2050;
      *(_QWORD *)&v138[46] = v106;
      v139 = 1026;
      v140 = v107;
      v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not using location assistance\", \"type\":%{public}d, \""
            "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"v"
            "unc\":\"%{public}.1f\", \"GpsUseCachedLocation\":%{public}hhd}";
      v66 = v100;
      v67 = OS_LOG_TYPE_DEFAULT;
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v108 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        return;
      v109 = *(_DWORD *)(a2 + 96);
      v110 = *(_QWORD *)(a2 + 4);
      v111 = *(_QWORD *)(a2 + 12);
      v112 = *(_QWORD *)(a2 + 28);
      v113 = *(_QWORD *)(a2 + 20);
      v114 = *(_QWORD *)(a2 + 36);
      v115 = *(unsigned __int8 *)(a1 + 1568);
      *(_DWORD *)buf = 68290819;
      v134 = 0;
      v135 = 2082;
      v136 = "";
      v137 = 1026;
      *(_DWORD *)v138 = v109;
      *(_WORD *)&v138[4] = 2049;
      *(_QWORD *)&v138[6] = v110;
      *(_WORD *)&v138[14] = 2049;
      *(_QWORD *)&v138[16] = v111;
      *(_WORD *)&v138[24] = 2050;
      *(_QWORD *)&v138[26] = v112;
      *(_WORD *)&v138[34] = 2050;
      *(_QWORD *)&v138[36] = v113;
      *(_WORD *)&v138[44] = 2050;
      *(_QWORD *)&v138[46] = v114;
      v139 = 1026;
      v140 = v115;
      v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not using location assistance\", \"type\":%{public}d, \""
            "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"v"
            "unc\":\"%{public}.1f\", \"GpsUseCachedLocation\":%{public}hhd}";
      v66 = v108;
      v67 = OS_LOG_TYPE_DEBUG;
    }
    v82 = 80;
    goto LABEL_109;
  }
  if (*(_BYTE *)(a1 + 11672))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v134 = 0;
      v135 = 2082;
      v136 = "";
      v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, assistance location now available, sending to GPS\"}";
      v11 = v9;
      v12 = OS_LOG_TYPE_DEFAULT;
LABEL_27:
      v23 = 18;
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, buf, v23);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v134 = 0;
      v135 = 2082;
      v136 = "";
      v10 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, assistance location now available, sending to GPS\"}";
      v11 = v22;
      v12 = OS_LOG_TYPE_DEBUG;
      goto LABEL_27;
    }
  }
LABEL_29:
  v24 = (_OWORD *)(a1 + 1576);
  v25 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 9056) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 9040) = v25;
  v26 = *(_OWORD *)(a2 + 32);
  v27 = *(_OWORD *)(a2 + 48);
  v28 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 9120) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 9104) = v28;
  *(_OWORD *)(a1 + 9088) = v27;
  *(_OWORD *)(a1 + 9072) = v26;
  v29 = *(_OWORD *)(a2 + 140);
  v30 = *(_OWORD *)(a2 + 96);
  v31 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 9168) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 9152) = v31;
  *(_OWORD *)(a1 + 9136) = v30;
  *(_OWORD *)(a1 + 9180) = v29;
  memcpy((void *)(a1 + 9200), (const void *)(a2 + 160), 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 9720), (uint64_t *)(a2 + 680));
  v32 = *(_OWORD *)(a2 + 696);
  v33 = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 9768) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 9752) = v33;
  *(_OWORD *)(a1 + 9736) = v32;
  v34 = *(_OWORD *)(a2 + 744);
  v35 = *(_OWORD *)(a2 + 760);
  v36 = *(_OWORD *)(a2 + 776);
  *(_BYTE *)(a1 + 9832) = *(_BYTE *)(a2 + 792);
  *(_OWORD *)(a1 + 9816) = v36;
  *(_OWORD *)(a1 + 9800) = v35;
  *(_OWORD *)(a1 + 9784) = v34;
  *v6 = 0;
  v37 = *(_DWORD *)(a1 + 9124);
  if (v37 <= 74)
  {
    if (v37 <= 49)
    {
      if (v37 <= 24)
        v38 = 1;
      else
        v38 = 2;
    }
    else
    {
      v38 = 3;
    }
  }
  else
  {
    v38 = 4;
  }
  *(_DWORD *)(a1 + 9840) = v38;
  v118 = v38;
  *(_DWORD *)(a1 + 9844) = v38;
  *(_DWORD *)(a1 + 9860) = 0;
  v39 = *(_OWORD *)(a1 + 9152);
  *(_OWORD *)(a1 + 1672) = *(_OWORD *)(a1 + 9136);
  *(_OWORD *)(a1 + 1688) = v39;
  *(_OWORD *)(a1 + 1704) = *(_OWORD *)(a1 + 9168);
  *(_OWORD *)(a1 + 1716) = *(_OWORD *)(a1 + 9180);
  v40 = *(_OWORD *)(a1 + 9088);
  *(_OWORD *)(a1 + 1608) = *(_OWORD *)(a1 + 9072);
  *(_OWORD *)(a1 + 1624) = v40;
  v41 = *(_OWORD *)(a1 + 9120);
  *(_OWORD *)(a1 + 1640) = *(_OWORD *)(a1 + 9104);
  *(_OWORD *)(a1 + 1656) = v41;
  v42 = *(_OWORD *)(a1 + 9056);
  *v24 = *(_OWORD *)(a1 + 9040);
  *(_OWORD *)(a1 + 1592) = v42;
  memcpy((void *)(a1 + 1736), (const void *)(a1 + 9200), 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 2256), (uint64_t *)(a1 + 9720));
  v43 = *(_OWORD *)(a1 + 9768);
  *(_OWORD *)(a1 + 2320) = *(_OWORD *)(a1 + 9784);
  v44 = *(_OWORD *)(a1 + 9816);
  *(_OWORD *)(a1 + 2336) = *(_OWORD *)(a1 + 9800);
  *(_OWORD *)(a1 + 2352) = v44;
  v45 = *(_OWORD *)(a1 + 9752);
  *(_OWORD *)(a1 + 2272) = *(_OWORD *)(a1 + 9736);
  *(_OWORD *)(a1 + 2288) = v45;
  *(_BYTE *)(a1 + 2368) = *(_BYTE *)(a1 + 9832);
  *(_OWORD *)(a1 + 2304) = v43;
  v46 = *(_QWORD *)(a1 + 488);
  if (v46 && a3)
  {
    v47 = *(_OWORD *)(a1 + 1688);
    v121[6] = *(_OWORD *)(a1 + 1672);
    v121[7] = v47;
    v122[0] = *(_OWORD *)(a1 + 1704);
    *(_OWORD *)((char *)v122 + 12) = *(_OWORD *)(a1 + 1716);
    v48 = *(_OWORD *)(a1 + 1624);
    v121[2] = *(_OWORD *)(a1 + 1608);
    v121[3] = v48;
    v49 = *(_OWORD *)(a1 + 1656);
    v121[4] = *(_OWORD *)(a1 + 1640);
    v121[5] = v49;
    v50 = *(_OWORD *)(a1 + 1592);
    v121[0] = *v24;
    v121[1] = v50;
    memcpy(v123, (const void *)(a1 + 1736), sizeof(v123));
    v124 = *(_QWORD *)(a1 + 2256);
    v51 = *(std::__shared_weak_count **)(a1 + 2264);
    v125 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(p_shared_owners);
      while (__stxr(v53 + 1, p_shared_owners));
    }
    v54 = *(_OWORD *)(a1 + 2352);
    v130 = *(_OWORD *)(a1 + 2336);
    v131 = v54;
    v55 = *(_OWORD *)(a1 + 2288);
    v126 = *(_OWORD *)(a1 + 2272);
    v127 = v55;
    v56 = *(_OWORD *)(a1 + 2320);
    v128 = *(_OWORD *)(a1 + 2304);
    v129 = v56;
    v132 = *(_BYTE *)(a1 + 2368);
    sub_1014B0FF0(v46, (uint64_t)v121);
    v57 = v125;
    if (v125)
    {
      v58 = (unint64_t *)&v125->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v60 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "GnssAssistancePosition: Feed cached location to position assistance maintenance", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v120[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GnssAssistancePosition: Feed cached location to position assistance maintenance", v120, 2);
      v117 = (uint8_t *)v116;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::handleReferenceLocationAssistance(const GNSS::DaemonLocation &, BOOL)", "%s\n", v116);
      if (v117 != buf)
        free(v117);
    }
  }
  if (!*(_BYTE *)(a1 + 1536))
  {
    if (v6[1816])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v20 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 68289026;
      v134 = 0;
      v135 = 2082;
      v136 = "";
      v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,location since position assistance engine not running\"}";
LABEL_63:
      v66 = v20;
      v67 = OS_LOG_TYPE_DEFAULT;
LABEL_88:
      v82 = 18;
      goto LABEL_109;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v78 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 68289026;
    v134 = 0;
    v135 = 2082;
    v136 = "";
    v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cache,location since position assistance engine not running\"}";
    goto LABEL_87;
  }
  if (!v6[1816])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v68 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      goto LABEL_69;
    v69 = *(_QWORD *)(a2 + 4);
    v70 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)buf = 68289795;
    v134 = 0;
    v135 = 2082;
    v136 = "";
    v137 = 1025;
    *(_DWORD *)v138 = v118;
    *(_WORD *)&v138[4] = 2049;
    *(_QWORD *)&v138[6] = v69;
    *(_WORD *)&v138[14] = 2049;
    *(_QWORD *)&v138[16] = v70;
    v64 = v68;
    v65 = OS_LOG_TYPE_DEBUG;
    goto LABEL_68;
  }
  if (v6[1817])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v61 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      goto LABEL_69;
    v62 = *(_QWORD *)(a2 + 4);
    v63 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)buf = 68289795;
    v134 = 0;
    v135 = 2082;
    v136 = "";
    v137 = 1025;
    *(_DWORD *)v138 = v118;
    *(_WORD *)&v138[4] = 2049;
    *(_QWORD *)&v138[6] = v62;
    *(_WORD *)&v138[14] = 2049;
    *(_QWORD *)&v138[16] = v63;
    v64 = v61;
    v65 = OS_LOG_TYPE_DEFAULT;
LABEL_68:
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed,valid reference location\", \"reliability\":%{private}d, \"latitude\":\"%{private}.7f\", \"longitude\":\"%{private}.7f\"}", buf, 0x2Cu);
LABEL_69:
    sub_1001109A0(a1, a1 + 9040);
    v71 = *(_OWORD *)(a2 + 16);
    *v119 = *(_OWORD *)a2;
    v119[1] = v71;
    v72 = *(_OWORD *)(a2 + 32);
    v73 = *(_OWORD *)(a2 + 48);
    v74 = *(_OWORD *)(a2 + 80);
    v119[4] = *(_OWORD *)(a2 + 64);
    v119[5] = v74;
    v119[2] = v72;
    v119[3] = v73;
    v75 = *(_OWORD *)(a2 + 96);
    v76 = *(_OWORD *)(a2 + 112);
    v77 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v119 + 140) = *(_OWORD *)(a2 + 140);
    v119[7] = v76;
    v119[8] = v77;
    v119[6] = v75;
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v79 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v80 = v6[1816];
    v81 = v6[1817];
    *(_DWORD *)buf = 68289538;
    v134 = 0;
    v135 = 2082;
    v136 = "";
    v137 = 1026;
    *(_DWORD *)v138 = v80;
    *(_WORD *)&v138[4] = 1026;
    *(_DWORD *)&v138[6] = v81;
    v21 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,reference location\", \"fInEmergency\":%{public}d, \"fHel"
          "oEnabled\":%{public}d}";
    v66 = v79;
    v67 = OS_LOG_TYPE_DEFAULT;
    v82 = 30;
LABEL_109:
    _os_log_impl((void *)&_mh_execute_header, v66, v67, v21, buf, v82);
  }
}

void sub_100155F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100155F90(_BYTE *a1, uint64_t a2)
{
  int v3;
  double v4;
  int v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  _DWORD v21[2];
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;

  v3 = *a1;
  v4 = *(double *)(a2 + 20);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v4 <= 500.0 && v4 > 0.0)
  {
    v6 = sub_1001594F4((float64_t *)(a2 + 4), (double *)(a2 + 12), 0);
    *a1 = v6;
    if (v3 != v6)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021831F0);
      v7 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v8 = *a1;
        v9 = *(_QWORD *)(a2 + 4);
        v10 = *(_QWORD *)(a2 + 12);
        v11 = *(_DWORD *)(a2 + 96);
        v12 = *(_QWORD *)(a2 + 20);
        *(_DWORD *)buf = 67241217;
        v31 = v8;
        v32 = 2049;
        v33 = v9;
        v34 = 2049;
        v35 = v10;
        v36 = 1026;
        v37 = v11;
        v38 = 2050;
        v39 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "DEMDeweightAreaMonitor,state,%{public}d,lat,%{private}0.3f,lon,%{private}0.3f,type,%{public}d,accuracy,%{public}0.3f", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021831F0);
        v14 = *a1;
        v15 = *(_QWORD *)(a2 + 4);
        v16 = *(_QWORD *)(a2 + 12);
        v17 = *(_DWORD *)(a2 + 96);
        v18 = *(_QWORD *)(a2 + 20);
        v21[0] = 67241217;
        v21[1] = v14;
        v22 = 2049;
        v23 = v15;
        v24 = 2049;
        v25 = v16;
        v26 = 1026;
        v27 = v17;
        v28 = 2050;
        v29 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEMDeweightAreaMonitor,state,%{public}d,lat,%{private}0.3f,lon,%{private}0.3f,type,%{public}d,accuracy,%{public}0.3f", v21, 44);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLDEMDeweightAreaMonitor::didDEMDeweightAreaStatusChange(const CLDaemonLocation &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
  }
  return v3 != *a1;
}

void sub_100156220(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMicroLocationNotifier::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192BB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMicroLocationNotifier::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001563F8(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001563D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001563F8(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  double v8;
  CFStringRef v9;
  int v10;
  double v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  _BYTE v23[12];
  _BYTE buf[18];
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;

  if (*a3 == 5)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v25 = 2082;
      v26 = "Location";
      v27 = 2082;
      v28 = "Location leech";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v7 = a1 + 584;
    if (sub_100156880(v7))
    {
      v8 = *(double *)(a4 + 20);
      sub_1001E4804(buf);
      *(_QWORD *)v23 = 0;
      v9 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsLeechedLocationHorizontalAccuracyThreshold", 0x8000100u, kCFAllocatorNull);
      v10 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v9, v23);
      CFRelease(v9);
      v11 = *(double *)v23;
      v12 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = 65.0;
      if (v10)
        v15 = v11;
      if (v8 <= v15)
      {
        sub_100160374(v7, objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(a4 + 4), *(double *)(a4 + 12)));
        return;
      }
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      v16 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a4 + 20);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Ignoring leeched location since horizontal accuracy (%.1f m) exceeds threshold", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_102192BD0);
        v18 = *(_QWORD *)(a4 + 20);
        *(_DWORD *)v23 = 134217984;
        *(_QWORD *)&v23[4] = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Ignoring leeched location since horizontal accuracy (%.1f m) exceeds threshold", COERCE_DOUBLE(v23));
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
LABEL_31:
        if (v20 != buf)
          free(v20);
      }
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v21 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Received unhandled location notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
      *(_WORD *)v23 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Received unhandled location notification", v23, 2);
      v20 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
      goto LABEL_31;
    }
  }
}

void sub_100156860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100156880(uint64_t a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;

  v1 = (uint64_t *)(a1 + 56);
  v2 = *(char *)(a1 + 79);
  if (v2 < 0)
  {
    if (*(_QWORD *)(a1 + 64) != 7)
      return 0;
    v1 = (uint64_t *)*v1;
  }
  else if (v2 != 7)
  {
    return 0;
  }
  v3 = *(_DWORD *)v1;
  v4 = *(_DWORD *)((char *)v1 + 3);
  return v3 == 1852534389 && v4 == 1853321070;
}

uint64_t sub_1001568D8(uint64_t a1, void *a2)
{
  std::string *v4;
  uint64_t (**v6)();
  _QWORD v7[4];

  v4 = (std::string *)sub_1015A2E04(v7, "No Name Given");
  v6 = off_102130348;
  std::string::assign(v4, "Leeched Location Update");
  v7[3] = a2;
  sub_1001569F0((_QWORD *)(a1 + 8), (uint64_t)&v6);
  return sub_100156994((uint64_t)&v6);
}

void sub_100156964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_100156994((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100156994(uint64_t a1)
{
  *(_QWORD *)a1 = off_102130348;

  *(_QWORD *)a1 = off_10212F0B8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1001569F0(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  NSObject *v14;
  _BOOL4 v15;
  _BOOL4 v16;
  NSObject *v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  _BYTE *v33;
  NSObject *v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _QWORD *v42;
  void *v44[2];
  uint64_t v45;
  _BYTE __p[28];
  _BYTE buf[28];
  __int16 v48;
  _QWORD *v49;

  if (!a1[1])
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E308);
    v5 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 31) < 0)
      {
        sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 24);
      }
      v20 = __p;
      if (__p[23] < 0)
        v20 = *(_BYTE **)__p;
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v20;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because current state is NULL\", \"Event\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212E308);
    }
    v21 = qword_1022A00F8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00F8))
      return 0;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
      *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 24);
    }
    v22 = __p;
    if (__p[23] < 0)
      v22 = *(_BYTE **)__p;
    *(_DWORD *)buf = 68289283;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v22;
    v23 = "State Machine: Failed to handle event because current state is NULL";
    v24 = "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because current state is NULL\", \"Event\":%{priv"
          "ate, location:escape_only}s}";
    v25 = v21;
    v26 = 28;
    goto LABEL_111;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212E308);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 31) < 0)
    {
      sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
      *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 24);
    }
    v6 = __p;
    if (__p[23] < 0)
      v6 = *(_BYTE **)__p;
    v7 = a1[1];
    v8 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v8 = (_QWORD *)*v8;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v6;
    v48 = 2081;
    v49 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Handling Event\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  v9 = a1[1];
  v10 = (_OWORD *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(buf, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)buf = *v10;
    *(_QWORD *)&buf[16] = *(_QWORD *)(a2 + 24);
  }
  v11 = sub_10019C4C0(v9 + 48, (const void **)buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (a1[1] + 56 == v11)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E308);
    v14 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 31) < 0)
      {
        sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
      }
      else
      {
        *(_OWORD *)__p = *v10;
        *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 24);
      }
      v36 = __p;
      if (__p[23] < 0)
        v36 = *(_BYTE **)__p;
      v37 = a1[1];
      v38 = (_QWORD *)(v37 + 8);
      if (*(char *)(v37 + 31) < 0)
        v38 = (_QWORD *)*v38;
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v36;
      v48 = 2081;
      v49 = v38;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because it is not a valid event for the current state\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}", buf, 0x26u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212E308);
    }
    v39 = qword_1022A00F8;
    if (!os_signpost_enabled((os_log_t)qword_1022A00F8))
      return 0;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_100115CE4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)__p = *v10;
      *(_QWORD *)&__p[16] = *(_QWORD *)(a2 + 24);
    }
    v40 = __p;
    if (__p[23] < 0)
      v40 = *(_BYTE **)__p;
    v41 = a1[1];
    v42 = (_QWORD *)(v41 + 8);
    if (*(char *)(v41 + 31) < 0)
      v42 = (_QWORD *)*v42;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(_QWORD *)&buf[20] = v40;
    v48 = 2081;
    v49 = v42;
    v23 = "State Machine: Failed to handle event because it is not a valid event for the current state";
    v24 = "{\"msg%{public}.0s\":\"State Machine: Failed to handle event because it is not a valid event for the current s"
          "tate\", \"Event\":%{private, location:escape_only}s, \"Current State\":%{private, location:escape_only}s}";
    v25 = v39;
    v26 = 38;
LABEL_111:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v23, v24, buf, v26);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    return 0;
  }
  (***(void (****)(_BYTE *__return_ptr, _QWORD, _QWORD *, uint64_t))(v11 + 56))(buf, *(_QWORD *)(v11 + 56), a1, a2);
  if (!buf[24])
  {
LABEL_69:
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E308);
    v29 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v30 = a1[1];
      v31 = (_QWORD *)(v30 + 8);
      if (*(char *)(v30 + 31) < 0)
        v31 = (_QWORD *)*v31;
      *(_QWORD *)__p = 68289283;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2081;
      *(_QWORD *)&__p[20] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: \", \"New State\":%{private, location:escape_only}s}", __p, 0x1Cu);
    }
    v18 = 1;
    goto LABEL_76;
  }
  v12 = a1[1];
  if (*(char *)(v12 + 31) < 0)
  {
    sub_100115CE4(__p, *(void **)(v12 + 8), *(_QWORD *)(v12 + 16));
  }
  else
  {
    v13 = *(_OWORD *)(v12 + 8);
    *(_QWORD *)&__p[16] = *(_QWORD *)(v12 + 24);
    *(_OWORD *)__p = v13;
  }
  v15 = sub_1002E6B90(buf, __p);
  v16 = v15;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v16)
      goto LABEL_36;
    goto LABEL_44;
  }
  if (!v15)
  {
LABEL_44:
    if (!buf[24])
      sub_10028DF3C();
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_100115CE4(v44, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      *(_OWORD *)v44 = *(_OWORD *)buf;
      v45 = *(_QWORD *)&buf[16];
    }
    v27 = sub_10019C4C0((uint64_t)(a1 + 2), (const void **)v44);
    if (a1 + 3 == (_QWORD *)v27)
      v28 = 0;
    else
      v28 = *(_QWORD *)(v27 + 56);
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    if (!v28)
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212E308);
      v32 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        if (!buf[24])
          sub_10028DF3C();
        v33 = buf;
        if (buf[23] < 0)
          v33 = *(_BYTE **)buf;
        *(_QWORD *)__p = 68289283;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2081;
        *(_QWORD *)&__p[20] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"State Machine: Failed to switch to new state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", __p, 0x1Cu);
        if (qword_1022A00F0 != -1)
          dispatch_once(&qword_1022A00F0, &stru_10212E308);
      }
      v34 = qword_1022A00F8;
      if (os_signpost_enabled((os_log_t)qword_1022A00F8))
      {
        if (!buf[24])
          sub_10028DF3C();
        v35 = buf;
        if (buf[23] < 0)
          v35 = *(_BYTE **)buf;
        *(_QWORD *)__p = 68289283;
        *(_WORD *)&__p[8] = 2082;
        *(_QWORD *)&__p[10] = "";
        *(_WORD *)&__p[18] = 2081;
        *(_QWORD *)&__p[20] = v35;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State Machine: Failed to switch to new state because requested state doesn't exist in the state table", "{\"msg%{public}.0s\":\"State Machine: Failed to switch to new state because requested state doesn't exist in the state table\", \"State\":%{private, location:escape_only}s}", __p, 0x1Cu);
      }
      v18 = 0;
      goto LABEL_76;
    }
    sub_1001573B8((uint64_t)a1);
    sub_100157578(a1, v28);
    goto LABEL_69;
  }
LABEL_36:
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212E308);
  v17 = qword_1022A00F8;
  v18 = 1;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    if (!buf[24])
      sub_10028DF3C();
    v19 = buf;
    if (buf[23] < 0)
      v19 = *(_BYTE **)buf;
    *(_QWORD *)__p = 68289283;
    *(_WORD *)&__p[8] = 2082;
    *(_QWORD *)&__p[10] = "";
    *(_WORD *)&__p[18] = 2081;
    *(_QWORD *)&__p[20] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: No state change requested\", \"State\":%{private, location:escape_only}s}", __p, 0x1Cu);
  }
LABEL_76:
  if (buf[24] && (buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  return v18;
}

void sub_10015735C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a26)
  {
    if (a25 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1001573B8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD *v4;
  void (***v5)(_QWORD, uint64_t);
  NSObject *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _QWORD *v14;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212E308);
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (_QWORD *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0)
      v4 = (_QWORD *)*v4;
    v9 = 68289283;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Exiting State\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
  }
  v5 = *(void (****)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 8) + 72);
  if (v5)
  {
    (**v5)(v5, a1);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E308);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = (_QWORD *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = 68289283;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2081;
      v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: State did not have an exit function\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
    }
  }
}

void sub_100157578(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD, _QWORD *);
  NSObject *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD *v16;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212E308);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (_QWORD *)(a2 + 8);
    if (*(char *)(a2 + 31) < 0)
      v5 = (_QWORD *)*v5;
    v11 = 68289283;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2081;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"State Machine: Entering new state\", \"New State\":%{private, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
  }
  v6 = a1[1];
  if (v6 && *(_BYTE *)(v6 + 32))
    a1[6] = v6;
  a1[5] = v6;
  a1[1] = a2;
  v7 = *(void (****)(_QWORD, _QWORD *))(a2 + 40);
  if (v7)
  {
    (**v7)(v7, a1);
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E308);
    v8 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      v9 = a1[1];
      v10 = (_QWORD *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = 68289283;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2081;
      v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"State Machine: State did not have an entry function\", \"State\":%{private, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
    }
  }
}

void sub_100157758(_QWORD *a1, int a2, uint64_t a3, double *a4)
{
  double v7;
  double v8;
  double v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  _QWORD v31[3];
  uint8_t v32[8];
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[8];
  __int16 v42;
  _BYTE v43[14];
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int128 v47;

  v7 = *a4;
  v8 = *((double *)a1 + 6);
  v9 = vabdd_f64(*a4, *((double *)a1 + 7));
  if ((a2 & 1) != 0 || v9 >= 2400.0)
  {
    memset(v31, 0, sizeof(v31));
    v10 = (*(uint64_t (**)(void))(*(_QWORD *)*a1 + 16))();
    if ((v10 & 1) != 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102196CC8);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v12 = a1[7];
        v13 = *(_QWORD *)((char *)a1 + 68);
        v14 = *(_QWORD *)((char *)a1 + 76);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)&buf[4] = a2;
        v42 = 1024;
        *(_DWORD *)v43 = 1;
        *(_WORD *)&v43[4] = 2048;
        *(_QWORD *)&v43[6] = v12;
        v44 = 2048;
        v45 = v13;
        v46 = 2048;
        *(_QWORD *)&v47 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "isStart,%d,manifest,%d,LastTime,%lf,LastLat,%.05lf,LastLon,%.05lf", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102196CC8);
        v20 = a1[7];
        v21 = *(_QWORD *)((char *)a1 + 68);
        v22 = *(_QWORD *)((char *)a1 + 76);
        *(_DWORD *)v32 = 67110144;
        *(_DWORD *)&v32[4] = a2;
        v33 = 1024;
        v34 = 1;
        v35 = 2048;
        v36 = v20;
        v37 = 2048;
        v38 = v21;
        v39 = 2048;
        v40 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "isStart,%d,manifest,%d,LastTime,%lf,LastLat,%.05lf,LastLon,%.05lf", v32, 44, v27, v28, v29);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLTransitTilePreloader::makeRequestIfNeeded(BOOL, const CLDaemonLocation &, const CFAbsoluteTime &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      if (!a2)
      {
        if (*(double *)(a3 + 20) > 0.0)
        {
          sub_10011E258((double *)a1 + 1, a3, (uint64_t)(a1 + 8));
          if ((v9 >= 259200.0 || v19 > 150000.0) && *((double *)a1 + 7) == 0.0)
            a1[7] = *(_QWORD *)a4;
        }
        goto LABEL_31;
      }
      if (vabdd_f64(v7, v8) >= 259200.0)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102196CC8);
        v15 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Request region preload manifest, update", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_25;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102196CC8);
        *(_WORD *)v32 = 0;
        LODWORD(v26) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Request region preload manifest, update", v32, v26);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLTransitTilePreloader::makeRequestIfNeeded(BOOL, const CLDaemonLocation &, const CFAbsoluteTime &)", "%s\n", v16);
LABEL_40:
        if (v17 != buf)
          free(v17);
LABEL_25:
        sub_100F9A714(a1, v10 ^ 1, a4);
      }
    }
    else if (a2)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102196CC8);
      v18 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Request region preload manifest, no manifest", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_25;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102196CC8);
      *(_WORD *)v32 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Request region preload manifest, no manifest", v32, 2);
      v17 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLTransitTilePreloader::makeRequestIfNeeded(BOOL, const CLDaemonLocation &, const CFAbsoluteTime &)", "%s\n", v25);
      goto LABEL_40;
    }
LABEL_31:
    *(_QWORD *)buf = v31;
    sub_100756E08((void ***)buf);
  }
}

void sub_100157F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31)
{
  a31 = (void **)&a20;
  sub_100756E08(&a31);
  _Unwind_Resume(a1);
}

id sub_100157FC8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLTilesManager")), "syncgetRegionPreloadManifest:", a2);
}

void sub_100157FFC(_QWORD *a1, uint64_t a2, double *a3)
{
  sub_100157758(a1, 0, a2, a3);
}

void sub_10015800C(uint64_t a1, int *a2, int8x16_t *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceMonitorNotifier::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102181128);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceMonitorNotifier::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102181128);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceMonitorNotifier::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001581E4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1001581C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001581E4(uint64_t a1, uint64_t a2, int *a3, int8x16_t *a4)
{
  double Current;
  _QWORD v8[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_10016BE4C((_QWORD *)(a1 + 120), a3, (uint64_t)a4, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v8);
    sub_100174608(a3, a4, (uint64_t)v8, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v8);
    sub_100166004(v8);
  }
}

void sub_100158270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100158284(uint64_t a1, uint64_t a2)
{
  double Current;
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  Current = CFAbsoluteTimeGetCurrent();
  if (Current - *(double *)(a1 + 8) > 43200.0)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10213D650);
    v5 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (int)(Current - *(double *)(a1 + 8));
      *(_DWORD *)buf = 67240192;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fence: Output CLFenceLogEntrySerializer log opened for %{public}d seconds, re-opening", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10213D650);
      v7 = (int)(Current - *(double *)(a1 + 8));
      v9[0] = 67240192;
      v9[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: Output CLFenceLogEntrySerializer log opened for %{public}d seconds, re-opening", v9, 8);
      sub_100512490("Generic", 1, 0, 2, "void CLFenceLogEntrySerializer::append(const ::google::protobuf::MessageLite &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    sub_100488434(a1);
  }
  sub_100166ABC(*(_QWORD *)(a1 + 16), a2);
}

BOOL sub_100158484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _BOOL8 result;
  uint64_t v8;
  const char *v9;
  double v10;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  int v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  const char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  NSObject *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char *v81;
  char *v82;
  int *v83;
  uint64_t v84;
  _BYTE v85[96];
  __int128 v86;
  __int128 v87;
  _BYTE v88[28];
  _WORD v89[2];
  _BYTE v90[96];
  __int128 v91;
  __int128 v92;
  _BYTE v93[28];
  __int16 v94;
  int v95;
  _BYTE v96[24];
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  int v104;
  uint8_t buf[4];
  _BYTE v106[24];
  __int16 v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  int v114;

  if (sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,null island", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v8 = qword_1022A0028;
      *(_WORD *)v90 = 0;
      LODWORD(v84) = 2;
      v83 = (int *)v90;
      v9 = "#Warning,KF:invalid update,null island";
LABEL_88:
      v54 = 0;
      goto LABEL_89;
    }
    return result;
  }
  if (*(double *)(a2 + 20) > 0.0)
  {
    v10 = *(double *)(a1 + 1164);
    *(_OWORD *)&v90[4] = 0uLL;
    *(_OWORD *)&v90[20] = xmmword_101BAFC90;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)&v90[36] = _Q1;
    *(_OWORD *)&v90[52] = _Q1;
    *(_OWORD *)&v90[68] = _Q1;
    *(_DWORD *)v90 = 0xFFFF;
    *(_DWORD *)&v90[84] = 0;
    v91 = 0uLL;
    *(_QWORD *)&v90[88] = 0xBFF0000000000000;
    *(_QWORD *)((char *)&v92 + 4) = 0xBFF0000000000000;
    LODWORD(v92) = 0;
    HIDWORD(v92) = 0x7FFFFFFF;
    memset(v93, 0, 25);
    v94 = 0;
    *(_DWORD *)v85 = 0xFFFF;
    *(_OWORD *)&v85[4] = 0uLL;
    *(_OWORD *)&v85[20] = xmmword_101BAFC90;
    *(_OWORD *)&v85[36] = _Q1;
    *(_OWORD *)&v85[52] = _Q1;
    *(_OWORD *)&v85[68] = _Q1;
    *(_DWORD *)&v85[84] = 0;
    v86 = 0uLL;
    *(_QWORD *)&v85[88] = 0xBFF0000000000000;
    LODWORD(v87) = 0;
    *(_QWORD *)((char *)&v87 + 4) = 0xBFF0000000000000;
    HIDWORD(v87) = 0x7FFFFFFF;
    memset(v88, 0, 25);
    v89[0] = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v16 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_DWORD *)(a2 + 96);
      v18 = *(_QWORD *)(a2 + 4);
      v19 = *(_QWORD *)(a2 + 12);
      v20 = *(_QWORD *)(a2 + 20);
      v21 = *(_QWORD *)(a2 + 28);
      v22 = *(_QWORD *)(a2 + 36);
      v23 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)buf = 67241729;
      *(_DWORD *)v106 = v17;
      *(_WORD *)&v106[4] = 2049;
      *(_QWORD *)&v106[6] = v18;
      *(_WORD *)&v106[14] = 2049;
      *(_QWORD *)&v106[16] = v19;
      v107 = 2050;
      v108 = v20;
      v109 = 2049;
      v110 = v21;
      v111 = 2050;
      v112 = v22;
      v113 = 1026;
      v114 = v23;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "KF:Attempting update,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.1f,alt,%{private}.3f,vunc,%{public}.3f,conf,%{public}d", buf, 0x40u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v74 = *(_DWORD *)(a2 + 96);
      v75 = *(_QWORD *)(a2 + 4);
      v76 = *(_QWORD *)(a2 + 12);
      v77 = *(_QWORD *)(a2 + 20);
      v78 = *(_QWORD *)(a2 + 28);
      v79 = *(_QWORD *)(a2 + 36);
      v80 = *(_DWORD *)(a2 + 84);
      v95 = 67241729;
      *(_DWORD *)v96 = v74;
      *(_WORD *)&v96[4] = 2049;
      *(_QWORD *)&v96[6] = v75;
      *(_WORD *)&v96[14] = 2049;
      *(_QWORD *)&v96[16] = v76;
      v97 = 2050;
      v98 = v77;
      v99 = 2049;
      v100 = v78;
      v101 = 2050;
      v102 = v79;
      v103 = 1026;
      v104 = v80;
      v81 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Attempting update,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,hunc,%{public}.1f,alt,%{private}.3f,vunc,%{public}.3f,conf,%{public}d", &v95, 64);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n", v81);
      if (v81 != (char *)buf)
        free(v81);
    }
    v24 = -1.0;
    if (*(double *)(a2 + 20) > 0.0 && *(double *)(a1 + 1164) > 0.0)
      v24 = *(double *)(a2 + 76) - *(double *)(a1 + 1220);
    v25 = sub_1000E5C70(a1 + 880, a2, (uint64_t)v85, v89, 0);
    result = 0;
    HIBYTE(v89[0]) = v25;
    if (!v25)
      return result;
    v26 = *(_DWORD *)(a2 + 96);
    if (LOBYTE(v89[0]))
    {
      if (v26 == 4 && *(_DWORD *)(a2 + 84) == 65 && v24 < 36000.0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v27 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v28 = *(_QWORD *)(a2 + 4);
          v29 = *(_QWORD *)(a2 + 12);
          *(_DWORD *)buf = 134283777;
          *(_QWORD *)v106 = v28;
          *(_WORD *)&v106[8] = 2049;
          *(_QWORD *)&v106[10] = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "KF:Single AP,Dual input rejection,lat,%{private}.7f,lon,%{private}.7f", buf, 0x16u);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v8 = qword_1022A0028;
        v30 = *(_QWORD *)(a2 + 4);
        v31 = *(_QWORD *)(a2 + 12);
        v95 = 134283777;
        *(_QWORD *)v96 = v30;
        *(_WORD *)&v96[8] = 2049;
        *(_QWORD *)&v96[10] = v31;
        LODWORD(v84) = 22;
        v83 = &v95;
        v9 = "KF:Single AP,Dual input rejection,lat,%{private}.7f,lon,%{private}.7f";
        goto LABEL_67;
      }
      if (v24 <= 7200.0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v47 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v48 = *(_DWORD *)(a2 + 96);
          v49 = *(_QWORD *)(a2 + 4);
          v50 = *(_QWORD *)(a2 + 12);
          *(_DWORD *)buf = 67240705;
          *(_DWORD *)v106 = v48;
          *(_WORD *)&v106[4] = 2049;
          *(_QWORD *)&v106[6] = v49;
          *(_WORD *)&v106[14] = 2049;
          *(_QWORD *)&v106[16] = v50;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "KF:Dual rejection,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,blunder detected", buf, 0x1Cu);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v8 = qword_1022A0028;
        v51 = *(_DWORD *)(a2 + 96);
        v52 = *(_QWORD *)(a2 + 4);
        v53 = *(_QWORD *)(a2 + 12);
        v95 = 67240705;
        *(_DWORD *)v96 = v51;
        *(_WORD *)&v96[4] = 2049;
        *(_QWORD *)&v96[6] = v52;
        *(_WORD *)&v96[14] = 2049;
        *(_QWORD *)&v96[16] = v53;
        LODWORD(v84) = 28;
        v83 = &v95;
        v9 = "KF:Dual rejection,type,%{public}d,lat,%{private}.7f,lon,%{private}.7f,blunder detected";
LABEL_67:
        v54 = 2;
LABEL_89:
        v36 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, v54, v9, v83, v84);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n");
LABEL_90:
        if (v36 != buf)
          free(v36);
        return 0;
      }
      sub_100C25CCC(a1 + 8);
      sub_100C25CCC(a1 + 880);
      v33 = sub_1000E5C70(a1 + 880, a2, (uint64_t)v85, v89, 0);
      result = 0;
      if (!v33)
        return result;
      if (LOBYTE(v89[0]))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v34 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "KF:input should not be rejected after a hard reset", buf, 2u);
        }
        v35 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v35)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          LOWORD(v95) = 0;
          LODWORD(v84) = 2;
          v36 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:input should not be rejected after a hard reset", &v95, v84);
          sub_100512490("Generic", 1, 0, 0, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n");
          goto LABEL_90;
        }
        return result;
      }
      v60 = v87;
      *(_OWORD *)(a3 + 96) = v86;
      *(_OWORD *)(a3 + 112) = v60;
      *(_OWORD *)(a3 + 128) = *(_OWORD *)v88;
      *(_OWORD *)(a3 + 140) = *(_OWORD *)&v88[12];
      v61 = *(_OWORD *)&v85[48];
      *(_OWORD *)(a3 + 32) = *(_OWORD *)&v85[32];
      *(_OWORD *)(a3 + 48) = v61;
      v62 = *(_OWORD *)&v85[80];
      *(_OWORD *)(a3 + 64) = *(_OWORD *)&v85[64];
      *(_OWORD *)(a3 + 80) = v62;
      v63 = *(_OWORD *)&v85[16];
      *(_OWORD *)a3 = *(_OWORD *)v85;
      *(_OWORD *)(a3 + 16) = v63;
      sub_1001591CC(0, a2, a3, (uint64_t)"airTravelMode,ltn");
      sub_1000F3388(a1);
    }
    else
    {
      if (v26 == 4 && *(int *)(a2 + 84) > 72 || (sub_1000EBF88(v26) & 1) != 0 || v24 < 600.0)
      {
        sub_1000F3388(a1);
        v43 = v87;
        *(_OWORD *)(a3 + 96) = v86;
        *(_OWORD *)(a3 + 112) = v43;
        *(_OWORD *)(a3 + 128) = *(_OWORD *)v88;
        *(_OWORD *)(a3 + 140) = *(_OWORD *)&v88[12];
        v44 = *(_OWORD *)&v85[48];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v85[32];
        *(_OWORD *)(a3 + 48) = v44;
        v45 = *(_OWORD *)&v85[80];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v85[64];
        *(_OWORD *)(a3 + 80) = v45;
        v46 = *(_OWORD *)&v85[16];
        *(_OWORD *)a3 = *(_OWORD *)v85;
        *(_OWORD *)(a3 + 16) = v46;
        v42 = "intervalOfInterest,ltn";
      }
      else if ((sub_1000E5C70(a1 + 8, a2, (uint64_t)v90, &v94, 0) & 1) != 0)
      {
        if ((_BYTE)v94)
        {
          sub_1000F3388(a1);
          v38 = v87;
          *(_OWORD *)(a3 + 96) = v86;
          *(_OWORD *)(a3 + 112) = v38;
          *(_OWORD *)(a3 + 128) = *(_OWORD *)v88;
          *(_OWORD *)(a3 + 140) = *(_OWORD *)&v88[12];
          v39 = *(_OWORD *)&v85[48];
          *(_OWORD *)(a3 + 32) = *(_OWORD *)&v85[32];
          *(_OWORD *)(a3 + 48) = v39;
          v40 = *(_OWORD *)&v85[80];
          *(_OWORD *)(a3 + 64) = *(_OWORD *)&v85[64];
          *(_OWORD *)(a3 + 80) = v40;
          v41 = *(_OWORD *)&v85[16];
          *(_OWORD *)a3 = *(_OWORD *)v85;
          *(_OWORD *)(a3 + 16) = v41;
          v42 = "notStatic,ltn";
        }
        else
        {
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 936);
          v64 = *(_OWORD *)(a1 + 920);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 904);
          *(_OWORD *)(a1 + 48) = v64;
          *(_BYTE *)(a1 + 256) = *(_BYTE *)(a1 + 1128);
          *(_QWORD *)(a1 + 632) = *(_QWORD *)(a1 + 1504);
          v37 = sub_1000F32B4(a1 + 888, a1 + 16);
          v65 = *(_OWORD *)&v90[80];
          *(_OWORD *)(a3 + 64) = *(_OWORD *)&v90[64];
          *(_OWORD *)(a3 + 80) = v65;
          v66 = *(_OWORD *)&v90[48];
          *(_OWORD *)(a3 + 32) = *(_OWORD *)&v90[32];
          *(_OWORD *)(a3 + 48) = v66;
          *(_OWORD *)(a3 + 140) = *(_OWORD *)&v93[12];
          v67 = *(_OWORD *)v93;
          v68 = v91;
          *(_OWORD *)(a3 + 112) = v92;
          *(_OWORD *)(a3 + 128) = v67;
          *(_OWORD *)(a3 + 96) = v68;
          v69 = *(_OWORD *)&v90[16];
          *(_OWORD *)a3 = *(_OWORD *)v90;
          *(_OWORD *)(a3 + 16) = v69;
          if (v10 > 0.0 && *(double *)(a2 + 20) > 0.0)
          {
            sub_10011E258((double *)(a1 + 1752), a3, a2);
            if (v70 > *(double *)(a3 + 20))
            {
              v71 = fmax(v70, 1.0);
              v72 = *(_QWORD *)(a1 + 968);
              v73 = v71 * v71 * 0.5;
              *(double *)v72 = v73;
              *(_OWORD *)(v72 + 8) = 0u;
              *(_OWORD *)(v72 + 24) = 0u;
              *(double *)(v72 + 40) = v73;
              *(_OWORD *)(v72 + 48) = 0u;
              *(_OWORD *)(v72 + 64) = 0u;
              *(_QWORD *)(v72 + 96) = 0;
              *(_QWORD *)(v72 + 104) = 0;
            }
          }
          v42 = "staticAssumed,lts";
        }
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v55 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#Warning,KF:longTermStatic should not fail if longTermNormal succeeded", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          LOWORD(v95) = 0;
          LODWORD(v84) = 2;
          v82 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:longTermStatic should not fail if longTermNormal succeeded", &v95, v84);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)", "%s\n", v82);
          if (v82 != (char *)buf)
            free(v82);
        }
        sub_1000F3388(a1);
        v56 = v87;
        *(_OWORD *)(a3 + 96) = v86;
        *(_OWORD *)(a3 + 112) = v56;
        *(_OWORD *)(a3 + 128) = *(_OWORD *)v88;
        *(_OWORD *)(a3 + 140) = *(_OWORD *)&v88[12];
        v57 = *(_OWORD *)&v85[48];
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v85[32];
        *(_OWORD *)(a3 + 48) = v57;
        v58 = *(_OWORD *)&v85[80];
        *(_OWORD *)(a3 + 64) = *(_OWORD *)&v85[64];
        *(_OWORD *)(a3 + 80) = v58;
        v59 = *(_OWORD *)&v85[16];
        *(_OWORD *)a3 = *(_OWORD *)v85;
        *(_OWORD *)(a3 + 16) = v59;
        v42 = "unexpected,ltn";
      }
      sub_1001591CC(v37, a2, a3, (uint64_t)v42);
    }
    return 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v32 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning,KF:invalid update,hunc<=0", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v8 = qword_1022A0028;
    *(_WORD *)v90 = 0;
    LODWORD(v84) = 2;
    v83 = (int *)v90;
    v9 = "#Warning,KF:invalid update,hunc<=0";
    goto LABEL_88;
  }
  return result;
}

uint64_t sub_1001591CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint8_t buf[4];
  uint64_t v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  double v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;

  v7 = *(double *)(a3 + 44);
  if (v7 >= 0.0)
    v8 = v7 * 3.6;
  else
    v8 = *(double *)(a3 + 44);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v9 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_QWORD *)(a3 + 76);
    v11 = *(_DWORD *)(a2 + 96);
    v12 = *(_DWORD *)(a3 + 96);
    v13 = *(_QWORD *)(a3 + 4);
    v14 = *(_QWORD *)(a3 + 12);
    v15 = *(_QWORD *)(a3 + 28);
    v16 = *(_QWORD *)(a3 + 60);
    v17 = *(_QWORD *)(a3 + 20);
    v18 = *(_QWORD *)(a3 + 36);
    v19 = *(_QWORD *)(a3 + 52);
    v20 = *(_QWORD *)(a3 + 68);
    *(_DWORD *)buf = 134352387;
    v63 = v10;
    v64 = 1026;
    v65 = v11;
    v66 = 1026;
    v67 = v12;
    v68 = 1026;
    v69 = 0;
    v70 = 2049;
    v71 = v13;
    v72 = 2049;
    v73 = v14;
    v74 = 2049;
    v75 = v15;
    v76 = 2050;
    v77 = v8;
    v78 = 2050;
    v79 = v16;
    v80 = 2050;
    v81 = v17;
    v82 = 2050;
    v83 = v18;
    v84 = 2050;
    v85 = v19;
    v86 = 2050;
    v87 = v20;
    v88 = 2082;
    v89 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "KF:Dual,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.8f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s", buf, 0x82u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v22 = *(_QWORD *)(a3 + 76);
    v23 = *(_DWORD *)(a2 + 96);
    v24 = *(_DWORD *)(a3 + 96);
    v25 = *(_QWORD *)(a3 + 4);
    v26 = *(_QWORD *)(a3 + 12);
    v27 = *(_QWORD *)(a3 + 28);
    v28 = *(_QWORD *)(a3 + 60);
    v29 = *(_QWORD *)(a3 + 20);
    v30 = *(_QWORD *)(a3 + 36);
    v31 = *(_QWORD *)(a3 + 52);
    v32 = *(_QWORD *)(a3 + 68);
    v34 = 134352387;
    v35 = v22;
    v36 = 1026;
    v37 = v23;
    v38 = 1026;
    v39 = v24;
    v40 = 1026;
    v41 = 0;
    v42 = 2049;
    v43 = v25;
    v44 = 2049;
    v45 = v26;
    v46 = 2049;
    v47 = v27;
    v48 = 2050;
    v49 = v8;
    v50 = 2050;
    v51 = v28;
    v52 = 2050;
    v53 = v29;
    v54 = 2050;
    v55 = v30;
    v56 = 2050;
    v57 = v31;
    v58 = 2050;
    v59 = v32;
    v60 = 2082;
    v61 = a4;
    v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:Dual,%{public}.3f,%{public}d,%{public}d,%{public}d,%{private}.7f,%{private}.8f,%{private}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}s", &v34, 130);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDualModeKalmanFilter::debugPrint(const CLDaemonLocation &, const CLDaemonLocation &, const char *)", "%s\n", v33);
    if (v33 != (char *)buf)
      free(v33);
  }
  return 1;
}

BOOL sub_1001594F4(float64_t *a1, double *a2, _DWORD *a3)
{
  float64x2_t v3;
  unint64_t v4;
  BOOL v5;
  float32x4_t v6;
  float64x2_t v7;
  int64x2_t v8;
  int32x4_t v9;
  int v10;

  if (*a2 > -70.312522 || *a2 < -123.496142 || (v3.f64[0] = *a1, *a1 < 25.127422) || v3.f64[0] > 48.309232)
  {
    v10 = 0;
    v5 = 0;
    if (!a3)
      return v5;
    goto LABEL_13;
  }
  v4 = 0;
  v3.f64[1] = *a2;
  v5 = 1;
  while (1)
  {
    v6 = xmmword_1022FD54C[v4];
    v7 = vcvtq_f64_f32(*(float32x2_t *)v6.f32);
    v8 = (int64x2_t)vmvnq_s8((int8x16_t)vcgeq_f64(vcvt_hight_f64_f32(v6), v3));
    v9 = (int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f64(v3, v7));
    *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)v9);
    if ((vmaxv_u16((uint16x4_t)vext_s8((int8x8_t)vmovn_s32(vmovn_hight_s64(*(int32x2_t *)v8.i8, v8)), (int8x8_t)vmovn_s32(v9), 4uLL)) & 1) == 0)break;
    v5 = v4++ < 0x31;
    if (v4 == 50)
      return 0;
  }
  if (a3)
  {
    v10 = v4 + 1;
LABEL_13:
    *a3 = v10;
  }
  return v5;
}

__n128 sub_1001595D0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  NSObject *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 140);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 20);
  if (sub_100159A20(a1, a2))
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v6 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#loiOverride using Loi Location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021613E8);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride using Loi Location", v14, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "const CLDaemonLocation CLLoiLocationOverride::getBestLocation(const CLDaemonLocation &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    *(_DWORD *)(a1 + 276) = 1;
    sub_100159804(a1);
    sub_100989394(a1, a2, (uint64_t)a3);
  }
  else
  {
    *(_DWORD *)(a1 + 276) = 0;
    sub_100159804(a1);
    v8 = *(_OWORD *)(a2 + 112);
    a3[6] = *(_OWORD *)(a2 + 96);
    a3[7] = v8;
    a3[8] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)a3 + 140) = *(_OWORD *)(a2 + 140);
    v9 = *(_OWORD *)(a2 + 48);
    a3[2] = *(_OWORD *)(a2 + 32);
    a3[3] = v9;
    v10 = *(_OWORD *)(a2 + 80);
    a3[4] = *(_OWORD *)(a2 + 64);
    a3[5] = v10;
    result = *(__n128 *)a2;
    v11 = *(_OWORD *)(a2 + 16);
    *a3 = *(_OWORD *)a2;
    a3[1] = v11;
  }
  return result;
}

__n128 sub_100159804(uint64_t a1)
{
  uint64_t v2;
  __n128 result;
  _QWORD v9[13];
  _QWORD v10[13];

  if (arc4random_uniform(0x64u) == 1)
  {
    v9[0] = CFSTR("incomingLocationType");
    v10[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 216));
    v9[1] = CFSTR("incomingLocationSignalEnvironmentType");
    v10[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 220));
    v9[2] = CFSTR("incomingLocationHorizontalAccuracy");
    v10[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 224));
    v9[3] = CFSTR("loiLocationHorizontalAccuracy");
    v10[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 232));
    v9[4] = CFSTR("incomingLocationDistanceToLoi");
    v10[4] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 240));
    v9[5] = CFSTR("isValidLoi");
    v10[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 248));
    v9[6] = CFSTR("isLoiHighAccuracy");
    v10[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 252));
    v9[7] = CFSTR("isIncomingLocationValidLocationType");
    v10[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 256));
    v9[8] = CFSTR("isIncomingLocationGreaterUncertainty");
    v10[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 260));
    v9[9] = CFSTR("isDistanceLessThanThreshold");
    v10[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 264));
    v9[10] = CFSTR("isHorizontalAccuracyOverlapping");
    v10[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 268));
    v9[11] = CFSTR("isWifiAssociated");
    v10[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 272));
    v9[12] = CFSTR("isOverriding");
    v10[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 276));
    AnalyticsSendEvent(CFSTR("com.apple.locationd.CLLoiLocationOverride"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 13));
  }
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = 0;
  v2 = a1 + 216;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v2 + 8) = _Q0;
  *(_QWORD *)(v2 + 24) = 0xBFF0000000000000;
  result.n128_u64[0] = -1;
  result.n128_u64[1] = -1;
  *(__n128 *)(v2 + 32) = result;
  *(__n128 *)(v2 + 48) = result;
  return result;
}

BOOL sub_100159A20(uint64_t a1, uint64_t a2)
{
  double v4;
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  _BOOL8 result;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  _WORD v27[8];
  uint8_t buf[1640];

  if (!sub_100182290(a1)
    || ((v4 = *(double *)(a1 + 20), *(uint64_t *)&v4 > -1)
      ? (v5 = ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      : (v5 = 1),
        v5 ? (v6 = (unint64_t)(*(_QWORD *)&v4 - 1) >= 0xFFFFFFFFFFFFFLL) : (v6 = 0),
        v6))
  {
    if (qword_1022A0170 != -1)
      dispatch_once(&qword_1022A0170, &stru_1021613E8);
    v9 = qword_1022A0178;
    if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#loiOverride no valid current location.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021613E8);
      v27[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride no valid current location.", v27, 2);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    result = 0;
    *(_DWORD *)(a1 + 248) = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 248) = 1;
    *(double *)(a1 + 232) = v4;
    v7 = *(_DWORD *)(a2 + 96);
    if (v7 <= 8 && ((1 << v7) & 0x1D0) != 0)
    {
      *(_DWORD *)(a1 + 256) = 1;
      if (*(_DWORD *)(a1 + 156) == 2)
      {
        *(_DWORD *)(a1 + 252) = 1;
        if (*(double *)(a2 + 20) <= v4)
        {
          if (qword_1022A0170 != -1)
            dispatch_once(&qword_1022A0170, &stru_1021613E8);
          v11 = qword_1022A0178;
          if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#loiOverride the spread of the LOI is larger than the location fix.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0170 != -1)
              dispatch_once(&qword_1022A0170, &stru_1021613E8);
            v27[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride the spread of the LOI is larger than the location fix.", v27, 2);
            v22 = (uint8_t *)v21;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)", "%s\n", v21);
            if (v22 != buf)
              free(v22);
          }
          result = 0;
          *(_DWORD *)(a1 + 260) = 0;
        }
        else
        {
          *(_DWORD *)(a1 + 260) = 1;
          if ((sub_100989B68(a1, a1, a2) & 1) != 0)
          {
            if (*(double *)(a1 + 208) + 600.0 <= *(double *)(a1 + 76) || *(_BYTE *)(a1 + 200))
            {
              result = 1;
              *(_DWORD *)(a1 + 272) = 1;
            }
            else
            {
              if (qword_1022A0170 != -1)
                dispatch_once(&qword_1022A0170, &stru_1021613E8);
              v16 = qword_1022A0178;
              if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#loiOverride WiFi is not associated to overide Wifi1 locations.", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0170 != -1)
                  dispatch_once(&qword_1022A0170, &stru_1021613E8);
                v27[0] = 0;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride WiFi is not associated to overide Wifi1 locations.", v27, 2);
                v26 = (uint8_t *)v25;
                sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)", "%s\n", v25);
                if (v26 != buf)
                  free(v26);
              }
              result = 0;
              *(_DWORD *)(a1 + 272) = 0;
            }
          }
          else
          {
            if (qword_1022A0170 != -1)
              dispatch_once(&qword_1022A0170, &stru_1021613E8);
            v13 = qword_1022A0178;
            if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#loiOverride locations are not sufficiently proximate.", buf, 2u);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0170 != -1)
                dispatch_once(&qword_1022A0170, &stru_1021613E8);
              v27[0] = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride locations are not sufficiently proximate.", v27, 2);
              v15 = (uint8_t *)v14;
              sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)", "%s\n", v14);
              if (v15 != buf)
                free(v15);
              return 0;
            }
          }
        }
      }
      else
      {
        if (qword_1022A0170 != -1)
          dispatch_once(&qword_1022A0170, &stru_1021613E8);
        v10 = qword_1022A0178;
        if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#loiOverride location source accuracy is not High to overide location.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0170 != -1)
            dispatch_once(&qword_1022A0170, &stru_1021613E8);
          v27[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride location source accuracy is not High to overide location.", v27, 2);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        result = 0;
        *(_DWORD *)(a1 + 252) = 0;
      }
    }
    else
    {
      if (qword_1022A0170 != -1)
        dispatch_once(&qword_1022A0170, &stru_1021613E8);
      v12 = qword_1022A0178;
      if (os_log_type_enabled((os_log_t)qword_1022A0178, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#loiOverride location is not Wifi1 or Cell.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0170 != -1)
          dispatch_once(&qword_1022A0170, &stru_1021613E8);
        v27[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0178, 2, "#loiOverride location is not Wifi1 or Cell.", v27, 2);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLLoiLocationOverride::shouldUseLoiLocation(const CLDaemonLocation &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      result = 0;
      *(_DWORD *)(a1 + 256) = 0;
    }
  }
  return result;
}

void sub_10015A2B0(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBarometricAltimeter::onLocationDerivedNotificationBaro");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 504), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF628);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onLocationDerivedNotificationBaro", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF628);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onLocationDerivedNotificationBaro\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10015A488(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10015A468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10015A488(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  NSObject *v7;
  int v8;
  double v9;
  double v10;
  double v11;
  double Current;
  float v13;
  float v14;
  float v15;
  float v16;
  NSObject *v17;
  int v18;
  unsigned int v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  const char *v28;
  uint8_t *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67174657;
    v46 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,received onLocationDerivedNotification,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v24 = *a3;
    LODWORD(v34) = 67174657;
    HIDWORD(v34) = v24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,received onLocationDerivedNotification,%{private}d", &v34, 8);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  if ((sub_1000C4240() & 1) != 0)
  {
    v9 = a4[117];
    v10 = a4[119];
    v11 = a4[118];
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v14 = v9;
    v15 = v10;
    v13 = Current - v11;
    v16 = fabsf(v13);
    v17 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_DWORD *)(a1 + 1316);
      *(_DWORD *)buf = 67241472;
      v46 = v18;
      v47 = 2050;
      v48 = v14;
      v49 = 2050;
      v50 = v15;
      v51 = 2050;
      v52 = v11;
      v53 = 2050;
      v54 = Current;
      v55 = 2050;
      v56 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BaroAlt,received WSB update, activity type,%{public}u,speed,%{public}.3lf,Unc,%{public}.3lf,timestamp,%{public}.3lf,curTime,%{public}.3lf,ageOfEstimation,%{public}.3lf", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v27 = *(_DWORD *)(a1 + 1316);
      LODWORD(v34) = 67241472;
      HIDWORD(v34) = v27;
      v35 = 2050;
      v36 = v14;
      v37 = 2050;
      v38 = v15;
      v39 = 2050;
      v40 = v11;
      v41 = 2050;
      v42 = Current;
      v43 = 2050;
      v44 = v16;
      LODWORD(v33) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,received WSB update, activity type,%{public}u,speed,%{public}.3lf,Unc,%{public}.3lf,timestamp,%{public}.3lf,curTime,%{public}.3lf,ageOfEstimation,%{public}.3lf", &v34, v33);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    v19 = *(_DWORD *)(a1 + 1316);
    if (v19 <= 0x38
      && ((1 << v19) & 0x110000000000C20) != 0
      && (*(_DWORD *)(a1 + 1320) - 1) <= 1
      && *(_BYTE *)(a1 + 3481)
      && v16 <= 180.0
      && v14 >= 0.0
      && v14 <= 13.0
      && v15 > 0.0
      && v15 < 4.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v20 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "BaroAlt,received WSB update, turn GPS ON", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        LOWORD(v34) = 0;
        LODWORD(v33) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,received WSB update, turn GPS ON", &v34, v33);
        v32 = (uint8_t *)v31;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v31);
        if (v32 != buf)
          free(v32);
      }
      if (sub_1017D3E4C(a1, Current))
      {
        sub_1017D480C(a1, 1, Current);
        return;
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v22 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,no power budget to turn GPS ON", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        LOWORD(v34) = 0;
        LODWORD(v33) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,no power budget to turn GPS ON", &v34, v33, v34);
LABEL_53:
        v30 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onLocationDerivedNotificationBaro(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v23);
        if (v30 != buf)
          free(v30);
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "BaroAlt,#Warning,ALS is not supported on legacy HW", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v34) = 0;
      LODWORD(v33) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,#Warning,ALS is not supported on legacy HW", &v34, v33, v34);
      goto LABEL_53;
    }
  }
}

BOOL sub_10015AC14(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  NSObject *v7;
  double v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _BOOL8 result;
  const char *v25;
  _OWORD *v26;
  double v27;
  float v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float32x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  double v38;
  double v39;
  float v40;
  float v41;
  uint64_t v42;
  double v43;
  float v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;
  _BOOL4 v49;
  double v50;
  double v51;
  double v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  unint64_t v56;
  unint64_t v57;
  double *v58;
  unint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  _QWORD *v62;
  double *v63;
  _QWORD *v64;
  double *v65;
  double *v66;
  _QWORD *v67;
  NSObject *v68;
  double v69;
  _BYTE *v70;
  double v71;
  uint64_t v72;
  _BYTE *v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  int v78;
  _BYTE *v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  uint64_t v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  float64x2_t v95;
  float64x2_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  __int128 v100;
  NSObject *v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  double v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  char *v113;
  int v114;
  _BYTE *v115;
  char *v116;
  uint64_t v117;
  int v118;
  _BYTE *v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  _BOOL4 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  char *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  double v136;
  uint64_t v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  _BYTE *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  double v146;
  _BYTE *v147;
  double v148;
  uint64_t v149;
  _BYTE *v150;
  double v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  unint64_t v161;
  double v162;
  unsigned __int8 v163;
  __int16 v164;
  double v165;
  int v166;
  _BYTE v167[10];
  _BYTE v168[24];
  __int16 v169;
  _BYTE *v170;
  __int16 v171;
  double v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  _BYTE v176[30];
  _BYTE v177[10];
  _BYTE v178[10];
  __int16 v179;
  uint64_t v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  _BYTE *v184;
  _QWORD buf[5];
  _BYTE *v186;
  __int16 v187;
  double v188;
  __int16 v189;
  uint64_t v190;
  __int16 v191;
  _BYTE v192[30];
  _BYTE v193[10];
  _BYTE v194[10];
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  _BYTE *v200;

  v3 = &qword_1022A0000;
  if (!a1[64])
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,odometer is not available", (uint8_t *)buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v166) = 0;
    v25 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,odometer is not available", &v166, 2);
LABEL_148:
    v143 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v25);
    if (v143 != (char *)buf)
      free(v143);
    return 0;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,update requested", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    LOWORD(v166) = 0;
    v113 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,update requested", &v166, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v113);
    if (v113 != (char *)buf)
      free(v113);
  }
  v165 = sub_1001FCBB4();
  *((_BYTE *)a1 + 496) = sub_10015E344((uint64_t)a1, v165);
  v8 = *(double *)(a2 + 20);
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v8 > 0.0 && v8 < 200.0)
  {
    v9 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 150) = *(_OWORD *)(a2 + 16);
    *((_OWORD *)a1 + 149) = v9;
    v10 = *(_OWORD *)(a2 + 32);
    v11 = *(_OWORD *)(a2 + 48);
    v12 = *(_OWORD *)(a2 + 64);
    *((_OWORD *)a1 + 154) = *(_OWORD *)(a2 + 80);
    *((_OWORD *)a1 + 153) = v12;
    *((_OWORD *)a1 + 152) = v11;
    *((_OWORD *)a1 + 151) = v10;
    v13 = *(_OWORD *)(a2 + 96);
    v14 = *(_OWORD *)(a2 + 112);
    v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)a1 + 2524) = *(_OWORD *)(a2 + 140);
    *((_OWORD *)a1 + 157) = v15;
    *((_OWORD *)a1 + 156) = v14;
    *((_OWORD *)a1 + 155) = v13;
    *((double *)a1 + 361) = v165;
    if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1 && *((double *)sub_100B94758() + 3) != *(double *)(a3 + 24))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v16 = (uint64_t *)((char *)a1 + 2460);
      v17 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v18 = *v16;
        v19 = *(_QWORD *)(a3 + 24);
        LODWORD(buf[0]) = 134218240;
        *(_QWORD *)((char *)buf + 4) = v18;
        WORD2(buf[1]) = 2048;
        *(_QWORD *)((char *)&buf[1] + 6) = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BaroAlt,fCachedLocation,time override,original cft,%{puboic}lf,gps cft,%{puboic}lf", (uint8_t *)buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CF648);
        v154 = *v16;
        v155 = *(_QWORD *)(a3 + 24);
        v166 = 134218240;
        *(_QWORD *)v167 = v154;
        *(_WORD *)&v167[8] = 2048;
        *(_QWORD *)v168 = v155;
        LODWORD(v158) = 22;
        v156 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,fCachedLocation,time override,original cft,%{puboic}lf,gps cft,%{puboic}lf", &v166, v158);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v156);
        if (v156 != (char *)buf)
          free(v156);
      }
      *v16 = *(_QWORD *)(a3 + 24);
    }
    sub_10015FC14((uint64_t)a1, a2);
  }
  if (*a1)
    sub_10015EBF0((uint64_t)*a1, a2, a3, v165);
  sub_10015DE50((uint64_t)a1, a2, v165);
  if (!*((_BYTE *)a1 + 520))
  {
    objc_msgSend(*((id *)a1[64] + 2), "register:forNotification:registrationInfo:", *((_QWORD *)a1[64] + 1), 7, 0);
    *((_BYTE *)a1 + 520) = 1;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v20 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BaroAlt, subscribed to kNotificationOdometerUpdateElevationSpectator", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v166) = 0;
      LODWORD(v158) = 2;
      v144 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt, subscribed to kNotificationOdometerUpdateElevationSpectator", &v166, v158);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v144);
      if (v144 != (char *)buf)
        free(v144);
    }
  }
  if (!*((_BYTE *)a1 + 3480))
    sub_1017CD7CC((uint64_t)a1);
  v164 = 0;
  v163 = sub_10015FDA4((uint64_t)a1, a2, a3, (BOOL *)&v164 + 1, (BOOL *)&v164, v165);
  if (*((_BYTE *)a1 + 2156))
    goto LABEL_30;
  if (!*a1)
    goto LABEL_46;
  if (sub_10015F3D0((uint64_t)*a1, a3, &v163))
LABEL_30:
    sub_1017CDAB4((uint64_t)a1);
  v21 = (uint64_t)*a1;
  if (*a1)
  {
    v22 = 236;
    if (!*((_BYTE *)a1 + 237))
      v22 = 360;
    LOBYTE(buf[0]) = *((_BYTE *)a1 + v22);
    sub_10015F3FC(v21, &v165, (uint64_t)(a1 + 197), a2, a3, a1 + 186, a1 + 195, a1 + 187, a1 + 188, &v163, a1 + 153, buf, a1 + 54, (double *)a1 + 55, a1 + 155, a1 + 56);
  }
LABEL_46:
  v26 = a1 + 159;
  v161 = 0xBFF0000000000000;
  v162 = 0.0;
  v160 = 0xBFF0000000000000;
  if (sub_10015F9C0((uint64_t)a1, &v165, a2, a3, v163, (double *)&v161, (double *)&v160))
  {
    v27 = *((double *)a1 + 54);
    v28 = v27;
    *((float *)a1 + 336) = v28;
    *((_DWORD *)a1 + 337) = 1075838976;
    v29 = 280;
    if (!*((_BYTE *)a1 + 281))
      v29 = 380;
    if (*((_BYTE *)a1 + v29))
    {
      memset(buf, 0, sizeof(buf));
      if (sub_101745ADC((uint64_t)*a1, buf))
      {
        v30 = (float64x2_t)vdupq_n_s64(0x402800A915379FA9uLL);
        v31 = vmulq_f64(*(float64x2_t *)&buf[1], v30);
        *(_QWORD *)&v30.f64[0] = a1[54];
        *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vsubq_f64(v30, *(float64x2_t *)&buf[1]);
        v32.f64[1] = v31.f64[1];
        v33 = vcvt_f32_f64(v32);
      }
      else
      {
        v33 = (float32x2_t)0xBF80000000000000;
      }
    }
    else
    {
      v34 = *((float64x2_t *)a1 + 130);
      v35 = (float64x2_t)vdupq_n_s64(0x402800A915379FA9uLL);
      v36.f64[1] = v35.f64[1];
      v36.f64[0] = v27;
      v37 = vmulq_f64(v34, v35);
      *(_QWORD *)&v34.f64[0] = *(_OWORD *)&vsubq_f64(v36, v34);
      v34.f64[1] = v37.f64[1];
      v33 = vcvt_f32_f64(v34);
    }
    a1[169] = (_BYTE *)v33;
    v38 = *((double *)a1 + 3);
    v39 = *((double *)a1 + 1);
    v40 = *((double *)a1 + 2) + *((double *)a1 + 4);
    *((float *)a1 + 347) = v40;
    v41 = v38;
    *((float *)a1 + 348) = v41;
    v43 = sub_1000B7150(v165, v39, 0.0);
    if (v43 > 5.0)
    {
      if (v43 > 864000.0)
        v43 = 864000.0;
      v44 = v43 + *((float *)a1 + 348);
      *((float *)a1 + 348) = v44;
    }
    *(_BYTE **)((char *)a1 + 1396) = (_BYTE *)vcvt_f32_f64(*(float64x2_t *)(a2 + 44));
    *(_OWORD *)(a1 + 171) = *(_OWORD *)(a2 + 4);
    v45 = *(double *)(a3 + 376) + *(float *)(a3 + 316);
    *((float *)a1 + 351) = v45;
    v46 = *(double *)(a3 + 384);
    *((float *)a1 + 352) = v46;
    v47 = *(double *)(a2 + 20);
    *((float *)a1 + 346) = v47;
    *((_DWORD *)a1 + 353) = *((_DWORD *)a1 + 329);
    *((_DWORD *)a1 + 354) = *((_DWORD *)a1 + 330);
    *((_BYTE *)a1 + 1432) = v163;
    *((_BYTE *)a1 + 1433) = HIBYTE(v164);
    *((_BYTE *)a1 + 1434) = v164;
    v48 = sub_1017CDFB8(v42, (double *)&v160);
    *((_DWORD *)a1 + 356) = v48;
    *((_DWORD *)a1 + 357) = sub_1017CE1A4(v48, (double *)&v161);
    sub_1017CE3CC((uint64_t)a1, (uint64_t)(a1 + 168), 0, 0);
    a1[168] = 0;
    a1[169] = 0;
    *(_OWORD *)(a1 + 171) = 0u;
    *(_OWORD *)(a1 + 173) = 0u;
    *(_OWORD *)((char *)a1 + 1396) = 0u;
    *(_BYTE **)((char *)a1 + 1420) = (_BYTE *)0xFFFFFFFF00000000;
    *((_DWORD *)a1 + 357) = -1;
    *((_WORD *)a1 + 716) = 0;
    *((_BYTE *)a1 + 1434) = 0;
  }
  if (!*a1)
  {
    v49 = 0;
    goto LABEL_86;
  }
  v49 = sub_10015E5A0(*a1, (uint64_t)(a1 + 197), (uint64_t)(a1 + 253), a1 + 419, (uint64_t)(a1 + 270), (double *)a1 + 59, (uint64_t *)a1 + 60, a2, a3, &v162, (double *)a1 + 61, (uint64_t *)a1 + 153, *((_DWORD *)a1 + 864));
  if (!*a1)
    goto LABEL_86;
  v50 = *((double *)a1 + 418);
  v51 = sub_1000B6F08((uint64_t)*a1, &v165);
  v52 = sub_1000B7150(v50, v51, 315360000.0);
  v53 = a1[430];
  v54 = a1[424];
  if (v53 == v54)
  {
    v55 = a1[426];
    v56 = (unint64_t)a1[429];
    v57 = v56 / 0x66;
    if (a1[427] == v55)
    {
      v58 = 0;
      v59 = 0;
    }
    else
    {
      v58 = (double *)(*(_QWORD *)&v55[8 * (v56 / 0x66)] + 40 * (v56 % 0x66));
      v59 = *(_QWORD *)&v55[8 * ((unint64_t)&v53[v56] / 0x66)] + 40 * ((unint64_t)&v53[v56] % 0x66);
    }
    v60 = a1[420];
    v61 = (unint64_t)a1[423];
    v62 = &v60[8 * (v61 / 0x66)];
    if (a1[421] == v60)
      v63 = 0;
    else
      v63 = (double *)(*v62 + 40 * (v61 % 0x66));
    if (v58 == (double *)v59)
      goto LABEL_86;
    v64 = &v55[8 * v57];
    while (vabdd_f64(*v58, *v63) < 2.22044605e-16)
    {
      v58 += 5;
      if ((double *)((char *)v58 - *v64) == (double *)4080)
      {
        v65 = (double *)v64[1];
        ++v64;
        v58 = v65;
      }
      v63 += 5;
      if ((double *)((char *)v63 - *v62) == (double *)4080)
      {
        v66 = (double *)v62[1];
        ++v62;
        v63 = v66;
      }
      if (v58 == (double *)v59)
        goto LABEL_86;
    }
  }
  if (v54 && v52 > *((double *)a1 + 431))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v67 = a1 + 425;
    v159 = (uint64_t *)((char *)a1 + 3188);
    v68 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v69 = v165;
      v70 = a1[424];
      v71 = sub_1000B6F08((uint64_t)*a1, &v165);
      v72 = *v159;
      v73 = *(_BYTE **)((char *)a1 + 3196);
      v74 = *(double *)(a2 + 4);
      v75 = *(_QWORD *)(a2 + 12);
      LODWORD(buf[0]) = 134350849;
      *(double *)((char *)buf + 4) = v69;
      v3 = &qword_1022A0000;
      v67 = a1 + 425;
      WORD2(buf[1]) = 1026;
      *(_DWORD *)((char *)&buf[1] + 6) = (_DWORD)v70;
      WORD1(buf[2]) = 2050;
      *(double *)((char *)&buf[2] + 4) = v71;
      WORD2(buf[3]) = 2049;
      *(_QWORD *)((char *)&buf[3] + 6) = v72;
      HIWORD(buf[4]) = 2049;
      v186 = v73;
      v187 = 2049;
      v188 = v74;
      v189 = 2049;
      v190 = v75;
      v191 = 2050;
      *(double *)v192 = v52;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "BaroAlt,disk,save,time,%{public}lf,fBaroBiasHistory,size,%{public}d,locationCfAbsTime,%{public}lf,lastLocLat,%{private}.8lf,lastLocLon,%{private}.8lf,currLocLat,%{private}.8lf,currLocLon,%{private}.8lf,timeSinceLast,%{public}lf", (uint8_t *)buf, 0x4Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v145 = qword_1022A0028;
      v146 = v165;
      v147 = a1[424];
      v148 = sub_1000B6F08((uint64_t)*a1, &v165);
      v149 = *v159;
      v150 = *(_BYTE **)((char *)a1 + 3196);
      v151 = *(double *)(a2 + 4);
      v152 = *(_QWORD *)(a2 + 12);
      v166 = 134350849;
      *(double *)v167 = v146;
      *(_WORD *)&v167[8] = 1026;
      *(_DWORD *)v168 = (_DWORD)v147;
      *(_WORD *)&v168[4] = 2050;
      *(double *)&v168[6] = v148;
      *(_WORD *)&v168[14] = 2049;
      *(_QWORD *)&v168[16] = v149;
      v169 = 2049;
      v170 = v150;
      v171 = 2049;
      v172 = v151;
      v173 = 2049;
      v174 = v152;
      v175 = 2050;
      *(double *)v176 = v52;
      LODWORD(v158) = 78;
      v153 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v145, 2, "BaroAlt,disk,save,time,%{public}lf,fBaroBiasHistory,size,%{public}d,locationCfAbsTime,%{public}lf,lastLocLat,%{private}.8lf,lastLocLon,%{private}.8lf,currLocLat,%{private}.8lf,currLocLon,%{private}.8lf,timeSinceLast,%{public}lf", &v166, v158);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v153);
      if (v153 != (char *)buf)
        free(v153);
      v3 = &qword_1022A0000;
    }
    v76 = sub_1017CF3A0(a1, 0, v165);
    sub_1017CF634(v165, v76, a1 + 419);
    sub_1017CFED4((uint64_t)a1);
    *((_OWORD *)a1 + 205) = *((_OWORD *)a1 + 155);
    *((_OWORD *)a1 + 206) = *((_OWORD *)a1 + 156);
    *((_OWORD *)a1 + 207) = *((_OWORD *)a1 + 157);
    *(_OWORD *)((char *)a1 + 3324) = *(_OWORD *)((char *)a1 + 2524);
    *((_OWORD *)a1 + 201) = *((_OWORD *)a1 + 151);
    *((_OWORD *)a1 + 202) = *((_OWORD *)a1 + 152);
    *((_OWORD *)a1 + 203) = *((_OWORD *)a1 + 153);
    *((_OWORD *)a1 + 204) = *((_OWORD *)a1 + 154);
    *((_OWORD *)a1 + 199) = *((_OWORD *)a1 + 149);
    *((_OWORD *)a1 + 200) = *((_OWORD *)a1 + 150);
    *((double *)a1 + 418) = sub_1000B6F08((uint64_t)*a1, &v165);
    sub_1017D0044(v67, a1 + 419);
  }
LABEL_86:
  if (v3[4] != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v77 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v78 = *((unsigned __int8 *)a1 + 2156);
    v79 = a1[58];
    LODWORD(buf[0]) = 67240704;
    HIDWORD(buf[0]) = v163;
    LOWORD(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 2) = v78;
    HIWORD(buf[1]) = 2050;
    buf[2] = v79;
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "BaroAlt,isApproToCal,%{public}d,fInEmergencyState,%{public}d,fLastBaroAltimeterSubscribeTime,%{public}.3f", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v114 = *((unsigned __int8 *)a1 + 2156);
    v115 = a1[58];
    v166 = 67240704;
    *(_DWORD *)v167 = v163;
    *(_WORD *)&v167[4] = 1026;
    *(_DWORD *)&v167[6] = v114;
    *(_WORD *)v168 = 2050;
    *(_QWORD *)&v168[2] = v115;
    LODWORD(v158) = 24;
    v116 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,isApproToCal,%{public}d,fInEmergencyState,%{public}d,fLastBaroAltimeterSubscribeTime,%{public}.3f", &v166, v158);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v116);
    if (v116 != (char *)buf)
      free(v116);
  }
  if (v3[4] != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v80 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v81 = 236;
    if (!*((_BYTE *)a1 + 237))
      v81 = 360;
    v82 = *((unsigned __int8 *)a1 + v81);
    v83 = a1[187];
    v84 = a1[55];
    v85 = a1[56];
    v86 = *(_QWORD *)(a3 + 384);
    v87 = (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1;
    v88 = *(_QWORD *)(a2 + 28);
    v89 = *(_QWORD *)(a2 + 36);
    v90 = *(_QWORD *)(a2 + 52);
    v91 = *(_QWORD *)(a2 + 44);
    v92 = *(_QWORD *)(a3 + 592);
    v93 = *(_QWORD *)(a3 + 24);
    v94 = a1[54];
    LODWORD(buf[0]) = 134352897;
    *(double *)((char *)buf + 4) = v165;
    WORD2(buf[1]) = 2049;
    *(_QWORD *)((char *)&buf[1] + 6) = v83;
    HIWORD(buf[2]) = 2049;
    buf[3] = v94;
    LOWORD(buf[4]) = 1025;
    *(_DWORD *)((char *)&buf[4] + 2) = v82;
    HIWORD(buf[4]) = 2049;
    v186 = v85;
    v187 = 2049;
    v188 = v162;
    v189 = 2049;
    v190 = v86;
    v191 = 1025;
    *(_DWORD *)v192 = v87;
    *(_WORD *)&v192[4] = 2049;
    *(_QWORD *)&v192[6] = v88;
    *(_WORD *)&v192[14] = 2049;
    *(_QWORD *)&v192[16] = v89;
    *(_WORD *)&v192[24] = 1025;
    *(_DWORD *)&v192[26] = v163;
    *(_WORD *)v193 = 2049;
    *(_QWORD *)&v193[2] = v90;
    *(_WORD *)v194 = 2049;
    *(_QWORD *)&v194[2] = v91;
    v195 = 2050;
    v196 = v92;
    v197 = 2049;
    v198 = v93;
    v199 = 2049;
    v200 = v84;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "BaroAlt,baroKFinput,time,%{public}lf,refPressure,%{private}.3lf,measPressure,%{private}.3lf,isRefPresAvail,%{private}d,fTimeOfLastDevicePressure_s,%{private}.3lf,calibrationSourceAlt,%{private}.3lf,calibrationSourceAltUnc,%{private}.3lf,isLocationTypeGPS,%{private}d,alt,%{private}.3lf,altUnc,%{private}.3lf,isApproToCalib,%{private}d,speedAccuracy,%{private}.3lf,speed,%{private}.3lf,pOutdoor,%{public}.3lf,cfAbsTime,%{private}.3lf,temperature,%{private}.2lf", (uint8_t *)buf, 0x96u);
  }
  if (!sub_1001BFF7C(115, 2))
  {
    if (!v49)
      goto LABEL_100;
    goto LABEL_99;
  }
  bzero(buf, 0x65CuLL);
  if (v3[4] != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v117 = 236;
  if (!*((_BYTE *)a1 + 237))
    v117 = 360;
  v118 = *((unsigned __int8 *)a1 + v117);
  v119 = a1[187];
  v120 = a1[55];
  v121 = a1[56];
  v122 = *(_QWORD *)(a3 + 384);
  v123 = (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1;
  v124 = *(_QWORD *)(a2 + 28);
  v125 = *(_QWORD *)(a2 + 36);
  v126 = *(_QWORD *)(a2 + 52);
  v127 = *(_QWORD *)(a2 + 44);
  v128 = *(_QWORD *)(a3 + 592);
  v129 = *(_QWORD *)(a3 + 24);
  v130 = a1[54];
  v166 = 134352897;
  *(double *)v167 = v165;
  *(_WORD *)&v167[8] = 2049;
  *(_QWORD *)v168 = v119;
  *(_WORD *)&v168[8] = 2049;
  *(_QWORD *)&v168[10] = v130;
  *(_WORD *)&v168[18] = 1025;
  *(_DWORD *)&v168[20] = v118;
  v169 = 2049;
  v170 = v121;
  v171 = 2049;
  v172 = v162;
  v173 = 2049;
  v174 = v122;
  v175 = 1025;
  *(_DWORD *)v176 = v123;
  *(_WORD *)&v176[4] = 2049;
  *(_QWORD *)&v176[6] = v124;
  *(_WORD *)&v176[14] = 2049;
  *(_QWORD *)&v176[16] = v125;
  *(_WORD *)&v176[24] = 1025;
  *(_DWORD *)&v176[26] = v163;
  *(_WORD *)v177 = 2049;
  *(_QWORD *)&v177[2] = v126;
  *(_WORD *)v178 = 2049;
  *(_QWORD *)&v178[2] = v127;
  v179 = 2050;
  v180 = v128;
  v181 = 2049;
  v182 = v129;
  v183 = 2049;
  v184 = v120;
  LODWORD(v158) = 150;
  v131 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,baroKFinput,time,%{public}lf,refPressure,%{private}.3lf,measPressure,%{private}.3lf,isRefPresAvail,%{private}d,fTimeOfLastDevicePressure_s,%{private}.3lf,calibrationSourceAlt,%{private}.3lf,calibrationSourceAltUnc,%{private}.3lf,isLocationTypeGPS,%{private}d,alt,%{private}.3lf,altUnc,%{private}.3lf,isApproToCalib,%{private}d,speedAccuracy,%{private}.3lf,speed,%{private}.3lf,pOutdoor,%{public}.3lf,cfAbsTime,%{private}.3lf,temperature,%{private}.2lf", &v166, v158);
  sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v131);
  if (v131 != (char *)buf)
    free(v131);
  if (v49)
  {
LABEL_99:
    v95 = *(float64x2_t *)(a2 + 44);
    *v26 = *(_OWORD *)(a2 + 4);
    v96.f64[0] = v162;
    v96.f64[1] = *(float64_t *)(a3 + 384);
    *(float32x4_t *)((char *)a1 + 1300) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v95), v96);
    *(float *)v95.f64 = *(double *)(a2 + 20);
    *((_DWORD *)a1 + 322) = LODWORD(v95.f64[0]);
    a1[166] = 0;
    sub_1017CE3CC((uint64_t)a1, (uint64_t)(a1 + 156), 1, 1);
    *((_OWORD *)a1 + 78) = 0u;
    *v26 = 0u;
    *(_OWORD *)(a1 + 161) = 0u;
    *(_OWORD *)((char *)a1 + 1300) = 0u;
    *(_BYTE **)((char *)a1 + 1324) = (_BYTE *)0xFFFFFFFF00000000;
    *((_DWORD *)a1 + 333) = -1;
    *((_WORD *)a1 + 668) = 0;
    *((_BYTE *)a1 + 1338) = 0;
  }
LABEL_100:
  v97 = 236;
  if (!*((_BYTE *)a1 + 237))
    v97 = 360;
  if (*((_BYTE *)a1 + v97)
    && *((double *)a1 + 60) > 0.0
    && vabdd_f64(*((double *)a1 + 61), v165) <= 2.22044605e-16
    && *a1
    && fabs(sub_1000B7150(v165, *((double *)a1 + 194), 315360000.0)) >= 120.0)
  {
    if (v3[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v98 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "BaroAlt,query ref pressure for cal", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      LOWORD(v166) = 0;
      LODWORD(v158) = 2;
      v157 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,query ref pressure for cal", &v166, v158);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateAltitude(CLDaemonLocation &, CLDaemonLocationPrivate &)", "%s\n", v157);
      if (v157 != (char *)buf)
        free(v157);
    }
    sub_1017D00F8((uint64_t)a1, a2);
  }
  if (*((double *)a1 + 60) > 0.0 && vabdd_f64(*((double *)a1 + 61), v165) <= 2.22044605e-16)
  {
    sub_1017D0B9C((uint64_t)a1, a2, v165, v162);
    sub_1017D0DCC((uint64_t)a1);
  }
  if (*a1)
  {
    v99 = 268;
    if (!*((_BYTE *)a1 + 269))
      v99 = 372;
    if (sub_10015CF80((uint64_t)*a1, (uint64_t)(a1 + 197), (double *)a1 + 253, (uint64_t)(a1 + 1), (float32x2_t *)a1 + 156, (uint64_t)(a1 + 439), (uint64_t)(a1 + 443), (uint64_t)(a1 + 447), (double *)a1 + 59, (double *)a1 + 60, (double *)a1 + 61, (uint64_t)(a1 + 153), (uint64_t)(a1 + 298), *((_BYTE *)a1 + v99), 1u))
    {
      if (v49)
      {
        v100 = *(_OWORD *)(a1 + 255);
        *(_OWORD *)(a1 + 259) = *(_OWORD *)(a1 + 253);
        *(_OWORD *)(a1 + 261) = v100;
        *(_OWORD *)(a1 + 263) = *(_OWORD *)(a1 + 257);
      }
      return 1;
    }
  }
  if (v3[4] != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v101 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v102 = *((unsigned __int8 *)a1 + 520);
    v103 = *(_QWORD *)(a3 + 376);
    v104 = *(_QWORD *)(a3 + 384);
    v105 = *(_BYTE **)(a2 + 28);
    v106 = *(double *)(a2 + 36);
    v107 = *(_QWORD *)(a2 + 20);
    v108 = a1[59];
    v109 = a1[60];
    v110 = a1[61];
    v111 = a1[155];
    v112 = a1[153];
    LODWORD(buf[0]) = 134351873;
    *(double *)((char *)buf + 4) = v165;
    WORD2(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 6) = v102;
    WORD1(buf[2]) = 2049;
    *(_QWORD *)((char *)&buf[2] + 4) = v103;
    WORD2(buf[3]) = 2050;
    *(_QWORD *)((char *)&buf[3] + 6) = v104;
    HIWORD(buf[4]) = 2049;
    v186 = v105;
    v187 = 2050;
    v188 = v106;
    v189 = 2050;
    v190 = v107;
    v191 = 2049;
    *(_QWORD *)v192 = v108;
    *(_WORD *)&v192[8] = 2050;
    *(_QWORD *)&v192[10] = v109;
    *(_WORD *)&v192[18] = 2050;
    *(_QWORD *)&v192[20] = v110;
    *(_WORD *)&v192[28] = 2049;
    *(_QWORD *)v193 = v111;
    *(_WORD *)&v193[8] = 2050;
    *(_QWORD *)v194 = v112;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEBUG, "BaroAlt,no action,time,%{public}lf,subscribedToOdom,%{public}d,demAlt,%{private}lf,unc,%{public}lf,alt,%{private}lf,altUnc,%{public}lf,horUnc,%{public}lf,baseAlt,%{private}lf,unc,%{public}lf,fTimeOfLastBaseAltitudeCalibration,%{public}lf,relAlt,%{private}lf,fTimeOfLastOdometerData,%{public}.4lf", (uint8_t *)buf, 0x76u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (v3[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v132 = *((unsigned __int8 *)a1 + 520);
    v133 = *(_QWORD *)(a3 + 376);
    v134 = *(_QWORD *)(a3 + 384);
    v135 = *(_BYTE **)(a2 + 28);
    v136 = *(double *)(a2 + 36);
    v137 = *(_QWORD *)(a2 + 20);
    v138 = a1[59];
    v139 = a1[60];
    v140 = a1[61];
    v141 = a1[155];
    v142 = a1[153];
    v166 = 134351873;
    *(double *)v167 = v165;
    *(_WORD *)&v167[8] = 1026;
    *(_DWORD *)v168 = v132;
    *(_WORD *)&v168[4] = 2049;
    *(_QWORD *)&v168[6] = v133;
    *(_WORD *)&v168[14] = 2050;
    *(_QWORD *)&v168[16] = v134;
    v169 = 2049;
    v170 = v135;
    v171 = 2050;
    v172 = v136;
    v173 = 2050;
    v174 = v137;
    v175 = 2049;
    *(_QWORD *)v176 = v138;
    *(_WORD *)&v176[8] = 2050;
    *(_QWORD *)&v176[10] = v139;
    *(_WORD *)&v176[18] = 2050;
    *(_QWORD *)&v176[20] = v140;
    *(_WORD *)&v176[28] = 2049;
    *(_QWORD *)v177 = v141;
    *(_WORD *)&v177[8] = 2050;
    *(_QWORD *)v178 = v142;
    LODWORD(v158) = 118;
    v25 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,no action,time,%{public}lf,subscribedToOdom,%{public}d,demAlt,%{private}lf,unc,%{public}lf,alt,%{private}lf,altUnc,%{public}lf,horUnc,%{public}lf,baseAlt,%{private}lf,unc,%{public}lf,fTimeOfLastBaseAltitudeCalibration,%{public}lf,relAlt,%{private}lf,fTimeOfLastOdometerData,%{public}.4lf", &v166, v158);
    goto LABEL_148;
  }
  return result;
}

void sub_10015C3F8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  unsigned int v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  double v10;
  double v11;
  _BOOL4 v13;
  double v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  float v25;
  _BOOL4 v26;
  float v27;
  uint64_t i;
  void *v29;
  int v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  double v41;
  const char *v42;
  uint8_t *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  uint64_t v57[3];
  int v58;
  uint64_t v59;
  _BYTE v60[24];
  int v61;
  __int16 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void **v66;
  char v67;
  char *v68;
  _BYTE *v69;
  char *v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  double v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  int v96;
  __int16 v97;
  double v98;
  uint8_t buf[8];
  _BYTE v100[6];
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  _BYTE v104[10];
  uint64_t v105;
  __int16 v106;
  double v107;
  __int16 v108;
  int v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  _BYTE v114[12];
  uint64_t v115;
  __int16 v116;
  int v117;
  __int16 v118;
  int v119;
  _BYTE v120[12];
  uint64_t v121;
  __int16 v122;
  int v123;
  __int16 v124;
  double v125;
  int v126;
  uint64_t v127;

  v5 = a1 + 1960;
  v6 = *(_DWORD *)(a2 + 96);
  v7 = (v6 & 0xFFFFFFF7) == 1 && *(_BYTE *)(a1 + 5080) != 0;
  v8 = v6 == 4 || v6 == 11;
  if (!v8 && !v7 && (v6 > 0xA || ((1 << v6) & 0x5C0) == 0))
    return;
  *(_QWORD *)(a1 + 1944) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1960) = 0;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1968) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 1984) = 0;
  *(_QWORD *)(a1 + 1976) = 0;
  *(_QWORD *)(a1 + 1992) = 0xBFF0000000000000;
  v9 = sub_100B303DC();
  *(_DWORD *)buf = 1;
  *(double *)(a1 + 1944) = sub_100B30608(v9, buf);
  *(_OWORD *)v5 = *(_OWORD *)(a2 + 28);
  v59 = 0;
  *(_QWORD *)v60 = 0;
  *(_OWORD *)&v60[8] = xmmword_101BAFC90;
  v61 = -1;
  v62 = 0;
  v63 = 0u;
  v64 = 0u;
  v65 = 0;
  *(_BYTE *)(a1 + 1936) = 0;
  if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 288) + 240))(*(_QWORD *)(a1 + 288), &v59))return;
  v10 = *(double *)(a2 + 36);
  if (v10 <= 0.0 || (!v7 | a3) != 1 || (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v11 = *(double *)&v60[8];
    v13 = *(double *)&v60[8] > 0.0 && (*(_QWORD *)&v60[8] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    v14 = 20.0;
LABEL_24:
    if (v11 >= v14)
      v13 = 0;
    v55 = v13;
    goto LABEL_27;
  }
  if (v10 >= *((double *)sub_10012A448() + 44))
  {
    v11 = *(double *)&v60[8];
    v13 = *(double *)&v60[8] > 0.0 && (*(_QWORD *)&v60[8] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (*(double *)&v60[8] >= 20.0)
      v13 = 0;
    v14 = *(double *)(a2 + 36);
    goto LABEL_24;
  }
  v55 = 0;
LABEL_27:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v15 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v16 = *(_DWORD *)(a2 + 96);
    v17 = *(_QWORD *)(a2 + 504);
    v18 = *(_QWORD *)(a2 + 28);
    v19 = *(_QWORD *)(a2 + 36);
    v20 = *(float *)(a2 + 476);
    v21 = *(_DWORD *)(a2 + 472);
    v22 = v59;
    v44 = *(_OWORD *)v60;
    v45 = *(_QWORD *)&v60[16];
    v47 = v61;
    v49 = *(unsigned __int8 *)(v5 + 3120);
    v51 = *(_QWORD *)(a2 + 704);
    v53 = *(_QWORD *)(a2 + 712);
    v23 = sub_100B303DC();
    v24 = sub_100B309E0(v23);
    *(_DWORD *)buf = 67244289;
    *(_DWORD *)&buf[4] = v55;
    *(_WORD *)v100 = 1026;
    *(_DWORD *)&v100[2] = v16;
    v101 = 2050;
    v102 = v17;
    v103 = 2049;
    *(_QWORD *)v104 = v18;
    *(_WORD *)&v104[8] = 2050;
    v105 = v19;
    v106 = 2050;
    v107 = v20;
    v108 = 1026;
    v109 = v21;
    v110 = 2050;
    v111 = v22;
    v112 = 2049;
    v113 = v44;
    *(_WORD *)v114 = 2050;
    *(_QWORD *)&v114[2] = *((_QWORD *)&v44 + 1);
    *(_WORD *)&v114[10] = 2050;
    v115 = v45;
    v116 = 1026;
    v117 = v47;
    v118 = 1026;
    v119 = v49;
    *(_WORD *)v120 = 2049;
    *(_QWORD *)&v120[2] = v51;
    *(_WORD *)&v120[10] = 2050;
    v121 = v53;
    v122 = 1026;
    v123 = a3;
    v124 = 2050;
    v125 = v24;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BaroAlt,updateAltIfApprprt,success,%{public}d,type,%{public}d,locMachContTime,%{public}lf,altPrior,%{private}.3lf,altUncPrior,%{public}.3lf,undulationPrior,%{public}.3lf,undulationModelPrior,%{public}d,baroAltApplicableTime,%{public}lf,baroAltVal,%{private}.3lf, baroAltUnc,%{public}.3lf,undulation,%{public}.3lf, undulationModel,%{public}d,emergency,%{public}d,rawAlt,%{private}.3lf,rawAltUnc,%{public}.3lf,isOverridenByWiFiZ,%{public}d,propagation_us,%{public}.3f", buf, 0x94u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v31 = *(_DWORD *)(a2 + 96);
    v32 = *(char **)(a2 + 504);
    v33 = *(_QWORD *)(a2 + 28);
    v34 = *(_QWORD *)(a2 + 36);
    v35 = *(float *)(a2 + 476);
    v36 = *(_DWORD *)(a2 + 472);
    v37 = v59;
    v38 = *(_OWORD *)v60;
    v46 = *(_QWORD *)&v60[16];
    v48 = v61;
    v39 = *(unsigned __int8 *)(v5 + 3120);
    v50 = *(_QWORD *)(a2 + 704);
    v52 = *(_QWORD *)(a2 + 712);
    v54 = qword_1022A0028;
    v40 = sub_100B303DC();
    v41 = sub_100B309E0(v40);
    LODWORD(v68) = 67244289;
    HIDWORD(v68) = v55;
    LOWORD(v69) = 1026;
    *(_DWORD *)((char *)&v69 + 2) = v31;
    HIWORD(v69) = 2050;
    v70 = v32;
    v71 = 2049;
    v72 = v33;
    v73 = 2050;
    v74 = v34;
    v75 = 2050;
    v76 = v35;
    v77 = 1026;
    v78 = v36;
    v79 = 2050;
    v80 = v37;
    v81 = 2049;
    v82 = v38;
    v83 = 2050;
    v84 = *((_QWORD *)&v38 + 1);
    v85 = 2050;
    v86 = v46;
    v87 = 1026;
    v88 = v48;
    v89 = 1026;
    v90 = v39;
    v91 = 2049;
    v92 = v50;
    v93 = 2050;
    v94 = v52;
    v95 = 1026;
    v96 = a3;
    v97 = 2050;
    v98 = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 2, "BaroAlt,updateAltIfApprprt,success,%{public}d,type,%{public}d,locMachContTime,%{public}lf,altPrior,%{private}.3lf,altUncPrior,%{public}.3lf,undulationPrior,%{public}.3lf,undulationModelPrior,%{public}d,baroAltApplicableTime,%{public}lf,baroAltVal,%{private}.3lf, baroAltUnc,%{public}.3lf,undulation,%{public}.3lf, undulationModel,%{public}d,emergency,%{public}d,rawAlt,%{private}.3lf,rawAltUnc,%{public}.3lf,isOverridenByWiFiZ,%{public}d,propagation_us,%{public}.3f", &v68, 148);
    v43 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::updateAltitudeWithBaroIfAppropriate(CLLocationProvider_Type::NotificationData &, const BOOL)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  if (v55)
  {
    *(_OWORD *)(a2 + 704) = *(_OWORD *)(a2 + 28);
    *(double *)(a2 + 720) = *(float *)(a2 + 476);
    *(_DWORD *)(a2 + 728) = *(_DWORD *)(a2 + 472);
    *(_OWORD *)(a2 + 28) = *(_OWORD *)v60;
    v25 = *(double *)&v60[16];
    *(float *)(a2 + 476) = v25;
    *(_DWORD *)(a2 + 472) = v61;
    *(_BYTE *)(a1 + 1936) = 1;
    v58 = 0;
    v26 = sub_1001594F4((float64_t *)(a2 + 4), (double *)(a2 + 12), &v58);
    *(_DWORD *)buf = 184;
    *(_DWORD *)v100 = 100;
    v27 = *(double *)(a2 + 36);
    *(_DWORD *)&v104[6] = 0;
    HIDWORD(v105) = 185;
    *(float *)((char *)&v107 + 2) = v27;
    LODWORD(v113) = 4;
    *(_DWORD *)v114 = 187;
    *(float *)&v114[8] = v27;
    *(_DWORD *)v120 = 4;
    *(_DWORD *)&v120[8] = 189;
    HIDWORD(v121) = v26;
    v126 = 0;
    v69 = 0;
    v70 = 0;
    v68 = 0;
    v66 = (void **)&v68;
    v67 = 0;
    v68 = (char *)operator new(0xA0uLL);
    v69 = v68;
    v70 = v68 + 160;
    v69 = (_BYTE *)sub_1006AB40C((uint64_t)&v70, (uint64_t)buf, (uint64_t)&v127, (uint64_t)v68);
    for (i = 128; i != -32; i -= 40)
      sub_1001F8644((uint64_t)&buf[i]);
    v29 = *(void **)(a1 + 5096);
    memset(v57, 0, sizeof(v57));
    sub_1006AB68C(v57, (uint64_t)v68, (uint64_t)v69, 0xCCCCCCCCCCCCCCCDLL * ((v69 - v68) >> 3));
    objc_msgSend(v29, "setMeasurements:", sub_1006A7590(v57));
    *(_QWORD *)buf = v57;
    sub_1006AB5A0((void ***)buf);
    *(_QWORD *)buf = &v68;
    sub_1006AB5A0((void ***)buf);
  }
}

void sub_10015CAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void **a55)
{
  a55 = (void **)&a35;
  sub_1006AB5A0(&a55);
  _Unwind_Resume(a1);
}

BOOL sub_10015CB38(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;

  return *(_BYTE *)(a1 + 2808) && (v2 = *(_QWORD *)(a1 + 2800)) != 0 && sub_10015CB58(v2, a2, 0);
}

BOOL sub_10015CB58(uint64_t a1, _OWORD *a2, int a3)
{
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  BOOL v13;
  _BOOL8 v14;
  double v15;
  double v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  int v37;
  double v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  double v56;
  __int16 v57;
  _BOOL4 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  int v72;

  v6 = sub_1001FCBB4();
  v36 = v6;
  if (*(_QWORD *)a1)
  {
    v7 = v6;
    if (fabs(sub_1000B7150(v6, *(double *)(a1 + 8), 315360000.0)) > 3.0)
    {
      sub_10015DE50(a1, a1 + 2384, v7);
      v8 = *(_QWORD *)a1;
      v9 = 236;
      if (!*(_BYTE *)(a1 + 237))
        v9 = 360;
      buf[0] = *(_BYTE *)(a1 + v9);
      sub_10015E03C(v8, &v36, a1 + 1576, (_QWORD *)(a1 + 1488), (_QWORD *)(a1 + 1496), (_QWORD *)(a1 + 1504), (_QWORD *)(a1 + 1224), buf, (_QWORD *)(a1 + 432), (_QWORD *)(a1 + 1240), (_QWORD *)(a1 + 448));
      v10 = 268;
      if (!*(_BYTE *)(a1 + 269))
        v10 = 372;
      sub_10015CF80(*(_QWORD *)a1, a1 + 1576, (double *)(a1 + 2024), a1 + 8, (float32x2_t *)(a1 + 1248), a1 + 3512, a1 + 3544, a1 + 3576, (double *)(a1 + 472), (double *)(a1 + 480), (double *)(a1 + 488), a1 + 1224, a1 + 2384, *(_BYTE *)(a1 + v10), 0);
    }
  }
  v11 = (double *)(a1 + 8);
  v12 = *(double *)(a1 + 24);
  v14 = (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
     && (v12 > 0.0 ? (v13 = v12 < 30.0) : (v13 = 0), v13 && *(_QWORD *)a1)
     && sub_1000B7150(v36, *v11, 315360000.0) < 3.0;
  v15 = *(double *)(a1 + 2144);
  if (v15 > 0.0)
  {
    v16 = *(double *)(a1 + 2136);
    if (v16 > *(double *)(a1 + 48))
    {
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 2120);
      *(double *)(a1 + 64) = v15;
      *(double *)(a1 + 48) = v16;
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v17 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 24);
    v22 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(a1 + 64);
    v23 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134351104;
    v56 = v36;
    v57 = 1026;
    v58 = v14;
    v59 = 2050;
    v60 = v18;
    v61 = 2050;
    v62 = v19;
    v63 = 2050;
    v64 = v20;
    v65 = 2050;
    v66 = v22;
    v67 = 2050;
    v68 = v21;
    v69 = 2050;
    v70 = v23;
    v71 = 1026;
    v72 = a3;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "BaroAlt,query of calibrated baro alt,time,%{public}.3lf,isYieldingRPA,%{public}d,applicableTime,%{public}.3lf,altitude,%{public}.3lf,altitudeUnc,%{public}.3lf,bias_pa,%{public}.3lf,biasUnc_m,%{public}.3lf,biasTimestampCFAbs_s,%{public}.3lf,internal,%{public}d", buf, 0x54u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v28 = *(_QWORD *)(a1 + 8);
    v29 = *(_QWORD *)(a1 + 16);
    v30 = *(_QWORD *)(a1 + 24);
    v32 = *(_QWORD *)(a1 + 56);
    v31 = *(_QWORD *)(a1 + 64);
    v33 = *(_QWORD *)(a1 + 48);
    v37 = 134351104;
    v38 = v36;
    v39 = 1026;
    v40 = v14;
    v41 = 2050;
    v42 = v28;
    v43 = 2050;
    v44 = v29;
    v45 = 2050;
    v46 = v30;
    v47 = 2050;
    v48 = v32;
    v49 = 2050;
    v50 = v31;
    v51 = 2050;
    v52 = v33;
    v53 = 1026;
    v54 = a3;
    LODWORD(v35) = 84;
    v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,query of calibrated baro alt,time,%{public}.3lf,isYieldingRPA,%{public}d,applicableTime,%{public}.3lf,altitude,%{public}.3lf,altitudeUnc,%{public}.3lf,bias_pa,%{public}.3lf,biasUnc_m,%{public}.3lf,biasTimestampCFAbs_s,%{public}.3lf,internal,%{public}d", &v37, v35);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::getCalibratedBaroAltitude(CLBarometricAltimeterCore::AltitudeUpdateData &, const BOOL)", "%s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
  *a2 = *(_OWORD *)v11;
  v24 = *(_OWORD *)(a1 + 24);
  v25 = *(_OWORD *)(a1 + 40);
  v26 = *(_OWORD *)(a1 + 72);
  a2[3] = *(_OWORD *)(a1 + 56);
  a2[4] = v26;
  a2[1] = v24;
  a2[2] = v25;
  return v14;
}

BOOL sub_10015CF80(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, float32x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9, double *a10, double *a11, uint64_t a12, uint64_t a13, char a14, unsigned __int8 a15)
{
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  _BOOL8 result;
  const char *v26;
  int v27;
  NSObject *v28;
  float v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float32x2_t v33;
  double v34;
  float32_t v35;
  float32_t v36;
  float32_t v37;
  float32_t v38;
  _BOOL4 v39;
  uint64_t *v40;
  NSObject *v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  int v47;
  double v48;
  NSObject *v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  NSObject *v65;
  uint64_t v66;
  int v67;
  double v68;
  int v69;
  NSObject *v70;
  NSObject *v71;
  char *v72;
  char *v73;
  char *v74;
  double v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  double v97;
  double v98;
  int v99;
  double v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  int v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  _QWORD buf[4];
  _BYTE v140[10];
  __int16 v141;
  double v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v22 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 67109120;
    HIDWORD(buf[0]) = a15;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "BaroAlt,queried,internal,%d", (uint8_t *)buf, 8u);
  }
  v23 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v23)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v99 = 67109120;
    LODWORD(v100) = a15;
    v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,queried,internal,%d", &v99);
    v23 = sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calcCalibratedBaroAltitude(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, AltitudeUpdateData &, CalibratedPressureCollectionDataBase &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, double &, double &, CFTimeInterval &, const CFTimeInterval &, const CLDaemonLocation &, const BOOL, const BOOL)", "%s\n", v72);
    if (v72 != (char *)buf)
      free(v72);
  }
  if (*a10 > 0.0 || *a3 > 0.0)
  {
    v97 = -1.0;
    v98 = 0.0;
    v95 = 0.0;
    v96 = 0;
    v93 = 0;
    v94 = -1.0;
    if (*(_BYTE *)(a2 + 112))
    {
      if (sub_1017426EC(v23, (double *)a2))
        v27 = sub_101749A14(a1, a2, (uint64_t)a3, &v98, &v97, &v96);
      else
        v27 = 0;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v28 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf[0]) = 67109120;
        HIDWORD(buf[0]) = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "BaroAlt,calibrated,refPressure,success,%d", (uint8_t *)buf, 8u);
      }
      v23 = sub_1001BFF7C(115, 2);
      if ((_DWORD)v23)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v99 = 67109120;
        LODWORD(v100) = v27;
        v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,calibrated,refPressure,success,%d", &v99);
        v23 = sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calcCalibratedBaroAltitude(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, AltitudeUpdateData &, CalibratedPressureCollectionDataBase &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, double &, double &, CFTimeInterval &, const CFTimeInterval &, const CLDaemonLocation &, const BOOL, const BOOL)", "%s\n", v74);
        if (v74 != (char *)buf)
          free(v74);
      }
      if (v27)
      {
        v29 = *(double *)(a2 + 264);
        a5->f32[0] = v29;
        a5->i32[1] = 1075838976;
        if (*(_BYTE *)(a1 + 668))
        {
          *(_QWORD *)v140 = 0;
          memset(buf, 0, sizeof(buf));
          v23 = sub_101745ADC(a1, buf);
          if ((_DWORD)v23)
          {
            v30 = (float64x2_t)vdupq_n_s64(0x402800A915379FA9uLL);
            v31 = vmulq_f64(*(float64x2_t *)&buf[1], v30);
            v30.f64[0] = a5->f32[0];
            *(_QWORD *)&v32.f64[0] = *(_OWORD *)&vsubq_f64(v30, *(float64x2_t *)&buf[1]);
            v32.f64[1] = v31.f64[1];
            v33 = vcvt_f32_f64(v32);
          }
          else
          {
            v33 = (float32x2_t)0xBF80000000000000;
          }
          a5[1] = v33;
          v34 = v97;
        }
        else
        {
          v34 = v97;
          v35 = v97 * 12.00129;
          a5[1].f32[1] = v35;
          v36 = v29 - a3[1];
          a5[1].f32[0] = v36;
        }
        v37 = v98;
        v38 = v34;
        a5[5].f32[1] = v37;
        a5[6].f32[0] = v38;
        ++*(_DWORD *)(a6 + 16);
        ++*(_DWORD *)(a7 + 16);
        ++*(_DWORD *)(a8 + 16);
      }
    }
    v39 = sub_101749658(v23, a2, a9, a10, &v95, &v94, &v93, a11);
    v40 = &qword_1022A0000;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v41 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf[0]) = 67109120;
      HIDWORD(buf[0]) = v39;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "BaroAlt,calibrated,dem,success,%d", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v99 = 67109120;
      LODWORD(v100) = v39;
      v73 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,calibrated,dem,success,%d", &v99);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calcCalibratedBaroAltitude(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, AltitudeUpdateData &, CalibratedPressureCollectionDataBase &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, double &, double &, CFTimeInterval &, const CFTimeInterval &, const CLDaemonLocation &, const BOOL, const BOOL)", "%s\n", v73);
      if (v73 != (char *)buf)
        free(v73);
      v40 = &qword_1022A0000;
    }
    if (v39)
    {
      ++*(_DWORD *)(a6 + 12);
      ++*(_DWORD *)(a7 + 12);
      ++*(_DWORD *)(a8 + 12);
    }
    v42 = v97;
    if (a14 && v97 > 0.0)
    {
      v43 = v98;
      v44 = v96;
      v45 = a4;
      *(_BYTE *)(a4 + 36) = 1;
      v46 = v42;
    }
    else
    {
      v46 = v94;
      v45 = a4;
      if (v94 <= 0.0)
      {
        if (v40[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v71 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,no yield,no valid calibrated altitude is available", (uint8_t *)buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (v40[4] != -1)
            dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
          LOWORD(v99) = 0;
          v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,no yield,no valid calibrated altitude is available", &v99, 2);
          goto LABEL_108;
        }
        return result;
      }
      v43 = v95;
      v44 = v93;
      *(_BYTE *)(a4 + 37) = 1;
    }
    sub_10015EEBC(a1, a2, a13);
    v47 = *(_DWORD *)(a1 + 152);
    if ((v47 - 1) > 0xFFFFFFFD || (v48 = *(double *)(a1 + 144), fabs(v48) <= 2.22044605e-16))
    {
      if (v40[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v65 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v66 = *(_QWORD *)(a1 + 144);
        v67 = *(_DWORD *)(a1 + 152);
        LODWORD(buf[0]) = 134349312;
        *(_QWORD *)((char *)buf + 4) = v66;
        WORD2(buf[1]) = 1026;
        *(_DWORD *)((char *)&buf[1] + 6) = v67;
        _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,no yield,no undulation knowledge,und,%{public}.lf,undModel%{public}d", (uint8_t *)buf, 0x12u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (v40[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v68 = *(double *)(a1 + 144);
        v69 = *(_DWORD *)(a1 + 152);
        v99 = 134349312;
        v100 = v68;
        v101 = 1026;
        LODWORD(v102) = v69;
        v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,no yield,no undulation knowledge,und,%{public}.lf,undModel%{public}d", &v99, 18);
        goto LABEL_108;
      }
    }
    else
    {
      *(double *)(v45 + 8) = v43 - v48;
      *(double *)(v45 + 16) = v46;
      *(double *)(v45 + 24) = v48;
      *(_DWORD *)(v45 + 32) = v47;
      *(_QWORD *)v45 = v44;
      if (v40[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v49 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v50 = *(double *)(a2 + 64);
        v51 = *(_QWORD *)(a2 + 72);
        v52 = *a9;
        v53 = *a10;
        v54 = -1.0;
        if ((*(_QWORD *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v50) > 2.22044605e-16)
        {
          v55 = *a11;
          if ((*(_QWORD *)a11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v55) > 2.22044605e-16)
            v54 = vabdd_f64(v50, v55);
        }
        v57 = *(_QWORD *)(a2 + 256);
        v56 = *(_QWORD *)(a2 + 264);
        v58 = *(_QWORD *)(v45 + 8);
        v59 = *(_QWORD *)(v45 + 16);
        v60 = *(_QWORD *)(v45 + 24);
        v61 = *(_DWORD *)(v45 + 32);
        v62 = *(_QWORD *)(a13 + 4);
        v63 = *(_QWORD *)(a13 + 12);
        LODWORD(buf[0]) = 134353921;
        *(double *)((char *)buf + 4) = v50;
        WORD2(buf[1]) = 2050;
        *(_QWORD *)((char *)&buf[1] + 6) = v51;
        HIWORD(buf[2]) = 2049;
        *(double *)&buf[3] = v52;
        *(_WORD *)v140 = 2050;
        *(double *)&v140[2] = v53;
        v141 = 2050;
        v142 = v54;
        v143 = 2050;
        v144 = v56;
        v145 = 2050;
        v146 = v57;
        v147 = 2049;
        v148 = v58;
        v149 = 2050;
        v150 = v59;
        v151 = 2050;
        v152 = v44;
        v153 = 2049;
        v154 = v98;
        v155 = 2050;
        v156 = v42;
        v157 = 2049;
        v158 = v95;
        v159 = 2050;
        v160 = v94;
        v161 = 2049;
        v162 = v60;
        v163 = 1026;
        v164 = v61;
        v165 = 2049;
        v166 = v96;
        v167 = 2049;
        v168 = v93;
        v169 = 2049;
        v170 = v62;
        v171 = 2049;
        v172 = v63;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "BaroAlt,calibrated,time,%{public}.3lf,cfAbsTime,%{public}.3lf,baseAlt,%{private}.3lf,unc,%{public}.3lf,timeSinceBaseAlt,%{public}.3lf,pressure,%{public}.3lf,fTimeOfLastCMAltitudeData,%{public}.3lf,calibratedAlt,%{private}.3lf,calAltUnc,%{public}.3lf,applicableTime,%{public}.3lf,calibratedAltReferencePressure,%{private}.3lf,calAltUncReferencePressure,%{public}.3lf,calibratedAltDEM,%{private}.3lf,calAltUncDEM,%{public}.3lf,undulation,%{private}.3lf,undulationModel,%{public}d,refPresAltWgs84AppMachContTime,%{private}.3lf,demCalibAltWgs84AppMachContTime,%{private}.3lf,lat,%{private}.8lf,lon,%{private}.8lf", (uint8_t *)buf, 0xC6u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v40[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v75 = *(double *)(a2 + 64);
        v76 = *(_QWORD *)(a2 + 72);
        v77 = *a9;
        v78 = *a10;
        v79 = -1.0;
        if ((*(_QWORD *)&v75 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v75) > 2.22044605e-16)
        {
          v80 = *a11;
          if ((*(_QWORD *)a11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && fabs(v80) > 2.22044605e-16)
            v79 = vabdd_f64(v75, v80);
        }
        v82 = *(_QWORD *)(a2 + 256);
        v81 = *(_QWORD *)(a2 + 264);
        v45 = a4;
        v83 = *(_QWORD *)(a4 + 8);
        v84 = *(_QWORD *)(a4 + 16);
        v85 = *(_QWORD *)(a4 + 24);
        v86 = *(_DWORD *)(a4 + 32);
        v87 = *(_QWORD *)(a13 + 4);
        v88 = *(_QWORD *)(a13 + 12);
        v99 = 134353921;
        v100 = v75;
        v101 = 2050;
        v102 = v76;
        v103 = 2049;
        v104 = v77;
        v105 = 2050;
        v106 = v78;
        v107 = 2050;
        v108 = v79;
        v109 = 2050;
        v110 = v81;
        v111 = 2050;
        v112 = v82;
        v113 = 2049;
        v114 = v83;
        v115 = 2050;
        v116 = v84;
        v117 = 2050;
        v118 = v44;
        v119 = 2049;
        v120 = v98;
        v121 = 2050;
        v122 = v97;
        v123 = 2049;
        v124 = v95;
        v125 = 2050;
        v126 = v94;
        v127 = 2049;
        v128 = v85;
        v129 = 1026;
        v130 = v86;
        v131 = 2049;
        v132 = v96;
        v133 = 2049;
        v134 = v93;
        v135 = 2049;
        v136 = v87;
        v137 = 2049;
        v138 = v88;
        v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,calibrated,time,%{public}.3lf,cfAbsTime,%{public}.3lf,baseAlt,%{private}.3lf,unc,%{public}.3lf,timeSinceBaseAlt,%{public}.3lf,pressure,%{public}.3lf,fTimeOfLastCMAltitudeData,%{public}.3lf,calibratedAlt,%{private}.3lf,calAltUnc,%{public}.3lf,applicableTime,%{public}.3lf,calibratedAltReferencePressure,%{private}.3lf,calAltUncReferencePressure,%{public}.3lf,calibratedAltDEM,%{private}.3lf,calAltUncDEM,%{public}.3lf,undulation,%{private}.3lf,undulationModel,%{public}d,refPresAltWgs84AppMachContTime,%{private}.3lf,demCalibAltWgs84AppMachContTime,%{private}.3lf,lat,%{private}.8lf,lon,%{private}.8lf", &v99, 198);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calcCalibratedBaroAltitude(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, AltitudeUpdateData &, CalibratedPressureCollectionDataBase &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, double &, double &, CFTimeInterval &, const CFTimeInterval &, const CLDaemonLocation &, const BOOL, const BOOL)", "%s\n", v89);
        if (v89 != (char *)buf)
          free(v89);
      }
      if (*(double *)(v45 + 16) > 0.0)
      {
        v64 = *(double *)(v45 + 8);
        if (v64 > -450.0 && v64 < 8850.0)
          return 1;
      }
      if (v40[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v70 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_INFO, "BaroAlt,invalid calibrated altitude", (uint8_t *)buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (v40[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        LOWORD(v99) = 0;
        LODWORD(v91) = 2;
        v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,invalid calibrated altitude", &v99, v91);
        goto LABEL_108;
      }
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v24 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,not yet calibrated", (uint8_t *)buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      LOWORD(v99) = 0;
      v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,not yet calibrated", &v99, 2);
LABEL_108:
      v90 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calcCalibratedBaroAltitude(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, AltitudeUpdateData &, CalibratedPressureCollectionDataBase &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, BarometricAltitudeCalibrationAnalyticsData &, double &, double &, CFTimeInterval &, const CFTimeInterval &, const CLDaemonLocation &, const BOOL, const BOOL)", "%s\n", v26);
      if (v90 != (char *)buf)
        free(v90);
      return 0;
    }
  }
  return result;
}

void sub_10015DE50(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  NSObject *v6;
  char *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v3 = 236;
  if (!*(_BYTE *)(a1 + 237))
    v3 = 360;
  if (*(_BYTE *)(a1 + v3)
    && *(_BYTE *)(a1 + 2156)
    && *(_QWORD *)a1
    && sub_1000B7150(a3, *(double *)(a1 + 1552), 315360000.0) >= 120.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,query ref pressure during a e911 call", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      v8[0] = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,query ref pressure during a e911 call", v8, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressureIfInEmergencyCall(const CFTimeInterval, const CLDaemonLocation &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    sub_1017D00F8(a1, a2);
  }
}

void sub_10015E03C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _BYTE *a8, _QWORD *a9, _QWORD *a10, _QWORD *a11)
{
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint8_t buf[4];
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;

  *(_QWORD *)(a3 + 64) = *a2;
  v17 = a3 + 64;
  *(double *)(a3 + 72) = sub_1000B6F08(a1, (double *)(a3 + 64));
  *(_QWORD *)(v17 + 16) = *a4;
  *(_QWORD *)(v17 + 32) = *a5;
  *(_QWORD *)(v17 + 40) = *a6;
  *(_BYTE *)(v17 + 48) = *a8;
  *(_QWORD *)(v17 + 104) = *a10;
  *(_QWORD *)(v17 + 120) = *a7;
  *(_QWORD *)(v17 + 192) = *a11;
  *(_QWORD *)(v17 + 200) = *a9;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v18 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a3 + 72);
    v20 = *(_QWORD *)(a3 + 80);
    v21 = *(_QWORD *)(a3 + 96);
    v22 = *(_QWORD *)(a3 + 104);
    v23 = *(unsigned __int8 *)(a3 + 112);
    v24 = *(_QWORD *)(a3 + 168);
    v25 = *(_QWORD *)(a3 + 184);
    v26 = *(_QWORD *)(a3 + 256);
    v27 = *(_QWORD *)(a3 + 264);
    v28 = *(_QWORD *)(a3 + 64);
    *(_DWORD *)buf = 134285825;
    v61 = v28;
    v62 = 2049;
    v63 = v20;
    v64 = 2049;
    v65 = v21;
    v66 = 2049;
    v67 = v22;
    v68 = 1025;
    v69 = v23;
    v70 = 2049;
    v71 = v24;
    v72 = 2049;
    v73 = v25;
    v74 = 2049;
    v75 = v26;
    v76 = 2049;
    v77 = v27;
    v78 = 2049;
    v79 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "BaroAlt,MMKF,fillInput,machContTime_s,%{private}.3lf,refPressure_time_s,%{private}.3lf,refPressure_pa,%{private}.3lf,refPressure_unc_pa,%{private}.3lf,isReferencePressureAllowed,%{private}d,lastSignificantRelativeAlt_m,%{private}.2lf,timeOfLastOdometerData_s,%{private}.3lf,timeOfLastAltitudeData_s,%{private}.3lf,lastAltitudeDataPressure_pa,%{private}.3lf,cfAbsTime_s,%{private}.3lf", buf, 0x62u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v30 = *(_QWORD *)(a3 + 72);
    v29 = *(_QWORD *)(a3 + 80);
    v31 = *(_QWORD *)(a3 + 96);
    v32 = *(_QWORD *)(a3 + 104);
    v33 = *(unsigned __int8 *)(a3 + 112);
    v34 = *(_QWORD *)(a3 + 168);
    v35 = *(_QWORD *)(a3 + 184);
    v36 = *(_QWORD *)(a3 + 256);
    v37 = *(_QWORD *)(a3 + 264);
    v38 = *(_QWORD *)(a3 + 64);
    v40 = 134285825;
    v41 = v38;
    v42 = 2049;
    v43 = v29;
    v44 = 2049;
    v45 = v31;
    v46 = 2049;
    v47 = v32;
    v48 = 1025;
    v49 = v33;
    v50 = 2049;
    v51 = v34;
    v52 = 2049;
    v53 = v35;
    v54 = 2049;
    v55 = v36;
    v56 = 2049;
    v57 = v37;
    v58 = 2049;
    v59 = v30;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,MMKF,fillInput,machContTime_s,%{private}.3lf,refPressure_time_s,%{private}.3lf,refPressure_pa,%{private}.3lf,refPressure_unc_pa,%{private}.3lf,isReferencePressureAllowed,%{private}d,lastSignificantRelativeAlt_m,%{private}.2lf,timeOfLastOdometerData_s,%{private}.3lf,timeOfLastAltitudeData_s,%{private}.3lf,lastAltitudeDataPressure_pa,%{private}.3lf,cfAbsTime_s,%{private}.3lf", &v40, 98);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::fillInputToCalibrateBaroAlt(const CFTimeInterval &, CLBaroAltEstimatorInput &, const double &, const double &, const double &, const CFTimeInterval &, const BOOL &, const double &, const double &, const CFTimeInterval &)", "%s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
}

uint64_t sub_10015E344(uint64_t a1, double a2)
{
  uint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  double v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  double v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  double v23;
  __int16 v24;
  int v25;

  v13 = a2;
  if (*(double *)(a1 + 3344) < 2.22044605e-16)
    goto LABEL_8;
  v3 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_9;
  v4 = sub_1000B6F08(*(_QWORD *)a1, &v13);
  v5 = sub_1000B7150(v4, *(double *)(a1 + 3344), 315360000.0);
  if (*(_BYTE *)(a1 + 276))
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 272);
    v7 = (double)v6;
  }
  else
  {
    v7 = 259200.0;
  }
  if (v5 >= v7)
LABEL_8:
    v3 = 1;
  else
    v3 = 0;
LABEL_9:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v8 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 3344);
    *(_DWORD *)buf = 134349568;
    v21 = v9;
    v22 = 2050;
    v23 = v13;
    v24 = 1026;
    v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BaroAlt,BiasStalenessCheck,Time,%{public}.3lf,machContNow,%{public}.3lf,isStale,%{public}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v11 = *(_QWORD *)(a1 + 3344);
    v14 = 134349568;
    v15 = v11;
    v16 = 2050;
    v17 = v13;
    v18 = 1026;
    v19 = v3;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,BiasStalenessCheck,Time,%{public}.3lf,machContNow,%{public}.3lf,isStale,%{public}d", &v14, 28);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isBaroBiasHistoryStale(const CFTimeInterval) const", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  return v3;
}

BOOL sub_10015E5A0(_BYTE *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, double *a6, uint64_t *a7, uint64_t a8, uint64_t a9, double *a10, double *a11, uint64_t *a12, int a13)
{
  double v21;
  double v22;
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint8_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  double v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  uint8_t buf[4];
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  double v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  uint64_t v131;
  __int16 v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;

  sub_10015F8F0((uint64_t)a1, a2, a8, a9);
  v21 = sub_10015F508((uint64_t)a1, a2, a9, *(double *)(a8 + 76));
  *a10 = v21;
  *(double *)(a2 + 160) = v21;
  v22 = *(double *)(a9 + 384);
  if (v22 <= 0.0 || v22 >= 12.0 || *(_BYTE *)(a2 + 176) == 0)
  {
    a1[96] = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v25 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "BaroAlt,newCalibSessionStart,attempt DEM and reference weather calibrations,fail", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    LOWORD(v68) = 0;
    v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,newCalibSessionStart,attempt DEM and reference weather calibrations,fail", &v68, 2);
LABEL_40:
    v66 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calibrateBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, BarometricAltitudeComputeAWDData &, double &, double &, CLDaemonLocation &, CLDaemonLocationPrivate &, double &, CFTimeInterval &, const CFTimeInterval &, const int)", "%s\n", v26);
    if (v66 != buf)
      free(v66);
    return 0;
  }
  *(double *)(a2 + 120) = *a10;
  *a6 = *a10 - *(double *)(a2 + 168);
  *a7 = *(_QWORD *)(a9 + 384);
  *(double *)(a5 + 48) = *a11;
  *a11 = *(double *)(a2 + 64);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v27 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v28 = *(_QWORD *)(a2 + 64);
    v29 = *(_QWORD *)(a2 + 72);
    v30 = *a6;
    v31 = *a7;
    v32 = *(_QWORD *)(a8 + 28);
    v33 = *(_QWORD *)(a8 + 36);
    v34 = *(_QWORD *)(a8 + 4);
    v35 = *(_QWORD *)(a8 + 12);
    v36 = *(_QWORD *)(a8 + 60);
    v37 = *(_QWORD *)(a8 + 20);
    v38 = *(_QWORD *)(a2 + 168);
    v39 = *a12;
    v41 = *(_QWORD *)(a2 + 256);
    v40 = *(_QWORD *)(a2 + 264);
    v42 = *(_QWORD *)(a3 + 8);
    v43 = *(_QWORD *)(a2 + 96);
    v44 = *(_QWORD *)(a2 + 104);
    *(_DWORD *)buf = 134353153;
    v103 = v28;
    v104 = 2050;
    v105 = v29;
    v106 = 2049;
    v107 = v30;
    v108 = 2050;
    v109 = v31;
    v110 = 2049;
    v111 = v32;
    v112 = 2050;
    v113 = v33;
    v114 = 2049;
    v115 = v34;
    v116 = 2049;
    v117 = v35;
    v118 = 2050;
    v119 = v36;
    v120 = 2050;
    v121 = v37;
    v122 = 2049;
    v123 = v38;
    v124 = 2050;
    v125 = v39;
    v126 = 2049;
    v127 = v40;
    v128 = 2050;
    v129 = v41;
    v130 = 2049;
    v131 = v42;
    v132 = 2049;
    v133 = v43;
    v134 = 2049;
    v135 = v44;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "BaroAlt,calibrating,time,%{public}.lf,cfAbsTime,%{public}.3lf,baseAlt,%{private}.3lf,baseUnc,%{public}.3lf,alt,%{private}.3lf,altUnc,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,horUnc,%{public}.3lf,relAltOdom,%{private}.3lf,fTimeOfLastOdometerData,%{public}.4lf,pressure,%{private}.3lf,fTimeOfLastCMAltitudeData,%{public}.3lf,fBaroBiasUsingReferencePressure,%{private}.3lf,fReferencePressurePressure,%{private}.3lf,pressureUnc,%{private}.3lf", buf, 0xACu);
  }
  v45 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v45)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v48 = *(_QWORD *)(a2 + 64);
    v49 = *(_QWORD *)(a2 + 72);
    v50 = *a6;
    v51 = *a7;
    v52 = *(_QWORD *)(a8 + 28);
    v53 = *(_QWORD *)(a8 + 36);
    v54 = *(_QWORD *)(a8 + 4);
    v55 = *(_QWORD *)(a8 + 12);
    v56 = *(_QWORD *)(a8 + 60);
    v57 = *(_QWORD *)(a8 + 20);
    v58 = *(_QWORD *)(a2 + 168);
    v59 = *a12;
    v61 = *(_QWORD *)(a2 + 256);
    v60 = *(_QWORD *)(a2 + 264);
    v62 = *(_QWORD *)(a3 + 8);
    v63 = *(_QWORD *)(a2 + 96);
    v64 = *(_QWORD *)(a2 + 104);
    v68 = 134353153;
    v69 = v48;
    v70 = 2050;
    v71 = v49;
    v72 = 2049;
    v73 = v50;
    v74 = 2050;
    v75 = v51;
    v76 = 2049;
    v77 = v52;
    v78 = 2050;
    v79 = v53;
    v80 = 2049;
    v81 = v54;
    v82 = 2049;
    v83 = v55;
    v84 = 2050;
    v85 = v56;
    v86 = 2050;
    v87 = v57;
    v88 = 2049;
    v89 = v58;
    v90 = 2050;
    v91 = v59;
    v92 = 2049;
    v93 = v60;
    v94 = 2050;
    v95 = v61;
    v96 = 2049;
    v97 = v62;
    v98 = 2049;
    v99 = v63;
    v100 = 2049;
    v101 = v64;
    v65 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,calibrating,time,%{public}.lf,cfAbsTime,%{public}.3lf,baseAlt,%{private}.3lf,baseUnc,%{public}.3lf,alt,%{private}.3lf,altUnc,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,horUnc,%{public}.3lf,relAltOdom,%{private}.3lf,fTimeOfLastOdometerData,%{public}.4lf,pressure,%{private}.3lf,fTimeOfLastCMAltitudeData,%{public}.3lf,fBaroBiasUsingReferencePressure,%{private}.3lf,fReferencePressurePressure,%{private}.3lf,pressureUnc,%{private}.3lf", &v68, 172);
    v45 = sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeterCore::calibrateBaroBiasUsingReferencePressure(CLBaroAltEstimatorInput &, CLBaroAltEstimatorOutput &, std::deque<BaroBiasEstimate> &, BarometricAltitudeComputeAWDData &, double &, double &, CLDaemonLocation &, CLDaemonLocationPrivate &, double &, CFTimeInterval &, const CFTimeInterval &, const int)", "%s\n", v65);
    if (v65 != (char *)buf)
      free(v65);
  }
  if (!*(_BYTE *)(a2 + 112) || !sub_1017426EC(v45, (double *)a2))
  {
    a1[96] = 0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v47 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "BaroAlt,newCalibSessionStart,no valid device pressure or ref pressure feature disabled", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    LOWORD(v68) = 0;
    LODWORD(v67) = 2;
    v26 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,newCalibSessionStart,no valid device pressure or ref pressure feature disabled", &v68, v67);
    goto LABEL_40;
  }
  return (sub_101742930(a1, a2, a3, a4, a11, a13, a8) & 1) != 0;
}

void sub_10015EBF0(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  int v8;
  double *v9;
  double v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  double v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) != 1)
  {
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  v8 = 0;
  if ((*(_QWORD *)(a2 + 20) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(a2 + 20) > 0.0)
  {
    v8 = 0;
    if ((*(_QWORD *)(a2 + 76) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(a2 + 76) > 0.0)
    {
      v9 = (double *)sub_100B94758();
      v10 = *(double *)(a3 + 24);
      if (v9[3] != v10)
      {
        *(double *)(a1 + 200) = v10;
        *(double *)(a1 + 208) = a4;
        v8 = 1;
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
LABEL_9:
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_DWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 20);
    v14 = *(_QWORD *)(a3 + 24);
    v16 = *(_QWORD *)(a1 + 200);
    v15 = *(_QWORD *)(a1 + 208);
    *(_DWORD *)buf = 134350592;
    v38 = a4;
    v39 = 1026;
    v40 = v8;
    v41 = 1026;
    v42 = v12;
    v43 = 2050;
    v44 = v13;
    v45 = 2050;
    v46 = v14;
    v47 = 2050;
    v48 = v15;
    v49 = 2050;
    v50 = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,time,%{public}lf,gps fix cf abs time update,success,%{public}d,type,%{public}d,horAcc,%{public}lf,inputCft,%{public}lf,fMCTOfLastGpsFix_s,%{public}lf,fCFTOfLastGpsFix_s,%{public}lf", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v17 = *(_DWORD *)(a2 + 96);
    v18 = *(_QWORD *)(a2 + 20);
    v19 = *(_QWORD *)(a3 + 24);
    v21 = *(_QWORD *)(a1 + 200);
    v20 = *(_QWORD *)(a1 + 208);
    v23 = 134350592;
    v24 = a4;
    v25 = 1026;
    v26 = v8;
    v27 = 1026;
    v28 = v17;
    v29 = 2050;
    v30 = v18;
    v31 = 2050;
    v32 = v19;
    v33 = 2050;
    v34 = v20;
    v35 = 2050;
    v36 = v21;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,time,%{public}lf,gps fix cf abs time update,success,%{public}d,type,%{public}d,horAcc,%{public}lf,inputCft,%{public}lf,fMCTOfLastGpsFix_s,%{public}lf,fCFTOfLastGpsFix_s,%{public}lf", &v23, 64);
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::storeCFTDerivedFromGpsTimeIfPossible(const CFTimeInterval, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
}

void sub_10015EEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5;
  double v6;
  _QWORD *v8;
  int *v9;
  double v10;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;

  v5 = *(double *)(a3 + 12);
  if (v5 < -180.0 || (v6 = *(double *)(a3 + 4), v6 > 90.0) || v6 < -90.0 || v5 > 180.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a2 + 64);
      v16 = *(double *)(a3 + 4);
      v17 = *(_QWORD *)(a3 + 12);
      *(_DWORD *)buf = 134349569;
      v32 = v15;
      v33 = 2049;
      v34 = v16;
      v35 = 2049;
      v36 = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "BaroAlt,#Warning,time,%{public}lf,invalid location for DMA undulation look up,lat,%{private}.8lf,lon,%{private}.8lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v22 = *(_QWORD *)(a2 + 64);
      v23 = *(_QWORD *)(a3 + 4);
      v24 = *(_QWORD *)(a3 + 12);
      *(_DWORD *)v29 = 134349569;
      *(_QWORD *)&v29[4] = v22;
      *(_WORD *)&v29[12] = 2049;
      *(_QWORD *)&v29[14] = v23;
      *(_WORD *)&v29[22] = 2049;
      LODWORD(v28) = 32;
      v21 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "BaroAlt,#Warning,time,%{public}lf,invalid location for DMA undulation look up,lat,%{private}.8lf,lon,%{private}.8lf", v29, v28, *(_OWORD *)v29, *(_QWORD *)&v29[16], v24);
      goto LABEL_34;
    }
  }
  else
  {
    v8 = (_QWORD *)(a1 + 144);
    v9 = (int *)(a1 + 152);
    v10 = fabs(*(double *)(a1 + 144));
    if ((*(_DWORD *)(a1 + 152) - 1) <= 0xFFFFFFFD && v10 > 2.22044605e-16)
      return;
    HIDWORD(v28) = 0;
    if (sub_100208AC8((float *)&v28 + 1, v6, v5))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        v13 = *(_QWORD *)(a2 + 64);
        *(_DWORD *)buf = 134349312;
        v32 = v13;
        v33 = 2050;
        v34 = *((float *)&v28 + 1);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,time,%{public}lf,no undulation knowledge yet,fall back to DMA altitude,undulation,%{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
        v26 = *(_QWORD *)(a2 + 64);
        *(_DWORD *)v29 = 134349312;
        *(_QWORD *)&v29[4] = v26;
        *(_WORD *)&v29[12] = 2050;
        *(double *)&v29[14] = *((float *)&v28 + 1);
        LODWORD(v28) = 22;
        v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,time,%{public}lf,no undulation knowledge yet,fall back to DMA altitude,undulation,%{public}lf", v29, v28);
        sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeterCore::lookUpDMAUndulationIfNeeded(CLBaroAltEstimatorInput &, const CLDaemonLocation &)", "%s\n", v27);
        if (v27 != (char *)buf)
          free(v27);
      }
      sub_100168414(*(_QWORD *)(a1 + 544), 1, *((float *)&v28 + 1), *(double *)(a3 + 76));
      sub_10015F970(*(_QWORD *)(a1 + 544), v8, v9, *(double *)(a3 + 76));
      return;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(a2 + 64);
      *(_DWORD *)buf = 134349056;
      v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "BaroAlt,#Warning,time,%{public}lf,failed to get DMA altitude", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      v20 = *(_QWORD *)(a2 + 64);
      *(_DWORD *)v29 = 134349056;
      *(_QWORD *)&v29[4] = v20;
      LODWORD(v28) = 12;
      v21 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "BaroAlt,#Warning,time,%{public}lf,failed to get DMA altitude", v29, v28, *(_OWORD *)v29, *(_QWORD *)&v29[16], v30);
LABEL_34:
      v25 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "void CLBarometricAltimeterCore::lookUpDMAUndulationIfNeeded(CLBaroAltEstimatorInput &, const CLDaemonLocation &)", "%s\n", v21);
      if (v25 != buf)
        free(v25);
    }
  }
}

BOOL sub_10015F3D0(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  double v3;

  v3 = *(double *)(a2 + 384);
  return v3 > 0.0 && v3 < 12.0 && *a3 != 0;
}

double sub_10015F3FC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7, _QWORD *a8, _QWORD *a9, _BYTE *a10, _QWORD *a11, _BYTE *a12, _QWORD *a13, double *a14, _QWORD *a15, _QWORD *a16)
{
  uint64_t v20;
  double result;

  *(_QWORD *)(a3 + 64) = *a2;
  v20 = a3 + 64;
  *(double *)(a3 + 72) = sub_1000B6F08(a1, (double *)(a3 + 64));
  *(_QWORD *)(v20 + 16) = *a6;
  *(_QWORD *)(v20 + 24) = *a7;
  *(_QWORD *)(v20 + 32) = *a8;
  *(_QWORD *)(v20 + 40) = *a9;
  *(_BYTE *)(v20 + 48) = *a12;
  *(_OWORD *)(v20 + 56) = *(_OWORD *)(a5 + 376);
  *(_OWORD *)(v20 + 72) = *(_OWORD *)(a4 + 44);
  *(_QWORD *)(v20 + 104) = *a15;
  *(_BYTE *)(v20 + 112) = *a10;
  *(_QWORD *)(v20 + 120) = *a11;
  *(_QWORD *)(v20 + 192) = *a16;
  *(_QWORD *)(v20 + 200) = *a13;
  result = *a14;
  *(double *)(v20 + 208) = *a14;
  return result;
}

double sub_10015F508(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  double v8;
  double v9;
  NSObject *v11;
  double v12;
  double v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  double v24;
  int v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  double v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  int v58;

  v8 = *(float *)(a3 + 316);
  v9 = fabs(v8);
  if ((*(_DWORD *)(a3 + 312) - 1) > 0xFFFFFFFD || v9 <= 2.22044605e-16)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,invalid undulation model, use last known best undulation", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
      LOWORD(v31) = 0;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,invalid undulation model, use last known best undulation", &v31, 2);
      sub_100512490("Generic", 1, 0, 2, "double CLBarometricAltimeterCore::getGroundAltInWgs84(const CLBaroAltEstimatorInput &, const CFAbsoluteTime, const CLDaemonLocationPrivate &)", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
    sub_10015F970(*(_QWORD *)(a1 + 544), (_QWORD *)(a1 + 144), (int *)(a1 + 152), a4);
    v8 = *(double *)(a1 + 144);
  }
  v12 = *(double *)(a3 + 376);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
  v13 = v12 + v8;
  v14 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v15 = *(_QWORD *)(a2 + 64);
    v16 = *(_QWORD *)(a3 + 376);
    v17 = *(float *)(a3 + 316);
    v18 = *(_DWORD *)(a3 + 312);
    v19 = *(_QWORD *)(a1 + 144);
    v20 = *(_DWORD *)(a1 + 152);
    *(_DWORD *)buf = 134350593;
    v46 = v15;
    v47 = 2049;
    v48 = v13;
    v49 = 2049;
    v50 = v16;
    v51 = 2050;
    v52 = v17;
    v53 = 1026;
    v54 = v18;
    v55 = 2050;
    v56 = v19;
    v57 = 1026;
    v58 = v20;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,compute wgs84 altitude for calibration,time,%{public}.lf,groundAltitudeWgs84,%{private}.3lf,groundAltitude,%{private}.3lf,undulationIn,%{public}.3lf,undulationInModel,%{public}d,storedUndulation,%{public}.3lf,storedUndulationModel,%{public}d", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CDFF0);
    v22 = *(_QWORD *)(a2 + 64);
    v23 = *(_QWORD *)(a3 + 376);
    v24 = *(float *)(a3 + 316);
    v25 = *(_DWORD *)(a3 + 312);
    v26 = *(_QWORD *)(a1 + 144);
    v27 = *(_DWORD *)(a1 + 152);
    v31 = 134350593;
    v32 = v22;
    v33 = 2049;
    v34 = v13;
    v35 = 2049;
    v36 = v23;
    v37 = 2050;
    v38 = v24;
    v39 = 1026;
    v40 = v25;
    v41 = 2050;
    v42 = v26;
    v43 = 1026;
    v44 = v27;
    LODWORD(v30) = 64;
    v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,compute wgs84 altitude for calibration,time,%{public}.lf,groundAltitudeWgs84,%{private}.3lf,groundAltitude,%{private}.3lf,undulationIn,%{public}.3lf,undulationInModel,%{public}d,storedUndulation,%{public}.3lf,storedUndulationModel,%{public}d", &v31, v30);
    sub_100512490("Generic", 1, 0, 2, "double CLBarometricAltimeterCore::getGroundAltInWgs84(const CLBaroAltEstimatorInput &, const CFAbsoluteTime, const CLDaemonLocationPrivate &)", "%s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
  }
  return v13;
}

void sub_10015F8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  double v8;
  double v9;

  v7 = *(_DWORD *)(a4 + 312);
  v8 = *(float *)(a4 + 316);
  v9 = fabs(v8);
  if ((v7 - 1) <= 0xFFFFFFFD && v9 > 2.22044605e-16)
  {
    sub_100168414(*(_QWORD *)(a1 + 544), v7, v8, *(double *)(a3 + 76));
    sub_10015F970(*(_QWORD *)(a1 + 544), (_QWORD *)(a1 + 144), (int *)(a1 + 152), *(double *)(a3 + 76));
  }
  sub_10015EEBC(a1, a2, a3);
}

uint64_t sub_10015F970(uint64_t result, _QWORD *a2, int *a3, double a4)
{
  int v4;

  v4 = *(_DWORD *)(result + 8);
  if (v4 != -1)
  {
    if (vabdd_f64(*(double *)(result + 16), a4) >= 5400.0 || fabs(*(double *)result) <= 2.22044605e-16)
      v4 = -1;
    else
      *a2 = *(_QWORD *)result;
  }
  *a3 = v4;
  return result;
}

uint64_t sub_10015F9C0(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, char a5, double *a6, double *a7)
{
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  char v14;

  v14 = a5;
  sub_10015FB70((uint64_t *)a1, a2, a3, a6, a7);
  result = 0;
  v12 = 236;
  if (!*(_BYTE *)(a1 + 237))
    v12 = 360;
  if (*(_BYTE *)(a1 + v12))
  {
    if (*a6 > 300.0 && *a7 > 5000.0)
    {
      result = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        result = sub_10015F3D0(result, a4, &v14);
        if ((_DWORD)result)
        {
          if (*(double *)(a1 + 2088) <= 0.0)
          {
            return 0;
          }
          else
          {
            result = sub_1017426EC(*(_QWORD *)a1, (double *)(a1 + 1576));
            if ((_DWORD)result)
            {
              v13 = *(_DWORD *)(a1 + 232);
              return v13 < sub_1017D564C(a1);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_10015FAA0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;

  if (*(_DWORD *)(a1 + 468))
  {
    v4 = *(double *)(a1 + 384);
    if (v4 >= -180.0)
    {
      v5 = *(double *)(a1 + 376);
      if (v5 <= 90.0 && v5 >= -90.0 && v4 <= 180.0)
      {
        v6 = a1 + 372;
LABEL_13:
        sub_10011E258((double *)(a1 + 160), v6, a3);
        *a2 = v9;
        return;
      }
    }
  }
  if (*(_DWORD *)(a1 + 312))
  {
    v7 = *(double *)(a1 + 228);
    if (v7 >= -180.0)
    {
      v8 = *(double *)(a1 + 220);
      if (v8 <= 90.0 && v8 >= -90.0 && v7 <= 180.0)
      {
        v6 = a1 + 216;
        goto LABEL_13;
      }
    }
  }
}

void sub_10015FB70(uint64_t *a1, double *a2, uint64_t a3, double *a4, _QWORD *a5)
{
  double v9;
  double v10;

  if (*a1)
  {
    if (*((double *)a1 + 267) <= *((double *)a1 + 253))
      v9 = *((double *)a1 + 253);
    else
      v9 = *((double *)a1 + 267);
    v10 = sub_1000B6F08(*a1, a2);
    *a4 = sub_1000B7150(v10, v9, -1.0);
    sub_10015FAA0(*a1, a5, a3);
  }
  else
  {
    *a4 = -1.0;
    *a5 = 0xBFF0000000000000;
  }
}

void sub_10015FC14(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v4;
  _QWORD v5[3];
  char v6;
  char v7;

  v5[0] = a2;
  v5[1] = &v7;
  v5[2] = &v6;
  sub_1015A2E04(__p, "InAWeek");
  sub_1017D9868(v5, *(double *)(a1 + 3624), (uint64_t)CFSTR("CLBaroAltCalibrationCountMMForAWeek"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOutdoorContextForAWeek"), (uint64_t)CFSTR("CLBaroAltAppropriateToCalibrateCountForAWeek"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMForAWeek"), (uint64_t)CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureForAWeek"), CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeForAWeek"), (_QWORD ***)__p, a1 + 3512, (uint64_t *)a1);
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "InAMonth");
  sub_1017D9868(v5, *(double *)(a1 + 3632), (uint64_t)CFSTR("CLBaroAltCalibrationCountMMForAMonth"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOutdoorContextForAMonth"), (uint64_t)CFSTR("CLBaroAltAppropriateToCalibrateCountForAMonth"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMForAMonth"), (uint64_t)CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureForAMonth"), CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeForAMonth"), (_QWORD ***)__p, a1 + 3544, (uint64_t *)a1);
  if (v4 < 0)
    operator delete(__p[0]);
  sub_1015A2E04(__p, "In3Months");
  sub_1017D9868(v5, *(double *)(a1 + 3640), (uint64_t)CFSTR("CLBaroAltCalibrationCountMMFor3Months"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOutdoorContextFor3Months"), (uint64_t)CFSTR("CLBaroAltAppropriateToCalibrateCountFor3Months"), (uint64_t)CFSTR("CLBaroAltCalibrationCountOnlyUsedDEMFor3Months"), (uint64_t)CFSTR("CLBaroAltCalibrationCountUsedDEMandRefPressureFor3Months"), CFSTR("CLBaroAltCalibrationStartMonitoringCFAbsTimeFor3Months"), (_QWORD ***)__p, a1 + 3576, (uint64_t *)a1);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_10015FD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10015FDA4(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4, BOOL *a5, double a6)
{
  int v12;
  BOOL v13;
  BOOL v14;
  double v15;
  _BOOL4 v17;
  double v18;
  BOOL v20;
  int v21;
  int v22;
  _BOOL8 v23;
  NSObject *v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _BOOL4 v42;
  _BOOL4 v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  char *v58;
  _DWORD v59[2];
  __int16 v60;
  _BOOL4 v61;
  __int16 v62;
  _BOOL4 v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  _BOOL4 v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  uint8_t buf[4];
  _BOOL4 v97;
  __int16 v98;
  _BOOL4 v99;
  __int16 v100;
  _BOOL4 v101;
  __int16 v102;
  int v103;
  __int16 v104;
  int v105;
  __int16 v106;
  int v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  int v113;
  __int16 v114;
  int v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  int v119;
  __int16 v120;
  _BOOL4 v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;

  v12 = *(unsigned __int8 *)(a3 + 609);
  if ((v12 - 2) < 2)
  {
    if (*(_BYTE *)(a3 + 610))
      v13 = *(_DWORD *)(a3 + 56) == 2;
    else
      v13 = 0;
    if (!v13)
      goto LABEL_10;
LABEL_9:
    v14 = (*(_DWORD *)(a3 + 88) - 8) < 0xFFFFFFFE;
    goto LABEL_11;
  }
  if (v12 == 1 && *(_DWORD *)(a3 + 56) == 2)
    goto LABEL_9;
LABEL_10:
  v14 = 0;
LABEL_11:
  *a4 = v14;
  v15 = *(double *)(a2 + 52);
  v17 = v15 > 0.0 && v15 < 1.0 && *(double *)(a2 + 44) < 4.46;
  if (*(_BYTE *)(a3 + 576) == 2)
  {
    v18 = *(double *)(a3 + 592);
    v20 = v18 <= 1.0 && (*(_QWORD *)(a3 + 592) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v18 < 0.8)
      v20 = 0;
  }
  else
  {
    v20 = 0;
  }
  *a5 = v20;
  v21 = sub_1000B71A0(a1);
  v22 = v21;
  v23 = 0;
  if (!*(_BYTE *)(a2 + 152) && v17 && !*(_BYTE *)(a3 + 512))
  {
    v23 = *a4;
    if (!*a4)
    {
      if (v21)
      {
        if (*(_BYTE *)(a1 + 3481))
          v23 = *a5;
        else
          v23 = 0;
      }
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v24 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v25 = *a4;
    v26 = *a5;
    v27 = *(_DWORD *)(a3 + 56);
    v28 = *(_DWORD *)(a3 + 88);
    v29 = *(_DWORD *)(a3 + 92);
    v30 = *(_QWORD *)(a2 + 52);
    v31 = *(_QWORD *)(a2 + 44);
    v32 = *(unsigned __int8 *)(a3 + 576);
    v33 = *(_QWORD *)(a3 + 592);
    v34 = *(unsigned __int8 *)(a1 + 3481);
    v35 = *(_QWORD *)(a2 + 76);
    v36 = *(_QWORD *)(a2 + 4);
    v37 = *(_QWORD *)(a2 + 12);
    v38 = *(_QWORD *)(a2 + 60);
    v39 = *(unsigned __int8 *)(a2 + 152);
    v40 = *(unsigned __int8 *)(a3 + 512);
    *(_DWORD *)buf = 67244801;
    v97 = v23;
    v98 = 1026;
    v99 = v25;
    v100 = 1026;
    v101 = v26;
    v102 = 1026;
    v103 = v27;
    v104 = 1026;
    v105 = v28;
    v106 = 1026;
    v107 = v29;
    v108 = 2050;
    v109 = v30;
    v110 = 2050;
    v111 = v31;
    v112 = 1026;
    v113 = v22;
    v114 = 1026;
    v115 = v32;
    v116 = 2050;
    v117 = v33;
    v118 = 1026;
    v119 = v34;
    v120 = 1026;
    v121 = v17;
    v122 = 2050;
    v123 = v35;
    v124 = 2049;
    v125 = v36;
    v126 = 2049;
    v127 = v37;
    v128 = 2050;
    v129 = v38;
    v130 = 1026;
    v131 = v39;
    v132 = 1026;
    v133 = v40;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BaroAlt,appropriatecheck,pass,%{public}d,mapMatched,%{public}d,CNOutdoor,%{public}d,matchQuality,%{public}d,matchFormOfWay,%{public}d,matchRoadClass,%{public}d,speedAccuracy,%{public}.3lf,speed,%{public}.3lf,CnOutdoorCalTriggerEnabled,%{public}d,CNPosContextState,%{public}d,CNPosContextProb,%{public}.3lf,isNotInAVisit,%{public}d,isSpeedSlow,%{public}d,cfAbsTime,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,fromSimulationController,%{public}d,isSimulatedOrSpoofed,%{public}d", buf, 0x90u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v42 = *a4;
    v43 = *a5;
    v44 = *(_DWORD *)(a3 + 56);
    v45 = *(_DWORD *)(a3 + 88);
    v46 = *(_DWORD *)(a3 + 92);
    v47 = *(_QWORD *)(a2 + 52);
    v48 = *(_QWORD *)(a2 + 44);
    v49 = *(unsigned __int8 *)(a3 + 576);
    v50 = *(_QWORD *)(a3 + 592);
    v51 = *(unsigned __int8 *)(a1 + 3481);
    v52 = *(_QWORD *)(a2 + 76);
    v53 = *(_QWORD *)(a2 + 4);
    v54 = *(_QWORD *)(a2 + 12);
    v55 = *(_QWORD *)(a2 + 60);
    v56 = *(unsigned __int8 *)(a2 + 152);
    v57 = *(unsigned __int8 *)(a3 + 512);
    v59[0] = 67244801;
    v59[1] = v23;
    v60 = 1026;
    v61 = v42;
    v62 = 1026;
    v63 = v43;
    v64 = 1026;
    v65 = v44;
    v66 = 1026;
    v67 = v45;
    v68 = 1026;
    v69 = v46;
    v70 = 2050;
    v71 = v47;
    v72 = 2050;
    v73 = v48;
    v74 = 1026;
    v75 = v22;
    v76 = 1026;
    v77 = v49;
    v78 = 2050;
    v79 = v50;
    v80 = 1026;
    v81 = v51;
    v82 = 1026;
    v83 = v17;
    v84 = 2050;
    v85 = v52;
    v86 = 2049;
    v87 = v53;
    v88 = 2049;
    v89 = v54;
    v90 = 2050;
    v91 = v55;
    v92 = 1026;
    v93 = v56;
    v94 = 1026;
    v95 = v57;
    v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,appropriatecheck,pass,%{public}d,mapMatched,%{public}d,CNOutdoor,%{public}d,matchQuality,%{public}d,matchFormOfWay,%{public}d,matchRoadClass,%{public}d,speedAccuracy,%{public}.3lf,speed,%{public}.3lf,CnOutdoorCalTriggerEnabled,%{public}d,CNPosContextState,%{public}d,CNPosContextProb,%{public}.3lf,isNotInAVisit,%{public}d,isSpeedSlow,%{public}d,cfAbsTime,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,course,%{public}.3lf,fromSimulationController,%{public}d,isSimulatedOrSpoofed,%{public}d", v59, 144);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isAppropriateToCalibrateBaro(const CFTimeInterval, const CLDaemonLocation &, const CLDaemonLocationPrivate &, BOOL &, BOOL &)", "%s\n", v58);
    if (v58 != (char *)buf)
      free(v58);
  }
  *(_BYTE *)(a1 + 1336) = v23;
  *(_BYTE *)(a1 + 1337) = *a4;
  *(_BYTE *)(a1 + 1338) = *a5;
  if (*a4)
  {
    ++*(_DWORD *)(a1 + 3512);
    ++*(_DWORD *)(a1 + 3544);
    ++*(_DWORD *)(a1 + 3576);
  }
  if (*a5)
  {
    ++*(_DWORD *)(a1 + 3516);
    ++*(_DWORD *)(a1 + 3548);
    ++*(_DWORD *)(a1 + 3580);
  }
  if (v23)
  {
    ++*(_DWORD *)(a1 + 3520);
    ++*(_DWORD *)(a1 + 3552);
    ++*(_DWORD *)(a1 + 3584);
    *(double *)(a1 + 3608) = a6;
  }
  return v23;
}

double sub_1001602FC(uint64_t a1, uint64_t a2, _BYTE *a3, double *a4)
{
  double result;
  unsigned int v5;
  BOOL v6;
  int v7;
  double v9;

  *a3 = 0;
  *a4 = -1.0;
  result = *(double *)(a2 + 44);
  if (result >= 0.0)
  {
    v5 = *(_DWORD *)(a2 + 96);
    v6 = v5 > 9;
    v7 = (1 << v5) & 0x20A;
    if (!v6 && v7 != 0)
    {
      *(double *)(a1 + 32) = result;
      v9 = *(double *)(a2 + 76);
      *(double *)(a1 + 40) = v9;
      result = vabdd_f64(v9, *(double *)(a1 + 24));
      if (result < 1.5)
      {
        *a3 = 1;
        *(_OWORD *)a1 = *(_OWORD *)(a1 + 32);
        result = *(double *)(a2 + 44);
        *a4 = result;
      }
    }
  }
  return result;
}

uint64_t sub_100160374(uint64_t a1, void *a2)
{
  return sub_1001568D8(a1 + 2056, a2);
}

void sub_10016037C(uint64_t a1, unsigned __int8 *a2, char a3)
{
  NSObject *v6;
  int v7;
  int v8;
  _QWORD *v9;
  char v10;
  int v11;
  BOOL v12;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint8_t *v26;
  NSObject *v27;
  int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  __int16 v43;
  int v44;
  uint8_t buf[4];
  int v46;
  __int16 v47;
  int v48;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v7 = (char)*a2;
    v8 = *(unsigned __int8 *)(a1 + 675);
    *(_DWORD *)buf = 67240448;
    v46 = v7;
    v47 = 1026;
    v48 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Stopping all location providers that are worse than kDynamicLocationProvider %{public}d,KeepGpsOnWithAccessory,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v36 = (char)*a2;
    v37 = *(unsigned __int8 *)(a1 + 675);
    v41 = 67240448;
    v42 = v36;
    v43 = 1026;
    v44 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "Stopping all location providers that are worse than kDynamicLocationProvider %{public}d,KeepGpsOnWithAccessory,%{public}d", &v41, 14);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  v9 = *(_QWORD **)(a1 + 240);
  if (v9 != (_QWORD *)(a1 + 248))
  {
    v10 = 0;
    while (1)
    {
      if (*((_DWORD *)v9 + 8))
      {
        v11 = *((char *)v9 + 901);
        v12 = v11 == -1 || *((_BYTE *)v9 + 903) == 0;
        if (!v12 && v11 < (char)*a2)
        {
          if (*((_DWORD *)v9 + 224) == 1)
          {
            v14 = *a2;
            if ((a3 & 1) != 0)
            {
              if (v14 == 3)
                goto LABEL_33;
              if (v14 == 5)
              {
LABEL_24:
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10214C5A0);
                v15 = qword_1022A0028;
                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                {
                  v16 = (char)*a2;
                  v17 = *((char *)v9 + 901);
                  *(_DWORD *)buf = 67240448;
                  v46 = v16;
                  v47 = 1026;
                  v48 = v17;
                  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d,isAccessorySpecialCase,1", buf, 0xEu);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_49;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10214C5A0);
                v18 = (char)*a2;
                v19 = *((char *)v9 + 901);
                v41 = 67240448;
                v42 = v18;
                v43 = 1026;
                v44 = v19;
                LODWORD(v40) = 14;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d,isAccessorySpecialCase,1", &v41, v40);
                goto LABEL_41;
              }
            }
            else
            {
              if (*(_BYTE *)(a1 + 675) && v14 == 5)
                goto LABEL_24;
              if (v14 == 3)
              {
LABEL_33:
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10214C5A0);
                v21 = qword_1022A0028;
                if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                {
                  v22 = (char)*a2;
                  v23 = *((char *)v9 + 901);
                  *(_DWORD *)buf = 67240448;
                  v46 = v22;
                  v47 = 1026;
                  v48 = v23;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d", buf, 0xEu);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_49;
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10214C5A0);
                v24 = (char)*a2;
                v25 = *((char *)v9 + 901);
                v41 = 67240448;
                v42 = v24;
                v43 = 1026;
                v44 = v25;
                LODWORD(v40) = 14;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "got better location provider,%{public}d,NOT stopping worse location provider,%{public}d", &v41, v40);
LABEL_41:
                v26 = (uint8_t *)v20;
                sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)", "%s\n", v20);
                if (v26 != buf)
                  free(v26);
                goto LABEL_49;
              }
            }
          }
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v27 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v28 = (char)*a2;
            v29 = *((char *)v9 + 901);
            *(_DWORD *)buf = 67240448;
            v46 = v28;
            v47 = 1026;
            v48 = v29;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "got better location provider,%{public}d,stopping worse location provider,%{public}d", buf, 0xEu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v32 = (char)*a2;
            v33 = *((char *)v9 + 901);
            v41 = 67240448;
            v42 = v32;
            v43 = 1026;
            v44 = v33;
            LODWORD(v40) = 14;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "got better location provider,%{public}d,stopping worse location provider,%{public}d", &v41, v40);
            v35 = (uint8_t *)v34;
            sub_100512490("Generic", 1, 0, 2, "void CLLocationController::stopLessDesirableProviders(const DynamicLocationProvider &, BOOL)", "%s\n", v34);
            if (v35 != buf)
              free(v35);
          }
          sub_1006A4CCC(a1, *((_DWORD *)v9 + 10));
          v10 = 1;
        }
      }
LABEL_49:
      v30 = (_QWORD *)v9[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v9[2];
          v12 = *v31 == (_QWORD)v9;
          v9 = v31;
        }
        while (!v12);
      }
      v9 = v31;
      if (v31 == (_QWORD *)(a1 + 248))
      {
        if ((v10 & 1) != 0)
          sub_100193388(a1);
        return;
      }
    }
  }
}

void sub_100160A08(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (*(_DWORD *)a2 == 11)
  {
    v4 = *(unsigned __int8 *)(a2 + 4);
    v5 = *(unsigned __int8 *)(a1 + 706);
    *(_BYTE *)(a1 + 706) = v4;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a2 + 4);
      *(_DWORD *)buf = 67240192;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got notification wifi2 active state,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v8 = *(unsigned __int8 *)(a2 + 4);
      v11[0] = 67240192;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Got notification wifi2 active state,%{public}d", v11, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onWifi2ActiveNotification(const CLLocationProvider_Type::TechnologyStatus &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (v4 != v5)
      sub_100193388(a1);
  }
}

void sub_100160BEC(__int32 a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onGpsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100160DD4(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100160DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100160DD4(uint64_t a1, __int32 a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t *v23;
  int32x4_t v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint64_t buf;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;

  v24.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)&buf);
  sub_100B30A14(v7, &buf);
  LODWORD(buf) = 15;
  v24.i32[0] = 15;
  v24.i32[1] = sub_10142DEC4((int *)&buf);
  v8 = sub_1005EE584();
  LODWORD(buf) = 4;
  sub_1005FA6E8(v8, (unsigned int *)&buf, &v24, (int *)(a1 + 5124), &v24.i32[2], a3, a4);
  v9 = *a3;
  if (*a3 <= 25)
  {
    if (v9 == 11)
    {
      sub_1002329E4(a1, a4 + 816);
      return;
    }
    if (v9 == 18)
    {
      sub_1006A7E20(a1, (unsigned int *)(a4 + 840));
      return;
    }
  }
  else
  {
    switch(v9)
    {
      case 26:
        sub_1002325B0((_BYTE *)a1, a4);
        return;
      case 41:
        sub_1006A7BB4(a1, a4);
        return;
      case 43:
        sub_1006A79C0(a1, a4);
        return;
    }
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v10 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v11 = *(_DWORD *)(a4 + 96);
    v12 = *(_QWORD *)(a4 + 4);
    v13 = *(_QWORD *)(a4 + 12);
    v14 = *(_QWORD *)(a4 + 20);
    v15 = *a3;
    LODWORD(buf) = 67241217;
    HIDWORD(buf) = v11;
    v35 = 2049;
    v36 = v12;
    v37 = 2049;
    v38 = v13;
    v39 = 2050;
    v40 = v14;
    v41 = 1026;
    v42 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "onGpsNotification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01lf,notification,%{public}d", (uint8_t *)&buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v17 = *(_DWORD *)(a4 + 96);
    v18 = *(_QWORD *)(a4 + 4);
    v19 = *(_QWORD *)(a4 + 12);
    v20 = *(_QWORD *)(a4 + 20);
    v21 = *a3;
    v24.i32[3] = 67241217;
    v25 = v17;
    v26 = 2049;
    v27 = v18;
    v28 = 2049;
    v29 = v19;
    v30 = 2050;
    v31 = v20;
    v32 = 1026;
    v33 = v21;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "onGpsNotification,locationType,%{public}d,lat,%{private}.7lf,long,%{private}.7lf,acc,%{public}.01lf,notification,%{public}d", (char *)&v24.u64[1] + 4, 44);
    v23 = (uint64_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
    if (v23 != &buf)
      free(v23);
  }
  sub_1001426CC(a1, *(_DWORD *)(a1 + 328), v16, (unsigned int *)a3, a4);
  sub_1004006B0(a1 + 768, a3, a4);
}

void sub_100161118(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 1272);
  if (v2)
  {
    v3 = (std::__shared_weak_count *)a2[1];
    v9 = *a2;
    v10 = v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v9);
    v6 = v10;
    if (v10)
    {
      v7 = (unint64_t *)&v10->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1001611A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001611B8(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  if (*a2 == 22 || *a2 == 5)
    sub_100161220(a4, a2, a3);
}

double sub_1001611D4(uint64_t a1, double a2)
{
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  return *(double *)(a1 + 664) + a2;
}

void sub_100161220(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  unsigned int v10;
  double *v11;
  double v12;
  double *v13;
  float v14;
  double *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  double v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  float v29;
  int v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  const char *v36;
  uint64_t v37;
  char *v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD v48[2];
  int v49;
  const char *v50;
  _BYTE v51[12];
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  double v58;
  uint8_t buf[4];
  const char *v60;
  _BYTE v61[12];
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  unsigned int v66;
  __int16 v67;
  double v68;

  if (*a2 == 5 || *a2 == 22 && sub_10104BD1C(*((int **)a3 + 100)))
  {
    v5 = a3[7];
    v46 = a3[6];
    v47 = v5;
    v48[0] = a3[8];
    *(_OWORD *)((char *)v48 + 12) = *(__int128 *)((char *)a3 + 140);
    v6 = a3[3];
    v42 = a3[2];
    v43 = v6;
    v7 = a3[5];
    v44 = a3[4];
    v45 = v7;
    v8 = a3[1];
    v40 = *a3;
    v41 = v8;
    v9 = sub_100162654((uint64_t)&v40, *((double *)a3 + 117));
    if (v9)
    {
      v10 = v9;
      v11 = (double *)((char *)a3 + 44);
      if (v9 == 2)
        v11 = (double *)a3 + 117;
      v12 = *v11;
      v13 = (double *)a3 + 119;
      if (v9 != 2)
        v13 = (double *)((char *)a3 + 52);
      v14 = *v13;
      v15 = (double *)(a3 + 59);
      if (v9 != 2)
        v15 = (double *)((char *)a3 + 76);
      v16 = *v15;
      v17 = CFAbsoluteTimeGetCurrent() - v16;
      if (v14 <= 0.0)
        v14 = 1.5;
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_10219AC88);
      v18 = v12;
      v19 = fabsf(v17);
      v20 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_QWORD *)((char *)a3 + 76);
        v22 = "Location derived speed";
        *(_DWORD *)buf = 136316418;
        if (v10 == 1)
          v22 = "GPS speed";
        v60 = v22;
        *(_WORD *)v61 = 2048;
        *(_QWORD *)&v61[2] = v21;
        *(_WORD *)&v61[10] = 2048;
        v62 = v18;
        v63 = 2048;
        v64 = v14;
        v65 = 1024;
        v66 = v10;
        v67 = 2048;
        v68 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%s accepted, timestamp, %f, speed, %f, speedUnc, %f, speedSource, %d, ageOfEstimation, %f", buf, 0x3Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_10219AC88);
        v36 = "Location derived speed";
        v37 = *(_QWORD *)((char *)a3 + 76);
        if (v10 == 1)
          v36 = "GPS speed";
        v49 = 136316418;
        v50 = v36;
        *(_WORD *)v51 = 2048;
        *(_QWORD *)&v51[2] = v37;
        *(_WORD *)&v51[10] = 2048;
        v52 = v18;
        v53 = 2048;
        v54 = v14;
        v55 = 1024;
        v56 = v10;
        v57 = 2048;
        v58 = v19;
        LODWORD(v39) = 58;
        v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "%s accepted, timestamp, %f, speed, %f, speedUnc, %f, speedSource, %d, ageOfEstimation, %f", (const char *)&v49, v39, *(double *)&v40, *((double *)&v40 + 1), (_DWORD)v41, *((double *)&v41 + 1));
        sub_100512490("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGpsSpeed(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v38);
        if (v38 != (char *)buf)
          free(v38);
      }
      v23 = *(double *)((char *)a3 + 116);
      if (v23 >= 0.0)
        v23 = sub_10012C9E0(v23, (float)-*(float *)(a1 + 864));
      v24 = v23;
      buf[0] = 5;
      buf[1] = v10;
      *(_WORD *)&buf[2] = 0;
      if (v18 <= 128.0)
        v25 = v18;
      else
        v25 = 128.0;
      v26 = v25 * 16777000.0;
      v27 = v25 < -128.0;
      v28 = -2147500000.0;
      if (!v27)
        v28 = v26;
      v29 = 2147500000.0;
      if (v14 <= 128.0)
        v29 = v14 * 16777000.0;
      v30 = (int)v29;
      LODWORD(v60) = (int)v28;
      HIDWORD(v60) = (int)v29;
      v31 = *(double *)((char *)a3 + 68);
      *(float *)v61 = v24;
      *(float *)&v61[4] = v31;
      *(float *)&v61[8] = v19;
      sub_1010399F0(a1 + 192, (__int128 *)buf, 0);
      HIDWORD(v39) = 0;
      if (sub_101032978((_QWORD *)a1, v10 | ((unint64_t)LODWORD(v16) << 32), LODWORD(v18) | ((unint64_t)LODWORD(v14) << 32), (float *)&v39 + 1))
      {
        v32 = *((float *)&v39 + 1);
        if (*((float *)&v39 + 1) > 128.0)
          v32 = 128.0;
        v33 = v32 * 16777000.0;
        v27 = v32 < -128.0;
        v34 = -2147500000.0;
        if (!v27)
          v34 = v33;
        v49 = 1029;
        LODWORD(v50) = (int)v34;
        HIDWORD(v50) = v30;
        v35 = *(double *)((char *)a3 + 68);
        *(float *)v51 = v24;
        *(float *)&v51[4] = v35;
        *(float *)&v51[8] = v19;
        sub_1010399F0(a1 + 192, (__int128 *)&v49, 0);
      }
    }
  }
}

void sub_10016169C(uint64_t *a1, uint64_t a2)
{
  sub_1001616AC(a2, a1);
}

void sub_1001616AC(uint64_t a1, uint64_t *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  NSObject *v13;
  char *v14;
  float v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  id v19;
  float32x2_t v20;
  uint64_t v21;
  _QWORD v22[6];
  float v23;
  float32x2_t v24;
  float v25;
  float v26;
  _BYTE v27[24];
  int v28;
  int v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  uint64_t v60;

  v28 = 0;
  *(_OWORD *)v27 = *(_OWORD *)((char *)a2 + 12);
  *(_QWORD *)&v27[16] = *(uint64_t *)((char *)a2 + 28);
  LOBYTE(v28) = *((_BYTE *)a2 + 9) != 0;
  *(_DWORD *)(a1 + 1048) = *(_DWORD *)&v27[8];
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)v27;
  *(_DWORD *)(a1 + 1060) = *(_DWORD *)&v27[20];
  *(_QWORD *)(a1 + 1052) = *(_QWORD *)&v27[12];
  *(_BYTE *)(a1 + 1064) = 1;
  v4 = *((float *)a2 + 9);
  v5 = *a2;
  v6 = a1 + 1072;
  v7 = *(_QWORD *)(a1 + 1080);
  if (v7 != a1 + 1072)
  {
    do
    {
      if (!*(_BYTE *)(v7 + 32))
      {
        (*(void (**)(void))(*(_QWORD *)(v7 + 24) + 16))();
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021A7678);
        v8 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
        {
          v9 = *(_QWORD *)(v7 + 16);
          *(_DWORD *)buf = 134350848;
          v46 = v4;
          v47 = 2050;
          v48 = *(float *)v27;
          v49 = 2050;
          v50 = *(float *)&v27[4];
          v51 = 2050;
          v52 = *(float *)&v27[8];
          v53 = 2050;
          v54 = *(float *)&v27[12];
          v55 = 2050;
          v56 = *(float *)&v27[16];
          v57 = 2050;
          v58 = *(float *)&v27[20];
          v59 = 2050;
          v60 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "[CLGBE] SPUGyroBias,temperature,%{public}f,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f,client,%{public}p", buf, 0x52u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_1021A7678);
          v10 = *(_QWORD *)(v7 + 16);
          v29 = 134350848;
          v30 = v4;
          v31 = 2050;
          v32 = *(float *)v27;
          v33 = 2050;
          v34 = *(float *)&v27[4];
          v35 = 2050;
          v36 = *(float *)&v27[8];
          v37 = 2050;
          v38 = *(float *)&v27[12];
          v39 = 2050;
          v40 = *(float *)&v27[16];
          v41 = 2050;
          v42 = *(float *)&v27[20];
          v43 = 2050;
          v44 = v10;
          LODWORD(v21) = 82;
          v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "[CLGBE] SPUGyroBias,temperature,%{public}f,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f,client,%{public}p", &v29, v21);
          sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::notifySPUClients(const CLMotionCoprocessorInterface::GyroBiasAndVariance *)", "%s\n", v11);
          if (v11 != (char *)buf)
            free(v11);
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  if (!*(_BYTE *)(a1 + 1008))
  {
    v12 = *((unsigned __int8 *)a2 + 10);
    if ((sub_10016AE80() & v12) == 1)
    {
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v13 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "[CLGBE] Ignoring bias estimate during charging", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021A7678);
        LOWORD(v29) = 0;
        LODWORD(v21) = 2;
        v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "[CLGBE] Ignoring bias estimate during charging", &v29, v21);
        sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::notifySPUClients(const CLMotionCoprocessorInterface::GyroBiasAndVariance *)", "%s\n", v14);
        if (v14 != (char *)buf)
          free(v14);
      }
    }
    else
    {
      v15 = *((float *)a2 + 5);
      v16 = *((float *)a2 + 8);
      v17 = *(float32x2_t *)((char *)a2 + 12);
      v18 = (float32x2_t)a2[3];
      v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase"));
      v20 = (float32x2_t)vdup_n_s32(0x42652EE1u);
      v22[1] = 3221225472;
      v22[0] = _NSConcreteStackBlock;
      v22[2] = sub_10020E8E0;
      v22[3] = &unk_1021A7648;
      v22[5] = vmul_f32(v17, v20);
      v23 = v15 * 57.296;
      v24 = vmul_f32(vmul_f32(v18, v20), v20);
      v25 = (float)(v16 * 57.296) * 57.296;
      v26 = v4;
      v22[4] = v5;
      objc_msgSend(v19, "doAsync:", v22);
    }
  }
}

void sub_100161BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  double v6;
  double v7;
  BOOL v8;
  BOOL v9;
  uint64_t v10[47];
  _BYTE v11[160];

  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 32)
      || *(_BYTE *)(a1 + 130)
      && (*(_BYTE *)(a1 + 152)
       || ((v6 = *(double *)(a1 + 11704), v7 = vabdd_f64(*(double *)(a3 + 32), v6), v6 > 0.0)
         ? (v8 = v7 == 24.0, v9 = v7 < 24.0)
         : (v8 = 0, v9 = 0),
           v9 || v8)))
    {
      if (*(_BYTE *)(a1 + 129))
      {
        sub_1001754C4((uint64_t)v11);
        sub_10086F2B8(a2, (uint64_t)v11);
        sub_1001753F0((uint64_t)v10);
        sub_10087004C(a3, (uint64_t)v10);
        v5 = sub_101222968();
        sub_1012233D8((uint64_t)v5, (uint64_t)v11, (uint64_t)v10, 1);
        sub_1004491BC(v10);
        sub_100446020((wireless_diagnostics::google::protobuf::MessageLite *)v11);
      }
    }
  }
}

void sub_100161CAC(uint64_t a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v6;
  NSObject *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void *v12;
  double v13;
  double v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 buf;
  __n128 (*v24)@<Q0>(uint64_t@<X0>, uint64_t@<X8>);
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[92];
  int v35;
  uint64_t v36;

  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_40;
    if (!*(_BYTE *)(a1 + 130))
      return;
    if (*(_BYTE *)(a1 + 152)
      || ((v13 = *(double *)(a1 + 11704), v14 = vabdd_f64(*(double *)(a3 + 32), v13), v13 > 0.0)
        ? (v15 = v14 <= 24.0)
        : (v15 = 0),
          v15))
    {
LABEL_40:
      if (*(_BYTE *)(a1 + 129))
      {
        sub_1001754C4((uint64_t)&v35);
        sub_10086F2B8((uint64_t)a2, (uint64_t)&v35);
        sub_1001753F0((uint64_t)&buf);
        sub_10087004C(a3, (uint64_t)&buf);
        v6 = sub_101222968();
        sub_1012233D8((uint64_t)v6, (uint64_t)&v35, (uint64_t)&buf, 0);
        sub_1004491BC((uint64_t *)&buf);
        sub_100446020((wireless_diagnostics::google::protobuf::MessageLite *)&v35);
      }
      if (*(_BYTE *)(a1 + 130))
        sub_1010EDD14((unsigned __int8 *)(a1 + 152), (uint64_t)a2, a3);
      if (*(_BYTE *)(a1 + 32) && !*(_BYTE *)(a1 + 13792))
      {
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
        v7 = qword_1022A00C8;
        if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLVC,handleLocationNotification,Download DEM tiles", (uint8_t *)&buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A00C0 != -1)
            dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
          LOWORD(v35) = 0;
          v20 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVC,handleLocationNotification,Download DEM tiles", &v35, 2);
          sub_100512490("Generic", 1, 0, 2, "void CLVisionController::handleLocationNotification(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v20);
          if (v20 != (char *)&buf)
            free(v20);
        }
        v8 = a2[7];
        v32 = a2[6];
        v33 = v8;
        v34[0] = a2[8];
        *(_OWORD *)((char *)v34 + 12) = *(__int128 *)((char *)a2 + 140);
        v9 = a2[3];
        v28 = a2[2];
        v29 = v9;
        v10 = a2[5];
        v30 = a2[4];
        v31 = v10;
        v11 = a2[1];
        v26 = *a2;
        v27 = v11;
        v12 = *(void **)(a1 + 24);
        *(_QWORD *)&buf = _NSConcreteStackBlock;
        *((_QWORD *)&buf + 1) = 3221225472;
        v24 = sub_100959878;
        v25 = &unk_10214CAA0;
        objc_msgSend(v12, "downloadIfNeeded:signalQuality:allowCenterOverCellular:ringsToDownloadOverCellular:", objc_msgSend(&buf, "copy"), 0, 1, 1);
        *(_BYTE *)(a1 + 13792) = 1;
      }
    }
    else if (v13 > 0.0)
    {
      if (*(_BYTE *)(a1 + 129))
      {
        sub_1001754C4((uint64_t)&v35);
        sub_10086F2B8((uint64_t)a2, (uint64_t)&v35);
        sub_1001753F0((uint64_t)&buf);
        sub_10087004C(a3, (uint64_t)&buf);
        v16 = sub_101222968();
        sub_1012233D8((uint64_t)v16, (uint64_t)&v35, (uint64_t)&buf, 0);
        v17 = sub_101222968();
        sub_10005A6D8((uint64_t)v17);
        sub_1004491BC((uint64_t *)&buf);
        sub_100446020((wireless_diagnostics::google::protobuf::MessageLite *)&v35);
      }
      sub_1010E84D4(a1 + 152);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
      v18 = qword_1022A00C8;
      if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_DEBUG))
      {
        v19 = *(_QWORD *)(a3 + 32);
        LODWORD(buf) = 134349056;
        *(_QWORD *)((char *)&buf + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLVC,handleLocationNotification,manual location fuser reset,machAbsTime,%{public}.3lf", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A00C0 != -1)
          dispatch_once(&qword_1022A00C0, &stru_10215FCA8);
        v21 = *(_QWORD *)(a3 + 32);
        v35 = 134349056;
        v36 = v21;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00C8, 2, "CLVC,handleLocationNotification,manual location fuser reset,machAbsTime,%{public}.3lf", &v35, 12);
        sub_100512490("Generic", 1, 0, 2, "void CLVisionController::handleLocationNotification(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v22);
        if (v22 != (char *)&buf)
          free(v22);
      }
    }
  }
}

void sub_10016215C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_100162168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;
  double v4;
  BOOL v5;

  if (*(_BYTE *)(a1 + 128)
    && *(_BYTE *)(a1 + 130)
    && (*(_BYTE *)(a1 + 152)
     || ((v3 = *(double *)(a1 + 11704), v4 = vabdd_f64(*(double *)(a3 + 32), v3), v3 > 0.0)
       ? (v5 = v4 <= 24.0)
       : (v5 = 0),
         v5)))
  {
    return sub_1010E8C88((unsigned __int8 *)(a1 + 152), a2, a3);
  }
  else
  {
    return 0;
  }
}

BOOL sub_1001621B0(uint64_t a1, uint64_t a2)
{
  int v4;
  _BOOL4 v5;
  NSObject *v6;
  void **v7;
  const char *v8;
  _BOOL8 v9;
  NSObject *v10;
  void **v11;
  const char *v12;
  uint64_t v13;
  _BYTE *v14;
  const char *v15;
  char *v16;
  char *v17;
  uint64_t v19;
  _BYTE *v20;
  const char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _BYTE buf[12];
  __int16 v26;
  const char *v27;
  char v28;
  int v29;
  _BYTE *v30;
  __int16 v31;
  const char *v32;
  void *__p[2];
  char v34;

  v4 = *(_DWORD *)(a2 + 96);
  if (v4 == 6)
  {
    v5 = sub_10018DCF8(*(_QWORD *)(a1 + 40), a2);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_100B9444C(a2, __p);
      v7 = (void **)__p[0];
      v8 = "yes";
      if (v34 >= 0)
        v7 = __p;
      if (v5)
        v8 = "no";
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v7;
      v26 = 2080;
      v27 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MovingApDetector, CellOnly, received location: %{private}s, success: %s", buf, 0x16u);
      if (v34 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v19 = qword_1022A0048;
      sub_100B9444C(a2, buf);
      v20 = *(_BYTE **)buf;
      v21 = "yes";
      if (v28 >= 0)
        v20 = buf;
      if (v5)
        v21 = "no";
      v29 = 136380931;
      v30 = v20;
      v31 = 2080;
      v32 = v21;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v19, 0, "MovingApDetector, CellOnly, received location: %{private}s, success: %s", &v29, 22);
      v23 = v22;
      if (v28 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMovingApDetector::receiveLocation(CLDaemonLocation &)", "%s\n", v23);
      if (v23 != (char *)__p)
        free(v23);
    }
    v4 = *(_DWORD *)(a2 + 96);
  }
  if (v4 != 1 && (v4 != 6 || !sub_10132E530()[1]))
    return 0;
  v9 = sub_10018DCF8(*(_QWORD *)(a1 + 24), a2);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F1D0);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    sub_100B9444C(a2, __p);
    v11 = (void **)__p[0];
    v12 = "yes";
    if (v34 >= 0)
      v11 = __p;
    if (v9)
      v12 = "no";
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v11;
    v26 = 2080;
    v27 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MovingApDetector, received location: %{private}s, success: %s", buf, 0x16u);
    if (v34 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v13 = qword_1022A0048;
    sub_100B9444C(a2, buf);
    v14 = *(_BYTE **)buf;
    v15 = "yes";
    if (v28 >= 0)
      v14 = buf;
    if (v9)
      v15 = "no";
    v29 = 136380931;
    v30 = v14;
    v31 = 2080;
    v32 = v15;
    LODWORD(v24) = 22;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 0, "MovingApDetector, received location: %{private}s, success: %s", &v29, v24);
    v17 = v16;
    if (v28 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMovingApDetector::receiveLocation(CLDaemonLocation &)", "%s\n", v17);
    if (v17 != (char *)__p)
      free(v17);
  }
  return v9;
}

uint64_t sub_100162654(uint64_t a1, double a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 96);
  if (v2 == 1 && *(double *)(a1 + 44) >= 0.0)
    return 1;
  if (a2 >= 0.0 && v2 == 4)
    return 2;
  else
    return 0;
}

void sub_100162688(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCellTilesManager::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021A1F30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCellTilesManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A1F30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCellTilesManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100162870(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100162850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100162870(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  double v16;
  _BOOL4 v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  double v23;
  int v24;
  NSObject *v26;
  unsigned int v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  const char *v31;
  uint8_t *v32;
  NSObject *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  char *v39;
  char *v40;
  int v41;
  const char *v42;
  void *v43[2];
  char v44;
  _BYTE __p[18];
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  void **v49;
  uint8_t buf[4];
  _BYTE v51[14];
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  _BYTE *v55;

  if (*a3 != 5)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *a3;
      v28 = sub_1001B49F8(*a3);
      *(_DWORD *)buf = 67240450;
      *(_DWORD *)v51 = v27;
      *(_WORD *)&v51[4] = 2082;
      *(_QWORD *)&v51[6] = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "TileCell, unexpected, location, %{public}d, %{public}s", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v29 = qword_1022A0048;
    v30 = *a3;
    *(_DWORD *)__p = 67240450;
    *(_DWORD *)&__p[4] = v30;
    *(_WORD *)&__p[8] = 2082;
    *(_QWORD *)&__p[10] = sub_1001B49F8(v30);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "TileCell, unexpected, location, %{public}d, %{public}s", __p, 18);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v31);
LABEL_54:
    if (v32 != buf)
      free(v32);
    return;
  }
  v6 = a1 + 176;
  v7 = *(double *)(a1 + 196);
  v8 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a4;
  v9 = *(_OWORD *)(a4 + 80);
  v11 = *(_OWORD *)(a4 + 32);
  v10 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(a1 + 256) = v9;
  *(_OWORD *)(a1 + 208) = v11;
  *(_OWORD *)(a1 + 224) = v10;
  v13 = *(_OWORD *)(a4 + 112);
  v12 = *(_OWORD *)(a4 + 128);
  v14 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(a1 + 316) = *(_OWORD *)(a4 + 140);
  *(_OWORD *)(a1 + 288) = v13;
  *(_OWORD *)(a1 + 304) = v12;
  *(_OWORD *)(a1 + 272) = v14;
  *(_OWORD *)(a1 + 192) = v8;
  if (*(_BYTE *)(a1 + 129))
  {
    v15 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 368) + 16))(*(_QWORD *)(a1 + 368));
    v16 = *(double *)(a1 + 336);
    v17 = v7 > *(double *)(a4 + 20) && v7 > 100.0;
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v20 = *(_QWORD *)(a1 + 336);
      v19 = *(_QWORD *)(a1 + 344);
      sub_100071A00(a4, __p);
      v21 = (v47 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 134349827;
      *(_QWORD *)v51 = v20;
      *(_WORD *)&v51[8] = 1026;
      *(_DWORD *)&v51[10] = v17;
      v52 = 2050;
      v53 = v19;
      v54 = 2081;
      v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TileCell, kNotificationLocationLeech, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s", buf, 0x26u);
      if (SBYTE3(v47) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v35 = qword_1022A0048;
      v37 = *(_QWORD *)(a1 + 336);
      v36 = *(_QWORD *)(a1 + 344);
      sub_100071A00(a4, v43);
      if (v44 >= 0)
        v38 = v43;
      else
        v38 = (void **)v43[0];
      *(_DWORD *)__p = 134349827;
      *(_QWORD *)&__p[4] = v37;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v17;
      v46 = 2050;
      v47 = v36;
      v48 = 2081;
      v49 = v38;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "TileCell, kNotificationLocationLeech, fLastLocationDownloadCheckTimestamp, %{public}.1lf, isForceLocationCheck, %{public}d, fLastLocationProtectionCheckTimestamp, %{public}.1f, leech location, %{private}s", __p, 38);
      v40 = v39;
      if (v44 < 0)
        operator delete(v43[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v40);
      if (v40 != (char *)buf)
        free(v40);
    }
    v22 = v15 - v16 >= 600.0 || v17;
    if (v22 == 1)
    {
      v23 = *(double *)(a1 + 196);
      if (v23 >= 0.0 && v23 <= 5000.0)
      {
        sub_10023B598((const char *)a1, v6);
        *(double *)(a1 + 336) = v15;
      }
    }
    if (*(_BYTE *)(a1 + 128))
    {
      v24 = v15 - *(double *)(a1 + 344) >= 330.0 || v17;
      if (v24 == 1)
      {
        sub_10116CA54(a1, (uint64_t)"onLocationNotification", v6, 0);
        *(double *)(a1 + 344) = v15;
      }
    }
    return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v33 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v51 = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v41 = *(unsigned __int8 *)(a1 + 128);
    *(_DWORD *)__p = 67109120;
    *(_DWORD *)&__p[4] = v41;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d", __p);
    v32 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v42);
    goto LABEL_54;
  }
}

void sub_100162ECC(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTimeZoneManager::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 64), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10215E610);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTimeZoneManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10215E610);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTimeZoneManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1001630A4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100163084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1001630A4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unsigned int v6;
  NSObject *v9;
  unsigned int v10;
  double v11;
  CFAbsoluteTime v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  double v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  NSObject *v35;
  NSObject *v36;
  unsigned int v37;
  uint8_t *v38;
  double v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  unsigned int v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  _BYTE v62[24];
  _BYTE v63[24];
  uint8_t buf[4];
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;

  v6 = *a3;
  if ((int)*a3 > 8)
  {
    if (v6 == 9)
    {
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v35 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "Got kNotificationLocationUnavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        *(_WORD *)v62 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "Got kNotificationLocationUnavailable", v62, 2);
        v57 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v56);
        if (v57 != buf)
          free(v57);
      }
      sub_100908600(a1, 0);
      return;
    }
    if (v6 == 14)
    {
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v25 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Got kNotificationServiceAuthorization", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        *(_WORD *)v62 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "Got kNotificationServiceAuthorization", v62, 2);
        v55 = (uint8_t *)v54;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v54);
        if (v55 != buf)
          free(v55);
      }
      sub_100907210(a1);
      return;
    }
    goto LABEL_47;
  }
  if (v6 >= 2 && v6 != 4)
  {
LABEL_47:
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v36 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
    {
      v37 = *a3;
      *(_DWORD *)buf = 67109120;
      LODWORD(v65) = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning Got unknown notification %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Got unknown notification %d", v62);
LABEL_55:
      v38 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v24);
      if (v38 != buf)
        free(v38);
      return;
    }
    return;
  }
  if (qword_1022A0230 != -1)
    dispatch_once(&qword_1022A0230, &stru_10215E630);
  v9 = qword_1022A0238;
  if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
  {
    v10 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v65) = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Got new time zone location: %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v51 = *a3;
    *(_DWORD *)v62 = 67109120;
    *(_DWORD *)&v62[4] = v51;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "Got new time zone location: %d", v62);
    v53 = (uint8_t *)v52;
    sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v52);
    if (v53 != buf)
      free(v53);
  }
  v11 = *(double *)(a4 + 88);
  if (v11 < 0.0 || (v12 = v11 + *(double *)(a4 + 76) + *(double *)(a1 + 904), v12 >= CFAbsoluteTimeGetCurrent()))
  {
    if (*(int *)(a1 + 816) < 1)
    {
      sub_100163B5C(a1, a4, 0);
      return;
    }
    v26 = *(double *)(a4 + 20);
    if (v26 >= 400.0)
    {
      if (v26 > *(double *)(a1 + 888))
      {
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v27 = qword_1022A0238;
        if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
        {
          v28 = *(_QWORD *)(a4 + 4);
          v29 = *(_QWORD *)(a4 + 12);
          v30 = *(_QWORD *)(a4 + 20);
          *(_DWORD *)buf = 134284033;
          v65 = v28;
          v66 = 2049;
          v67 = v29;
          v68 = 2048;
          v69 = v30;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring inaccurate location <%{private}+.8f, %{private}.8f>, acc %.2f", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_67;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v31 = *(_QWORD *)(a4 + 4);
        v32 = *(_QWORD *)(a4 + 12);
        v33 = *(_QWORD *)(a4 + 20);
        *(_DWORD *)v62 = 134284033;
        *(_QWORD *)&v62[4] = v31;
        *(_WORD *)&v62[12] = 2049;
        *(_QWORD *)&v62[14] = v32;
        *(_WORD *)&v62[22] = 2048;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Ignoring inaccurate location <%{private}+.8f, %{private}.8f>, acc %.2f", v62, 32, *(_QWORD *)v62, *(_OWORD *)&v62[8], v33);
LABEL_84:
        v61 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v34);
        if (v61 != buf)
          free(v61);
LABEL_67:
        v44 = *(_OWORD *)(a4 + 16);
        *(_OWORD *)(a1 + 464) = *(_OWORD *)a4;
        *(_OWORD *)(a1 + 480) = v44;
        v45 = *(_OWORD *)(a4 + 32);
        v46 = *(_OWORD *)(a4 + 48);
        v47 = *(_OWORD *)(a4 + 80);
        *(_OWORD *)(a1 + 528) = *(_OWORD *)(a4 + 64);
        *(_OWORD *)(a1 + 544) = v47;
        *(_OWORD *)(a1 + 496) = v45;
        *(_OWORD *)(a1 + 512) = v46;
        v48 = *(_OWORD *)(a4 + 96);
        v49 = *(_OWORD *)(a4 + 112);
        v50 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)(a1 + 604) = *(_OWORD *)(a4 + 140);
        *(_OWORD *)(a1 + 576) = v49;
        *(_OWORD *)(a1 + 592) = v50;
        *(_OWORD *)(a1 + 560) = v48;
        return;
      }
      sub_10011E258((double *)(a1 + 984), a4, a1 + 152);
      if (vabdd_f64(v39, *(double *)(a1 + 80)) < *(double *)(a4 + 20))
      {
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v40 = qword_1022A0238;
        if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
        {
          v41 = *(_QWORD *)(a4 + 4);
          v42 = *(_QWORD *)(a4 + 12);
          v43 = *(_QWORD *)(a4 + 20);
          *(_DWORD *)buf = 134284033;
          v65 = v41;
          v66 = 2049;
          v67 = v42;
          v68 = 2048;
          v69 = v43;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring borderline location <%{private}+.8f, %{private}.8f>, acc %.2f", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_67;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v58 = *(_QWORD *)(a4 + 4);
        v59 = *(_QWORD *)(a4 + 12);
        v60 = *(_QWORD *)(a4 + 20);
        *(_DWORD *)v62 = 134284033;
        *(_QWORD *)&v62[4] = v58;
        *(_WORD *)&v62[12] = 2049;
        *(_QWORD *)&v62[14] = v59;
        *(_WORD *)&v62[22] = 2048;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Ignoring borderline location <%{private}+.8f, %{private}.8f>, acc %.2f", v62, 32, *(_QWORD *)v62, *(_OWORD *)&v62[8], v60);
        goto LABEL_84;
      }
    }
    sub_100163B5C(a1, a4, 1);
    if (*(int *)(a1 + 816) >= 1)
      sub_10090828C(a1);
    *(_DWORD *)(a1 + 820) = 0;
    return;
  }
  if (qword_1022A0230 != -1)
    dispatch_once(&qword_1022A0230, &stru_10215E630);
  v13 = qword_1022A0238;
  if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(_QWORD *)(a4 + 4);
    v15 = *(_QWORD *)(a4 + 12);
    v16 = *(_QWORD *)(a4 + 20);
    v17 = *(_QWORD *)(a4 + 76);
    v18 = *(_QWORD *)(a4 + 88);
    *(_DWORD *)buf = 134284545;
    v65 = v14;
    v66 = 2049;
    v67 = v15;
    v68 = 2048;
    v69 = v16;
    v70 = 2048;
    v71 = v17;
    v72 = 2048;
    v73 = v18;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring expired location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v19 = *(_QWORD *)(a4 + 4);
    v20 = *(_QWORD *)(a4 + 12);
    v21 = *(_QWORD *)(a4 + 20);
    v22 = *(_QWORD *)(a4 + 76);
    v23 = *(_QWORD *)(a4 + 88);
    *(_DWORD *)v62 = 134284545;
    *(_QWORD *)&v62[4] = v19;
    *(_WORD *)&v62[12] = 2049;
    *(_QWORD *)&v62[14] = v20;
    *(_WORD *)&v62[22] = 2048;
    *(_WORD *)v63 = 2048;
    *(_QWORD *)&v63[2] = v22;
    *(_WORD *)&v63[10] = 2048;
    *(_QWORD *)&v63[12] = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Ignoring expired location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f", v62, 52, *(_OWORD *)v62, *(_QWORD *)&v62[16], v21, *(_OWORD *)v63, *(_QWORD *)&v63[16]);
    goto LABEL_55;
  }
}

void sub_100163B5C(uint64_t a1, uint64_t a2, char a3)
{
  _BOOL4 v5;
  double v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  double v11;
  uint64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  const char *v15;
  NSObject *v16;
  double v17;
  uint64_t v18;
  std::string::size_type v19;
  std::string::size_type v20;
  const char *v21;
  NSObject *v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  double v32;
  double v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  std::string::size_type v43;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49;
  NSObject *v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  std::string *data;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  NSObject *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  NSObject *v76;
  double v77;
  uint64_t v78;
  NSObject *v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  const char *v84;
  NSObject *v85;
  NSObject *v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  std::string::size_type v90;
  std::string::size_type v91;
  uint64_t v92;
  const char *v93;
  std::string::size_type v94;
  std::string::size_type v95;
  const char *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  const char *v103;
  uint8_t *v104;
  std::string::size_type v105;
  const char *v106;
  uint8_t *v107;
  const char *v108;
  uint8_t *v109;
  const char *v110;
  uint8_t *v111;
  const char *v112;
  uint8_t *v113;
  const char *v114;
  uint8_t *v115;
  std::string::size_type v116;
  uint64_t v117;
  const char *v118;
  uint8_t *v119;
  std::string *p_p;
  const char *v121;
  uint8_t *v122;
  std::string *v123;
  uint64_t v124;
  const char *v125;
  uint8_t *v126;
  const char *v127;
  uint8_t *v128;
  const char *v129;
  uint8_t *v130;
  double v131;
  double v132;
  uint64_t v133;
  int v134;
  std::string *v135;
  __int16 v136;
  uint64_t v137;
  std::string __p;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  int v145;
  uint8_t buf[4];
  double v147;
  __int16 v148;
  uint64_t v149;
  __int16 v150;
  uint64_t v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  int v157;

  v5 = (a3 & 1) != 0
    || *(_DWORD *)(a1 + 816)
    || *(double *)(a1 + 172) <= 0.0
    || vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 228)) >= *(double *)(a1 + 936);
  v6 = *(double *)(a2 + 20);
  if (v6 < 0.0)
  {
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v7 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning Received invalid location for time zone", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Received invalid location for time zone", &__p, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v8);
      goto LABEL_168;
    }
    return;
  }
  if (v6 > *(double *)(a1 + 888))
  {
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v10 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(double *)(a2 + 20);
      v12 = *(_QWORD *)(a1 + 888);
      *(_DWORD *)buf = 134218240;
      v147 = v11;
      v148 = 2048;
      v149 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning Disregarding location with accuracy: %.1f (> %.1f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v13 = *(_QWORD *)(a2 + 20);
      v14 = *(_QWORD *)(a1 + 888);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v13;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v14;
      LODWORD(v131) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Disregarding location with accuracy: %.1f (> %.1f)", COERCE_DOUBLE(&__p), v131);
      v9 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v15);
      goto LABEL_168;
    }
    return;
  }
  if (!sub_10011CE88(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v22 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_FAULT))
    {
      v23 = *(double *)(a2 + 4);
      v24 = *(_QWORD *)(a2 + 12);
      *(_DWORD *)buf = 134283777;
      v147 = v23;
      v148 = 2049;
      v149 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Received invalid location <%{private}+.8f,%{private}+.8f> for time zone", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v94 = *(_QWORD *)(a2 + 4);
      v95 = *(_QWORD *)(a2 + 12);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v94;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v95;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 17, "Received invalid location <%{private}+.8f,%{private}+.8f> for time zone", &__p, 22);
      v9 = (uint8_t *)v96;
      sub_100512490("Generic", 1, 0, 0, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v96);
      goto LABEL_168;
    }
    return;
  }
  if (*(double *)(a2 + 44) > *(double *)(a1 + 880))
  {
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v16 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(double *)(a2 + 44);
      v18 = *(_QWORD *)(a1 + 888);
      *(_DWORD *)buf = 134218240;
      v147 = v17;
      v148 = 2048;
      v149 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Disregarding location for timezone with speed: %.1f (> %.1f)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v19 = *(_QWORD *)(a2 + 44);
      v20 = *(_QWORD *)(a1 + 888);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v19;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v20;
      LODWORD(v131) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Disregarding location for timezone with speed: %.1f (> %.1f)", COERCE_DOUBLE(&__p), v131);
      v9 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v21);
      goto LABEL_168;
    }
    return;
  }
  if (qword_1022A0230 != -1)
    dispatch_once(&qword_1022A0230, &stru_10215E630);
  v25 = qword_1022A0238;
  if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
  {
    v26 = *(double *)(a2 + 4);
    v27 = *(_QWORD *)(a2 + 12);
    v28 = *(_QWORD *)(a2 + 20);
    v29 = *(_QWORD *)(a2 + 76);
    v30 = *(_QWORD *)(a2 + 88);
    v31 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)buf = 134284801;
    v147 = v26;
    v148 = 2049;
    v149 = v27;
    v150 = 2048;
    v151 = v28;
    v152 = 2048;
    v153 = v29;
    v154 = 2048;
    v155 = v30;
    v156 = 1024;
    v157 = v31;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#Notice Handling new location <%{private}+.8lf,%{private}+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d", buf, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v97 = *(_QWORD *)(a2 + 4);
    v98 = *(_QWORD *)(a2 + 12);
    v99 = *(_QWORD *)(a2 + 20);
    v100 = *(_QWORD *)(a2 + 76);
    v101 = *(_QWORD *)(a2 + 88);
    v102 = *(_DWORD *)(a2 + 84);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134284801;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v97;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v98;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    v139 = v99;
    v140 = 2048;
    v141 = v100;
    v142 = 2048;
    v143 = v101;
    v144 = 1024;
    v145 = v102;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Notice Handling new location <%{private}+.8lf,%{private}+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d", &__p, 58);
    v104 = (uint8_t *)v103;
    sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v103);
    if (v104 != buf)
      free(v104);
  }
  v32 = *(double *)(a1 + 80);
  v33 = -1.0;
  if (v32 >= 0.0)
  {
    v33 = sub_100124100(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 156), *(double *)(a1 + 164));
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v34 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
    {
      v35 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)buf = 134218240;
      v147 = v33;
      v148 = 2048;
      v149 = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "Distance travelled from last point is %.3lf; previous point's distance from border was %.3lf",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v105 = *(_QWORD *)(a1 + 80);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v33;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v105;
      LODWORD(v131) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "Distance travelled from last point is %.3lf; previous point's distance from border was %.3lf",
        COERCE_DOUBLE(&__p),
        v131);
      v107 = (uint8_t *)v106;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v106);
      if (v107 != buf)
        free(v107);
    }
    v32 = *(double *)(a1 + 80);
  }
  if (v32 > -1.0 && v33 + *(double *)(a2 + 20) > v32 && *(int *)(a2 + 84) <= 66)
  {
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v36 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
    {
      v37 = *(double *)(a2 + 4);
      v38 = *(_QWORD *)(a2 + 12);
      v39 = *(_QWORD *)(a2 + 20);
      v40 = *(_QWORD *)(a2 + 76);
      v41 = *(_QWORD *)(a2 + 88);
      v42 = *(_DWORD *)(a2 + 84);
      *(_DWORD *)buf = 134284801;
      v147 = v37;
      v148 = 2049;
      v149 = v38;
      v150 = 2048;
      v151 = v39;
      v152 = 2048;
      v153 = v40;
      v154 = 2048;
      v155 = v41;
      v156 = 1024;
      v157 = v42;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#Warning Ignoring unsure location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v43 = *(_QWORD *)(a2 + 4);
      v44 = *(_QWORD *)(a2 + 12);
      v45 = *(_QWORD *)(a2 + 20);
      v46 = *(_QWORD *)(a2 + 76);
      v47 = *(_QWORD *)(a2 + 88);
      v48 = *(_DWORD *)(a2 + 84);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134284801;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v43;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v44;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
      v139 = v45;
      v140 = 2048;
      v141 = v46;
      v142 = 2048;
      v143 = v47;
      v144 = 1024;
      v145 = v48;
      LODWORD(v131) = 58;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Ignoring unsure location <%{private}+.8f, %{private}.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d", &__p, *(_QWORD *)&v131);
      v9 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v49);
      goto LABEL_168;
    }
    return;
  }
  if (v32 >= 0.0 && v33 <= v32)
  {
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    v50 = qword_1022A0238;
    if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "We're still inside our last \"fence\".", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v131) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "We're still inside our last \"fence\".", &__p, *(_QWORD *)&v131);
      v109 = (uint8_t *)v108;
      sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v108);
      if (v109 != buf)
        free(v109);
    }
    if (*(char *)(a1 + 143) < 0)
      v51 = *(_QWORD *)(a1 + 128);
    else
      v51 = *(unsigned __int8 *)(a1 + 143);
    if (!v51)
    {
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v74 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_INFO, "we've previously confirmed our timezone", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v131) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "we've previously confirmed our timezone", &__p, *(_QWORD *)&v131);
        v113 = (uint8_t *)v112;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v112);
        if (v113 != buf)
          free(v113);
      }
      if (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 144) >= *(double *)(a1 + 968))
        sub_100909C28(a1, (const char *)(a1 + 96));
      return;
    }
    if (*(double *)(a1 + 88) <= 0.0)
    {
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v75 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_FAULT, "Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v131) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 17, "Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.", &__p, *(_QWORD *)&v131);
        v115 = (uint8_t *)v114;
        sub_100512490("Generic", 1, 0, 0, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v114);
        if (v115 != buf)
          free(v115);
      }
      if (v5)
        goto LABEL_125;
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v79 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
      {
        v80 = *(double *)(a2 + 4);
        v81 = *(_QWORD *)(a2 + 12);
        v82 = *(_QWORD *)(a2 + 76);
        *(_DWORD *)buf = 134284033;
        v147 = v80;
        v148 = 2049;
        v149 = v81;
        v150 = 2048;
        v151 = v82;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 == -1)
        goto LABEL_164;
    }
    else
    {
      v67 = sub_100124100(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 312), *(double *)(a1 + 320));
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v68 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
      {
        v69 = *(_QWORD *)(a1 + 88);
        v70 = *(_QWORD *)(a2 + 20);
        *(_DWORD *)buf = 134218496;
        v147 = v67;
        v148 = 2048;
        v149 = v69;
        v150 = 2048;
        v151 = v70;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "Distance travelled from last unconfirmed point is %.3lf; previous point's distance from border was %.3lf; acc is %.3lf",
          buf,
          0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v116 = *(_QWORD *)(a1 + 88);
        v117 = *(_QWORD *)(a2 + 20);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134218496;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v67;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v116;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v139 = v117;
        LODWORD(v131) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "Distance travelled from last unconfirmed point is %.3lf; previous point's distance from border was %.3lf; acc is %.3lf",
          COERCE_DOUBLE(&__p),
          v131,
          v132);
        v119 = (uint8_t *)v118;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v118);
        if (v119 != buf)
          free(v119);
      }
      v71 = *(double *)(a1 + 88);
      v72 = *(double *)(a2 + 20);
      if (v71 - v67 > v72)
      {
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v73 = qword_1022A0238;
        if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_INFO, "time zone confirmed (horizontalAccuracy has improved faster than we've moved)", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0230 != -1)
            dispatch_once(&qword_1022A0230, &stru_10215E630);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v131) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "time zone confirmed (horizontalAccuracy has improved faster than we've moved)", &__p, *(_QWORD *)&v131);
          v128 = (uint8_t *)v127;
          sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v127);
          if (v128 != buf)
            free(v128);
        }
        sub_100909C28(a1, (const char *)(a1 + 120));
        if (*(char *)(a1 + 143) < 0)
        {
          **(_BYTE **)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 128) = 0;
        }
        else
        {
          *(_BYTE *)(a1 + 120) = 0;
          *(_BYTE *)(a1 + 143) = 0;
        }
        *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
        return;
      }
      if (v67 + v71 < v72)
      {
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v83 = qword_1022A0238;
        if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#Warning we can't possibly confirm our timezone, uncertainty too large", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0230 != -1)
            dispatch_once(&qword_1022A0230, &stru_10215E630);
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          LODWORD(v131) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning we can't possibly confirm our timezone, uncertainty too large", &__p, *(_QWORD *)&v131);
          v9 = (uint8_t *)v84;
          sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v84);
          goto LABEL_168;
        }
        return;
      }
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v85 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "we can't optimize, find out if this position confirms our location", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v131) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "we can't optimize, find out if this position confirms our location", &__p, *(_QWORD *)&v131);
        v130 = (uint8_t *)v129;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v129);
        if (v130 != buf)
          free(v130);
      }
      if (v5)
      {
LABEL_125:
        sub_100909E7C(a1, (std::string *)(a1 + 120), a2);
        return;
      }
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v86 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
      {
        v87 = *(double *)(a2 + 4);
        v88 = *(_QWORD *)(a2 + 12);
        v89 = *(_QWORD *)(a2 + 76);
        *(_DWORD *)buf = 134284033;
        v147 = v87;
        v148 = 2049;
        v149 = v88;
        v150 = 2048;
        v151 = v89;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0230 == -1)
      {
LABEL_164:
        v90 = *(_QWORD *)(a2 + 4);
        v91 = *(_QWORD *)(a2 + 12);
        v92 = *(_QWORD *)(a2 + 76);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134284033;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v90;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v91;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
        v139 = v92;
        LODWORD(v131) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed", &__p, *(_QWORD *)&v131);
        v9 = (uint8_t *)v93;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v93);
LABEL_168:
        if (v9 != buf)
          free(v9);
        return;
      }
    }
LABEL_216:
    dispatch_once(&qword_1022A0230, &stru_10215E630);
    goto LABEL_164;
  }
  if (qword_1022A0230 != -1)
    dispatch_once(&qword_1022A0230, &stru_10215E630);
  v52 = qword_1022A0238;
  if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "We've travelled outside our \"fence\".", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0230 != -1)
      dispatch_once(&qword_1022A0230, &stru_10215E630);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    LODWORD(v131) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "We've travelled outside our \"fence\".", &__p, *(_QWORD *)&v131);
    v111 = (uint8_t *)v110;
    sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v110);
    if (v111 != buf)
      free(v111);
  }
  if (v5)
  {
    memset(&__p, 0, sizeof(__p));
    v133 = 0;
    v53 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
    {
      v53 = sub_10068878C();
      *(_QWORD *)a1 = v53;
    }
    if ((sub_100688C38(v53, a2, (uint64_t)&__p, (double *)&v133) & 1) != 0)
    {
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v54 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_INFO))
      {
        *(double *)&data = COERCE_DOUBLE(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          data = (std::string *)__p.__r_.__value_.__l.__data_;
        *(_DWORD *)buf = 136315138;
        v147 = *(double *)&data;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Time zone from database was %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v134 = 136315138;
        v135 = p_p;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 1, "Time zone from database was %s", (const char *)&v134);
        v122 = (uint8_t *)v121;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v121);
        if (v122 != buf)
          free(v122);
      }
      sub_100909E7C(a1, &__p, a2);
      *(_QWORD *)(a1 + 80) = v133;
      v56 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 168) = v56;
      v57 = *(_OWORD *)(a2 + 64);
      v58 = *(_OWORD *)(a2 + 80);
      v59 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 232) = v58;
      *(_OWORD *)(a1 + 216) = v57;
      *(_OWORD *)(a1 + 200) = v59;
      v61 = *(_OWORD *)(a2 + 112);
      v60 = *(_OWORD *)(a2 + 128);
      v62 = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 292) = v62;
      *(_OWORD *)(a1 + 264) = v61;
      *(_OWORD *)(a1 + 280) = v60;
    }
    else
    {
      if (qword_1022A0230 != -1)
        dispatch_once(&qword_1022A0230, &stru_10215E630);
      v76 = qword_1022A0238;
      if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
      {
        v77 = *(double *)(a2 + 4);
        v78 = *(_QWORD *)(a2 + 12);
        *(_DWORD *)buf = 134283777;
        v147 = v77;
        v148 = 2049;
        v149 = v78;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't get time zone for location <%{private}+.8lf,%{private}+.8lf>", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0230 != -1)
          dispatch_once(&qword_1022A0230, &stru_10215E630);
        v123 = *(std::string **)(a2 + 4);
        v124 = *(_QWORD *)(a2 + 12);
        v134 = 134283777;
        v135 = v123;
        v136 = 2049;
        v137 = v124;
        LODWORD(v131) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0238, 0, "#Warning Couldn't get time zone for location <%{private}+.8lf,%{private}+.8lf>", &v134, *(_QWORD *)&v131);
        v126 = (uint8_t *)v125;
        sub_100512490("Generic", 1, 0, 2, "void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, BOOL)", "%s\n", v125);
        if (v126 != buf)
          free(v126);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  if (qword_1022A0230 != -1)
    dispatch_once(&qword_1022A0230, &stru_10215E630);
  v63 = qword_1022A0238;
  if (os_log_type_enabled((os_log_t)qword_1022A0238, OS_LOG_TYPE_DEFAULT))
  {
    v64 = *(double *)(a2 + 4);
    v65 = *(_QWORD *)(a2 + 12);
    v66 = *(_QWORD *)(a2 + 76);
    *(_DWORD *)buf = 134284033;
    v147 = v64;
    v148 = 2049;
    v149 = v65;
    v150 = 2048;
    v151 = v66;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#Warning Not using <%{private}+.8lf,%{private}+.8lf> (timestamp %.2f) because interval has not elapsed", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0230 == -1)
      goto LABEL_164;
    goto LABEL_216;
  }
}

void sub_10016593C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100165968(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[7];
  uint64_t v5[4];

  sub_10010F434((uint64_t)v5);
  v2 = *(_QWORD *)(a1 + 4736);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2))
  {
    sub_100C793E8(a1);
    sub_100C795A8(a1);
    sub_100C79768(a1);
    sub_100C79954(a1);
    sub_100C79B1C(a1);
  }
  if (*(_BYTE *)(a1 + 4663) || *(_QWORD *)(a1 + 4680))
  {
    v3 = sub_100166054(v4);
    sub_100175A48((uint64_t)v3, v5, (uint64_t)v4);
    sub_1001668A0(a1, (uint64_t)v4, 0);
    sub_100166004(v4);
  }
}

void sub_100165A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_100165A28(_QWORD *a1)
{
  wireless_diagnostics::google::protobuf::internal::ExtensionSet *v2;

  *a1 = off_1021ACA58;
  v2 = (wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 1);
  sub_100165A64(a1);
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

_QWORD *sub_100165A64(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102313BA0 != result)
  {
    v1 = result;
    v2 = result[4];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[5];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100165AC0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021AC9E0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100165AF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102159A08;
  sub_100165B34(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_100165B34(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  if ((_QWORD *)qword_102310D28 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[7];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[8];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[9];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[10];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[11];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[12];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[13];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[14];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[15];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[16];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[17];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[18];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[19];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[20];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v1[21];
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v1[22];
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v1[23];
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v1[24];
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v1[25];
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v1[26];
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v1[27];
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v1[28];
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v1[29];
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = v1[30];
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v1[31];
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v1[32];
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v1[33];
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v1[34];
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v1[35];
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = v1[36];
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = v1[37];
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v39 = v1[38];
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v1[39];
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    v41 = v1[40];
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    v42 = v1[41];
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = v1[42];
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v44 = v1[43];
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    v45 = v1[44];
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    v46 = v1[45];
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    v47 = v1[46];
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    v48 = v1[47];
    if (v48)
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    v49 = v1[48];
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v1[49];
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v51 = v1[50];
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v1[51];
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v53 = v1[52];
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    v54 = v1[53];
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
    v55 = v1[54];
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    v56 = v1[55];
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
    v57 = v1[56];
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    v58 = v1[57];
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    v59 = v1[58];
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    result = (_QWORD *)v1[59];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_100166008(_QWORD *a1)
{
  *a1 = off_1021ACA58;
  wireless_diagnostics::google::protobuf::internal::ExtensionSet::ExtensionSet((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 1));
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_100166040(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100166058(uint64_t a1)
{
  return *(_BYTE *)(a1 + 26)
      || sub_1001FCBB4() - *(double *)(a1 + 16) >= 180.0 && *(_BYTE *)(a1 + 24)
      || *(_BYTE *)(a1 + 25) != 0;
}

void sub_1001660B4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A4E8;
  sub_1001660F8(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_1001660F8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((_QWORD *)qword_102310660 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[5];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[7];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[8];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[10];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = (_QWORD *)v1[11];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1001661CC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218FD48;
  sub_100166210(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_100166210(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((_QWORD *)qword_102311890 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[7];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[8];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[9];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v1[10];
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v1[11];
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v1[12];
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v1[13];
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v1[14];
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v1[15];
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v1[16];
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v1[17];
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v1[18];
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v1[19];
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v1[20];
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    result = (_QWORD *)v1[21];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1001663E8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F7A8;
  sub_10016642C(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_10016642C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311820 != result)
  {
    v1 = result;
    v2 = result[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100166488(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10218F6B8;
  sub_1001664CC(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_1001664CC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((_QWORD *)qword_102311828 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[7];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[8];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[9];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[10];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v1[11];
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    result = (_QWORD *)v1[12];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1001665C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_1001665EC(a1);
  operator delete();
}

void sub_1001665EC(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10213BD48;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_102310800 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10016663C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_100166660(a1);
  operator delete();
}

void sub_100166660(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10213AB78;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023106D0 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_1001666B0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102139C00;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1001666E0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A650;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100166710(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A5D8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100166740(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A470;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_100166770(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A290;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1001667A0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A380;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1001667D0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102139FC0;
  sub_100166814(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

_QWORD *sub_100166814(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102310608 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[12];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100166870(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213A308;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1001668A0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  __int128 __p;
  uint64_t v11;
  uint8_t buf[1640];

  __p = 0uLL;
  v11 = 0;
  if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(a2, &__p) & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 4663) && (*(_QWORD *)(a1 + 312) || *(_BYTE *)(a1 + 4664)) && (a3 & 1) == 0)
      sub_100167728(a1, &__p);
    v5 = *(_QWORD *)(a1 + 4680);
    if (v5)
      sub_100166CE0(v5, (uint64_t)&__p);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v6 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Raven: Could not serialize protobuf message", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v9 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: Could not serialize protobuf message", &v9, 2);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLRavenController::SendMessage(const CLP::LogEntry::LogEntry &, BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__p);
}

void sub_100166A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100166ABC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  void *__p[2];
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint8_t buf[4];
  _QWORD *v12;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  if ((wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(a2, __p) & 1) != 0)
  {
    sub_100166CE0(a1, (uint64_t)__p);
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136446210;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ProtobufSerializer,%{public}s,serialize failed", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v5 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v5 = (_QWORD *)*v5;
      v9 = 136446210;
      v10 = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufSerializer,%{public}s,serialize failed", &v9, 12);
      sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::append(const ::google::protobuf::MessageLite &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void sub_100166CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100166CE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  std::string::size_type v5;
  unint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  int v9;
  std::string *v10;
  _QWORD *v11;
  int v12;
  std::string *v13;
  char *v14;
  NSObject *v15;
  _QWORD *v16;
  int v17;
  std::string *v18;
  char v19;
  NSObject *v20;
  _QWORD *v21;
  int v22;
  std::string *p_p;
  _QWORD *v24;
  int v25;
  std::string *v26;
  _QWORD *v27;
  int v28;
  std::string *v29;
  char *v30;
  NSObject *v31;
  _QWORD *v32;
  int v33;
  std::string *v34;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  uint64_t v36;
  const void *v37;
  unsigned int v38;
  NSObject *v39;
  int v40;
  std::string *v41;
  char *v42;
  uint64_t v43;
  _QWORD block[6];
  void *v45;
  void *v46;
  uint64_t v47;
  std::string v48;
  std::string __p;
  int v50;
  _QWORD *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  std::string *v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  std::string *v61;

  if (*(_BYTE *)(a1 + 125))
  {
    v4 = (_QWORD *)(a1 + 8);
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) >= 0x1C3uLL)
    {
      v5 = 0;
      while (1)
      {
        std::string::basic_string(&v48, (const std::string *)a2, v5, 0x1C2uLL, (std::allocator<char> *)buf);
        sub_10114E65C((uint64_t *)&v48, &__p);
        if (!v5)
          break;
        if (*(char *)(a2 + 23) >= 0)
          v6 = *(unsigned __int8 *)(a2 + 23);
        else
          v6 = *(_QWORD *)(a2 + 8);
        if (v6 <= v5 + 450)
        {
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          v20 = qword_1022A0168;
          if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
          {
            v21 = (_QWORD *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0)
              v21 = (_QWORD *)*v4;
            v22 = *(_DWORD *)(a1 + 740);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446723;
            v57 = v21;
            v58 = 1026;
            v59 = v22;
            v60 = 2081;
            v61 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#p%{public}s,#me,%{public}d,%{private}s", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            v27 = (_QWORD *)(a1 + 8);
            if (*(char *)(a1 + 31) < 0)
              v27 = (_QWORD *)*v4;
            v28 = *(_DWORD *)(a1 + 740);
            v29 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v50 = 136446723;
            v51 = v27;
            v52 = 1026;
            v53 = v28;
            v54 = 2081;
            v55 = v29;
            LODWORD(v43) = 28;
            v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "#p%{public}s,#me,%{public}d,%{private}s", &v50, v43);
            sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)", "%s\n", v30);
            if (v30 != (char *)buf)
              free(v30);
          }
          v19 = 0;
          goto LABEL_46;
        }
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v7 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
        {
          v8 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v8 = (_QWORD *)*v4;
          v9 = *(_DWORD *)(a1 + 740);
          v10 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446723;
          v57 = v8;
          v58 = 1026;
          v59 = v9;
          v60 = 2081;
          v61 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#p%{public}s,#mm,%{public}d,%{private}s", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          v11 = (_QWORD *)(a1 + 8);
          if (*(char *)(a1 + 31) < 0)
            v11 = (_QWORD *)*v4;
          v12 = *(_DWORD *)(a1 + 740);
          v13 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v50 = 136446723;
          v51 = v11;
          v52 = 1026;
          v53 = v12;
          v54 = 2081;
          v55 = v13;
          LODWORD(v43) = 28;
          v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "#p%{public}s,#mm,%{public}d,%{private}s", &v50, v43);
          sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)", "%s\n", v14);
LABEL_57:
          if (v14 != (char *)buf)
            free(v14);
        }
LABEL_35:
        v19 = 1;
LABEL_46:
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        v5 += 450;
        if ((v19 & 1) == 0)
          goto LABEL_76;
      }
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v15 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
      {
        v16 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v16 = (_QWORD *)*v4;
        v17 = *(_DWORD *)(a1 + 740);
        v18 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136446723;
        v57 = v16;
        v58 = 1026;
        v59 = v17;
        v60 = 2081;
        v61 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#p%{public}s,#ms,%{public}d,%{private}s", buf, 0x1Cu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v24 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v24 = (_QWORD *)*v4;
      v25 = *(_DWORD *)(a1 + 740);
      v26 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v50 = 136446723;
      v51 = v24;
      v52 = 1026;
      v53 = v25;
      v54 = 2081;
      v55 = v26;
      LODWORD(v43) = 28;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "#p%{public}s,#ms,%{public}d,%{private}s", &v50, v43);
      sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)", "%s\n", v14);
      goto LABEL_57;
    }
    sub_10114E65C((uint64_t *)a2, &__p);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v31 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
    {
      v32 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v32 = (_QWORD *)*v4;
      v33 = *(_DWORD *)(a1 + 740);
      v34 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446723;
      v57 = v32;
      v58 = 1026;
      v59 = v33;
      v60 = 2081;
      v61 = v34;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#p%{public}s,#s,%{public}d,%{private}s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v40 = *(_DWORD *)(a1 + 740);
      v41 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v50 = 136446723;
      v51 = v4;
      v52 = 1026;
      v53 = v40;
      v54 = 2081;
      v55 = v41;
      v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "#p%{public}s,#s,%{public}d,%{private}s", &v50, 28);
      sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)", "%s\n", v42);
      if (v42 != (char *)buf)
        free(v42);
    }
LABEL_76:
    ++*(_DWORD *)(a1 + 740);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (qword_102311CB8 && *(_BYTE *)(a1 + 126))
  {
    if (*(char *)(a2 + 23) >= 0)
      v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(a2 + 23);
    else
      v35 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a2 + 8);
    if (v35 >= 0x80)
      v36 = (int)wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2);
    else
      v36 = 1;
    sub_1001676B8(&__p, v36 + v35 + 4);
    wireless_diagnostics::google::protobuf::io::ArrayOutputStream::ArrayOutputStream((wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)buf, __p.__r_.__value_.__l.__data_, LODWORD(__p.__r_.__value_.__r.__words[1]) - LODWORD(__p.__r_.__value_.__l.__data_), -1);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::CodedOutputStream(&v50, buf);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteVarint32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50, v35);
    if (*(char *)(a2 + 23) >= 0)
      v37 = (const void *)a2;
    else
      v37 = *(const void **)a2;
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteRaw((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50, v37, (int)v35);
    v38 = cnlogging::details::CNProtobufStreamChecksum::adler32(&__p, v36, v35);
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::WriteLittleEndian32((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50, v38);
    v39 = qword_102311CB8;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_100054714;
    block[3] = &unk_1021A2ED8;
    block[4] = a1;
    block[5] = v36 + v35 + 4;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    sub_1007855D8(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
    dispatch_async(v39, block);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    wireless_diagnostics::google::protobuf::io::CodedOutputStream::~CodedOutputStream((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)&v50);
    wireless_diagnostics::google::protobuf::io::ArrayOutputStream::~ArrayOutputStream((wireless_diagnostics::google::protobuf::io::ArrayOutputStream *)buf);
    if (__p.__r_.__value_.__r.__words[0])
    {
      __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_10016762C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001676B8(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100785650(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_10016770C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100167728(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  unsigned __int8 v3;

  v2 = *(_QWORD *)(a1 + 4472);
  if (v2 && *(_QWORD *)(v2 + 192) && (v3 = atomic_load((unsigned __int8 *)(v2 + 184)), (v3 & 1) != 0))
    sub_100167750(*(int **)(a1 + 4472), a2);
  else
    sub_1000667EC(a1, (uint64_t *)a2);
}

void sub_100167750(int *a1, __int128 *a2)
{
  std::mutex *v4;
  int v5;
  NSObject *v6;
  double v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _DWORD v16[2];
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  v4 = (std::mutex *)(a1 + 4);
  std::mutex::lock((std::mutex *)(a1 + 4));
  sub_100167AF4((_QWORD *)a1 + 16, a2);
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 20));
  v5 = a1[42];
  if (v5 >= 501)
  {
    sub_100066778((_QWORD *)a1 + 16);
    ++*a1;
  }
  std::mutex::unlock(v4);
  if (*a1 == 1)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v6 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Raven: rct,msgQ,overflow", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: rct,msgQ,overflow", v16, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLRavenController::RavenThread::PushToMsgQueue(const SerializedClpLogEntry &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_100C77068();
  }
  if (v5 >= 50)
  {
    v7 = sub_1001FCBB4();
    if (v7 > *((double *)a1 + 1) + 1.0)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v8 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *a1;
        *(_DWORD *)buf = 67240448;
        v20 = v5;
        v21 = 1026;
        v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Raven: rct,msgQ,blocked,size,%{public}d,dropped,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v12 = *a1;
        v16[0] = 67240448;
        v16[1] = v5;
        v17 = 1026;
        v18 = v12;
        LODWORD(v15) = 14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,msgQ,blocked,size,%{public}d,dropped,%{public}d", v16, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RavenThread::PushToMsgQueue(const SerializedClpLogEntry &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      *((double *)a1 + 1) = v7;
    }
  }
}

void sub_100167AD8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100167AF4(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *result;
  __int128 v9;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    sub_100167BBC(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    result = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    result = (_QWORD *)(*(_QWORD *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    result[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)result = v9;
  }
  ++a1[5];
  return result;
}

void sub_100167BBC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100167E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_100167ED0(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v15;
  uint64_t v16;
  _QWORD v17[6];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD __dst[7];
  int v27;
  unint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  unint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  unint64_t v40;
  __int16 v41;
  int v42;

  if (a4 >= 0x70)
    v8 = 112;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0x71)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102195AB0);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v36 = 0x8000000101C3196ELL & 0x7FFFFFFFFFFFFFFFLL;
      v37 = 2048;
      v38 = 112;
      v39 = 2048;
      v40 = a4;
      v41 = 1024;
      v42 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102195AB0);
      v27 = 136315906;
      v28 = 0x8000000101C3196ELL & 0x7FFFFFFFFFFFFFFFLL;
      v29 = 2048;
      v30 = 112;
      v31 = 2048;
      v32 = a4;
      v33 = 1024;
      v34 = a2;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v27, 38, v16, LODWORD(v17[0]));
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLInertialOdometryNotifier::InertialOdometryData>::dispatchData(int, const void *, size_t) [T = CLInertialOdometryNotifier::InertialOdometryData]", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10020AB88;
  v17[3] = &unk_102159D08;
  v17[4] = v12;
  v17[5] = v11;
  v22 = __dst[4];
  v23 = __dst[5];
  v24 = __dst[6];
  v18 = __dst[0];
  v19 = __dst[1];
  v21 = __dst[3];
  v20 = __dst[2];
  v25 = v10;
  return objc_msgSend(v13, "async:", v17);
}

CFTypeRef sub_100168194(uint64_t a1, const __CFString *a2)
{
  CFRunLoopRef Current;
  uint64_t v6;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    if (sub_100168204(a1))
      return IOHIDServiceClientCopyProperty(*(IOHIDServiceClientRef *)(a1 + 24), a2);
    else
      return 0;
  }
  else
  {
    v6 = sub_101915F5C(a1);
    return (CFTypeRef)sub_100168204(v6);
  }
}

BOOL sub_100168204(uint64_t a1)
{
  __objc2_class *v1;
  CFRunLoopRef Current;
  _BOOL8 result;
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_1019160CC();
LABEL_16:
    dispatch_once(&qword_10229FC70, &stru_102165728);
    goto LABEL_7;
  }
  sub_1001AD510(*(_QWORD *)(a1 + 32));
  if (*(_QWORD *)(a1 + 24))
    return 1;
  sub_100A08D84(*(_QWORD *)(a1 + 32), 0);
  if (*(_QWORD *)(a1 + 24))
    return 1;
  v1 = DefaultObserver;
  if (qword_10229FC70 != -1)
    goto LABEL_16;
LABEL_7:
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_DWORD *)(a1 + 16);
    v6 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)buf = 67240448;
    v15 = v6;
    v16 = 1026;
    v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (v1[79].vtable != (void *)-1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v9 = *(_DWORD *)(a1 + 16);
    v8 = *(_DWORD *)(a1 + 20);
    v11[0] = 67240448;
    v11[1] = v8;
    v12 = 1026;
    v13 = v9;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Service for usage pair {%{public}d, %{public}d} is not ready", v11, 14);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLIoHidInterface::Device::initializeServiceRef()", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
    return 0;
  }
  return result;
}

uint64_t sub_100168414(uint64_t result, int a2, double a3, double a4)
{
  int v4;
  BOOL v5;
  BOOL v6;

  v4 = *(_DWORD *)(result + 8);
  if (v4 == -1
    || vabdd_f64(*(double *)(result + 16), a4) >= 5400.0
    || (fabs(*(double *)result) > 2.22044605e-16 ? (v5 = a2 == 1) : (v5 = 0), v5 ? (v6 = v4 == 2) : (v6 = 0), !v6))
  {
    *(double *)result = a3;
    *(_DWORD *)(result + 8) = a2;
    *(double *)(result + 16) = a4;
  }
  return result;
}

void sub_100168468(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLTilesManager::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102173D50);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102173D50);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100168650(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100168630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100168650(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  double v7;
  double v8;
  _OWORD *v9;
  double *v10;
  double v11;
  _BOOL4 v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  NSObject *v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  NSObject *v42;
  unsigned int v43;
  const char *v44;
  uint64_t v45;
  unsigned int v46;
  const char *v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  int v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void **v57;
  char *v58;
  char *v59;
  const char *v60;
  const char *v61;
  void *v62[2];
  char v63;
  _BYTE __p[18];
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  void **v68;
  _BYTE buf[40];
  uint64_t v70;
  double v71;

  if (!*(_BYTE *)(a1 + 201))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v33 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v34 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v51 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v51;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d", __p);
      v53 = (char *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    if (*a3 == 5)
    {
      v35 = *(_OWORD *)a4;
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a4 + 16);
      *(_OWORD *)(a1 + 248) = v35;
      v36 = *(_OWORD *)(a4 + 32);
      v37 = *(_OWORD *)(a4 + 48);
      v38 = *(_OWORD *)(a4 + 80);
      *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
      *(_OWORD *)(a1 + 328) = v38;
      *(_OWORD *)(a1 + 280) = v36;
      *(_OWORD *)(a1 + 296) = v37;
      v39 = *(_OWORD *)(a4 + 96);
      v40 = *(_OWORD *)(a4 + 112);
      v41 = *(_OWORD *)(a4 + 128);
      *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
      *(_OWORD *)(a1 + 360) = v40;
      *(_OWORD *)(a1 + 376) = v41;
      *(_OWORD *)(a1 + 344) = v39;
    }
    return;
  }
  if (*a3 != 5)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v42 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v43 = *a3;
      v44 = sub_1001B49F8(*a3);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v43;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, unknown notificaiton, %d, %s", buf, 0x12u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v45 = qword_1022A0028;
    v46 = *a3;
    v47 = sub_1001B49F8(*a3);
    *(_DWORD *)__p = 67109378;
    *(_DWORD *)&__p[4] = v46;
    *(_WORD *)&__p[8] = 2080;
    *(_QWORD *)&__p[10] = v47;
    LODWORD(v61) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "TILE: onLocationNotification, unknown notificaiton, %d, %s", __p, v61);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v48);
LABEL_66:
    if (v49 != buf)
      free(v49);
    return;
  }
  if (*(_BYTE *)(a1 + 428))
  {
    v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 56))(*(_QWORD *)(a1 + 464));
    v8 = *(double *)(a1 + 408);
    v9 = (_OWORD *)(a1 + 248);
    v10 = (double *)(a1 + 268);
    v11 = *(double *)(a1 + 268);
    v12 = v11 > *(double *)(a4 + 20) && v11 > 100.0;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a1 + 408);
      v14 = *(_QWORD *)(a1 + 416);
      sub_100071A00(a4, __p);
      v16 = (v66 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 134218755;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v14;
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = v16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocationProtectionCheckTimestamp, %.1f, leech location, %{private}s", buf, 0x26u);
      if (SBYTE3(v66) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v54 = qword_1022A0028;
      v56 = *(_QWORD *)(a1 + 408);
      v55 = *(_QWORD *)(a1 + 416);
      sub_100071A00(a4, v62);
      if (v63 >= 0)
        v57 = v62;
      else
        v57 = (void **)v62[0];
      *(_DWORD *)__p = 134218755;
      *(_QWORD *)&__p[4] = v56;
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = v12;
      v65 = 2048;
      v66 = v55;
      v67 = 2081;
      v68 = v57;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 2, "TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocationProtectionCheckTimestamp, %.1f, leech location, %{private}s", __p, 38);
      v59 = v58;
      if (v63 < 0)
        operator delete(v62[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v59);
      if (v59 != buf)
        free(v59);
    }
    v17 = *(_OWORD *)(a4 + 16);
    *v9 = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 264) = v17;
    v18 = *(_OWORD *)(a4 + 32);
    v19 = *(_OWORD *)(a4 + 48);
    v20 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 328) = v20;
    *(_OWORD *)(a1 + 280) = v18;
    *(_OWORD *)(a1 + 296) = v19;
    v21 = *(_OWORD *)(a4 + 96);
    v22 = *(_OWORD *)(a4 + 112);
    v23 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 360) = v22;
    *(_OWORD *)(a1 + 376) = v23;
    *(_OWORD *)(a1 + 344) = v21;
    v24 = v7 - v8 >= 600.0 || v12;
    if (v24 == 1 && *v10 >= 0.0 && *v10 <= 5000.0)
    {
      *(_QWORD *)buf = _NSConcreteStackBlock;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = sub_1001CE508;
      *(_QWORD *)&buf[24] = &unk_102197630;
      *(_QWORD *)&buf[32] = a1;
      v70 = a1 + 248;
      v71 = v7;
      sub_1001CD7EC(a1, (uint64_t)"predownloadTilesForLocation", (uint64_t)buf);
      sub_100168EA8(a1, v7);
      sub_10024099C((const char *)a1, a1 + 248);
      *(double *)(a1 + 408) = v7;
    }
    if (*(_BYTE *)(a1 + 200))
    {
      v25 = v7 - *(double *)(a1 + 416) >= 330.0 || v12;
      if (v25 == 1)
      {
        v26 = *(_OWORD *)(a4 + 16);
        *v9 = *(_OWORD *)a4;
        *(_OWORD *)(a1 + 264) = v26;
        v27 = *(_OWORD *)(a4 + 32);
        v28 = *(_OWORD *)(a4 + 48);
        v29 = *(_OWORD *)(a4 + 80);
        *(_OWORD *)(a1 + 312) = *(_OWORD *)(a4 + 64);
        *(_OWORD *)(a1 + 328) = v29;
        *(_OWORD *)(a1 + 280) = v27;
        *(_OWORD *)(a1 + 296) = v28;
        v30 = *(_OWORD *)(a4 + 96);
        v31 = *(_OWORD *)(a4 + 112);
        v32 = *(_OWORD *)(a4 + 128);
        *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 140);
        *(_OWORD *)(a1 + 360) = v31;
        *(_OWORD *)(a1 + 376) = v32;
        *(_OWORD *)(a1 + 344) = v30;
        sub_100FB2CFC(a1, (uint64_t)"onLocationNotification", a1 + 248, 0);
        *(double *)(a1 + 416) = v7;
      }
    }
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197838);
  v50 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "TILE: onLocationNotification, ignore leech when LS off", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    *(_WORD *)__p = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: onLocationNotification, ignore leech when LS off", __p, 2);
    v49 = (char *)v60;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v60);
    goto LABEL_66;
  }
}

void sub_100168EA8(uint64_t a1, double a2)
{
  uint64_t *v2;
  char v5;
  __n128 v6;
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  _BOOL4 v13;
  NSObject *v14;
  int v15;
  int v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  _OWORD *v25;
  double v26;
  int v27;
  NSObject *v28;
  NSObject *v29;
  _BYTE *v30;
  __int128 v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  char v43;
  BOOL v44;
  NSObject *v45;
  _BOOL4 v46;
  uint64_t v47;
  _BOOL4 v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  int v52;
  int v53;
  _BYTE *v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSString *v62;
  id v63;
  uint64_t v64;
  int v65;
  NSObject *v66;
  _BYTE *v67;
  char *v68;
  NSObject *v69;
  const char *v70;
  double v71;
  double v72;
  const char *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  int v78;
  _BYTE *v79;
  _BYTE *v80;
  void **v81;
  char *v82;
  char *v83;
  uint64_t v84;
  const char *v85;
  char *v86;
  uint64_t v87;
  _BYTE *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  const char *v92;
  double v93;
  double v94;
  const char *v95;
  const char *v96;
  NSObject *v97;
  const char *v98;
  NSObject *v99;
  const char *v100;
  uint64_t v101;
  NSObject *v102;
  int v103;
  int v104;
  NSObject *v105;
  const char *v106;
  char *v107;
  const char *v108;
  char *v109;
  uint64_t v110;
  _BYTE *v111;
  char *v112;
  char *v113;
  int v114;
  int v115;
  const char *v116;
  char *v117;
  const char *v118;
  const char *v119;
  __int128 v120;
  __int128 v121;
  double *v122;
  int v123;
  _BOOL4 v124;
  unsigned int v125;
  _BOOL4 v126;
  void *v127[2];
  char v128;
  unsigned __int8 v129;
  _OWORD v130[8];
  _BYTE v131[28];
  unsigned __int8 v132;
  _BYTE v133[38];
  _BYTE v134[10];
  _BYTE __p[18];
  char v136;
  _BYTE buf[38];
  _BYTE v138[10];

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 32))(*(_QWORD *)(a1 + 464));
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 48))(*(_QWORD *)(a1 + 464)) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, location services disabled - no tile downloads", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      *(_WORD *)v133 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, location services disabled - no tile downloads", v133, 2);
      v9 = (char *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v11);
      goto LABEL_264;
    }
    return;
  }
  if (!*(_BYTE *)(a1 + 201))
  {
    v2 = &qword_1022A0000;
    if (qword_1022A0020 != -1)
LABEL_237:
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v14 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v16 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)v133 = 67109120;
      *(_DWORD *)&v133[4] = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %d", v133);
      v9 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v17);
      goto LABEL_264;
    }
    return;
  }
  if (*(_BYTE *)(a1 + 200) && *(_BYTE *)(a1 + 440))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, no tiles while locked", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      *(_WORD *)v133 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, no tiles while locked", v133, 2);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v8);
LABEL_264:
      if (v9 != buf)
        free(v9);
      return;
    }
    return;
  }
  v12 = *(_DWORD *)(a1 + 424);
  if (v12 > 1)
  {
    v13 = 1;
    v126 = 1;
LABEL_44:
    v124 = v13;
    goto LABEL_45;
  }
  v126 = *(_BYTE *)(a1 + 496) != 0;
  if (v12 == 1)
  {
    if ((v5 & 1) == 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v97 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, no download on none broadband cellular connections", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        *(_WORD *)v133 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, no download on none broadband cellular connections", v133, 2);
        v9 = (char *)v98;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v98);
        goto LABEL_264;
      }
      return;
    }
    v13 = 1;
    goto LABEL_44;
  }
  if (v12)
  {
    v13 = *(_BYTE *)(a1 + 496) != 0;
    goto LABEL_44;
  }
  v124 = *(_BYTE *)(a1 + 496) != 0;
  if (!*(_BYTE *)(a1 + 496))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197838);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "TILE: checkDownloadSchedule, no data connectivity, avoiding downloads", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197838);
      *(_WORD *)v133 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "TILE: checkDownloadSchedule, no data connectivity, avoiding downloads", v133, 2);
      v9 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v19);
      goto LABEL_264;
    }
    return;
  }
LABEL_45:
  v125 = sub_100240BF8(a1, v6);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v20 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v125;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v124;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v126;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    *(_DWORD *)v133 = 67109632;
    *(_DWORD *)&v133[4] = v125;
    *(_WORD *)&v133[8] = 1024;
    *(_DWORD *)&v133[10] = v124;
    *(_WORD *)&v133[14] = 1024;
    *(_DWORD *)&v133[16] = v126;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d", v133, 20, (_DWORD)v120);
    v107 = (char *)v106;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v106);
    if (v107 != buf)
      free(v107);
  }
  if (v125 < 2)
  {
    if (*(_BYTE *)(a1 + 176) && *(_BYTE *)(a1 + 144))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v23 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, both download requests are already in use", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        *(_WORD *)v133 = 0;
        LODWORD(v119) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, both download requests are already in use", v133, v119);
        v9 = (char *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v24);
        goto LABEL_264;
      }
      return;
    }
    if (!*(_QWORD *)(a1 + 160) && !*(_QWORD *)(a1 + 192))
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v99 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_INFO, "TILE: checkDownloadSchedule, both download requests null, shutdown?", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        *(_WORD *)v133 = 0;
        LODWORD(v119) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "TILE: checkDownloadSchedule, both download requests null, shutdown?", v133, v119);
        v9 = (char *)v100;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v100);
        goto LABEL_264;
      }
      return;
    }
    v25 = (_OWORD *)(a1 + 248);
    v26 = *(double *)(a1 + 268);
    v27 = *(unsigned __int8 *)(a1 + 200);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v28 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v26 > 0.0;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      *(_DWORD *)v133 = 67109376;
      *(_DWORD *)&v133[4] = v26 > 0.0;
      *(_WORD *)&v133[8] = 1024;
      *(_DWORD *)&v133[10] = v27;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d", v133, 14);
      v109 = (char *)v108;
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v108);
      if (v109 != buf)
        free(v109);
      v25 = (_OWORD *)(a1 + 248);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v29 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      sub_100071A00((uint64_t)v25, buf);
      v30 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v133 = 136380675;
      *(_QWORD *)&v133[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, lastLocation, %{private}s", v133, 0xCu);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v110 = qword_1022A0028;
      sub_100071A00(a1 + 248, v133);
      if (v133[23] >= 0)
        v111 = v133;
      else
        v111 = *(_BYTE **)v133;
      *(_DWORD *)__p = 136380675;
      *(_QWORD *)&__p[4] = v111;
      LODWORD(v119) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v110, 2, "TILE: checkDownloadSchedule, lastLocation, %{private}s", __p, v119);
      v113 = v112;
      if ((v133[23] & 0x80000000) != 0)
        operator delete(*(void **)v133);
      sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v113);
      if (v113 != buf)
        free(v113);
      v25 = (_OWORD *)(a1 + 248);
    }
    v32 = *(_QWORD **)(a1 + 112);
    if (v32 == (_QWORD *)(a1 + 120))
    {
LABEL_223:
      v101 = *(_QWORD *)(a1 + 128);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v102 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v103 = *(unsigned __int8 *)(a1 + 144);
        v104 = *(unsigned __int8 *)(a1 + 176);
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v125;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v101;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v103;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v104;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v114 = *(unsigned __int8 *)(a1 + 144);
        v115 = *(unsigned __int8 *)(a1 + 176);
        *(_DWORD *)v133 = 67109888;
        *(_DWORD *)&v133[4] = v125;
        *(_WORD *)&v133[8] = 2048;
        *(_QWORD *)&v133[10] = v101;
        *(_WORD *)&v133[18] = 1024;
        *(_DWORD *)&v133[20] = v114;
        *(_WORD *)&v133[24] = 1024;
        *(_DWORD *)&v133[26] = v115;
        LODWORD(v119) = 30;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d", v133, v119, (_DWORD)v120, DWORD2(v120));
        v117 = (char *)v116;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v116);
        if (v117 != buf)
          free(v117);
      }
      if (!*(_BYTE *)(a1 + 144) && !*(_BYTE *)(a1 + 176))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197838);
        v105 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, NoActiveDownloads", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          *(_WORD *)v133 = 0;
          LODWORD(v119) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "TILE: checkDownloadSchedule, NoActiveDownloads", v133, v119);
          v9 = (char *)v118;
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v118);
          goto LABEL_264;
        }
      }
      return;
    }
    *(_QWORD *)&v31 = 67109378;
    v121 = v31;
    *(_QWORD *)&v31 = 136447235;
    v120 = v31;
    while (1)
    {
      if (*(_BYTE *)(a1 + 144) && *(_BYTE *)(a1 + 176))
        goto LABEL_223;
      v33 = v32[10];
      v34 = (unsigned int *)(v33 + 48);
      v35 = sub_1001CDA64(a1, *(_DWORD *)(v33 + 48));
      if ((*(_DWORD *)(v33 + 48) & 0xFFFFFFF7) - 1 >= 2)
      {
        sub_101937C38(v35);
        __break(1u);
        goto LABEL_237;
      }
      v36 = v35;
      if (!sub_100077820(v33, v126, *(float *)(v35 + 128), a2))
      {
        if (!sub_1001C94A8(v33))
          goto LABEL_169;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v45 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v46 = sub_1001C94A8(v33);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_169;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v47 = qword_1022A0028;
        v48 = sub_1001C94A8(v33);
        *(_DWORD *)v133 = 67109120;
        *(_DWORD *)&v133[4] = v48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 2, "TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d", v133);
        v50 = (char *)v49;
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v49);
LABEL_108:
        if (v50 != buf)
          free(v50);
        v25 = (_OWORD *)(a1 + 248);
        goto LABEL_169;
      }
      v132 = 0;
      v37 = *(double *)(v36 + 136);
      v38 = v25[7];
      v130[6] = v25[6];
      v130[7] = v38;
      *(_OWORD *)v131 = v25[8];
      *(_OWORD *)&v131[12] = *(_OWORD *)((char *)v25 + 140);
      v39 = v25[3];
      v130[2] = v25[2];
      v130[3] = v39;
      v40 = v25[5];
      v130[4] = v25[4];
      v130[5] = v40;
      v41 = v25[1];
      v130[0] = *v25;
      v130[1] = v41;
      v132 = sub_1011914B0(v33, (uint64_t)v130, v37, a2);
      if (!sub_1000782F4(v33))
        break;
LABEL_169:
      v74 = (_QWORD *)v32[1];
      if (v74)
      {
        do
        {
          v75 = v74;
          v74 = (_QWORD *)*v74;
        }
        while (v74);
      }
      else
      {
        do
        {
          v75 = (_QWORD *)v32[2];
          v44 = *v75 == (_QWORD)v32;
          v32 = v75;
        }
        while (!v44);
      }
      v32 = v75;
      if (v75 == (_QWORD *)(a1 + 120))
        goto LABEL_223;
    }
    if (v125 >= 2)
    {
      v125 = 2;
      goto LABEL_223;
    }
    v129 = 0;
    if (v132)
    {
      v42 = !v124;
      if (*(_BYTE *)(v33 + 112))
        v43 = !v124;
      else
        v43 = 1;
      if ((v43 & 1) == 0)
        goto LABEL_116;
      v44 = *(_BYTE *)(v36 + 177) == 0;
    }
    else
    {
      v44 = *(_BYTE *)(v33 + 113) == 0;
      v42 = !v124;
    }
    if (v44)
      v42 = 1;
    v123 = v126;
    if ((v42 & 1) != 0)
    {
LABEL_117:
      v122 = (double *)(v33 + 112);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v51 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v52 = v132;
        v2 = (uint64_t *)v129;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v33 + 16))(v133, v33);
        v53 = v133[23];
        v54 = *(_BYTE **)v133;
        sub_100FA4168(v122, __p);
        v55 = v133;
        if (v53 < 0)
          v55 = v54;
        v56 = __p;
        if (v136 < 0)
          v56 = *(_BYTE **)__p;
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)&buf[4] = 1;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v123;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v52;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&buf[22] = (_DWORD)v2;
        *(_WORD *)&buf[26] = 2080;
        *(_QWORD *)&buf[28] = v55;
        *(_WORD *)&buf[36] = 2080;
        *(_QWORD *)v138 = v56;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d, check, %s, details, %s", buf, 0x2Eu);
        if (v136 < 0)
          operator delete(*(void **)__p);
        v25 = (_OWORD *)(a1 + 248);
        if ((v133[23] & 0x80000000) != 0)
          operator delete(*(void **)v133);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        v76 = qword_1022A0028;
        v77 = v132;
        v2 = (uint64_t *)v129;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v33 + 16))(__p, v33);
        v78 = v136;
        v79 = *(_BYTE **)__p;
        sub_100FA4168(v122, v127);
        v80 = __p;
        if (v78 < 0)
          v80 = v79;
        v81 = v127;
        if (v128 < 0)
          v81 = (void **)v127[0];
        *(_DWORD *)v133 = 67110402;
        *(_DWORD *)&v133[4] = 1;
        *(_WORD *)&v133[8] = 1024;
        *(_DWORD *)&v133[10] = v123;
        *(_WORD *)&v133[14] = 1024;
        *(_DWORD *)&v133[16] = v77;
        *(_WORD *)&v133[20] = 1024;
        *(_DWORD *)&v133[22] = (_DWORD)v2;
        *(_WORD *)&v133[26] = 2080;
        *(_QWORD *)&v133[28] = v80;
        *(_WORD *)&v133[36] = 2080;
        *(_QWORD *)v134 = v81;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v76, 2, "TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d, check, %s, details, %s", v133, 46, (_DWORD)v120, DWORD2(v120), (const char *)v121, *((const char **)&v121 + 1));
        v83 = v82;
        if (v128 < 0)
          operator delete(v127[0]);
        if (v136 < 0)
          operator delete(*(void **)__p);
        sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v83);
        if (v83 != buf)
          free(v83);
        v25 = (_OWORD *)(a1 + 248);
      }
      if (!v123)
        goto LABEL_169;
      if (v129)
      {
        v57 = a1 + 136;
        if (!*(_BYTE *)(a1 + 144))
          goto LABEL_134;
      }
      else
      {
        v57 = a1 + 168;
        if (!*(_BYTE *)(a1 + 176))
        {
LABEL_134:
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          v58 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v59 = *(_QWORD *)v57;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v59;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, chose, downloadState, %s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102197858);
            v84 = *(_QWORD *)v57;
            *(_DWORD *)v133 = 136315138;
            *(_QWORD *)&v133[4] = v84;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, chose, downloadState, %s", v133);
            v86 = (char *)v85;
            sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v85);
            if (v86 != buf)
              free(v86);
            v25 = (_OWORD *)(a1 + 248);
          }
          v60 = *(_QWORD *)(v57 + 24);
          *(_BYTE *)(v60 + 80) = v129;
          *(_BYTE *)(v60 + 81) = 1;
          if (*(char *)(v36 + 79) >= 0)
            v61 = v36 + 56;
          else
            v61 = *(_QWORD *)(v36 + 56);
          v62 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v61);
          if (!*(_BYTE *)(v36 + 80))
          {
            v63 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
            if (*(char *)(v36 + 111) >= 0)
              v64 = v36 + 88;
            else
              v64 = *(_QWORD *)(v36 + 88);
            v62 = (NSString *)objc_msgSend(v63, "defaultForKey:defaultValue:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v64), v62);
          }
          sub_1015A2E04(buf, (char *)-[NSString UTF8String](v62, "UTF8String"));
          v65 = sub_100FA0AC4(v33, (uint64_t)buf, *(_QWORD *)(v57 + 24));
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (!v65)
            goto LABEL_169;
          *(_BYTE *)(v57 + 8) = 1;
          *(double *)(v57 + 16) = a2;
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102197858);
          ++v125;
          v66 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v33 + 16))(buf, v33);
            v67 = buf;
            if (buf[23] < 0)
              v67 = *(_BYTE **)buf;
            *(_DWORD *)v133 = v121;
            *(_DWORD *)&v133[4] = v125;
            *(_WORD *)&v133[8] = 2080;
            *(_QWORD *)&v133[10] = v67;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s", v133, 0x12u);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_102197858);
            v87 = qword_1022A0028;
            (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v33 + 16))(v133, v33);
            v88 = v133;
            if (v133[23] < 0)
              v88 = *(_BYTE **)v133;
            *(_DWORD *)__p = v121;
            *(_DWORD *)&__p[4] = v125;
            *(_WORD *)&__p[8] = 2080;
            *(_QWORD *)&__p[10] = v88;
            LODWORD(v119) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, 2, "TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s", __p, v119);
            v90 = v89;
            if ((v133[23] & 0x80000000) != 0)
              operator delete(*(void **)v133);
            sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v90);
            if (v90 != buf)
              free(v90);
            v25 = (_OWORD *)(a1 + 248);
          }
          sub_100FB9CE8((_DWORD *)(v36 + 232), 1);
          sub_1015A2E04(buf, "startDownloading");
          sub_100CDC4CC(v36 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 424));
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          if (sub_1001DFAE8())
          {
            sub_100119F3C(buf);
            v68 = (char *)(v33 + 8);
            if (*(char *)(v33 + 31) < 0)
              v68 = *(char **)v68;
            sub_1005285B4((uint64_t)buf, "getTile", v68);
            sub_10011B47C((uint64_t)buf, "protection", (_BYTE *)(a1 + 200));
            sub_10011B47C((uint64_t)buf, "isCurrentTile", &v132);
            sub_10011B47C((uint64_t)buf, "isAllowCellular", &v129);
            sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
            sub_10011A5A8(buf);
          }
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v69 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            v70 = sub_1001CC818(*v34);
            v71 = sub_1001C087C((uint64_t)v34);
            v72 = sub_1001C0858((uint64_t)v34);
            v2 = (uint64_t *)*(unsigned int *)(a1 + 424);
            v73 = -[NSString UTF8String](v62, "UTF8String");
            *(_DWORD *)buf = v120;
            *(_QWORD *)&buf[4] = v70;
            *(_WORD *)&buf[12] = 2049;
            *(double *)&buf[14] = v71;
            *(_WORD *)&buf[22] = 2049;
            *(double *)&buf[24] = v72;
            *(_WORD *)&buf[32] = 1026;
            *(_DWORD *)&buf[34] = (_DWORD)v2;
            *(_WORD *)v138 = 2081;
            *(_QWORD *)&v138[2] = v73;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s", buf, 0x30u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_169;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197838);
          v91 = qword_1022A0048;
          v92 = sub_1001CC818(*v34);
          v93 = sub_1001C087C((uint64_t)v34);
          v94 = sub_1001C0858((uint64_t)v34);
          v2 = (uint64_t *)*(unsigned int *)(a1 + 424);
          v95 = -[NSString UTF8String](v62, "UTF8String");
          *(_DWORD *)v133 = v120;
          *(_QWORD *)&v133[4] = v92;
          *(_WORD *)&v133[12] = 2049;
          *(double *)&v133[14] = v93;
          *(_WORD *)&v133[22] = 2049;
          *(double *)&v133[24] = v94;
          *(_WORD *)&v133[32] = 1026;
          *(_DWORD *)&v133[34] = (_DWORD)v2;
          *(_WORD *)v134 = 2081;
          *(_QWORD *)&v134[2] = v95;
          LODWORD(v119) = 48;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v91, 0, "@TileReq, %{public}s, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s", v133, v119);
          v50 = (char *)v96;
          sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v96);
          goto LABEL_108;
        }
      }
      goto LABEL_169;
    }
LABEL_116:
    v123 = 1;
    v129 = 1;
    goto LABEL_117;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v125;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, not scheduling more", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    *(_DWORD *)v133 = 67109120;
    *(_DWORD *)&v133[4] = v125;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "TILE: checkDownloadSchedule, numOfActiveDownloads, %d, not scheduling more", v133);
    v9 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)", "%s\n", v22);
    goto LABEL_264;
  }
}

void sub_10016AE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_10016AE80()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return dword_102303CA8 == 143;
}

void sub_10016AEC8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD *v5;
  int v6;
  int v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint8_t *v27;
  _BYTE v28[24];
  uint64_t v29;
  _BYTE v30[24];
  __int128 v31;
  int v32;
  uint8_t buf[4];
  _QWORD *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;

  if (!*(_BYTE *)(a1 + 1))
    return;
  if (*(double *)(a2 + 76) < 0.0
    || *(double *)(a2 + 504) < 0.0
    || sub_10011CE64(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v4 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v5 = (_QWORD *)*v5;
      v6 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 136380931;
      v34 = v5;
      v35 = 1026;
      LODWORD(v36) = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLNMEAScreener,store,%{private}s,invalid location input,type,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021512B8);
      v20 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v20 = (_QWORD *)*v20;
      v21 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)v30 = 136380931;
      *(_QWORD *)&v30[4] = v20;
      *(_WORD *)&v30[12] = 1026;
      *(_DWORD *)&v30[14] = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 0, "CLNMEAScreener,store,%{private}s,invalid location input,type,%{public}d", v30, 18);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLNmeaScreener::updateExternalLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    return;
  }
  v7 = *(_DWORD *)(a2 + 96);
  if ((v7 & 0xFFFFFFF7) == 1 && !*(_BYTE *)(a2 + 516))
  {
    if (*(_QWORD *)(a2 + 680))
    {
      *(_QWORD *)v30 = 0xBFF0000000000000;
      *(_OWORD *)&v30[8] = 0u;
      v31 = 0u;
      v32 = 0;
      v8 = sub_1001FCBB4();
      sub_100754C70((uint64_t)v30, *(uint64_t **)(a2 + 680), v8);
      if (*(int *)&v30[8] <= 19 && *(_DWORD *)&v30[12] == *(_DWORD *)&v30[8])
      {
        *(_BYTE *)(a1 + 417) = 0;
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021512B8);
        v9 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
        {
          v10 = *(_QWORD *)(a2 + 4);
          v11 = *(_QWORD *)(a2 + 12);
          *(_DWORD *)buf = 134349825;
          v34 = *(_QWORD **)v30;
          v35 = 2049;
          v36 = v10;
          v37 = 2049;
          v38 = v11;
          v39 = 1026;
          v40 = -1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLNmeaScreener,store,validityTimeMCT,%{public}.1lf,lat,%{private}.3f,lon,%{private}.3f,goodGNSSTracking,%{public}d", buf, 0x26u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021512B8);
        v12 = *(_QWORD *)(a2 + 4);
        v13 = *(_QWORD *)(a2 + 12);
        *(_DWORD *)v28 = 134349825;
        *(_QWORD *)&v28[4] = *(_QWORD *)v30;
        *(_WORD *)&v28[12] = 2049;
        *(_QWORD *)&v28[14] = v12;
        *(_WORD *)&v28[22] = 2049;
        LOWORD(v29) = 1026;
        *(_DWORD *)((char *)&v29 + 2) = -1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNmeaScreener,store,validityTimeMCT,%{public}.1lf,lat,%{private}.3f,lon,%{private}.3f,goodGNSSTracking,%{public}d", v28, 38, *(_OWORD *)v28, *(_QWORD *)&v28[16], v13, v29);
      }
      else
      {
        *(_QWORD *)(a1 + 424) = *(_QWORD *)v30;
        *(_BYTE *)(a1 + 417) = sub_100754D84((uint64_t)v30);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021512B8);
        v16 = qword_1022A0008;
        if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
        {
          v17 = *(_QWORD *)(a2 + 4);
          v18 = *(_QWORD *)(a2 + 12);
          v19 = *(unsigned __int8 *)(a1 + 417);
          *(_DWORD *)buf = 134349825;
          v34 = *(_QWORD **)v30;
          v35 = 2049;
          v36 = v17;
          v37 = 2049;
          v38 = v18;
          v39 = 1026;
          v40 = v19;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLNmeaScreener,store,validityTimeMCT,%{public}.1lf,lat,%{private}.3f,lon,%{private}.3f,goodGNSSTracking,%{public}d", buf, 0x26u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_33;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0000 != -1)
          dispatch_once(&qword_1022A0000, &stru_1021512B8);
        v24 = *(_QWORD *)(a2 + 4);
        v25 = *(_QWORD *)(a2 + 12);
        v26 = *(unsigned __int8 *)(a1 + 417);
        *(_DWORD *)v28 = 134349825;
        *(_QWORD *)&v28[4] = *(_QWORD *)v30;
        *(_WORD *)&v28[12] = 2049;
        *(_QWORD *)&v28[14] = v24;
        *(_WORD *)&v28[22] = 2049;
        LOWORD(v29) = 1026;
        *(_DWORD *)((char *)&v29 + 2) = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNmeaScreener,store,validityTimeMCT,%{public}.1lf,lat,%{private}.3f,lon,%{private}.3f,goodGNSSTracking,%{public}d", v28, 38, *(_OWORD *)v28, *(_QWORD *)&v28[16], v25, v29);
      }
      v27 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLNmeaScreener::updateExternalLocation(const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
      if (v27 != buf)
        free(v27);
    }
LABEL_33:
    sub_10016B518((uint64_t *)(a1 + 72), a2);
    sub_10016B518((uint64_t *)(a1 + 128), a2);
    return;
  }
  switch(v7)
  {
    case 4:
    case 11:
    case 13:
      v15 = (uint64_t *)(a1 + 184);
      goto LABEL_36;
    case 6:
      v15 = (uint64_t *)(a1 + 240);
      goto LABEL_36;
    case 7:
      v15 = (uint64_t *)(a1 + 296);
LABEL_36:
      sub_10016B518(v15, a2);
      break;
    default:
      return;
  }
}

void sub_10016B518(uint64_t *a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  _DWORD v22[2];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;

  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 96);
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 4);
  v4 = *(double *)(a2 + 184);
  *((double *)a1 + 2) = v4;
  if (v4 <= 0.0)
    a1[2] = *(_QWORD *)(a2 + 76);
  *((double *)a1 + 3) = fmax(*(double *)(a2 + 20), 0.0);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 132);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021512B8);
  v5 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(a2 + 96);
    v7 = *a1;
    v8 = a1[1];
    v9 = a1[2];
    v10 = a1[3];
    v11 = *((_DWORD *)a1 + 9);
    v12 = *(_QWORD *)(a2 + 184);
    *(_DWORD *)buf = 67241729;
    v36 = v6;
    v37 = 2049;
    v38 = v7;
    v39 = 2049;
    v40 = v8;
    v41 = 2050;
    v42 = v9;
    v43 = 2050;
    v44 = v10;
    v45 = 1026;
    v46 = v11;
    v47 = 2050;
    v48 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLNmeaScreener,store,type,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf,timestampGPS,%{public}.1lf,fHorizontalUncertainty,%{public}.1lf,refFrame,%{public}d,timestampGps,%{public}.1lf", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021512B8);
    v13 = *(_DWORD *)(a2 + 96);
    v14 = *a1;
    v15 = a1[1];
    v16 = a1[2];
    v17 = a1[3];
    v18 = *((_DWORD *)a1 + 9);
    v19 = *(_QWORD *)(a2 + 184);
    v22[0] = 67241729;
    v22[1] = v13;
    v23 = 2049;
    v24 = v14;
    v25 = 2049;
    v26 = v15;
    v27 = 2050;
    v28 = v16;
    v29 = 2050;
    v30 = v17;
    v31 = 1026;
    v32 = v18;
    v33 = 2050;
    v34 = v19;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLNmeaScreener,store,type,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf,timestampGPS,%{public}.1lf,fHorizontalUncertainty,%{public}.1lf,refFrame,%{public}d,timestampGps,%{public}.1lf", v22, 64);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLNmeaScreener::ExternalLocationData::fillData(const CLLocationProvider_Type::NotificationData &)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
}

void sub_10016B7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssOdometer::onRhythmicModeOfOperationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102161428);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssOdometer::onRhythmicModeOfOperationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102161428);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssOdometer::onRhythmicModeOfOperationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10016B974(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10016B954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10016B974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  BOOL v11;
  char v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  const char *v25;
  uint8_t *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;

  *(_BYTE *)(a1 + 666) = *(_BYTE *)(a1 + 669);
  *(_WORD *)(a1 + 667) = *(_WORD *)(a1 + 670);
  v5 = *(_DWORD *)(a4 + 1448);
  v6 = *(unsigned __int8 *)(a4 + 1452);
  v7 = *(_DWORD *)(a4 + 1456);
  v8 = *(_QWORD *)(a4 + 1464);
  v9 = *(unsigned __int8 *)(a4 + 1472);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102161408);
  v10 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241472;
    v55 = v5;
    v56 = 1026;
    v57 = v7;
    v58 = 1026;
    v59 = v8 & 1;
    v60 = 1026;
    v61 = (v8 >> 1) & 1;
    v62 = 1026;
    v63 = v6;
    v64 = 1026;
    v65 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "GPSODOM,onRhythmicModeOfOperationNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v38 = 67241472;
    v39 = v5;
    v40 = 1026;
    v41 = v7;
    v42 = 1026;
    v43 = v8 & 1;
    v44 = 1026;
    v45 = (v8 >> 1) & 1;
    v46 = 1026;
    v47 = v6;
    v48 = 1026;
    v49 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,onRhythmicModeOfOperationNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", &v38, 38);
    v26 = (uint8_t *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v25);
    if (v26 != buf)
      free(v26);
  }
  *(_BYTE *)(a1 + 669) = v8 & 1;
  if (v5 == 1)
  {
    if (v9)
      v11 = v7 == 1;
    else
      v11 = 0;
    v12 = v11;
    *(_BYTE *)(a1 + 670) = v12;
  }
  if ((v8 & 2) != 0)
    LOBYTE(v13) = 0;
  else
    v13 = (*(unsigned __int8 *)(a1 + 744) >> 1) & 1;
  *(_BYTE *)(a1 + 671) = v13;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102161408);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v15 = *(unsigned __int8 *)(a1 + 666);
    v16 = *(unsigned __int8 *)(a1 + 669);
    v17 = *(unsigned __int8 *)(a1 + 667);
    v18 = *(unsigned __int8 *)(a1 + 670);
    v19 = *(unsigned __int8 *)(a1 + 668);
    v20 = *(unsigned __int8 *)(a1 + 671);
    v21 = *(unsigned __int8 *)(a1 + 672);
    v22 = *(unsigned __int8 *)(a1 + 673);
    *(_DWORD *)buf = 67241984;
    v55 = v15;
    v56 = 1026;
    v57 = v16;
    v58 = 1026;
    v59 = v17;
    v60 = 1026;
    v61 = v18;
    v62 = 1026;
    v63 = v19;
    v64 = 1026;
    v65 = v20;
    v66 = 1026;
    v67 = v21;
    v68 = 1026;
    v69 = v22;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "GPSODOM,1Hz before,%{public}d,after,%{public}d,Rhythmic before,%{public}d,after,%{public}d,RhythmicFixQualified before,%{public}d,after,%{public}d,LowPowerMode,%{public}d,InAWalkOrRunWorkout,%{public}d", buf, 0x32u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
    v27 = *(unsigned __int8 *)(a1 + 666);
    v28 = *(unsigned __int8 *)(a1 + 669);
    v29 = *(unsigned __int8 *)(a1 + 667);
    v30 = *(unsigned __int8 *)(a1 + 670);
    v31 = *(unsigned __int8 *)(a1 + 668);
    v32 = *(unsigned __int8 *)(a1 + 671);
    v33 = *(unsigned __int8 *)(a1 + 672);
    v34 = *(unsigned __int8 *)(a1 + 673);
    v38 = 67241984;
    v39 = v27;
    v40 = 1026;
    v41 = v28;
    v42 = 1026;
    v43 = v29;
    v44 = 1026;
    v45 = v30;
    v46 = 1026;
    v47 = v31;
    v48 = 1026;
    v49 = v32;
    v50 = 1026;
    v51 = v33;
    v52 = 1026;
    v53 = v34;
    LODWORD(v37) = 50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "GPSODOM,1Hz before,%{public}d,after,%{public}d,Rhythmic before,%{public}d,after,%{public}d,RhythmicFixQualified before,%{public}d,after,%{public}d,LowPowerMode,%{public}d,InAWalkOrRunWorkout,%{public}d", &v38, v37);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssOdometer::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  v23 = *(_QWORD *)(a1 + 32);
  if (v23)
    sub_10121C208(v23, *(unsigned __int8 *)(a1 + 669), *(unsigned __int8 *)(a1 + 666), *(unsigned __int8 *)(a1 + 670), *(unsigned __int8 *)(a1 + 667), *(unsigned __int8 *)(a1 + 671), *(unsigned __int8 *)(a1 + 668), *(unsigned __int8 *)(a1 + 672), *(_BYTE *)(a1 + 673));
  *(_QWORD *)(a1 + 744) = v8;
  *(_DWORD *)(a1 + 736) = v7;
  *(_BYTE *)(a1 + 732) = v6;
  *(_BYTE *)(a1 + 752) = v9;
  v24 = *(_BYTE *)(a1 + 670);
  if (v24)
  {
    v24 = *(_BYTE *)(a1 + 672);
    if (v24)
      v24 = *(_BYTE *)(a1 + 673) != 0;
  }
  *(_BYTE *)(a1 + 670) = v24;
}

void sub_10016BE4C(_QWORD *a1, int *a2, uint64_t a3, double a4)
{
  int v6;
  double v7;
  double v8;
  double v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  uint64_t v17;
  char **v18;
  unint64_t v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  char *v44;
  _OWORD *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  NSObject *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  char *v71;
  int v72;
  const char *v73;
  double v74;
  int v75;
  _BYTE v76[18];
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  _BYTE buf[32];
  _BYTE v84[32];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[94];

  v6 = *a2;
  if (!*a2)
    goto LABEL_4;
  if (v6 == 22)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v16 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      v17 = sub_10104BD1C(*(int **)(a3 + 800));
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Fence: received WSB, %lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v68 = qword_1022A0068;
      v69 = sub_10104BD1C(*(int **)(a3 + 800));
      v75 = 134217984;
      *(_QWORD *)v76 = v69;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, 2, "Fence: received WSB, %lu", &v75);
      v71 = (char *)v70;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationNotification(const CFAbsoluteTime, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v70);
      if (v71 != buf)
        free(v71);
    }
    v18 = (char **)(a1 + 18);
    a1[19] = a1[18];
    if (sub_10104BD1C(*(int **)(a3 + 800)) && sub_10104BD1C(*(int **)(a3 + 800)))
    {
      v19 = 0;
      do
      {
        sub_10104B598(*(_QWORD *)(a3 + 800), v19, (uint64_t)buf);
        v20 = (_OWORD *)a1[19];
        v21 = a1[20];
        if ((unint64_t)v20 >= v21)
        {
          v30 = 0x6F96F96F96F96F97 * (((char *)v20 - *v18) >> 2);
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) > 0x1A41A41A41A41A4)
            sub_100259694();
          v32 = 0x6F96F96F96F96F97 * ((uint64_t)(v21 - (_QWORD)*v18) >> 2);
          if (2 * v32 > v31)
            v31 = 2 * v32;
          if (v32 >= 0xD20D20D20D20D2)
            v33 = 0x1A41A41A41A41A4;
          else
            v33 = v31;
          if (v33)
            v34 = (char *)sub_10055B5BC((uint64_t)(a1 + 20), v33);
          else
            v34 = 0;
          v35 = &v34[156 * v30];
          v36 = *(_OWORD *)&buf[16];
          *(_OWORD *)v35 = *(_OWORD *)buf;
          *((_OWORD *)v35 + 1) = v36;
          v37 = *(_OWORD *)v84;
          v38 = *(_OWORD *)&v84[16];
          v39 = v86;
          *((_OWORD *)v35 + 4) = v85;
          *((_OWORD *)v35 + 5) = v39;
          *((_OWORD *)v35 + 2) = v37;
          *((_OWORD *)v35 + 3) = v38;
          v40 = v87;
          v41 = v88;
          v42 = v89[0];
          *(_OWORD *)(v35 + 140) = *(_OWORD *)((char *)v89 + 12);
          *((_OWORD *)v35 + 7) = v41;
          *((_OWORD *)v35 + 8) = v42;
          *((_OWORD *)v35 + 6) = v40;
          v44 = (char *)a1[18];
          v43 = (char *)a1[19];
          v45 = v35;
          if (v43 != v44)
          {
            do
            {
              v46 = *(_OWORD *)(v43 - 156);
              *(_OWORD *)((char *)v45 - 140) = *(_OWORD *)(v43 - 140);
              *(_OWORD *)((char *)v45 - 156) = v46;
              v47 = *(_OWORD *)(v43 - 124);
              v48 = *(_OWORD *)(v43 - 108);
              v49 = *(_OWORD *)(v43 - 92);
              *(_OWORD *)((char *)v45 - 76) = *(_OWORD *)(v43 - 76);
              *(_OWORD *)((char *)v45 - 92) = v49;
              *(_OWORD *)((char *)v45 - 108) = v48;
              *(_OWORD *)((char *)v45 - 124) = v47;
              v50 = *(_OWORD *)(v43 - 60);
              v51 = *(_OWORD *)(v43 - 44);
              v52 = *(_OWORD *)(v43 - 28);
              *(v45 - 1) = *((_OWORD *)v43 - 1);
              *(_OWORD *)((char *)v45 - 28) = v52;
              *(_OWORD *)((char *)v45 - 44) = v51;
              *(_OWORD *)((char *)v45 - 60) = v50;
              v45 = (_OWORD *)((char *)v45 - 156);
              v43 -= 156;
            }
            while (v43 != v44);
            v43 = *v18;
          }
          v29 = v35 + 156;
          a1[18] = v45;
          a1[19] = v35 + 156;
          a1[20] = &v34[156 * v33];
          if (v43)
            operator delete(v43);
        }
        else
        {
          v22 = *(_OWORD *)&buf[16];
          *v20 = *(_OWORD *)buf;
          v20[1] = v22;
          v23 = *(_OWORD *)v84;
          v24 = *(_OWORD *)&v84[16];
          v25 = v86;
          v20[4] = v85;
          v20[5] = v25;
          v20[2] = v23;
          v20[3] = v24;
          v26 = v87;
          v27 = v88;
          v28 = v89[0];
          *(_OWORD *)((char *)v20 + 140) = *(_OWORD *)((char *)v89 + 12);
          v20[7] = v27;
          v20[8] = v28;
          v20[6] = v26;
          v29 = (char *)v20 + 156;
        }
        a1[19] = v29;
        ++v19;
      }
      while (v19 < sub_10104BD1C(*(int **)(a3 + 800)));
    }
    return;
  }
  if (v6 != 3)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v66 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v67 = *a2;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v67;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#Warning Fence: Got unknown location notification %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v72 = *a2;
      v75 = 67240192;
      *(_DWORD *)v76 = v72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Fence: Got unknown location notification %{public}d", &v75, 8);
      v15 = (char *)v73;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationNotification(const CFAbsoluteTime, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v73);
      goto LABEL_65;
    }
  }
  else
  {
LABEL_4:
    v7 = *(double *)(a3 + 88);
    v8 = *(double *)(a3 + 76);
    if (v7 >= 0.0 && v7 + v8 < a4)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v53 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v54 = *(_QWORD *)(a3 + 4);
        v55 = *(_QWORD *)(a3 + 12);
        v56 = *(_QWORD *)(a3 + 20);
        v57 = *(_QWORD *)(a3 + 76);
        v58 = *(_QWORD *)(a3 + 88);
        *(_DWORD *)buf = 134284545;
        *(_QWORD *)&buf[4] = v54;
        *(_WORD *)&buf[12] = 2049;
        *(_QWORD *)&buf[14] = v55;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v56;
        *(_WORD *)v84 = 2050;
        *(_QWORD *)&v84[2] = v57;
        *(_WORD *)&v84[10] = 2050;
        *(_QWORD *)&v84[12] = v58;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "Fence: Ignoring expired location <%{private}+.8f, %{private}.8f>, acc %{public}.2f, timestamp %{public}.2f, lifespan %{public}.2f", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v59 = *(_QWORD *)(a3 + 4);
        v60 = *(_QWORD *)(a3 + 12);
        v61 = *(_QWORD *)(a3 + 20);
        v62 = *(_QWORD *)(a3 + 76);
        v63 = *(_QWORD *)(a3 + 88);
        v75 = 134284545;
        *(_QWORD *)v76 = v59;
        *(_WORD *)&v76[8] = 2049;
        *(_QWORD *)&v76[10] = v60;
        v77 = 2050;
        v78 = v61;
        v79 = 2050;
        v80 = v62;
        v81 = 2050;
        v82 = v63;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Ignoring expired location <%{private}+.8f, %{private}.8f>, acc %{public}.2f, timestamp %{public}.2f, lifespan %{public}.2f", &v75, 52);
        v15 = (char *)v64;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationNotification(const CFAbsoluteTime, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v64);
        goto LABEL_65;
      }
    }
    else
    {
      if (vabdd_f64(a4, v8) <= 10.0)
      {
        sub_100D4EDA4((uint64_t)a1, a3, a3 + 160, a4);
        return;
      }
      if (qword_1022A0060 != -1)
      {
        v74 = a4;
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
        a4 = v74;
      }
      v10 = a4 - v8;
      v11 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
      {
        v12 = *(_DWORD *)(a3 + 96);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v12;
        *(_WORD *)&buf[8] = 2050;
        *(double *)&buf[10] = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Fence: Ignoring old location, type, %{public}d, age, %{public}.1f", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v13 = *(_DWORD *)(a3 + 96);
        v75 = 67240448;
        *(_DWORD *)v76 = v13;
        *(_WORD *)&v76[4] = 2050;
        *(double *)&v76[6] = v10;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: Ignoring old location, type, %{public}d, age, %{public}.1f", &v75, 18);
        v15 = (char *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::handleLocationNotification(const CFAbsoluteTime, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v14);
LABEL_65:
        if (v15 != buf)
          free(v15);
      }
    }
  }
}

void sub_10016C710(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD v10[2];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 2618);
    *(_DWORD *)buf = 67240192;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stop emergency acquisition, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v6 = *(unsigned __int8 *)(a1 + 2618);
    LODWORD(v10[0]) = 67240192;
    HIDWORD(v10[0]) = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Stop emergency acquisition, %{public}d", v10, 8);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopEmergencyAcquisition()", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  if (*(_BYTE *)(a1 + 2618))
  {
    *(_BYTE *)(a1 + 2618) = 0;
    if (_os_feature_enabled_impl("CoreLocation", "Nautilus_AlwaysOn"))
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v4 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Stopped emergency acquisition", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 == -1)
        {
LABEL_26:
          LOWORD(v10[0]) = 0;
          LODWORD(v9) = 2;
          v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Stopped emergency acquisition", v10, v9, v10[0]);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::stopEmergencyAcquisition()", "%s\n", v8);
          if (v8 != (char *)buf)
            free(v8);
          return;
        }
LABEL_28:
        dispatch_once(&qword_1022A0060, &stru_102181148);
        goto LABEL_26;
      }
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 2224) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 2224) + 8), 0);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      v5 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stopped emergency acquisition", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 == -1)
          goto LABEL_26;
        goto LABEL_28;
      }
    }
  }
}

uint64_t sub_10016CAE8(uint64_t a1)
{
  NSObject *v2;
  double Current;
  NSObject *v4;
  uint64_t result;
  double v6;
  char *v7;
  char *v8;
  std::string __p;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2360))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelLocationWatchdog", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: cancelLocationWatchdog", &__p, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelLocationWatchdog()", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    objc_msgSend(*(id *)(a1 + 2360), "setNextFireDelay:", 1.79769313e308);
    *(_BYTE *)(a1 + 2616) = 0;
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1015A2E04(&__p, "NoLocationWatchdog");
      sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: cancelLocationWatchdog, ignore, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: cancelLocationWatchdog, ignore, shutdown?", &__p, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::cancelLocationWatchdog()", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
  if ((_DWORD)result)
  {
    v6 = CFAbsoluteTimeGetCurrent();
    result = sub_100D57938(a1 + 120, v6);
  }
  if (*(int *)(a1 + 2432) >= 1)
    return sub_100E3E6F0(a1 + 2424);
  return result;
}

void sub_10016CE5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

BOOL sub_10016CE94()
{
  uint64_t v0;
  const char *v1;
  CFAbsoluteTime Current;

  v0 = sub_1001FD94C();
  v1 = off_1022FB108;
  Current = CFAbsoluteTimeGetCurrent();
  return sub_10018A4CC(v0, v1, &Current);
}

double sub_10016CEDC(uint64_t a1, uint64_t a2, double *a3)
{
  double v4;

  v4 = sub_10016F4A8((double *)(a1 + 4), a2, a3) - *(double *)(a1 + 20);
  if (*(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
    return v4 - sub_10016F694(a2);
  return v4;
}

__n128 sub_10016CF30(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v2;
  v3 = a2[2];
  v4 = a2[3];
  v5 = a2[4];
  *(_OWORD *)(a1 + 88) = a2[5];
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  result = (__n128)a2[6];
  v7 = a2[7];
  v8 = a2[8];
  *(_OWORD *)(a1 + 148) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(__n128 *)(a1 + 104) = result;
  return result;
}

_QWORD *sub_10016CF74(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  ++result[23];
  switch(*(_DWORD *)(a2 + 96))
  {
    case 1:
    case 3:
      v2 = result + 24;
      goto LABEL_7;
    case 4:
      v2 = result + 27;
      goto LABEL_7;
    case 6:
    case 7:
      v2 = result + 28;
      goto LABEL_7;
    case 0xA:
      v2 = result + 25;
      goto LABEL_7;
    case 0xB:
      v2 = result + 26;
LABEL_7:
      ++*v2;
      break;
    default:
      return result;
  }
  return result;
}

double sub_10016CFDC(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 4) = *(_OWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a1 + 136);
  result = *(double *)(a1 + 116);
  *(double *)(a1 + 60) = result;
  return result;
}

void sub_10016CFF8(uint64_t a1, double a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int v10;
  int v11;
  NSObject *v12;
  double v13;
  double v14;
  NSObject *v15;
  void (*v16)(void);
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  uint64_t v32;
  int v33;
  _BYTE v34[10];
  __int16 v35;
  _BOOL4 v36;
  uint8_t buf[4];
  _BYTE v38[10];
  __int16 v39;
  _BOOL4 v40;

  v4 = sub_10016D890(a1 + 904);
  if (*(_BYTE *)(a1 + 612) && ((v5 = v4, !*(_BYTE *)(a1 + 730)) || *(_BYTE *)(a1 + 731)))
  {
    if (v4)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v6 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Fence: FenceMonitorWifi needs tracking", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        LOWORD(v33) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: FenceMonitorWifi needs tracking", &v33, 2);
        v29 = (uint8_t *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::engageContinuousTrackingIfNeeded(const CFAbsoluteTime)", "%s\n", v28);
        if (v29 != buf)
          free(v29);
      }
    }
    v7 = *(_DWORD *)(a1 + 256);
    v8 = sub_10016E59C(a1);
    v9 = v8;
    if (v7 < 1)
      v10 = 1;
    else
      v10 = v5;
    if (v10)
      v11 = v5;
    else
      v11 = v8 | v5;
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v12 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v38 = v11;
      *(_WORD *)&v38[4] = 1026;
      *(_DWORD *)&v38[6] = v7;
      v39 = 1026;
      v40 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Fence: engageContinuousTrackingIfNeeded, isEngageContinousTracking, %{public}d, numOfMonitoredFences, %{public}d, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v33 = 67240704;
      *(_DWORD *)v34 = v11;
      *(_WORD *)&v34[4] = 1026;
      *(_DWORD *)&v34[6] = v7;
      v35 = 1026;
      v36 = v9;
      LODWORD(v32) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: engageContinuousTrackingIfNeeded, isEngageContinousTracking, %{public}d, numOfMonitoredFences, %{public}d, %{public}d", &v33, v32);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::engageContinuousTrackingIfNeeded(const CFAbsoluteTime)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    *(_BYTE *)(a1 + 623) = v11;
    if (v11)
    {
      v13 = *(double *)(a1 + 624);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v14 = v13 - a2;
      v15 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)v38 = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "engageContinuousTrackingIfNeeded, timeToNextTimer, %{public}lf", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v33 = 134349056;
        *(double *)v34 = v14;
        LODWORD(v32) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "engageContinuousTrackingIfNeeded, timeToNextTimer, %{public}lf", &v33, v32);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::engageContinuousTrackingIfNeeded(const CFAbsoluteTime)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      if (v14 <= 0.0 || v14 >= *(double *)(a1 + 720) * 1.2)
        sub_10016D898(a1, a2);
      v16 = *(void (**)(void))(**(_QWORD **)(a1 + 1768) + 304);
    }
    else
    {
      *(double *)(a1 + 624) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 144))(*(_QWORD *)(a1 + 1768));
      v16 = *(void (**)(void))(**(_QWORD **)(a1 + 1768) + 312);
    }
    v16();
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v17 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(unsigned __int8 *)(a1 + 612);
      v19 = *(unsigned __int8 *)(a1 + 728);
      v20 = *(unsigned __int8 *)(a1 + 730);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v38 = v18;
      *(_WORD *)&v38[4] = 1026;
      *(_DWORD *)&v38[6] = v19;
      v39 = 1026;
      v40 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Fence: location services disabled, no continous tracking, %{public}d, isAirplaneMode, %{public}d, cConnected, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v21 = *(unsigned __int8 *)(a1 + 612);
      v22 = *(unsigned __int8 *)(a1 + 728);
      v23 = *(unsigned __int8 *)(a1 + 730);
      v33 = 67240704;
      *(_DWORD *)v34 = v21;
      *(_WORD *)&v34[4] = 1026;
      *(_DWORD *)&v34[6] = v22;
      v35 = 1026;
      v36 = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: location services disabled, no continous tracking, %{public}d, isAirplaneMode, %{public}d, cConnected, %{public}d", &v33, 20);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::engageContinuousTrackingIfNeeded(const CFAbsoluteTime)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    *(_BYTE *)(a1 + 623) = 0;
    *(double *)(a1 + 624) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 144))(*(_QWORD *)(a1 + 1768));
  }
}

void sub_10016D6AC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102181148);
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 2624);
    *(_DWORD *)buf = 136380931;
    v15 = a2;
    v16 = 2049;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: releaseActivityAlarm, %{private}s, %{private}p", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v7 = *(_QWORD *)(a1 + 2624);
    v10 = 136380931;
    v11 = a2;
    v12 = 2049;
    v13 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: releaseActivityAlarm, %{private}s, %{private}p", &v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFenceMonitorNotifier::releaseActivityAlarm(const char *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v6 = *(void **)(a1 + 2624);
  if (v6)
  {
    objc_msgSend(v6, "invalidate");

    *(_QWORD *)(a1 + 2624) = 0;
  }
}

uint64_t sub_10016D890(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 296);
}

void sub_10016D898(uint64_t a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  int v27;
  _BYTE v28[10];
  uint64_t v29;
  __int16 v30;
  double v31;
  uint8_t buf[4];
  _BYTE v33[10];
  uint64_t v34;
  __int16 v35;
  double v36;

  if (*(_BYTE *)(a1 + 752))
  {
    if (*(_BYTE *)(a1 + 612) && (!*(_BYTE *)(a1 + 730) || *(_BYTE *)(a1 + 731)))
    {
      if (sub_10016E59C(a1))
      {
        if (*(_BYTE *)(a1 + 623))
        {
          v4 = vabdd_f64(a2, *(double *)(a1 + 744));
          v5 = *(double *)(a1 + 736) - v4 * 45.0;
          if (v4 >= 1800.0)
            v5 = 0.0;
          if (v5 > 0.0)
            v6 = v5;
          else
            v6 = 0.0;
          v7 = fmin(fmax(v6 / 45.0 * 0.5, *(double *)(a1 + 720)), 3600.0);
          v26 = v7;
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v8 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            v9 = *(_QWORD *)(a1 + 736);
            *(_DWORD *)buf = 134284033;
            *(double *)v33 = v7;
            *(_WORD *)&v33[8] = 2049;
            v34 = v9;
            v35 = 2049;
            v36 = v6;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "scheduleNextTrackingWake, next wake in, %{private}.1lf, seconds, fMinDistanceToFence, %{private}.1lf, minDistanceToFence, %{private}.1lf", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v22 = *(_QWORD *)(a1 + 736);
            v27 = 134284033;
            *(double *)v28 = v7;
            *(_WORD *)&v28[8] = 2049;
            v29 = v22;
            v30 = 2049;
            v31 = v6;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "scheduleNextTrackingWake, next wake in, %{private}.1lf, seconds, fMinDistanceToFence, %{private}.1lf, minDistanceToFence, %{private}.1lf", &v27, 32);
            v24 = (uint8_t *)v23;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::scheduleNextTrackingWake(const CFAbsoluteTime)", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          v10 = vabdd_f64(v7 + a2, *(double *)(a1 + 624));
          if (v10 >= 30.0)
          {
            *(double *)(a1 + 624) = (*(double (**)(_QWORD, double *))(**(_QWORD **)(a1 + 1768) + 152))(*(_QWORD *)(a1 + 1768), &v26);
            sub_100ED2AFC(a1 + 1312);
            return;
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v11 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)v33 = v10;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "scheduleNextTrackingWake, intervalSinceLastDate is too low, %{private}.1lf", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            v27 = 134283521;
            *(double *)v28 = v10;
            LODWORD(v25) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "scheduleNextTrackingWake, intervalSinceLastDate is too low, %{private}.1lf", &v27, v25);
LABEL_58:
            v21 = (uint8_t *)v12;
            sub_100512490("Generic", 1, 0, 2, "void CLFenceMonitor::scheduleNextTrackingWake(const CFAbsoluteTime)", "%s\n", v12);
            if (v21 != buf)
              free(v21);
          }
        }
        else
        {
          *(double *)(a1 + 624) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 144))(*(_QWORD *)(a1 + 1768));
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          v20 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextTrackingWake, continous tracking is disabled", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_1021826B0);
            LOWORD(v27) = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextTrackingWake, continous tracking is disabled", &v27, 2);
            goto LABEL_58;
          }
        }
      }
      else
      {
        *(double *)(a1 + 624) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 144))(*(_QWORD *)(a1 + 1768));
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v19 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextTrackingWake, all fences are low power ones", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_1021826B0);
          LOWORD(v27) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextTrackingWake, all fences are low power ones", &v27, 2);
          goto LABEL_58;
        }
      }
    }
    else
    {
      *(double *)(a1 + 624) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 144))(*(_QWORD *)(a1 + 1768));
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v14 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(unsigned __int8 *)(a1 + 728);
        v16 = *(unsigned __int8 *)(a1 + 730);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)v33 = v15;
        *(_WORD *)&v33[4] = 1026;
        *(_DWORD *)&v33[6] = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextTrackingWake, location services not enabled, airplane, %{public}d, cConnected, %{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_1021826B0);
        v17 = *(unsigned __int8 *)(a1 + 728);
        v18 = *(unsigned __int8 *)(a1 + 730);
        v27 = 67240448;
        *(_DWORD *)v28 = v17;
        *(_WORD *)&v28[4] = 1026;
        *(_DWORD *)&v28[6] = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextTrackingWake, location services not enabled, airplane, %{public}d, cConnected, %{public}d", &v27, 14);
        goto LABEL_58;
      }
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v13 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Fence: scheduleNextTrackingWake - disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      LOWORD(v27) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: scheduleNextTrackingWake - disabled", &v27, 2);
      goto LABEL_58;
    }
  }
}

double sub_10016E054(uint64_t a1)
{
  NSObject *v2;
  double Current;
  NSObject *v4;
  char *v6;
  char *v7;
  std::string __p;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 2352))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: cancelTrackingWake", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: cancelTrackingWake", &__p, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::cancelTrackingWake()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    sub_10016E3C4(*(_QWORD *)(a1 + 2352));
    if (*(_QWORD *)(a1 + 2960))
    {
      sub_100166054(buf);
      Current = CFAbsoluteTimeGetCurrent();
      sub_1009865BC(*(_QWORD *)(a1 + 2352), (uint64_t)&__p);
      sub_100ABDE4C(&__p, 3u, (uint64_t)buf, Current, -1.0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)buf);
      sub_100166004(buf);
    }
  }
  else
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181148);
    v4 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Fence: ignoring, cancelTrackingWake, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102181148);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: ignoring, cancelTrackingWake, shutdown?", &__p, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLFenceMonitorNotifier::cancelTrackingWake()", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
  return 0.0;
}

void sub_10016E38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0)
    operator delete(__p);
  sub_100166004(&a18);
  _Unwind_Resume(a1);
}

id sub_10016E3C4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v5;
  char *v6;
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  objc_msgSend(*(id *)(a1 + 24), "assertInside");
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021612F0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)buf = 136315138;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Invalidate, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    v5 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v5 = (_QWORD *)*v5;
    v7 = 136315138;
    v8 = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "Invalidate, %s", (const char *)&v7);
    sub_100512490("Generic", 1, 0, 2, "void CLPersistentTimer::invalidate()", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return objc_msgSend(*(id *)a1, "invalidate");
}

BOOL sub_10016E59C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BOOL8 result;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)(a1 + 240);
  v2 = (_QWORD *)(a1 + 248);
  if (v1 == (_QWORD *)(a1 + 248))
    return 0;
  do
  {
    result = (v1[24] & 0x20) == 0;
    if ((v1[24] & 0x20) == 0)
      break;
    v4 = (_QWORD *)v1[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v1[2];
        v6 = *v5 == (_QWORD)v1;
        v1 = v5;
      }
      while (!v6);
    }
    v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t sub_10016E600(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v6;
  const char *v7;
  int v8;
  BOOL v9;
  NSObject *v10;
  int v11;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  int v17;
  int v18;
  int v19;
  char v20;
  uint8_t *v21;
  _QWORD v22[2];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 615) && sub_100B6ECF0(a2))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v6 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Fence: handleLocation, Ignoring cell or LAC position as per defaults", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: handleLocation, Ignoring cell or LAC position as per defaults", v22, 2, v22[0]);
LABEL_58:
    v21 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitor::shouldIgnoreLocation(const CFAbsoluteTime, const CLDaemonLocation &)", "%s\n", v7);
    if (v21 != buf)
      free(v21);
    return 1;
  }
  if (!*(_BYTE *)(a1 + 616))
  {
    v11 = *(_DWORD *)(a2 + 96);
    if (v11 == 11 || v11 == 4)
    {
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      v13 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Fence: handleLocation, Ignoring WiFi position as per defaults", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021826B0);
      LOWORD(v22[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: handleLocation, Ignoring WiFi position as per defaults", v22, 2, v22[0]);
      goto LABEL_58;
    }
  }
  v8 = *(_DWORD *)(a2 + 96);
  if (*(_BYTE *)(a1 + 617))
    v9 = 0;
  else
    v9 = (v8 & 0xFFFFFFF7) == 1;
  if (v9)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v14 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Fence: handleLocation, Ignoring GPS position as per defaults", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: handleLocation, Ignoring GPS position as per defaults", v22, 2, v22[0]);
    goto LABEL_58;
  }
  if (!*(_BYTE *)(a1 + 618) && v8 == 10)
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v10 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Fence: handleLocation, Ignoring Pipeline position as per defaults", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: handleLocation, Ignoring Pipeline position as per defaults", v22, 2, v22[0]);
    goto LABEL_58;
  }
  if (*(double *)(a2 + 76) == *(double *)(a1 + 672))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    v15 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Fence: handleLocation, Ignoring duplicate location", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021826B0);
    LOWORD(v22[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: handleLocation, Ignoring duplicate location", v22, 2, v22[0]);
    goto LABEL_58;
  }
  v17 = *(_DWORD *)(a1 + 684);
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 392))(*(_QWORD *)(a1 + 1768));
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 16))(*(_QWORD *)(a1 + 1768));
  v20 = sub_10016F498(a1 + 904);
  return sub_10016EC00((double *)(a1 + 664), (int *)(a1 + 680), a1 + 288, a1 + 448, a2, v17, v18, v19, a3, v20);
}

BOOL sub_10016EBF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2248) != 0;
}

uint64_t sub_10016EC00(double *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, double a9, char a10)
{
  const std::string::value_type *v19;
  NSObject *v20;
  std::string *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  const std::string::value_type *v37;
  double v38;
  const std::string::value_type *v39;
  NSObject *v40;
  std::string *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  std::string *v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  const char *v61;
  uint8_t *v62;
  std::string *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  const char *v69;
  uint8_t *v70;
  const char *v71;
  uint8_t *v72;
  uint64_t v73;
  std::string v74;
  int v75;
  std::string *v76;
  __int16 v77;
  int v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  uint8_t buf[4];
  std::string *v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;

  memset(&v74, 0, sizeof(v74));
  v19 = "type";
  switch(*(_DWORD *)(a5 + 96))
  {
    case 0:
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      v19 = "other type";
      if (!a8 || !a10)
        goto LABEL_38;
      std::string::assign(&v74, "other leashed");
      *a1 = 0.0;
      *a2 = 0;
      goto LABEL_5;
    case 1:
    case 3:
    case 9:
      v28 = *(_DWORD *)(a3 + 96);
      v29 = v28 > 9;
      v30 = (1 << v28) & 0x20E;
      v31 = v29 || v30 == 0;
      if (v31
        || vabdd_f64(a9, *a1) > *((double *)sub_10016F688() + 35)
        && vabdd_f64(a9, *(double *)(a3 + 76)) > *((double *)sub_10016F688() + 36))
      {
        goto LABEL_19;
      }
      v33 = *a2 + 1;
      goto LABEL_29;
    case 4:
    case 0xD:
      if (*(_DWORD *)(a5 + 84) > 0x42u)
      {
        v38 = *(double *)(a5 + 20);
        if (v38 >= *((double *)sub_10016F688() + 30))
        {
          std::string::assign(&v74, "accuracy");
          *a1 = 0.0;
          *a2 = 0;
          if (a6 <= 1)
            goto LABEL_5;
        }
        else
        {
          v19 = "2+AP";
LABEL_38:
          std::string::assign(&v74, v19);
          *a1 = 0.0;
          *a2 = 0;
        }
      }
      else
      {
        std::string::assign(&v74, "one-AP");
        *a1 = 0.0;
        *a2 = 0;
        if (a6 < 2)
          goto LABEL_5;
      }
      goto LABEL_51;
    case 6:
    case 7:
    case 8:
    case 0xA:
      goto LABEL_38;
    case 0xB:
LABEL_19:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      v32 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "Fence: location treated as new continuous session", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102174760);
        LOWORD(v75) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: location treated as new continuous session", &v75, 2);
        v72 = (uint8_t *)v71;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
      v33 = 0;
      *a1 = a9;
LABEL_29:
      *a2 = v33;
      v34 = *((_DWORD *)sub_10016F688() + 105);
      v35 = *((_DWORD *)sub_10016F688() + 106);
      v36 = *a2;
      if (a6 >= 2 && a7 && v36 >= v34)
      {
        v37 = "requested";
        goto LABEL_50;
      }
      if ((a8 & 1) == 0 && v36 >= v34)
      {
        v37 = "wifi off";
        goto LABEL_50;
      }
      if (*(int *)(a5 + 84) >= 51 && v36 > v35)
      {
        v37 = "good";
        goto LABEL_50;
      }
      if (a8 && (a10 & 1) != 0)
      {
        v39 = "leashed";
        goto LABEL_64;
      }
      v39 = "other";
      if (vabdd_f64(a9, *(double *)(a4 + 76)) <= 120.0 || v36 < v34)
      {
LABEL_64:
        std::string::assign(&v74, v39);
LABEL_5:
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102174760);
        v20 = qword_1022A0068;
        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
        {
          v21 = &v74;
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v21 = (std::string *)v74.__r_.__value_.__r.__words[0];
          v22 = *(_DWORD *)(a5 + 96);
          v23 = *(_QWORD *)(a5 + 20);
          v24 = *(_DWORD *)(a5 + 84);
          v25 = *(_DWORD *)(a5 + 128);
          v26 = *a2;
          *(_DWORD *)buf = 136382211;
          v90 = v21;
          v91 = 1026;
          v92 = v22;
          v93 = 2050;
          v94 = v23;
          v95 = 1026;
          v96 = v24;
          v97 = 1026;
          v98 = v25;
          v99 = 1025;
          v100 = v26;
          v101 = 1025;
          v102 = a6;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "Fence: Ignoring location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{public}d, fixCnt, %{private}d, counter, %{private}d", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_102174760);
          v63 = &v74;
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v63 = (std::string *)v74.__r_.__value_.__r.__words[0];
          v64 = *(_DWORD *)(a5 + 96);
          v65 = *(_QWORD *)(a5 + 20);
          v66 = *(_DWORD *)(a5 + 84);
          v67 = *(_DWORD *)(a5 + 128);
          v68 = *a2;
          v75 = 136382211;
          v76 = v63;
          v77 = 1026;
          v78 = v64;
          v79 = 2050;
          v80 = v65;
          v81 = 1026;
          v82 = v66;
          v83 = 1026;
          v84 = v67;
          v85 = 1025;
          v86 = v68;
          v87 = 1025;
          v88 = a6;
          LODWORD(v73) = 52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Ignoring location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{public}d, fixCnt, %{private}d, counter, %{private}d", &v75, v73);
          v70 = (uint8_t *)v69;
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)", "%s\n", v69);
          if (v70 != buf)
            free(v70);
        }
        v27 = 1;
        goto LABEL_59;
      }
      v37 = "last location old";
LABEL_50:
      std::string::assign(&v74, v37);
LABEL_51:
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102174760);
      v40 = qword_1022A0068;
      if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
      {
        v41 = &v74;
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v41 = (std::string *)v74.__r_.__value_.__r.__words[0];
        v42 = *(_DWORD *)(a5 + 96);
        v43 = *(_QWORD *)(a5 + 20);
        v44 = *(_DWORD *)(a5 + 84);
        v45 = *(_DWORD *)(a5 + 128);
        v46 = *a2;
        *(_DWORD *)buf = 136382211;
        v90 = v41;
        v91 = 1026;
        v92 = v42;
        v93 = 2050;
        v94 = v43;
        v95 = 1026;
        v96 = v44;
        v97 = 1026;
        v98 = v45;
        v99 = 1025;
        v100 = v46;
        v101 = 1025;
        v102 = a6;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Fence: Accepting location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{public}d, fixCnt, %{private}d, counter, %{private}d", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0060 != -1)
          dispatch_once(&qword_1022A0060, &stru_102174760);
        v55 = &v74;
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v55 = (std::string *)v74.__r_.__value_.__r.__words[0];
        v56 = *(_DWORD *)(a5 + 96);
        v57 = *(_QWORD *)(a5 + 20);
        v58 = *(_DWORD *)(a5 + 84);
        v59 = *(_DWORD *)(a5 + 128);
        v60 = *a2;
        v75 = 136382211;
        v76 = v55;
        v77 = 1026;
        v78 = v56;
        v79 = 2050;
        v80 = v57;
        v81 = 1026;
        v82 = v58;
        v83 = 1026;
        v84 = v59;
        v85 = 1025;
        v86 = v60;
        v87 = 1025;
        v88 = a6;
        LODWORD(v73) = 52;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Accepting location, %{private}s, type, %{public}d, hacc, %{public}.1f, conf, %{public}d, integ, %{public}d, fixCnt, %{private}d, counter, %{private}d", &v75, v73);
        v62 = (uint8_t *)v61;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceMonitorLogic::shouldIgnoreLocation(const CFAbsoluteTime, CFAbsoluteTime &, int &, CLDaemonLocation &, const CLDaemonLocation &, const CLDaemonLocation &, const int, const BOOL, const BOOL, const BOOL)", "%s\n", v61);
        if (v62 != buf)
          free(v62);
      }
      v27 = 0;
LABEL_59:
      if (*(double *)(a5 + 20) > 0.0)
      {
        v47 = *(_OWORD *)(a5 + 16);
        *(_OWORD *)a3 = *(_OWORD *)a5;
        *(_OWORD *)(a3 + 16) = v47;
        v48 = *(_OWORD *)(a5 + 32);
        v49 = *(_OWORD *)(a5 + 48);
        v50 = *(_OWORD *)(a5 + 80);
        *(_OWORD *)(a3 + 64) = *(_OWORD *)(a5 + 64);
        *(_OWORD *)(a3 + 80) = v50;
        *(_OWORD *)(a3 + 32) = v48;
        *(_OWORD *)(a3 + 48) = v49;
        v51 = *(_OWORD *)(a5 + 96);
        v52 = *(_OWORD *)(a5 + 112);
        v53 = *(_OWORD *)(a5 + 128);
        *(_OWORD *)(a3 + 140) = *(_OWORD *)(a5 + 140);
        *(_OWORD *)(a3 + 112) = v52;
        *(_OWORD *)(a3 + 128) = v53;
        *(_OWORD *)(a3 + 96) = v51;
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      return v27;
    default:
      goto LABEL_51;
  }
}

void sub_10016F468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10016F498(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 237);
}

uint64_t sub_10016F4A0(uint64_t a1)
{
  return sub_1001240F8(a1 + 2064);
}

double sub_10016F4A8(double *a1, uint64_t a2, double *a3)
{
  if (*(_QWORD *)(a2 + 232) == *(_QWORD *)(a2 + 224))
    return sub_10011E634(a3, *a1, a1[1], *(double *)(a2 + 72), *(double *)(a2 + 80), 0.0);
  else
    return sub_100B6EE24((int8x16_t *)a1, a2 + 224, 0);
}

__n128 sub_10016F4D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 2904);
  v2 = *(_OWORD *)(a1 + 2888);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 2872);
  *(_OWORD *)(a2 + 112) = v2;
  v3 = *(_OWORD *)(a1 + 2824);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 2808);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 2856);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 2840);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 2792);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 2776);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 sub_10016F508@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 2720);
  v3 = *(_OWORD *)(a1 + 2752);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 2736);
  *(_OWORD *)(a2 + 112) = v3;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 2768);
  v4 = *(_OWORD *)(a1 + 2656);
  v5 = *(_OWORD *)(a1 + 2688);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 2672);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 2704);
  *(_OWORD *)(a2 + 80) = v2;
  result = *(__n128 *)(a1 + 2640);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

std::string *sub_10016F544@<X0>(char a1@<W0>, std::string *a2@<X8>)
{
  const std::string::value_type *v4;
  const std::string::value_type *v5;
  const std::string::value_type *v6;
  const std::string::value_type *v7;
  const std::string::value_type *v8;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 6uLL);
  if ((a1 & 1) != 0)
    v4 = "L";
  else
    v4 = ".";
  std::string::append(a2, v4);
  if ((a1 & 2) != 0)
    v5 = "C";
  else
    v5 = ".";
  std::string::append(a2, v5);
  if ((a1 & 4) != 0)
    v6 = "W";
  else
    v6 = ".";
  std::string::append(a2, v6);
  if ((a1 & 8) != 0)
    v7 = "P";
  else
    v7 = ".";
  std::string::append(a2, v7);
  if ((a1 & 0x10) != 0)
    v8 = "S";
  else
    v8 = ".";
  return std::string::append(a2, v8);
}

void sub_10016F600(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double sub_10016F61C(uint64_t a1)
{
  char v2;
  char *v3;
  uint64_t *v4;

  if (*sub_10016F688() || sub_10016F688()[1] && *(_BYTE *)(a1 + 176))
  {
    sub_100197040();
    v2 = sub_1001B796C();
    v3 = sub_10016F688();
    v4 = (uint64_t *)(v3 + 24);
    if ((v2 & 8) != 0)
      v4 = (uint64_t *)(v3 + 8);
  }
  else
  {
    v4 = &qword_1022FA070;
  }
  return *(double *)v4;
}

char *sub_10016F688()
{
  return &byte_1022FCB60;
}

double sub_10016F694(uint64_t a1)
{
  double v2;

  v2 = fmax(sub_10016F61C(a1), *(double *)(a1 + 88));
  if (*(_DWORD *)(a1 + 168) <= 1u && v2 < *((double *)sub_10016F688() + 2))
    return *((double *)sub_10016F688() + 2);
  return v2;
}

BOOL sub_10016F6EC(double *a1, double a2)
{
  int v4;
  double v5;
  double v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  _DWORD v17[2];
  __int16 v18;
  int v19;
  __int16 v20;
  double v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  double v27;

  v4 = *((unsigned __int8 *)a1 + 297);
  v5 = a1[38];
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102183140);
  v6 = a2 - v5;
  v7 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    v8 = *((unsigned __int8 *)a1 + 298);
    *(_DWORD *)buf = 67175169;
    v23 = v4;
    v24 = 1025;
    v25 = v8;
    v26 = 2049;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "isRecalculate, %{private}d, fIsRecalculationPending, %{private}d, sinceLastRecalculationTrigger, %{private}.1lf", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v11 = *((unsigned __int8 *)a1 + 298);
    v17[0] = 67175169;
    v17[1] = v4;
    v18 = 1025;
    v19 = v11;
    v20 = 2049;
    v21 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "isRecalculate, %{private}d, fIsRecalculationPending, %{private}d, sinceLastRecalculationTrigger, %{private}.1lf", v17, 24);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitorWifi::recalculateIfNeeded(const CFAbsoluteTime)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  if (v4)
  {
    sub_100D7056C(a1);
    a1[38] = a2;
  }
  else if (!*((_BYTE *)a1 + 298) && (*(unsigned int (**)(_QWORD))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1))
  {
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102183140);
    v9 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Fence: power assertion no longer needed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
      LOWORD(v17[0]) = 0;
      LODWORD(v16) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 1, "Fence: power assertion no longer needed", v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLFenceMonitorWifi::recalculateIfNeeded(const CFAbsoluteTime)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)a1 + 72))(*(_QWORD *)a1);
  }
  return v4 != 0;
}

BOOL sub_10016FA5C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 2480) > 0;
}

void sub_10016FA6C(uint64_t a1, int *a2, char a3, double a4)
{
  int v4;
  uint64_t v5;

  v4 = *a2;
  if (*a2 <= 0xD)
  {
    if (((1 << v4) & 0x2C1E) != 0)
    {
LABEL_3:
      sub_10016D898(a1, a4);
      return;
    }
    if (((1 << v4) & 0x240) != 0)
    {
      if ((a3 & 1) != 0)
        goto LABEL_3;
    }
    else if (v4 == 5)
    {
      v5 = sub_1019292B4();
      sub_10016FAC4(v5);
    }
  }
}

uint64_t sub_10016FAC4(uint64_t a1, double a2)
{
  _BOOL4 v2;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int8x8_t v13;
  double v15;
  double v16;

  v15 = *(double *)(a1 + 712) * ((double)*(int *)(a1 + 708) + 1.0);
  v16 = a2;
  v2 = vabdd_f64(a2, *(double *)(a1 + 840)) <= v15;
  v3 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a2, 0);
  v4 = vabdq_f64(v3, *(float64x2_t *)(a1 + 864));
  v5 = vabdq_f64(v3, *(float64x2_t *)(a1 + 848));
  v6 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v15, 0);
  v7 = (int8x8_t)vmovn_s64(vcgeq_f64(v6, v5));
  v8 = (int8x8_t)vmovn_s64(vcgeq_f64(v6, v4));
  v9 = vabdd_f64(a2, *(double *)(a1 + 880)) <= v15;
  v10 = vabdd_f64(a2, *(double *)(a1 + 888)) <= v15;
  v11 = (vabdd_f64(a2, *(double *)(a1 + 896)) <= v15) << 12;
  v12 = sub_10016FBC4((float64x2_t *)(a1 + 904), (uint64_t *)&v16, (uint64_t *)&v15);
  v13 = vorr_s8(vand_s8(v7, (int8x8_t)0x2000000002), vand_s8(v8, (int8x8_t)0x20000000040));
  return v13.i32[0] | v13.i32[1] | (v9 << 10) | v11 | (v10 << 11) | v12 | v2;
}

uint64_t sub_10016FBC4(float64x2_t *a1, uint64_t *a2, uint64_t *a3)
{
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  int8x8_t v7;

  v3 = (float64x2_t)vdupq_lane_s64(*a2, 0);
  v4 = vabdq_f64(v3, a1[24]);
  v5 = vabdq_f64(v3, a1[23]);
  v6 = (float64x2_t)vdupq_lane_s64(*a3, 0);
  v7 = vorr_s8(vand_s8((int8x8_t)vmovn_s64(vcgeq_f64(v6, v5)), (int8x8_t)0x8000000004), vand_s8((int8x8_t)vmovn_s64(vcgeq_f64(v6, v4)), (int8x8_t)0x800000100));
  return v7.i32[0] | v7.i32[1] | (16 * (vabdd_f64(*(double *)a2, a1[25].f64[0]) <= *(double *)a3));
}

uint64_t sub_10016FC30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1768) + 80))(*(_QWORD *)(a1 + 1768));
}

uint64_t sub_10016FC40(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = sub_10016FCB8((unsigned __int8 *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10016FCB8(a2, (unsigned __int8 *)(v5 + 32)))
    return v2;
  return v5;
}

uint64_t sub_10016FCB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  const void **v2;
  signed __int8 v3;
  size_t v4;
  int v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  int v15;
  BOOL v16;
  signed __int8 v17;
  size_t v18;
  unsigned __int8 v19;
  size_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  const void **v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int v34;
  size_t v35;
  unsigned __int8 *v36;
  const void **v37;
  uint64_t v38;
  uint64_t result;
  const void *v40;
  size_t v41;
  unsigned int v42;

  v2 = (const void **)(a1 + 48);
  v3 = a1[71];
  if (v3 >= 0)
    v4 = a1[71];
  else
    v4 = *((_QWORD *)a1 + 7);
  v5 = (char)a2[71];
  if (v5 >= 0)
    v6 = a2[71];
  else
    v6 = *((_QWORD *)a2 + 7);
  if (v5 >= 0)
    v7 = a2 + 48;
  else
    v7 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  if (v4 != v6)
    goto LABEL_18;
  if ((a1[71] & 0x80) != 0)
  {
    if (!memcmp(*v2, v7, *((_QWORD *)a1 + 7)))
      goto LABEL_25;
LABEL_18:
    if (v3 >= 0)
      v13 = v2;
    else
      v13 = *v2;
    if (v6 >= v4)
      v14 = v4;
    else
      v14 = v6;
    v15 = memcmp(v13, v7, v14);
    v16 = v4 >= v6;
    goto LABEL_72;
  }
  if (a1[71])
  {
    v10 = v7;
    v11 = a1 + 48;
    v12 = a1[71];
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12)
        goto LABEL_25;
    }
    goto LABEL_18;
  }
LABEL_25:
  v17 = a1[23];
  if (v17 >= 0)
    v18 = a1[23];
  else
    v18 = *((_QWORD *)a1 + 1);
  v19 = a2[23];
  if ((v19 & 0x80u) == 0)
    v20 = a2[23];
  else
    v20 = *((_QWORD *)a2 + 1);
  if ((v19 & 0x80u) == 0)
    v21 = a2;
  else
    v21 = *(unsigned __int8 **)a2;
  if (v18 != v20)
    goto LABEL_42;
  if ((a1[23] & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a1, v21, *((_QWORD *)a1 + 1)))
      goto LABEL_49;
LABEL_42:
    if (v17 >= 0)
      v25 = a1;
    else
      v25 = *(const void **)a1;
    if (v20 >= v18)
      v26 = v18;
    else
      v26 = v20;
    v15 = memcmp(v25, v21, v26);
    v16 = v18 >= v20;
    goto LABEL_72;
  }
  if (a1[23])
  {
    v22 = v21;
    v23 = a1;
    v24 = a1[23];
    while (*v23 == *v22)
    {
      ++v23;
      ++v22;
      if (!--v24)
        goto LABEL_49;
    }
    goto LABEL_42;
  }
LABEL_49:
  v27 = (const void **)(a1 + 24);
  v28 = a1[47];
  v29 = *((_QWORD *)a1 + 4);
  if ((v28 & 0x80u) == 0)
    v30 = a1[47];
  else
    v30 = *((_QWORD *)a1 + 4);
  v33 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  v32 = a2 + 24;
  v31 = v33;
  v34 = (char)v32[23];
  if (v34 >= 0)
    v35 = v32[23];
  else
    v35 = *((_QWORD *)v32 + 1);
  if (v34 < 0)
    v32 = v31;
  if (v30 == v35)
  {
    if ((v28 & 0x80) != 0)
    {
      result = memcmp(*v27, v32, v29);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (!(_DWORD)v28)
        return 0;
      v36 = v32;
      v37 = v27;
      v38 = v28;
      while (*(unsigned __int8 *)v37 == *v36)
      {
        result = 0;
        v37 = (const void **)((char *)v37 + 1);
        ++v36;
        if (!--v38)
          return result;
      }
    }
  }
  if ((v28 & 0x80u) == 0)
    v40 = v27;
  else
    v40 = *v27;
  if (v35 >= v30)
    v41 = v30;
  else
    v41 = v35;
  v15 = memcmp(v40, v32, v41);
  v16 = v30 >= v35;
LABEL_72:
  v42 = !v16;
  if (v15)
    return v15 < 0;
  else
    return v42;
}

_OWORD *sub_10016FF08(_OWORD *result, uint64_t a2)
{
  _OWORD *v2;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;

  if (*(_DWORD *)(a2 + 96) == 1)
  {
    v2 = result;
    v9 = 0uLL;
    v10 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v11 = _Q0;
    v12 = _Q0;
    v13 = _Q0;
    v14 = _Q0;
    v15 = 0;
    sub_10115AAA0((uint64_t *)&v9, a2);
    result = sub_10115FE4C((uint64_t)v2 + 3000, *((_OWORD **)v2 + 375), &v9);
    v8 = *((_QWORD *)v2 + 376);
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - *((_QWORD *)v2 + 375)) >> 5) >= 6)
      *((_QWORD *)v2 + 376) = v8 - 96;
  }
  return result;
}

void sub_10016FF9C(uint64_t a1, uint64_t a2, char *a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  char *v14;
  char *v15;
  uint8_t *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  char *v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char *v40;
  uint64_t v41;
  id v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  char *v54;
  NSObject *v55;
  NSObject *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  _QWORD v60[2];
  id v61;
  char v62;
  char v63[4];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  _BYTE v68[20];
  int v69;
  id v70;
  __int16 v71;
  id v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  __int16 v79;
  char *v80;
  _DWORD __dst[140];
  uint8_t buf[4];
  char *v83;
  __int16 v84;
  id v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  int v91;
  __int16 v92;
  char *v93;

  if (objc_msgSend(*(id *)(a1 + 8), "state") == 2)
  {
    if (*(_BYTE *)objc_msgSend(*(id *)(a1 + 8), "latestPosition"))
    {
      v6 = objc_msgSend(*(id *)(a1 + 8), "latestPosition");
      if (!*v6)
        sub_1018ECB3C((uint64_t)v6, v7, v8);
      if (sub_100171D80((uint64_t)(v6 + 8), a2))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v9 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          if (a3[23] >= 0)
            v10 = a3;
          else
            v10 = *(char **)a3;
          *(_DWORD *)buf = 136315138;
          v83 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "latest position is stale - skipping pipelined venue availability update, after %s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          if (a3[23] >= 0)
            v11 = a3;
          else
            v11 = *(char **)a3;
          __dst[0] = 136315138;
          *(_QWORD *)&__dst[1] = v11;
          v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "latest position is stale - skipping pipelined venue availability update, after %s", __dst);
LABEL_47:
          v16 = (uint8_t *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::updateNearbyVenues(std::chrono::steady_clock::time_point, const std::string &)", "%s\n");
LABEL_48:
          if (v16 != buf)
            free(v16);
        }
      }
      else if (!objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
      {
        v20 = (char *)objc_msgSend(*(id *)(a1 + 8), "latestPosition");
        if (!*v20)
          sub_1018ECB60((uint64_t)v20, v21, v22);
        v23 = *(_QWORD *)(v20 + 28);
        v24 = *((_QWORD *)v20 + 12);
        *(_OWORD *)v68 = *(_OWORD *)(v20 + 104);
        *(_DWORD *)&v68[16] = *((_DWORD *)v20 + 30);
        v67 = *(_OWORD *)&v68[4];
        v64 = *(_OWORD *)&v68[4];
        v65 = v23;
        v66 = v24;
        memcpy(__dst, &unk_101BB5438, sizeof(__dst));
        v25 = objc_msgSend(objc_alloc((Class)CLGpsPosition), "initWithLocation:andPrivateLocation:", v63, __dst);
        v60[0] = 0;
        v61 = 0;
        v62 = 0;
        v60[0] = objc_msgSend(*(id *)(a1 + 16), "forcedVenues");
        objc_msgSend(*(id *)(a1 + 16), "venueGroupDistance");
        v60[1] = v26;
        v61 = objc_msgSend(*(id *)(a1 + 16), "fakeLastFix");
        v62 = sub_1000C4240();
        v27 = objc_msgSend(*(id *)(a1 + 8), "locationGroups");
        objc_msgSend(*(id *)(a1 + 8), "availabilityZScoreConfidenceInterval");
        objc_msgSend(*(id *)(a1 + 8), "setPipelinedVenues:", +[CLIndoorCommonHooks nearestVenues:availableVenues:latestPosition:availabilityZScoreConfidenceInterval:settings:isAllowedMultipleVenues:](CLIndoorCommonHooks, "nearestVenues:availableVenues:latestPosition:availabilityZScoreConfidenceInterval:settings:isAllowedMultipleVenues:", a2, v27, v25, v60, 1));

        if (objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded"))
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v28 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
          {
            v29 = (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "count");
            v30 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "locationGroups"), "count");
            v31 = (char *)objc_msgSend(*(id *)(a1 + 8), "latestPosition");
            if (!*v31)
              sub_1018ECB3C((uint64_t)v31, v32, v33);
            v34 = *(_QWORD *)(v31 + 108);
            v35 = (char *)objc_msgSend(*(id *)(a1 + 8), "latestPosition");
            if (!*v35)
              sub_1018ECB3C((uint64_t)v35, v36, v37);
            v38 = *(_QWORD *)(v35 + 116);
            v39 = sub_1000C4240();
            if (a3[23] >= 0)
              v40 = a3;
            else
              v40 = *(char **)a3;
            *(_DWORD *)buf = 134350339;
            v83 = v29;
            v84 = 2050;
            v85 = v30;
            v86 = 2049;
            v87 = v34;
            v88 = 2049;
            v89 = v38;
            v90 = 1026;
            v91 = v39;
            v92 = 2081;
            v93 = v40;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "selected %{public}zu out of %{public}lu candidates near lat,lng = %{private}lf,%{private}lf, wifi2enabled = %{public}d, because %{private}s", buf, 0x3Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102129DE0);
            v41 = qword_1022A0048;
            v42 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "count");
            v43 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "locationGroups"), "count");
            v44 = (char *)objc_msgSend(*(id *)(a1 + 8), "latestPosition");
            if (!*v44)
              sub_1018ECB3C((uint64_t)v44, v45, v46);
            v47 = *(_QWORD *)(v44 + 108);
            v48 = (char *)objc_msgSend(*(id *)(a1 + 8), "latestPosition");
            if (!*v48)
              sub_1018ECB3C((uint64_t)v48, v49, v50);
            v51 = *(_QWORD *)(v48 + 116);
            v52 = sub_1000C4240();
            if (a3[23] >= 0)
              v53 = a3;
            else
              v53 = *(char **)a3;
            v69 = 134350339;
            v70 = v42;
            v71 = 2050;
            v72 = v43;
            v73 = 2049;
            v74 = v47;
            v75 = 2049;
            v76 = v51;
            v77 = 1026;
            v78 = v52;
            v79 = 2081;
            v80 = v53;
            v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 1, "selected %{public}zu out of %{public}lu candidates near lat,lng = %{private}lf,%{private}lf, wifi2enabled = %{public}d, because %{private}s", &v69, 58);
            sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::updateNearbyVenues(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v54);
            if (v54 != (char *)buf)
              free(v54);
          }
        }
        else
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v55 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#Warning Why are we calling updateNearbyVenues but availability tiles are not loaded?", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102129DE0);
            LOWORD(v69) = 0;
            v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning Why are we calling updateNearbyVenues but availability tiles are not loaded?", &v69, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::updateNearbyVenues(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v57);
            if (v57 != (char *)buf)
              free(v57);
          }
        }
        if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "count")
          && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24)) & 1) == 0)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v56 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "No venues to use for pipelined - disconnecting", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_102129DE0);
            LOWORD(v69) = 0;
            LODWORD(v59) = 2;
            v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "No venues to use for pipelined - disconnecting", &v69, v59);
            sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::updateNearbyVenues(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v58);
            if (v58 != (char *)buf)
              free(v58);
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 168))(*(_QWORD *)(a1 + 24));
        }
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        if (a3[23] >= 0)
          v18 = a3;
        else
          v18 = *(char **)a3;
        *(_DWORD *)buf = 136315138;
        v83 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "no position yet to update venue availability with, after %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        if (a3[23] >= 0)
          v19 = a3;
        else
          v19 = *(char **)a3;
        __dst[0] = 136315138;
        *(_QWORD *)&__dst[1] = v19;
        v12 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "no position yet to update venue availability with, after %s", __dst);
        goto LABEL_47;
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v13 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      if (a3[23] >= 0)
        v14 = a3;
      else
        v14 = *(char **)a3;
      *(_DWORD *)buf = 136446210;
      v83 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Attempt to update venue availability because %{public}s; but not running",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (a3[23] >= 0)
        v15 = a3;
      else
        v15 = *(char **)a3;
      __dst[0] = 136446210;
      *(_QWORD *)&__dst[1] = v15;
      v16 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "Attempt to update venue availability because %{public}s; but not running",
                         __dst,
                         12);
      sub_100512490("Generic", 1, 0, 0, "void CLIndoorLogic::updateNearbyVenues(std::chrono::steady_clock::time_point, const std::string &)", "%s\n");
      goto LABEL_48;
    }
  }
}

id sub_100170A58(uint64_t a1)
{
  id v2;
  id v3;
  char *v4;
  unsigned int v5;
  NSObject *v6;
  unsigned int v7;
  id *v8;
  NSURL *v9;
  NSObject *v10;
  id v11;
  NSURL *v12;
  id v13;
  void *v14;
  NSObject *v15;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _DWORD v23[2];
  __int16 v24;
  unsigned int v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  unsigned int v29;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "lastFix");
  if (*(_BYTE *)objc_msgSend(*(id *)(a1 + 8), "latestPosition"))
  {
    v4 = (char *)objc_msgSend(*(id *)(a1 + 8), "latestPosition");
    if (!*v4)
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    v3 = objc_msgSend(objc_alloc((Class)GeographicCoordinate), "initWithLatitude:longitude:andAltitude:", *(double *)(v4 + 108), *(double *)(v4 + 116), *(double *)(v4 + 36));
  }
  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "shouldRecompute:", v3);
  if (((objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded") ^ 1 | v5) & 1) != 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v7 = objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded");
      *(_DWORD *)buf = 67240448;
      v27 = v5;
      v28 = 1026;
      v29 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "@IndoorAvl, load, must recompute, %{public}d, locationGroupsLoaded, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v18 = qword_1022A0048;
      v19 = objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded");
      v23[0] = 67240448;
      v23[1] = v5;
      v24 = 1026;
      v25 = v19;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 2, "@IndoorAvl, load, must recompute, %{public}d, locationGroupsLoaded, %{public}d", v23, 14);
      sub_100512490("Generic", 1, 0, 2, "unsigned long CLIndoorLogic::reloadAvailabilityGroupsIfNecessary()", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    v8 = (id *)(a1 + 48);
    sub_100D823D8(a1 + 48);
    if (objc_msgSend(*(id *)(a1 + 8), "avlTilePathOverrideForTest"))
      v9 = (NSURL *)objc_msgSend(*(id *)(a1 + 8), "avlTilePathOverrideForTest");
    else
      v9 = sub_100020B48();
    v12 = v9;
    if ((objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded") & 1) == 0)
      objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "clearLastFix");
    v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "getNearbyLocationGroups:withUpdatedPos:", v12, v3);
    if (!v13)
    {
      v11 = 0;
LABEL_29:
      sub_100D823A8(v8);
      goto LABEL_30;
    }
    if (objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "availabilityTileParams"))
    {
      v14 = *(void **)(a1 + 8);
      objc_msgSend(objc_msgSend(objc_msgSend(v14, "availableVenuesState"), "availabilityTileParams"), "availabilityZScoreConfidenceInterval");
      objc_msgSend(v14, "setAvailabilityTiles:withZScoreConfidenceInterval:", v13);
      objc_msgSend(*(id *)(a1 + 8), "updatePrefetchParameters:", objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "availableVenuesState"), "availabilityTileParams"));
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
      if (qword_1022A0040 == -1)
      {
LABEL_24:
        v15 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "contents on disk have changed, or we moved really far away, re-read availability tiles into memory", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          LOWORD(v23[0]) = 0;
          LODWORD(v22) = 2;
          v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "contents on disk have changed, or we moved really far away, re-read availability tiles into memory", v23, v22);
          sub_100512490("Generic", 1, 0, 2, "unsigned long CLIndoorLogic::reloadAvailabilityGroupsIfNecessary()", "%s\n", v21);
          if (v21 != (char *)buf)
            free(v21);
        }
        v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "locationGroups"), "count");
        goto LABEL_29;
      }
    }
    else
    {
      sub_1018ECB84();
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLIndoorStateMachine.mm", 1470, "reloadAvailabilityGroupsIfNecessary");
      __break(1u);
    }
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
    goto LABEL_24;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v10 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Not necessary to reload availability groups, skipping", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    LOWORD(v23[0]) = 0;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Not necessary to reload availability groups, skipping", v23, 2);
    sub_100512490("Generic", 1, 0, 2, "unsigned long CLIndoorLogic::reloadAvailabilityGroupsIfNecessary()", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  v11 = 0;
LABEL_30:

  return v11;
}

void sub_100171058(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001710D4(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  id v9;
  NSObject *v10;
  id v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  const char *v19;
  id v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  unsigned int v24;
  NSObject *v25;
  char *v26;
  uint64_t v27;
  id v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  const char *v36[3];
  char v37;
  _BYTE v38[20];
  int v39;
  _BYTE v40[28];
  uint64_t v41;
  __int128 v42;
  uint8_t buf[1640];

  if (!objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102129E00);
    v25 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLIndoorStateMachine.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 829;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "isPipelinedSeeded()";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102129E00);
      v39 = 136315650;
      *(_QWORD *)v40 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLIndoorStateMachine.mm";
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = 829;
      *(_WORD *)&v40[14] = 2080;
      *(_QWORD *)&v40[16] = "isPipelinedSeeded()";
      v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v39, 28, v36[0]);
      sub_100512490("Generic", 1, 0, 0, "TurnOffReason CLIndoorLogic::isRequiredToTurnOff(std::chrono::steady_clock::time_point)", "%s\n", v34);
      if (v34 != (char *)buf)
        free(v34);
    }
    sub_100512450();
  }
  if (!objc_msgSend(*(id *)(a1 + 16), "pipelinedEnabled"))
    return 1;
  if (*(_BYTE *)objc_msgSend(*(id *)(a1 + 8), "latestPosition"))
  {
    v4 = objc_msgSend(*(id *)(a1 + 8), "latestPosition");
    if (!*v4)
      sub_1018ECB3C((uint64_t)v4, v5, v6);
    if (!sub_100171D80((uint64_t)(v4 + 8), a2))
    {
      if ((objc_msgSend(*(id *)(a1 + 8), "locationGroupsLoaded") & 1) == 0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v23 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          v24 = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "Seeded = %{public}d & trying to turn off but availability tiles not loaded?!", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          v31 = qword_1022A0048;
          v32 = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
          v39 = 67240192;
          *(_DWORD *)v40 = v32;
          LODWORD(v35) = 8;
          v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 16, "Seeded = %{public}d & trying to turn off but availability tiles not loaded?!", &v39, v35);
          sub_100512490("Generic", 1, 0, 0, "TurnOffReason CLIndoorLogic::isRequiredToTurnOff(std::chrono::steady_clock::time_point)", "%s\n", v33);
          if (v33 != (char *)buf)
            free(v33);
        }
        return 8;
      }
      v9 = sub_100170A58(a1);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "locationGroups"), "count");
        v12 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
        *(_DWORD *)buf = 134349570;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v11;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@IndoorAvl, load, stalecheck, %{public}lu, total, %{public}lu, state, %{public}s", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v27 = qword_1022A0048;
        v28 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "locationGroups"), "count");
        v29 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
        v39 = 134349570;
        *(_QWORD *)v40 = v9;
        *(_WORD *)&v40[8] = 2050;
        *(_QWORD *)&v40[10] = v28;
        *(_WORD *)&v40[18] = 2082;
        *(_QWORD *)&v40[20] = v29;
        LODWORD(v35) = 32;
        v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 0, "@IndoorAvl, load, stalecheck, %{public}lu, total, %{public}lu, state, %{public}s", &v39, v35);
        sub_100512490("Generic", 1, 0, 2, "TurnOffReason CLIndoorLogic::isRequiredToTurnOff(std::chrono::steady_clock::time_point)", "%s\n", v30);
        if (v30 != (char *)buf)
          free(v30);
      }
      v13 = (char *)objc_msgSend(*(id *)(a1 + 8), "latestPosition");
      if (!*v13)
        sub_1018ECB60((uint64_t)v13, v14, v15);
      v16 = *(_QWORD *)(v13 + 28);
      v17 = *((_QWORD *)v13 + 12);
      *(_OWORD *)v38 = *(_OWORD *)(v13 + 104);
      *(_DWORD *)&v38[16] = *((_DWORD *)v13 + 30);
      v42 = *(_OWORD *)&v38[4];
      *(_OWORD *)v40 = *(_OWORD *)&v38[4];
      *(_QWORD *)&v40[16] = v16;
      v41 = v17;
      memcpy(buf, &unk_101BB5438, 0x230uLL);
      v18 = objc_msgSend(objc_alloc((Class)CLGpsPosition), "initWithLocation:andPrivateLocation:", &v39, buf);
      v36[0] = (const char *)objc_msgSend(*(id *)(a1 + 16), "forcedVenues");
      objc_msgSend(*(id *)(a1 + 16), "venueGroupDistance");
      v36[1] = v19;
      v36[2] = (const char *)objc_msgSend(*(id *)(a1 + 16), "fakeLastFix");
      v37 = sub_1000C4240();
      v20 = objc_msgSend(*(id *)(a1 + 8), "locationGroups");
      objc_msgSend(*(id *)(a1 + 8), "availabilityZScoreConfidenceInterval");
      v21 = +[CLIndoorCommonHooks nearestVenues:availableVenues:latestPosition:availabilityZScoreConfidenceInterval:settings:isAllowedMultipleVenues:](CLIndoorCommonHooks, "nearestVenues:availableVenues:latestPosition:availabilityZScoreConfidenceInterval:settings:isAllowedMultipleVenues:", a2, v20, v18, v36, 1);

      if (!v21 || !objc_msgSend(v21, "count"))
        return 2;
    }
  }
  objc_msgSend(*(id *)(a1 + 8), "latestNavModeEstimate");
  if (v7)
  {
    if (v7 == 2 && !*(_BYTE *)(a1 + 40))
      return 3;
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Uninitialized outdoor classification while pipeline is active", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      LOWORD(v39) = 0;
      LODWORD(v35) = 2;
      v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "Uninitialized outdoor classification while pipeline is active", &v39, v35);
      sub_100512490("Generic", 1, 0, 2, "TurnOffReason CLIndoorLogic::isRequiredToTurnOff(std::chrono::steady_clock::time_point)", "%s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
  }
  if (!objc_msgSend(*(id *)(a1 + 8), "wifiPowered"))
    return 4;
  if ((objc_msgSend(*(id *)(a1 + 8), "isStreamingClientInFitnessSession") & 1) != 0)
    return 5;
  if (objc_msgSend(*(id *)(a1 + 8), "isVehicleConnected") && !*(_BYTE *)(a1 + 40))
    return 6;
  if (objc_msgSend(*(id *)(a1 + 8), "isInVehicleNavigation") && !*(_BYTE *)(a1 + 40))
    return 7;
  if ((objc_msgSend(*(id *)(a1 + 8), "hasAtLeastOneClientWithCLActivityTypeFitness") & 1) != 0)
    return 9;
  if (sub_100171A30(objc_msgSend(*(id *)(a1 + 8), "fitnessModeStateMachine")))
    return 10;
  return 0;
}

void sub_10017194C(uint64_t a1, NSObject *a2, uint64_t *a3)
{
  void *__p[2];
  char v7;

  sub_100171A44((uint64_t)objc_msgSend(*(id *)(a1 + 8), "fitnessModeStateMachine"), (uint64_t)a2);
  if (sub_100171A30(objc_msgSend(*(id *)(a1 + 8), "fitnessModeStateMachine")))
  {
    if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
    {
      sub_1015A2E04(__p, "startstop");
      sub_1001CEC00(a1, 2, (uint64_t *)__p);
      if (v7 < 0)
        operator delete(__p[0]);
    }
  }
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
    sub_1001737B8(a1, (uint64_t)a2, a3);
  else
    sub_100172830(a1, a2, (char *)a3);
}

void sub_100171A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100171A30(_DWORD *a1)
{
  return (*a1 - 7) < 0xFFFFFFFD;
}

void sub_100171A44(uint64_t a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  const char *v22;

  switch(*(_DWORD *)a1)
  {
    case 2:
      if (1000000000 * *(_QWORD *)(a1 + 24) >= a2 - *(_QWORD *)(a1 + 8))
        v4 = 2;
      else
        v4 = 4;
      goto LABEL_14;
    case 3:
      if (1000000000 * *(_QWORD *)(a1 + 16) >= a2 - *(_QWORD *)(a1 + 8))
        v4 = 3;
      else
        v4 = 4;
      goto LABEL_14;
    case 5:
      if (1000000000 * *(_QWORD *)(a1 + 32) < a2 - *(_QWORD *)(a1 + 8))
        v4 = 1;
      else
        v4 = 5;
      goto LABEL_14;
    case 6:
      if (1000000000 * *(_QWORD *)(a1 + 40) >= a2 - *(_QWORD *)(a1 + 8))
        v4 = 6;
      else
        v4 = 0;
LABEL_14:
      if (v4 != *(_DWORD *)a1)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102129F00);
        v5 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
        {
          v6 = *(_DWORD *)a1 - 1;
          if (v6 > 5)
            v7 = "running";
          else
            v7 = (&off_102129F38)[v6];
          v8 = v4 - 1;
          if (v8 > 5)
            v9 = "running";
          else
            v9 = (&off_102129F38)[v8];
          *(_DWORD *)buf = 136380931;
          v20 = v7;
          v21 = 2081;
          v22 = v9;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#indoor-fitness-classifier state change, current, %{private}s, updated, %{private}s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102129F00);
          v10 = *(_DWORD *)a1 - 1;
          if (v10 > 5)
            v11 = "running";
          else
            v11 = (&off_102129F38)[v10];
          v12 = v4 - 1;
          if (v12 > 5)
            v13 = "running";
          else
            v13 = (&off_102129F38)[v12];
          v15 = 136380931;
          v16 = v11;
          v17 = 2081;
          v18 = v13;
          v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#indoor-fitness-classifier state change, current, %{private}s, updated, %{private}s", &v15, 22);
          sub_100512490("Generic", 1, 0, 2, "void CLIndoorFitnessModeStateMachine::update(std::chrono::steady_clock::time_point)", "%s\n", v14);
          if (v14 != (char *)buf)
            free(v14);
        }
        *(_QWORD *)(a1 + 8) = a2;
        *(_DWORD *)a1 = v4;
      }
      break;
    default:
      return;
  }
}

BOOL sub_100171D80(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 168) <= a2;
}

uint64_t sub_100171D90(uint64_t a1, uint64_t a2)
{
  int v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  id v9;

  if (!objc_msgSend(*(id *)(a1 + 16), "pipelinedEnabled"))
    return 1;
  if (!objc_msgSend(*(id *)(a1 + 8), "wifiPowered"))
    return 2;
  if (!*(_BYTE *)objc_msgSend(*(id *)(a1 + 8), "latestPosition"))
    return 3;
  objc_msgSend(*(id *)(a1 + 8), "latestNavModeEstimate");
  if (v4 == 2 && !*(_BYTE *)(a1 + 40))
    return 4;
  if (*(_BYTE *)objc_msgSend(*(id *)(a1 + 8), "lastIndoorError"))
  {
    v5 = objc_msgSend(*(id *)(a1 + 8), "lastIndoorError");
    if (!*v5)
      sub_1018ECB3C((uint64_t)v5, v6, v7);
    v8 = v5;
    v9 = sub_10021A518(a1) ? (id)300000000000 : objc_msgSend(*(id *)(a1 + 16), "errorBackoffDuration");
    if ((uint64_t)v9 + *((_QWORD *)v8 + 1) > a2)
      return 5;
  }
  if ((objc_msgSend(*(id *)(a1 + 8), "isStreamingClientInFitnessSession") & 1) != 0)
    return 6;
  if (objc_msgSend(*(id *)(a1 + 8), "isVehicleConnected") && !*(_BYTE *)(a1 + 40))
    return 7;
  if (objc_msgSend(*(id *)(a1 + 8), "isInVehicleNavigation") && !*(_BYTE *)(a1 + 40))
    return 8;
  if ((objc_msgSend(*(id *)(a1 + 8), "hasAtLeastOneClientWithCLActivityTypeFitness") & 1) != 0)
    return 9;
  if (sub_100171A30(objc_msgSend(*(id *)(a1 + 8), "fitnessModeStateMachine")))
    return 10;
  return 0;
}

void sub_100171EF4(uint64_t a1, NSObject *a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  _OWORD v24[11];
  _OWORD v25[11];
  int v26;
  uint64_t v27;
  _BYTE buf[12];
  char v29;

  if (*(double *)(a3 + 20) <= 165.0)
  {
    sub_100172510((uint64_t)v25, (uint64_t)a2, a3);
    v8 = *(void **)(a1 + 8);
    v24[8] = v25[8];
    v24[9] = v25[9];
    v24[10] = v25[10];
    v24[4] = v25[4];
    v24[5] = v25[5];
    v24[6] = v25[6];
    v24[7] = v25[7];
    v24[0] = v25[0];
    v24[1] = v25[1];
    v24[2] = v25[2];
    v24[3] = v25[3];
    objc_msgSend(v8, "setLatestPosition:", v24);
    objc_msgSend(*(id *)(a1 + 8), "latestNavModeEstimate");
    v10 = v9;
    v11 = sub_100172494((uint64_t)objc_msgSend(*(id *)(a1 + 8), "navModeEstimator"), a3);
    objc_msgSend(*(id *)(a1 + 8), "setLatestNavModeEstimate:", v11, v12);
    objc_msgSend(*(id *)(a1 + 8), "latestNavModeEstimate");
    v14 = v13;
    if (v10 != v13)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67174657;
        *(_DWORD *)&buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "updateLatestEstimate state,%{private}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v26 = 67174657;
        LODWORD(v27) = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "updateLatestEstimate state,%{private}d", &v26, 8);
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::updateLatestEstimate(std::chrono::steady_clock::time_point, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      v16 = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
      if (v14 == 2)
      {
        if (v16)
        {
          sub_1015A2E04(buf, "navmode");
          sub_1001CEC00(a1, 2, (uint64_t *)buf);
          if (v29 < 0)
            operator delete(*(void **)buf);
        }
      }
    }
    sub_1015A2E04(buf, "updateLatestEstimate");
    sub_10017194C(a1, a2, (uint64_t *)buf);
    if (v29 < 0)
      operator delete(*(void **)buf);
  }
  else if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a3 + 20);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Ignoring LocationController fix with horizontalAccuracy %f because the existing fix would be more helpful anyway.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 == -1)
      {
LABEL_33:
        v21 = *(_QWORD *)(a3 + 20);
        v26 = 134217984;
        v27 = v21;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Ignoring LocationController fix with horizontalAccuracy %f because the existing fix would be more helpful anyway.", COERCE_DOUBLE(&v26));
        v23 = (char *)v22;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::updateLatestEstimate(std::chrono::steady_clock::time_point, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
        return;
      }
LABEL_35:
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
      goto LABEL_33;
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v17 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a3 + 20);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Ignoring LocationController fix with horizontalAccuracy %f because the existing fix would be more helpful anyway.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 == -1)
        goto LABEL_33;
      goto LABEL_35;
    }
  }
}

void sub_100172460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100172494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  sub_10017256C(*(_QWORD *)a1, a2);
  v5 = *(_QWORD *)(a2 + 76);
  v6 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v6 == 2)
    v7 = 1;
  else
    v7 = 2 * (v6 == 1);
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 != v7)
    sub_10050E890(v4, v8, v7);
  *(_DWORD *)(a1 + 8) = v7;
  return v5;
}

uint64_t sub_100172510(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)result = *(_OWORD *)a3;
  *(_OWORD *)(result + 16) = v3;
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(result + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(result + 80) = v6;
  *(_OWORD *)(result + 32) = v4;
  *(_OWORD *)(result + 48) = v5;
  v7 = *(_OWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 112);
  v9 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(result + 140) = *(_OWORD *)(a3 + 140);
  *(_OWORD *)(result + 112) = v8;
  *(_OWORD *)(result + 128) = v9;
  *(_OWORD *)(result + 96) = v7;
  *(_QWORD *)&v7 = *(_QWORD *)(a3 + 88);
  v10 = (uint64_t)(*(double *)&v7 * 1000000000.0) + a2;
  if (*(double *)&v7 < 0.0)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 160) = a2;
  *(_QWORD *)(result + 168) = v10;
  return result;
}

void sub_10017256C(uint64_t a1, uint64_t a2)
{
  double v2;
  double v4;
  double v6;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;

  v2 = *(double *)(a2 + 44);
  if (v2 >= 0.0)
  {
    v4 = *(double *)(a2 + 52);
    if (v4 <= 0.0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102140DD0);
      v8 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a2 + 44);
        *(_DWORD *)buf = 134217984;
        v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Latest speed is %lf but no information about speed uncertainty", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102140DD0);
        v10 = *(_QWORD *)(a2 + 44);
        v12 = 134217984;
        v13 = v10;
        v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning Latest speed is %lf but no information about speed uncertainty", COERCE_DOUBLE(&v12));
        sub_100512490("Generic", 1, 0, 2, "BOOL hasValidSpeedEstimate(const CLDaemonLocation &)", "%s\n", v11);
        if (v11 != (char *)buf)
          free(v11);
      }
    }
    else
    {
      v6 = *(double *)(a2 + 76);
      sub_10021E2C8((_QWORD *)a1, v2 - v4, v6);
      if (sub_10021E244((_QWORD *)a1) >= 4.16666667 && *(_DWORD *)a1 == 1)
      {
        if (!*(_BYTE *)(a1 + 8))
          *(_BYTE *)(a1 + 8) = 1;
        *(double *)(a1 + 16) = v6;
        *(_DWORD *)(a1 + 4) = 1;
      }
    }
  }
}

void sub_100172830(uint64_t a1, NSObject *a2, char *a3)
{
  NSObject *v6;
  char *v7;
  char *v8;
  char *v9;
  NSObject *v10;
  char *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  void *v16;
  NSObject *v17;
  char *v18;
  const char *v19;
  NSObject *v20;
  char *v21;
  NSObject *v22;
  NSObject *v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  const char *v41;
  int v42;
  char *v43;
  __int16 v44;
  const char *v45;
  _BYTE buf[12];
  __int16 v47;
  const char *v48;
  char v49;

  if (objc_msgSend(*(id *)(a1 + 8), "state") != 2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if (a3[23] >= 0)
        v11 = a3;
      else
        v11 = *(char **)a3;
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24));
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v11;
      v47 = 1024;
      LODWORD(v48) = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s -- we're not in a runnable state (i.e. no clients; clients = %d)",
        buf,
        0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v29 = qword_1022A0048;
      if (a3[23] < 0)
        a3 = *(char **)a3;
      v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24));
      v42 = 136315394;
      v43 = a3;
      v44 = 1024;
      LODWORD(v45) = v30;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "%s -- we're not in a runnable state (i.e. no clients; clients = %d)",
                     (const char *)&v42,
                     18);
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v9);
      goto LABEL_90;
    }
    return;
  }
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      if (a3[23] >= 0)
        v7 = a3;
      else
        v7 = *(char **)a3;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Already seeded - ignoring request to start due to %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (a3[23] >= 0)
        v8 = a3;
      else
        v8 = *(char **)a3;
      v42 = 136315138;
      v43 = v8;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "Already seeded - ignoring request to start due to %s", (const char *)&v42);
      sub_100512490("Generic", 1, 0, 0, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v9);
LABEL_90:
      if (v9 != buf)
        free(v9);
      return;
    }
    return;
  }
  v13 = sub_100171D90(a1, (uint64_t)a2);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0)
      v15 = a3;
    else
      v15 = *(char **)a3;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v47 = 2082;
    v48 = sub_100174440(v13);
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@IndoorFlow, turnon, %{public}s, %{public}s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v31 = qword_1022A0048;
    if (a3[23] >= 0)
      v32 = a3;
    else
      v32 = *(char **)a3;
    v42 = 136446466;
    v43 = v32;
    v44 = 2082;
    v45 = sub_100174440(v13);
    v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "@IndoorFlow, turnon, %{public}s, %{public}s", &v42, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v33);
    if (v33 != buf)
      free(v33);
  }
  v16 = *(void **)(a1 + 8);
  if ((_DWORD)v13)
  {
    if (objc_msgSend(v16, "latestReason") != (_DWORD)v13)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        if (a3[23] >= 0)
          v18 = a3;
        else
          v18 = *(char **)a3;
        v19 = sub_100174440(v13);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v18;
        v47 = 2080;
        v48 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "%s - cannot start indoor: %s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v34 = qword_1022A0048;
        if (a3[23] < 0)
          a3 = *(char **)a3;
        v35 = sub_100174440(v13);
        v42 = 136315394;
        v43 = a3;
        v44 = 2080;
        v45 = v35;
        LODWORD(v41) = 22;
        v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 2, "%s - cannot start indoor: %s", (const char *)&v42, v41);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v36);
        if (v36 != buf)
          free(v36);
      }
      objc_msgSend(*(id *)(a1 + 8), "setLatestReason:", v13);
    }
    return;
  }
  objc_msgSend(v16, "setLatestReason:", 0);
  sub_100173544(a1, (uint64_t)a2, a3);
  if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "count"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    a2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if (a3[23] >= 0)
        v28 = a3;
      else
        v28 = *(char **)a3;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%s - not in a recognized venue, not launching pipelined", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (a3[23] >= 0)
        v39 = a3;
      else
        v39 = *(char **)a3;
      v42 = 136315138;
      v43 = v39;
      a2 = buf;
      a3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "%s - not in a recognized venue, not launching pipelined", (const char *)&v42);
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", a3);
      if (a3 != buf)
        free(a3);
    }
    if (!objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
    {
      sub_1015A2E04(buf, "startIndoorIfPossible but no venues");
      sub_1001CE878(a1, (uint64_t *)buf);
      if (v49 < 0)
        operator delete(*(void **)buf);
      return;
    }
    sub_1018ED15C();
    __break(1u);
    goto LABEL_120;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v20 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    if (a3[23] >= 0)
      v21 = a3;
    else
      v21 = *(char **)a3;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%s - starting pipelined via startDaemonLocalizingImpl", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    if (a3[23] >= 0)
      v37 = a3;
    else
      v37 = *(char **)a3;
    v42 = 136315138;
    v43 = v37;
    v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "%s - starting pipelined via startDaemonLocalizingImpl", (const char *)&v42);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v38);
    if (v38 != buf)
      free(v38);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24)))
  {
    if (qword_1022A0040 == -1)
    {
LABEL_56:
      v22 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning daemon is loaded but pipelined is not seeded", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        LOWORD(v42) = 0;
        LODWORD(v41) = 2;
        v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "#Warning daemon is loaded but pipelined is not seeded", &v42, v41);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v40);
        if (v40 != buf)
          free(v40);
      }
      goto LABEL_59;
    }
LABEL_120:
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
    goto LABEL_56;
  }
LABEL_59:
  if (!sub_10021A15C(a1, (uint64_t)a2))
  {
    sub_100052810(a1);
    return;
  }
  objc_msgSend(*(id *)(a1 + 8), "setLatestReason:", 5);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v23 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    if (a3[23] >= 0)
      v24 = a3;
    else
      v24 = *(char **)a3;
    v25 = sub_100174440(objc_msgSend(*(id *)(a1 + 8), "latestReason"));
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    v47 = 2080;
    v48 = v25;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "%s - cannot start indoor: %s", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v26 = qword_1022A0048;
    if (a3[23] < 0)
      a3 = *(char **)a3;
    v27 = sub_100174440(objc_msgSend(*(id *)(a1 + 8), "latestReason"));
    v42 = 136315394;
    v43 = a3;
    v44 = 2080;
    v45 = v27;
    LODWORD(v41) = 22;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "%s - cannot start indoor: %s", (const char *)&v42, v41);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startIndoorIfPossible(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v9);
    goto LABEL_90;
  }
}

void sub_100173520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100173544(uint64_t a1, uint64_t a2, char *a3)
{
  id v6;
  NSObject *v7;
  char *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  const char *v14;
  char *v15;
  int v16;
  char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  id v21;
  __int16 v22;
  const char *v23;
  uint8_t buf[4];
  char *v25;
  __int16 v26;
  id v27;
  __int16 v28;
  id v29;
  __int16 v30;
  const char *v31;

  v6 = sub_100170A58(a1);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] >= 0)
      v8 = a3;
    else
      v8 = *(char **)a3;
    v9 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "locationGroups"), "count");
    v10 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
    *(_DWORD *)buf = 136446978;
    v25 = v8;
    v26 = 2050;
    v27 = v6;
    v28 = 2050;
    v29 = v9;
    v30 = 2082;
    v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@IndoorAvl, load, %{public}s, %{public}lu, total, %{public}lu, state, %{public}s", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v11 = qword_1022A0048;
    if (a3[23] >= 0)
      v12 = a3;
    else
      v12 = *(char **)a3;
    v13 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "locationGroups"), "count");
    v14 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
    v16 = 136446978;
    v17 = v12;
    v18 = 2050;
    v19 = v6;
    v20 = 2050;
    v21 = v13;
    v22 = 2082;
    v23 = v14;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "@IndoorAvl, load, %{public}s, %{public}lu, total, %{public}lu, state, %{public}s", &v16, 42);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::loadAvailabilityTiles(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  sub_10016FF9C(a1, a2, a3);
}

void sub_1001737B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  NSObject *v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t *v24;
  const char *v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  const char *v36;
  int v37;
  uint64_t *v38;
  __int16 v39;
  const char *v40;
  _BYTE buf[12];
  __int16 v42;
  const char *v43;
  char v44;

  v6 = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
  if (v6 == 1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a3 + 23) >= 0)
        v12 = a3;
      else
        v12 = (uint64_t *)*a3;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Shutdown not permitted by pipelined - ignoring: request to turn off due to %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (*((char *)a3 + 23) >= 0)
        v13 = a3;
      else
        v13 = (uint64_t *)*a3;
      v37 = 136315138;
      v38 = v13;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Shutdown not permitted by pipelined - ignoring: request to turn off due to %s", (const char *)&v37);
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::stopIndoorIfRequired(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v10);
      goto LABEL_94;
    }
  }
  else if (v6)
  {
    v14 = sub_1001710D4(a1, a2);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v15 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a3 + 23) >= 0)
        v16 = a3;
      else
        v16 = (uint64_t *)*a3;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v16;
      v42 = 2082;
      v43 = sub_100174278(v14);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@IndoorFlow, turnoff, %{public}s, %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v26 = qword_1022A0048;
      if (*((char *)a3 + 23) >= 0)
        v27 = a3;
      else
        v27 = (uint64_t *)*a3;
      v37 = 136446466;
      v38 = v27;
      v39 = 2082;
      v40 = sub_100174278(v14);
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "@IndoorFlow, turnoff, %{public}s, %{public}s", &v37, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::stopIndoorIfRequired(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v28);
      if (v28 != buf)
        free(v28);
    }
    if (v14)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@ClxIndoor, state, 0, required", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        LOWORD(v37) = 0;
        LODWORD(v36) = 2;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxIndoor, state, 0, required", &v37, v36);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::stopIndoorIfRequired(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v29);
        if (v29 != buf)
          free(v29);
      }
      if (sub_1000C4240())
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v18 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@ClxWifi2, state, 0, required", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102129DE0);
          LOWORD(v37) = 0;
          LODWORD(v36) = 2;
          v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxWifi2, state, 0, required", &v37, v36);
          sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::stopIndoorIfRequired(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v35);
          if (v35 != buf)
            free(v35);
        }
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v19 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a3 + 23) >= 0)
          v20 = a3;
        else
          v20 = (uint64_t *)*a3;
        v21 = sub_100174278(v14);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v20;
        v42 = 2080;
        v43 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s - must stop indoor immediately (no debounce): %s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v30 = qword_1022A0048;
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        v31 = sub_100174278(v14);
        v37 = 136315394;
        v38 = a3;
        v39 = 2080;
        v40 = v31;
        LODWORD(v36) = 22;
        v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "%s - must stop indoor immediately (no debounce): %s", (const char *)&v37, v36);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::stopIndoorIfRequired(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v32);
        if (v32 != buf)
          free(v32);
      }
      v22 = *(_QWORD *)(a1 + 24);
      sub_1015A2E04(buf, "stop required");
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 16))(v22, buf);
      if (v44 < 0)
        operator delete(*(void **)buf);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24)))
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 168))(*(_QWORD *)(a1 + 24));
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v23 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a3 + 23) >= 0)
          v24 = a3;
        else
          v24 = (uint64_t *)*a3;
        v25 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v24;
        v42 = 2080;
        v43 = v25;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "%s and %s; but no need to turn off at this time",
          buf,
          0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v33 = qword_1022A0048;
        if (*((char *)a3 + 23) < 0)
          a3 = (uint64_t *)*a3;
        v34 = sub_1001CEFB0(objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"));
        v37 = 136315394;
        v38 = a3;
        v39 = 2080;
        v40 = v34;
        LODWORD(v36) = 22;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 2, "%s and %s; but no need to turn off at this time",
                        (const char *)&v37,
                        v36);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::stopIndoorIfRequired(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v10);
        goto LABEL_94;
      }
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a3 + 23) >= 0)
        v8 = a3;
      else
        v8 = (uint64_t *)*a3;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Not seeded - ignoring: request to turn off due to %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      if (*((char *)a3 + 23) >= 0)
        v9 = a3;
      else
        v9 = (uint64_t *)*a3;
      v37 = 136315138;
      v38 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Not seeded - ignoring: request to turn off due to %s", (const char *)&v37);
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::stopIndoorIfRequired(std::chrono::steady_clock::time_point, const std::string &)", "%s\n", v10);
LABEL_94:
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100174254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *sub_100174278(unsigned int a1)
{
  NSObject *v3;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  if (a1 < 0xB)
    return (&off_102129EA8)[a1];
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Corrupt TurnOffReason: got %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5[0] = 67240192;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Corrupt TurnOffReason: got %{public}d", v5, 8);
    sub_100512490("Generic", 1, 0, 0, "const char *to_string(TurnOffReason)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return "Unknown";
}

const char *sub_100174440(unsigned int a1)
{
  NSObject *v3;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  if (a1 < 0xB)
    return (&off_102129E50)[a1];
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Corrupt KeepOffReason (short): got %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5[0] = 67240192;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "Corrupt KeepOffReason (short): got %{public}d", v5, 8);
    sub_100512490("Generic", 1, 0, 0, "const char *to_string(KeepOffReason)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return "Unknown";
}

void sub_100174608(int *a1, int8x16_t *a2, uint64_t a3, double a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  *(_DWORD *)(a3 + 52) |= 1u;
  v6 = *(_QWORD *)(a3 + 32);
  if (!v6)
    operator new();
  *(_DWORD *)(v6 + 44) |= 1u;
  *(double *)(v6 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v7 = *(_QWORD *)(a3 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 492) |= 0x800u;
  v8 = *(_QWORD *)(v7 + 352);
  if (!v8)
    operator new();
  *(_DWORD *)(v8 + 184) |= 0x10000u;
  v9 = *(_QWORD *)(v8 + 128);
  if (!v9)
    operator new();
  v10 = sub_1001755F0(a1);
  if (!sub_1001752F8(v10))
    sub_101919814();
  *(_DWORD *)(v9 + 36) |= 2u;
  *(_DWORD *)(v9 + 12) = v10;
  *(_DWORD *)(a3 + 52) |= 2u;
  v11 = *(_QWORD *)(a3 + 40);
  if (!v11)
    operator new();
  *(_DWORD *)(v11 + 488) |= 8u;
  v12 = *(_QWORD *)(v11 + 32);
  if (!v12)
    operator new();
  *(_DWORD *)(v12 + 100) |= 4u;
  v13 = *(_QWORD *)(v12 + 16);
  if (!v13)
    operator new();
  sub_1001765C8((uint64_t)a2, v13);
  *(_DWORD *)(a3 + 52) |= 2u;
  v14 = *(_QWORD *)(a3 + 40);
  if (!v14)
    operator new();
  *(_DWORD *)(v14 + 488) |= 8u;
  v15 = *(_QWORD *)(v14 + 32);
  if (!v15)
    operator new();
  *(_DWORD *)(v15 + 100) |= 8u;
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16)
    operator new();
  sub_100177190((uint64_t)a2[10].i64, v16);
  v17 = (int *)a2[50].i64[0];
  if (v17)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    v18 = *(_QWORD *)(a3 + 40);
    if (!v18)
      operator new();
    *(_DWORD *)(v18 + 492) |= 0x800u;
    v19 = *(_QWORD *)(v18 + 352);
    if (!v19)
      operator new();
    *(_DWORD *)(v19 + 184) |= 0x10000u;
    v20 = *(_QWORD *)(v19 + 128);
    if (!v20)
      operator new();
    *(_DWORD *)(v20 + 36) |= 4u;
    v21 = *(_QWORD *)(v20 + 16);
    if (!v21)
      operator new();
    *(_DWORD *)(v21 + 112) |= 4u;
    v22 = *(int **)(v21 + 24);
    if (!v22)
      operator new();
    sub_1013813BC(v17, v22);
  }
  v23 = a2[51].i64[0];
  *(_DWORD *)(a3 + 52) |= 2u;
  v24 = *(_QWORD *)(a3 + 40);
  if (!v24)
    operator new();
  *(_DWORD *)(v24 + 488) |= 8u;
  v25 = *(_QWORD *)(v24 + 32);
  if (!v25)
    operator new();
  *(_DWORD *)(v25 + 100) |= 0x10u;
  v26 = *(_QWORD *)(v25 + 40);
  if (!v26)
    operator new();
  sub_100176564(v23, v26);
  *(_DWORD *)(a3 + 52) |= 2u;
  v27 = *(_QWORD *)(a3 + 40);
  if (!v27)
    operator new();
  *(_DWORD *)(v27 + 488) |= 8u;
  v28 = *(_QWORD *)(v27 + 32);
  if (!v28)
    operator new();
  v29 = a2[51].i8[8];
  *(_DWORD *)(v28 + 100) |= 0x20u;
  *(_BYTE *)(v28 + 36) = v29;
  *(_DWORD *)(a3 + 52) |= 2u;
  *(_DWORD *)(v27 + 488) |= 8u;
  v30 = *(_QWORD *)(v27 + 32);
  if (!v30)
    operator new();
  v31 = a2[52].i64[0];
  *(_DWORD *)(v30 + 100) |= 0x40u;
  *(_QWORD *)(v30 + 48) = v31;
  *(_DWORD *)(a3 + 52) |= 2u;
  *(_DWORD *)(v27 + 488) |= 8u;
  v32 = *(_QWORD *)(v27 + 32);
  if (!v32)
    operator new();
  v33 = sub_10017639C(&a2[52].u32[2]);
  if (!sub_10008D1F0(v33))
    sub_1018FA798();
  *(_DWORD *)(v32 + 100) |= 0x80u;
  *(_DWORD *)(v32 + 72) = v33;
  *(_DWORD *)(a3 + 52) |= 2u;
  v34 = *(_QWORD *)(a3 + 40);
  if (!v34)
    operator new();
  *(_DWORD *)(v34 + 488) |= 8u;
  v35 = *(_QWORD *)(v34 + 32);
  if (!v35)
    operator new();
  *(_DWORD *)(v35 + 100) |= 0x100u;
  v36 = *(_QWORD *)(v35 + 56);
  if (!v36)
    operator new();
  sub_100178070((uint64_t)a2[53].i64, v36);
  *(_DWORD *)(a3 + 52) |= 2u;
  v37 = *(_QWORD *)(a3 + 40);
  if (!v37)
    operator new();
  *(_DWORD *)(v37 + 488) |= 8u;
  v38 = *(_QWORD *)(v37 + 32);
  if (!v38)
    operator new();
  *(_DWORD *)(v38 + 100) |= 0x200u;
  v39 = *(_QWORD *)(v38 + 64);
  if (!v39)
    operator new();
  sub_100178054(a2 + 55, v39);
  *(_DWORD *)(a3 + 52) |= 2u;
  v40 = *(_QWORD *)(a3 + 40);
  if (!v40)
    operator new();
  *(_DWORD *)(v40 + 488) |= 8u;
  v41 = *(_QWORD *)(v40 + 32);
  if (!v41)
    operator new();
  v42 = sub_1001761D4((unsigned int *)&a2[58]);
  if (!sub_10008D1F0(v42))
    sub_1018FA770();
  *(_DWORD *)(v41 + 100) |= 0x800u;
  *(_DWORD *)(v41 + 76) = v42;
  *(_DWORD *)(a3 + 52) |= 2u;
  v43 = *(_QWORD *)(a3 + 40);
  if (!v43)
    operator new();
  *(_DWORD *)(v43 + 488) |= 8u;
  v44 = *(_QWORD *)(v43 + 32);
  if (!v44)
    operator new();
  *(_DWORD *)(v44 + 100) |= 0x1000u;
  v45 = *(_QWORD *)(v44 + 88);
  if (!v45)
    operator new();
  v46 = a2[59].i64[0];
  *(_DWORD *)(v45 + 36) |= 1u;
  *(_QWORD *)(v45 + 8) = v46;
  *(_DWORD *)(a3 + 52) |= 2u;
  v47 = *(_QWORD *)(a3 + 40);
  if (!v47)
    operator new();
  *(_DWORD *)(v47 + 488) |= 8u;
  v48 = *(_QWORD *)(v47 + 32);
  if (!v48)
    operator new();
  *(_DWORD *)(v48 + 100) |= 0x1000u;
  v49 = *(_QWORD *)(v48 + 88);
  if (!v49)
    operator new();
  v50 = a2[58].i64[1];
  *(_DWORD *)(v49 + 36) |= 2u;
  *(_QWORD *)(v49 + 16) = v50;
  *(_DWORD *)(a3 + 52) |= 2u;
  v51 = *(_QWORD *)(a3 + 40);
  if (!v51)
    operator new();
  *(_DWORD *)(v51 + 488) |= 8u;
  v52 = *(_QWORD *)(v51 + 32);
  if (!v52)
    operator new();
  *(_DWORD *)(v52 + 100) |= 0x1000u;
  v53 = *(_QWORD *)(v52 + 88);
  if (!v53)
    operator new();
  v54 = a2[59].i64[1];
  *(_DWORD *)(v53 + 36) |= 4u;
  *(_QWORD *)(v53 + 24) = v54;
  v55 = a2[72].i64[1];
  if (v55)
  {
    *(_DWORD *)(a3 + 52) |= 2u;
    v56 = *(_QWORD *)(a3 + 40);
    if (!v56)
      operator new();
    *(_DWORD *)(v56 + 488) |= 0x1000u;
    v57 = *(_QWORD *)(v56 + 104);
    if (!v57)
      operator new();
    sub_101373768(v55, v57);
  }
}

void sub_100175118()
{
  operator delete();
}

double sub_1001752CC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10213A4E8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

BOOL sub_1001752F8(unsigned int a1)
{
  return a1 < 0x31;
}

double sub_100175304(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10218F6B8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  return result;
}

double sub_100175334(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10218F7A8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100175350(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10218FD48;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  return result;
}

double sub_100175394(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_10213BD48;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_1001753B0(uint64_t result)
{
  *(_QWORD *)result = off_10213A650;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

double sub_1001753C8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10213A5D8;
  *(_WORD *)(a1 + 16) = 0;
  result = COERCE_DOUBLE(&_mh_execute_header);
  *(_QWORD *)(a1 + 8) = &_mh_execute_header;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  return result;
}

double sub_1001753F0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10213A218;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 130) = 0u;
  *(_OWORD *)(a1 + 146) = 0u;
  *(_OWORD *)(a1 + 162) = 0u;
  *(_OWORD *)(a1 + 178) = 0u;
  *(_OWORD *)(a1 + 194) = 0u;
  *(_OWORD *)(a1 + 210) = 0u;
  *(_OWORD *)(a1 + 226) = 0u;
  *(_OWORD *)(a1 + 242) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 114) = 0u;
  *(_QWORD *)(a1 + 364) = 0;
  *(_OWORD *)(a1 + 258) = 0u;
  *(_OWORD *)(a1 + 341) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  return result;
}

double sub_100175478(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10213A470;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

uint64_t sub_100175494(uint64_t result)
{
  *(_QWORD *)result = off_10213A290;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

_QWORD *sub_1001754B0(_QWORD *result)
{
  *result = off_10213A380;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

double sub_1001754C4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102139FC0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 120) = xmmword_101BB0BE0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  return result;
}

double sub_10017550C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_10213A308;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

double sub_10017552C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  double result;

  *(_DWORD *)(a2 + 52) |= 1u;
  v2 = *(_QWORD *)(a2 + 32);
  if (!v2)
    operator new();
  v3 = *(_DWORD *)(v2 + 44);
  *(int8x16_t *)(v2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 8), *(int8x16_t *)(a1 + 8), 8uLL);
  result = *(double *)a1;
  *(_DWORD *)(v2 + 44) = v3 | 7;
  *(double *)(v2 + 24) = result;
  return result;
}

void sub_1001755AC()
{
  operator delete();
}

double sub_1001755D0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021AC9E0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1001755F0(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*a1 < 0x30)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "ConvertLocationProviderNotificationTypeToProtobuf,unhandled type,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v8[0] = 67240192;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ConvertLocationProviderNotificationTypeToProtobuf,unhandled type,%{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType ConvertLocationProviderNotificationTypeToProtobuf(const CLLocationProvider_Type::Notification &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

BOOL sub_1001757C0(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (a2)
  {
    v3 = result;
    *(_DWORD *)(a2 + 36) |= 1u;
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      operator new();
    if ((sub_101377D04((double *)(result + 16), v4, 1) & 1) == 0)
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v5 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert PredictedGnssAvailability mach continuous time to protobuf", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021B1A18);
        v11[0] = 0;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert PredictedGnssAvailability mach continuous time to protobuf", v11, 2);
        sub_100512490("Generic", 1, 0, 0, "void ConvertPredictedGnssAvailabilityToProtobuf(const CLLocationProvider_Type::PredictedGnssAvailability &, CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *)", "%s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
    }
    v6 = sub_100176004((int *)(v3 + 4));
    if (!sub_10002A324(v6))
      sub_1018FAE00();
    v7 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 24) = v6;
    v8 = *(_QWORD *)(v3 + 8);
    *(_DWORD *)(a2 + 36) = v7 | 6;
    *(_QWORD *)(a2 + 16) = v8;
    v9 = sub_100175DA4((int *)v3);
    result = sub_10002A324(v9);
    if (!result)
      sub_1018FADD8();
    *(_DWORD *)(a2 + 36) |= 8u;
    *(_DWORD *)(a2 + 28) = v9;
  }
  return result;
}

void sub_100175A1C()
{
  operator delete();
}

void sub_100175A48(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  *(_DWORD *)(a3 + 52) |= 2u;
  v4 = *(_QWORD *)(a3 + 40);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 488) |= 0x80u;
  v5 = *(_QWORD *)(v4 + 64);
  if (!v5)
    operator new();
  sub_10017552C((uint64_t)a2, a3);
  *(_DWORD *)(v5 + 20) |= 1u;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    operator new();
  if ((sub_100178094(a2, v6) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v7 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Error: Failed to convert timer notification receipt time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Error: Failed to convert timer notification receipt time to protobuf", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::SerializeTimerNotification(const CLUtils::Timestamp &, CLP::LogEntry::LogEntry &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
}

void sub_100175CA0()
{
  operator delete();
}

double sub_100175CFC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102139C00;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

double sub_100175D18(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_102159A08;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  return result;
}

_QWORD *sub_100175D90(_QWORD *result)
{
  result[1] = 0;
  result[2] = 0;
  *result = &off_10213AB78;
  return result;
}

uint64_t sub_100175DA4(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*a1 < 3)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled gnss availability meas source,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v8[0] = 67240192;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled gnss availability meas source,%{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::GnssAvailabilityPrediction_MeasurementSource ConvertCLGnssAvailabilityMeasurementSourceToProtobuf(const CLGnssAvailabilityPredictor::MeasurementSource &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

BOOL sub_100175F74(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  char v6;
  unsigned int v7;
  int v8;
  char v9;

  if (a2)
  {
    v3 = result;
    v4 = sub_1013821C0((int *)result);
    if (!sub_10008D1F0(v4))
      sub_1018FA7E8();
    v5 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 8) = v4;
    v6 = *(_BYTE *)(v3 + 4);
    *(_DWORD *)(a2 + 28) = v5 | 3;
    *(_BYTE *)(a2 + 16) = v6;
    v7 = sub_101382390((int *)(v3 + 8));
    result = sub_100106094(v7);
    if (!result)
      sub_1018FA7C0();
    v8 = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(a2 + 12) = v7;
    *(_DWORD *)(a2 + 20) = *(_QWORD *)(v3 + 16);
    v9 = *(_BYTE *)(v3 + 24);
    *(_DWORD *)(a2 + 28) = v8 | 0x1C;
    *(_BYTE *)(a2 + 17) = v9;
  }
  return result;
}

uint64_t sub_100176004(int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (*a1 < 3)
    return (*a1 + 1);
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v3 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v4 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled gnss availability prediction state,%{public}d", buf, 8u);
  }
  v5 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = *a1;
    v8[0] = 67240192;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled gnss availability prediction state,%{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::GnssAvailabilityPrediction_GnssAvailability ConvertCLGnssAvailabilityStateToProtobuf(const CLGnssAvailabilityPredictor::PredictionType &)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

uint64_t sub_1001761D4(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled motion detected type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled motion detected type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::Location_MotionDetectedType ConvertCLMotionDetectedTypeToProtobuf(const CLLocationProvider_Type::MotionDetected &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10017639C(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled signal quality type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled signal quality type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::Location_SignalQualityType ConvertCLSignalQualityTypeToProtobuf(const CLLocationProvider_Type::SignalQuality &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

BOOL sub_100176564(uint64_t a1, uint64_t a2)
{
  char v3;
  unsigned int v4;
  _BOOL8 result;
  int v6;
  uint64_t v7;

  v3 = BYTE4(a1);
  v7 = a1;
  v4 = sub_100176BB0((unsigned int *)&v7);
  result = sub_100176BA4(v4);
  if (!result)
    sub_1018FA748();
  v6 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 20) = v6 | 3;
  *(_BYTE *)(a2 + 12) = v3;
  return result;
}

void sub_1001765C8(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  NSObject *v22;
  char *v23;
  _WORD v24[8];
  uint8_t buf[4];

  if (a2)
  {
    v4 = sub_100176DD8((unsigned int *)a1);
    if (!sub_100176D78(v4))
      sub_1018FA568();
    v5 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 48) = v4;
    *(_DWORD *)(a2 + 152) = v5 | 3;
    v6 = *(_QWORD *)(a2 + 8);
    if (!v6)
      operator new();
    *(_DWORD *)(v6 + 28) |= 1u;
    *(_DWORD *)(a2 + 152) |= 2u;
    *(_DWORD *)(v6 + 28) |= 2u;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)(a1 + 4);
    v7 = *(_DWORD *)(a2 + 152);
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 20);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 36);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 52);
    *(_DWORD *)(a2 + 152) = v7 | 0x3FC;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 68);
    *(_DWORD *)(a2 + 52) = *(_DWORD *)(a1 + 84);
    v8 = *(_QWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 152) = v7 | 0xFFC;
    *(_QWORD *)(a2 + 88) = v8;
    v9 = sub_100176BB0((unsigned int *)(a1 + 96));
    if (!sub_100176BA4(v9))
      sub_1018FA540();
    v10 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 104) = v9;
    *(_DWORD *)(a2 + 152) = v10 | 0x3000;
    v11 = *(_QWORD *)(a2 + 96);
    if (!v11)
      operator new();
    *(_DWORD *)(v11 + 28) |= 1u;
    *(_DWORD *)(a2 + 152) |= 0x2000u;
    *(_DWORD *)(v11 + 28) |= 2u;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(a1 + 100);
    v12 = *(_QWORD *)(a1 + 116);
    v13 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 152) = v13 | 0x4000;
    *(_QWORD *)(a2 + 112) = v12;
    v14 = *(_DWORD *)(a1 + 124);
    *(_DWORD *)(a2 + 152) = v13 | 0xC000;
    *(_DWORD *)(a2 + 108) = v14;
    v15 = sub_100176FAC((unsigned int *)(a1 + 128));
    if (!sub_100176D94(v15))
      sub_1018FA518();
    *(_DWORD *)(a2 + 152) |= 0x10000u;
    *(_DWORD *)(a2 + 120) = v15;
    v16 = sub_1001769DC((unsigned int *)(a1 + 132));
    if (!sub_10008D1F0(v16))
      sub_1018FA4F0();
    *(_DWORD *)(a2 + 152) |= 0x20000u;
    *(_DWORD *)(a2 + 124) = v16;
    v17 = sub_1001769DC((unsigned int *)(a1 + 136));
    if (!sub_10008D1F0(v17))
      sub_1018FA4C8();
    *(_DWORD *)(a2 + 152) |= 0x40000u;
    *(_DWORD *)(a2 + 128) = v17;
    *(_DWORD *)buf = 0;
    v18 = *(_DWORD *)(a1 + 140);
    if (v18 < 5 || v18 == 6)
      *(_DWORD *)buf = 6;
    v19 = sub_10136FBF8((int *)buf);
    if (!sub_10044281C(v19))
      sub_1018FA4A0();
    v20 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a2 + 132) = v19;
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 144);
    v21 = *(_BYTE *)(a1 + 152);
    *(_DWORD *)(a2 + 152) = v20 | 0x380000;
    *(_BYTE *)(a2 + 144) = v21;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v22 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "pLocation,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v24[0] = 0;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pLocation,Invalid pointer", v24, 2);
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLDaemonLocationToProtobuf(const CLDaemonLocation &, CLP::LogEntry::PrivateData::DaemonLocation *)", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
  }
}

void sub_1001769AC()
{
  operator delete();
}

uint64_t sub_1001769DC(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled client location reference frame type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled client location reference frame type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType ConvertCLClientLocationReferenceTypeToProtobuf(const CLClientLocationReferenceFrame &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

BOOL sub_100176BA4(unsigned int a1)
{
  return a1 < 0xE;
}

uint64_t sub_100176BB0(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 0xE)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled location type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled location type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::LocationType ConvertCLLocationTypeToProtobuf(const CLLocationType &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

BOOL sub_100176D78(unsigned int a1)
{
  return a1 < 3 || a1 == 0xFFFF;
}

BOOL sub_100176D94(int a1)
{
  _BOOL8 result;

  result = 1;
  if ((a1 - 25) > 0x32 || ((1 << (a1 - 25)) & 0x4000002000001) == 0)
    return (a1 + 1) < 2;
  return result;
}

uint64_t sub_100176DD8(unsigned int *a1)
{
  uint64_t result;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  result = *a1;
  if ((result - 1) >= 2 && (_DWORD)result != 0xFFFF)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v4 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v5 = *a1;
      *(_DWORD *)buf = 67240192;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled client location suitability type: %{public}d", buf, 8u);
    }
    v6 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v6)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = *a1;
      v9[0] = 67240192;
      v9[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled client location suitability type: %{public}d", v9, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocation_ClientLocationSuitabilityType ConvertCLClientLocationSuitabilityTypeToProtobuf(const CLClientLocationSuitability &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100176FAC(unsigned int *a1)
{
  uint64_t result;
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  result = *a1;
  if (((result - 25) > 0x32 || ((1 << (result - 25)) & 0x4000002000001) == 0)
    && (_DWORD)result != 0)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      *(_DWORD *)buf = 67240192;
      v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Received unhandled location integrity type: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v7 = *a1;
      v9[0] = 67240192;
      v9[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled location integrity type: %{public}d", v9, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocation_LocationIntegrityType ConvertCLLocationIntegrityTypeToProtobuf(const CLLocationIntegrity &)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_100177190(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  char v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  int v54;
  char v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  char v59;
  NSObject *v60;
  char *v61;
  _WORD v62[8];
  uint8_t buf[1640];

  if (a2)
  {
    v4 = *(_DWORD *)(a2 + 364);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 48);
    v5 = *(_BYTE *)(a1 + 52);
    *(_DWORD *)(a2 + 364) = v4 | 0x1FF;
    *(_BYTE *)(a2 + 112) = v5;
    v6 = sub_100177CBC((unsigned int *)(a1 + 56));
    if (!sub_10002A324(v6))
      sub_1018FA720();
    v7 = *(_DWORD *)(a2 + 364);
    *(_DWORD *)(a2 + 60) = v6;
    *(_DWORD *)(a2 + 364) = v7 | 0x600;
    v8 = *(_QWORD *)(a2 + 64);
    if (!v8)
      operator new();
    *(_DWORD *)(v8 + 28) |= 1u;
    *(_DWORD *)(a2 + 364) |= 0x400u;
    *(_DWORD *)(v8 + 28) |= 2u;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)(a1 + 64);
    v9 = *(_QWORD *)(a1 + 80);
    v10 = *(_DWORD *)(a2 + 364);
    *(_DWORD *)(a2 + 364) = v10 | 0x800;
    *(_QWORD *)(a2 + 72) = v9;
    v11 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)(a2 + 364) = v10 | 0x1800;
    *(_DWORD *)(a2 + 80) = v11;
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 92);
    *(_BYTE *)(a2 + 113) = *(_BYTE *)(a1 + 96);
    *(_DWORD *)(a2 + 364) = v10 | 0x807800;
    v12 = *(_QWORD *)(a2 + 136);
    if (!v12)
      operator new();
    *(_DWORD *)(v12 + 32) |= 1u;
    *(_DWORD *)(a2 + 364) |= 0x800000u;
    *(_DWORD *)(v12 + 32) |= 2u;
    *(_OWORD *)(v12 + 8) = *(_OWORD *)(a1 + 104);
    *(_DWORD *)(a2 + 364) |= 0x800000u;
    v13 = *(_BYTE *)(a1 + 120);
    *(_DWORD *)(v12 + 32) |= 4u;
    *(_BYTE *)(v12 + 24) = v13;
    *(_DWORD *)(a2 + 364) |= 0x800000u;
    v14 = *(_BYTE *)(a1 + 121);
    *(_DWORD *)(v12 + 32) |= 8u;
    *(_BYTE *)(v12 + 25) = v14;
    *(_DWORD *)(a2 + 364) |= 0x8000u;
    v15 = *(_QWORD *)(a2 + 88);
    if (!v15)
      operator new();
    *(_DWORD *)(v15 + 28) |= 1u;
    *(_DWORD *)(a2 + 364) |= 0x8000u;
    *(_DWORD *)(v15 + 28) |= 2u;
    *(_OWORD *)(v15 + 8) = *(_OWORD *)(a1 + 296);
    v16 = sub_100177E88((unsigned int *)(a1 + 312));
    if (!sub_100177AB4(v16))
      sub_1018FA6F8();
    v17 = *(_DWORD *)(a2 + 364);
    *(_DWORD *)(a2 + 96) = v16;
    *(_DWORD *)(a2 + 100) = *(_DWORD *)(a1 + 316);
    *(_DWORD *)(a2 + 364) = v17 | 0x70000;
    v18 = *(_QWORD *)(a2 + 104);
    if (!v18)
      operator new();
    *(_DWORD *)(v18 + 28) |= 1u;
    *(_DWORD *)(a2 + 364) |= 0x40000u;
    *(_DWORD *)(v18 + 28) |= 2u;
    *(_OWORD *)(v18 + 8) = *(_OWORD *)(a1 + 320);
    *(_DWORD *)(a2 + 364) |= 0x180000u;
    *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 336);
    v19 = sub_100177AF4((unsigned int *)(a1 + 352));
    if (!sub_10008D1F0(v19))
      sub_1018FA6D0();
    v20 = *(_DWORD *)(a2 + 364);
    *(_DWORD *)(a2 + 116) = v19;
    *(_BYTE *)(a2 + 114) = *(_BYTE *)(a1 + 356);
    *(_OWORD *)(a2 + 144) = *(_OWORD *)(a1 + 360);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 376);
    *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 496);
    v21 = *(_BYTE *)(a1 + 512);
    v22 = v20 | 0x7F600000;
    *(_DWORD *)(a2 + 364) = v22;
    *(_BYTE *)(a2 + 115) = v21;
    v23 = *(uint64_t **)(a1 + 520);
    if (v23)
    {
      v24 = *v23;
      v25 = v23[1];
      if (*v23 != v25)
      {
        do
        {
          v26 = *(int *)(a2 + 296);
          v27 = *(_DWORD *)(a2 + 300);
          if ((int)v26 >= v27)
          {
            if (v27 == *(_DWORD *)(a2 + 304))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 288), v27 + 1);
              v27 = *(_DWORD *)(a2 + 300);
            }
            *(_DWORD *)(a2 + 300) = v27 + 1;
            sub_1013846AC();
          }
          v28 = *(_QWORD *)(a2 + 288);
          *(_DWORD *)(a2 + 296) = v26 + 1;
          sub_10136FDD4(v24, *(__n128 **)(v28 + 8 * v26));
          v24 += 28;
        }
        while (v24 != v25);
        v22 = *(_DWORD *)(a2 + 364);
      }
    }
    v29 = *(_QWORD *)(a1 + 392);
    *(_DWORD *)(a2 + 364) = v22 | 0x80000000;
    *(_QWORD *)(a2 + 192) = v29;
    v30 = *(_DWORD *)(a2 + 368);
    *(_QWORD *)(a2 + 200) = *(_QWORD *)(a1 + 416);
    *(_BYTE *)(a2 + 276) = *(_BYTE *)(a1 + 424);
    *(_DWORD *)(a2 + 368) = v30 | 7;
    v31 = *(_QWORD *)(a2 + 208);
    if (!v31)
      operator new();
    *(_DWORD *)(v31 + 28) |= 1u;
    *(_DWORD *)(a2 + 368) |= 4u;
    *(_DWORD *)(v31 + 28) |= 2u;
    *(_OWORD *)(v31 + 8) = *(_OWORD *)(a1 + 432);
    v32 = *(_QWORD *)(a1 + 448);
    *(_DWORD *)(a2 + 368) |= 8u;
    *(_QWORD *)(a2 + 216) = v32;
    v33 = sub_1001769DC((unsigned int *)(a1 + 456));
    if (!sub_10008D1F0(v33))
      sub_1018FA6A8();
    v34 = *(_DWORD *)(a2 + 368);
    *(_DWORD *)(a2 + 272) = v33;
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 480);
    *(_QWORD *)(a2 + 240) = *(_QWORD *)(a1 + 600);
    *(_OWORD *)(a2 + 248) = *(_OWORD *)(a1 + 400);
    *(_BYTE *)(a2 + 277) = *(_BYTE *)(a1 + 425);
    *(_QWORD *)(a2 + 264) = *(_QWORD *)(a1 + 464);
    v35 = *(_QWORD *)(a1 + 472);
    *(_DWORD *)(a2 + 368) = v34 | 0x1FF0;
    *(_QWORD *)(a2 + 280) = v35;
    v36 = *(uint64_t **)(a1 + 520);
    if (v36)
    {
      v37 = *v36;
      v38 = v36[1];
      if (*v36 != v38)
      {
        do
        {
          v39 = *(int *)(a2 + 296);
          v40 = *(_DWORD *)(a2 + 300);
          if ((int)v39 >= v40)
          {
            if (v40 == *(_DWORD *)(a2 + 304))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 288), v40 + 1);
              v40 = *(_DWORD *)(a2 + 300);
            }
            *(_DWORD *)(a2 + 300) = v40 + 1;
            sub_1013846AC();
          }
          v41 = *(_QWORD *)(a2 + 288);
          *(_DWORD *)(a2 + 296) = v39 + 1;
          v42 = *(_QWORD *)(v41 + 8 * v39);
          v43 = sub_10136FE3C((int *)v37);
          if (!sub_10001B780(v43))
            sub_1018FA590();
          v44 = *(_DWORD *)(v42 + 40);
          *(_DWORD *)(v42 + 40) = v44 | 1;
          *(_DWORD *)(v42 + 8) = v43;
          *(_DWORD *)(v42 + 12) = *(_DWORD *)(v37 + 4);
          *(_OWORD *)(v42 + 16) = *(_OWORD *)(v37 + 8);
          *(_WORD *)(v42 + 32) = *(_WORD *)(v37 + 24);
          *(_DWORD *)(v42 + 40) = v44 | 0xFF;
          v37 += 28;
        }
        while (v37 != v38);
      }
    }
    v45 = sub_10137000C((unsigned int *)(a1 + 536));
    if (!sub_10008D1F0(v45))
      sub_1018FA680();
    v46 = *(_DWORD *)(a2 + 368);
    *(_DWORD *)(a2 + 312) = v45;
    *(_DWORD *)(a2 + 368) = v46 | 0xC000;
    v47 = *(_QWORD *)(a2 + 320);
    if (!v47)
      operator new();
    *(_DWORD *)(v47 + 40) |= 1u;
    *(_DWORD *)(a2 + 368) |= 0x8000u;
    *(_DWORD *)(v47 + 40) |= 2u;
    *(_OWORD *)(v47 + 8) = *(_OWORD *)(a1 + 544);
    *(_DWORD *)(a2 + 368) |= 0x8000u;
    v48 = *(_QWORD *)(a1 + 560);
    *(_DWORD *)(v47 + 40) |= 4u;
    *(_QWORD *)(v47 + 24) = v48;
    *(_DWORD *)(a2 + 368) |= 0x8000u;
    v49 = sub_100177E88((unsigned int *)(a1 + 568));
    if (!sub_100177AB4(v49))
      sub_1018FA5B8();
    *(_DWORD *)(v47 + 40) |= 8u;
    *(_DWORD *)(v47 + 32) = v49;
    v50 = sub_1013701D4((unsigned __int8 *)(a1 + 576));
    if (!sub_10008D1F0(v50))
      sub_1018FA658();
    v51 = *(_DWORD *)(a2 + 368);
    *(_DWORD *)(a2 + 316) = v50;
    *(_QWORD *)(a2 + 328) = *(_QWORD *)(a1 + 584);
    v52 = *(_QWORD *)(a1 + 592);
    *(_DWORD *)(a2 + 368) = v51 | 0x70000;
    *(_QWORD *)(a2 + 336) = v52;
    v53 = sub_10137039C((unsigned __int8 *)(a1 + 609));
    if (!sub_10002A324(v53))
      sub_1018FA630();
    v54 = *(_DWORD *)(a2 + 368);
    *(_DWORD *)(a2 + 344) = v53;
    v55 = *(_BYTE *)(a1 + 610);
    *(_DWORD *)(a2 + 368) = v54 | 0x180000;
    *(_BYTE *)(a2 + 278) = v55;
    v56 = sub_101370564((unsigned int *)(a1 + 612));
    if (!sub_10008D1F0(v56))
      sub_1018FA608();
    *(_DWORD *)(a2 + 368) |= 0x200000u;
    *(_DWORD *)(a2 + 348) = v56;
    v57 = sub_10137072C((unsigned int *)(a1 + 616));
    if (!sub_100106094(v57))
      sub_1018FA5E0();
    v58 = *(_DWORD *)(a2 + 368);
    *(_DWORD *)(a2 + 352) = v57;
    *(_BYTE *)(a2 + 279) = *(_BYTE *)(a1 + 608);
    v59 = *(_BYTE *)(a1 + 632);
    *(_DWORD *)(a2 + 368) = v58 | 0x1C00000;
    *(_BYTE *)(a2 + 356) = v59;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v60 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_FAULT, "pLocationPrivate,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v62[0] = 0;
      v61 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pLocationPrivate,Invalid pointer", v62, 2);
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLDaemonLocationPrivateToProtobuf(const CLDaemonLocationPrivate &, CLP::LogEntry::PrivateData::DaemonLocationPrivate *)", "%s\n", v61);
      if (v61 != (char *)buf)
        free(v61);
    }
  }
}

void sub_100177A40()
{
  operator delete();
}

_QWORD *sub_100177AA0(_QWORD *result)
{
  *result = off_102139F48;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

BOOL sub_100177AB4(int a1)
{
  return (a1 + 1) < 4;
}

_QWORD *sub_100177AC4(_QWORD *result)
{
  *result = off_10213A0B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_100177AD8(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = off_10213A038;
  *(_WORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100177AF4(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if (result >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled client location origin device type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled client location origin device type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocationPrivate_ClientLocationOriginDeviceType ConvertCLClientLocationOriginDeviceTypeToProtobuf(const CLClientLocationOriginDevice &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100177CBC(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if ((result - 1) >= 3)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled client location match quality type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled client location match quality type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocationPrivate_MatchQualityType ConvertCLClientLocationMatchQualityTypeToProtobuf(const CLClientLocationMatchQuality &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100177E88(unsigned int *a1)
{
  uint64_t result;
  NSObject *v3;
  int v4;
  _BOOL4 v5;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = *a1;
  if ((result + 1) >= 4)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v4 = *a1;
      *(_DWORD *)buf = 67240192;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received unhandled undulation model type: %{public}d", buf, 8u);
    }
    v5 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v5)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v6 = *a1;
      v8[0] = 67240192;
      v8[1] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled undulation model type: %{public}d", v8, 8);
      sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::DaemonLocationPrivate_UndulationModelType ConvertCLUndulationModelTypeToProtobuf(const CLUndulationModelType &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

int8x16_t sub_100178054(int8x16_t *a1, uint64_t a2)
{
  int8x16_t result;

  *(_DWORD *)(a2 + 28) |= 3u;
  result = vextq_s8(*a1, *a1, 8uLL);
  *(int8x16_t *)(a2 + 8) = result;
  return result;
}

__n128 sub_100178070(uint64_t a1, uint64_t a2)
{
  int v2;
  __n128 result;

  v2 = *(_DWORD *)(a2 + 44);
  *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
  *(_DWORD *)(a2 + 44) = v2 | 0xF;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

uint64_t sub_100178094(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (*((_BYTE *)a1 + 24))
    {
      v2 = *(_DWORD *)(a2 + 36);
      *(int8x16_t *)(a2 + 8) = vextq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a1 + 1), 8uLL);
      v3 = *a1;
      *(_DWORD *)(a2 + 36) = v2 | 7;
      *(_QWORD *)(a2 + 24) = v3;
      return 1;
    }
    return 0;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v5 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "pProtoTimestamp is nullptr", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "pProtoTimestamp is nullptr", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "BOOL ConvertTimestampToProtobuf(const CLUtils::Timestamp &, CLP::LogEntry::PrivateData::TimeStamp *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

id sub_100178838(uint64_t a1, _OWORD *a2)
{
  id v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[8];
  _OWORD v11[2];

  v4 = objc_alloc((Class)CLLocation);
  v5 = a2[7];
  v10[6] = a2[6];
  v10[7] = v5;
  v11[0] = a2[8];
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)((char *)a2 + 140);
  v6 = a2[3];
  v10[2] = a2[2];
  v10[3] = v6;
  v7 = a2[5];
  v10[4] = a2[4];
  v10[5] = v7;
  v8 = a2[1];
  v10[0] = *a2;
  v10[1] = v8;
  return objc_msgSend(*(id *)(a1 + 1072), "updateCurrentLocation:", objc_msgSend(v4, "initWithClientLocation:", v10));
}

__n128 sub_1001795D0(uint64_t a1, __int128 *a2, char *__src)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  v5 = *a2;
  *(_OWORD *)(a1 + 132) = a2[1];
  *(_OWORD *)(a1 + 116) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  *(_OWORD *)(a1 + 196) = a2[5];
  *(_OWORD *)(a1 + 180) = v8;
  *(_OWORD *)(a1 + 164) = v7;
  *(_OWORD *)(a1 + 148) = v6;
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  *(_OWORD *)(a1 + 256) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(a1 + 244) = v11;
  *(_OWORD *)(a1 + 228) = v10;
  *(_OWORD *)(a1 + 212) = v9;
  memcpy((void *)(a1 + 272), __src, 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 792), (uint64_t *)__src + 65);
  v13 = *(_OWORD *)(__src + 552);
  v12 = *(_OWORD *)(__src + 568);
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(__src + 536);
  *(_OWORD *)(a1 + 824) = v13;
  *(_OWORD *)(a1 + 840) = v12;
  v15 = *(_OWORD *)(__src + 600);
  result = *(__n128 *)(__src + 616);
  v16 = *(_OWORD *)(__src + 584);
  *(_BYTE *)(a1 + 904) = __src[632];
  *(_OWORD *)(a1 + 872) = v15;
  *(__n128 *)(a1 + 888) = result;
  *(_OWORD *)(a1 + 856) = v16;
  return result;
}

uint64_t sub_100179958(uint64_t a1, double *a2, double *a3, double *a4, _BYTE *a5)
{
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v16;
  char v17;
  uint64_t v18;
  pthread_mutex_t *v19;
  __int16 v20;

  v18 = qword_102314020;
  (*(void (**)(uint64_t))(*(_QWORD *)qword_102314020 + 16))(qword_102314020);
  v20 = 256;
  v10.n128_f64[0] = *a2;
  if (*a2 <= *(double *)(a1 + 32))
  {
    v14 = 0;
    goto LABEL_19;
  }
  if (v10.n128_f64[0] < *(double *)(a1 + 40))
  {
    v10.n128_f64[0] = *a3;
    if (*a3 > *(double *)(a1 + 48) && v10.n128_f64[0] < *(double *)(a1 + 56))
    {
      v11 = *(_QWORD *)(a1 + 64);
      v12 = *(_QWORD *)(a1 + 72);
      if (v12 == v11)
      {
        sub_1013D3994(a1);
        v11 = *(_QWORD *)(a1 + 64);
        v12 = *(_QWORD *)(a1 + 72);
      }
      while (v11 != v12)
      {
        if (sub_1013D3DBC(v11, *a2, *a3))
        {
          v17 = 0;
          v16 = 0.0;
          v13 = sub_10068878C();
          if (sub_10068D300(v13, (sqlite3_int64 *)(v11 + 32), &v17, &v16, *a2, *a3))
          {
            if (v17 || *a5 && (v10.n128_f64[0] = v16, v16 <= *a4))
            {
              v14 = 1;
              goto LABEL_15;
            }
          }
        }
        v11 += 40;
      }
    }
  }
  v14 = 0;
LABEL_15:
  if (HIBYTE(v20))
  {
    if ((_BYTE)v20)
    {
      pthread_mutex_unlock(v19);
      return v14;
    }
LABEL_19:
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v18 + 24))(v18, v10);
  }
  return v14;
}

void sub_100179AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10017A970(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t result;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  double v24;
  int v25;
  NSObject *v26;
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  NSObject *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  int v63;
  _BYTE v64[14];
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  double v72;
  uint8_t buf[4];
  _BYTE v74[14];
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;

  if ((sub_100182290(a2) & 1) != 0)
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 48) = v8;
    v9 = *(_OWORD *)(a2 + 32);
    v10 = *(_OWORD *)(a2 + 48);
    v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 64) = v9;
    *(_OWORD *)(a1 + 80) = v10;
    v12 = *(_OWORD *)(a2 + 96);
    v13 = *(_OWORD *)(a2 + 112);
    v14 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 172) = *(_OWORD *)(a2 + 140);
    *(_OWORD *)(a1 + 144) = v13;
    *(_OWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 128) = v12;
    *(_DWORD *)buf = 0;
    result = sub_10017BFFC(a1 + 8, (int *)buf);
    if (result)
    {
      v16 = sub_1001FCBB4();
      v17 = *(double *)(a1 + 192);
      v18 = vabdd_f64(v16, v17);
      if (v17 < 0.0 || v18 > 600.0)
      {
        *(_DWORD *)buf = 0;
        if (sub_10017BFFC(a1 + 8, (int *)buf))
        {
          v19 = *(_QWORD *)(a1 + 16);
          if (v19)
          {
            v20 = a1 + 16;
            do
            {
              v21 = *(_DWORD *)(v19 + 32);
              v22 = v21 < 0;
              if (v21 >= 0)
                v23 = (uint64_t *)v19;
              else
                v23 = (uint64_t *)(v19 + 8);
              if (!v22)
                v20 = v19;
              v19 = *v23;
            }
            while (*v23);
            if (v20 != a1 + 16 && *(int *)(v20 + 32) <= 0)
            {
              v24 = sub_10011E634((double *)(a1 + 208), *(double *)(v20 + 40), *(double *)(v20 + 48), *(double *)(a1 + 36), *(double *)(a1 + 44), 0.0);
              if (v24 <= a4)
                v25 = 1;
              else
                v25 = 2;
              *(_DWORD *)(a1 + 200) = v25;
              *(double *)(a1 + 192) = v16;
              if (qword_1022A00D0 != -1)
                dispatch_once(&qword_1022A00D0, &stru_1021B3298);
              v26 = qword_1022A00D8;
              if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
              {
                v27 = *(_DWORD *)(a1 + 200);
                *(_DWORD *)buf = 67174913;
                *(_DWORD *)v74 = v27;
                *(_WORD *)&v74[4] = 2050;
                *(double *)&v74[6] = v24;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLGMTPS,currentServiceMode,%{private}d,distance,%{public}.1lf", buf, 0x12u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A00D0 != -1)
                  dispatch_once(&qword_1022A00D0, &stru_1021B3298);
                v51 = *(_DWORD *)(a1 + 200);
                v63 = 67174913;
                *(_DWORD *)v64 = v51;
                *(_WORD *)&v64[4] = 2050;
                *(double *)&v64[6] = v24;
                v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,currentServiceMode,%{private}d,distance,%{public}.1lf", &v63, 18);
                sub_100512490("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::updateUserLocation(CLDaemonLocation &, const double, TouristModeHandler)", "%s\n", v52);
                if (v52 != (char *)buf)
                  free(v52);
              }
              v28 = *(_OWORD *)(a1 + 144);
              v60 = *(_OWORD *)(a1 + 128);
              v61 = v28;
              v62[0] = *(_OWORD *)(a1 + 160);
              *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)(a1 + 172);
              v29 = *(_OWORD *)(a1 + 80);
              v56 = *(_OWORD *)(a1 + 64);
              v57 = v29;
              v30 = *(_OWORD *)(a1 + 112);
              v58 = *(_OWORD *)(a1 + 96);
              v59 = v30;
              v31 = *(_OWORD *)(a1 + 48);
              v54 = *(_OWORD *)(a1 + 32);
              v55 = v31;
              (*(void (**)(uint64_t, __int128 *, BOOL))(a3 + 16))(a3, &v54, *(_DWORD *)(a1 + 200) == 2);
            }
          }
        }
      }
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v32 = qword_1022A00D8;
      if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
      {
        v33 = *(_QWORD *)(a1 + 108);
        v34 = *(_DWORD *)(a1 + 128);
        v35 = *(_QWORD *)(a1 + 36);
        v36 = *(_QWORD *)(a1 + 44);
        v37 = *(_DWORD *)(a1 + 200);
        *(_DWORD *)buf = 134284801;
        *(_QWORD *)v74 = v33;
        *(_WORD *)&v74[8] = 1026;
        *(_DWORD *)&v74[10] = v34;
        v75 = 2049;
        v76 = v35;
        v77 = 2049;
        v78 = v36;
        v79 = 1025;
        v80 = v37;
        v81 = 2049;
        v82 = v18;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLGMTPS,received valid location,time,%{private}.1lf,type,%{public}d,LL,%{private}.7lf,%{private}.7lf,touristMode,%{private}d,dT,%{private}.1lf", buf, 0x36u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00D0 != -1)
          dispatch_once(&qword_1022A00D0, &stru_1021B3298);
        v45 = *(_QWORD *)(a1 + 108);
        v46 = *(_DWORD *)(a1 + 128);
        v47 = *(_QWORD *)(a1 + 36);
        v48 = *(_QWORD *)(a1 + 44);
        v49 = *(_DWORD *)(a1 + 200);
        v63 = 134284801;
        *(_QWORD *)v64 = v45;
        *(_WORD *)&v64[8] = 1026;
        *(_DWORD *)&v64[10] = v46;
        v65 = 2049;
        v66 = v47;
        v67 = 2049;
        v68 = v48;
        v69 = 1025;
        v70 = v49;
        v71 = 2049;
        v72 = v18;
        LODWORD(v53) = 54;
        v50 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,received valid location,time,%{private}.1lf,type,%{public}d,LL,%{private}.7lf,%{private}.7lf,touristMode,%{private}d,dT,%{private}.1lf", &v63, v53, v54, v55, v56, v57, v58, v59, v60, v61,
                        v62[0],
                        *(_QWORD *)&v62[1],
                        *((_QWORD *)&v62[1] + 1));
        sub_100512490("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::updateUserLocation(CLDaemonLocation &, const double, TouristModeHandler)", "%s\n", v50);
        if (v50 != (char *)buf)
          free(v50);
      }
      return 1;
    }
  }
  else
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v38 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_ERROR))
    {
      v39 = *(_QWORD *)(a2 + 76);
      v40 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 134283777;
      *(_QWORD *)v74 = v39;
      *(_WORD *)&v74[8] = 1026;
      *(_DWORD *)&v74[10] = v40;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "CLGMTPS,received invalid location,time,%{private}.1lf,type,%{public}d,", buf, 0x12u);
    }
    v41 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v41)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      v42 = *(_QWORD *)(a2 + 76);
      v43 = *(_DWORD *)(a2 + 96);
      v63 = 134283777;
      *(_QWORD *)v64 = v42;
      *(_WORD *)&v64[8] = 1026;
      *(_DWORD *)&v64[10] = v43;
      v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 16, "CLGMTPS,received invalid location,time,%{private}.1lf,type,%{public}d,", &v63, 18);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLRoutineManagerInfo::updateUserLocation(CLDaemonLocation &, const double, TouristModeHandler)", "%s\n", v44);
      if (v44 != (char *)buf)
        free(v44);
      return 0;
    }
  }
  return result;
}

void sub_10017B734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10017BC38(double *a1)
{
  double v2;
  uint64_t v3;
  NSObject *v4;
  _BOOL8 result;
  const char *v6;
  NSObject *v7;
  uint8_t *v8;
  _BYTE v9[24];
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  double v13;
  __int16 v14;
  uint64_t v15;

  if (*a1 <= 0.0)
    return 1;
  v2 = vabdd_f64(sub_1001FCBB4(), *a1);
  v3 = sub_10017BF94((uint64_t)a1);
  if (v3 && v2 <= 86400.0)
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      v11 = v3;
      v12 = 2050;
      v13 = v2;
      v14 = 2050;
      v15 = 0x40F5180000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLGMTPS,LOIs already exist,%{public}ld,and it's not time to refresh yet,%{public}.1lf,threshold,%{public}.1lf", buf, 0x20u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021B3298);
      *(_DWORD *)v9 = 134349568;
      *(_QWORD *)&v9[4] = v3;
      *(_WORD *)&v9[12] = 2050;
      *(double *)&v9[14] = v2;
      *(_WORD *)&v9[22] = 2050;
      v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,LOIs already exist,%{public}ld,and it's not time to refresh yet,%{public}.1lf,threshold,%{public}.1lf", v9, 32, *(_OWORD *)v9, *(_QWORD *)&v9[16], 0x40F5180000000000);
LABEL_23:
      v8 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLRoutineManagerInfo::shouldQueryLOI() const", "%s\n", v6);
      if (v8 != buf)
        free(v8);
      return 0;
    }
    return result;
  }
  if (v2 > 3600.0)
    return 1;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_1021B3298);
  v7 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349568;
    v11 = v3;
    v12 = 2050;
    v13 = v2;
    v14 = 2050;
    v15 = 0x40AC200000000000;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLGMTPS,home work school LOIs does not exist,%{public}ld,but we recently requested,%{public}.1lf,need to wait,%{public}.1lf", buf, 0x20u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_1021B3298);
    *(_DWORD *)v9 = 134349568;
    *(_QWORD *)&v9[4] = v3;
    *(_WORD *)&v9[12] = 2050;
    *(double *)&v9[14] = v2;
    *(_WORD *)&v9[22] = 2050;
    v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLGMTPS,home work school LOIs does not exist,%{public}ld,but we recently requested,%{public}.1lf,need to wait,%{public}.1lf", v9, 32, *(_OWORD *)v9, *(_QWORD *)&v9[16], 0x40AC200000000000);
    goto LABEL_23;
  }
  return result;
}

uint64_t sub_10017BF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v6;
  int v7;

  v1 = a1 + 8;
  v7 = 0;
  v2 = sub_10017BFFC(a1 + 8, &v7);
  v6 = 1;
  v3 = sub_10017BFFC(v1, &v6) + v2;
  v5 = 2;
  return v3 + sub_10017BFFC(v1, &v5);
}

uint64_t sub_10017BFFC(uint64_t a1, int *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  v4 = *(uint64_t **)(a1 + 8);
  v2 = (_QWORD *)(a1 + 8);
  v3 = v4;
  if (!v4)
    return 0;
  v5 = *a2;
  while (1)
  {
    v6 = *((_DWORD *)v3 + 8);
    if (v5 >= v6)
      break;
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return 0;
  }
  if (v6 < v5)
  {
    ++v3;
    goto LABEL_7;
  }
  v9 = *v3;
  v10 = v3;
  if (*v3)
  {
    v10 = v3;
    do
    {
      v11 = *(_DWORD *)(v9 + 32);
      v12 = v11 < v5;
      if (v11 >= v5)
        v13 = (uint64_t *)v9;
      else
        v13 = (uint64_t *)(v9 + 8);
      if (!v12)
        v10 = (_QWORD *)v9;
      v9 = *v13;
    }
    while (*v13);
  }
  v14 = v3[1];
  if (v14)
  {
    do
    {
      v15 = *(_DWORD *)(v14 + 32);
      v16 = v5 < v15;
      if (v5 >= v15)
        v17 = (uint64_t *)(v14 + 8);
      else
        v17 = (uint64_t *)v14;
      if (v16)
        v2 = (_QWORD *)v14;
      v14 = *v17;
    }
    while (*v17);
  }
  if (v10 == v2)
    return 0;
  v7 = 0;
  do
  {
    v18 = (_QWORD *)v10[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v10[2];
        v20 = *v19 == (_QWORD)v10;
        v10 = v19;
      }
      while (!v20);
    }
    ++v7;
    v10 = v19;
  }
  while (v19 != v2);
  return v7;
}

void sub_10017D538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_100261F44((uint64_t)&a13);
  sub_100261F44((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_10017EBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *a69;
  char a72;
  void *a73;
  char a74;
  char a75;
  uint64_t v75;

  if (a42 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  sub_100261F44(v75);
  if (a60 < 0)
    operator delete(a55);
  if (a67 < 0)
    operator delete(a62);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  sub_100261F44((uint64_t)&a75);
  _Unwind_Resume(a1);
}

void sub_10017EDC0(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 32 * (v4 - v5) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_1010865D0(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = v7 + a1[4];
  }
  v9 = *a2;
  *(_OWORD *)(*(_QWORD *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((_QWORD *)&v9 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

void sub_10017F550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_100261F44((uint64_t)&a9);
  sub_1006F0FB8(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10017F858(int64x2_t *a1)
{
  sub_100261F44(*(_QWORD *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 5) & 0x7FFFFFFFFFFFFF8))+ 16 * a1[2].i64[0]);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101B9DFC0);
  return sub_1004A57E8((uint64_t)a1, 1);
}

void sub_10017F954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;
  int v5;
  _OWORD *v6;
  double v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char *v51;
  double *j;
  double v53;
  double v54;
  _QWORD *v55;
  double v56;
  int v58;
  int v59;
  _OWORD *v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  __int128 v68;
  char *v69;
  double *v70;
  double *v71;
  _OWORD *size;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  std::string::size_type v77;
  _OWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char *v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  std::string::size_type v93;
  int v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  NSObject *v99;
  _BYTE *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  int v132;
  NSObject *v133;
  uint64_t v134;
  const char *v135;
  NSObject *v136;
  NSObject *v137;
  NSObject *v139;
  int v140;
  double v141;
  double v142;
  double v143;
  __int128 v144;
  double v145;
  unsigned int v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  unsigned int v150;
  const char *v151;
  double v152;
  double v153;
  _BOOL4 v154;
  double v155;
  double v156;
  int v157;
  _BOOL4 v158;
  const char *v159;
  NSObject *v160;
  int v161;
  NSObject *v162;
  unsigned int v163;
  int v164;
  unsigned int v165;
  int v166;
  NSObject *v167;
  unsigned int v168;
  int v169;
  unsigned int v170;
  int v171;
  int v172;
  NSObject *v173;
  _BOOL4 v174;
  int v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  int v181;
  char v182;
  __int16 v183;
  std::string *v184;
  int v185;
  uint64_t v186;
  NSObject *v187;
  _BYTE *v188;
  uint64_t v189;
  _DWORD *v190;
  NSObject *v191;
  std::__shared_weak_count *v192;
  unint64_t *p_shared_owners;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  _BYTE *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  _BYTE *v210;
  char *v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  const char *v229;
  int v230;
  int v231;
  int v232;
  uint64_t v234;
  _QWORD v236[5];
  _QWORD v237[8];
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  int v250;
  int v251;
  double v252;
  double v253;
  double v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  double v258;
  uint64_t v259;
  int v260;
  unsigned int v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  int v270;
  unsigned int v271;
  int v272;
  int v273;
  int v274;
  unsigned int v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  uint64_t v282;
  int v283;
  _QWORD v284[5];
  _QWORD v285[5];
  _QWORD v286[4];
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  int v301;
  std::string v302;
  std::__shared_weak_count *v303;
  _QWORD *v304[121];
  std::__shared_weak_count *v305;
  __int128 v306[2];
  __int128 v307;
  __int128 v308;
  _BYTE v309[32];
  __int128 v310;
  __int128 v311;
  _BYTE v312[48];
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  unsigned int v317;
  _OWORD v318[3];
  int v319;
  uint64_t v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  __int16 v324;
  uint64_t v325;
  char v326;
  __int128 v327;
  _BYTE v328[22];
  uint64_t v329;
  void *v330[2];
  _OWORD v331[2];
  uint64_t v332;
  char *v333;
  unint64_t v334;
  char **v335;
  char *v336[2];
  void *v337;
  char *v338;
  char *v339;
  void *__p;
  _OWORD *v341;
  char *v342;
  _BYTE v343[14];
  const char *v344;
  __int16 v345;
  double v346;
  __int16 v347;
  int v348;
  __int16 v349;
  double v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  _BYTE buf[60];
  _BYTE __src[513];
  __int128 v356[7];
  char v357;

  v341 = 0;
  __p = 0;
  v342 = 0;
  v338 = 0;
  v337 = 0;
  v339 = 0;
  for (i = *(uint64_t **)(a1 + 1200); i; i = (uint64_t *)*i)
  {
    v5 = sub_100182520(a1 + 3248);
    if (v5)
    {
      *(_QWORD *)__src = sub_100129380(a1 + 3248);
      LOBYTE(v5) = sub_10009483C(i + 2, __src);
    }
    v6 = i + 3;
    v7 = vabdd_f64(*(double *)(a1 + 6456), *((double *)i + 13));
    if ((v5 & 1) != 0 || v7 <= 5.0)
    {
      v8 = v341;
      if (v341 >= (_OWORD *)v342)
      {
        v14 = __p;
        v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v341 - (_BYTE *)__p) >> 5);
        v16 = v15 + 1;
        if (v15 + 1 > 0x2AAAAAAAAAAAAAALL)
          goto LABEL_373;
        if (0x5555555555555556 * ((v342 - (_BYTE *)__p) >> 5) > v16)
          v16 = 0x5555555555555556 * ((v342 - (_BYTE *)__p) >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((v342 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
          v17 = 0x2AAAAAAAAAAAAAALL;
        else
          v17 = v16;
        if (v17)
        {
          v18 = (char *)sub_10067257C((uint64_t)&v342, v17);
          v8 = v341;
          v14 = __p;
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[96 * v15];
        v20 = *(_OWORD *)(i + 5);
        *(_OWORD *)v19 = *v6;
        *((_OWORD *)v19 + 1) = v20;
        v21 = *(_OWORD *)(i + 7);
        v22 = *(_OWORD *)(i + 9);
        v23 = *(_OWORD *)(i + 13);
        *((_OWORD *)v19 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v19 + 5) = v23;
        *((_OWORD *)v19 + 2) = v21;
        *((_OWORD *)v19 + 3) = v22;
        if (v8 == v14)
        {
          v29 = &v18[96 * v15];
        }
        else
        {
          v24 = &v18[96 * v15];
          do
          {
            v25 = *(v8 - 5);
            *((_OWORD *)v24 - 6) = *(v8 - 6);
            *((_OWORD *)v24 - 5) = v25;
            v26 = *(v8 - 4);
            v27 = *(v8 - 3);
            v28 = *(v8 - 1);
            v29 = v24 - 96;
            *((_OWORD *)v24 - 2) = *(v8 - 2);
            *((_OWORD *)v24 - 1) = v28;
            *((_OWORD *)v24 - 4) = v26;
            *((_OWORD *)v24 - 3) = v27;
            v8 -= 6;
            v24 -= 96;
          }
          while (v8 != v14);
        }
        v13 = v19 + 96;
        __p = v29;
        v341 = v19 + 96;
        v342 = &v18[96 * v17];
        if (v14)
          operator delete(v14);
      }
      else
      {
        v9 = *(_OWORD *)(i + 5);
        *v341 = *v6;
        v8[1] = v9;
        v10 = *(_OWORD *)(i + 7);
        v11 = *(_OWORD *)(i + 9);
        v12 = *(_OWORD *)(i + 13);
        v8[4] = *(_OWORD *)(i + 11);
        v8[5] = v12;
        v8[2] = v10;
        v8[3] = v11;
        v13 = v8 + 6;
      }
      v341 = v13;
    }
    if (v7 <= 30.0)
    {
      v30 = v338;
      if (v338 >= v339)
      {
        v36 = (char *)v337;
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v338 - (_BYTE *)v337) >> 5);
        v38 = v37 + 1;
        if (v37 + 1 > 0x2AAAAAAAAAAAAAALL)
LABEL_373:
          sub_100259694();
        if (0x5555555555555556 * ((v339 - (_BYTE *)v337) >> 5) > v38)
          v38 = 0x5555555555555556 * ((v339 - (_BYTE *)v337) >> 5);
        if (0xAAAAAAAAAAAAAAABLL * ((v339 - (_BYTE *)v337) >> 5) >= 0x155555555555555)
          v39 = 0x2AAAAAAAAAAAAAALL;
        else
          v39 = v38;
        if (v39)
        {
          v40 = (char *)sub_10067257C((uint64_t)&v339, v39);
          v30 = v338;
          v36 = (char *)v337;
        }
        else
        {
          v40 = 0;
        }
        v41 = &v40[32 * ((v338 - (_BYTE *)v337) >> 5)];
        v42 = *(_OWORD *)(i + 5);
        *(_OWORD *)v41 = *v6;
        *((_OWORD *)v41 + 1) = v42;
        v43 = *(_OWORD *)(i + 7);
        v44 = *(_OWORD *)(i + 9);
        v45 = *(_OWORD *)(i + 13);
        *((_OWORD *)v41 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v41 + 5) = v45;
        *((_OWORD *)v41 + 2) = v43;
        *((_OWORD *)v41 + 3) = v44;
        if (v30 == v36)
        {
          v51 = &v40[96 * v37];
        }
        else
        {
          v46 = &v40[96 * v37];
          do
          {
            v47 = *((_OWORD *)v30 - 5);
            *((_OWORD *)v46 - 6) = *((_OWORD *)v30 - 6);
            *((_OWORD *)v46 - 5) = v47;
            v48 = *((_OWORD *)v30 - 4);
            v49 = *((_OWORD *)v30 - 3);
            v50 = *((_OWORD *)v30 - 1);
            v51 = v46 - 96;
            *((_OWORD *)v46 - 2) = *((_OWORD *)v30 - 2);
            *((_OWORD *)v46 - 1) = v50;
            *((_OWORD *)v46 - 4) = v48;
            *((_OWORD *)v46 - 3) = v49;
            v30 -= 96;
            v46 -= 96;
          }
          while (v30 != v36);
        }
        v35 = v41 + 96;
        v337 = v51;
        v338 = v41 + 96;
        v339 = &v40[96 * v39];
        if (v36)
          operator delete(v36);
      }
      else
      {
        v31 = *(_OWORD *)(i + 5);
        *(_OWORD *)v338 = *v6;
        *((_OWORD *)v30 + 1) = v31;
        v32 = *(_OWORD *)(i + 7);
        v33 = *(_OWORD *)(i + 9);
        v34 = *(_OWORD *)(i + 13);
        *((_OWORD *)v30 + 4) = *(_OWORD *)(i + 11);
        *((_OWORD *)v30 + 5) = v34;
        *((_OWORD *)v30 + 2) = v32;
        *((_OWORD *)v30 + 3) = v33;
        v35 = v30 + 96;
      }
      v338 = v35;
    }
  }
  v336[1] = 0;
  v336[0] = 0;
  v335 = v336;
  v333 = 0;
  v332 = 0;
  v334 = 0;
  for (j = *(double **)(a1 + 1160); j; j = *(double **)j)
  {
    v53 = j[10];
    v54 = *(double *)(a1 + 6456);
    v55 = sub_1000254D8((_QWORD *)(a1 + 1264), (_QWORD *)j + 2);
    v56 = vabdd_f64(v54, v53);
    if (v56 <= 30.0 && v55 == 0)
    {
      sub_1000C2254((_QWORD *)j + 2, &v302);
      v58 = *((_DWORD *)j + 14);
      *(std::string *)__src = v302;
      memset(&v302, 0, sizeof(v302));
      *(_DWORD *)&__src[24] = v58;
      sub_100675078((uint64_t **)&v335, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
    }
    v59 = sub_100182520(a1 + 3248);
    if (v59)
    {
      *(_QWORD *)__src = sub_100129380(a1 + 3248);
      v59 = sub_10009483C((_QWORD *)j + 2, __src);
    }
    if (v56 <= 5.0 || v59 != 0)
    {
      sub_1000C2254((_QWORD *)j + 2, &v302);
      v61 = v333;
      if ((unint64_t)v333 >= v334)
      {
        v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v333[-v332] >> 3);
        v64 = v63 + 1;
        if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((uint64_t)(v334 - v332) >> 3) > v64)
          v64 = 0x5555555555555556 * ((uint64_t)(v334 - v332) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v334 - v332) >> 3) >= 0x555555555555555)
          v65 = 0xAAAAAAAAAAAAAAALL;
        else
          v65 = v64;
        *(_QWORD *)&__src[32] = &v334;
        if (v65)
          v66 = (char *)sub_1002596A8((uint64_t)&v334, v65);
        else
          v66 = 0;
        v67 = &v66[24 * v63];
        *(_QWORD *)__src = v66;
        *(_QWORD *)&__src[8] = v67;
        *(_QWORD *)&__src[24] = &v66[24 * v65];
        v68 = *(_OWORD *)&v302.__r_.__value_.__l.__data_;
        *((_QWORD *)v67 + 2) = *((_QWORD *)&v302.__r_.__value_.__l + 2);
        *(_OWORD *)v67 = v68;
        memset(&v302, 0, sizeof(v302));
        *(_QWORD *)&__src[16] = v67 + 24;
        sub_100074D44(&v332, __src);
        v69 = v333;
        sub_100074DB8((uint64_t)__src);
        v333 = v69;
        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v302.__r_.__value_.__l.__data_);
      }
      else
      {
        v62 = *(_OWORD *)&v302.__r_.__value_.__l.__data_;
        *((_QWORD *)v333 + 2) = *((_QWORD *)&v302.__r_.__value_.__l + 2);
        *v61 = v62;
        v333 = (char *)v61 + 24;
      }
    }
  }
  memset(&v302, 0, sizeof(v302));
  v70 = (double *)__p;
  v71 = (double *)v341;
  if (__p == v341)
  {
    v94 = 0;
  }
  else
  {
    do
    {
      if (sub_10018FDEC(v70) && v70[4] > 0.0)
      {
        size = (_OWORD *)v302.__r_.__value_.__l.__size_;
        if (v302.__r_.__value_.__l.__size_ >= v302.__r_.__value_.__r.__words[2])
        {
          v78 = (_OWORD *)v302.__r_.__value_.__r.__words[0];
          v79 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v302.__r_.__value_.__l.__size_ - v302.__r_.__value_.__r.__words[0]) >> 5);
          v80 = v79 + 1;
          if (v79 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556
             * ((uint64_t)(v302.__r_.__value_.__r.__words[2] - v302.__r_.__value_.__r.__words[0]) >> 5) > v80)
            v80 = 0x5555555555555556
                * ((uint64_t)(v302.__r_.__value_.__r.__words[2] - v302.__r_.__value_.__r.__words[0]) >> 5);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v302.__r_.__value_.__r.__words[2] - v302.__r_.__value_.__r.__words[0]) >> 5) >= 0x155555555555555)
            v81 = 0x2AAAAAAAAAAAAAALL;
          else
            v81 = v80;
          if (v81)
          {
            v82 = (char *)sub_10067257C((uint64_t)&v302.__r_.__value_.__r.__words[2], v81);
            size = (_OWORD *)v302.__r_.__value_.__l.__size_;
            v78 = (_OWORD *)v302.__r_.__value_.__r.__words[0];
          }
          else
          {
            v82 = 0;
          }
          v83 = &v82[96 * v79];
          v84 = *((_OWORD *)v70 + 1);
          *(_OWORD *)v83 = *(_OWORD *)v70;
          *((_OWORD *)v83 + 1) = v84;
          v85 = *((_OWORD *)v70 + 2);
          v86 = *((_OWORD *)v70 + 3);
          v87 = *((_OWORD *)v70 + 5);
          *((_OWORD *)v83 + 4) = *((_OWORD *)v70 + 4);
          *((_OWORD *)v83 + 5) = v87;
          *((_OWORD *)v83 + 2) = v85;
          *((_OWORD *)v83 + 3) = v86;
          if (size == v78)
          {
            v93 = (std::string::size_type)&v82[96 * v79];
          }
          else
          {
            v88 = &v82[96 * v79];
            do
            {
              v89 = *(size - 5);
              *((_OWORD *)v88 - 6) = *(size - 6);
              *((_OWORD *)v88 - 5) = v89;
              v90 = *(size - 4);
              v91 = *(size - 3);
              v92 = *(size - 1);
              v93 = (std::string::size_type)(v88 - 96);
              *((_OWORD *)v88 - 2) = *(size - 2);
              *((_OWORD *)v88 - 1) = v92;
              *((_OWORD *)v88 - 4) = v90;
              *((_OWORD *)v88 - 3) = v91;
              size -= 6;
              v88 -= 96;
            }
            while (size != v78);
          }
          v77 = (std::string::size_type)(v83 + 96);
          v302.__r_.__value_.__r.__words[0] = v93;
          v302.__r_.__value_.__l.__size_ = (std::string::size_type)(v83 + 96);
          v302.__r_.__value_.__r.__words[2] = (std::string::size_type)&v82[96 * v81];
          if (v78)
            operator delete(v78);
        }
        else
        {
          v73 = *((_OWORD *)v70 + 1);
          *(_OWORD *)v302.__r_.__value_.__l.__size_ = *(_OWORD *)v70;
          size[1] = v73;
          v74 = *((_OWORD *)v70 + 2);
          v75 = *((_OWORD *)v70 + 3);
          v76 = *((_OWORD *)v70 + 5);
          size[4] = *((_OWORD *)v70 + 4);
          size[5] = v76;
          size[2] = v74;
          size[3] = v75;
          v77 = (std::string::size_type)(size + 6);
        }
        v302.__r_.__value_.__l.__size_ = v77;
      }
      v70 += 12;
    }
    while (v70 != v71);
    v94 = -1431655765 * ((v302.__r_.__value_.__l.__size_ - v302.__r_.__value_.__r.__words[0]) >> 5);
  }
  v95 = v333;
  v96 = v332;
  HIDWORD(v97) = -1030792151 * rand() + 85899344;
  LODWORD(v97) = HIDWORD(v97);
  if ((v97 >> 2) <= 0x28F5C28)
  {
    *(_QWORD *)__src = _NSConcreteStackBlock;
    *(_QWORD *)&__src[8] = 3221225472;
    *(_QWORD *)&__src[16] = sub_1009390C4;
    *(_QWORD *)&__src[24] = &unk_10215F390;
    *(_DWORD *)&__src[32] = -1431655765 * ((unint64_t)&v95[-v96] >> 3);
    *(_DWORD *)&__src[36] = v94;
    *(_DWORD *)&__src[40] = (int)((double)v94 * 100.0 / (double)*(int *)&__src[32]);
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.WifiLatLonCentroidVsScan"), __src);
  }
  if (v302.__r_.__value_.__r.__words[0])
  {
    v302.__r_.__value_.__l.__size_ = v302.__r_.__value_.__r.__words[0];
    operator delete(v302.__r_.__value_.__l.__data_);
  }
  v320 = 0;
  v321 = 0;
  v325 = 0;
  v326 = 0;
  memset(v318, 0, sizeof(v318));
  v319 = 0;
  v323 = 0;
  v322 = 0;
  v324 = 0;
  v327 = 0u;
  memset(v328, 0, sizeof(v328));
  v329 = 0xFFFFFFFFLL;
  *(_OWORD *)v330 = 0u;
  memset(v331, 0, sizeof(v331));
  v315 = 0;
  v314 = 0;
  v317 = 0;
  v316 = 0;
  sub_100184CCC((uint64_t)&v335, (uint64_t *)&__p, (uint64_t *)&v337, a1 + 3352, a1 + 5016, a3 + 3016, (_QWORD *)(a1 + 3192), &v314, v306, *(double *)(a1 + 6456), (uint64_t)v318, *(_DWORD *)(a1 + 6444));
  *(_QWORD *)&v309[12] = *(_QWORD *)(a1 + 6456);
  LODWORD(v310) = 4;
  sub_100216E98(a1, (uint64_t)v306);
  sub_10022BC8C(&v302, &__p);
  sub_10022C1D8((uint64_t)&v302);
  sub_10022BCE4((__int16 *)&v302, (uint64_t)v306);
  sub_10022BC90((uint64_t)&v302, (__int128 *)(a1 + 3352), (char *)(a1 + 3512));
  sub_10022C1E0((uint64_t)&v302, v306);
  sub_10022BE00((uint64_t)&v302, (uint64_t)v306);
  sub_100216E98(a1, (uint64_t)v306);
  v98 = *(_DWORD *)&v312[28];
  if (v98 >= *sub_10023E928() && sub_100182290((uint64_t)v306))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F430);
    v99 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_100B9444C((uint64_t)v306, __src);
      v100 = __src[23] >= 0 ? __src : *(_BYTE **)__src;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v100;
      _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, updating reference multi-AP wifi location to %{private}s", buf, 0xCu);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F430);
      v209 = qword_1022A0048;
      sub_100B9444C((uint64_t)v306, buf);
      if (buf[23] >= 0)
        v210 = buf;
      else
        v210 = *(_BYTE **)buf;
      LODWORD(v351) = 136380675;
      *(_QWORD *)((char *)&v351 + 4) = v210;
      LODWORD(v217) = 12;
      v211 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, v209, 2, "WifiCalc, integrity, updating reference multi-AP wifi location to %{private}s", &v351, v217);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v211);
      if (v211 != __src)
        free(v211);
    }
    v101 = *(_OWORD *)&v312[16];
    *(_OWORD *)(a3 + 5328) = *(_OWORD *)v312;
    *(_OWORD *)(a3 + 5344) = v101;
    *(_OWORD *)(a3 + 5360) = *(_OWORD *)&v312[32];
    v102 = *(_OWORD *)&v309[16];
    *(_OWORD *)(a3 + 5264) = *(_OWORD *)v309;
    *(_OWORD *)(a3 + 5280) = v102;
    v103 = v311;
    *(_OWORD *)(a3 + 5296) = v310;
    *(_OWORD *)(a3 + 5312) = v103;
    v104 = v306[1];
    *(_OWORD *)(a3 + 5200) = v306[0];
    *(_OWORD *)(a3 + 5216) = v104;
    v105 = v308;
    *(_OWORD *)(a3 + 5232) = v307;
    *(_QWORD *)(a3 + 5376) = v313;
    *(_OWORD *)(a3 + 5248) = v105;
    sub_100BF965C((uint64_t)v306, (uint64_t)__src);
    memcpy((void *)(a3 + 5384), __src, 0x201uLL);
    sub_1002B7674(a3 + 5904, v356);
    v106 = v356[3];
    *(_OWORD *)(a3 + 5968) = v356[4];
    v107 = v356[6];
    *(_OWORD *)(a3 + 5984) = v356[5];
    *(_OWORD *)(a3 + 6000) = v107;
    v108 = v356[2];
    *(_OWORD *)(a3 + 5920) = v356[1];
    *(_OWORD *)(a3 + 5936) = v108;
    *(_BYTE *)(a3 + 6016) = v357;
    *(_OWORD *)(a3 + 5952) = v106;
    v109 = (std::__shared_weak_count *)*((_QWORD *)&v356[0] + 1);
    if (*((_QWORD *)&v356[0] + 1))
    {
      v110 = (unint64_t *)(*((_QWORD *)&v356[0] + 1) + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
  }
  v112 = a1 + 3248;
  v113 = sub_100182520(a1 + 3248);
  if ((_DWORD)v113)
  {
    v114 = sub_1000A3224();
    if (sub_10132EA48((uint64_t)v114))
    {
      sub_100D2544C(__src);
      v115 = *(_QWORD *)__src;
      v116 = nullsub_34(a1 + 3248);
      sub_100D258F8(v115, (uint64_t)v306, v116);
      v117 = *(std::__shared_weak_count **)&__src[8];
      if (*(_QWORD *)&__src[8])
      {
        v118 = (unint64_t *)(*(_QWORD *)&__src[8] + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
        if (!v119)
        {
          ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
          std::__shared_weak_count::__release_weak(v117);
        }
      }
    }
    *(_QWORD *)v343 = sub_100129380(a1 + 3248);
    sub_10022142C(&v351);
    sub_1015A2E04(buf, "Wifi1");
    sub_100EF1704(__src, v343, a1 + 1304, &v351, a1 + 6544, buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v351 + 1);
    if (*((_QWORD *)&v351 + 1))
    {
      v121 = (unint64_t *)(*((_QWORD *)&v351 + 1) + 8);
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    sub_10003FAE0((uint64_t)__src, v306);
    sub_100183120((uint64_t)__src, a1 + 3352);
    sub_100183138((uint64_t)__src);
    sub_100183070((uint64_t)__src);
  }
  sub_10022142C(__src);
  v123 = sub_1000A0810(*(uint64_t *)__src);
  v124 = (void *)v123;
  v125 = *(std::__shared_weak_count **)&__src[8];
  if (!*(_QWORD *)&__src[8])
    goto LABEL_140;
  v126 = (unint64_t *)(*(_QWORD *)&__src[8] + 8);
  do
    v127 = __ldaxr(v126);
  while (__stlxr(v127 - 1, v126));
  if (!v127)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
    if (!v124)
      goto LABEL_144;
  }
  else
  {
LABEL_140:
    if (!v123)
      goto LABEL_144;
  }
  if (objc_msgSend(v124, "isValid"))
    objc_msgSend(v124, "submitMetricsIfPossible:", v113);
LABEL_144:
  if (v341 != __p)
  {
    v128 = (unint64_t)((char *)v341 - (_BYTE *)__p) >> 5;
    v129 = *(_QWORD *)(a1 + 1128);
    if (v129)
      v130 = (100 * *(_DWORD *)&v312[28]) / v129;
    else
      LODWORD(v130) = -1;
    v131 = -*(_DWORD *)&v312[28];
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v132 = v131 - 1431655765 * v128;
    v133 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v134 = *(_QWORD *)(a1 + 1128);
      *(_DWORD *)__src = 67241218;
      *(_DWORD *)&__src[4] = v134;
      *(_WORD *)&__src[8] = 2082;
      *(_QWORD *)&__src[10] = a2;
      *(_WORD *)&__src[18] = 1026;
      *(_DWORD *)&__src[20] = *(_DWORD *)&v312[28];
      *(_WORD *)&__src[24] = 1026;
      *(_DWORD *)&__src[26] = v132;
      *(_WORD *)&__src[30] = 1026;
      *(_DWORD *)&__src[32] = v130;
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEBUG, "WlpMetric, fixaps, %{public}d, trigger, %{public}s, used, %{public}d, out, %{public}d, pct, %{public}d", __src, 0x24u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      v202 = *(_QWORD *)(a1 + 1128);
      *(_DWORD *)buf = 67241218;
      *(_DWORD *)&buf[4] = v202;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = a2;
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = *(_DWORD *)&v312[28];
      *(_WORD *)&buf[24] = 1026;
      *(_DWORD *)&buf[26] = v132;
      *(_WORD *)&buf[30] = 1026;
      *(_DWORD *)&buf[32] = v130;
      LODWORD(v217) = 36;
      v203 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, fixaps, %{public}d, trigger, %{public}s, used, %{public}d, out, %{public}d, pct, %{public}d", buf, v217);
      sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v203);
      if (v203 != __src)
        free(v203);
    }
    if ((*(_BYTE *)(a1 + 6512) & 0xF) == 0)
    {
      v286[0] = _NSConcreteStackBlock;
      v286[1] = 3221225472;
      v286[2] = sub_100938964;
      v286[3] = &unk_10215F3D0;
      v295 = *(_OWORD *)v312;
      v296 = *(_OWORD *)&v312[16];
      v297 = *(_OWORD *)&v312[32];
      v291 = *(_OWORD *)v309;
      v292 = *(_OWORD *)&v309[16];
      v293 = v310;
      v294 = v311;
      v287 = v306[0];
      v288 = v306[1];
      v289 = v307;
      v290 = v308;
      v298 = v313;
      v299 = a2;
      v300 = v132;
      v301 = v130;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.fixaps"), v286);
    }
    if (*(_DWORD *)&v312[28])
    {
      if (*(_DWORD *)&v312[28] == 1)
        v135 = "1AP";
      else
        v135 = "MultiAP";
      if (sub_10011CE64(*(double *)((char *)v306 + 4), *(double *)((char *)v306 + 12)))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F430);
        v136 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 136380931;
          *(_QWORD *)&__src[4] = "wifi, null";
          *(_WORD *)&__src[12] = 2081;
          *(_QWORD *)&__src[14] = v135;
          _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __src, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F430);
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = "wifi, null";
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = v135;
          LODWORD(v217) = 22;
          v212 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", buf, v217);
          sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v212);
          if (v212 != __src)
            free(v212);
        }
        v285[0] = _NSConcreteStackBlock;
        v285[1] = 3221225472;
        v285[2] = sub_100938A44;
        v285[3] = &unk_102131FE8;
        v285[4] = v135;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), v285);
      }
      if (*(double *)((char *)v306 + 4) == -1.0 && *(double *)((char *)v306 + 12) == -1.0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F430);
        v137 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 136380931;
          *(_QWORD *)&__src[4] = "wifi, sentinel";
          *(_WORD *)&__src[12] = 2081;
          *(_QWORD *)&__src[14] = v135;
          _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", __src, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__src, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F430);
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = "wifi, sentinel";
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = v135;
          LODWORD(v217) = 22;
          v213 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxMetric, islands, %{private}s, %{private}s", buf, v217);
          sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v213);
          if (v213 != __src)
            free(v213);
        }
        v284[0] = _NSConcreteStackBlock;
        v284[1] = 3221225472;
        v284[2] = sub_100938AEC;
        v284[3] = &unk_102131FE8;
        v284[4] = v135;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.islands"), v284);
      }
    }
  }
  *(double *)&v309[24] = *(double *)(a1 + 6232) * 1.5;
  *(_DWORD *)v312 = sub_100183140((uint64_t)v306, a3 + 5200, a3 + 5384, a1 + 4152, a1 + 4312);
  if (*(double *)((char *)&v306[1] + 4) >= 0.0 && *(double *)((char *)&v306[1] + 4) < 20.0)
    *(_QWORD *)((char *)&v306[1] + 4) = 0x4034000000000000;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F410);
  v139 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__src = 67241730;
    *(_DWORD *)&__src[4] = *(_DWORD *)&v312[28];
    *(_WORD *)&__src[8] = 2050;
    *(_QWORD *)&__src[10] = *(_QWORD *)((char *)&v306[1] + 4);
    *(_WORD *)&__src[18] = 1026;
    *(_DWORD *)&__src[20] = *(_DWORD *)&v312[32];
    *(_WORD *)&__src[24] = 2050;
    *(_QWORD *)&__src[26] = *(_QWORD *)((char *)&v307 + 4);
    *(_WORD *)&__src[34] = 1026;
    *(_DWORD *)&__src[36] = *(_DWORD *)&v309[20];
    *(_WORD *)&__src[40] = 2082;
    *(_QWORD *)&__src[42] = a2;
    *(_WORD *)&__src[50] = 2050;
    *(_QWORD *)&__src[52] = *(_QWORD *)&v309[12];
    _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "@WifiFlow, compute, %{public}u, hacc, %{public}.1f, vaps, %{public}u, vacc, %{public}.1f, conf, %{public}d, reason, %{public}s, time, %{public}.1f", __src, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__src, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    *(_DWORD *)buf = 67241730;
    *(_DWORD *)&buf[4] = *(_DWORD *)&v312[28];
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = *(_QWORD *)((char *)&v306[1] + 4);
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = *(_DWORD *)&v312[32];
    *(_WORD *)&buf[24] = 2050;
    *(_QWORD *)&buf[26] = *(_QWORD *)((char *)&v307 + 4);
    *(_WORD *)&buf[34] = 1026;
    *(_DWORD *)&buf[36] = *(_DWORD *)&v309[20];
    *(_WORD *)&buf[40] = 2082;
    *(_QWORD *)&buf[42] = a2;
    *(_WORD *)&buf[50] = 2050;
    *(_QWORD *)&buf[52] = *(_QWORD *)&v309[12];
    LODWORD(v217) = 60;
    v201 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, compute, %{public}u, hacc, %{public}.1f, vaps, %{public}u, vacc, %{public}.1f, conf, %{public}d, reason, %{public}s, time, %{public}.1f", buf, v217);
    sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v201);
    if (v201 != __src)
      free(v201);
  }
  if (sub_100182290((uint64_t)v306))
  {
    v140 = *(_DWORD *)(a1 + 3352);
    v141 = *(double *)(a1 + 3356);
    v142 = *(double *)(a1 + 3364);
    v143 = *(double *)(a1 + 3372);
    v144 = *(_OWORD *)(a1 + 3396);
    v351 = *(_OWORD *)(a1 + 3380);
    v352 = v144;
    v353 = *(_OWORD *)(a1 + 3412);
    v145 = *(double *)(a1 + 3428);
    v282 = *(_QWORD *)(a1 + 3436);
    v283 = *(_DWORD *)(a1 + 3444);
    v146 = *(_DWORD *)(a1 + 3448);
    v147 = *(_OWORD *)(a1 + 3452);
    v148 = *(_OWORD *)(a1 + 3468);
    v149 = *(_OWORD *)(a1 + 3484);
    *(_QWORD *)&buf[48] = *(_QWORD *)(a1 + 3500);
    *(_OWORD *)&buf[32] = v149;
    v150 = *(_DWORD *)(a1 + 6440) - 1;
    if (v150 >= 2)
      v151 = "moving";
    else
      v151 = "static";
    v152 = *(double *)&v309[12] - v145;
    *(_OWORD *)&buf[16] = v148;
    *(_OWORD *)buf = v147;
    v153 = *(double *)(a1 + 6024);
    if (v143 > 0.0 && v146 <= 0xB && ((1 << v146) & 0xC02) != 0)
    {
      if (v150 >= 2)
        v154 = v152 < 1.25;
      else
        v154 = *(double *)&v309[12] > v153;
      if (v154)
      {
        v155 = sub_100124100(*(double *)((char *)v306 + 4), *(double *)((char *)v306 + 12), v141, v142);
        if (*(double *)((char *)&v306[1] + 4) > 0.0)
          v156 = v155 / *(double *)((char *)&v306[1] + 4);
        else
          v156 = -1.0;
        if (v152 <= 1.25)
        {
          v157 = 1;
        }
        else if (v152 <= 3.0)
        {
          v157 = 3;
        }
        else if (v152 <= 10.0)
        {
          v157 = 10;
        }
        else if (v152 <= 30.0)
        {
          v157 = 30;
        }
        else if (v152 <= 60.0)
        {
          v157 = 600;
        }
        else if (v152 <= 1800.0)
        {
          v157 = 1800;
        }
        else if (v152 <= 3600.0)
        {
          v157 = 3600;
        }
        else if (v152 > 18000.0)
        {
          v157 = 3601;
        }
        else
        {
          v157 = 18000;
        }
        v227 = v140;
        v228 = v157;
        v234 = *(_QWORD *)&v312[28];
        v229 = v151;
        if (BYTE4(v313))
          v161 = 1;
        else
          v161 = -1431655765 * ((unint64_t)(v315 - v314) >> 3);
        if (v161 != *(_DWORD *)&v312[28])
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          v162 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__src = 67240448;
            *(_DWORD *)&__src[4] = v161;
            *(_WORD *)&__src[8] = 1026;
            *(_DWORD *)&__src[10] = v234;
            _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_ERROR, "Invalid apsUsedInCalculation, numberOfApsUsedInHorizontalCalculation. apsUsedInCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u", __src, 0xEu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__src, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10215F410);
            *(_DWORD *)v343 = 67240448;
            *(_DWORD *)&v343[4] = v161;
            *(_WORD *)&v343[8] = 1026;
            *(_DWORD *)&v343[10] = v234;
            LODWORD(v217) = 14;
            v215 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0058, 16, "Invalid apsUsedInCalculation, numberOfApsUsedInHorizontalCalculation. apsUsedInCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u", v343, v217);
            sub_100512490("Generic", 1, 0, 0, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v215);
            if (v215 != __src)
              free(v215);
          }
        }
        v163 = v317;
        v164 = v234 - v317;
        if (BYTE4(v313))
          v165 = 0;
        else
          v165 = v317;
        if (BYTE4(v313))
          v166 = 0;
        else
          v166 = v234 - v317;
        v231 = v165;
        v232 = v166;
        if (!BYTE4(v313) && v234 < v317)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          v167 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__src = 67240704;
            *(_DWORD *)&__src[4] = v163;
            *(_WORD *)&__src[8] = 1026;
            *(_DWORD *)&__src[10] = v164;
            *(_WORD *)&__src[14] = 1026;
            *(_DWORD *)&__src[16] = v234;
            _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_ERROR, "Invalid tile, ALS AP counts. numberOfTileApsUsedInHorizontalCalculation: %{public}u, numberOfAlsApsUsedInHorizontalCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u", __src, 0x14u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(__src, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10215F410);
            *(_DWORD *)v343 = 67240704;
            *(_DWORD *)&v343[4] = v163;
            *(_WORD *)&v343[8] = 1026;
            *(_DWORD *)&v343[10] = v164;
            LOWORD(v344) = 1026;
            *(_DWORD *)((char *)&v344 + 2) = v234;
            LODWORD(v217) = 20;
            v216 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0058, 16, "Invalid tile, ALS AP counts. numberOfTileApsUsedInHorizontalCalculation: %{public}u, numberOfAlsApsUsedInHorizontalCalculation: %{public}u, numberOfApsUsedInHorizontalCalculation: %{public}u", v343, v217);
            sub_100512490("Generic", 1, 0, 0, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v216);
            if (v216 != __src)
              free(v216);
          }
        }
        v226 = sub_100182310(v232, v234, 100);
        v225 = sub_100182310(v231, v234, 100);
        v168 = *(_DWORD *)(a3 + 1208);
        v169 = *(_DWORD *)(a3 + 1248);
        v230 = *(_DWORD *)(a3 + 1288);
        v170 = v230 + v169 + v168;
        v224 = sub_100182310(v168, v170, 100);
        v223 = v230 + v169;
        v171 = sub_100182310(v223, v223 + v168, 100);
        v222 = sub_100182310(v169, v170, 100);
        v221 = sub_100182310(v230, v170, 100);
        v220 = sub_100182310(v234, v170, 100);
        v219 = sub_100182310(v234, v168, 100);
        v172 = v169;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v173 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__src = 134350082;
          *(double *)&__src[4] = v155;
          *(_WORD *)&__src[12] = 2082;
          *(_QWORD *)&__src[14] = v229;
          *(_WORD *)&__src[22] = 2050;
          *(double *)&__src[24] = v152;
          *(_WORD *)&__src[32] = 1026;
          *(_DWORD *)&__src[34] = v228;
          *(_WORD *)&__src[38] = 2050;
          *(double *)&__src[40] = v156;
          _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEBUG, "WlpMetric, fixerror, %{public}.1f, agetype, %{public}s, dt, %{public}.1f, %{public}d, horizontalErrorRatio, %{public}.1f", __src, 0x30u);
        }
        v174 = sub_1001BFF7C(115, 2);
        v175 = v172;
        if (v174)
        {
          HIDWORD(v218) = v172;
          bzero(__src, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          *(_DWORD *)v343 = 134350082;
          *(double *)&v343[4] = v155;
          *(_WORD *)&v343[12] = 2082;
          v344 = v229;
          v345 = 2050;
          v346 = v152;
          v347 = 1026;
          v348 = v228;
          v349 = 2050;
          v350 = v156;
          LODWORD(v218) = 48;
          v214 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, fixerror, %{public}.1f, agetype, %{public}s, dt, %{public}.1f, %{public}d, horizontalErrorRatio, %{public}.1f", v343, v218);
          sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v214);
          if (v214 != __src)
            free(v214);
          v175 = HIDWORD(v217);
        }
        if ((*(_BYTE *)(a1 + 6512) & 0xF) == 0)
        {
          v237[0] = _NSConcreteStackBlock;
          v237[1] = 3221225472;
          v237[2] = sub_100938B94;
          v237[3] = &unk_10215F3F0;
          *(double *)&v237[4] = v155;
          v237[5] = v229;
          *(double *)&v237[6] = v156;
          v237[7] = v306;
          v250 = v228;
          v251 = v227;
          v252 = v141;
          v253 = v142;
          v255 = v351;
          v256 = v352;
          v257 = v353;
          v254 = v143;
          v258 = v145;
          v260 = v283;
          v259 = v282;
          v261 = v146;
          v265 = *(_QWORD *)&buf[48];
          v263 = *(_OWORD *)&buf[16];
          v264 = *(_OWORD *)&buf[32];
          v262 = *(_OWORD *)buf;
          v266 = v234;
          v240 = v307;
          v241 = v308;
          v239 = v306[1];
          v238 = v306[0];
          v244 = v310;
          v245 = v311;
          v242 = *(_OWORD *)v309;
          v243 = *(_OWORD *)&v309[16];
          v249 = v313;
          v247 = *(_OWORD *)&v312[16];
          v248 = *(_OWORD *)&v312[32];
          v246 = *(_OWORD *)v312;
          v267 = v232;
          v268 = v231;
          v269 = v226;
          v270 = v225;
          v271 = v168;
          v272 = v175;
          v273 = v230;
          v274 = v223;
          v275 = v170;
          v276 = v224;
          v277 = v171;
          v278 = v222;
          v279 = v221;
          v280 = v220;
          v281 = v219;
          AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.fixerror"), v237);
        }
        goto LABEL_259;
      }
      v159 = "timebad";
    }
    else
    {
      if (v150 >= 2)
        v158 = v152 < 1.25;
      else
        v158 = *(double *)&v309[12] > v153;
      if (v158)
        v159 = "placebad";
      else
        v159 = "bothbad";
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v160 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__src = 136446210;
      *(_QWORD *)&__src[4] = v159;
      _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEBUG, "WlpMetric, fixerror, %{public}s", __src, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      *(_DWORD *)v343 = 136446210;
      *(_QWORD *)&v343[4] = v159;
      LODWORD(v217) = 12;
      v208 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, fixerror, %{public}s", v343, v217);
      sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v208);
      if (v208 != __src)
        free(v208);
    }
    if ((*(_BYTE *)(a1 + 6512) & 0xF) == 0)
    {
      v236[0] = _NSConcreteStackBlock;
      v236[1] = 3221225472;
      v236[2] = sub_100938F1C;
      v236[3] = &unk_102131FE8;
      v236[4] = v159;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.fixerror"), v236);
    }
  }
LABEL_259:
  v176 = v311;
  *(_OWORD *)(a3 + 1504) = v310;
  *(_OWORD *)(a3 + 1520) = v176;
  *(_OWORD *)(a3 + 1536) = *(_OWORD *)v312;
  v177 = v308;
  *(_OWORD *)(a3 + 1440) = v307;
  *(_OWORD *)(a3 + 1456) = v177;
  v178 = *(_OWORD *)&v309[16];
  *(_OWORD *)(a3 + 1472) = *(_OWORD *)v309;
  *(_OWORD *)(a3 + 1488) = v178;
  v179 = v306[1];
  *(_OWORD *)(a3 + 1408) = v306[0];
  v180 = *(_QWORD *)&v312[40];
  v181 = HIDWORD(v329);
  v182 = BYTE4(v313);
  v183 = HIWORD(v313);
  *(_OWORD *)(a3 + 1424) = v179;
  *(_OWORD *)(a3 + 1548) = *(_OWORD *)&v312[12];
  *(_QWORD *)(a3 + 1564) = *(_QWORD *)&v312[28];
  *(_QWORD *)(a3 + 1576) = v180;
  *(_DWORD *)(a3 + 1584) = v181;
  *(_BYTE *)(a3 + 1588) = v182;
  *(_WORD *)(a3 + 1590) = v183;
  if ((sub_100182290(a3 + 1408) & 1) == 0)
  {
    if (*(_QWORD *)(a3 + 1168))
    {
      if (__p == v341)
      {
        sub_100938F9C((std::string *)(a3 + 1592), "invalidComputedLocation_NoValidHorizontalAPs");
      }
      else
      {
        v184 = (std::string *)(a3 + 1592);
        if (*(_DWORD *)&v312[28])
          sub_100938F9C(v184, "invalidComputedLocation_Other");
        else
          sub_100938F9C(v184, "invalidComputedLocation_NoAPsUsedInHorizontalCalculation");
      }
    }
    else
    {
      sub_100938F9C((std::string *)(a3 + 1592), "invalidComputedLocation_EmptyScan");
    }
  }
  *(_BYTE *)(a3 + 1624) = sub_10018252C(a1, a3 + 1408);
  v185 = sub_100182290((uint64_t)v306);
  v186 = *(_QWORD *)(a3 + 6496);
  if (v185)
    ++*(_DWORD *)(v186 + 228);
  else
    ++*(_DWORD *)(v186 + 232);
  if (sub_100182520(a1 + 3248))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F430);
    v187 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v351 = sub_100129380(v112);
      sub_1000C2254(&v351, (std::string *)__src);
      v188 = __src[23] >= 0 ? __src : *(_BYTE **)__src;
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v188;
      _os_log_impl((void *)&_mh_execute_header, v187, OS_LOG_TYPE_DEFAULT, "WifiCalc, associated AP set: YES, %{private}s", buf, 0xCu);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F430);
      v205 = qword_1022A0048;
      *(_QWORD *)v343 = sub_100129380(v112);
      sub_1000C2254(v343, (std::string *)buf);
      if (buf[23] >= 0)
        v206 = buf;
      else
        v206 = *(_BYTE **)buf;
      LODWORD(v351) = 136380675;
      *(_QWORD *)((char *)&v351 + 4) = v206;
      LODWORD(v217) = 12;
      v207 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, v205, 0, "WifiCalc, associated AP set: YES, %{private}s", &v351, v217);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v207);
      if (v207 != __src)
        free(v207);
    }
    v189 = a3;
    v190 = *(_DWORD **)(a3 + 6496);
    ++v190[54];
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F430);
    v191 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__src = 0;
      _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_DEFAULT, "WifiCalc, associated AP set: NO", __src, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__src, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F430);
      *(_WORD *)buf = 0;
      LODWORD(v217) = 2;
      v204 = (char *)_os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiCalc, associated AP set: NO", buf, v217);
      sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::HandleEvent::updateSingleShotLocation(const char *, Output &) const", "%s\n", v204);
      if (v204 != __src)
        free(v204);
    }
    v189 = a3;
    v190 = *(_DWORD **)(a3 + 6496);
    ++v190[55];
  }
  if (*(_BYTE *)(v189 + 1588))
    ++v190[56];
  if (sub_100182290((uint64_t)v306))
    ++*(_DWORD *)(*(_QWORD *)(v189 + 6496) + 280);
  if (sub_1001849F8((uint64_t)&v302))
    ++*(_DWORD *)(*(_QWORD *)(a3 + 6496) + 284);
  if (sub_100184A10((uint64_t)&v302))
    ++*(_DWORD *)(*(_QWORD *)(a3 + 6496) + 288);
  v192 = v305;
  if (v305)
  {
    p_shared_owners = (unint64_t *)&v305->__shared_owners_;
    do
      v194 = __ldaxr(p_shared_owners);
    while (__stlxr(v194 - 1, p_shared_owners));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
  sub_100008848((uint64_t)v304, v304[1]);
  v195 = v303;
  if (v303)
  {
    v196 = (unint64_t *)&v303->__shared_owners_;
    do
      v197 = __ldaxr(v196);
    while (__stlxr(v197 - 1, v196));
    if (!v197)
    {
      ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
      std::__shared_weak_count::__release_weak(v195);
    }
  }
  v198 = (std::__shared_weak_count *)v302.__r_.__value_.__l.__size_;
  if (v302.__r_.__value_.__l.__size_)
  {
    v199 = (unint64_t *)(v302.__r_.__value_.__l.__size_ + 8);
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
      std::__shared_weak_count::__release_weak(v198);
    }
  }
  *(_QWORD *)__src = &v314;
  sub_100259608((void ***)__src);
  *(_QWORD *)__src = (char *)v331 + 8;
  sub_100259608((void ***)__src);
  if (v330[0])
  {
    v330[1] = v330[0];
    operator delete(v330[0]);
  }
  *(_QWORD *)__src = &v332;
  sub_100259608((void ***)__src);
  sub_100090AE4((uint64_t)&v335, v336[0]);
  if (v337)
  {
    v338 = (char *)v337;
    operator delete(v337);
  }
  if (__p)
  {
    v341 = __p;
    operator delete(__p);
  }
}

void sub_1001820A8(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;

  sub_100938FE0((uint64_t)&STACK[0x3C0]);
  STACK[0xAC0] = (unint64_t)&STACK[0x8D0];
  sub_100259608((void ***)&STACK[0xAC0]);
  sub_100938798((uint64_t)&STACK[0x8F0]);
  STACK[0x3C0] = (unint64_t)&STACK[0x9C0];
  sub_100259608((void ***)&STACK[0x3C0]);
  sub_100090AE4((uint64_t)&STACK[0x9D8], (char *)STACK[0x9E0]);
  v2 = (void *)STACK[0x9F0];
  if (STACK[0x9F0])
  {
    STACK[0x9F8] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0xA08];
  if (STACK[0xA08])
  {
    STACK[0xA10] = (unint64_t)v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100182290(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  _BOOL4 v5;

  result = 0;
  if (*(double *)(a1 + 20) > 0.0)
  {
    v3 = *(double *)(a1 + 4);
    if (v3 <= 90.0 && v3 >= -90.0)
    {
      v4 = *(double *)(a1 + 12);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        v5 = fabs(v3) >= 0.0000001;
        return fabs(v4) >= 0.0000001 || v5;
      }
    }
  }
  return result;
}

uint64_t sub_100182310(int a1, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  NSObject *v7;
  char *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  int v24;

  v3 = a3;
  v6 = a3;
  if (a2)
    v6 = 100 * a1 / a2;
  if (v6 >= 0x65)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240960;
      v18 = v6;
      v19 = 1026;
      v20 = a1;
      v21 = 1026;
      v22 = a2;
      v23 = 1026;
      v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Invalid percentage: %{public}u. count: %{public}u, total: %{public}u, defaultPercentage: %{public}u", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      v10[0] = 67240960;
      v10[1] = v6;
      v11 = 1026;
      v12 = a1;
      v13 = 1026;
      v14 = a2;
      v15 = 1026;
      v16 = v3;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "Invalid percentage: %{public}u. count: %{public}u, total: %{public}u, defaultPercentage: %{public}u", v10, 26);
      sub_100512490("Generic", 1, 0, 0, "uint32_t CL::Wifi1::Policies::PositionCalculation::percentage(uint32_t, uint32_t, uint32_t)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
  return v6;
}

uint64_t sub_100182520(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 88);
}

BOOL sub_10018252C(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  int v5;

  v4 = (_BYTE *)(a1 + 6244);
  v5 = sub_1000709AC((_DWORD *)(a1 + 6040)) || *v4 != 0;
  return sub_100184060(a2, v4[248], v5, *(float *)(a1 + 6488));
}

uint64_t sub_10018258C(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  _QWORD v7[5];
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  result = rand();
  if (!((int)result % dword_102301368))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)(a1 + 560);
      if (*(char *)(a1 + 583) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136380675;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "associatedApCentroidFetchOutcome, %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102139BD0);
      v5 = (_QWORD *)(a1 + 560);
      if (*(char *)(a1 + 583) < 0)
        v5 = (_QWORD *)*v5;
      v8 = 136380675;
      v9 = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "associatedApCentroidFetchOutcome, %{private}s", &v8, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiPositionCalculatorWithAssociatedApAnalytics::submitAssociatedApCentroidFetchOutcomeMetricsIfPossible()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10043EFAC;
    v7[3] = &unk_102131FE8;
    v7[4] = a1;
    return AnalyticsSendEventLazy(CFSTR("com.apple.clx.associatedApCentroidFetchOutcome"), v7);
  }
  return result;
}

uint64_t sub_1001827AC(uint64_t a1)
{
  sub_100182A1C(a1);
  sub_100182D18(a1);
  sub_10043E554(a1);
  sub_1001827F0(a1);
  sub_100182AF8(a1);
  return sub_10018258C(a1);
}

void sub_1001827F0(uint64_t a1)
{
  double v2;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 509)
    && sub_100182290(a1 + 352)
    && sub_100182290(a1 + 40)
    && sub_100182290(a1 + 196))
  {
    v2 = *(double *)(a1 + 272);
    if (*(double *)(a1 + 116) == v2)
    {
      if (vabdd_f64(*(double *)(a1 + 428), v2) <= 1.0)
      {
        sub_10043E140(a1);
        if (!(rand() % dword_102301368))
          sub_10043EA8C(a1);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102139BD0);
      v3 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "different timestamps between wifi locations before and after use of associated AP!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102139BD0);
        v5[0] = 0;
        v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "different timestamps between wifi locations before and after use of associated AP!", v5, 2);
        sub_100512490("Generic", 1, 0, 0, "void CLWifiPositionCalculatorWithAssociatedApAnalytics::submitWifiFixErrorAndHorizontalErrorRatioMetricsIfPossible()", "%s\n", v4);
        if (v4 != (char *)buf)
          free(v4);
      }
    }
  }
}

void sub_100182A1C(uint64_t a1)
{
  uint64_t *v2;
  _QWORD v3[6];
  void *v4[2];
  char v5;

  if (!(rand() % dword_102301368))
  {
    std::operator+<char>(v4, "isWifiFixOverriddenByAssociatedApAt", a1 + 512);
    if (byte_102301387 >= 0)
      v2 = &qword_102301370;
    else
      v2 = (uint64_t *)qword_102301370;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10043E820;
    v3[3] = &unk_102139B90;
    v3[4] = a1;
    v3[5] = v4;
    AnalyticsSendEventLazy(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2), v3);
    if (v5 < 0)
      operator delete(v4[0]);
  }
}

void sub_100182ADC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 17) < 0)
    operator delete(*(void **)(v1 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100182AF8(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  _QWORD v7[5];
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  result = rand();
  if (!((int)result % dword_102301368))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v4 = (_QWORD *)(a1 + 536);
      if (*(char *)(a1 + 559) < 0)
        v4 = (_QWORD *)*v4;
      *(_DWORD *)buf = 136380675;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "wifiFixWithAssociatedApOutcome, %{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102139BD0);
      v5 = (_QWORD *)(a1 + 536);
      if (*(char *)(a1 + 559) < 0)
        v5 = (_QWORD *)*v5;
      v8 = 136380675;
      v9 = v5;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "wifiFixWithAssociatedApOutcome, %{private}s", &v8, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiPositionCalculatorWithAssociatedApAnalytics::submitWifiFixWithAssociatedApOutcomeMetricsIfPossible()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10043EEF4;
    v7[3] = &unk_102131FE8;
    v7[4] = a1;
    return AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiFixWithAssociatedApOutcome"), v7);
  }
  return result;
}

uint64_t sub_100182D18(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD v3[5];

  if (*(_BYTE *)(result + 509))
  {
    v1 = result;
    result = rand();
    if (!((int)result % dword_102301368))
    {
      if (byte_102301387 >= 0)
        v2 = &qword_102301370;
      else
        v2 = (uint64_t *)qword_102301370;
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_10043E8F0;
      v3[3] = &unk_102131FE8;
      v3[4] = v1;
      return AnalyticsSendEventLazy(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2), v3);
    }
  }
  return result;
}

void sub_100182DB8(_OWORD *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  _QWORD v13[2];
  uint8_t buf[1640];

  if (*(_DWORD *)(a2 + 96) != 1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "location type is not GPS!", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    LOWORD(v13[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "location type is not GPS!", v13, 2, v13[0]);
LABEL_22:
    v12 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "void CLWifiPositionCalculatorWithAssociatedApAnalytics::receiveGpsLocation(const CLDaemonLocation &)", "%s\n", v10);
    if (v12 != buf)
      free(v12);
    return;
  }
  if (*(double *)(a2 + 76) > 0.0)
  {
    if (*(double *)(a2 + 20) <= 30.0)
    {
      v2 = *(_OWORD *)(a2 + 16);
      a1[22] = *(_OWORD *)a2;
      a1[23] = v2;
      v3 = *(_OWORD *)(a2 + 32);
      v4 = *(_OWORD *)(a2 + 48);
      v5 = *(_OWORD *)(a2 + 80);
      a1[26] = *(_OWORD *)(a2 + 64);
      a1[27] = v5;
      a1[24] = v3;
      a1[25] = v4;
      v6 = *(_OWORD *)(a2 + 96);
      v7 = *(_OWORD *)(a2 + 112);
      v8 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)((char *)a1 + 492) = *(_OWORD *)(a2 + 140);
      a1[29] = v7;
      a1[30] = v8;
      a1[28] = v6;
    }
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102139BD0);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "location timestamp is not set!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102139BD0);
    LOWORD(v13[0]) = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "location timestamp is not set!", v13, 2, v13[0]);
    goto LABEL_22;
  }
}

uint64_t sub_100183070(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (*(char *)(a1 + 1375) < 0)
    operator delete(*(void **)(a1 + 1352));
  if (*(char *)(a1 + 1335) < 0)
    operator delete(*(void **)(a1 + 1312));
  if (*(char *)(a1 + 1311) < 0)
    operator delete(*(void **)(a1 + 1288));
  if (*(char *)(a1 + 1287) < 0)
    operator delete(*(void **)(a1 + 1264));
  if (*(char *)(a1 + 1263) < 0)
    operator delete(*(void **)(a1 + 1240));
  v2 = *(void **)(a1 + 512);
  if (v2)
  {
    *(_QWORD *)(a1 + 520) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 511) < 0)
    operator delete(*(void **)(a1 + 488));
  v3 = *(_QWORD *)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100261F44(a1 + 464);
  return a1;
}

void sub_100183120(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 96) == 1)
    sub_100182DB8((_OWORD *)(a1 + 728), a2);
}

uint64_t sub_100183138(uint64_t a1)
{
  return sub_1001827AC(a1 + 728);
}

uint64_t sub_100183140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void **v22;
  int v23;
  void **v24;
  void **v25;
  void **v26;
  NSObject *v27;
  uint64_t v29;
  void **v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  void **v34;
  int v35;
  void **v36;
  void **v37;
  void **v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49[2];
  char v50;
  void *__p[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  _BYTE v57[12];
  __int16 v58;
  int v59;
  __int16 v60;
  void **v61;
  __int16 v62;
  void **v63;
  __int16 v64;
  void **v65;
  uint8_t buf[4];
  _BYTE *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  void **v71;
  __int16 v72;
  void **v73;
  __int16 v74;
  void **v75;

  v9 = a1;
  v10 = *(_DWORD *)(a1 + 84);
  if (v10 <= 0x40)
    v11 = 0;
  else
    v11 = 25;
  if (v10 <= 0x44)
    v12 = v11;
  else
    v12 = 50;
  if (v10 <= 0x4E)
    v13 = v12;
  else
    v13 = 75;
  v14 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10217E680);
  v15 = &qword_1022A0000;
  v16 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    sub_100CDD1D0(v13, v57);
    v17 = a2;
    v47 = a3;
    v45 = v13;
    if (SBYTE3(v61) >= 0)
      v18 = v57;
    else
      v18 = *(_BYTE **)v57;
    v19 = v9;
    v20 = *(_DWORD *)(v9 + 84);
    v43 = v19;
    sub_100B94300(v19, v55);
    v21 = a5;
    if (v56 >= 0)
      v22 = v55;
    else
      v22 = (void **)v55[0];
    sub_100B94300(v17, v53);
    v23 = v54;
    v24 = (void **)v53[0];
    sub_100B94300(a4, __p);
    v25 = v53;
    if (v23 < 0)
      v25 = v24;
    if (v52 >= 0)
      v26 = __p;
    else
      v26 = (void **)__p[0];
    *(_DWORD *)buf = 136447235;
    v67 = v18;
    v68 = 1026;
    v69 = v20;
    v70 = 2081;
    v71 = v22;
    v72 = 2081;
    v73 = v25;
    v74 = 2081;
    v75 = v26;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, %{public}s, confidence, %{public}d, location, %{private}s, reference multi-AP wifi, %{private}s, reference cell, %{private}s", buf, 0x30u);
    if (v52 < 0)
      operator delete(__p[0]);
    v14 = &qword_1022A0000;
    v15 = &qword_1022A0000;
    a5 = v21;
    a3 = v47;
    a2 = v17;
    v9 = v43;
    if (v54 < 0)
      operator delete(v53[0]);
    v13 = v45;
    if (v56 < 0)
      operator delete(v55[0]);
    if (SBYTE3(v61) < 0)
      operator delete(*(void **)v57);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v29 = qword_1022A0048;
    sub_100CDD1D0(v13, v55);
    v46 = a2;
    v48 = a3;
    if (v56 >= 0)
      v30 = v55;
    else
      v30 = (void **)v55[0];
    v31 = v9;
    v32 = *(_DWORD *)(v9 + 84);
    v33 = v31;
    sub_100B94300(v31, v53);
    v44 = a5;
    if (v54 >= 0)
      v34 = v53;
    else
      v34 = (void **)v53[0];
    sub_100B94300(v46, __p);
    v35 = v52;
    v36 = (void **)__p[0];
    sub_100B94300(a4, v49);
    v37 = __p;
    if (v35 < 0)
      v37 = v36;
    if (v50 >= 0)
      v38 = v49;
    else
      v38 = (void **)v49[0];
    *(_DWORD *)v57 = 136447235;
    *(_QWORD *)&v57[4] = v30;
    v58 = 1026;
    v59 = v32;
    v60 = 2081;
    v61 = v34;
    v62 = 2081;
    v63 = v37;
    v64 = 2081;
    v65 = v38;
    v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "WifiCalc, integrity, %{public}s, confidence, %{public}d, location, %{private}s, reference multi-AP wifi, %{private}s, reference cell, %{private}s", v57, 48);
    if (v50 < 0)
      operator delete(v49[0]);
    v14 = &qword_1022A0000;
    v15 = &qword_1022A0000;
    a5 = v44;
    a2 = v46;
    a3 = v48;
    v9 = v33;
    if (v52 < 0)
      operator delete(__p[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    sub_100512490("Generic", 1, 0, 2, "static CLLocationIntegrity CLWifiLocationIntegrityCalculator::calculateLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v39);
    if (v39 != (char *)buf)
      free(v39);
  }
  if (sub_100183744(v9, a2, a3, a4, a5))
  {
    if (v14[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v27 = v15[9];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, bumping wifi location integrity from Medium to High", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v14[8] != -1)
        dispatch_once(&qword_1022A0040, &stru_10217E680);
      v40 = v15[9];
      *(_WORD *)v57 = 0;
      LODWORD(v42) = 2;
      v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 2, "WifiCalc, integrity, bumping wifi location integrity from Medium to High", v57, v42);
      sub_100512490("Generic", 1, 0, 2, "static CLLocationIntegrity CLWifiLocationIntegrityCalculator::calculateLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v41);
      if (v41 != (char *)buf)
        free(v41);
    }
    return 75;
  }
  return v13;
}

void sub_1001836AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

BOOL sub_100183744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;
  int v6;
  int *v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  char *v17;
  NSObject *v18;
  uint8_t *v19;
  NSObject *v21;
  NSObject *v22;
  int v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  int v28;
  int *v29;
  double v30;
  uint64_t v31;
  _BYTE *v32;
  _BYTE v33[14];
  char v34;
  int v35;
  _BYTE *v36;
  uint8_t buf[8];
  __int16 v38;
  int v39;
  char v40;

  v5 = *(_DWORD *)(a1 + 84);
  if (v5 > 0x4E)
  {
    v6 = 75;
    goto LABEL_20;
  }
  if (v5 <= 0x44)
  {
    if (v5 <= 0x40)
      v6 = 0;
    else
      v6 = 25;
LABEL_20:
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_100CDD1D0(v6, buf);
      v19 = v40 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v33 = 136446210;
      *(_QWORD *)&v33[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, not bumping integrity %{public}s as it is not Medium", v33, 0xCu);
      if (v40 < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v31 = qword_1022A0048;
    sub_100CDD1D0(v6, v33);
    v32 = v34 >= 0 ? v33 : *(_BYTE **)v33;
    v35 = 136446210;
    v36 = v32;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "WifiCalc, integrity, not bumping integrity %{public}s as it is not Medium", &v35, 12);
    if (v34 < 0)
      operator delete(*(void **)v33);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    if (v17 == (char *)buf)
      return 0;
LABEL_74:
    free(v17);
    return 0;
  }
  if ((sub_100182290(a2) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v21 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, multi-AP wifi reference location unavailable", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    *(_WORD *)v33 = 0;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiCalc, integrity, multi-AP wifi reference location unavailable", v33, 2);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    goto LABEL_62;
  }
  if (*(_DWORD *)(a2 + 96) != 4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v22 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v23 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, incorrect wifi location type, %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v24 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)v33 = 67240192;
    *(_DWORD *)&v33[4] = v24;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiCalc, integrity, incorrect wifi location type, %{public}d", v33, 8);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    goto LABEL_62;
  }
  if ((sub_100182290(a4) & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v25 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, cell reference location unavailable", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    *(_WORD *)v33 = 0;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiCalc, integrity, cell reference location unavailable", v33, 2);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    goto LABEL_62;
  }
  if (*(_DWORD *)(a4 + 96) != 6)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v26 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "WifiCalc, integrity, incorrect cell location type, %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v28 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)v33 = 67240192;
    *(_DWORD *)&v33[4] = v28;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiCalc, integrity, incorrect cell location type, %{public}d", v33, 8);
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
    goto LABEL_62;
  }
  v12 = sub_10023E928();
  v13 = *v12;
  if (*(_DWORD *)(a2 + 156) < *v12)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_DWORD *)(a2 + 156);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v15;
      v38 = 1026;
      v39 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WifiCalc, integrity, multi-AP wifi fix unavailable, %{public}d APs, threshold, %{public}d, fail", buf, 0xEu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10217E680);
    v16 = *(_DWORD *)(a2 + 156);
    *(_DWORD *)v33 = 67240448;
    *(_DWORD *)&v33[4] = v16;
    *(_WORD *)&v33[8] = 1026;
    *(_DWORD *)&v33[10] = v13;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, integrity, multi-AP wifi fix unavailable, %{public}d APs, threshold, %{public}d, fail", v33, 14);
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiLocationIntegrityCalculator::shouldBumpLocationIntegrity(const CLDaemonLocation &, const CL::Wifi1::Types::ComputedLocation &, const CLDaemonLocationPrivate &, const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v17);
LABEL_62:
    if (v17 == (char *)buf)
      return 0;
    goto LABEL_74;
  }
  v29 = sub_10023E928();
  if (!sub_100CDC7E8(a1, a2, a3, *((double *)v29 + 2)))
    return 0;
  v30 = *((double *)sub_10023E928() + 1);
  return sub_100CDC7E8(a1, a4, a5, v30);
}

BOOL sub_100184060(uint64_t a1, int a2, int a3, float a4)
{
  double v4;
  NSObject *v5;
  _BOOL8 result;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  double v10;
  NSObject *v11;
  unsigned int v13;
  NSObject *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  uint8_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  uint8_t buf[4];
  _QWORD v31[204];

  v4 = *(double *)(a1 + 20);
  if (v4 < 0.0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is insufficient as it is invalid", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      LOWORD(v29) = 0;
      v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, wifi fix is insufficient as it is invalid", &v29, 2, v29);
LABEL_10:
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::ComputedLocation &, float, BOOL, BOOL)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
    return result;
  }
  if (a2)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is sufficient as it is on watch", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    LOWORD(v29) = 0;
    v22 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, wifi fix is sufficient as it is on watch", &v29, 2, (_QWORD)v29);
    goto LABEL_80;
  }
  v10 = a4;
  if (v4 <= a4)
  {
    v13 = *(_DWORD *)(a1 + 156);
    if (*(_BYTE *)(a1 + 180))
    {
      if (v13 != 1)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v15 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
        {
          v16 = *(_DWORD *)(a1 + 156);
          *(_DWORD *)buf = 67174657;
          LODWORD(v31[0]) = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "expect 1 AP for wifi fix with associated AP, got %{private}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          v26 = *(_DWORD *)(a1 + 156);
          LODWORD(v29) = 67174657;
          DWORD1(v29) = v26;
          v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "expect 1 AP for wifi fix with associated AP, got %{private}d", &v29, 8);
          sub_100512490("Generic", 1, 0, 0, "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::ComputedLocation &, float, BOOL, BOOL)", "%s\n", v27);
          if (v27 != (char *)buf)
            free(v27);
        }
      }
      if (a3)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v17 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient as it is in emergency mode", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          LOWORD(v29) = 0;
          LODWORD(v28) = 2;
          v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient as it is in emergency mode", &v29, v28, v29);
          goto LABEL_10;
        }
        return result;
      }
      if (!*((_BYTE *)sub_1000A3224() + 84))
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v24 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient so we do not skip scan by settings", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          LOWORD(v29) = 0;
          LODWORD(v28) = 2;
          v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, mark wifi fix with associated AP as insufficient so we do not skip scan by settings", &v29, v28, v29);
          goto LABEL_10;
        }
        return result;
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      v21 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, mark wifi fix with associated AP as sufficient so we can skip scan by settings", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        LOWORD(v29) = 0;
        LODWORD(v28) = 2;
        v22 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, mark wifi fix with associated AP as sufficient so we can skip scan by settings", &v29, v28, (_QWORD)v29);
LABEL_80:
        v25 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CL::Wifi1::Policies::PositionCalculation::HandleEvent::isLocationAccuracySufficient(const Types::ComputedLocation &, float, BOOL, BOOL)", "%s\n", v22);
        if (v25 != buf)
          free(v25);
      }
    }
    else
    {
      if (v13 <= 3)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        v18 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *(_DWORD *)(a1 + 156);
          *(_DWORD *)buf = 67174913;
          LODWORD(v31[0]) = v19;
          WORD2(v31[0]) = 1025;
          *(_DWORD *)((char *)v31 + 6) = 4;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is insufficient as it used %{private}d APs, less than threshold %{private}d", buf, 0xEu);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10215F410);
          v20 = *(_DWORD *)(a1 + 156);
          LODWORD(v29) = 67174913;
          DWORD1(v29) = v20;
          WORD4(v29) = 1025;
          *(_DWORD *)((char *)&v29 + 10) = 4;
          v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, wifi fix is insufficient as it used %{private}d APs, less than threshold %{private}d", &v29, 14, v29);
          goto LABEL_10;
        }
        return result;
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215F410);
      v23 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is sufficient", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10215F410);
        LOWORD(v29) = 0;
        v22 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, wifi fix is sufficient", &v29, 2, (_QWORD)v29);
        goto LABEL_80;
      }
    }
    return 1;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F410);
  v11 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134283521;
    *(double *)v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@WifiFlow, sufficiency, wifi fix is insufficient as it has higher hacc than desired %{private}.1lf", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    LODWORD(v29) = 134283521;
    *(double *)((char *)&v29 + 4) = v10;
    v7 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, sufficiency, wifi fix is insufficient as it has higher hacc than desired %{private}.1lf", &v29, 12, v29);
    goto LABEL_10;
  }
  return result;
}

BOOL sub_1001849F8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 152) && sub_10018FDEC((double *)(a1 + 56));
}

uint64_t sub_100184A10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

void sub_100184A18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *i;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  int v35;
  _BYTE v36[25];
  __int16 v37;
  char v38;
  _QWORD v39[4];
  int v40;
  _QWORD v41[2];
  __int16 v42;
  char v43;
  _OWORD v44[2];
  __int128 v45;
  int v46;
  __int128 v47;
  _BYTE v48[808];
  uint64_t v49;
  uint64_t v50;
  _DWORD v51[202];
  uint64_t v52;
  uint64_t v53;

  sub_100130B94(v51, a1);
  if (*(_BYTE *)(a1 + 809))
  {
    v4 = *(_DWORD *)(a1 + 3352);
    v47 = *(_OWORD *)(a1 + 3356);
    v5 = *(_QWORD *)(a1 + 3372);
    v6 = *(_QWORD *)(a1 + 3380);
    v7 = *(_QWORD *)(a1 + 3388);
    v8 = *(_QWORD *)(a1 + 3396);
    v9 = *(_QWORD *)(a1 + 3404);
    v10 = *(_QWORD *)(a1 + 3412);
    v11 = *(_QWORD *)(a1 + 3420);
    v12 = *(_QWORD *)(a1 + 3428);
    v13 = *(_DWORD *)(a1 + 3436);
    v14 = *(_QWORD *)(a1 + 3440);
    v45 = *(_OWORD *)(a1 + 3448);
    v46 = *(_DWORD *)(a1 + 3464);
    v18 = *(_QWORD *)(a1 + 3468);
    v19 = v14;
    v15 = *(_DWORD *)(a1 + 3476);
    v44[0] = *(_OWORD *)(a1 + 3480);
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(a1 + 3489);
    v42 = *(_WORD *)(a1 + 3505);
    v43 = *(_BYTE *)(a1 + 3507);
    v41[0] = sub_100223460(a1 + 3248);
    v41[1] = v16;
    memset(v39, 0, sizeof(v39));
    v40 = 1065353216;
    for (i = *(_QWORD **)(a1 + 1120); i; i = (_QWORD *)*i)
      sub_1000AF824((uint64_t)v39, i + 2, i + 2);
    v20 = v4;
    v21 = v47;
    v22 = v5;
    v23 = v6;
    v24 = v7;
    v25 = v8;
    v26 = v9;
    v27 = v10;
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v31 = v19;
    v32 = v45;
    v33 = v46;
    v34 = v18;
    v35 = v15;
    *(_OWORD *)&v36[9] = *(_OWORD *)((char *)v44 + 9);
    *(_OWORD *)v36 = v44[0];
    v38 = v43;
    v37 = v42;
    sub_1000491C8(a1, v39, (uint64_t)v41, (uint64_t)&v20, 0, 1, (uint64_t)v48);
    sub_1002234B8((_QWORD *)(a1 + 1144), (uint64_t)v48, a2);
    sub_100126B34((uint64_t)&v50);
    sub_100126A1C((uint64_t)&v49);
    sub_100126D5C((uint64_t)v48);
    sub_100067AC4((uint64_t)v39);
  }
  else
  {
    sub_100130C4C(a2, (uint64_t)v51);
  }
  sub_100126B34((uint64_t)&v53);
  sub_100126A1C((uint64_t)&v52);
  sub_100126D5C((uint64_t)v51);
}

void sub_100184C84(_Unwind_Exception *a1)
{
  sub_10055829C((uint64_t)&STACK[0x1AD8]);
  _Unwind_Resume(a1);
}

void sub_100184CCC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, double a10@<D0>, uint64_t a11, int a12)
{
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  int v33;
  NSObject *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  char **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  char *v60;
  NSObject *v61;
  unint64_t v62;
  _BOOL4 v63;
  NSObject *v64;
  int v65;
  NSObject *v66;
  const char *v67;
  double v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  __int128 v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  double v79;
  double v80;
  double v81;
  double v82;
  uint64_t *v83;
  double v84;
  double v85;
  double v86;
  _QWORD *v87;
  uint64_t v88;
  int v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  char v97;
  BOOL v98;
  char v99;
  NSObject *v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  unint64_t v104;
  _BOOL4 v105;
  char *v106;
  int v107;
  char *v108;
  const char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t *v120;
  char **v128;
  char *v129[3];
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char **v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  double v149;
  BOOL v150;
  unint64_t v151;
  int v152;
  _BYTE v153[96];
  __int128 v154;
  __int128 v155;
  _BYTE v156[28];
  unint64_t v157;
  int v158;
  uint64_t v159;
  uint8_t buf[8];
  _BYTE v161[20];
  __int16 v162;
  _BYTE v163[10];
  uint64_t v164;
  _BYTE v165[28];
  __int16 v166;
  const char *v167;
  _BYTE __src[64];
  _BYTE v169[10];
  _BYTE v170[10];
  uint64_t v171;
  _BYTE v172[40];
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  _BYTE __p[132];
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;

  v159 = 0;
  v158 = 0;
  v157 = 0xBFF0000000000000;
  *(_QWORD *)&v153[12] = 0;
  *(_QWORD *)&v153[4] = 0;
  *(_OWORD *)&v153[20] = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v153[36] = _Q1;
  *(_OWORD *)&v153[52] = _Q1;
  *(_OWORD *)&v153[68] = _Q1;
  *(_DWORD *)v153 = 0xFFFF;
  *(_DWORD *)&v153[84] = 0;
  v154 = 0uLL;
  *(_QWORD *)&v153[88] = 0xBFF0000000000000;
  *(_QWORD *)((char *)&v155 + 4) = 0xBFF0000000000000;
  LODWORD(v155) = 0;
  HIDWORD(v155) = 0x7FFFFFFF;
  memset(v156, 0, 25);
  v152 = -200;
  v151 = 0xC069000000000000;
  v150 = 0;
  v149 = a10;
  *(double *)(a11 + 120) = a10;
  v134 = 0;
  v135 = 0;
  v133 = &v134;
  v129[0] = 0;
  v129[1] = 0;
  v128 = v129;
  *(_QWORD *)&v161[8] = 0;
  *(_QWORD *)v161 = 0;
  *(_QWORD *)buf = v161;
  v18 = *a2;
  v19 = a2[1];
  if (*a2 != v19)
  {
    do
    {
      *(_QWORD *)__p = *(_QWORD *)v18;
      sub_1000C2254(__p, (std::string *)__src);
      if ((__src[23] & 0x80000000) != 0)
      {
        sub_100115CE4(__p, *(void **)__src, *(unint64_t *)&__src[8]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)__src;
        *(_QWORD *)&__p[16] = *(_QWORD *)&__src[16];
      }
      v20 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)&__p[24] = *(_OWORD *)v18;
      *(_OWORD *)&__p[40] = v20;
      v21 = *(_OWORD *)(v18 + 32);
      v22 = *(_OWORD *)(v18 + 48);
      v23 = *(_OWORD *)(v18 + 80);
      *(_OWORD *)&__p[88] = *(_OWORD *)(v18 + 64);
      *(_OWORD *)&__p[104] = v23;
      *(_OWORD *)&__p[56] = v21;
      *(_OWORD *)&__p[72] = v22;
      sub_100210AFC((uint64_t **)&v133, (const void **)__p, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_10019C3A8((uint64_t **)&v128, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v18 += 96;
    }
    while (v18 != v19);
  }
  v24 = *a3;
  v25 = a3[1];
  if (*a3 != v25)
  {
    do
    {
      *(_QWORD *)__p = *(_QWORD *)v24;
      sub_1000C2254(__p, (std::string *)__src);
      if ((__src[23] & 0x80000000) != 0)
      {
        sub_100115CE4(__p, *(void **)__src, *(unint64_t *)&__src[8]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)__src;
        *(_QWORD *)&__p[16] = *(_QWORD *)&__src[16];
      }
      v26 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)&__p[24] = *(_OWORD *)v24;
      *(_OWORD *)&__p[40] = v26;
      v27 = *(_OWORD *)(v24 + 32);
      v28 = *(_OWORD *)(v24 + 48);
      v29 = *(_OWORD *)(v24 + 80);
      *(_OWORD *)&__p[88] = *(_OWORD *)(v24 + 64);
      *(_OWORD *)&__p[104] = v29;
      *(_OWORD *)&__p[56] = v27;
      *(_OWORD *)&__p[72] = v28;
      sub_100210AFC((uint64_t **)&v133, (const void **)__p, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_10019C3A8((uint64_t **)buf, (const void **)__src, (uint64_t)__src);
      if ((__src[23] & 0x80000000) != 0)
        operator delete(*(void **)__src);
      v24 += 96;
    }
    while (v24 != v25);
  }
  v120 = a3;
  v30 = (uint64_t *)v133;
  if (v133 != &v134)
  {
    v31 = 0;
    do
    {
      sub_1015A2E04(v165, "type");
      v32 = v30 + 4;
      if (sub_1001876D0((uint64_t)buf, (const void **)v30 + 4))
        std::string::append((std::string *)v165, "_ZAxis");
      if (sub_1001876D0((uint64_t)&v128, (const void **)v30 + 4))
        std::string::append((std::string *)v165, "_LatLon");
      v33 = v31 + 1;
      if (v31 < (int)sub_100EF40C4())
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F430);
        v34 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v35 = v30 + 4;
          if (*((char *)v30 + 55) < 0)
            v35 = (uint64_t *)*v32;
          v36 = v30[8];
          v37 = v30[9];
          v39 = v30[10];
          v38 = v30[11];
          v40 = v30[12];
          v41 = *((_DWORD *)v30 + 32);
          v42 = *((_DWORD *)v30 + 26);
          v43 = *((_DWORD *)v30 + 27);
          v44 = v30[17];
          v45 = v30[15];
          v46 = v165;
          if (v165[23] < 0)
            v46 = *(_BYTE **)v165;
          *(_DWORD *)__p = 67243523;
          *(_DWORD *)&__p[4] = v33;
          *(_WORD *)&__p[8] = 2050;
          *(_QWORD *)&__p[10] = v135;
          *(_WORD *)&__p[18] = 2081;
          *(_QWORD *)&__p[20] = v35;
          *(_WORD *)&__p[28] = 2049;
          *(_QWORD *)&__p[30] = v36;
          *(_WORD *)&__p[38] = 2049;
          *(_QWORD *)&__p[40] = v37;
          *(_WORD *)&__p[48] = 2050;
          *(_QWORD *)&__p[50] = v38;
          *(_WORD *)&__p[58] = 1026;
          *(_DWORD *)&__p[60] = v42;
          *(_WORD *)&__p[64] = 2049;
          *(_QWORD *)&__p[66] = v39;
          *(_WORD *)&__p[74] = 2050;
          *(_QWORD *)&__p[76] = v40;
          *(_WORD *)&__p[84] = 1026;
          *(_DWORD *)&__p[86] = v41;
          *(_WORD *)&__p[90] = 1026;
          *(_DWORD *)&__p[92] = v43;
          *(_WORD *)&__p[96] = 2050;
          *(_QWORD *)&__p[98] = v44;
          *(_WORD *)&__p[106] = 2050;
          *(_QWORD *)&__p[108] = v45;
          *(_WORD *)&__p[116] = 2081;
          *(_QWORD *)&__p[118] = v46;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "WifiCalc, input AP, %{public}d / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}.6f, reach, %{public}d, altitude, %{private}.2f, vacc, %{public}.2f, rssi, %{public}d, channel, %{public}d, scan timestamp, %{public}.3lf, query timestamp, %{public}.3lf, %{private}s", __p, 0x7Eu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10215F430);
          if (*((char *)v30 + 55) < 0)
            v32 = (uint64_t *)*v32;
          v49 = v30[8];
          v50 = v30[9];
          v52 = v30[10];
          v51 = v30[11];
          v53 = v30[12];
          v54 = *((_DWORD *)v30 + 32);
          v55 = *((_DWORD *)v30 + 26);
          v56 = *((_DWORD *)v30 + 27);
          v57 = v30[17];
          v58 = v30[15];
          v59 = v165;
          if (v165[23] < 0)
            v59 = *(_BYTE **)v165;
          *(_DWORD *)__src = 67243523;
          *(_DWORD *)&__src[4] = v33;
          *(_WORD *)&__src[8] = 2050;
          *(_QWORD *)&__src[10] = v135;
          *(_WORD *)&__src[18] = 2081;
          *(_QWORD *)&__src[20] = v32;
          *(_WORD *)&__src[28] = 2049;
          *(_QWORD *)&__src[30] = v49;
          *(_WORD *)&__src[38] = 2049;
          *(_QWORD *)&__src[40] = v50;
          *(_WORD *)&__src[48] = 2050;
          *(_QWORD *)&__src[50] = v51;
          *(_WORD *)&__src[58] = 1026;
          *(_DWORD *)&__src[60] = v55;
          *(_WORD *)v169 = 2049;
          *(_QWORD *)&v169[2] = v52;
          *(_WORD *)v170 = 2050;
          *(_QWORD *)&v170[2] = v53;
          LOWORD(v171) = 1026;
          *(_DWORD *)((char *)&v171 + 2) = v54;
          HIWORD(v171) = 1026;
          *(_DWORD *)v172 = v56;
          *(_WORD *)&v172[4] = 2050;
          *(_QWORD *)&v172[6] = v57;
          *(_WORD *)&v172[14] = 2050;
          *(_QWORD *)&v172[16] = v58;
          *(_WORD *)&v172[24] = 2081;
          *(_QWORD *)&v172[26] = v59;
          LODWORD(v118) = 126;
          v60 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, input AP, %{public}d / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}.6f, reach, %{public}d, altitude, %{private}.2f, vacc, %{public}.2f, rssi, %{public}d, channel, %{public}d, scan timestamp, %{public}.3lf, query timestamp, %{public}.3lf, %{private}s", __src, v118);
          sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PositionCalculation::logWifiApLocations(const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &)", "%s\n", v60);
          if (v60 != __p)
            free(v60);
        }
      }
      if ((v165[23] & 0x80000000) != 0)
        operator delete(*(void **)v165);
      v47 = (char *)v30[1];
      if (v47)
      {
        do
        {
          v48 = (char **)v47;
          v47 = *(char **)v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          v48 = (char **)v30[2];
          _ZF = *v48 == (char *)v30;
          v30 = (uint64_t *)v48;
        }
        while (!_ZF);
      }
      v31 = v33;
      v30 = (uint64_t *)v48;
    }
    while (v48 != &v134);
  }
  sub_100090AE4((uint64_t)buf, *(char **)v161);
  sub_100090AE4((uint64_t)&v128, v129[0]);
  sub_100090AE4((uint64_t)&v133, v134);
  if (*a2 != a2[1])
    sub_100011D2C(a1, a2, v120, 100.0, v149, 500.0, 90, 4, 4, (int *)&v159 + 1, (int *)&v159, (double *)&v157, a4, (uint64_t)v153, &v152, (double *)&v151, &v150, &v158, a8,
      a11,
      a12);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F410);
  v61 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v62 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    v63 = *(double *)(a4 + 20) > 0.0;
    *(_DWORD *)__p = 134349824;
    *(_QWORD *)&__p[4] = v62;
    *(_WORD *)&__p[12] = 1026;
    *(_DWORD *)&__p[14] = v159;
    *(_WORD *)&__p[18] = 1026;
    *(_DWORD *)&__p[20] = v158;
    *(_WORD *)&__p[24] = 1026;
    *(_DWORD *)&__p[26] = v63;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "@WifiAps, compute, %{public}lu, used, %{public}u, used_vert, %{public}u, hint, %{public}d", __p, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
    v104 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 5);
    v105 = *(double *)(a4 + 20) > 0.0;
    *(_DWORD *)__src = 134349824;
    *(_QWORD *)&__src[4] = v104;
    *(_WORD *)&__src[12] = 1026;
    *(_DWORD *)&__src[14] = v159;
    *(_WORD *)&__src[18] = 1026;
    *(_DWORD *)&__src[20] = v158;
    *(_WORD *)&__src[24] = 1026;
    *(_DWORD *)&__src[26] = v105;
    LODWORD(v118) = 30;
    v106 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiAps, compute, %{public}lu, used, %{public}u, used_vert, %{public}u, hint, %{public}d", __src, v118);
    sub_100512490("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v106);
    if (v106 != __p)
      free(v106);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F430);
  v64 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v65 = *(unsigned __int8 *)(a11 + 145);
    *(_DWORD *)__p = 67240192;
    *(_DWORD *)&__p[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, isWsb, %{public}d", __p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F430);
    v107 = *(unsigned __int8 *)(a11 + 145);
    *(_DWORD *)__src = 67240192;
    *(_DWORD *)&__src[4] = v107;
    LODWORD(v118) = 8;
    v108 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, isWsb, %{public}d", __src, v118);
    sub_100512490("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v108);
    if (v108 != __p)
      free(v108);
  }
  if (!a7 || !a6 || *a2 == a2[1])
  {
    *(_OWORD *)(a11 + 128) = *(_OWORD *)&v153[28];
    v69 = v159;
    v70 = v158;
    v71 = v157;
    v72 = *(_DWORD *)(a11 + 152);
    v73 = v155;
    v74 = a9;
    a9[6] = v154;
    a9[7] = v73;
    a9[8] = *(_OWORD *)v156;
    *(_OWORD *)((char *)a9 + 140) = *(_OWORD *)&v156[12];
    v75 = *(_OWORD *)&v153[48];
    a9[2] = *(_OWORD *)&v153[32];
    a9[3] = v75;
    v76 = *(_OWORD *)&v153[80];
    a9[4] = *(_OWORD *)&v153[64];
    a9[5] = v76;
    v77 = *(_OWORD *)v153;
    v78 = *(_OWORD *)&v153[16];
    goto LABEL_113;
  }
  sub_100217B3C(a6, (uint64_t)&v133);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F430);
  v66 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    if (v147)
      v67 = "Yes";
    else
      v67 = "No";
    *(_DWORD *)__p = 136450051;
    *(_QWORD *)&__p[4] = v67;
    *(_WORD *)&__p[12] = 2049;
    *(_QWORD *)&__p[14] = v146;
    *(_WORD *)&__p[22] = 2049;
    *(_QWORD *)&__p[24] = v148;
    *(_WORD *)&__p[32] = 2049;
    *(_QWORD *)&__p[34] = v133;
    *(_WORD *)&__p[42] = 2049;
    *(_QWORD *)&__p[44] = v135;
    *(_WORD *)&__p[52] = 2049;
    *(_QWORD *)&__p[54] = v134;
    *(_WORD *)&__p[62] = 2049;
    *(_QWORD *)&__p[64] = v136;
    *(_WORD *)&__p[72] = 2049;
    *(_QWORD *)&__p[74] = v137;
    *(_WORD *)&__p[82] = 2049;
    *(_QWORD *)&__p[84] = v138;
    *(_WORD *)&__p[92] = 2049;
    *(_QWORD *)&__p[94] = v139;
    *(_WORD *)&__p[102] = 2049;
    *(_QWORD *)&__p[104] = v140;
    *(_WORD *)&__p[112] = 2049;
    *(_QWORD *)&__p[114] = v141;
    *(_WORD *)&__p[122] = 2049;
    *(_QWORD *)&__p[124] = v142;
    v180 = 2049;
    v181 = v144;
    v182 = 2049;
    v183 = v143;
    v184 = 2049;
    v185 = v145;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis input kalmanFilter, initialized, %{public}s, relative altitude, %{private}.6f, wifiAltUncAve, %{private}.6f, alt_k_k, %{private}.6f, alt_k1_k, %{private}.6f, cov_k_k, %{private}.6f, cov_k1_k, %{private}.6f, process noise variance, stable, %{private}.6f, unstable, %{private}.6f, measurement variance, %{private}.6f, timestamp, propagate, %{private}.3lf, update, %{private}.3lf, relative altitude timestamp, %{private}.3lf, wifi time interval, %{private}.6f, relative altitude time interval, %{private}.6f, altitude change during baro outage, %{private}.6f", __p, 0xA2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F430);
    v109 = "Yes";
    if (!v147)
      v109 = "No";
    *(_DWORD *)__src = 136450051;
    *(_QWORD *)&__src[4] = v109;
    *(_WORD *)&__src[12] = 2049;
    *(_QWORD *)&__src[14] = v146;
    *(_WORD *)&__src[22] = 2049;
    *(_QWORD *)&__src[24] = v148;
    *(_WORD *)&__src[32] = 2049;
    *(_QWORD *)&__src[34] = v133;
    *(_WORD *)&__src[42] = 2049;
    *(_QWORD *)&__src[44] = v135;
    *(_WORD *)&__src[52] = 2049;
    *(_QWORD *)&__src[54] = v134;
    *(_WORD *)&__src[62] = 2049;
    *(_QWORD *)v169 = v136;
    *(_WORD *)&v169[8] = 2049;
    *(_QWORD *)v170 = v137;
    *(_WORD *)&v170[8] = 2049;
    v171 = v138;
    *(_WORD *)v172 = 2049;
    *(_QWORD *)&v172[2] = v139;
    *(_WORD *)&v172[10] = 2049;
    *(_QWORD *)&v172[12] = v140;
    *(_WORD *)&v172[20] = 2049;
    *(_QWORD *)&v172[22] = v141;
    *(_WORD *)&v172[30] = 2049;
    *(_QWORD *)&v172[32] = v142;
    v173 = 2049;
    v174 = v144;
    v175 = 2049;
    v176 = v143;
    v177 = 2049;
    v178 = v145;
    LODWORD(v118) = 162;
    v110 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis input kalmanFilter, initialized, %{public}s, relative altitude, %{private}.6f, wifiAltUncAve, %{private}.6f, alt_k_k, %{private}.6f, alt_k1_k, %{private}.6f, cov_k_k, %{private}.6f, cov_k1_k, %{private}.6f, process noise variance, stable, %{private}.6f, unstable, %{private}.6f, measurement variance, %{private}.6f, timestamp, propagate, %{private}.3lf, update, %{private}.3lf, relative altitude timestamp, %{private}.3lf, wifi time interval, %{private}.6f, relative altitude time interval, %{private}.6f, altitude change during baro outage, %{private}.6f", __src, v118);
    sub_100512490("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v110);
    if (v110 != __p)
      free(v110);
  }
  v132 = 0xBFF0000000000000;
  v68 = *(double *)&v153[36];
  if (*(double *)&v153[36] < 0.0)
    goto LABEL_82;
  if (*(double *)(a5 + 36) < 0.0)
  {
    v68 = *((double *)sub_10012A448() + 42);
    goto LABEL_82;
  }
  v79 = v149;
  v80 = *(double *)(a5 + 76);
  if (v79 - v80 < *((double *)sub_10012A448() + 41)
    || (v81 = *(double *)(a5 + 28),
        v82 = *(double *)&v153[28],
        v83 = sub_10012A448(),
        v84 = vabdd_f64(v81, v82),
        v68 = -1.0,
        v84 <= *((double *)v83 + 43)))
  {
    v68 = *(double *)(a5 + 36);
LABEL_82:
    v132 = *(_QWORD *)&v68;
    if (v68 > 0.0)
    {
      v85 = *((double *)sub_10012A448() + 40);
      v86 = *(double *)&v153[36];
      v68 = v86 * *((double *)sub_10012A448() + 40) + v68 * (1.0 - v85);
      v132 = *(_QWORD *)&v68;
    }
  }
  *(double *)(a11 + 16) = v68;
  v87 = a7 + 1;
  sub_10012D660((uint64_t)__p, a7 + 1);
  v88 = *(_QWORD *)&__p[40];
  sub_1004A4854(__p);
  if (v88)
  {
    v89 = (*(uint64_t (**)(_QWORD *, double *))(*a7 + 16))(a7, &v149);
    sub_10012D660((uint64_t)__p, v87);
    *(_QWORD *)(a11 + 96) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&__p[8]
                                                  + (((unint64_t)(*(_QWORD *)&__p[40] + *(_QWORD *)&__p[32] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                      + 16 * (__p[40] + __p[32] - 1));
    *(_BYTE *)(a11 + 89) = 1;
    sub_1004A4854(__p);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F430);
    v90 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      sub_10012D660((uint64_t)__p, v87);
      v91 = *(_DWORD *)&__p[40];
      sub_10012D660((uint64_t)__src, v87);
      v92 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&__src[8]
                                  + (((unint64_t)(*(_QWORD *)&__src[40] + *(_QWORD *)&__src[32] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (__src[40] + __src[32] - 1));
      sub_10012D660((uint64_t)&v128, v87);
      v93 = "No";
      v94 = *(_QWORD *)(*(_QWORD *)&v129[0][((unint64_t)(v131 + v130 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                      + 16 * (v131 + v130 - 1)
                      + 8);
      *(_DWORD *)buf = 67240963;
      if (v89)
        v93 = "Yes";
      *(_DWORD *)&buf[4] = v91;
      *(_WORD *)v161 = 2049;
      *(_QWORD *)&v161[2] = v92;
      *(_WORD *)&v161[10] = 2050;
      *(_QWORD *)&v161[12] = v94;
      v162 = 2082;
      *(_QWORD *)v163 = v93;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis input elevation, size, %{public}d, relative altitude, %{private}.6f, timestamp, %{public}.3lf, elevation steady, %{public}s", buf, 0x26u);
      sub_1004A4854(&v128);
      sub_1004A4854(__src);
      sub_1004A4854(__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F430);
      v111 = qword_1022A0048;
      sub_10012D660((uint64_t)__src, v87);
      v112 = *(_DWORD *)&__src[40];
      sub_10012D660((uint64_t)&v128, v87);
      v113 = *(_QWORD *)(*(_QWORD *)&v129[0][((unint64_t)(v131 + v130 - 1) >> 5) & 0x7FFFFFFFFFFFFF8]
                       + 16 * (v131 + v130 - 1));
      sub_10012D660((uint64_t)buf, v87);
      v114 = "No";
      v115 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v161
                                   + (((unint64_t)(v164 + *(_QWORD *)&v163[2] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                       + 16 * (v164 + v163[2] - 1)
                       + 8);
      *(_DWORD *)v165 = 67240963;
      if (v89)
        v114 = "Yes";
      *(_DWORD *)&v165[4] = v112;
      *(_WORD *)&v165[8] = 2049;
      *(_QWORD *)&v165[10] = v113;
      *(_WORD *)&v165[18] = 2050;
      *(_QWORD *)&v165[20] = v115;
      v166 = 2082;
      v167 = v114;
      LODWORD(v118) = 38;
      v116 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v111, 2, "WifiCalc, zaxis input elevation, size, %{public}d, relative altitude, %{private}.6f, timestamp, %{public}.3lf, elevation steady, %{public}s", v165, v118);
      sub_1004A4854(buf);
      sub_1004A4854(&v128);
      sub_1004A4854(__src);
      sub_100512490("Generic", 1, 0, 2, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v116);
      if (v116 != __p)
        free(v116);
    }
  }
  if ((sub_100186264(a6) & 1) != 0)
  {
    if (sub_10121D000(a6, &v149, a7, (double *)&v153[28], (double *)&v153[36], &v150))
      sub_10121E2CC(a6, (uint64_t *)&v153[28], (double *)&v153[36]);
  }
  else
  {
    *(double *)__p = (double)v152;
    sub_100227EA8(a6, &v149, (double *)&v153[28], (double *)&v132, (uint64_t)a7, (double *)__p, (double *)&v151);
  }
  if (sub_100186264(a6))
  {
    *(_OWORD *)(a11 + 24) = *(_OWORD *)&v153[28];
    *(_BYTE *)(a11 + 88) = 1;
  }
  v95 = sub_100186264(a6);
  v96 = *(_QWORD *)&v153[36];
  if (*(double *)&v153[36] <= 0.0)
    v97 = 1;
  else
    v97 = v95;
  if ((v97 & 1) == 0)
  {
    v96 = v132;
    *(_QWORD *)&v153[36] = v132;
  }
  *(_QWORD *)(a11 + 128) = *(_QWORD *)&v153[28];
  *(_QWORD *)(a11 + 136) = v96;
  v98 = sub_100020150((double *)&v153[28], (double *)&v153[36]);
  v99 = *(double *)&v153[36] == -1.0 || v98;
  if ((v99 & 1) == 0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F430);
    v100 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__p = 134283777;
      *(_QWORD *)&__p[4] = *(_QWORD *)&v153[28];
      *(_WORD *)&__p[12] = 2049;
      *(_QWORD *)&__p[14] = *(_QWORD *)&v153[36];
      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_FAULT, "WifiCalc, zaxis, reported invalid alt, %{private}.2f, unc, %{private}.2f", __p, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F430);
      *(_DWORD *)__src = 134283777;
      *(_QWORD *)&__src[4] = *(_QWORD *)&v153[28];
      *(_WORD *)&__src[12] = 2049;
      *(_QWORD *)&__src[14] = *(_QWORD *)&v153[36];
      LODWORD(v118) = 22;
      v117 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiCalc, zaxis, reported invalid alt, %{private}.2f, unc, %{private}.2f", __src, v118);
      sub_100512490("Generic", 1, 0, 0, "static Types::ComputedLocation CL::Wifi1::Policies::PositionCalculation::HandleEvent::computePosition(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, CLWifiAltitudeKalmanFilter *, const CL::Wifi1::Types::ElevationHistory *, CLLocationCalculator::LatLonDebuggingData &, CLLocationCalculator::ZaxisDebuggingData &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v117);
      if (v117 != __p)
        free(v117);
    }
  }
  v69 = v159;
  v70 = v158;
  v71 = v157;
  v72 = *(_DWORD *)(a11 + 152);
  v101 = v155;
  v74 = a9;
  a9[6] = v154;
  a9[7] = v101;
  a9[8] = *(_OWORD *)v156;
  *(_OWORD *)((char *)a9 + 140) = *(_OWORD *)&v156[12];
  v102 = *(_OWORD *)&v153[48];
  a9[2] = *(_OWORD *)&v153[32];
  a9[3] = v102;
  v103 = *(_OWORD *)&v153[80];
  a9[4] = *(_OWORD *)&v153[64];
  a9[5] = v103;
  v77 = *(_OWORD *)v153;
  v78 = *(_OWORD *)&v153[16];
LABEL_113:
  *v74 = v77;
  v74[1] = v78;
  *((_DWORD *)v74 + 39) = v69;
  *((_DWORD *)v74 + 40) = v70;
  *((_QWORD *)v74 + 21) = v71;
  *((_DWORD *)v74 + 44) = v72;
  *((_BYTE *)v74 + 180) = 0;
  *((_WORD *)v74 + 91) = 0;
}

void sub_100186190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  sub_1004A4854(&a31);
  sub_1004A4854(&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100186264(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 120);
}

uint64_t sub_10018626C()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  const char *v5;
  uint64_t *v6;
  NSObject *v7;
  __int128 *v8;
  int v10;
  int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  _BYTE v21[12];
  char v22;
  int v23;
  _BYTE *v24;
  __int128 buf;
  char v26;

  HIBYTE(v20) = 0;
  sub_1001E4804(&buf);
  v0 = sub_1001E4874(buf, "iCloudSharingEnabled", (BOOL *)&v20 + 7);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (*((_QWORD *)&buf + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (v0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102170838);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      if (HIBYTE(v20))
        v5 = "true";
      else
        v5 = "false";
      LODWORD(buf) = 136380675;
      *(_QWORD *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWifi1Settings, #Warning defaults write iCloudSharingEnabled to %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102170838);
      if (HIBYTE(v20))
        v15 = "true";
      else
        v15 = "false";
      *(_DWORD *)v21 = 136380675;
      *(_QWORD *)&v21[4] = v15;
      LODWORD(v20) = 12;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLWifi1Settings, #Warning defaults write iCloudSharingEnabled to %{private}s", v21, v20);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiPositionWithAssociatedApSettings::iCloudSharingEnabledForDevice()", "%s\n", v16);
      if (v16 != (char *)&buf)
        free(v16);
    }
    v6 = (uint64_t *)((char *)&v20 + 7);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102170838);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_100197040();
      sub_100186708(&buf);
      v8 = v26 >= 0 ? &buf : (__int128 *)buf;
      *(_DWORD *)v21 = 136446210;
      *(_QWORD *)&v21[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLWifi1Settings, system version: %{public}s", v21, 0xCu);
      if (v26 < 0)
        operator delete((void *)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102170838);
      v17 = qword_1022A0048;
      sub_100197040();
      sub_100186708(v21);
      if (v22 >= 0)
        v18 = v21;
      else
        v18 = *(_BYTE **)v21;
      v23 = 136446210;
      v24 = v18;
      LODWORD(v20) = 12;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v17, 0, "CLWifi1Settings, system version: %{public}s", &v23, v20);
      if (v22 < 0)
        operator delete(*(void **)v21);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiPositionWithAssociatedApSettings::iCloudSharingEnabledForDevice()", "%s\n", v19);
      if (v19 != (char *)&buf)
        free(v19);
    }
    sub_100197040();
    if (sub_1000C4240())
    {
      v6 = (uint64_t *)((char *)sub_1000A3224() + 85);
    }
    else
    {
      sub_100197040();
      if (sub_100195F08())
      {
        v6 = sub_1000A3224() + 11;
      }
      else
      {
        sub_100197040();
        v10 = sub_100081BD0();
        sub_100197040();
        if (v10)
        {
          v11 = sub_1001CE630();
          v12 = sub_1000A3224();
          if (v11)
            v6 = (uint64_t *)((char *)v12 + 86);
          else
            v6 = (uint64_t *)((char *)v12 + 87);
        }
        else if (sub_10075C0C4())
        {
          v6 = (uint64_t *)((char *)sub_1000A3224() + 90);
        }
        else
        {
          sub_100197040();
          v13 = sub_10075C1D4();
          v14 = sub_1000A3224();
          if (v13)
            v6 = (uint64_t *)((char *)v14 + 91);
          else
            v6 = (uint64_t *)((char *)v14 + 93);
        }
      }
    }
  }
  return *(unsigned __int8 *)v6;
}

void sub_1001866EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100186708@<X0>(_QWORD *a1@<X8>)
{
  void *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  NSString *v9;

  v2 = (void *)_CFCopyServerVersionDictionary();
  if (!v2)
    v2 = (void *)_CFCopySystemVersionDictionary();
  v3 = (const __CFString *)objc_msgSend(v2, "objectForKey:", _kCFSystemVersionProductVersionKey);
  v4 = (const __CFString *)objc_msgSend(v2, "objectForKey:", _kCFSystemVersionProductNameKey);
  v5 = (const __CFString *)objc_msgSend(v2, "objectForKey:", _kCFSystemVersionBuildVersionKey);
  v6 = CFSTR("???");
  if (v4)
    v7 = v4;
  else
    v7 = CFSTR("???");
  if (v3)
    v8 = v3;
  else
    v8 = CFSTR("???");
  if (v5)
    v6 = v5;
  v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@ (%@)"), v7, v8, v6);

  return sub_1015A2E04(a1, (char *)-[NSString UTF8String](v9, "UTF8String"));
}

void sub_100187248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  sub_10187E514((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void sub_100187538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10018755C(uint64_t a1)
{
  __int128 v2;

  *(_DWORD *)a1 = 16777472;
  *(_BYTE *)(a1 + 4) = 1;
  *(_DWORD *)(a1 + 5) = 0;
  *(_OWORD *)(a1 + 28) = xmmword_101BC0BA0;
  *(_OWORD *)(a1 + 44) = xmmword_101BC0BB0;
  *(_DWORD *)(a1 + 60) = 400;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 96) = v2;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = v2;
  *(_DWORD *)(a1 + 144) = -1;
  *(_OWORD *)(a1 + 148) = xmmword_101BC0BC0;
  *(_OWORD *)(a1 + 12) = xmmword_101BC0BD0;
  if (sub_1000C4240())
    *(_DWORD *)(a1 + 16) = 4233600;
  *(_DWORD *)(a1 + 72) = 125000;
  *(_DWORD *)(a1 + 84) = 125000;
  *(_DWORD *)(a1 + 96) = 125000;
  *(_DWORD *)(a1 + 108) = 15000;
  *(_DWORD *)(a1 + 120) = 25000;
  *(_DWORD *)(a1 + 132) = -1;
  *(_DWORD *)(a1 + 144) = -1;
  return a1;
}

uint64_t sub_100187620(uint64_t **a1, const void **a2, uint64_t a3)
{
  __int128 *v4;
  uint64_t result;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;

  v4 = (__int128 *)a2;
  if (sub_1001876D0((uint64_t)a1, a2)
    || (v4 = (__int128 *)&unk_1023043C8, (result = sub_1001876D0((uint64_t)a1, (const void **)&unk_1023043C8)) != 0))
  {
    v16 = v4;
    v7 = sub_10018774C(a1, (const void **)v4, (uint64_t)&unk_101B9EB60, &v16);
    v8 = *((_OWORD *)v7 + 29);
    v9 = *((_OWORD *)v7 + 31);
    *(_OWORD *)(a3 + 16) = *((_OWORD *)v7 + 30);
    *(_OWORD *)(a3 + 32) = v9;
    *(_OWORD *)a3 = v8;
    v10 = *((_OWORD *)v7 + 32);
    v11 = *((_OWORD *)v7 + 33);
    v12 = *((_OWORD *)v7 + 35);
    *(_OWORD *)(a3 + 80) = *((_OWORD *)v7 + 34);
    *(_OWORD *)(a3 + 96) = v12;
    *(_OWORD *)(a3 + 48) = v10;
    *(_OWORD *)(a3 + 64) = v11;
    v13 = *((_OWORD *)v7 + 36);
    v14 = *((_OWORD *)v7 + 37);
    v15 = *((_OWORD *)v7 + 38);
    *(_DWORD *)(a3 + 160) = *((_DWORD *)v7 + 156);
    *(_OWORD *)(a3 + 128) = v14;
    *(_OWORD *)(a3 + 144) = v15;
    *(_OWORD *)(a3 + 112) = v13;
    return 1;
  }
  return result;
}

uint64_t sub_1001876D0(uint64_t a1, const void **a2)
{
  const void **v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    v4 = a1 + 16;
    v5 = 1;
    do
    {
      if (!sub_100279008(v4, a2, v2 + 4))
      {
        if (!sub_100279008(v4, v2 + 4, a2))
          return v5;
        ++v2;
      }
      v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *sub_10018774C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_10077B968((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_10077BB14((uint64_t)v10, 0);
  }
  return v7;
}

void sub_10018781C(uint64_t a1)
{
  objc_class *v2;
  id v3;
  NSObject *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  id v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  id v14;
  uint8_t buf[4];
  id v16;

  v2 = (objc_class *)objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoorBundle"), "principalClass");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "invalidate");
  objc_msgSend(*(id *)(a1 + 152), "setIndoord:", 0);
  v3 = objc_msgSend([v2 alloc], "initWithApiKey:onServer:", CFSTR("4d44bee9-c1f9-4074-974c-86076b5311ef"), CFSTR("https://purpleslam.apple.com"));
  objc_msgSend(*(id *)(a1 + 152), "setIndoord:", v3);

  if (objc_msgSend(*(id *)(a1 + 152), "indoord"))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*(id *)(a1 + 152), "indoord");
      *(_DWORD *)buf = 134349056;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice fBounce.indoord = %{public}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v7 = qword_1022A0048;
      v8 = objc_msgSend(*(id *)(a1 + 152), "indoord");
      v13 = 134349056;
      v14 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 0, "#Notice fBounce.indoord = %{public}p", &v13, 12);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::startDaemonLocalizing()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "setDelegate:", *(_QWORD *)(a1 + 152));
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 376) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8), 4, 0);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "failed to load principal class from indoor bundle", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      LOWORD(v13) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "failed to load principal class from indoor bundle", &v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLPipelineLocationProvider::startDaemonLocalizing()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

void sub_100187B9C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  uint8_t *v5;
  double Current;
  NSDate *v7;
  NSDate *v8;
  id v9;
  id v10;
  _QWORD v11[6];
  _WORD v12[8];
  uint8_t buf[1640];

  if ((sub_100241694() & 1) != 0)
  {
    *(_BYTE *)(a1 + 976) = 0;
    *(_QWORD *)(a1 + 968) = 0;
    *(_OWORD *)(a1 + 952) = 0u;
    if (sub_1001FC7BC(a1 + 120, a1 + 280) <= 7200.0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v7 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(a1 + 196));
      v8 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", Current);
      v9 = objc_alloc_init((Class)CMMotionActivityManager);
      *(_QWORD *)(a1 + 112) = v9;
      v10 = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "operationQueue");
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_100021820;
      v11[3] = &unk_1021B99F8;
      v11[4] = a1;
      *(double *)&v11[5] = Current;
      objc_msgSend(v9, "queryActivityStartingFromDate:toDate:toQueue:withHandler:", v7, v8, v10, v11);
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,Ref location old", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,Ref location old", v12, 2);
LABEL_19:
      v5 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::getDriveHistorySinceLastCachedRefPosition()", "%s\n", v3);
      if (v5 != buf)
        free(v5);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,GNSS not used", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,GNSS not used", v12, 2);
      goto LABEL_19;
    }
  }
}

uint64_t sub_100187ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  _BOOL4 v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 1112))
    return 0;
  v3 = a1;
  sub_100188124(a1, a2);
  v3 += 984;
  sub_10003CA9C(v3);
  sub_10018A4CC(v3, "CLGnssRefPosMaintenance_Latitude", (const void *)(a2 + 4));
  sub_10018A4CC(v3, "CLGnssRefPosMaintenance_Longitude", (const void *)(a2 + 12));
  sub_10018A4CC(v3, "CLGnssRefPosMaintenance_HorizontalAcc", (const void *)(a2 + 20));
  sub_10018A4CC(v3, "CLGnssRefPosMaintenance_Altitude", (const void *)(a2 + 28));
  sub_10018A4CC(v3, "CLGnssRefPosMaintenance_VerticalAcc", (const void *)(a2 + 36));
  sub_10018A4CC(v3, "CLGnssRefPosMaintenance_Timestamp", (const void *)(a2 + 76));
  sub_10011B4E4(v3, "CLGnssRefPosMaintenance_Confidence", (const void *)(a2 + 84));
  if ((sub_10023C0E0(v3) & 1) != 0)
    return 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,writeDaemonLocationToPersistentStore,not stored", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,writeDaemonLocationToPersistentStore,not stored", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLGnssRefPosMaintenance::writeDaemonLocationToPersistentStore(GNSS::DaemonLocation &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_100188124(uint64_t a1, uint64_t a2)
{
  double v3;
  float64x2_t v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  double v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  double v33;
  __int16 v34;
  uint64_t v35;

  v3 = *(double *)(a2 + 20);
  if (v3 > 0.0)
  {
    v4 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
    *(float64x2_t *)(a2 + 4) = vmulq_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a2 + 4), v4)), v4);
    *(double *)(a2 + 20) = sqrt(v3 * v3 + 123920211.0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(_QWORD *)(a2 + 20);
      *(_DWORD *)buf = 134349312;
      v29 = v3;
      v30 = 2050;
      v31 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,diluteLocationPrecision,HorUnc,%{public}.1lf,LimitedPrecisionHorUnc,%{public}.1lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v12 = *(_QWORD *)(a2 + 20);
      v20 = 134349312;
      v21 = v3;
      v22 = 2050;
      v23 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,diluteLocationPrecision,HorUnc,%{public}.1lf,LimitedPrecisionHorUnc,%{public}.1lf", &v20, 22);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::diluteLocationPrecision(CLDaemonLocation &)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v7 = *(double *)(a2 + 36);
  if (v7 > 0.0)
  {
    v8 = *(double *)(a2 + 28);
    *(double *)(a2 + 28) = round(v8 / 500.0) * 500.0;
    *(double *)(a2 + 36) = sqrt(v7 * v7 + 250000.0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a2 + 28);
      v11 = *(_QWORD *)(a2 + 36);
      *(_DWORD *)buf = 134349824;
      v29 = v8;
      v30 = 2050;
      v31 = v10;
      v32 = 2050;
      v33 = v7;
      v34 = 2050;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,diluteLocationPrecision,oldAlt,%{public}.1lf,newAlt,%{public}.1lf,VertUnc,%{public}.1lf,LimitedPrecisionVertUnc,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v15 = *(_QWORD *)(a2 + 28);
      v16 = *(_QWORD *)(a2 + 36);
      v20 = 134349824;
      v21 = v8;
      v22 = 2050;
      v23 = v15;
      v24 = 2050;
      v25 = v7;
      v26 = 2050;
      v27 = v16;
      LODWORD(v19) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,diluteLocationPrecision,oldAlt,%{public}.1lf,newAlt,%{public}.1lf,VertUnc,%{public}.1lf,LimitedPrecisionVertUnc,%{public}.1lf", &v20, v19);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::diluteLocationPrecision(CLDaemonLocation &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
}

BOOL sub_1001884FC(float *a1, float *a2, char a3, uint64_t a4)
{
  double v8;
  char v9;

  v9 = a3;
  v8 = *a1;
  sub_10018A4CC(a4, "kCLBiasXKey", &v8);
  v8 = a1[1];
  sub_10018A4CC(a4, "kCLBiasYKey", &v8);
  v8 = a1[2];
  sub_10018A4CC(a4, "kCLBiasZKey", &v8);
  v8 = *a2;
  sub_10018A4CC(a4, "kCLVarianceXKey", &v8);
  v8 = a2[1];
  sub_10018A4CC(a4, "kCLVarianceYKey", &v8);
  v8 = a2[2];
  sub_10018A4CC(a4, "kCLVarianceZKey", &v8);
  return sub_10011B47C(a4, "KCLDoingBiasEstimationKey", &v9);
}

void sub_100188608(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  double *v8;
  double v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  uint64_t v14;
  unsigned int v16;
  double v17;
  double *v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double Current;
  _BOOL4 v27;
  double v28;
  _OWORD *v29;
  double v30;
  _BOOL4 v31;
  NSObject *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double v40;
  NSObject *v41;
  int v42;
  double v43;
  double *v44;
  double v45;
  double v46;
  double v47;
  NSObject *v48;
  double v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  double v82;
  double v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  char *v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  NSObject *v117;
  const char *v118;
  char *v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  NSObject *v134;
  double v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  const char *v148;
  char *v149;
  const char *v150;
  char *v151;
  const char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  double v162;
  const char *v163;
  char *v164;
  const char *v165;
  char *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  char *v172;
  const char *v173;
  char *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  int v187;
  const char *v188;
  __int16 v189;
  _BYTE v190[50];
  _BYTE v191[10];
  _BYTE v192[10];
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  double v196;
  __int16 v197;
  double v198;
  _BYTE buf[64];
  _BYTE v200[32];
  _BYTE v201[32];
  _OWORD v202[94];

  if (!*(_BYTE *)(a1 + 357))
  {
    v8 = (double *)(a2 + 20);
    v9 = *(double *)(a2 + 20);
    if (v9 < 0.0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SLC Significant location change got invalid location!\"}", buf, 0x12u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      }
      v11 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SLC Significant location change got invalid location!", "{\"msg%{public}.0s\":\"#SLC Significant location change got invalid location!\"}", buf, 0x12u);
      }
      return;
    }
    v12 = *(_DWORD *)(a2 + 96);
    if (v9 >= 20000.0 || (v12 - 9) >= 0xFFFFFFFE)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217CB90);
      v14 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        return;
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v4 = "{\"msg%{public}.0s\":\"#SLC Ignoring inaccurate location\"}";
      goto LABEL_28;
    }
    if (v12 > 8)
    {
      if (v12 == 13)
      {
        if (v9 < 250.0)
          goto LABEL_42;
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217CB90);
        v14 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          return;
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v4 = "{\"msg%{public}.0s\":\"#SLC Ignoring inaccurate LoiOverride location\"}";
        goto LABEL_28;
      }
      if (v12 != 9)
        goto LABEL_42;
    }
    else if (v12 != 1)
    {
LABEL_35:
      if (v12 == 4 && v9 >= 250.0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217CB90);
        v14 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
          return;
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v4 = "{\"msg%{public}.0s\":\"#SLC Ignoring inaccurate WIFI location\"}";
        goto LABEL_28;
      }
LABEL_42:
      if (!*(_BYTE *)(a1 + 356))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10217CB90);
        v20 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Warning #SLC Significant location change monitoring not active; not handling\"}",
            buf,
            0x12u);
        }
        sub_100129CA0((uint64_t)buf);
        v21 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)v201 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)&v201[16] = v21;
        v202[0] = *(_OWORD *)(a2 + 128);
        *(_OWORD *)((char *)v202 + 12) = *(_OWORD *)(a2 + 140);
        v22 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)&buf[32] = *(_OWORD *)(a2 + 32);
        *(_OWORD *)&buf[48] = v22;
        v23 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)v200 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)&v200[16] = v23;
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)buf = *(_OWORD *)a2;
        *(_OWORD *)&buf[16] = v24;
        v187 = 0;
        (*(void (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 136))(a1, &v187, buf);
        sub_1004B4F0C((uint64_t)buf);
        return;
      }
      v16 = v12 - 6;
      v17 = 1000.0;
      if (v9 >= 1000.0 || v16 >= 3)
      {
        v19 = (double *)(a2 + 88);
        if (*(double *)(a2 + 88) >= 0.0)
          goto LABEL_67;
        if (v9 <= 0.0)
        {
          *v19 = 0.0;
LABEL_67:
          v186 = 0.0;
          Current = CFAbsoluteTimeGetCurrent();
          v27 = *v8 >= 0.0 && Current - *(double *)(a2 + 76) < 10.0;
          v28 = Current - *(double *)(a1 + 408);
          v185 = v28;
          v29 = (_OWORD *)(a1 + 200);
          v30 = *(double *)(a1 + 220);
          v31 = v30 < 0.0;
          if (v30 < 0.0)
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10217CB90);
            v32 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#SLC got first location, sending SLC notification", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_10217CB90);
              LOWORD(v187) = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC got first location, sending SLC notification", &v187, 2);
              v149 = (char *)v148;
              sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v148);
              if (v149 != buf)
                free(v149);
            }
            v33 = *(_OWORD *)(a2 + 16);
            *v29 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 216) = v33;
            v34 = *(_OWORD *)(a2 + 32);
            v35 = *(_OWORD *)(a2 + 48);
            v36 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(a1 + 280) = v36;
            *(_OWORD *)(a1 + 232) = v34;
            *(_OWORD *)(a1 + 248) = v35;
            v37 = *(_OWORD *)(a2 + 96);
            v38 = *(_OWORD *)(a2 + 112);
            v39 = *(_OWORD *)(a2 + 128);
            *(_OWORD *)(a1 + 340) = *(_OWORD *)(a2 + 140);
            *(_OWORD *)(a1 + 312) = v38;
            *(_OWORD *)(a1 + 328) = v39;
            *(_OWORD *)(a1 + 296) = v37;
            *(_QWORD *)(a1 + 408) = 0;
            v40 = 0.0;
            if (v27)
              goto LABEL_78;
            v42 = 1;
          }
          else
          {
            sub_10011E258((double *)(a1 + 120), a2, a1 + 200);
            v40 = v43;
            v186 = v43;
            v44 = (double *)(a1 + 276);
            v45 = *(double *)(a1 + 276);
            v46 = *(double *)(a2 + 76);
            if (qword_1022A01D0 != -1)
            {
              v184 = *(double *)(a2 + 76);
              dispatch_once(&qword_1022A01D0, &stru_10217CB90);
              v46 = v184;
            }
            v47 = vabdd_f64(v45, v46);
            v48 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218496;
              *(double *)&buf[4] = v40;
              *(_WORD *)&buf[12] = 2048;
              *(double *)&buf[14] = v47;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = 0x3FD5555555555555;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "#SLC handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_10217CB90);
              v187 = 134218496;
              v188 = *(const char **)&v40;
              v189 = 2048;
              *(double *)v190 = v47;
              *(_WORD *)&v190[8] = 2048;
              *(_QWORD *)&v190[10] = 0x3FD5555555555555;
              LODWORD(v182) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf", COERCE_DOUBLE(&v187), v182, v183);
              v151 = (char *)v150;
              sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v150);
              if (v151 != buf)
                free(v151);
            }
            if (v27)
            {
              if (v40 < 500.0 || (v49 = *v8, v40 < *v8))
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v50 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                {
                  v51 = *(_QWORD *)(a2 + 4);
                  v52 = *(_QWORD *)(a2 + 12);
                  v53 = *(_QWORD *)(a2 + 20);
                  v54 = *(_QWORD *)(a1 + 204);
                  v55 = *(_QWORD *)(a1 + 212);
                  v56 = *(_QWORD *)(a1 + 220);
                  *(_DWORD *)buf = 134219520;
                  *(_QWORD *)&buf[4] = v51;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v52;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v53;
                  *(_WORD *)&buf[32] = 2048;
                  *(double *)&buf[34] = v40;
                  *(_WORD *)&buf[42] = 2048;
                  *(_QWORD *)&buf[44] = v54;
                  *(_WORD *)&buf[52] = 2048;
                  *(_QWORD *)&buf[54] = v55;
                  *(_WORD *)&buf[62] = 2048;
                  *(_QWORD *)v200 = v56;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "#SLC <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding", buf, 0x48u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_97;
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v175 = *(const char **)(a2 + 4);
                v176 = *(_QWORD *)(a2 + 12);
                v177 = *(_QWORD *)(a2 + 20);
                v178 = *(_QWORD *)(a1 + 204);
                v179 = *(_QWORD *)(a1 + 212);
                v180 = *(_QWORD *)(a1 + 220);
                v187 = 134219520;
                v188 = v175;
                v189 = 2048;
                *(_QWORD *)v190 = v176;
                *(_WORD *)&v190[8] = 2048;
                *(_QWORD *)&v190[10] = v177;
                *(_WORD *)&v190[18] = 2048;
                *(double *)&v190[20] = v40;
                *(_WORD *)&v190[28] = 2048;
                *(_QWORD *)&v190[30] = v178;
                *(_WORD *)&v190[38] = 2048;
                *(_QWORD *)&v190[40] = v179;
                *(_WORD *)&v190[48] = 2048;
                *(_QWORD *)v191 = v180;
                LODWORD(v182) = 72;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding", COERCE_DOUBLE(&v187), v182, v183, v184, v185, v186);
                v102 = (char *)v181;
                sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v181);
LABEL_209:
                if (v102 != buf)
                  free(v102);
LABEL_97:
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v57 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#SLC no location change", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                  LOWORD(v187) = 0;
                  LODWORD(v182) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC no location change", &v187, *(_QWORD *)&v182);
                  v174 = (char *)v173;
                  sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v173);
                  if (v174 != buf)
                    free(v174);
                }
                v42 = 0;
                v31 = 0;
LABEL_115:
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v64 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 68289795;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v42;
                  *(_WORD *)&buf[24] = 2049;
                  *(double *)&buf[26] = v40;
                  *(_WORD *)&buf[34] = 2050;
                  *(double *)&buf[36] = v28;
                  _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SLC Location inspection complete\", \"isSignificantlocationchange\":%{public}hhd, \"distance\":\"%{private}f\", \"secondsSinceLastSLC_s\":\"%{public}.09f\"}", buf, 0x2Cu);
                }
                if (sub_1001DFAE8())
                {
                  sub_100119F3C(buf);
                  v187 = v42;
                  sub_10011B4E4((uint64_t)buf, "slcUpdate", &v187);
                  sub_10018A4CC((uint64_t)buf, "distance", &v186);
                  sub_10018A4CC((uint64_t)buf, "hAcc", v8);
                  sub_10018A4CC((uint64_t)buf, "secondsSinceLastSLC", &v185);
                  sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
                  sub_10011A5A8(buf);
                }
                if (v31)
                {
                  if (qword_1022A02F0 != -1)
                    dispatch_once(&qword_1022A02F0, &stru_10217CBB0);
                  v65 = qword_1022A02F8;
                  if (os_log_type_enabled((os_log_t)qword_1022A02F8, OS_LOG_TYPE_DEBUG))
                  {
                    v66 = *(_QWORD *)(a2 + 4);
                    v67 = *(_QWORD *)(a2 + 12);
                    v68 = *(_QWORD *)(a2 + 20);
                    v69 = *(_QWORD *)(a2 + 88);
                    v70 = *(_DWORD *)(a2 + 96);
                    v71 = *(_QWORD *)(a1 + 204);
                    v72 = *(_QWORD *)(a1 + 212);
                    v73 = *(_QWORD *)(a1 + 220);
                    v74 = *(double *)(a2 + 76) - *(double *)(a1 + 276);
                    *(_DWORD *)buf = 136317954;
                    *(_QWORD *)&buf[4] = "SignificantChange";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 1;
                    *(_WORD *)&buf[18] = 2048;
                    *(_QWORD *)&buf[20] = v66;
                    *(_WORD *)&buf[28] = 2048;
                    *(_QWORD *)&buf[30] = v67;
                    *(_WORD *)&buf[38] = 2048;
                    *(_QWORD *)&buf[40] = v68;
                    *(_WORD *)&buf[48] = 2048;
                    *(_QWORD *)&buf[50] = v69;
                    *(_WORD *)&buf[58] = 1024;
                    *(_DWORD *)&buf[60] = v70;
                    *(_WORD *)v200 = 2048;
                    *(_QWORD *)&v200[2] = v71;
                    *(_WORD *)&v200[10] = 2048;
                    *(_QWORD *)&v200[12] = v72;
                    *(_WORD *)&v200[20] = 2048;
                    *(_QWORD *)&v200[22] = v73;
                    *(_WORD *)&v200[30] = 2048;
                    *(double *)v201 = v186;
                    *(_WORD *)&v201[8] = 2048;
                    *(double *)&v201[10] = v74;
                    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f,%.2f,Distance,%.2f,DeltaTime,%.3f,", buf, 0x72u);
                  }
                  if (sub_1001BFF7C(117, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A02F0 != -1)
                      dispatch_once(&qword_1022A02F0, &stru_10217CBB0);
                    v154 = *(_QWORD *)(a2 + 4);
                    v155 = *(_QWORD *)(a2 + 12);
                    v156 = *(_QWORD *)(a2 + 20);
                    v157 = *(_QWORD *)(a2 + 88);
                    v158 = *(_DWORD *)(a2 + 96);
                    v159 = *(_QWORD *)(a1 + 204);
                    v160 = *(_QWORD *)(a1 + 212);
                    v161 = *(_QWORD *)(a1 + 220);
                    v162 = *(double *)(a2 + 76) - *(double *)(a1 + 276);
                    v187 = 136317954;
                    v188 = "SignificantChange";
                    v189 = 1024;
                    *(_DWORD *)v190 = 1;
                    *(_WORD *)&v190[4] = 2048;
                    *(_QWORD *)&v190[6] = v154;
                    *(_WORD *)&v190[14] = 2048;
                    *(_QWORD *)&v190[16] = v155;
                    *(_WORD *)&v190[24] = 2048;
                    *(_QWORD *)&v190[26] = v156;
                    *(_WORD *)&v190[34] = 2048;
                    *(_QWORD *)&v190[36] = v157;
                    *(_WORD *)&v190[44] = 1024;
                    *(_DWORD *)&v190[46] = v158;
                    *(_WORD *)v191 = 2048;
                    *(_QWORD *)&v191[2] = v159;
                    *(_WORD *)v192 = 2048;
                    *(_QWORD *)&v192[2] = v160;
                    v193 = 2048;
                    v194 = v161;
                    v195 = 2048;
                    v196 = v186;
                    v197 = 2048;
                    v198 = v162;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02F8, 2, "Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f,%.2f,Distance,%.2f,DeltaTime,%.3f,", (const char *)&v187, 114, v183, v184, v185, v186);
                    v164 = (char *)v163;
                    sub_100512490("LOCATION", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v163);
                    if (v164 != buf)
                      free(v164);
                  }
                  *(double *)(a1 + 184) = v186;
                  *(double *)(a1 + 192) = *(double *)(a2 + 76) - *(double *)(a1 + 276);
                  v75 = *(_OWORD *)(a2 + 140);
                  v77 = *(_OWORD *)(a2 + 112);
                  v76 = *(_OWORD *)(a2 + 128);
                  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 96);
                  *(_OWORD *)(a1 + 312) = v77;
                  *(_OWORD *)(a1 + 328) = v76;
                  *(_OWORD *)(a1 + 340) = v75;
                  v79 = *(_OWORD *)(a2 + 32);
                  v78 = *(_OWORD *)(a2 + 48);
                  v80 = *(_OWORD *)(a2 + 80);
                  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 64);
                  *(_OWORD *)(a1 + 280) = v80;
                  *(_OWORD *)(a1 + 232) = v79;
                  *(_OWORD *)(a1 + 248) = v78;
                  v81 = *(_OWORD *)(a2 + 16);
                  *v29 = *(_OWORD *)a2;
                  *(_OWORD *)(a1 + 216) = v81;
                  *(double *)(a1 + 276) = Current;
                  *(double *)(a1 + 408) = Current;
                  sub_100C99F44(a1);
                }
                return;
              }
              if (*(_DWORD *)(a1 + 296) == *(_DWORD *)(a2 + 96))
              {
                v82 = *v44;
              }
              else
              {
                v83 = *(double *)(a1 + 288);
                v82 = *v44;
                if (v83 >= 0.0 && v83 + v82 > Current)
                {
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                  v84 = qword_1022A01D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                  {
                    v85 = *(_QWORD *)(a1 + 204);
                    v86 = *(_QWORD *)(a1 + 212);
                    v87 = *(_QWORD *)(a1 + 220);
                    v88 = *v44;
                    v89 = *(_QWORD *)(a1 + 288);
                    v90 = *(_QWORD *)(a2 + 4);
                    v91 = *(_QWORD *)(a2 + 12);
                    v92 = *(_QWORD *)(a2 + 20);
                    *(_DWORD *)buf = 134219776;
                    *(_QWORD *)&buf[4] = v85;
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v86;
                    *(_WORD *)&buf[22] = 2048;
                    *(_QWORD *)&buf[24] = v87;
                    *(_WORD *)&buf[32] = 2048;
                    *(double *)&buf[34] = v88;
                    *(_WORD *)&buf[42] = 2048;
                    *(_QWORD *)&buf[44] = v89;
                    *(_WORD *)&buf[52] = 2048;
                    *(_QWORD *)&buf[54] = v90;
                    *(_WORD *)&buf[62] = 2048;
                    *(_QWORD *)v200 = v91;
                    *(_WORD *)&v200[8] = 2048;
                    *(_QWORD *)&v200[10] = v92;
                    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "#SLC Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp %.2f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f", buf, 0x52u);
                  }
                  if (!sub_1001BFF7C(115, 2))
                    goto LABEL_97;
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                  v93 = *(const char **)(a1 + 204);
                  v94 = *(_QWORD *)(a1 + 212);
                  v95 = *(_QWORD *)(a1 + 220);
                  v96 = *v44;
                  v97 = *(_QWORD *)(a1 + 288);
                  v98 = *(_QWORD *)(a2 + 4);
                  v99 = *(_QWORD *)(a2 + 12);
                  v100 = *(_QWORD *)(a2 + 20);
                  v187 = 134219776;
                  v188 = v93;
                  v189 = 2048;
                  *(_QWORD *)v190 = v94;
                  *(_WORD *)&v190[8] = 2048;
                  *(_QWORD *)&v190[10] = v95;
                  *(_WORD *)&v190[18] = 2048;
                  *(double *)&v190[20] = v96;
                  *(_WORD *)&v190[28] = 2048;
                  *(_QWORD *)&v190[30] = v97;
                  *(_WORD *)&v190[38] = 2048;
                  *(_QWORD *)&v190[40] = v98;
                  *(_WORD *)&v190[48] = 2048;
                  *(_QWORD *)v191 = v99;
                  *(_WORD *)&v191[8] = 2048;
                  *(_QWORD *)v192 = v100;
                  LODWORD(v182) = 82;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp %.2f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f", COERCE_DOUBLE(&v187), v182, v183, v184, v185, v186);
                  v102 = (char *)v101;
                  sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v101);
                  goto LABEL_209;
                }
              }
              if (vabdd_f64(Current, v82) < 10.0 && *(double *)(a1 + 220) <= v49)
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v134 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                {
                  v135 = *v44;
                  v136 = *(_QWORD *)(a1 + 204);
                  v137 = *(_QWORD *)(a1 + 212);
                  v138 = *(_QWORD *)(a2 + 4);
                  v139 = *(_QWORD *)(a2 + 12);
                  v140 = *(_QWORD *)(a2 + 20);
                  *(_DWORD *)buf = 134219520;
                  *(double *)&buf[4] = v135;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v136;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v137;
                  *(_WORD *)&buf[32] = 2048;
                  *(_QWORD *)&buf[34] = 0x4024000000000000;
                  *(_WORD *)&buf[42] = 2048;
                  *(_QWORD *)&buf[44] = v138;
                  *(_WORD *)&buf[52] = 2048;
                  *(_QWORD *)&buf[54] = v139;
                  *(_WORD *)&buf[62] = 2048;
                  *(_QWORD *)v200 = v140;
                  _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "#SLC Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; di"
                    "scarding <%+.8f,%+.8f> acc %.2f",
                    buf,
                    0x48u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_97;
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v141 = *v44;
                v142 = *(_QWORD *)(a1 + 204);
                v143 = *(_QWORD *)(a1 + 212);
                v144 = *(_QWORD *)(a2 + 4);
                v145 = *(_QWORD *)(a2 + 12);
                v146 = *(_QWORD *)(a2 + 20);
                v187 = 134219520;
                v188 = *(const char **)&v141;
                v189 = 2048;
                *(_QWORD *)v190 = v142;
                *(_WORD *)&v190[8] = 2048;
                *(_QWORD *)&v190[10] = v143;
                *(_WORD *)&v190[18] = 2048;
                *(_QWORD *)&v190[20] = 0x4024000000000000;
                *(_WORD *)&v190[28] = 2048;
                *(_QWORD *)&v190[30] = v144;
                *(_WORD *)&v190[38] = 2048;
                *(_QWORD *)&v190[40] = v145;
                *(_WORD *)&v190[48] = 2048;
                *(_QWORD *)v191 = v146;
                LODWORD(v182) = 72;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; disc"
                  "arding <%+.8f,%+.8f> acc %.2f",
                  COERCE_DOUBLE(&v187),
                  v182,
                  v183,
                  v184,
                  v185,
                  v186);
                v102 = (char *)v147;
                sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v147);
                goto LABEL_209;
              }
              if (v47 * 340.0 < v40 && v40 > v49 + *(double *)(a1 + 220))
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v103 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
                {
                  v104 = *(_QWORD *)(a2 + 4);
                  v105 = *(_QWORD *)(a2 + 12);
                  v106 = *(_QWORD *)(a2 + 20);
                  v107 = *(_QWORD *)(a1 + 204);
                  v108 = *(_QWORD *)(a1 + 212);
                  v109 = *(_QWORD *)(a1 + 220);
                  *(_DWORD *)buf = 134219776;
                  *(_QWORD *)&buf[4] = v104;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v105;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v106;
                  *(_WORD *)&buf[32] = 2048;
                  *(double *)&buf[34] = v40;
                  *(_WORD *)&buf[42] = 2048;
                  *(_QWORD *)&buf[44] = v107;
                  *(_WORD *)&buf[52] = 2048;
                  *(_QWORD *)&buf[54] = v108;
                  *(_WORD *)&buf[62] = 2048;
                  *(_QWORD *)v200 = v109;
                  *(_WORD *)&v200[8] = 2048;
                  *(double *)&v200[10] = v47;
                  _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "#Warning #SLC Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+.8f,%+.8f> acc %.2f from %.3fs ago, discarding", buf, 0x52u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_97;
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v110 = *(const char **)(a2 + 4);
                v111 = *(_QWORD *)(a2 + 12);
                v112 = *(_QWORD *)(a2 + 20);
                v113 = *(_QWORD *)(a1 + 204);
                v114 = *(_QWORD *)(a1 + 212);
                v115 = *(_QWORD *)(a1 + 220);
                v187 = 134219776;
                v188 = v110;
                v189 = 2048;
                *(_QWORD *)v190 = v111;
                *(_WORD *)&v190[8] = 2048;
                *(_QWORD *)&v190[10] = v112;
                *(_WORD *)&v190[18] = 2048;
                *(double *)&v190[20] = v40;
                *(_WORD *)&v190[28] = 2048;
                *(_QWORD *)&v190[30] = v113;
                *(_WORD *)&v190[38] = 2048;
                *(_QWORD *)&v190[40] = v114;
                *(_WORD *)&v190[48] = 2048;
                *(_QWORD *)v191 = v115;
                *(_WORD *)&v191[8] = 2048;
                *(double *)v192 = v47;
                LODWORD(v182) = 82;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning #SLC Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+.8f,%+.8f> acc %.2f from %.3fs ago, discarding", COERCE_DOUBLE(&v187), v182, v183, v184, v185, v186);
                v102 = (char *)v116;
                sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v116);
                goto LABEL_209;
              }
              if (v28 <= 300.0)
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v120 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
                {
                  v121 = *(_QWORD *)(a1 + 204);
                  v122 = *(_QWORD *)(a1 + 212);
                  v123 = *(_QWORD *)(a1 + 220);
                  v124 = *(_QWORD *)(a2 + 4);
                  v125 = *(_QWORD *)(a2 + 12);
                  v126 = *(_QWORD *)(a2 + 20);
                  *(_DWORD *)buf = 134219520;
                  *(double *)&buf[4] = v28;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v121;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v122;
                  *(_WORD *)&buf[32] = 2048;
                  *(_QWORD *)&buf[34] = v123;
                  *(_WORD *)&buf[42] = 2048;
                  *(_QWORD *)&buf[44] = v124;
                  *(_WORD *)&buf[52] = 2048;
                  *(_QWORD *)&buf[54] = v125;
                  *(_WORD *)&buf[62] = 2048;
                  *(_QWORD *)v200 = v126;
                  _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "#SLC avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, new location, <%+.8f,%+.8f>, acc, %.2f", buf, 0x48u);
                }
                if (!sub_1001BFF7C(115, 2))
                  goto LABEL_97;
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v127 = *(_QWORD *)(a1 + 204);
                v128 = *(_QWORD *)(a1 + 212);
                v129 = *(_QWORD *)(a1 + 220);
                v130 = *(_QWORD *)(a2 + 4);
                v131 = *(_QWORD *)(a2 + 12);
                v132 = *(_QWORD *)(a2 + 20);
                v187 = 134219520;
                v188 = *(const char **)&v28;
                v189 = 2048;
                *(_QWORD *)v190 = v127;
                *(_WORD *)&v190[8] = 2048;
                *(_QWORD *)&v190[10] = v128;
                *(_WORD *)&v190[18] = 2048;
                *(_QWORD *)&v190[20] = v129;
                *(_WORD *)&v190[28] = 2048;
                *(_QWORD *)&v190[30] = v130;
                *(_WORD *)&v190[38] = 2048;
                *(_QWORD *)&v190[40] = v131;
                *(_WORD *)&v190[48] = 2048;
                *(_QWORD *)v191 = v132;
                LODWORD(v182) = 72;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, new location, <%+.8f,%+.8f>, acc, %.2f", COERCE_DOUBLE(&v187), v182, v183, v184, v185, v186);
                v102 = (char *)v133;
                sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v133);
                goto LABEL_209;
              }
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_10217CB90);
              v117 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134217984;
                *(double *)&buf[4] = v40;
                _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "#SLC issue notificaiton, distance, %.1lf", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                v187 = 134217984;
                v188 = *(const char **)&v40;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC issue notificaiton, distance, %.1lf", COERCE_DOUBLE(&v187));
                v119 = (char *)v118;
                sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v118);
                if (v119 != buf)
                  free(v119);
              }
LABEL_78:
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_10217CB90);
              v41 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#SLC reporting a location change", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10217CB90);
                LOWORD(v187) = 0;
                LODWORD(v182) = 2;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC reporting a location change", &v187, *(_QWORD *)&v182);
                v166 = (char *)v165;
                sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v165);
                if (v166 != buf)
                  free(v166);
              }
              *(_QWORD *)(a1 + 408) = 0;
              v42 = 1;
              v31 = 1;
              goto LABEL_115;
            }
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10217CB90);
            v58 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
            {
              v59 = *(_QWORD *)(a2 + 4);
              v60 = *(_QWORD *)(a2 + 12);
              v61 = *(_QWORD *)(a2 + 20);
              v62 = *(_QWORD *)(a2 + 76);
              *(_DWORD *)buf = 134218752;
              *(_QWORD *)&buf[4] = v59;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v60;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v61;
              *(_WORD *)&buf[32] = 2048;
              *(_QWORD *)&buf[34] = v62;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "#SLC <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding", buf, 0x2Au);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_10217CB90);
              v167 = *(const char **)(a2 + 4);
              v168 = *(_QWORD *)(a2 + 12);
              v169 = *(_QWORD *)(a2 + 20);
              v170 = *(_QWORD *)(a2 + 76);
              v187 = 134218752;
              v188 = v167;
              v189 = 2048;
              *(_QWORD *)v190 = v168;
              *(_WORD *)&v190[8] = 2048;
              *(_QWORD *)&v190[10] = v169;
              *(_WORD *)&v190[18] = 2048;
              *(_QWORD *)&v190[20] = v170;
              LODWORD(v182) = 42;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding", COERCE_DOUBLE(&v187), v182, v183, v184);
              v172 = (char *)v171;
              sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v171);
              if (v172 != buf)
                free(v172);
            }
            v42 = 0;
          }
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10217CB90);
          v63 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "#SLC new location is not useful", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10217CB90);
            LOWORD(v187) = 0;
            LODWORD(v182) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#SLC new location is not useful", &v187, *(_QWORD *)&v182);
            v153 = (char *)v152;
            sub_100512490("Generic", 1, 0, 2, "void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)", "%s\n", v152);
            if (v153 != buf)
              free(v153);
          }
          goto LABEL_115;
        }
        v17 = *(double *)(a2 + 20);
      }
      else
      {
        v19 = (double *)(a2 + 88);
        v25 = *(double *)(a2 + 88);
        *(_QWORD *)(a2 + 20) = 0x408F400000000000;
        if (v25 >= 0.0)
          goto LABEL_67;
      }
      *v19 = v17 / 250.0;
      goto LABEL_67;
    }
    if (v9 < 30.0)
      goto LABEL_35;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
    v14 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      return;
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v4 = "{\"msg%{public}.0s\":\"#SLC Ignoring inaccurate GPS location\"}";
LABEL_28:
    v5 = v14;
    v6 = OS_LOG_TYPE_INFO;
    goto LABEL_9;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #SLC Currently sending significant location changes read from defaults.\"}", buf, 0x12u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  }
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v4 = "{\"msg%{public}.0s\":\"#Warning #SLC Delete 'SpoofSignificantLocationChange' from defaults to continue monitori"
         "ng SLC updates.\"}";
    v5 = v3;
    v6 = OS_LOG_TYPE_DEFAULT;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, buf, 0x12u);
  }
}

void sub_10018A49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_10011A5A8(&a31);
  _Unwind_Resume(a1);
}

BOOL sub_10018A4CC(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10018A534(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_10018A534(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v14, 12);
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const double &)", "%s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v5 != 0;
}

void sub_10018A798(uint64_t a1)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  _DWORD v38[2];
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  uint8_t buf[4];
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;

  v2 = sub_1001FD94C();
  v3 = (int *)(a1 + 2176);
  sub_10018AAE4(v2, CFSTR("ShortTermOrbitAssistanceDailyDownloadCount"), (unsigned int *)(a1 + 2176));
  v4 = sub_1001FD94C();
  v5 = (int *)(a1 + 2180);
  sub_10018AAE4(v4, CFSTR("LongTermOrbitAssistanceDailyDownloadCount"), (unsigned int *)(a1 + 2180));
  v6 = sub_1001FD94C();
  v7 = (int *)(a1 + 2184);
  sub_10018AAE4(v6, CFSTR("RtiDailyDownloadCount"), (unsigned int *)(a1 + 2184));
  v8 = sub_1001FD94C();
  v9 = (int *)(a1 + 2188);
  sub_10018AAE4(v8, CFSTR("RavenGnssAssistanceDailyDownloadCount"), (unsigned int *)(a1 + 2188));
  v10 = sub_1001FD94C();
  v11 = (int *)(a1 + 2192);
  sub_10018AAE4(v10, CFSTR("ShortTermOrbitAssistanceDailyDownloadLargeCount"), (unsigned int *)(a1 + 2192));
  v12 = sub_1001FD94C();
  v13 = (int *)(a1 + 2196);
  sub_10018AAE4(v12, CFSTR("LongTermOrbitAssistanceDailyDownloadLargeCount"), (unsigned int *)(a1 + 2196));
  v14 = sub_1001FD94C();
  v15 = (int *)(a1 + 2200);
  sub_10018AAE4(v14, CFSTR("RtiDailyDownloadLargeCount"), (unsigned int *)(a1 + 2200));
  v16 = sub_1001FD94C();
  v17 = (int *)(a1 + 2204);
  sub_10018AAE4(v16, CFSTR("RavenGnssAssistanceDailyDownloadLargeCount"), (unsigned int *)(a1 + 2204));
  v18 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 944))(v18);
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v19 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v20 = *v3;
      v21 = *v5;
      v22 = *v7;
      v23 = *v9;
      v24 = *v11;
      v25 = *v13;
      v26 = *v15;
      v27 = *v17;
      *(_DWORD *)buf = 67176449;
      v54 = v20;
      v55 = 1025;
      v56 = v21;
      v57 = 1025;
      v58 = v22;
      v59 = 1025;
      v60 = v23;
      v61 = 1025;
      v62 = v24;
      v63 = 1025;
      v64 = v25;
      v65 = 1025;
      v66 = v26;
      v67 = 1025;
      v68 = v27;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,StoreOnDisk,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v28 = *v3;
      v29 = *v5;
      v30 = *v7;
      v31 = *v9;
      v32 = *v11;
      v33 = *v13;
      v34 = *v15;
      v35 = *v17;
      v38[0] = 67176449;
      v38[1] = v28;
      v39 = 1025;
      v40 = v29;
      v41 = 1025;
      v42 = v30;
      v43 = 1025;
      v44 = v31;
      v45 = 1025;
      v46 = v32;
      v47 = 1025;
      v48 = v33;
      v49 = 1025;
      v50 = v34;
      v51 = 1025;
      v52 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,AssistanceFileCountMetrics,StoreOnDisk,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", v38, 50);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::storeAssistanceFileDownloadMetricsOnDisk()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
}

BOOL sub_10018AAE4(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *valuePtr[2];
  char v17;

  valuePtr[0] = (void *)*a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)valuePtr);
      v7 = v17 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, valuePtr, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v14, 12);
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint32_t &)", "%s\n", v11);
      if (v11 != (char *)valuePtr)
        free(v11);
    }
  }
  return v5 != 0;
}

uint64_t sub_10018AD54(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v6;

  v6 = a1 + 128;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 128) + 16))(a1 + 128);
  sub_10011BA90((CFMutableDictionaryRef *)a1, a2, a3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_10018ADCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10018ADE0(uint64_t result)
{
  if (!*(_BYTE *)(result + 24))
    *(_BYTE *)(result + 24) = 1;
  if (*(double *)(result + 32) == 0.0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 944))(result);
  return result;
}

uint64_t sub_10018AE0C(uint64_t a1, uint64_t a2, const __CFString *a3, const __CFDictionary *a4)
{
  NSObject *v7;
  _BYTE *v8;
  NSObject *v9;
  NSObject *v10;
  _BYTE *v11;
  int v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  NSObject *v19;
  NSObject *v20;
  CFIndex Count;
  CFDictionaryRef v22;
  const __CFDictionary *v23;
  float v24;
  NSObject *v25;
  double v26;
  double v27;
  NSObject *v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  uint64_t v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  int v36;
  const char *v37;
  char *v38;
  const char *v39;
  char *v40;
  const char *v41;
  char *v42;
  const char *v43;
  char *v44;
  uint64_t v45;
  CFIndex v46;
  const char *v47;
  char *v48;
  const char *v49;
  char *v50;
  double v51;
  double v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  _BYTE theArray[12];
  _BYTE buf[12];
  __int16 v60;
  double v61;
  char v62;
  _BYTE __p[28];
  __int16 v64;
  int v65;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1001A486C(a3, (uint64_t)__p);
    v8 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CTService: received notification %s", buf, 0xCu);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v32 = qword_1022A02D8;
    sub_1001A486C(a3, (uint64_t)buf);
    if (v62 >= 0)
      v33 = buf;
    else
      v33 = *(_BYTE **)buf;
    *(_DWORD *)theArray = 136315138;
    *(_QWORD *)&theArray[4] = v33;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v32, 2, "CTService: received notification %s", theArray);
    v35 = v34;
    if (v62 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v35);
    if (v35 != __p)
      free(v35);
  }
  if (CFEqual(kCTRegistrationCellChangedNotification, a3) || CFEqual(kCTRegistrationStatusChangedNotification, a3))
  {
    sub_1001C1D6C((int)theArray, a4);
    if ((sub_1001E48E4((uint64_t)theArray, kCTRegistrationInHomeCountry, (BOOL *)(a1 + 161)) & 1) == 0)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102146100);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "couldn't get kCTRegistrationInHomeCountry, keeping current value", __p, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102146100);
        *(_WORD *)buf = 0;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 16, "couldn't get kCTRegistrationInHomeCountry, keeping current value", buf, 2);
        v40 = (char *)v39;
        sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v39);
        if (v40 != __p)
          free(v40);
      }
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102146100);
    v10 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      sub_1001A486C(a3, (uint64_t)buf);
      v11 = v62 >= 0 ? buf : *(_BYTE **)buf;
      v12 = *(unsigned __int8 *)(a1 + 161);
      *(_QWORD *)__p = 68289538;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2082;
      *(_QWORD *)&__p[20] = v11;
      v64 = 1026;
      v65 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updated kCTRegistrationInHomeCountry from\", \"notification\":%{public, location:escape_only}s, \"fInHomeCountry\":%{public}hhd}", __p, 0x22u);
      if (v62 < 0)
        operator delete(*(void **)buf);
    }
    sub_10059F318((_BYTE *)a1);
    sub_10011A5A8(theArray);
  }
  if (CFEqual(kCTIndicatorRadioTransmitNotification, a3))
  {
    LOBYTE(v57) = 0;
    sub_1001C1D6C((int)buf, a4);
    if ((sub_1001E48E4((uint64_t)buf, kCTRadioTransmitDCHStatus, (BOOL *)&v57) & 1) != 0)
    {
      if (!(_BYTE)v57)
      {
        *(_DWORD *)(a1 + 136) = 0;
        goto LABEL_40;
      }
      v13 = 1;
    }
    else
    {
      v13 = -1;
    }
    *(_DWORD *)(a1 + 136) = v13;
LABEL_40:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v15 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)__p = 67109120;
      *(_DWORD *)&__p[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CTService: cell transmit status is %d", __p, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v36 = *(_DWORD *)(a1 + 136);
      *(_DWORD *)theArray = 67109120;
      *(_DWORD *)&theArray[4] = v36;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CTService: cell transmit status is %d", theArray);
      v38 = (char *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v37);
      if (v38 != __p)
        free(v38);
    }
    v17 = buf;
LABEL_46:
    sub_10011A5A8(v17);
    return (*(uint64_t (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)a1 + 256))(a1, a3, a4);
  }
  if (CFEqual(kCTConnectionInvalidatedNotification, a3))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CTService: CommCenter server connection invalidated", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      *(_WORD *)buf = 0;
      LODWORD(v55) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CTService: CommCenter server connection invalidated", buf, v55);
      v42 = (char *)v41;
      sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v41);
      if (v42 != __p)
        free(v42);
    }
    *(_BYTE *)(a1 + 160) = 0;
    sub_100962260(a1 + 176);
    sub_10059E3C8(a1, 1);
  }
  else if (CFEqual(kCTDaemonReadyNotification, a3))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CTService: CommCenter server connection ready", __p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      *(_WORD *)buf = 0;
      LODWORD(v55) = 2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CTService: CommCenter server connection ready", buf, v55);
      v44 = (char *)v43;
      sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v43);
      if (v44 != __p)
        free(v44);
    }
    *(_BYTE *)(a1 + 160) = 1;
    sub_1009623F8(a1 + 176);
    sub_10059DD18(a1);
  }
  else if (CFEqual(kCTCellMonitorUpdateNotification, a3))
  {
    *(_QWORD *)theArray = 0;
    if (sub_10003697C(a1, (uint64_t *)theArray))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102146200);
      v20 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        Count = CFArrayGetCount(*(CFArrayRef *)theArray);
        *(_DWORD *)__p = 134217984;
        *(_QWORD *)&__p[4] = Count;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@CellService, ctupdate, list, %lu", __p, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102146200);
        v45 = qword_1022A0048;
        v46 = CFArrayGetCount(*(CFArrayRef *)theArray);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v46;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v45, 0, "@CellService, ctupdate, list, %lu", buf);
        v48 = (char *)v47;
        sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v47);
        if (v48 != __p)
          free(v48);
      }
      *(_QWORD *)__p = CFSTR("kCellRefreshNotification");
      *(_QWORD *)buf = *(_QWORD *)theArray;
      v22 = CFDictionaryCreate(0, (const void **)__p, (const void **)buf, 1, &kCFCopyStringDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      v23 = v22;
      CFRelease(*(CFTypeRef *)theArray);
      (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 256))(a1, CFSTR("kCellRefreshNotification"), v22);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102146200);
      v28 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "CellService, outcome, emptylist, CTService", __p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102146200);
        *(_WORD *)buf = 0;
        LODWORD(v55) = 2;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellService, outcome, emptylist, CTService", buf, v55);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v29);
        if (v30 != __p)
          free(v30);
      }
    }
  }
  else
  {
    if (CFEqual(kCTRadioModuleUplinkChangedNotification, a3))
    {
      sub_1001C1D6C((int)theArray, a4);
      v57 = -1;
      v56 = -1;
      if (sub_100526324((uint64_t)theArray, kCTRadioModuleUplinkFrequencyValue, &v57)
        && (sub_1000B1180((uint64_t)theArray, kCTRadioModuleUplinkBandwidthValue, &v56) & 1) != 0)
      {
        v24 = (float)v56;
        *(float *)(a1 + 164) = (float)v57;
        *(float *)(a1 + 168) = v24;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102146100);
        v25 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v26 = *(float *)(a1 + 164);
          v27 = *(float *)(a1 + 168);
          *(_DWORD *)__p = 134349312;
          *(double *)&__p[4] = v26;
          *(_WORD *)&__p[12] = 2050;
          *(double *)&__p[14] = v27;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#imd,kCTRadioModuleUplinkChangedNotification,freq(Hz),%{public}f,bw(Hz),%{public}f", __p, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102146100);
          v51 = *(float *)(a1 + 164);
          v52 = *(float *)(a1 + 168);
          *(_DWORD *)buf = 134349312;
          *(double *)&buf[4] = v51;
          v60 = 2050;
          v61 = v52;
          LODWORD(v55) = 22;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 2, "#imd,kCTRadioModuleUplinkChangedNotification,freq(Hz),%{public}f,bw(Hz),%{public}f", buf, v55);
          v54 = (char *)v53;
          sub_100512490("Generic", 1, 0, 2, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v53);
          if (v54 != __p)
            free(v54);
        }
        sub_10059E620(a1, *(float *)(a1 + 164), *(float *)(a1 + 168));
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102146100);
        v31 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#imd,#cterror,couldn't get kCTRadioModuleUplinkChangedNotification values", __p, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_102146100);
          *(_WORD *)buf = 0;
          LODWORD(v55) = 2;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0028, 16, "#imd,#cterror,couldn't get kCTRadioModuleUplinkChangedNotification values", buf, v55);
          v50 = (char *)v49;
          sub_100512490("Generic", 1, 0, 0, "void CLTelephonyService::ctServerConnectionCallback(CTServerConnectionRef, CFStringRef, CFDictionaryRef)", "%s\n", v49);
          if (v50 != __p)
            free(v50);
        }
      }
      v17 = theArray;
      goto LABEL_46;
    }
    if (CFEqual(kCTCellularTransmitStateNotification, a3))
      sub_10059E898(a1, a4);
  }
  return (*(uint64_t (**)(uint64_t, const __CFString *, const __CFDictionary *))(*(_QWORD *)a1 + 256))(a1, a3, a4);
}

void sub_10018BDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

const void **sub_10018BDE4(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v6;
  unsigned int v7;

  sub_10018BED4(&v7, a2);
  v6 = a3;
  if (a3)
    CFRetain(a3);
  sub_10018C130(a1, &v7, &v6, 0);
  return sub_1001358BC(&v6);
}

void sub_10018BE48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1001358BC(&a9);
  _Unwind_Resume(a1);
}

const void **sub_10018BE5C(uint64_t a1, uint64_t a2, const void *a3)
{
  const void *v6;
  unsigned int v7;

  sub_10018BED4(&v7, a2);
  v6 = a3;
  if (a3)
    CFRetain(a3);
  sub_10018C130(a1, &v7, &v6, 1);
  return sub_1001358BC(&v6);
}

void sub_10018BEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1001358BC(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_10018BED4(_DWORD *a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  int v5;
  _QWORD v7[6];

  if (qword_102301D18 != -1)
    dispatch_once(&qword_102301D18, &stru_102146120);
  v4 = (os_unfair_lock_s *)qword_102301D20;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10018BF88;
  v7[3] = &unk_102146140;
  v7[4] = qword_102301D20;
  v7[5] = a2;
  os_unfair_lock_lock((os_unfair_lock_t)qword_102301D20);
  v5 = sub_10018BF88((uint64_t)v7);
  os_unfair_lock_unlock(v4);
  *a1 = v5;
  return a1;
}

uint64_t sub_10018BF88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  CFComparisonResult v6;
  uint64_t *v7;
  uint64_t result;
  _DWORD *v9;
  int v10;
  CFStringRef *v11;
  CFStringRef *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _DWORD *v17;

  v2 = *(_QWORD *)(a1 + 32);
  v4 = (void **)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v5 = v2 + 16;
    do
    {
      v6 = CFStringCompare(*(CFStringRef *)(v3 + 32), *(CFStringRef *)(a1 + 40), 0);
      v7 = (uint64_t *)(v3 + 8);
      if (v6 != kCFCompareLessThan)
      {
        v7 = (uint64_t *)v3;
        v5 = v3;
      }
      v3 = *v7;
    }
    while (*v7);
    if ((void **)v5 != v4
      && CFStringCompare(*(CFStringRef *)(a1 + 40), *(CFStringRef *)(v5 + 32), 0) != kCFCompareLessThan)
    {
      return *(unsigned int *)(v5 + 40);
    }
    v9 = (_DWORD *)(v2 + 4);
    v10 = *(_DWORD *)(v2 + 4);
    v11 = *(CFStringRef **)(v2 + 16);
    if (v11)
    {
      while (1)
      {
        while (1)
        {
          v12 = v11;
          if (CFStringCompare(*(CFStringRef *)(a1 + 40), v11[4], 0) != kCFCompareLessThan)
            break;
          v11 = (CFStringRef *)*v12;
          v4 = (void **)v12;
          if (!*v12)
          {
            v4 = (void **)v12;
            goto LABEL_18;
          }
        }
        if (CFStringCompare(v12[4], *(CFStringRef *)(a1 + 40), 0) != kCFCompareLessThan)
          break;
        v4 = (void **)(v12 + 1);
        v11 = (CFStringRef *)v12[1];
        if (!v11)
          goto LABEL_18;
      }
      v13 = *v4;
      if (*v4)
        goto LABEL_21;
      goto LABEL_18;
    }
  }
  else
  {
    v9 = (_DWORD *)(v2 + 4);
    v10 = *(_DWORD *)(v2 + 4);
  }
  v12 = (CFStringRef *)(v2 + 16);
LABEL_18:
  v13 = operator new(0x30uLL);
  v13[4] = *(_QWORD *)(a1 + 40);
  *((_DWORD *)v13 + 10) = 0;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = v12;
  *v4 = v13;
  v14 = **(_QWORD **)(v2 + 8);
  v15 = v13;
  if (v14)
  {
    *(_QWORD *)(v2 + 8) = v14;
    v15 = (uint64_t *)*v4;
  }
  sub_10025F800(*(uint64_t **)(v2 + 16), v15);
  ++*(_QWORD *)(v2 + 24);
LABEL_21:
  *((_DWORD *)v13 + 10) = v10;
  v16 = *(uint64_t **)(a1 + 40);
  v17 = v9;
  sub_100041CE0((uint64_t **)(v2 + 32), v9, (uint64_t)&unk_101B9EB60, &v17)[5] = v16;
  result = *(unsigned int *)(v2 + 4);
  *(_DWORD *)(v2 + 4) = result + 1;
  return result;
}

void sub_10018C130(uint64_t a1, unsigned int *a2, const void **a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = sub_1001CFE7C(a2);
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = (std::__shared_weak_count *)v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = sub_1001CFE7C(a2);
    v13 = *(_QWORD *)(a1 + 64);
    if (!v13)
      goto LABEL_18;
    v14 = (uint64_t *)(a1 + 64);
    do
    {
      v15 = *(_DWORD *)(v13 + 32);
      v16 = v15 < v12;
      if (v15 >= v12)
        v17 = (uint64_t *)v13;
      else
        v17 = (uint64_t *)(v13 + 8);
      if (!v16)
        v14 = (uint64_t *)v13;
      v13 = *v17;
    }
    while (*v17);
    if (v14 == (uint64_t *)(a1 + 64) || v12 < *((_DWORD *)v14 + 8))
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1005A9630(a1 + 56, (uint64_t)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1005A97E0(a3, &buf);
      sub_1002B7674((uint64_t)(v14 + 8), (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C(v14 + 8);
    }
    if (v14[7])
      sub_10018C7B8();
    os_activity_scope_leave(&state);
  }
}

void sub_10018C760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10018C7B8()
{
  operator new();
}

void sub_10018C854()
{
  operator delete();
}

void sub_10018C87C(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  NSObject *v9;
  void *p_p;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  void **v27;
  const char *v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33[2];
  _BYTE buf[18];
  __int16 v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  void *__p;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  sub_10022564C(a1 + 168);
  if (a2[2])
  {
    v6 = sub_1000CB0B0(a1);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)a3 = a3 + 8;
    v33[0] = 0;
    v33[1] = 0;
    v32 = (uint64_t *)v33;
    v7 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      do
      {
        if (sub_10018FDEC((double *)v7 + 5))
        {
          if (sub_10018D154(a1, (double *)v7 + 5, (uint64_t *)(a1 + 56)))
          {
            *(_DWORD *)buf = 0;
            __p = buf;
            v8 = sub_100136FD4(&v32, (int *)buf, (uint64_t)&unk_101B9EB60, (unsigned int **)&__p);
            ++*((_DWORD *)v8 + 8);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10215F1D0);
            v9 = qword_1022A0048;
            if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
            {
              sub_10018FE90(v7 + 5, (std::string *)&__p);
              p_p = &__p;
              if ((v43 & 0x80000000) != 0)
                p_p = __p;
              *(_DWORD *)buf = 136380675;
              *(_QWORD *)&buf[4] = p_p;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid %{private}s is filtered out", buf, 0xCu);
              if (SBYTE3(v43) < 0)
                operator delete(__p);
            }
            v6 = sub_1001BFF7C(115, 2);
            if ((_DWORD)v6)
            {
              bzero(&__p, 0x65CuLL);
              if (qword_1022A0040 != -1)
                dispatch_once(&qword_1022A0040, &stru_10215F1D0);
              v11 = qword_1022A0048;
              sub_10018FE90(v7 + 5, (std::string *)buf);
              if ((v36 & 0x80000000) == 0)
                v12 = buf;
              else
                v12 = *(_BYTE **)buf;
              v37 = 136380675;
              v38 = v12;
              LODWORD(v30) = 12;
              _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v11, 0, "MovingApDetector, centroid %{private}s is filtered out", &v37, v30);
              v14 = v13;
              if (SBYTE3(v36) < 0)
                operator delete(*(void **)buf);
              v6 = sub_100512490("Generic", 1, 0, 2, "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(const std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v14);
              if (v14 != (char *)&__p)
                free(v14);
            }
          }
          else
          {
            *(_DWORD *)buf = 1;
            __p = buf;
            v15 = sub_100136FD4(&v32, (int *)buf, (uint64_t)&unk_101B9EB60, (unsigned int **)&__p);
            ++*((_DWORD *)v15 + 8);
            v6 = (uint64_t)sub_100190354((uint64_t **)a3, v7 + 4, v7 + 4, v7 + 5);
          }
        }
        else
        {
          *(_DWORD *)buf = 3;
          __p = buf;
          v6 = (uint64_t)sub_100136FD4(&v32, (int *)buf, (uint64_t)&unk_101B9EB60, (unsigned int **)&__p);
          ++*(_DWORD *)(v6 + 32);
        }
        v16 = (_QWORD *)v7[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v7[2];
            v18 = *v17 == (_QWORD)v7;
            v7 = v17;
          }
          while (!v18);
        }
        v7 = v17;
      }
      while (v17 != a2 + 1);
    }
    sub_100191770(v6, a2[2], &v32, (uint64_t *)(a1 + 56));
    sub_10008EA5C(a1, (uint64_t *)(a1 + 56));
    *(_DWORD *)buf = 0;
    __p = buf;
    v19 = *((_DWORD *)sub_100136FD4(&v32, (int *)buf, (uint64_t)&unk_101B9EB60, (unsigned int **)&__p) + 8);
    if (v19 >= 1)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v20 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v21 = a2[2];
        v22 = *(_QWORD *)(a3 + 16);
        LODWORD(__p) = 67109632;
        HIDWORD(__p) = v19;
        v40 = 2048;
        v41 = v21;
        v42 = 2048;
        v43 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "MovingApDetector, %d out of %zu centroids got filtered out, %zu remaining", (uint8_t *)&__p, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F1D0);
        v24 = a2[2];
        v25 = *(_QWORD *)(a3 + 16);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v19;
        *(_WORD *)&buf[8] = 2048;
        *(_QWORD *)&buf[10] = v24;
        v35 = 2048;
        v36 = v25;
        LODWORD(v30) = 28;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0048, 0, "MovingApDetector, %d out of %zu centroids got filtered out, %zu remaining", buf, v30, v31);
        v27 = (void **)v26;
        sub_100512490("Generic", 1, 0, 2, "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(const std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v26);
        if (v27 != &__p)
          free(v27);
      }
    }
    sub_100008848((uint64_t)&v32, v33[0]);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v23 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "MovingApDetector, #warning, no centroids for cross-check", (uint8_t *)&__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      *(_WORD *)buf = 0;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0048, 0, "MovingApDetector, #warning, no centroids for cross-check", buf, 2);
      v29 = (void **)v28;
      sub_100512490("Generic", 1, 0, 2, "std::map<CLMacAddress, CLWifiAPLocation> CLMovingApDetector::crossCheckAndFilterOutBadServerSideCentroids(const std::map<CLMacAddress, CLWifiAPLocation> &)", "%s\n", v28);
      if (v29 != &__p)
        free(v29);
    }
    sub_1005728AC(a3, (uint64_t)a2);
  }
}

void sub_10018CF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  uint64_t v17;

  sub_100008848((uint64_t)&a16, a17);
  sub_100008848(v17, *(_QWORD **)(v17 + 8));
  _Unwind_Resume(a1);
}

BOOL sub_10018CF88(uint64_t a1, double *a2, uint64_t *a3)
{
  _BOOL8 result;
  NSObject *v7;
  _BOOL4 v8;
  char *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  result = sub_10018D390(*(_QWORD *)(a1 + 24));
  if (result)
  {
    if (*a3)
    {
      return sub_10018D558(a1, a2, a3) == 0;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v7 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", buf, 2u);
      }
      v8 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F1D0);
        v10[0] = 0;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "MovingApDetector, centroid database is null!", v10, 2);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLMovingApDetector::isBadCentroidFromGpsCellCrossCheck(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10018D154(uint64_t a1, double *a2, uint64_t *a3)
{
  _BOOL8 v6;

  v6 = sub_10018D390(*(_QWORD *)(a1 + 24));
  if (v6)
    return sub_10018CF88(a1, a2, a3);
  else
    return sub_100931BA4(v6, (uint64_t *)a2, a3);
}

void sub_10018D1B0(double *a1, uint64_t *a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v10;
  double v11;
  double v12;
  _BYTE v15[156];

  sub_10018FFD0(a3, (uint64_t)v15);
  if (sub_10018D33C(*a2))
  {
    v5 = sub_10018D474(*a2, (uint64_t)v15);
    v6 = *a1;
    v7 = a1[1];
    if (*a1 > v5 || v6 < 0.0)
      v6 = v5;
    if (v7 >= v5 && v7 >= 0.0)
      v5 = a1[1];
    *a1 = v6;
    a1[1] = v5;
  }
  if (sub_10018D26C(*a2))
  {
    v10 = sub_101311DBC(*a2, (uint64_t)v15);
    v11 = a1[2];
    v12 = a1[3];
    if (v11 > v10 || v11 < 0.0)
      v11 = v10;
    if (v12 >= v10 && v12 >= 0.0)
      v10 = a1[3];
    a1[2] = v11;
    a1[3] = v10;
  }
}

BOOL sub_10018D26C(uint64_t a1)
{
  std::mutex *v2;
  _BOOL8 v3;

  v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v3 = sub_10018D2C0((_QWORD *)a1);
  std::mutex::unlock(v2);
  return v3;
}

void sub_10018D2AC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10018D2C0(_QWORD *a1)
{
  return a1[32]
      && CFAbsoluteTimeGetCurrent()
       - *(double *)(*(_QWORD *)(a1[28] + 8 * (a1[31] / 0x1AuLL)) + 156 * (a1[31] % 0x1AuLL) + 76) < 900.0;
}

BOOL sub_10018D33C(uint64_t a1)
{
  std::mutex *v2;
  _BOOL8 v3;

  v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v3 = sub_10018D3F8((_QWORD *)a1);
  std::mutex::unlock(v2);
  return v3;
}

void sub_10018D37C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10018D390(uint64_t a1)
{
  std::mutex *v2;
  _BOOL8 v3;

  v2 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v3 = sub_10018D3F8((_QWORD *)a1) || sub_10018D2C0((_QWORD *)a1);
  std::mutex::unlock(v2);
  return v3;
}

void sub_10018D3E4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10018D3F8(_QWORD *a1)
{
  return a1[20]
      && CFAbsoluteTimeGetCurrent()
       - *(double *)(*(_QWORD *)(a1[16] + 8 * (a1[19] / 0x1AuLL)) + 156 * (a1[19] % 0x1AuLL) + 76) < 900.0;
}

double sub_10018D474(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  double v5;

  v4 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v5 = sub_10018D4E0((double *)a1, a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10018D4CC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sub_10018D4E0(double *a1, uint64_t a2)
{
  double result;

  if (!sub_10018D3F8(a1))
    return NAN;
  sub_10011E258(a1, *(_QWORD *)(*((_QWORD *)a1 + 16) + 8 * (*((_QWORD *)a1 + 19) / 0x1AuLL)) + 156 * (*((_QWORD *)a1 + 19) % 0x1AuLL), a2);
  return result;
}

uint64_t sub_10018D558(uint64_t a1, double *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFAbsoluteTime Current;

  Current = CFAbsoluteTimeGetCurrent();
  v6 = sub_10018DA34(a1, a2, (uint64_t *)&Current);
  v7 = v6;
  if ((_DWORD)v6 == 1)
  {
    sub_10018D5DC(a1, (uint64_t *)a2, a3);
  }
  else if (!(_DWORD)v6)
  {
    sub_10093127C(a1, (uint64_t)a2, a3);
  }
  return v7;
}

void sub_10018D5DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  NSObject *v6;
  std::string *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  std::string *p_buf;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string buf;
  int v16;
  std::string *v17;
  std::string __p[8];
  char v19;

  if (*a3)
  {
    v5 = a1 + 168;
    sub_10018D980(a1 + 168, (uint64_t)a2);
    v14 = *a2;
    sub_1000CBC6C(*a3, __p);
    if (v19)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        sub_10018FE90(a2, __p);
        v7 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? __p
           : (std::string *)__p[0].__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid %{private}s was previously detected as bad. Mark it as valid again.", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F1D0);
        v10 = qword_1022A0048;
        sub_10018FE90(a2, &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        v16 = 136380675;
        v17 = p_buf;
        v12 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 0, "MovingApDetector, centroid %{private}s was previously detected as bad. Mark it as valid again.", &v16, 12);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::handleDetectedGoodWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v12);
        if (v12 != __p)
          free(v12);
      }
      sub_1006F9A70(*a3);
      sub_100930F98(v8, a3);
      sub_101325FDC(v5, &v14);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      v13 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 17, "MovingApDetector, centroid database is null!", &buf, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLMovingApDetector::handleDetectedGoodWifiApCentroid(const CLWifiAPLocation &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", (const char *)v13);
      if (v13 != __p)
        free(v13);
    }
  }
}

void sub_10018D980(uint64_t a1, uint64_t a2)
{
  double *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  ++*(_DWORD *)(a1 + 4);
  v3 = (double *)(a1 + 160);
  v4 = *(std::__shared_weak_count **)(a1 + 104);
  v9[0] = *(_QWORD *)(a1 + 96);
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  sub_10018D1B0(v3, v9, a2);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_10018DA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10018DA34(uint64_t a1, double *a2, uint64_t *a3)
{
  _BOOL4 v6;
  _BOOL4 v7;
  NSObject *v8;
  std::string *v9;
  uint64_t v11;
  std::string *p_p;
  char *v13;
  std::string __p;
  _BYTE v15[44];
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  std::string *v19;
  __int16 v20;
  _BOOL4 v21;
  __int16 v22;
  _BOOL4 v23;
  std::string v24;

  if (!sub_10018FDEC(a2))
    return 3;
  if (!sub_10018D390(*(_QWORD *)(a1 + 24)))
    return 2;
  sub_10018FFD0((uint64_t)a2, (uint64_t)v15);
  v17 = *a3;
  v16 = 0;
  v6 = sub_10018DCF8(*(_QWORD *)(a1 + 24), (uint64_t)v15);
  v7 = sub_10018DCF8(*(_QWORD *)(a1 + 40), (uint64_t)v15);
  sub_10018FE54((_DWORD *)(a1 + 168), v6, v7);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F1D0);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    sub_10018FE90((uint64_t *)a2, &v24);
    v9 = (v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v24
       : (std::string *)v24.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136381187;
    v19 = v9;
    v20 = 1024;
    v21 = v7;
    v22 = 1024;
    v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "MovingApDetector, centroid: %{private}s, Rejected by Cell Only IM: %d, Rejected by GPS IM: %d", buf, 0x18u);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    v11 = qword_1022A0048;
    sub_10018FE90((uint64_t *)a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(v24.__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(v24.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v24.__r_.__value_.__r.__words[1] + 6) = v7;
    WORD1(v24.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(v24.__r_.__value_.__r.__words[2]) = v6;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 0, "MovingApDetector, centroid: %{private}s, Rejected by Cell Only IM: %d, Rejected by GPS IM: %d", &v24, 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "CrossCheckOutcome CLMovingApDetector::crossCheckCentroid(const CLWifiAPLocation &, const CFAbsoluteTime &)", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  return !v6;
}

BOOL sub_10018DCF8(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  _BOOL8 v5;

  v4 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  v5 = sub_10018DD5C(a1, a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_10018DD48(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10018DD5C(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  unint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  int v12;
  _BOOL8 result;
  NSObject *v14;
  int v15;
  int v16;
  char *v17;
  int v18;
  NSObject *v19;
  int v20;
  int v21;
  char *v22;
  unint64_t v23;
  int v24;
  NSObject *v25;
  int v26;
  double v27;
  NSObject *v28;
  int v29;
  int v30;
  char *v31;
  double v32;
  NSObject *v33;
  double v34;
  double v35;
  NSObject *v36;
  int v37;
  int v38;
  NSObject *v39;
  double v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  int v45;
  int v46;
  double v47;
  double v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  int v54;
  _BYTE v55[24];
  uint8_t buf[4];
  _BYTE v57[24];

  v3 = (_BYTE *)(a1 + 264);
  *(_WORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 266) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 287) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 311) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  switch(*(_DWORD *)(a2 + 96))
  {
    case 1:
    case 3:
    case 9:
      if (*(_QWORD *)(a1 + 208))
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * (*(_QWORD *)(a1 + 200) / 0x1AuLL))
           + 156 * (*(_QWORD *)(a1 + 200) % 0x1AuLL);
        if (*(double *)(a2 + 76) - *(double *)(v5 + 76) < 900.0)
          *(_BYTE *)(a1 + 289) = *(_DWORD *)(v5 + 84) > 0x49u;
      }
      sub_10018EDC0((uint64_t)v51, (_QWORD *)(a1 + 168));
      sub_10018EE8C((double *)a1, a2, v51, a1 + 288);
      sub_10047F6F4(v51);
      sub_10018EDC0((uint64_t)v50, (_QWORD *)(a1 + 216));
      sub_10018EE8C((double *)a1, a2, v50, (uint64_t)v3);
      sub_10047F6F4(v50);
      *(_DWORD *)(a1 + 336) = 1;
      sub_10018FC2C((__int128 *)a2, (_QWORD *)(a1 + 120));
      goto LABEL_6;
    case 4:
      *(_BYTE *)(a1 + 289) = *(_DWORD *)(a2 + 84) > 0x49u;
      sub_10018EDC0((uint64_t)v53, (_QWORD *)(a1 + 216));
      sub_10018EE8C((double *)a1, a2, v53, (uint64_t)v3);
      sub_10047F6F4(v53);
      sub_10018EDC0((uint64_t)v52, (_QWORD *)(a1 + 120));
      sub_10018EE8C((double *)a1, a2, v52, a1 + 312);
      sub_10047F6F4(v52);
      v18 = sub_10018FD50(a1 + 312, v3);
      *(_DWORD *)(a1 + 336) = v18;
      if (v18 == 5)
        goto LABEL_6;
      sub_10018FC2C((__int128 *)a2, (_QWORD *)(a1 + 168));
      if ((*(_DWORD *)(a1 + 336) - 1) > 1 || *(_DWORD *)(a2 + 128) > 0x31u)
        goto LABEL_6;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v19 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v20 = *(_DWORD *)(a2 + 128);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v57 = v20;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = 50;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "locationType,integrityPrior,%d,integrityNew,%d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_50;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v21 = *(_DWORD *)(a2 + 128);
      v54 = 67109376;
      *(_DWORD *)v55 = v21;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = 50;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "locationType,integrityPrior,%d,integrityNew,%d", &v54, 14);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v22);
      break;
    case 6:
      if (*(_QWORD *)(a1 + 208))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * (*(_QWORD *)(a1 + 200) / 0x1AuLL))
            + 156 * (*(_QWORD *)(a1 + 200) % 0x1AuLL);
        if (*(double *)(a2 + 76) - *(double *)(v23 + 76) < 900.0)
          *(_BYTE *)(a1 + 289) = *(_DWORD *)(v23 + 84) > 0x49u;
      }
      sub_10018EDC0((uint64_t)v49, (_QWORD *)(a1 + 168));
      sub_10018EE8C((double *)a1, a2, v49, a1 + 288);
      sub_10047F6F4(v49);
      sub_10018EDC0((uint64_t)v48, (_QWORD *)(a1 + 120));
      sub_10018EE8C((double *)a1, a2, v48, a1 + 312);
      sub_10047F6F4(v48);
      v24 = sub_10018FD50(a1 + 312, (_BYTE *)(a1 + 288));
      *(_DWORD *)(a1 + 336) = v24;
      if (v24 == 5)
        goto LABEL_6;
      sub_10018FC2C((__int128 *)a2, (_QWORD *)(a1 + 216));
      if ((*(_DWORD *)(a1 + 336) - 1) > 1 || *(_DWORD *)(a2 + 128) > 0x31u)
        goto LABEL_6;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v25 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_DWORD *)(a2 + 128);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v57 = v26;
        *(_WORD *)&v57[4] = 1024;
        *(_DWORD *)&v57[6] = 50;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "locationType,integrityPrior,%d,integrityNew,%d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_50;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v46 = *(_DWORD *)(a2 + 128);
      v54 = 67109376;
      *(_DWORD *)v55 = v46;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)&v55[6] = 50;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "locationType,integrityPrior,%d,integrityNew,%d", &v54, 14);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v22);
      break;
    default:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v14 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v57 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "location type,%d,not supported", buf, 8u);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v16 = *(_DWORD *)(a2 + 96);
      v54 = 67109120;
      *(_DWORD *)v55 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "location type,%d,not supported", &v54);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v17);
      goto LABEL_69;
  }
  if (v22 != (char *)buf)
    free(v22);
LABEL_50:
  *(_DWORD *)(a2 + 128) = 50;
LABEL_6:
  if ((*(_DWORD *)(a1 + 336) & 0xFFFFFFFE) != 4)
    return 0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021AE988);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 4);
    v9 = *(_QWORD *)(a2 + 12);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v57 = v7;
    *(_WORD *)&v57[4] = 2048;
    *(_QWORD *)&v57[6] = v8;
    *(_WORD *)&v57[14] = 2048;
    *(_QWORD *)&v57[16] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE988);
    v41 = *(_DWORD *)(a2 + 96);
    v42 = *(_QWORD *)(a2 + 4);
    v43 = *(_QWORD *)(a2 + 12);
    v54 = 67109632;
    *(_DWORD *)v55 = v41;
    *(_WORD *)&v55[4] = 2048;
    *(_QWORD *)&v55[6] = v42;
    *(_WORD *)&v55[14] = 2048;
    *(_QWORD *)&v55[16] = v43;
    LODWORD(v47) = 28;
    v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf", &v54, v47, v48[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v10 = *(double *)(a1 + 328);
    if (v10 > *(double *)(a1 + 320) + *(double *)(a1 + 320))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v12 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v57 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Location rejected by IM,Reason,disagrees with GPS,location type,%d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v45 = *(_DWORD *)(a2 + 96);
      v54 = 67109120;
      *(_DWORD *)v55 = v45;
      v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Location rejected by IM,Reason,disagrees with GPS,location type,%d", &v54);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v31);
LABEL_99:
      if (v31 != (char *)buf)
        free(v31);
      return 1;
    }
    v32 = fabs(v10) / 3.5;
    *(double *)(a2 + 20) = v32 + *(double *)(a2 + 20);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE988);
    v33 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v34 = *(double *)(a2 + 20);
      *(_DWORD *)buf = 134218240;
      *(double *)v57 = v34 - v32;
      *(_WORD *)&v57[8] = 2048;
      *(double *)&v57[10] = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "huncBump,fromHunc,%.1lf,toHunc,%.1lf", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 == -1)
        goto LABEL_68;
      goto LABEL_106;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 288) || !*(_BYTE *)(a1 + 289))
    {
      if (*(_DWORD *)(a2 + 96) == 4 && *v3 && !*(_BYTE *)(a1 + 289) && *(double *)(a1 + 280) > 5000.0)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AE988);
        v36 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v37 = *(_DWORD *)(a2 + 96);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v57 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021AE988);
        v38 = *(_DWORD *)(a2 + 96);
        v54 = 67109120;
        *(_DWORD *)v55 = v38;
        v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d", &v54);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v31);
        goto LABEL_99;
      }
      return 0;
    }
    v27 = *(double *)(a1 + 304);
    if (v27 > *(double *)(a1 + 296) + *(double *)(a1 + 296))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v28 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v29 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v57 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v30 = *(_DWORD *)(a2 + 96);
      v54 = 67109120;
      *(_DWORD *)v55 = v30;
      v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d", &v54);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v31);
      goto LABEL_99;
    }
    v32 = fabs(v27) / 3.5;
    *(double *)(a2 + 20) = v32 + *(double *)(a2 + 20);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE988);
    v39 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v40 = *(double *)(a2 + 20);
      *(_DWORD *)buf = 134218240;
      *(double *)v57 = v40 - v32;
      *(_WORD *)&v57[8] = 2048;
      *(double *)&v57[10] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "huncBump,fromHunc,%.1lf,toHunc,%.1lf", buf, 0x16u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 == -1)
      {
LABEL_68:
        v35 = *(double *)(a2 + 20);
        v54 = 134218240;
        *(double *)v55 = v35 - v32;
        *(_WORD *)&v55[8] = 2048;
        *(double *)&v55[10] = v35;
        LODWORD(v47) = 22;
        v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "huncBump,fromHunc,%.1lf,toHunc,%.1lf", COERCE_DOUBLE(&v54), v47);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLIntegrityMonitor::updateIMImpl(CLDaemonLocation &)", "%s\n", v17);
LABEL_69:
        if (v17 != (char *)buf)
          free(v17);
        return 0;
      }
LABEL_106:
      dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      goto LABEL_68;
    }
  }
  return result;
}

void sub_10018ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_10047F6F4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10018EDC0(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _OWORD *v8;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  if (a2[2] == v4)
  {
    v5 = 0;
    v8 = 0;
    v7 = (_QWORD *)(v4 + ((((a2[5] + v3) * (unsigned __int128)0x4EC4EC4EC4EC4EC5uLL) >> 64) & 0x7FFFFFFFFFFFFFF8));
  }
  else
  {
    v5 = (_OWORD *)(*(_QWORD *)(v4 + 8 * (v3 / 0x1A)) + 156 * (v3 % 0x1A));
    v6 = a2[5] + v3;
    v7 = (_QWORD *)(v4 + 8 * (v6 / 0x1A));
    v8 = (_OWORD *)(*v7 + 156 * (v6 % 0x1A));
  }
  sub_10055D000((_QWORD *)a1, (_QWORD *)(v4 + 8 * (v3 / 0x1A)), v5, v7, v8);
  return a1;
}

void sub_10018EE78(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

void sub_10018EE8C(double *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;

  if (a3[5])
  {
    v4 = *(_QWORD *)(a3[1] + 8 * (a3[4] / 0x1AuLL)) + 156 * (a3[4] % 0x1AuLL);
    if (*(double *)(a2 + 76) - *(double *)(v4 + 76) < 900.0)
    {
      *(_BYTE *)a4 = 1;
      sub_10018F4B8(a1, a2, v4, (double *)(a4 + 8), (BOOL *)(a4 + 2), (double *)(a4 + 16));
    }
  }
}

void sub_10018EF04(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0x1A)
    v6 = v5 / 0x1A + 1;
  else
    v6 = v5 / 0x1A;
  v7 = a1[4];
  if (v6 >= v7 / 0x1A)
    v8 = v7 / 0x1A;
  else
    v8 = v6;
  if (v6 <= v7 / 0x1A)
  {
    for (a1[4] = v7 - 26 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFD8uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFD8uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 25;
          else
            v64 = 26;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 26 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -26 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFD8uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_10018F444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10018F4B8(double *a1, uint64_t a2, uint64_t a3, double *a4, BOOL *a5, double *a6)
{
  double v12;
  double v13;
  double v14;
  double v15;
  NSObject *v16;
  BOOL v17;
  double v18;
  double v19;
  char *v20;
  double v21;
  int v22;
  double v23;
  __int16 v24;
  unint64_t v25;
  uint8_t buf[4];
  double v27;
  __int16 v28;
  unint64_t v29;

  sub_10011E258(a1, a2, a3);
  v13 = v12;
  v14 = *(double *)(a2 + 76);
  v15 = v14 - *(double *)(a3 + 76);
  if (v15 >= -2.0)
  {
    v17 = v15 >= 0.0 || v15 <= -2.0;
    v18 = fabs(v15);
    if (v17)
      v18 = v14 - *(double *)(a3 + 76);
    v19 = sub_10018F718(a1, v18, v14) + (*(double *)(a3 + 20) + *(double *)(a2 + 20)) * 3.0;
    *a4 = v19;
    *a6 = v13 - v19;
    *a5 = v13 < *a4;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021AE988);
    v16 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v27 = v15;
      v28 = 2048;
      v29 = 0xC000000000000000;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning deltaTime = %0.3f, but most negative allowed is %0.3lf, resetting Integrity Monitor", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021AE988);
      v22 = 134218240;
      v23 = v15;
      v24 = 2048;
      v25 = 0xC000000000000000;
      LODWORD(v21) = 22;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning deltaTime = %0.3f, but most negative allowed is %0.3lf, resetting Integrity Monitor", COERCE_DOUBLE(&v22), v21);
      sub_100512490("Generic", 1, 0, 2, "void CLIntegrityMonitor::crossCheck(const CLDaemonLocation &, const CLDaemonLocation &, double &, BOOL &, double &)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
    sub_101311988((uint64_t)a1);
  }
}

double sub_10018F718(_QWORD *a1, double a2, double a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  double v15[2];

  v15[0] = 0.0;
  v13 = 0u;
  v14 = 0u;
  v4 = a1[14];
  if (!v4)
    goto LABEL_5;
  v5 = a1 + 9;
  v6 = a1[13];
  v7 = a1[10];
  v8 = a3
     - *(double *)(*(_QWORD *)(v7 + (((unint64_t)(v4 + v6 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (v4 + v6 - 1));
  if (v8 < a2)
  {
    sub_10018F8C4(a3, -1.0, (uint64_t)a1, (double *)&v13, (double *)&v14, (double *)&v13 + 1, (double *)&v14 + 1, v15, v4, v5);
    v9 = v8 + a2 - v8;
    if (v9 != 0.0)
    {
      v10 = ((a2 - v8) * 40.0
           + (*(double *)&v14 * 3.0
            + *(double *)&v13 * 0.0
            + *((double *)&v13 + 1) * 5.0
            + *((double *)&v14 + 1) * 40.0
            + v15[0] * 40.0)
           / 100.0
           * v8)
          / v9;
      return v10 * a2;
    }
LABEL_5:
    v10 = 40.0;
    return v10 * a2;
  }
  v11 = 0;
  while (a3
        - *(double *)(*(_QWORD *)(v7 + (((unint64_t)(v6 + v11) >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * (v6 + v11)) < a2)
  {
    if (v4 == ++v11)
    {
      LODWORD(v11) = 0;
      break;
    }
  }
  sub_10018F8C4(a3, a2, (uint64_t)a1, (double *)&v13, (double *)&v14, (double *)&v13 + 1, (double *)&v14 + 1, v15, v11, v5);
  v10 = (*(double *)&v14 * 3.0
       + *(double *)&v13 * 0.0
       + *((double *)&v13 + 1) * 5.0
       + *((double *)&v14 + 1) * 40.0
       + v15[0] * 40.0)
      / 100.0;
  return v10 * a2;
}

double sub_10018F8C4(double result, double a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, double *a8, int a9, _QWORD *a10)
{
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  double v30;

  if (a10[5] < (unint64_t)a9)
    goto LABEL_2;
  if (a9)
  {
    v10 = 0.0;
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    if (result > 0.0)
    {
      v15 = *(_QWORD *)(a10[1] + ((a10[4] >> 5) & 0x7FFFFFFFFFFFFF8));
      v16 = a10[4];
      v17 = result - *(double *)(v15 + 16 * v16);
      if (v17 <= 0.0)
        goto LABEL_2;
      v18 = *(_DWORD *)(v15 + 16 * v16 + 8);
      if (v18 <= 40)
      {
        switch(v18)
        {
          case 1:
          case 2:
          case 10:
          case 11:
            v10 = 0.0;
            v14 = v17 + 0.0;
            goto LABEL_25;
          case 4:
            goto LABEL_22;
          case 5:
            goto LABEL_20;
          case 8:
            v10 = 0.0;
            v11 = v17 + 0.0;
            goto LABEL_25;
          default:
            goto LABEL_24;
        }
      }
      if (v18 == 41)
      {
LABEL_22:
        v10 = v17 + 0.0;
      }
      else
      {
        if (v18 == 52 || v18 == 56)
        {
LABEL_20:
          v10 = 0.0;
          v12 = v17 + 0.0;
          goto LABEL_26;
        }
LABEL_24:
        v10 = 0.0;
        v13 = v17 + 0.0;
      }
LABEL_25:
      v12 = 0.0;
    }
LABEL_26:
    if (a9 >= 2)
    {
      v20 = a10[4];
      v21 = a10[1];
      v22 = a9 - 1;
      do
      {
        v23 = *(_QWORD *)(v21 + (((v20 + 1) >> 5) & 0x7FFFFFFFFFFFFF8));
        v24 = (v20 + 1);
        v25 = *(double *)(*(_QWORD *)(v21 + ((v20 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v20)
            - *(double *)(v23 + 16 * v24);
        if (v25 <= 0.0)
          goto LABEL_2;
        v26 = *(_DWORD *)(v23 + 16 * v24 + 8);
        if (v26 > 40)
        {
          if (v26 == 41)
          {
LABEL_36:
            v10 = v10 + v25;
          }
          else if (v26 == 52 || v26 == 56)
          {
LABEL_35:
            v12 = v12 + v25;
          }
          else
          {
LABEL_38:
            v13 = v13 + v25;
          }
        }
        else
        {
          switch(v26)
          {
            case 1:
            case 2:
            case 10:
            case 11:
              v14 = v14 + v25;
              break;
            case 4:
              goto LABEL_36;
            case 5:
              goto LABEL_35;
            case 8:
              v11 = v11 + v25;
              break;
            default:
              goto LABEL_38;
          }
        }
        ++v20;
      }
      while (--v22);
    }
    if (a2 <= 0.0)
      goto LABEL_52;
    v27 = a10[4];
    v28 = a10[1];
    result = a2
           - (result
            - *(double *)(*(_QWORD *)(v28 + (((unint64_t)(v27 + a9 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * (v27 + a9 - 1)));
    if (result > 0.0)
    {
      v29 = *(_DWORD *)(*(_QWORD *)(v28 + (((unint64_t)(v27 + a9) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * (v27 + a9)
                      + 8);
      if (v29 > 40)
      {
        if (v29 == 41)
        {
LABEL_49:
          v10 = v10 + result;
        }
        else if (v29 == 52 || v29 == 56)
        {
LABEL_48:
          v12 = v12 + result;
        }
        else
        {
LABEL_51:
          v13 = v13 + result;
        }
      }
      else
      {
        switch(v29)
        {
          case 1:
          case 2:
          case 10:
          case 11:
            v14 = v14 + result;
            break;
          case 4:
            goto LABEL_49;
          case 5:
            goto LABEL_48;
          case 8:
            v11 = v11 + result;
            break;
          default:
            goto LABEL_51;
        }
      }
LABEL_52:
      v30 = v13 + v12 + v11 + v10 + v14;
      *a4 = v14 / v30 * 100.0;
      *a5 = v10 / v30 * 100.0;
      *a6 = v11 / v30 * 100.0;
      *a7 = v12 / v30 * 100.0;
      result = v13 / v30 * 100.0;
      *a8 = result;
      return result;
    }
LABEL_2:
    *a8 = 100.0;
    return result;
  }
  v19 = *(_DWORD *)(*(_QWORD *)(a10[1] + ((a10[4] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a10[4] + 8);
  if (v19 > 40)
  {
    if (v19 == 41)
    {
LABEL_16:
      *a5 = 100.0;
      return result;
    }
    if (v19 == 52 || v19 == 56)
    {
LABEL_15:
      *a7 = 100.0;
      return result;
    }
    goto LABEL_2;
  }
  switch(v19)
  {
    case 1:
    case 2:
    case 10:
    case 11:
      *a4 = 100.0;
      break;
    case 4:
      goto LABEL_16;
    case 5:
      goto LABEL_15;
    case 8:
      *a6 = 100.0;
      break;
    default:
      goto LABEL_2;
  }
  return result;
}

void sub_10018FC2C(__int128 *a1, _QWORD *a2)
{
  unint64_t v3;

  sub_10018FC7C((uint64_t)a2, a1);
  v3 = a2[5];
  if (v3 >= 5)
  {
    a2[5] = v3 - 1;
    sub_10047F974(a2, 1);
  }
}

int64x2_t sub_10018FC7C(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_101311ECC((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x1A));
  v7 = *v6 + 156 * (v4 % 0x1A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4056;
  v8 = *a2;
  *(_OWORD *)(v7 - 140) = a2[1];
  *(_OWORD *)(v7 - 156) = v8;
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  *(_OWORD *)(v7 - 76) = a2[5];
  *(_OWORD *)(v7 - 92) = v11;
  *(_OWORD *)(v7 - 108) = v10;
  *(_OWORD *)(v7 - 124) = v9;
  v12 = a2[6];
  v13 = a2[7];
  v14 = a2[8];
  *(_OWORD *)(v7 - 16) = *(__int128 *)((char *)a2 + 140);
  *(_OWORD *)(v7 - 28) = v14;
  *(_OWORD *)(v7 - 44) = v13;
  *(_OWORD *)(v7 - 60) = v12;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_10018FD50(uint64_t a1, _BYTE *a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  double v10;

  v2 = *(unsigned __int8 *)(a1 + 2);
  if (*(_BYTE *)a1)
    v3 = v2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (*a2)
      v4 = a2[2] == 0;
    else
      v4 = 1;
    v5 = v4;
    if (*(_BYTE *)a1)
      v6 = v2 == 0;
    else
      v6 = 0;
    if (v6)
    {
      if (v5)
        return 5;
      else
        return 4;
    }
    else
    {
      if (a2[2])
        v7 = 1;
      else
        v7 = *a2 == 0;
      if (v7)
        v8 = 0;
      else
        v8 = 4;
      if (v5)
        return v8;
      else
        return 3;
    }
  }
  else
  {
    v10 = *(double *)(a1 + 8);
    if (v10 <= 1000.0)
    {
      return 1;
    }
    else if (v10 > 5000.0 || v10 <= 1000.0)
    {
      return 3;
    }
    else
    {
      return 2;
    }
  }
}

BOOL sub_10018FDEC(double *a1)
{
  _BOOL4 v1;
  double v2;
  double v3;

  v1 = 0;
  v2 = a1[1];
  if (v2 <= 90.0 && v2 >= -90.0)
  {
    v3 = a1[2];
    v1 = v3 <= 180.0 && v3 >= -180.0;
  }
  return a1[4] > -1.0 && v1;
}

_DWORD *sub_10018FE54(_DWORD *result, int a2, int a3)
{
  if (a2 == a3)
  {
    ++result[8];
  }
  else if (a2)
  {
    ++result[9];
  }
  else
  {
    ++result[10];
  }
  return result;
}

void sub_10018FE90(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  _BYTE v9[156];
  void *v10[2];
  unsigned __int8 v11;
  uint64_t v12;
  std::string v13;
  std::string v14;

  v12 = *a1;
  sub_1000C2254(&v12, &v13);
  v4 = std::string::append(&v13, ", ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  sub_10018FFD0((uint64_t)a1, (uint64_t)v9);
  sub_100190040((uint64_t)v9, v10);
  if ((v11 & 0x80u) == 0)
    v6 = (const std::string::value_type *)v10;
  else
    v6 = (const std::string::value_type *)v10[0];
  if ((v11 & 0x80u) == 0)
    v7 = v11;
  else
    v7 = (std::string::size_type)v10[1];
  v8 = std::string::append(&v14, v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_10018FF84(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 - 97) < 0)
    operator delete(*v1);
  if (*(char *)(v2 - 41) < 0)
    operator delete(v1[7]);
  if (*(char *)(v2 - 65) < 0)
    operator delete(v1[4]);
  _Unwind_Resume(exception_object);
}

double sub_10018FFD0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_DWORD *)a2 = 0xFFFF;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 44) = _Q0;
  *(_OWORD *)(a2 + 60) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 108) = 0;
  *(_QWORD *)(a2 + 100) = 0;
  *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)(a2 + 96) = 4;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 8);
  *(int8x16_t *)(a2 + 20) = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(_QWORD *)(a2 + 36) = *(_QWORD *)(a1 + 40);
  result = *(double *)(a1 + 64);
  *(double *)(a2 + 76) = result;
  return result;
}

uint64_t sub_100190040@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_100263E50((uint64_t)v12);
  v4 = sub_100263F7C(&v13, (uint64_t)"latlon ", 7);
  v5 = *v4;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 16) = 7;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v4, *(double *)(a1 + 4));
  v6 = sub_100263F7C(&v13, (uint64_t)",", 1);
  v7 = *v6;
  *(uint64_t *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 16) = 7;
  *(_DWORD *)((char *)v6 + *(_QWORD *)(v7 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(v7 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v6, *(double *)(a1 + 12));
  v8 = sub_100263F7C(&v13, (uint64_t)", acc ", 6);
  v9 = *v8;
  *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 16) = 0;
  *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v8, *(double *)(a1 + 20));
  std::stringbuf::str(a2, v14);
  *(_QWORD *)((char *)v12
  v13 = v10;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_1001901C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001901E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD **v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[6];
  _QWORD **v14;
  _QWORD *v15[2];
  uint64_t v16;
  pthread_mutex_t *v17;
  __int16 v18;

  v7 = a1 + 56;
  v6 = *(_QWORD *)(a1 + 56);
  v16 = a1 + 56;
  (*(void (**)(uint64_t))(v6 + 16))(a1 + 56);
  v18 = 256;
  sub_10004702C(*(_QWORD *)(v7 + 32), a2, (uint64_t)&v14);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v8 = v14;
  if (v14 != v15)
  {
    do
    {
      sub_100190404((uint64_t)(v8 + 5), (uint64_t)v13);
      sub_100190354((uint64_t **)a3, v8 + 4, v8 + 4, v13);
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = (_QWORD **)v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD **)v8[2];
          v11 = *v10 == v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
    }
    while (v10 != v15);
  }
  v12 = *(_QWORD *)(a1 + 152);
  if (v12)
    sub_10021E42C(v12, (_QWORD *)a3);
  sub_100008848((uint64_t)&v14, v15[0]);
  if (HIBYTE(v18))
  {
    if ((_BYTE)v18)
      pthread_mutex_unlock(v17);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 24))(v16);
  }
}

void sub_100190318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  uint64_t v22;
  uint64_t v23;

  sub_100008848(v22, *(_QWORD **)(v22 + 8));
  sub_100008848((uint64_t)&a21, a22);
  sub_10187E514(v23 - 72);
  _Unwind_Resume(a1);
}

char *sub_100190354(uint64_t **a1, _QWORD *a2, _QWORD *a3, _OWORD *a4)
{
  void **v7;
  char *v8;
  uint64_t **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;

  v7 = (void **)sub_100191690((uint64_t)a1, &v14, a2);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0x88uLL);
    v10 = a4[3];
    *(_OWORD *)(v8 + 72) = a4[2];
    *(_OWORD *)(v8 + 88) = v10;
    v11 = a4[5];
    *(_OWORD *)(v8 + 104) = a4[4];
    *(_OWORD *)(v8 + 120) = v11;
    v12 = a4[1];
    *(_OWORD *)(v8 + 40) = *a4;
    *((_QWORD *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 56) = v12;
    sub_1000145B0(a1, v14, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t sub_100190404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_100190454(a2, *(_QWORD *)a1, *(_DWORD *)(a1 + 172), *(_DWORD *)(a1 + 168), *(_DWORD *)(a1 + 180), *(_DWORD *)(a1 + 164), *(_DWORD *)(a1 + 184), *(double *)(a1 + 12), *(double *)(a1 + 20), *(double *)(a1 + 36), *(double *)(a1 + 28), *(double *)(a1 + 44), *(double *)(a1 + 84));
  *(_BYTE *)(a2 + 88) = 0;
  return result;
}

uint64_t sub_100190454(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  *(_QWORD *)result = a2;
  *(double *)(result + 8) = a8;
  *(double *)(result + 16) = a9;
  *(double *)(result + 24) = a10;
  *(double *)(result + 32) = a11;
  *(double *)(result + 40) = a12;
  *(_DWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 52) = a4;
  *(_DWORD *)(result + 56) = a5;
  *(double *)(result + 64) = a13;
  *(_DWORD *)(result + 76) = a6;
  *(_QWORD *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_DWORD *)(result + 92) = a7;
  return result;
}

void sub_100190484(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  char v25[4];
  _BYTE v26[24];

  v23 = 0;
  v24 = 0;
  v21 = 0;
  v22 = (uint64_t *)&v23;
  v19 = (uint64_t *)&v20;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v16 = (uint64_t *)&v17;
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = a1 + 8;
    do
    {
      sub_1001906D4(v6, v4, (uint64_t)v25);
      if (v25[0])
      {
        if (v26[20])
          sub_100190908(&v16, v4, v4, (uint64_t)v26);
        else
          sub_1001909A4(&v19, v4, v4);
      }
      else
      {
        sub_1001909A4(&v22, v4, v4);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  a3[1] = 0;
  v7 = a3 + 1;
  a3[2] = 0;
  a3[4] = 0;
  v8 = a3 + 4;
  *a3 = a3 + 1;
  a3[3] = a3 + 4;
  a3[5] = 0;
  a3[7] = 0;
  v9 = a3 + 7;
  a3[6] = a3 + 7;
  a3[8] = 0;
  sub_100008848((uint64_t)a3, 0);
  v10 = v23;
  *a3 = v22;
  a3[1] = v10;
  v11 = v24;
  a3[2] = v24;
  if (v11)
  {
    v10[2] = v7;
    v22 = (uint64_t *)&v23;
    v23 = 0;
    v24 = 0;
  }
  else
  {
    *a3 = v7;
  }
  sub_100008848((uint64_t)(a3 + 3), (_QWORD *)a3[4]);
  v12 = v20;
  a3[3] = v19;
  a3[4] = v12;
  v13 = v21;
  a3[5] = v21;
  if (v13)
  {
    v12[2] = v8;
    v19 = (uint64_t *)&v20;
    v20 = 0;
    v21 = 0;
  }
  else
  {
    a3[3] = v8;
  }
  sub_100008848((uint64_t)(a3 + 6), (_QWORD *)a3[7]);
  v14 = v17;
  a3[6] = v16;
  a3[7] = v14;
  v15 = v18;
  a3[8] = v18;
  if (v15)
  {
    v14[2] = v9;
    v16 = (uint64_t *)&v17;
    v17 = 0;
    v18 = 0;
    v14 = 0;
  }
  else
  {
    a3[6] = v9;
  }
  sub_100008848((uint64_t)&v16, v14);
  sub_100008848((uint64_t)&v19, v20);
  sub_100008848((uint64_t)&v22, v23);
}

void sub_10019069C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, _QWORD *a16)
{
  sub_100008848((uint64_t)&a9, a10);
  sub_100008848((uint64_t)&a12, a13);
  sub_100008848((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001906D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;

  result = sub_100191618(a1, a2);
  if ((_QWORD *)(a1 + 8) == result)
  {
    v18 = 0;
  }
  else
  {
    v7 = result;
    result = (_QWORD *)result[8];
    if (*(_QWORD **)(a1 + 32) == result)
    {
      *(_OWORD *)(a3 + 4) = *(_OWORD *)(v7 + 5);
      v19 = v7[7];
    }
    else
    {
      v8 = *result;
      *(_QWORD *)(v8 + 8) = result[1];
      *(_QWORD *)result[1] = v8;
      --*(_QWORD *)(a1 + 40);
      operator delete(result);
      v9 = operator new(0x18uLL);
      v10 = *a2;
      v11 = *(_QWORD **)(a1 + 32);
      *v9 = a1 + 24;
      v9[1] = v11;
      v9[2] = v10;
      *v11 = v9;
      v12 = *(_QWORD *)(a1 + 40) + 1;
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v12;
      v14 = v7[5];
      v13 = v7 + 5;
      v20 = a2;
      v21 = v14;
      v22 = *((_DWORD *)v13 + 2);
      v15 = *(_QWORD *)((char *)v13 + 12);
      v16 = *((unsigned __int8 *)v13 + 20);
      result = sub_100190878((uint64_t **)a1, a2, (uint64_t)&unk_101B9EB60, &v20);
      v17 = result + 5;
      if (*((unsigned __int8 *)result + 60) == v16)
      {
        if (*((_BYTE *)result + 60))
        {
          *v17 = v21;
          *((_WORD *)result + 24) = v22;
          *(_QWORD *)((char *)result + 52) = v15;
        }
      }
      else if (*((_BYTE *)result + 60))
      {
        *((_BYTE *)result + 60) = 0;
      }
      else
      {
        *v17 = v21;
        *((_DWORD *)result + 12) = v22;
        *(_QWORD *)((char *)result + 52) = v15;
        *((_BYTE *)result + 60) = 1;
      }
      result[8] = v9;
      *(_OWORD *)(a3 + 4) = *(_OWORD *)v13;
      v19 = v13[2];
    }
    *(_QWORD *)(a3 + 20) = v19;
    v18 = 1;
  }
  *(_BYTE *)a3 = v18;
  return result;
}

_QWORD *sub_100190878(uint64_t **a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)sub_100191690((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v7[4] = **a4;
    *((_BYTE *)v7 + 40) = 0;
    *((_BYTE *)v7 + 60) = 0;
    v7[8] = 0;
    sub_1000145B0(a1, v10, v8, v7);
  }
  return v7;
}

char *sub_100190908(uint64_t **a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  void **v7;
  char *v8;
  uint64_t **v9;
  uint64_t v11;

  v7 = (void **)sub_100191690((uint64_t)a1, &v11, a2);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0x40uLL);
    *((_QWORD *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 40) = *(_OWORD *)a4;
    *((_DWORD *)v8 + 14) = *(_DWORD *)(a4 + 16);
    sub_1000145B0(a1, v11, v9, (uint64_t *)v8);
  }
  return v8;
}

uint64_t *sub_1001909A4(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (uint64_t **)sub_100191690((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    sub_1000145B0(a1, v9, v7, v6);
  }
  return v6;
}

void sub_100190A24(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>, double a6@<D0>)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  NSObject *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  char *v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  __int128 v60;
  _WORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  NSObject *v66;
  NSObject *v67;
  int v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  int v75;
  int v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  void *v85;
  char *v86;
  char *v87;
  void *v88;
  _BYTE *v89;
  void *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96[2];
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  int v101;
  int v102;
  __int16 v103;
  int v104;
  void *__p;
  char *v106;
  _QWORD v107[2];
  uint8_t buf[8];
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;

  v7 = a2[1];
  if (*a2 == v7)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  else
  {
    sub_100210340(a5, (v7 - *a2) >> 3);
    v81 = a1;
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 16))(&v93, *a1, a2);
    v12 = *a2;
    if (a2[1] != *a2)
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = (_QWORD *)(v12 + v14);
        if (&v99 != sub_100191618((uint64_t)&v98, (_QWORD *)(v12 + v14)))
        {
          v17 = sub_100191734((uint64_t)&v98, v16);
          v18 = *a5 + v13;
          if (*(_BYTE *)(v18 + 20))
          {
            v19 = *(_QWORD *)v17;
            *(_WORD *)(v18 + 8) = *(_WORD *)(v17 + 8);
            *(_QWORD *)v18 = v19;
            *(_QWORD *)(v18 + 12) = *(_QWORD *)(v17 + 12);
          }
          else
          {
            v20 = *(_OWORD *)v17;
            *(_DWORD *)(v18 + 16) = *(_DWORD *)(v17 + 16);
            *(_OWORD *)v18 = v20;
            *(_BYTE *)(v18 + 20) = 1;
          }
        }
        ++v15;
        v12 = *a2;
        v14 += 8;
        v13 += 24;
      }
      while (v15 < (a2[1] - *a2) >> 3);
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
    v21 = (uint64_t)&qword_1022A0000;
    v22 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v23 = (unint64_t)(a2[1] - *a2) >> 3;
      *(_DWORD *)buf = 67240960;
      *(_DWORD *)&buf[4] = v23;
      v109 = 1026;
      v110 = v100;
      v111 = 1026;
      v112 = v97;
      v113 = 1026;
      v114 = v95;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#wifitilecentroids, read cache, %{public}d, in_tiles, %{public}d, not_in_tiles, %{public}d, not_found, %{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 == -1)
        goto LABEL_101;
      goto LABEL_116;
    }
    while (1)
    {
      __p = 0;
      v106 = 0;
      v107[0] = 0;
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v24 = *a2;
      if (a2[1] == *a2)
        break;
      v79 = a4;
      a4 = 0;
      v21 = 0x7FFFFFFFFFFFFFF8;
      do
      {
        v25 = (_QWORD *)(v24 + 8 * a4);
        if (&v94 != sub_100191618((uint64_t)&v93, v25))
        {
          v26 = v106;
          if ((unint64_t)v106 >= v107[0])
          {
            v28 = (char *)__p;
            v29 = (v106 - (_BYTE *)__p) >> 3;
            v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61)
              sub_100259694();
            v31 = v107[0] - (_QWORD)__p;
            if ((uint64_t)(v107[0] - (_QWORD)__p) >> 2 > v30)
              v30 = v31 >> 2;
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v30;
            if (v32)
            {
              v33 = (char *)sub_10025E6A0((uint64_t)v107, v32);
              v28 = (char *)__p;
              v26 = v106;
            }
            else
            {
              v33 = 0;
            }
            v34 = &v33[8 * v29];
            *(_QWORD *)v34 = *v25;
            v27 = v34 + 8;
            while (v26 != v28)
            {
              v35 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v34 - 1) = v35;
              v34 -= 8;
            }
            __p = v34;
            v106 = v27;
            v107[0] = &v33[8 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_QWORD *)v106 = *v25;
            v27 = v26 + 8;
          }
          v106 = v27;
          v36 = v91;
          if (v91 >= v92)
          {
            v38 = (char *)v90;
            v39 = (v91 - (_BYTE *)v90) >> 2;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 62)
              sub_100259694();
            v41 = v92 - (_BYTE *)v90;
            if ((v92 - (_BYTE *)v90) >> 1 > v40)
              v40 = v41 >> 1;
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
              v42 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v42 = v40;
            if (v42)
            {
              v43 = (char *)sub_100260634((uint64_t)&v92, v42);
              v38 = (char *)v90;
              v36 = v91;
            }
            else
            {
              v43 = 0;
            }
            v44 = &v43[4 * v39];
            *(_DWORD *)v44 = a4;
            v37 = v44 + 4;
            while (v36 != v38)
            {
              v45 = *((_DWORD *)v36 - 1);
              v36 -= 4;
              *((_DWORD *)v44 - 1) = v45;
              v44 -= 4;
            }
            v90 = v44;
            v91 = v37;
            v92 = &v43[4 * v42];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *(_DWORD *)v91 = a4;
            v37 = v36 + 4;
          }
          v91 = v37;
        }
        ++a4;
        v24 = *a2;
      }
      while (a4 < (a2[1] - *a2) >> 3);
      if (__p == v106)
        break;
      (*(void (**)(void **__return_ptr, unint64_t, void **, uint64_t, _QWORD, double))(*(_QWORD *)v79 + 16))(&v88, v79, &__p, a3, v100, a6);
      v46 = (char *)v88;
      if (0xAAAAAAAAAAAAAAABLL * ((v89 - (_BYTE *)v88) >> 3) == (v106 - (_BYTE *)__p) >> 3)
      {
        v85 = 0;
        v86 = 0;
        v87 = 0;
        v83 = 0;
        v84 = 0;
        v82 = (uint64_t *)&v83;
        if (v89 != v88)
        {
          v47 = 0;
          do
          {
            v48 = (char *)__p + 8 * v47;
            v49 = &v46[24 * v47];
            if (v49[20])
            {
              v50 = *a5 + 24 * *((int *)v90 + v47);
              if (*(unsigned __int8 *)(v50 + 20) == v49[20])
              {
                v51 = *(_QWORD *)v49;
                *(_WORD *)(v50 + 8) = *((_WORD *)v49 + 4);
                *(_QWORD *)v50 = v51;
                *(_QWORD *)(v50 + 12) = *(_QWORD *)(v49 + 12);
              }
              else if (*(_BYTE *)(v50 + 20))
              {
                *(_BYTE *)(v50 + 20) = 0;
              }
              else
              {
                v60 = *(_OWORD *)v49;
                *(_DWORD *)(v50 + 16) = *((_DWORD *)v49 + 4);
                *(_OWORD *)v50 = v60;
                *(_BYTE *)(v50 + 20) = 1;
              }
              *(_QWORD *)buf = v48;
              v61 = sub_10129F974(&v82, v48, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
              v62 = *(_QWORD *)v49;
              v61[24] = *((_WORD *)v49 + 4);
              *((_QWORD *)v61 + 5) = v62;
              *(_QWORD *)(v61 + 26) = *(_QWORD *)(v49 + 12);
            }
            else
            {
              v52 = v86;
              if (v86 >= v87)
              {
                v54 = (char *)v85;
                v55 = (v86 - (_BYTE *)v85) >> 3;
                v56 = v55 + 1;
                if ((unint64_t)(v55 + 1) >> 61)
                  sub_100259694();
                v57 = v87 - (_BYTE *)v85;
                if ((v87 - (_BYTE *)v85) >> 2 > v56)
                  v56 = v57 >> 2;
                if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                  v58 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v58 = v56;
                if (v58)
                {
                  v59 = (char *)sub_10025E6A0((uint64_t)&v87, v58);
                  v54 = (char *)v85;
                  v52 = v86;
                }
                else
                {
                  v59 = 0;
                }
                v63 = &v59[8 * v55];
                *(_QWORD *)v63 = *v48;
                v53 = v63 + 8;
                while (v52 != v54)
                {
                  v64 = *((_QWORD *)v52 - 1);
                  v52 -= 8;
                  *((_QWORD *)v63 - 1) = v64;
                  v63 -= 8;
                }
                v85 = v63;
                v86 = v53;
                v87 = &v59[8 * v58];
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *(_QWORD *)v86 = *v48;
                v53 = v52 + 8;
              }
              v86 = v53;
            }
            ++v47;
            v46 = (char *)v88;
          }
          while (v47 < 0xAAAAAAAAAAAAAAABLL * ((v89 - (_BYTE *)v88) >> 3));
        }
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
        v65 = v81;
        v66 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = (unint64_t)(v106 - (_BYTE *)__p) >> 3;
          v109 = 1026;
          v110 = v84;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_INFO, "#wifitilecentroids, search tiles, searched, %{public}d, found, %{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
          v101 = 67240448;
          v102 = (unint64_t)(v106 - (_BYTE *)__p) >> 3;
          v103 = 1026;
          v104 = v84;
          LODWORD(v78) = 14;
          v73 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "#wifitilecentroids, search tiles, searched, %{public}d, found, %{public}d", &v101, v78);
          sub_100512490("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiTileCacheLogic::findCentroids(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, const CLIWifiTileSearchDelegate *) const", "%s\n", v73);
          if (v73 != (char *)buf)
            free(v73);
          v65 = v81;
        }
        (*(void (**)(_QWORD, void **))(*(_QWORD *)*v65 + 24))(*v65, &v85);
        (*(void (**)(_QWORD, uint64_t **))(*(_QWORD *)*v65 + 32))(*v65, &v82);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
        v67 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          v68 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v65 + 48))(*v65);
          v69 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v65 + 56))(*v65);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)&buf[4] = v68;
          v109 = 1026;
          v110 = v69;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "#wifitilecentroids, write to cache, new size, %{public}du / %{public}du", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
          v74 = qword_1022A0058;
          v75 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v81 + 48))(*v81);
          v76 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v81 + 56))(*v81);
          v101 = 67240448;
          v102 = v75;
          v103 = 1026;
          v104 = v76;
          LODWORD(v78) = 14;
          v77 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v74, 2, "#wifitilecentroids, write to cache, new size, %{public}du / %{public}du", &v101, v78);
          sub_100512490("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiTileCacheLogic::findCentroids(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, const CLIWifiTileSearchDelegate *) const", "%s\n", v77);
          if (v77 != (char *)buf)
            free(v77);
        }
        sub_100008848((uint64_t)&v82, v83);
        if (v85)
        {
          v86 = (char *)v85;
          operator delete(v85);
        }
        if (v88)
        {
          v89 = v88;
          operator delete(v88);
        }
        break;
      }
      sub_101949EF4();
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiTileCacheLogic.mm", 83, "findCentroids");
      __break(1u);
LABEL_116:
      dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
LABEL_101:
      v70 = *(_QWORD *)(v21 + 88);
      v71 = (unint64_t)(a2[1] - *a2) >> 3;
      LODWORD(__p) = 67240960;
      HIDWORD(__p) = v71;
      LOWORD(v106) = 1026;
      *(_DWORD *)((char *)&v106 + 2) = v100;
      HIWORD(v106) = 1026;
      LODWORD(v107[0]) = v97;
      WORD2(v107[0]) = 1026;
      *(_DWORD *)((char *)v107 + 6) = v95;
      LODWORD(v78) = 26;
      v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v70, 2, "#wifitilecentroids, read cache, %{public}d, in_tiles, %{public}d, not_in_tiles, %{public}d, not_found, %{public}d", &__p, v78);
      sub_100512490("Generic", 1, 0, 2, "std::vector<std::optional<std::tuple<CLTilesManager_Type::AccessPointEntry, WifiTileXY>>> CLWifiTileCacheLogic::findCentroids(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, const CLIWifiTileSearchDelegate *) const", "%s\n", v72);
      if (v72 != (char *)buf)
        free(v72);
    }
    if (v90)
    {
      v91 = (char *)v90;
      operator delete(v90);
    }
    if (__p)
    {
      v106 = (char *)__p;
      operator delete(__p);
    }
    sub_100008848((uint64_t)&v98, v99);
    sub_100008848((uint64_t)v96, v96[1]);
    sub_100008848((uint64_t)&v93, v94);
  }
}

void sub_10019154C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  uint64_t v40;
  void *v42;

  sub_100008848((uint64_t)&a16, a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  sub_10129F764(&a28);
  v42 = *(void **)v40;
  if (*(_QWORD *)v40)
  {
    *(_QWORD *)(v40 + 8) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_100191618(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_100191720(v3 + 4, a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_100191720(a2, v5 + 4))
    return v2;
  return v5;
}

_QWORD *sub_100191690(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_100191720(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_100191720(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_100191720(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_100191734(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *sub_100191690(a1, &v4, a2);
  if (!v2)
    sub_100263950("map::at:  key not found");
  return v2 + 40;
}

void sub_100191770(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t *a4)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  NSObject *v25;
  std::string *v26;
  std::string *v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  std::string *v31;
  std::string *v32;
  const char *v33;
  NSObject *v34;
  std::string *v35;
  std::string *v36;
  const char *v37;
  NSObject *v38;
  std::string *v39;
  std::string *v40;
  const char *v41;
  NSObject *v42;
  std::string *v43;
  std::string *v44;
  const char *v45;
  NSObject *v46;
  std::string *v47;
  std::string *v48;
  const char *v49;
  std::string v50;
  std::string v51;
  std::string v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  _BYTE __p[24];
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;

  if (*a4)
  {
    LODWORD(v52.__r_.__value_.__l.__data_) = 3;
    *(_QWORD *)__p = &v52;
    v7 = *((_DWORD *)sub_100136FD4(a3, (int *)&v52, (uint64_t)&unk_101B9EB60, (unsigned int **)__p) + 8);
    LODWORD(v52.__r_.__value_.__l.__data_) = 0;
    *(_QWORD *)__p = &v52;
    v8 = *((_DWORD *)sub_100136FD4(a3, (int *)&v52, (uint64_t)&unk_101B9EB60, (unsigned int **)__p) + 8);
    LODWORD(v52.__r_.__value_.__l.__data_) = 1;
    *(_QWORD *)__p = &v52;
    v9 = *((_DWORD *)sub_100136FD4(a3, (int *)&v52, (uint64_t)&unk_101B9EB60, (unsigned int **)__p) + 8);
    LODWORD(v52.__r_.__value_.__l.__data_) = 2;
    *(_QWORD *)__p = &v52;
    v10 = *((_DWORD *)sub_100136FD4(a3, (int *)&v52, (uint64_t)&unk_101B9EB60, (unsigned int **)__p) + 8);
    sub_1015A2E04(&v51, "MovingApDetector, ");
    v11 = sub_10005995C(*a4);
    if (v11)
    {
      std::to_string(&v52, v11);
      v12 = std::string::insert(&v52, 0, "database count: ");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      *(_QWORD *)&__p[16] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)__p = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (__p[23] >= 0)
        v14 = __p;
      else
        v14 = *(const std::string::value_type **)__p;
      if (__p[23] >= 0)
        v15 = __p[23];
      else
        v15 = *(_QWORD *)&__p[8];
      std::string::append(&v51, v14, v15);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::append(&v51, "database empty");
    }
    std::to_string(&v50, a2);
    v19 = std::string::insert(&v50, 0, ", cross-checked ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v52, " centroids");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(_QWORD *)&__p[16] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (__p[23] >= 0)
      v23 = __p;
    else
      v23 = *(const std::string::value_type **)__p;
    if (__p[23] >= 0)
      v24 = __p[23];
    else
      v24 = *(_QWORD *)&__p[8];
    std::string::append(&v51, v23, v24);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (v7 == a2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v25 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v26 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v26 = (std::string *)v51.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%s, all centroids are invalid!", __p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_107;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v27 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)v51.__r_.__value_.__r.__words[0];
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s, all centroids are invalid!", (const char *)&v52);
      v29 = (char *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v28);
    }
    else if (v10 == a2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v30 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v31 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v31 = (std::string *)v51.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%s, all centroids are unknown!", __p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_107;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v32 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v32 = (std::string *)v51.__r_.__value_.__r.__words[0];
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s, all centroids are unknown!", (const char *)&v52);
      v29 = (char *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v33);
    }
    else if (v9 == a2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v34 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v35 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v35 = (std::string *)v51.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s, all centroids are good!", __p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_107;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v36 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v36 = (std::string *)v51.__r_.__value_.__r.__words[0];
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s, all centroids are good!", (const char *)&v52);
      v29 = (char *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v37);
    }
    else if (v8 == a2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v38 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v39 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v39 = (std::string *)v51.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315138;
        *(_QWORD *)&__p[4] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "%s, all centroids are bad!", __p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_107;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v40 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = (std::string *)v51.__r_.__value_.__r.__words[0];
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s, all centroids are bad!", (const char *)&v52);
      v29 = (char *)v41;
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v41);
    }
    else if (v9 + v7 == a2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v42 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v43 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v43 = (std::string *)v51.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v43;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v7;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "%s, %d invalid, all %d valid centroids are good!", __p, 0x18u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_107;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v44 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v44 = (std::string *)v51.__r_.__value_.__r.__words[0];
      LODWORD(v52.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      WORD2(v52.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[1] + 6) = v7;
      WORD1(v52.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v52.__r_.__value_.__r.__words[2]) = v9;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s, %d invalid, all %d valid centroids are good!", (const char *)&v52, 24, LODWORD(v50.__r_.__value_.__l.__data_));
      v29 = (char *)v45;
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v45);
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v46 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v47 = &v51;
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v47 = (std::string *)v51.__r_.__value_.__r.__words[0];
        *(_DWORD *)__p = 136316162;
        *(_QWORD *)&__p[4] = v47;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v7;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v10;
        v58 = 1024;
        v59 = v9;
        v60 = 1024;
        v61 = v8;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "%s, %d invalid, %d unknown, %d good, %d bad!", __p, 0x24u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_107;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v48 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = (std::string *)v51.__r_.__value_.__r.__words[0];
      LODWORD(v52.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v52.__r_.__value_.__r.__words + 4) = (std::string::size_type)v48;
      WORD2(v52.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v52.__r_.__value_.__r.__words[1] + 6) = v7;
      WORD1(v52.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v52.__r_.__value_.__r.__words[2]) = v10;
      v53 = 1024;
      v54 = v9;
      v55 = 1024;
      v56 = v8;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s, %d invalid, %d unknown, %d good, %d bad!", (const char *)&v52, 36, LODWORD(v50.__r_.__value_.__l.__data_), LODWORD(v50.__r_.__value_.__r.__words[1]), LODWORD(v50.__r_.__value_.__r.__words[2]));
      v29 = (char *)v49;
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v49);
    }
    if (v29 != __p)
      free(v29);
LABEL_107:
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F1D0);
  v16 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", __p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    LOWORD(v52.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 17, "MovingApDetector, centroid database is null!", &v52, 2);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 0, "void CLMovingApDetector::logCentroidCrossCheckOutcomes(const size_t, std::map<CrossCheckOutcome, int> &, const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v17);
    if (v18 != __p)
      free(v18);
  }
}

void sub_100192434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001924EC(_DWORD *a1)
{
  NSObject *v2;
  int v3;
  void (*v4)(void);
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = a1[3];
    *(_DWORD *)buf = 67240192;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGC,updateGnssBandStatus,L5,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = a1[3];
    v7[0] = 67240192;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGC,updateGnssBandStatus,L5,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::updateGnssBandStatus()", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  if (*(_QWORD *)a1)
  {
    if (sub_1001936CC())
    {
      switch(sub_100192748((uint64_t)a1))
      {
        case 0u:
          v4 = *(void (**)(void))(**(_QWORD **)a1 + 248);
          goto LABEL_14;
        case 1u:
          v4 = *(void (**)(void))(**(_QWORD **)a1 + 248);
          goto LABEL_14;
        case 2u:
          v4 = *(void (**)(void))(**(_QWORD **)a1 + 248);
          goto LABEL_14;
        case 3u:
          goto LABEL_10;
        default:
          break;
      }
    }
    else
    {
LABEL_10:
      v4 = *(void (**)(void))(**(_QWORD **)a1 + 248);
LABEL_14:
      v4();
    }
  }
  sub_100192C30((uint64_t)a1);
}

uint64_t sub_100192748(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 2752);
    *(_DWORD *)buf = 67109120;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#clgda,getGnssBandAtBasebandCausesL1InterferenceModeAssertion,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = *(_DWORD *)(a1 + 2752);
    v7[0] = 67109120;
    v7[1] = v5;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#clgda,getGnssBandAtBasebandCausesL1InterferenceModeAssertion,%d", v7);
    sub_100512490("Generic", 1, 0, 2, "const GNSS::BasebandCausesL1InterferenceModeGnssBand CLGnssController::getGnssBandAtBasebandCausesL1InterferenceModeAssertion() const", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return *(unsigned int *)(a1 + 2752);
}

void sub_1001928FC(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  unsigned __int8 v7;
  uint64_t v8;
  int v9;
  char *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240448;
    v15 = a2;
    v16 = 1026;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,setRfBandEnable,L1,%{public}d,L5,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v11[0] = 67240448;
    v11[1] = a2;
    v12 = 1026;
    v13 = a3;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,setRfBandEnable,L1,%{public}d,L5,%{public}d", v11, 14);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::setRfBandEnable(BOOL, BOOL)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_10230FB20);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_10230FB20))
  {
    byte_10230FB18 = sub_1002416E0();
    __cxa_guard_release(&qword_10230FB20);
  }
  if (byte_10230FB18)
  {
    sub_1000FF07C((uint64_t)buf);
    if ((sub_100103BB0(38) & 1) == 0)
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    v18 = 38;
    v20 |= 0x40000004u;
    v8 = v19;
    if (!v19)
      operator new();
    v9 = *(_DWORD *)(v19 + 16);
    *(_BYTE *)(v19 + 8) = a2;
    *(_DWORD *)(v8 + 16) = v9 | 3;
    *(_BYTE *)(v8 + 9) = a3;
    sub_1000FF114(a1 + 2576, (uint64_t)buf);
    sub_1000FF8D8(a1 + 2176, 2);
    sub_1000FF078(buf);
  }
}

void sub_100192BC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230FB20);
  _Unwind_Resume(a1);
}

uint64_t sub_100192C18(uint64_t result)
{
  *(_QWORD *)result = off_102193F60;
  *(_WORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_100192C30(uint64_t a1)
{
  NSObject *v2;
  __CFRunLoop *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssband,signalGnssBandChange", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssband,signalGnssBandChange", v5, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::signalGnssBandChange()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 24));
  v3 = (__CFRunLoop *)sub_100193530();
  CFRunLoopWakeUp(v3);
}

void sub_100192DD0(uint64_t a1, char *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  int v10;
  NSObject *v11;
  _QWORD *v12;
  int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  double v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint8_t buf[4];
  _BYTE v32[14];
  __int16 v33;
  int v34;
  __int16 v35;
  double v36;

  sub_1001477A8(a1);
  if (*(char *)(a1 + 161) < *a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v4 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v5 = *a2;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)v32 = 0;
      *(_WORD *)&v32[4] = 2082;
      *(_QWORD *)&v32[6] = "";
      v33 = 1026;
      v34 = v5;
      v35 = 2050;
      v36 = sub_1001B75B4(a1);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Starting all location providers up to threshold\", \"threshold\":%{public}d, \"desiredAccuracy\":\"%{public}f\"}", buf, 0x22u);
    }
    v6 = *a2;
    if (v6 <= 2)
    {
      v7 = (_QWORD *)(a1 + 248);
      while (1)
      {
        v8 = *(_QWORD **)(a1 + 240);
        if (v8 != v7)
        {
          v9 = 0;
          do
          {
            v10 = *((char *)v8 + 900);
            if (v10 <= *(char *)(a1 + 161) || v10 > (char)v6)
            {
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_10214C5A0);
              v11 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                v12 = v8 + 6;
                if (*((char *)v8 + 71) < 0)
                  v12 = (_QWORD *)*v12;
                v13 = *(char *)(a1 + 160);
                v14 = *(char *)(a1 + 161);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)v32 = v12;
                *(_WORD *)&v32[8] = 1026;
                *(_DWORD *)&v32[10] = v13;
                v33 = 1026;
                v34 = v14;
                _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Not starting location provider,%{public}s,fRequiredLocationGranularity,%{public}d,fActiveLocationGranularity,%{public}d", buf, 0x18u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10214C5A0);
                v18 = v8 + 6;
                if (*((char *)v8 + 71) < 0)
                  v18 = (_QWORD *)*v18;
                v19 = *(char *)(a1 + 160);
                v20 = *(char *)(a1 + 161);
                v25 = 136446722;
                v26 = v18;
                v27 = 1026;
                v28 = v19;
                v29 = 1026;
                v30 = v20;
                LODWORD(v24) = 24;
                v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Not starting location provider,%{public}s,fRequiredLocationGranularity,%{public}d,fActiveLocationGranularity,%{public}d", &v25, v24);
                sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocation(const Granularity &)", "%s\n", v21);
                if (v21 != (char *)buf)
                  free(v21);
              }
            }
            else
            {
              sub_1001B19A8(a1, *((_DWORD *)v8 + 10));
              v9 = 1;
            }
            v15 = (_QWORD *)v8[1];
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = (_QWORD *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v8[2];
                v17 = *v16 == (_QWORD)v8;
                v8 = v16;
              }
              while (!v17);
            }
            v8 = v16;
          }
          while (v16 != v7);
          if ((v9 & 1) != 0)
            break;
        }
        v6 = (char)(v6 + 1);
        if (v6 >= 3)
          goto LABEL_38;
      }
      sub_100193388(a1);
      if (v6 == 2)
      {
        sub_100402680(a1 + 768);
        LOBYTE(v6) = 2;
      }
    }
LABEL_38:
    v22 = *(unsigned __int8 *)(a1 + 161);
    if (v22 != 2)
    {
      if (v22 == 255 || (objc_msgSend(*(id *)(a1 + 656), "nextFireDelay"), v23 < 15.0))
        objc_msgSend(*(id *)(a1 + 656), "setNextFireDelay:", 15.0);
    }
    *(_BYTE *)(a1 + 161) = v6;
  }
}

void sub_1001931A4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  int v13;

  if (*(_DWORD *)a2 == 10)
  {
    v4 = *(unsigned __int8 *)(a2 + 4);
    v5 = *(unsigned __int8 *)(a1 + 705);
    *(_BYTE *)(a1 + 705) = v4;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v6 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(unsigned __int8 *)(a2 + 4);
      *(_DWORD *)buf = 67240192;
      v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Got notification indoor active state,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v8 = *(unsigned __int8 *)(a2 + 4);
      v11[0] = 67240192;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Got notification indoor active state,%{public}d", v11, 8);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onIndoorActiveNotification(const CLLocationProvider_Type::TechnologyStatus &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    if (v4 != v5)
      sub_100193388(a1);
  }
}

void sub_100193388(uint64_t a1)
{
  NSObject *v2;
  __CFRunLoop *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#techstatus,signalling", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v5[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#techstatus,signalling", v5, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::signalTechStatusChanged()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 688));
  CFRunLoopSourceSignal(*(CFRunLoopSourceRef *)(a1 + 696));
  v3 = (__CFRunLoop *)sub_100193530();
  CFRunLoopWakeUp(v3);
}

uint64_t sub_100193530()
{
  NSObject *v0;
  char *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (!qword_102301708)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "***no run loop available***", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v3[0] = 0;
      v2 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "***no run loop available***", v3, 2);
      sub_100512490("Generic", 1, 0, 0, "CFRunLoopRef CLCommonGetRunLoop()", "%s\n", v2);
      if (v2 != (char *)buf)
        free(v2);
    }
  }
  return qword_102301708;
}

BOOL sub_1001936CC()
{
  _BOOL4 v0;
  int v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if ((sub_1001937D8() & 1) == 0 && !sub_1000FDB0C() && !sub_10075B95C())
    goto LABEL_8;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  if ((byte_102303E08 & 1) != 0)
    v0 = 1;
  else
LABEL_8:
    v0 = sub_10075BADC();
  sub_1001E4804(&v7);
  v9 = 0;
  v1 = sub_1001E4874(v7, "supportsGnssConcurrency", &v9);
  v2 = v9;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v1)
    return v2;
  else
    return v0;
}

void sub_1001937C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001937D8()
{
  uint64_t result;

  result = sub_100193808();
  if ((_DWORD)result)
    return (sub_1001DC848() & 1) == 0 && !sub_1001DC7D8();
  return result;
}

uint64_t sub_100193808()
{
  uint64_t result;

  result = sub_1001DC794();
  if ((_DWORD)result)
  {
    if (sub_1000FDB3C())
      return 0;
    else
      return sub_1001DC8D0() ^ 1;
  }
  return result;
}

uint64_t sub_100193838(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  unsigned int v7;
  CLClientManagerAuthorizationContext *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  CLClientManagerAuthorizationContext *v14;
  CLClientManagerAuthorizationContext *v15;
  BOOL v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  CLClientManagerAuthorizationContext *v23;
  NSObject *v24;
  void **v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  id *v34;
  void *v35;
  _QWORD *v36;
  _QWORD *v37;
  void *v38;
  unsigned int v40;
  void *__p[2];
  char v42;
  uint8_t buf[8];
  _BYTE v44[32];
  uint64_t v45;

  v6 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  v7 = objc_msgSend(v6, "isAuthLimited");
  if (v7)
    v6 = objc_msgSend(*(id *)(a1 + 136), "primaryKeyPathForAuthLimitedKeyPath:", v6);
  v8 = sub_10019EE88(a1, (uint64_t)v6, &xmmword_101C17478);
  v40 = objc_msgSend(v6, "isValidCKP");
  if (v40)
  {
    if (((v7 | sub_1001A4C54((id *)a1, (uint64_t)v6, (uint64_t)v8)) & 1) == 0)
    {
      v9 = *(unsigned __int8 *)(a3 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = *(_QWORD *)(a3 + 8);
      if (!v9)
        return 0;
    }
    sub_1002402F8(a1, (uint64_t)v6, (uint64_t)v8);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 1080), "removeObjectForKey:", objc_msgSend(a2, "legacyClientKey"));
    objc_msgSend(*(id *)(a1 + 1072), "setClientsAuthorizationMap:", objc_msgSend(*(id *)(a1 + 1080), "copy"));
    objc_msgSend(a2, "isValidCKP");
    objc_msgSend(*(id *)(a1 + 1072), "setPersistentStoreDictionary:forClient:", 0, objc_msgSend(a2, "legacyClientKey"));
    v6 = a2;
  }
  v10 = *(_QWORD **)(a1 + 816);
  if (v10 != (_QWORD *)(a1 + 824))
  {
    do
    {
      v11 = sub_1001948D4(v10[5], 0);
      sub_100193E94(v10[5], __p);
      if (objc_msgSend(v11, "isAuthLimited"))
      {
        v12 = objc_msgSend(*(id *)(a1 + 136), "primaryKeyPathForAuthLimitedKeyPath:", v11);
        v13 = objc_msgSend(v11, "limitingCKP");
        if (sub_1007C6874(a1, v6, v12))
        {
          v14 = sub_1000B9630(a1, (uint64_t)v13, &xmmword_101C17478);
          v15 = v8;
          if (!v8)
            goto LABEL_35;
        }
        else
        {
          if (!sub_1007C6874(a1, v6, v13))
            goto LABEL_35;
          v15 = sub_1000B9630(a1, (uint64_t)v12, &xmmword_101C17478);
          v14 = v8;
          if (!v15)
            goto LABEL_35;
        }
        if (v14)
        {
          v18 = -[CLClientManagerAuthorizationContext isAuthorizedForServiceType:](v14, "isAuthorizedForServiceType:", 12);
          v19 = -[CLClientManagerAuthorizationContext transientAwareRegistrationResult](v14, "transientAwareRegistrationResult");
          v20 = v18 ? 1 : 2;
          v21 = sub_1001A4314(v19, 5, v20, 0, 0, 0, 0);
          v23 = -[CLClientManagerAuthorizationContext authorizationContextByANDingServiceMaskTuple:](v15, "authorizationContextByANDingServiceMaskTuple:", v21, v22);
          if (v23 != v15)
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_1021545A8);
            v24 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
            {
              v25 = __p;
              if (v42 < 0)
                v25 = (void **)__p[0];
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)v44 = 2082;
              *(_QWORD *)&v44[2] = "";
              *(_WORD *)&v44[10] = 2114;
              *(_QWORD *)&v44[12] = v11;
              *(_WORD *)&v44[20] = 2082;
              *(_QWORD *)&v44[22] = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Limiting identity's service-mask imposed on specified identity\", \"AffectedIdentity\":%{public, location:escape_only}@, \"AffectedSubIdentity\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            v15 = v23;
          }
        }
      }
      else
      {
        v16 = sub_1007C6874(a1, v6, v11);
        if (v8)
          v17 = v16;
        else
          v17 = 0;
        v15 = v8;
        if (!v17)
          goto LABEL_35;
      }
      sub_1001A5490(v10[5], v15);
LABEL_35:
      if (v42 < 0)
        operator delete(__p[0]);
      v26 = (_QWORD *)v10[1];
      if (v26)
      {
        do
        {
          v27 = v26;
          v26 = (_QWORD *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          v27 = (_QWORD *)v10[2];
          v28 = *v27 == (_QWORD)v10;
          v10 = v27;
        }
        while (!v28);
      }
      v10 = v27;
    }
    while (v27 != (_QWORD *)(a1 + 824));
  }
  v29 = *(_QWORD **)(a1 + 888);
  if (v29 != (_QWORD *)(a1 + 896))
  {
    do
    {
      v30 = (void *)sub_100026CC8(v29[5]);
      if (sub_1007C6874(a1, v6, v30))
        sub_1011064A0((id *)v29[5], v8);
      v31 = (_QWORD *)v29[1];
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (_QWORD *)v29[2];
          v28 = *v32 == (_QWORD)v29;
          v29 = v32;
        }
        while (!v28);
      }
      v29 = v32;
    }
    while (v32 != (_QWORD *)(a1 + 896));
  }
  v33 = *(_QWORD **)(a1 + 912);
  if (v33 != (_QWORD *)(a1 + 920))
  {
    do
    {
      v34 = (id *)v33[4];
      v35 = (void *)sub_100026CC8((uint64_t)v34);
      if (sub_1007C6874(a1, v6, v35))
        sub_1011064A0(v34, v8);
      v36 = (_QWORD *)v33[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v33[2];
          v28 = *v37 == (_QWORD)v33;
          v33 = v37;
        }
        while (!v28);
      }
      v33 = v37;
    }
    while (v37 != (_QWORD *)(a1 + 920));
  }
  if ((v40 & 1) != 0)
  {
    v38 = *(void **)(a1 + 136);
    *(_QWORD *)buf = _NSConcreteStackBlock;
    *(_QWORD *)v44 = 3221225472;
    *(_QWORD *)&v44[8] = sub_10020F11C;
    *(_QWORD *)&v44[16] = &unk_102153D78;
    *(_QWORD *)&v44[24] = v6;
    v45 = a1;
    objc_msgSend(v38, "iterateIdentitiesRelatedToKeyPath:withBlock:", v6, buf);
    sub_10019627C(a1, (uint64_t)v6);
  }
  return 1;
}

void sub_100193D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100193D7C(uint64_t a1)
{
  void *__p[2];
  char v4;

  sub_1015A2E04(__p, "default");
  sub_100193DF8(a1, 0, 0, (__int128 *)__p, 0.0);
  if (v4 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_100193DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100193DF8(uint64_t a1, int a2, char a3, __int128 *a4, double a5)
{
  uint64_t v7;
  __int128 v8;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = a3;
  v7 = a1 + 16;
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)v7, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v7 = v8;
  }
  *(double *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFF00000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 64) = _Q0;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 1;
  *(_BYTE *)(a1 + 110) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

_QWORD *sub_100193E94@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  char *v4;

  v3 = *(void **)(a1 + 56);
  if (v3)
    v4 = (char *)objc_msgSend(v3, "UTF8String");
  else
    v4 = "";
  return sub_1015A2E04(a2, v4);
}

void sub_100193F5C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  int v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint8_t buf[4];
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;

  *a4 = 0;
  *(int64x2_t *)(a4 + 8) = vdupq_n_s64(0x7FF0000000000000uLL);
  *((_DWORD *)a4 + 6) = 0;
  *(_DWORD *)(a4 + 27) = 0;
  v7 = (_QWORD *)a1[102];
  v8 = a1 + 103;
  if (v7 == a1 + 103)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = v7[5];
      v12 = objc_msgSend(sub_1001948D4(v11, 0), "isEqual:", a2);
      v13 = v11 != a3 || a3 == 0;
      if (v13 && v12 != 0)
      {
        sub_100B9EB84(v11, (uint64_t)buf);
        if ((_BYTE)v76)
          sub_1001944E8((double *)a4, (double *)buf);
        ++v10;
      }
      v15 = (_QWORD *)v7[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v7[2];
          v13 = *v16 == (_QWORD)v7;
          v7 = v16;
        }
        while (!v13);
      }
      v7 = v16;
    }
    while (v16 != v8);
  }
  v17 = (_QWORD *)a1[111];
  if (v17 == a1 + 112)
  {
    v20 = 0;
    v19 = 0;
    v18 = 0;
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = v17[5];
      if (objc_msgSend((id)sub_100026CC8(v21), "isEqual:", a2))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21) == 1)
        {
          ++v18;
          sub_10067B0D0(v21, (uint64_t)buf);
          v20 = (buf[0] | v20) != 0;
          sub_1001944E8((double *)a4, (double *)buf);
        }
        else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21) == 3)
        {
          ++v19;
        }
      }
      v22 = (_QWORD *)v17[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v17[2];
          v13 = *v23 == (_QWORD)v17;
          v17 = v23;
        }
        while (!v13);
      }
      v17 = v23;
    }
    while (v23 != a1 + 112);
  }
  HIDWORD(v44) = v18;
  v24 = (_QWORD *)a1[114];
  v25 = a1 + 115;
  if (v24 == a1 + 115)
  {
    v27 = 0;
    v26 = 0;
  }
  else
  {
    v26 = 0;
    v27 = 0;
    do
    {
      v28 = v24[4];
      if (objc_msgSend((id)sub_100026CC8(v28), "isEqual:", a2))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28) == 1)
        {
          ++v27;
          sub_10067B0D0(v28, (uint64_t)buf);
          v20 = (buf[0] | v20) != 0;
          sub_1001944E8((double *)a4, (double *)buf);
        }
        else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 24))(v28) == 3)
        {
          ++v26;
        }
      }
      v29 = (_QWORD *)v24[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v24[2];
          v13 = *v30 == (_QWORD)v24;
          v24 = v30;
        }
        while (!v13);
      }
      v24 = v30;
    }
    while (v30 != v25);
  }
  if ((v26 + v19 < 0) ^ __OFADD__(v26, v19) | (v26 + v19 == 0))
    v31 = 0;
  else
    v31 = 1;
  a4[30] |= v20 & v31;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v32 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v33 = *a4;
    v34 = a4[29];
    v35 = a4[28];
    v36 = *((_QWORD *)a4 + 1);
    v37 = *((_QWORD *)a4 + 2);
    *(_DWORD *)buf = 138414850;
    v68 = a2;
    v69 = 1024;
    v70 = v10;
    v71 = 1024;
    v72 = HIDWORD(v44);
    v73 = 1024;
    v74 = v19;
    v75 = 1024;
    v76 = v27;
    v77 = 1024;
    v78 = v26;
    v79 = 1024;
    v80 = v33;
    v81 = 1024;
    v82 = v34;
    v83 = 1024;
    v84 = v35;
    v85 = 2048;
    v86 = v36;
    v87 = 2048;
    v88 = v37;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "client, '%@', app's CLDC cnt, %d, DICLU cnt[connected: %d, disconnected: %d], DICBAS cnt[connected: %d, disconnected: %d], active, %d, spectator, %d, batchEnabled, %d, desiredAccuracy, %.2f, distanceFilter, %.2f", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v38 = *a4;
    v39 = a4[29];
    v40 = a4[28];
    v41 = *((_QWORD *)a4 + 1);
    v42 = *((_QWORD *)a4 + 2);
    v45 = 138414850;
    v46 = a2;
    v47 = 1024;
    v48 = v10;
    v49 = 1024;
    v50 = HIDWORD(v44);
    v51 = 1024;
    v52 = v19;
    v53 = 1024;
    v54 = v27;
    v55 = 1024;
    v56 = v26;
    v57 = 1024;
    v58 = v38;
    v59 = 1024;
    v60 = v39;
    v61 = 1024;
    v62 = v40;
    v63 = 2048;
    v64 = v41;
    v65 = 2048;
    v66 = v42;
    LODWORD(v44) = 80;
    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "client, '%@', app's CLDC cnt, %d, DICLU cnt[connected: %d, disconnected: %d], DICBAS cnt[connected: %d, disconnected: %d], active, %d, spectator, %d, batchEnabled, %d, desiredAccuracy, %.2f, distanceFilter, %.2f", &v45, v44);
    sub_100512490("Generic", 1, 0, 2, "CLClientManager_Type::ClientState CLClientManager::getAggregateLocationAppInfo(CLClientKeyPath *, CLDaemonClient *)", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
}

double *sub_100194488(uint64_t a1)
{
  double *result;
  const void *v2;
  double *v3;
  double *v4;
  _UNKNOWN **v5;

  result = (double *)sub_10011ACB0((_QWORD *)(a1 + 288), (uint64_t *)&v5);
  if (result)
  {
    v2 = (const void *)*((_QWORD *)result + 3);
    if (v2)
    {
      if (result)
        return result;
    }
    else
    {
      result = (double *)sub_100219F84();
    }
    v3 = (double *)sub_1019217FC(result);
    return sub_1001944E8(v3, v4);
  }
  return result;
}

double *sub_1001944E8(double *result, double *a2)
{
  double v2;
  uint64_t v3;
  double v4;
  double v6;

  *(_BYTE *)result = (*(unsigned __int8 *)result | *(unsigned __int8 *)a2) != 0;
  *((_BYTE *)result + 28) = (*((unsigned __int8 *)result + 28) | *((unsigned __int8 *)a2 + 28)) != 0;
  *((_BYTE *)result + 29) = (*((unsigned __int8 *)result + 29) | *((unsigned __int8 *)a2 + 29)) != 0;
  *((_BYTE *)result + 30) = (*((unsigned __int8 *)result + 30) | *((unsigned __int8 *)a2 + 30)) != 0;
  v2 = result[1];
  v3 = 0x41DFFFFFFE400000;
  if (v2 != 2147483640.0)
  {
    v4 = a2[1];
    if (v4 != 2147483640.0)
    {
      v3 = 0x41DFFFFFFE800000;
      if (v2 != 2147483640.0 && v4 != 2147483640.0)
      {
        if (v4 >= v2)
          v3 = *((_QWORD *)result + 1);
        else
          v3 = *((_QWORD *)a2 + 1);
      }
    }
  }
  *((_QWORD *)result + 1) = v3;
  v6 = a2[2];
  if (v6 >= result[2])
    v6 = result[2];
  result[2] = v6;
  return result;
}

void sub_1001945A8(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  id v8;
  _QWORD *v9;
  id v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char v15;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  NSObject *v20;
  id v21;
  int v22;
  uint64_t v23;
  id v24;
  int v25;
  char *v26;
  int v27;
  id v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  _BYTE __p[12];
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  *a4 = 0;
  v8 = sub_1001948D4(a2, 0);
  v9 = *(_QWORD **)(a1 + 816);
  if (v9 != (_QWORD *)(a1 + 824))
  {
    v10 = v8;
    v11 = 0;
    while (1)
    {
      v12 = v9[5];
      v13 = objc_msgSend(sub_1001948D4(v12, 0), "isEqual:", v10);
      if (v12 == a2)
        v14 = a3;
      else
        v14 = 1;
      if ((v13 & v14) != 1)
        goto LABEL_11;
      ++v11;
      if (!sub_100194918(v12, 2))
        goto LABEL_11;
      sub_1015A2E04(__p, "kCLConnectionMessageRanging");
      v15 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v12 + 48))(v12, __p);
      v16 = v15;
      if (SHIBYTE(v37) < 0)
        break;
      if ((v15 & 1) != 0)
        goto LABEL_10;
LABEL_11:
      v17 = (_QWORD *)v9[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v9[2];
          v19 = *v18 == (_QWORD)v9;
          v9 = v18;
        }
        while (!v19);
      }
      v9 = v18;
      if (v18 == (_QWORD *)(a1 + 824))
        goto LABEL_21;
    }
    operator delete(*(void **)__p);
    if ((v16 & 1) == 0)
      goto LABEL_11;
LABEL_10:
    *a4 = 1;
    goto LABEL_11;
  }
  v11 = 0;
LABEL_21:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v20 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v21 = sub_1001948D4(a2, 0);
    v22 = *a4;
    *(_DWORD *)__p = 138412802;
    *(_QWORD *)&__p[4] = v21;
    v34 = 1024;
    v35 = v11;
    v36 = 1024;
    v37 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "client, '%@', app's client cnt, %d, active, %d", __p, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v23 = qword_1022A01D8;
    v24 = sub_1001948D4(a2, 0);
    v25 = *a4;
    v27 = 138412802;
    v28 = v24;
    v29 = 1024;
    v30 = v11;
    v31 = 1024;
    v32 = v25;
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 2, "client, '%@', app's client cnt, %d, active, %d", &v27, 24);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::getAggregateRangeAppInfo(CLDaemonClient *, BOOL, BOOL &)", "%s\n", v26);
    if (v26 != __p)
      free(v26);
  }
}

void sub_1001948B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1001948D4(uint64_t a1, int a2)
{
  if (a2 && (objc_msgSend(*(id *)(a1 + 48), "isAuthLimited") & 1) != 0)
    return sub_1007D4930(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48));
  else
    return *(id *)(a1 + 48);
}

id sub_100194918(uint64_t a1, char a2)
{
  return objc_msgSend(*(id *)(a1 + 112), "isAuthorizedForServiceTypeMask:", 1 << a2);
}

void sub_10019492C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  id v5;
  uint64_t v6;
  __CFArray *v7;
  double v8;
  __CFArray *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  double Current;
  uint64_t v15;
  char *v16;
  void *__p[2];
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;

  v5 = sub_100195B0C(a1, a2);
  v6 = (uint64_t)v5;
  if (v5)
  {
    objc_msgSend(v5, "cppClientKey");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v18 = 0;
  }
  if (*a3)
  {
    if (sub_10019CEEC(a1, v6, (uint64_t)a3))
    {
      sub_10019C3A8((uint64_t **)(a1 + 728), (const void **)__p, (uint64_t)__p);
      if ((objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v6) & 1) == 0)
        sub_10019C3A8((uint64_t **)(a1 + 752), (const void **)__p, (uint64_t)__p);
    }
    if (*((double *)a3 + 1) == INFINITY)
    {
      if (*((_DWORD *)a3 + 6))
      {
        if (a3[29])
          v8 = 2147483650.0;
        else
          v8 = -1.0;
        objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("LocationDesiredAccuracy"), v6, v8);
        v9 = sub_10019CDB4(v8);
        objc_msgSend(*(id *)(a1 + 136), "setArray:forKey:atKeyPath:", v9, CFSTR("LocationTechnologiesInUse"), v6);
        CFRelease(v9);
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("LocationDesiredAccuracy"), v6);
        objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("LocationTechnologiesInUse"), v6);
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", CFSTR("LocationDesiredAccuracy"), v6);
      v7 = sub_10019CDB4(*((double *)a3 + 1));
      objc_msgSend(*(id *)(a1 + 136), "setArray:forKey:atKeyPath:", v7, CFSTR("LocationTechnologiesInUse"), v6);
      CFRelease(v7);
    }
    v10 = *(void **)(a1 + 136);
    if (*((double *)a3 + 2) <= 0.0)
      objc_msgSend(v10, "removeValueForKey:atKeyPath:", CFSTR("LocationDistanceFilter"), v6);
    else
      objc_msgSend(v10, "setDouble:forKey:atKeyPath:", CFSTR("LocationDistanceFilter"), v6);
    objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", a3[28], CFSTR("BatchEnabled"), v6);
  }
  else
  {
    sub_10019CD70((uint64_t **)(a1 + 728), (const void **)__p);
    sub_10019CD70((uint64_t **)(a1 + 752), (const void **)__p);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("LocationTechnologiesInUse"), v6);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("LocationDesiredAccuracy"), v6);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("LocationDistanceFilter"), v6);
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("BatchEnabled"), v6);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(_QWORD *)(a1 + 744);
    *(_DWORD *)buf = 134349056;
    v22 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "currently %{public}lu non-system location clients", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = *(_QWORD *)(a1 + 744);
    v19 = 134349056;
    v20 = v15;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "currently %{public}lu non-system location clients", &v19, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::setClientState(CLClientKeyPath *, const CLClientManager_Type::ClientState &)", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  v13 = *a3;
  Current = CFAbsoluteTimeGetCurrent();
  sub_100194D94(a1, v6, 4, v13 != 0, 0, 0, Current);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
}

void sub_100194D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100194D94(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  id v12;
  NSObject *v13;
  NSMutableDictionary *v14;
  unsigned __int8 v15;
  uint64_t v16;
  id v17;
  __CFString *v18;
  id v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  double v23;
  double v24;
  __CFString *v25;
  double v26;
  _BOOL4 v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  double v32;
  NSArray *v33;
  int v34;
  int v35;
  NSObject *v36;
  NSObject *v37;
  char *v38;
  const char *v39;
  char *v40;
  id v41;
  NSObject *v42;
  char *v43;
  char *v44;
  NSObject *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  char *v53;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __CFString *v64;
  uint64_t v65;
  _BYTE v66[128];
  id v67;
  id v68;
  int v69;
  id v70;
  __int16 v71;
  char *v72;
  __int16 v73;
  int v74;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _BYTE buf[28];
  __int16 v79;
  unint64_t v80;

  v12 = sub_100195B0C(a1, a2);
  v64 = 0;
  v65 = 0;
  v59 = a3;
  sub_100195BD4(a3, &v65, &v64);
  if (sub_100195E80(a1, a3, (uint64_t)v12, a6 == 0))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v13 = qword_1022A01C8;
    a5 = 0;
    a4 = 0;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Non-persistent SLC usage detected\"}", buf, 0x12u);
      a5 = 0;
      a4 = 0;
    }
  }
  if (a6 != 1)
  {
    v22 = v65;
    objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", v65, v12, -1.0);
    v24 = v23;
    v25 = v64;
    objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", v64, v12, -1.0);
    if (a4)
    {
      v27 = v26 != -1.0 || v24 == -1.0;
      if (!v27 && v24 <= a7)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021545A8);
        v28 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#Warning, new start time for %@ is after it's stored time", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 == -1)
          goto LABEL_123;
        goto LABEL_125;
      }
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", v22, v12, a7);
      objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", v25, v12);
      if (!v27)
      {
LABEL_41:
        v29 = 0;
        if (a6)
        {
LABEL_116:
          sub_10019627C(a1, (uint64_t)v12);
          return v29;
        }
        goto LABEL_83;
      }
    }
    else
    {
      if (v24 == -1.0)
        v30 = a5;
      else
        v30 = 1;
      if (v30 != 1)
        goto LABEL_41;
      objc_msgSend(*(id *)(a1 + 136), "setDouble:forKey:atKeyPath:", v25, v12, a7);
      objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", v22, v12);
      sub_100091C2C(a1);
    }
LABEL_67:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v37 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v38 = off_102153B38[v59];
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v12;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v38;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a4;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Service: key, %@, type, %s, active, %d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v55 = off_102153B38[v59];
      v69 = 138412802;
      v70 = v12;
      v71 = 2080;
      v72 = v55;
      v73 = 1024;
      v74 = a4;
      v56 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Service: key, %@, type, %s, active, %d", &v69, 28);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::setClientServiceActiveAtTime(CLClientKeyPath *, CLClientServiceType, BOOL, BOOL, double, Device)", "%s\n", v56);
      if (v56 != buf)
        free(v56);
    }
    sub_10019DBAC((_BYTE *)a1);
    if (a6)
    {
      v29 = 1;
      goto LABEL_111;
    }
    if (!_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync")
      || v59 <= 0xA && ((1 << v59) & 0x430) != 0)
    {
      v39 = (const char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
      v40 = v39 ? (char *)v39 : "";
      sub_1015A2E04(buf, v40);
      sub_10019DC1C(a1, buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
    v41 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v12), "dictionary");
    v67 = objc_msgSend(v12, "legacyClientKey");
    v68 = v41;
    sub_10019DFF0((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v68, &v67, 1), (uint64_t)"clientStatus");
    v29 = 1;
LABEL_83:
    if (((1 << v59) & 0xFFFFFFD1) == 0)
    {
      if (a4)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v42 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v12;
          v79 = 2050;
          v80 = v59;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla mark service active and start zone-monitoring\", \"Client\":%{public, location:escape_only}@, \"SpecifiedService\":%{public, location:CLClientServiceType}lld}", buf, 0x26u);
        }
        v43 = (char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
        if (v43)
          v44 = v43;
        else
          v44 = "";
        sub_1015A2E04(buf, v44);
        sub_1001A9D64(a1, (uint64_t *)buf, 1);
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v45 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v12;
          v79 = 2050;
          v80 = v59;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla mark service inactive and try stop zone-monitoring\", \"Client\":%{public, location:escape_only}@, \"SpecifiedService\":%{public, location:CLClientServiceType}lld}", buf, 0x26u);
        }
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v46 = (void *)qword_102304A08;
        v47 = objc_msgSend((id)qword_102304A08, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
        if (v47)
        {
          v48 = *(_QWORD *)v61;
LABEL_99:
          v49 = 0;
          while (1)
          {
            if (*(_QWORD *)v61 != v48)
              objc_enumerationMutation(v46);
            v50 = *(_QWORD *)(*((_QWORD *)&v60 + 1) + 8 * v49);
            v51 = objc_autoreleasePoolPush();
            LOBYTE(v50) = objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", v50, v12);
            objc_autoreleasePoolPop(v51);
            if ((v50 & 1) != 0)
              goto LABEL_111;
            if (v47 == (id)++v49)
            {
              v47 = objc_msgSend(v46, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
              if (v47)
                goto LABEL_99;
              break;
            }
          }
        }
        v52 = (char *)objc_msgSend(objc_msgSend(v12, "legacyClientKey"), "UTF8String");
        if (v52)
          v53 = v52;
        else
          v53 = "";
        sub_1015A2E04(buf, v53);
        sub_1001A9D64(a1, (uint64_t *)buf, 0);
      }
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
    }
LABEL_111:
    if (v59 == 3 && (_DWORD)v29)
    {
      sub_1015A2E04(buf, "");
      sub_100193838(a1, v12, (uint64_t)buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      v29 = 1;
    }
    goto LABEL_116;
  }
  v14 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", objc_msgSend(*(id *)(a1 + 136), "dictionaryForKey:atKeyPath:defaultValue:", CFSTR("RemoteUsage"), v12, &__NSDictionary0__struct));
  v15 = objc_msgSend(v12, "isAuthSharingSubIdentity");
  v16 = v65;
  v17 = -[NSMutableDictionary objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", v65);
  v18 = v64;
  v19 = -[NSMutableDictionary objectForKeyedSubscript:](v14, "objectForKeyedSubscript:", v64);
  if ((v15 & 1) != 0)
  {
    if (a4)
    {
      if (!v17 || v19)
      {
        v77[0] = &off_10221B648;
        v77[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a7);
        v20 = 1;
        v21 = v77;
      }
      else
      {
        v76[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue") + 1);
        v20 = 0;
        v76[1] = objc_msgSend(v17, "objectAtIndexedSubscript:", 1);
        v21 = v76;
      }
      v33 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v21, 2);
LABEL_56:
      -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v33, v16);
      -[NSMutableDictionary removeObjectForKey:](v14, "removeObjectForKey:", v18);
      objc_msgSend(*(id *)(a1 + 136), "setDictionary:forKey:atKeyPath:", v14, CFSTR("RemoteUsage"), v12);
      if (!v20)
        goto LABEL_57;
      goto LABEL_67;
    }
    if (v17)
      v34 = 1;
    else
      v34 = a5;
    if (v34 == 1)
    {
      if ((int)objc_msgSend(objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue") >= 2)
      {
        v75[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(objc_msgSend(v17, "objectAtIndexedSubscript:", 0), "intValue") - 1);
        v75[1] = objc_msgSend(v17, "objectAtIndexedSubscript:", 1);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v75, 2), v16);
LABEL_66:
        sub_100091C2C(a1);
        objc_msgSend(*(id *)(a1 + 136), "setDictionary:forKey:atKeyPath:", v14, CFSTR("RemoteUsage"), v12);
        goto LABEL_67;
      }
LABEL_65:
      -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a7), v18);
      -[NSMutableDictionary removeObjectForKey:](v14, "removeObjectForKey:", v16);
      goto LABEL_66;
    }
LABEL_53:
    objc_msgSend(*(id *)(a1 + 136), "setDictionary:forKey:atKeyPath:", v14, CFSTR("RemoteUsage"), v12);
LABEL_57:
    v29 = 0;
    goto LABEL_116;
  }
  if (!a4)
  {
    if (v17)
      v35 = 1;
    else
      v35 = a5;
    if (v35 == 1)
      goto LABEL_65;
    goto LABEL_53;
  }
  if (v17)
    v31 = v19 == 0;
  else
    v31 = 0;
  v20 = !v31;
  if (!v31 || (objc_msgSend(v17, "doubleValue"), v32 > a7))
  {
    v33 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a7);
    goto LABEL_56;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  v36 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "#Warning, new start time for %@ is after it's stored time", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 == -1)
    {
LABEL_123:
      v69 = 138412290;
      v70 = v12;
      v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "#Warning, new start time for %@ is after it's stored time", &v69, 12);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::setClientServiceActiveAtTime(CLClientKeyPath *, CLClientServiceType, BOOL, BOOL, double, Device)", "%s\n", v57);
      if (v57 != buf)
        free(v57);
      return 0;
    }
LABEL_125:
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    goto LABEL_123;
  }
  return 0;
}

void sub_100195A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100195B0C(uint64_t a1, uint64_t a2)
{
  id v4;
  void *__p[2];
  char v7;

  v4 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (!objc_msgSend(v4, "isValidCKP")
    || objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", CFSTR("TimeMissing"), v4))
  {
    v4 = objc_msgSend(*(id *)(a1 + 136), "registerClient:fromAuthSync:", a2, 0);
    sub_1015A2E04(__p, "");
    sub_100193838(a1, v4, __p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  return v4;
}

void sub_100195BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100195BD4(uint64_t a1, _QWORD *a2, __CFString **a3)
{
  __CFString **v4;
  __CFString *v5;
  BOOL v6;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  *a2 = 0;
  switch(a1)
  {
    case 0:
      *a2 = CFSTR("BeaconRegionTimeStarted");
      v4 = &off_1021AF3D8;
      goto LABEL_17;
    case 1:
      *a2 = CFSTR("FenceTimeStarted");
      v4 = &off_1021AF3E8;
      goto LABEL_17;
    case 2:
      *a2 = CFSTR("RangeTimeStarted");
      v4 = &off_1021AF3F8;
      goto LABEL_17;
    case 3:
      *a2 = CFSTR("SignificantTimeStarted");
      v4 = &off_1021AF408;
      goto LABEL_17;
    case 4:
      *a2 = CFSTR("LocationTimeStarted");
      v4 = &off_1021AF418;
      goto LABEL_17;
    case 5:
      *a2 = CFSTR("BackgroundLocationTimeStarted");
      v4 = &off_1021AF428;
      goto LABEL_17;
    case 6:
      *a2 = CFSTR("VisitTimeStarted");
      v4 = &off_1021AF438;
      goto LABEL_17;
    case 7:
      *a2 = CFSTR("RemoteLocationTimeStarted");
      v4 = &off_1021AF4D0;
      goto LABEL_17;
    case 8:
      *a2 = CFSTR("MicroLocationTimeStarted");
      v4 = &off_1021AF4F0;
      goto LABEL_17;
    case 9:
      *a2 = CFSTR("RemoteFenceTimeStarted");
      v4 = &off_1021AF4E0;
      goto LABEL_17;
    case 10:
      *a2 = CFSTR("ReceivingLocationInformationTimeStarted");
      v4 = &off_1021AF448;
      goto LABEL_17;
    case 11:
      *a2 = CFSTR("NonPersistentSignificantTimeStarted");
      v4 = &off_1021AF458;
      goto LABEL_17;
    case 15:
      *a2 = CFSTR("PushTimeStarted");
      v4 = &off_1021AF468;
      goto LABEL_17;
    case 16:
      *a2 = CFSTR("TranscriptTimeStarted");
      v4 = &off_1021AF478;
LABEL_17:
      v5 = *v4;
      *a3 = v5;
      break;
    default:
      v5 = *a3;
      break;
  }
  if (*a2)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Unsupported CLClientServiceType\", \"serviceType\":%{public}lu}", (uint8_t *)v8, 0x1Cu);
    }
  }
}

id sub_100195E80(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v6;
  void *v7;
  int v8;

  v6 = sub_100196E90(a1, a3);
  if (a4 && (v7 = v6, sub_100197040(), v8 = sub_100195F08(), a2 == 3) && v8)
    return objc_msgSend(objc_msgSend(v7, "bundlePath"), "isEqualToString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "/System/Library/LocationBundles/AppleWatchFaces.bundle"));
  else
    return 0;
}

uint64_t sub_100195F08()
{
  return 0;
}

void sub_100196208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10019627C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  unint64_t v11;
  _BOOL4 v12;
  NSObject *v13;
  _QWORD *v14;
  void **p_p;
  void *__p;
  _BYTE v17[20];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int16 v24;
  _BOOL4 v25;

  v3 = sub_100196E90(a1, a2);
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v3), "dictionary");
  if (v3)
  {
    objc_msgSend(v3, "cppClientKey");
  }
  else
  {
    __p = 0;
    *(_QWORD *)v17 = 0;
    *(_QWORD *)&v17[8] = 0;
  }
  v5 = sub_1001987C8((_QWORD *)(a1 + 1328), (unsigned __int8 *)&__p);
  v6 = v5;
  if ((v17[15] & 0x80000000) == 0)
  {
    if (v5)
      goto LABEL_6;
LABEL_9:
    v9 = sub_10019978C(v4);
    v7 = 0;
    goto LABEL_15;
  }
  operator delete(__p);
  if (!v6)
    goto LABEL_9;
LABEL_6:
  v7 = *((_QWORD *)v6 + 5);
  v8 = *((unsigned int *)v6 + 12);
  v9 = sub_10019978C(v4);
  if ((_DWORD)v9 == (_DWORD)v8)
  {
    v9 = v8;
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68290050;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2114;
      *(_QWORD *)&v17[12] = v3;
      v18 = 2050;
      v19 = v8;
      v20 = 2050;
      v21 = v9;
      v22 = 2050;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim moving arrow retain count between entity classes\", \"Client\":%{public, location:escape_only}@, \"oldEntityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"newEntityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&__p, 0x3Au);
    }
    sub_10019C5C8(a1, v9, v7, 1, 0);
    sub_10019C5C8(a1, v8, v7, 0, 0);
  }
LABEL_15:
  v11 = sub_100199118(v4, 0);
  if (v11 == v7)
  {
    v11 = v7;
  }
  else
  {
    v12 = (sub_100199284(v4) & 6) == 0 || sub_10019CFA0() != 1;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68290306;
      *(_WORD *)v17 = 2082;
      *(_QWORD *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2114;
      *(_QWORD *)&v17[12] = v3;
      v18 = 2050;
      v19 = v9;
      v20 = 2050;
      v21 = v7;
      v22 = 2050;
      v23 = v11;
      v24 = 1026;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim client arrow state changed\", \"Client\":%{public, location:escape_only}@, \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"oldArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"dueToDeauthorization\":%{public}hhd}", (uint8_t *)&__p, 0x40u);
    }
    sub_10019C5C8(a1, v9, v11, 1, v12);
    sub_10019C5C8(a1, v9, v7, 0, v12);
  }
  if (v11)
  {
    if (v3)
    {
      objc_msgSend(v3, "cppClientKey");
    }
    else
    {
      __p = 0;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)&v17[8] = 0;
    }
    p_p = &__p;
    v14 = sub_100199794(a1 + 1328, (unsigned __int8 *)&__p, (uint64_t)&unk_101B9EB60, (__int128 **)&p_p);
    v14[5] = v11;
    *((_DWORD *)v14 + 12) = v9;
  }
  else
  {
    if (v3)
    {
      objc_msgSend(v3, "cppClientKey");
    }
    else
    {
      __p = 0;
      *(_QWORD *)v17 = 0;
      *(_QWORD *)&v17[8] = 0;
    }
    sub_10019C594((_QWORD *)(a1 + 1328), (unsigned __int8 *)&__p);
  }
  if ((v17[15] & 0x80000000) != 0)
    operator delete(__p);
}

void sub_100196624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001966C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  id v10;
  id v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  NSObject *v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  void *v18;
  int v19;
  NSObject *v20;
  CLAttributionRecord *v21;
  NSObject *v22;
  id v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  double v27;
  int v28;
  NSObject *v29;
  double v30;
  double v31;
  uint64_t v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  uint64_t v36;
  _QWORD v37[9];
  char v38;
  uint8_t buf[8];
  __int16 v40;
  const char *v41;
  __int16 v42;
  _BYTE v43[28];

  sub_100197040();
  if (!sub_1001974CC())
    return;
  v10 = sub_100196E90(a1, a2);
  v11 = objc_msgSend(v10, "clientAnchor");
  if (!v11)
    goto LABEL_5;
  sub_1015A2E04(buf, (char *)objc_msgSend(v11, "UTF8String"));
  v12 = sub_1001987C8(qword_1023049C8, buf);
  v13 = v12;
  if ((v43[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v13)
      goto LABEL_5;
  }
  else if (v12)
  {
LABEL_5:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v40 = 2082;
      v41 = "";
      v42 = 2114;
      *(_QWORD *)v43 = v10;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting attribution for attribution-unavailable client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v15 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v40 = 2082;
      v41 = "";
      v42 = 2114;
      *(_QWORD *)v43 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatusAttribution attempting attribution for attribution-unavailable client", "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting attribution for attribution-unavailable client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return;
  }
  v16 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v10), "dictionary");
  v17 = sub_100197514(v10, v16);
  if (!v17)
    return;
  if (v17 == 2)
  {
    v18 = (void *)qword_102304A68;
    if (*(_QWORD *)(a1 + 424) == 1)
    {
      v19 = 0;
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v20 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2114;
        *(_QWORD *)v43 = v18;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attribution to System Service; defaulting to Traffic for recor"
          "d keeping\", \"SystemService\":%{public, location:escape_only}@}",
          buf,
          0x1Cu);
      }
      v19 = 1;
    }
  }
  else
  {
    v19 = 1;
    v18 = v10;
  }
  v21 = (CLAttributionRecord *)objc_msgSend(*(id *)(a1 + 416), "objectForKey:", v18);
  if (v21)
    goto LABEL_25;
  v23 = sub_1000558D8(0, v18, v16);
  v24 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  if (!v23)
    return;
  v21 = -[CLAttributionRecord initWithAttributionId:andTimer:]([CLAttributionRecord alloc], "initWithAttributionId:andTimer:", v23, v24);
  objc_msgSend(*(id *)(a1 + 416), "setObject:forKey:", v21, v18);
  v25 = *(_QWORD *)(a1 + 416);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  v37[2] = sub_1007C3AE4;
  v37[3] = &unk_102153CD8;
  v37[7] = v25;
  v37[8] = a1;
  v38 = v19;
  v37[4] = v18;
  v37[5] = v21;
  v37[6] = v10;
  -[CLTimer setHandler:](-[CLAttributionRecord attributionTimer](v21, "attributionTimer"), "setHandler:", v37);
  if (v19)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v26 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v40 = 2082;
      v41 = "";
      v42 = 2114;
      *(_QWORD *)v43 = v18;
      *(_WORD *)&v43[8] = 2114;
      *(_QWORD *)&v43[10] = v21;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution Created new AttributionRecord for client\", \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", buf, 0x26u);
    }
LABEL_25:
    if (a3 != -1 && (a4 & 1) != 0)
    {
      -[CLAttributionRecord incrementAttributionCountForServiceType:](v21, "incrementAttributionCountForServiceType:", a3);
      if (v19)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v22 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          v40 = 2082;
          v41 = "";
          v42 = 1026;
          *(_DWORD *)v43 = a3;
          *(_WORD *)&v43[4] = 2114;
          *(_QWORD *)&v43[6] = v18;
          *(_WORD *)&v43[14] = 2114;
          *(_QWORD *)&v43[16] = v21;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution #AttributionRecord servicetype count incremented\", \"ServiceType\":%{public}d, \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", buf, 0x2Cu);
        }
      }
    }
    goto LABEL_41;
  }
  if (a3 != -1 && a4)
    -[CLAttributionRecord incrementAttributionCountForServiceType:](v21, "incrementAttributionCountForServiceType:", a3);
LABEL_41:
  v27 = 10.0;
  if (a5 > 0.0)
  {
    v28 = a5 > 60.0 ? v19 : 0;
    v27 = a5 <= 60.0 ? a5 : 60.0;
    if (v28 == 1)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v29 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2114;
        *(_QWORD *)v43 = v18;
        *(_WORD *)&v43[8] = 2050;
        *(double *)&v43[10] = a5;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribtuion attributionDuration longer than 1m. Shortening attribution duration to 1m\", \"client\":%{public, location:escape_only}@, \"attributionDuration\":\"%{public}f\"}", buf, 0x26u);
      }
      v27 = 60.0;
    }
  }
  -[CLTimer nextFireDelay](-[CLAttributionRecord attributionTimer](v21, "attributionTimer"), "nextFireDelay");
  if (v30 == 1.79769313e308)
  {
    sub_1001B87DC(a1, v10, (uint64_t)-[CLAttributionRecord attributionIdentifier](v21, "attributionIdentifier"));
    -[CLTimer setNextFireDelay:](-[CLAttributionRecord attributionTimer](v21, "attributionTimer"), "setNextFireDelay:", v27);
    if (v19)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v36 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2114;
        *(_QWORD *)v43 = v18;
        *(_WORD *)&v43[8] = 2114;
        *(_QWORD *)&v43[10] = v21;
        v33 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution Started attribution timer for client\", \"Client\":%{publi"
              "c, location:escape_only}@, \"Record\":%{public, location:escape_only}@}";
        v34 = v36;
        v35 = 38;
        goto LABEL_67;
      }
    }
  }
  else
  {
    -[CLTimer nextFireDelay](-[CLAttributionRecord attributionTimer](v21, "attributionTimer"), "nextFireDelay");
    if (v27 > v31)
      -[CLTimer setNextFireDelay:](-[CLAttributionRecord attributionTimer](v21, "attributionTimer"), "setNextFireDelay:", v27);
    if (v19)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v32 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        v40 = 2082;
        v41 = "";
        v42 = 2114;
        *(_QWORD *)v43 = v18;
        *(_WORD *)&v43[8] = 2114;
        *(_QWORD *)&v43[10] = v21;
        *(_WORD *)&v43[18] = 2050;
        *(double *)&v43[20] = v27;
        v33 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution Extended attribution timer for client\", \"Client\":%{publ"
              "ic, location:escape_only}@, \"Record\":%{public, location:escape_only}@, \"Duration\":\"%{public}f\"}";
        v34 = v32;
        v35 = 48;
LABEL_67:
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
      }
    }
  }
}

id sub_100196E90(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v3, "isValidCKP") & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"resolveCKPToRegisteredCKPOrLogError: the passed ckp must resolve to a registered ckp. Resolving to #nullCKP\", \"InputCKP\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v5 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2114;
      v12 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "resolveCKPToRegisteredCKPOrLogError: the passed ckp must resolve to a registered ckp. Resolving to #nullCKP", "{\"msg%{public}.0s\":\"resolveCKPToRegisteredCKPOrLogError: the passed ckp must resolve to a registered ckp. Resolving to #nullCKP\", \"InputCKP\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
    }
    return +[CLClientKeyPath nullClientKeyPath](CLClientKeyPath, "nullClientKeyPath");
  }
  return v3;
}

uint64_t sub_100197040()
{
  if (qword_102303CA0 != -1)
    dispatch_once(&qword_102303CA0, &stru_102151390);
  return qword_102310C50;
}

BOOL sub_1001974CC()
{
  if (qword_102303E40 != -1)
    dispatch_once(&qword_102303E40, &stru_102151570);
  return (byte_102303E38 & 1) == 0;
}

uint64_t sub_100197514(void *a1, void *a2)
{
  int v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  void *v12;

  v3 = sub_100198084(a2);
  result = 0;
  switch(v3)
  {
    case 0:
      if (objc_msgSend(a1, "isEqual:", qword_102304A68))
        result = 2;
      else
        result = 1;
      break;
    case 1:
    case 2:
    case 6:
      result = 1;
      break;
    case 3:
    case 5:
      result = 2;
      break;
    case 4:
      result = 6;
      break;
    case 7:
      result = 10;
      break;
    case 9:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v5 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v7 = 68289282;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2114;
        v12 = a1;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus failed to determine eligibleModes\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v6 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v7 = 68289282;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2114;
        v12 = a1;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus failed to determine eligibleModes", "{\"msg%{public}.0s\":\"#SystemStatus failed to determine eligibleModes\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x1Cu);
      }
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100197710(void *a1, int a2)
{
  id v4;
  const __CFString *v5;
  uint64_t result;
  __CFString *v7;
  unsigned int v8;

  v4 = objc_msgSend(a1, "objectForKey:", CFSTR("BundleId"));
  v5 = (const __CFString *)objc_msgSend(a1, "objectForKey:", CFSTR("BundlePath"));
  if (v4)
  {
    if (!a2)
      return 1;
    if (objc_msgSend(a1, "objectForKey:", CFSTR("Registered")))
      return 1;
    if (objc_msgSend(a1, "objectForKey:", CFSTR("Authorized")))
      return 1;
    result = (uint64_t)objc_msgSend(a1, "objectForKey:", CFSTR("Authorization"));
    if (result)
      return 1;
  }
  else
  {
    v7 = (__CFString *)v5;
    if (v5)
    {
      if (sub_1001979F0(v5))
      {
        return 4;
      }
      else
      {
        if (sub_100197ACC(v7))
        {
          v8 = 5;
        }
        else if (sub_100197FA8(v7))
        {
          v8 = 7;
        }
        else if (sub_100197C20(v7))
        {
          v8 = 8;
        }
        else if (sub_100197BA8(v7))
        {
          v8 = 3;
        }
        else
        {
          v8 = 2;
        }
        if (sub_10019782C(v7))
          return v8;
        else
          return 6;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10019782C(const __CFString *a1)
{
  uint64_t v2;
  CFArrayRef v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 1;
  v2 = sub_100197BE0();
  v3 = sub_1001978EC(v2, a1);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000C271C;
  v6[3] = &unk_10218B948;
  v6[4] = &v7;
  -[__CFArray enumerateObjectsUsingBlock:](v3, "enumerateObjectsUsingBlock:", v6);

  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1001978D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CFArrayRef sub_1001978EC(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  const __CFArray *v5;
  CFArrayRef v6;
  CFTypeID v7;

  v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  if (!a2)
  {
    v6 = 0;
    goto LABEL_8;
  }
  v5 = (const __CFArray *)sub_100197F20(*(__CFDictionary **)(a1 + 32), a2, CFSTR("CLRequiredCapabilities"));
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFArrayGetTypeID())
      goto LABEL_8;
    CFRelease(v6);
  }
  v6 = CFArrayCreate(kCFAllocatorDefault, 0, 0, &kCFTypeArrayCallBacks);
  if (v6)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v6);
LABEL_8:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v6;
}

void sub_1001979DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1001979F0(const __CFString *a1)
{
  uint64_t v2;

  v2 = sub_100197BE0();
  return sub_100197A18(v2, a1);
}

BOOL sub_100197A18(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _BOOL8 v6;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v4 = sub_100197EB0(*(__CFDictionary **)(v3 - 32), a2, CFSTR("CLIsFindMyiPhone"));
  v5 = v4;
  if (v4)
  {
    v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v6;
}

void sub_100197AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100197ACC(const __CFString *a1)
{
  uint64_t v2;

  v2 = sub_100197BE0();
  return sub_100197AF4(v2, a1);
}

BOOL sub_100197AF4(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _BOOL8 v6;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v4 = sub_100197EB0(*(__CFDictionary **)(v3 - 24), a2, CFSTR("CLIsCoreRoutine"));
  v5 = v4;
  if (v4)
  {
    v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v6;
}

void sub_100197B94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100197BA8(__CFString *a1)
{
  uint64_t v3;

  if (sub_100197C20(a1))
    return 1;
  v3 = sub_100197BE0();
  return sub_100197DF8(v3, a1);
}

uint64_t sub_100197BE0()
{
  if (qword_10230BF68 != -1)
    dispatch_once(&qword_10230BF68, &stru_10219C5C0);
  return qword_102311C40;
}

BOOL sub_100197C20(void *a1)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t i;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[3];

  v2 = atomic_load((unsigned __int8 *)&qword_1023017A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1023017A0))
  {
    sub_1015A2E04(&v7, "/System/Library/LocationBundles/LocationPromptUI.bundle");
    sub_1015A2E04(v8, "/System/Library/LocationBundles/LocationFenceSync.bundle");
    sub_1015A2E04(v9, "/System/Library/LocationBundles/PLAMonitor.bundle");
    sub_100516420((uint64_t)&qword_102301788, &v7, 3uLL);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
    __cxa_atexit((void (*)(void *))sub_1005164BC, &qword_102301788, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1023017A0);
  }
  v3 = (unsigned __int8 *)qword_102301788;
  v4 = (unsigned __int8 *)qword_102301790;
  *(_QWORD *)&v7 = objc_msgSend(a1, "UTF8String");
  return sub_1005175F0(v3, v4, (const char **)&v7) != (unsigned __int8 *)qword_102301790;
}

void sub_100197D84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0)
      operator delete(*(void **)(v1 + v3 + 48));
    v3 -= 24;
    if (v3 == -72)
    {
      __cxa_guard_abort(&qword_1023017A0);
      _Unwind_Resume(a1);
    }
  }
}

BOOL sub_100197DF8(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  _BOOL8 v7;

  v4 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v5 = sub_100197EB0(*(__CFDictionary **)a1, a2, CFSTR("CLSystemService"));
  v6 = v5;
  if (v5)
  {
    v7 = CFBooleanGetValue(v5) != 0;
    CFRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v7;
}

void sub_100197E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

CFBooleanRef sub_100197EB0(__CFDictionary *a1, const __CFString *a2, const __CFString *a3)
{
  const __CFBoolean *v5;
  CFBooleanRef v6;
  CFTypeID v7;

  v5 = (const __CFBoolean *)sub_100197F20(a1, a2, a3);
  if (!v5)
    goto LABEL_4;
  v6 = v5;
  v7 = CFGetTypeID(v5);
  if (v7 != CFBooleanGetTypeID())
  {
    CFRelease(v6);
LABEL_4:
    v6 = kCFBooleanFalse;
    CFDictionarySetValue(a1, a2, kCFBooleanFalse);
  }
  return v6;
}

void *sub_100197F20(__CFDictionary *a1, const __CFString *a2, const __CFString *a3)
{
  void *v7;
  void *value;

  value = 0;
  if (!a2)
    return 0;
  if (CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value))
  {
    if (value)
      CFRetain(value);
  }
  else
  {
    v7 = (void *)sub_10051636C(a2, a3);
    value = v7;
    if (v7)
      CFDictionarySetValue(a1, a2, v7);
  }
  return value;
}

BOOL sub_100197FA8(const __CFString *a1)
{
  uint64_t v2;

  v2 = sub_100197BE0();
  return sub_100197FD0(v2, a1);
}

BOOL sub_100197FD0(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _BOOL8 v6;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v4 = sub_100197EB0(*(__CFDictionary **)(v3 - 8), a2, CFSTR("CLEmergencyService"));
  v5 = v4;
  if (v4)
  {
    v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v6;
}

void sub_100198070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100198084(void *a1)
{
  return sub_100197710(a1, 1);
}

BOOL sub_10019808C(uint64_t a1, uint64_t a2, int a3, char a4)
{
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  double Current;
  NSObject *v12;
  dispatch_time_t v13;
  id v14;
  id v15;
  PAApplication *v16;
  id v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD v22[6];
  uint8_t buf[4];
  _BYTE v24[14];
  __int16 v25;
  id v26;

  v7 = sub_100196E90(a1, a2);
  if ((objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("isSystemService"), v7, 0) & 1) == 0)
  {
    if (a3 && (int)sub_1001985D8(*(_QWORD *)(a1 + 376), v7) <= 1)
      sub_1001988C8(a1, *(void **)(a1 + 480), a1 + 440, v7);
    else
      sub_10019E180(a1, *(void **)(a1 + 480), (_QWORD *)(a1 + 440), v7);
  }
  v8 = objc_msgSend(*(id *)(a1 + 392), "objectForKeyedSubscript:", v7);
  if (qword_102304AC0 != -1)
    dispatch_once(&qword_102304AC0, &stru_1021545C8);
  v9 = qword_102304AB8;
  if (os_log_type_enabled((os_log_t)qword_102304AB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Delivered location information to '%@'", buf, 0xCu);
  }
  v10 = v8;
  if (!v8)
  {
    Current = CFAbsoluteTimeGetCurrent();
    sub_100194D94(a1, v7, 10, 1, 0, 0, Current);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v24 = 0;
      *(_WORD *)&v24[4] = 2082;
      *(_QWORD *)&v24[6] = "";
      v25 = 2114;
      v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"started receiving location information\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v10 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100028A80;
    v22[3] = &unk_102131360;
    v22[4] = v7;
    v22[5] = a1;
    dispatch_source_set_event_handler(v10, v22);
    objc_msgSend(*(id *)(a1 + 392), "setObject:forKeyedSubscript:", v10, v7);

  }
  v13 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v10, v13, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  if (!v8)
  {
    dispatch_resume(v10);
    if ((a4 & 1) != 0)
      goto LABEL_19;
    goto LABEL_18;
  }
  if ((a4 & 1) == 0)
LABEL_18:
    sub_1001966C4(a1, (uint64_t)v7, -1, 0, 0.0);
LABEL_19:
  if ((objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v7) & 1) != 0
    || !-[PAAccessLogger loggingEnabled](+[PAAccessLogger sharedInstance](PAAccessLogger, "sharedInstance"), "loggingEnabled")|| objc_msgSend(*(id *)(a1 + 432), "objectForKeyedSubscript:", v7))
  {
    return v8 == 0;
  }
  v14 = objc_msgSend(v7, "bundleId");
  v15 = objc_msgSend(v7, "bundlePath");
  if (v14)
  {
    v16 = +[PAApplication applicationWithBundleID:](PAApplication, "applicationWithBundleID:", v14);
    goto LABEL_24;
  }
  v18 = v15;
  if (v15)
  {
    v19 = PAImplicitClientIdentityForBundle(+[NSBundle bundleWithPath:](NSBundle, "bundleWithPath:", v15));
    if (v19)
      v16 = (PAApplication *)objc_msgSend(objc_alloc((Class)PAApplication), "initWithTCCIdentity:", v19);
    else
      v16 = +[PAApplication applicationWithPath:](PAApplication, "applicationWithPath:", v18);
LABEL_24:
    if (v16)
      objc_msgSend(*(id *)(a1 + 432), "setObject:forKeyedSubscript:", -[PAAccessLogger beginIntervalForAccess:](+[PAAccessLogger sharedInstance](PAAccessLogger, "sharedInstance"), "beginIntervalForAccess:", objc_msgSend(objc_alloc((Class)PALocationAccess), "initWithAccessor:", v16)), v7);
    return v8 == 0;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  v20 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v24 = 0;
    *(_WORD *)&v24[4] = 2082;
    *(_QWORD *)&v24[6] = "";
    v25 = 2114;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Don't know how to convert name to PAApplication\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  }
  v21 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v24 = 0;
    *(_WORD *)&v24[4] = 2082;
    *(_QWORD *)&v24[6] = "";
    v25 = 2114;
    v26 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Don't know how to convert name to PAApplication", "{\"msg%{public}.0s\":\"Don't know how to convert name to PAApplication\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  return v8 == 0;
}

uint64_t sub_1001985D8(uint64_t a1, void *a2)
{
  id v2;
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t result;
  void *__p[2];
  uint64_t v10;

  v2 = a2;
  if (objc_msgSend(a2, "isAuthSharingSubIdentity"))
    v2 = objc_msgSend(v2, "anchorKeyPath");
  v4 = (_QWORD *)(a1 + 16);
  if (v2)
  {
    objc_msgSend(v2, "cppClientKey");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v10 = 0;
  }
  v5 = sub_1001986C8(v4, (unsigned __int8 *)__p);
  v6 = v5;
  if ((SHIBYTE(v10) & 0x80000000) == 0)
  {
    if (v5)
      goto LABEL_8;
    return 0;
  }
  operator delete(__p[0]);
  if (!v6)
    return 0;
LABEL_8:
  v7 = &dword_100000014;
  do
  {
    if (v7 == -4)
      goto LABEL_13;
    result = *(unsigned int *)((char *)&unk_101C1E920 + v7);
    if (result >= 6)
      sub_100263950("array::at");
    v7 -= 4;
  }
  while (!*(_DWORD *)&v6[4 * result + 40]);
  if (!(_DWORD)result)
LABEL_13:
    sub_1019230E8();
  return result;
}

void sub_1001986AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1001986C8(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_10025A024((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_10025A4CC(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *sub_1001987C8(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_10025A024((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((sub_10025A4CC(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void sub_1001988C8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v8;
  NSObject *v9;
  unsigned __int8 *v10;
  NSObject *v11;
  std::string *p_p;
  id v13;
  std::string *v14;
  NSObject *v15;
  std::string *v16;
  NSObject *v17;
  std::string *v18;
  std::string __p;
  uint8_t buf[40];

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    memset(&__p, 0, sizeof(__p));
    if (objc_msgSend(a4, "isValidCKP"))
    {
      v8 = sub_100196E90(a1, (uint64_t)a4);
      if (v8)
        objc_msgSend(v8, "cppClientKey");
      else
        memset(buf, 0, 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = *(std::string *)buf;
    }
    else
    {
      std::string::assign(&__p, (const std::string::value_type *)objc_msgSend(CFSTR("com.apple.locationd.all-location-clients-stop"), "UTF8String"));
    }
    *(_QWORD *)buf = &__p;
    v10 = sub_100198D24(a3, (unsigned __int8 *)&__p, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
    if (*((double *)v10 + 5) == 0.0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v11 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Updating location consumption info on start\", \"Client\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      *((CFAbsoluteTime *)v10 + 5) = CFAbsoluteTimeGetCurrent();
      v13 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &__p;
      else
        v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(v13, "setClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14, __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]));
      objc_msgSend(v13, "setStartTime:", *((double *)v10 + 5));
      objc_msgSend(a2, "writeSecondaryObject:toField:", v13, 1);
      if (a1 + 784 != sub_10019C4C0(a1 + 776, (const void **)&__p.__r_.__value_.__l.__data_))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v15 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          v16 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Faulting for backtrace explaining usage score increment\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v17 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v18 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v18;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Faulting for backtrace explaining usage score increment", "{\"msg%{public}.0s\":\"Faulting for backtrace explaining usage score increment\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_100198CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_100198D24(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_1003A7F60(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_10012E444(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_100198F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_1002A20A8((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100198FB8(void *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v4 = 0;
  v5 = 0;
  v6 = (uint64_t *)&off_10218B970;
  do
  {
    if (sub_100199044(a1, *(v6 - 1), *v6, a2 - dbl_101C29DB8[v4]))
      v5 = dword_101C29E08[v4] | v5;
    ++v4;
    v6 += 2;
  }
  while (v4 != 10);
  return v5;
}

BOOL sub_100199044(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double v16;

  v7 = objc_msgSend(a1, "objectForKey:", a2);
  v8 = objc_msgSend(a1, "objectForKey:", a3);
  v9 = v8;
  if (!v7 || !v8)
  {
LABEL_5:
    v13 = v9 != 0;
    if (v7 && !v9)
      return 1;
    goto LABEL_9;
  }
  objc_msgSend(v7, "doubleValue");
  v11 = v10;
  objc_msgSend(v9, "doubleValue");
  if (v11 > v12)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v13 = 1;
LABEL_9:
  if (a4 <= 0.0)
    return 0;
  if (!v13)
    return 0;
  -[NSDate timeIntervalSinceReferenceDate](+[NSDate date](NSDate, "date"), "timeIntervalSinceReferenceDate");
  v15 = v14;
  objc_msgSend(v9, "doubleValue");
  return a4 - vabdd_f64(v16, v15) > 0.0;
}

uint64_t sub_100199118(void *a1, int a2)
{
  int v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v3 = sub_1001991F4(a1, a2);
  if ((v3 & 0x240) != 0)
    return 2;
  if (!v3)
    return 0;
  v5 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("InUseLevel"));
  v7 = objc_opt_class(NSNumber, v6);
  if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
    v8 = objc_msgSend(v5, "intValue");
  else
    v8 = 0;
  v9 = objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("ProvisionalMonitoring"));
  v11 = objc_opt_class(NSNumber, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
    v12 = objc_msgSend(v9, "BOOLValue") ^ 1;
  else
    v12 = 1;
  if (v8)
    return 1;
  else
    return v12;
}

uint64_t sub_1001991F4(void *a1, int a2)
{
  char v4;
  double v5;
  double v6;
  int v7;
  id v8;

  v4 = sub_100199284(a1);
  v5 = 60.0;
  if (a2 != 2)
    v5 = 0.0;
  if (a2 == 1)
    v5 = 10.0;
  if ((v4 & 6) != 0)
    v6 = v5;
  else
    v6 = -1.0;
  v7 = sub_100198FB8(a1, v6);
  v8 = sub_100199324(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("RemoteUsage")));
  if (v8)
    LODWORD(v8) = sub_100198FB8(v8, v6);
  return v8 | v7;
}

uint64_t sub_100199284(void *a1)
{
  id v2;
  unint64_t v3;
  id v5;
  uint64_t v6;

  v2 = objc_msgSend(a1, "objectForKey:", CFSTR("Authorization"));
  if (v2)
  {
    v3 = (unint64_t)objc_msgSend(v2, "integerValue");
    if (v3 < 5)
      return qword_101C29E30[v3];
    return 0;
  }
  v5 = objc_msgSend(a1, "objectForKey:", CFSTR("Authorized"));
  if (!v5)
  {
    v6 = (int)sub_100197710(a1, 1) - 3;
    if (v6 < 6)
      return qword_101C29E58[v6];
    return 0;
  }
  if (objc_msgSend(v5, "BOOLValue"))
    return 4;
  else
    return 1;
}

id sub_100199324(void *a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  char v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char isKindOfClass;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  id v24;
  NSObject *v25;
  id v26;
  id v27;
  __int128 v29;
  id v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  id v40;
  _BYTE v41[128];

  v30 = objc_alloc_init((Class)NSMutableDictionary);
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v2 = objc_msgSend(a1, "allKeys");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
  if (!v3)
    goto LABEL_31;
  v5 = v3;
  v6 = 0;
  v7 = *(_QWORD *)v32;
  *(_QWORD *)&v4 = 68289282;
  v29 = v4;
  do
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v32 != v7)
        objc_enumerationMutation(v2);
      v9 = *(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)v8);
      v10 = objc_msgSend(a1, "objectForKeyedSubscript:", v9, v29);
      v12 = objc_opt_class(NSArray, v11);
      isKindOfClass = objc_opt_isKindOfClass(v10, v12);
      v14 = objc_msgSend(a1, "objectForKeyedSubscript:", v9);
      v16 = v14;
      if ((isKindOfClass & 1) != 0)
      {
        v17 = objc_msgSend(v14, "objectAtIndexedSubscript:", 1);
        v19 = objc_opt_class(NSNumber, v18);
        if ((objc_opt_isKindOfClass(v17, v19) & 1) != 0)
        {
          objc_msgSend(v30, "setObject:forKeyedSubscript:", v17, v9);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10218BA48);
          v21 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = v29;
            v36 = 0;
            v37 = 2082;
            v38 = "";
            v39 = 2114;
            v40 = v17;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10218BA48);
          }
          v22 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            *(_DWORD *)buf = v29;
            v36 = 0;
            v37 = 2082;
            v38 = "";
            v39 = 2114;
            v40 = v17;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found NSArray value where index 1 is not a timestamp\", \"arr[1]\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
        v6 = 1;
      }
      else
      {
        v20 = objc_opt_class(NSNumber, v15);
        if ((objc_opt_isKindOfClass(v16, v20) & 1) != 0)
        {
          objc_msgSend(v30, "setObject:forKeyedSubscript:", objc_msgSend(a1, "objectForKeyedSubscript:", v9), v9);
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10218BA48);
          v23 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            v24 = objc_msgSend(a1, "objectForKeyedSubscript:", v9);
            *(_DWORD *)buf = v29;
            v36 = 0;
            v37 = 2082;
            v38 = "";
            v39 = 2114;
            v40 = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10218BA48);
          }
          v25 = qword_1022A01D8;
          if (os_signpost_enabled((os_log_t)qword_1022A01D8))
          {
            v26 = objc_msgSend(a1, "objectForKeyedSubscript:", v9);
            *(_DWORD *)buf = v29;
            v36 = 0;
            v37 = 2082;
            v38 = "";
            v39 = 2114;
            v40 = v26;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp", "{\"msg%{public}.0s\":\"Invalid RemoteUsageDictionary. Found non-NSArray value which is not a timestamp\", \"value\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
        }
      }
      v8 = (char *)v8 + 1;
    }
    while (v5 != v8);
    v27 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v31, v41, 16);
    v5 = v27;
  }
  while (v27);
  if ((v6 & 1) != 0)
    return v30;
LABEL_31:

  return a1;
}

uint64_t sub_10019978C(void *a1)
{
  return sub_100197710(a1, 0);
}

void *sub_100199794(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x38uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)i + 5) = 0;
  *((_QWORD *)i + 6) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10012E444(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_100199A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_1002A20A8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_10019C270(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10019C2CC(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = *(_QWORD *)(a1 + 40);
  result = (uint64_t)objc_msgSend(*(id *)(v6 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Authorization"), a2, 0);
  if ((result & 6) != 0)
  {
    result = sub_100198084(objc_msgSend(objc_msgSend(*(id *)(v6 + 136), "readonlyStoreAtKeyPath:", a2), "dictionary"));
    if (result > 8 || ((1 << result) & 0x1A8) == 0)
    {
      *a3 = 1;
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

uint64_t *sub_10019C3A8(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_10019C424((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1001B7B1C((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1000145B0(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_10019C424(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!sub_100279008(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_100279008(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_10019C4C0(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = sub_100279008(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_100279008(v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t *sub_10019C594(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)sub_1001987C8(a1, a2);
  if (result)
  {
    sub_1002127D0(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void sub_10019C5C8(uint64_t a1, uint64_t a2, unint64_t a3, int a4, int a5)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  NSObject *v10;
  NSObject *v12;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int *v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  _BYTE v38[42];
  _BYTE v39[10];
  __int16 v40;
  uint64_t v41;

  if (a2 >= 9)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v37 = 68289282;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(_QWORD *)&v38[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- entity class too large\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v37, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v7 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v37 = 68289282;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(_QWORD *)&v38[12] = a2;
      v8 = "#sbim Out of bounds access -- entity class too large";
      v9 = "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- entity class too large\", \"entityClass\":%{public, loca"
           "tion:CLLocationDictionaryUtilitiesEntityClass}lld}";
      v10 = v7;
LABEL_17:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, (uint8_t *)&v37, 0x1Cu);
      return;
    }
    return;
  }
  if (a3 < 3)
  {
    if (!a3)
      return;
    v17 = 0;
    v18 = 0;
    v19 = a2;
    do
    {
      if (*(_DWORD *)(a1 + 12 * a2 + 1368 + 4 * v17))
        v18 = v17;
      ++v17;
    }
    while (v17 != 3);
    v20 = (int *)(a1 + 12 * a2 + 4 * a3 + 1368);
    v21 = &qword_1022A0000;
    v22 = &qword_1022A0000;
    if (a4)
    {
      if (a4 != 1)
        goto LABEL_45;
      if (*v20 != -1)
      {
        v23 = *v20 + 1;
LABEL_29:
        *v20 = v23;
        goto LABEL_45;
      }
      if (qword_1022A01D0 != -1)
      {
        dispatch_once(&qword_1022A01D0, &stru_102154528);
        v22 = &qword_1022A0000;
      }
      v24 = v22[59];
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT))
      {
        v37 = 68289538;
        *(_WORD *)v38 = 2082;
        *(_QWORD *)&v38[2] = "";
        *(_WORD *)&v38[10] = 2050;
        *(_QWORD *)&v38[12] = a2;
        *(_WORD *)&v38[20] = 2050;
        *(_QWORD *)&v38[22] = a3;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Count overflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&v37, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v25 = qword_1022A01D8;
      v26 = os_signpost_enabled((os_log_t)qword_1022A01D8);
      v22 = &qword_1022A0000;
      v21 = &qword_1022A0000;
      if (!v26)
        goto LABEL_45;
      v37 = 68289538;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(_QWORD *)&v38[12] = a2;
      *(_WORD *)&v38[20] = 2050;
      *(_QWORD *)&v38[22] = a3;
      v27 = "#sbim Count overflow!";
      v28 = "{\"msg%{public}.0s\":\"#sbim Count overflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtili"
            "tiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}";
    }
    else
    {
      if (*v20)
      {
        v23 = *v20 - 1;
        goto LABEL_29;
      }
      if (qword_1022A01D0 != -1)
      {
        dispatch_once(&qword_1022A01D0, &stru_102154528);
        v22 = &qword_1022A0000;
      }
      v29 = v22[59];
      if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      {
        v37 = 68289538;
        *(_WORD *)v38 = 2082;
        *(_QWORD *)&v38[2] = "";
        *(_WORD *)&v38[10] = 2050;
        *(_QWORD *)&v38[12] = a2;
        *(_WORD *)&v38[20] = 2050;
        *(_QWORD *)&v38[22] = a3;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Count underflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&v37, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v25 = qword_1022A01D8;
      v30 = os_signpost_enabled((os_log_t)qword_1022A01D8);
      v22 = &qword_1022A0000;
      v21 = &qword_1022A0000;
      if (!v30)
        goto LABEL_45;
      v37 = 68289538;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(_QWORD *)&v38[12] = a2;
      *(_WORD *)&v38[20] = 2050;
      *(_QWORD *)&v38[22] = a3;
      v27 = "#sbim Count underflow!";
      v28 = "{\"msg%{public}.0s\":\"#sbim Count underflow!\", \"entityClass\":%{public, location:CLLocationDictionaryUtil"
            "itiesEntityClass}lld, \"arrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}";
    }
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v27, v28, (uint8_t *)&v37, 0x26u);
    v22 = &qword_1022A0000;
LABEL_45:
    v31 = 0;
    v32 = 0;
    do
    {
      if (*(_DWORD *)(a1 + 12 * v19 + 1368 + 4 * v31))
        v32 = v31;
      ++v31;
    }
    while (v31 != 3);
    if (v21[58] != -1)
    {
      dispatch_once(&qword_1022A01D0, &stru_102154528);
      v22 = &qword_1022A0000;
    }
    v33 = v22[59];
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      v34 = *v20;
      if (a4 == 1)
        v35 = 1;
      else
        v35 = -1;
      v37 = 68290562;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2050;
      *(_QWORD *)&v38[12] = a2;
      *(_WORD *)&v38[20] = 1026;
      *(_DWORD *)&v38[22] = v35;
      *(_WORD *)&v38[26] = 2050;
      *(_QWORD *)&v38[28] = a3;
      *(_WORD *)&v38[36] = 1026;
      *(_DWORD *)&v38[38] = v34;
      *(_WORD *)v39 = 2050;
      *(_QWORD *)&v39[2] = v18;
      v40 = 2050;
      v41 = v32;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim entity class count updated\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"change\":%{public}d, \"arrowStateBeingChanged\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newCount\":%{public}u, \"oldArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", (uint8_t *)&v37, 0x46u);
    }
    if (v18 != v32)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v36 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 68290050;
        *(_WORD *)v38 = 2082;
        *(_QWORD *)&v38[2] = "";
        *(_WORD *)&v38[10] = 2050;
        *(_QWORD *)&v38[12] = a2;
        *(_WORD *)&v38[20] = 2050;
        *(_QWORD *)&v38[22] = v18;
        *(_WORD *)&v38[30] = 2050;
        *(_QWORD *)&v38[32] = v32;
        *(_WORD *)&v38[40] = 1026;
        *(_DWORD *)v39 = a5 == 1;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#sbim entity class arrow state changed\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"oldArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newArrowState\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"dueToDeauthorization\":%{public}hhd}", (uint8_t *)&v37, 0x36u);
      }
      objc_msgSend(*(id *)(a1 + 1480), "entityClass:didChangeArrowState:dueToDeauthorization:", a2, v32, a5 == 1, v37, *(_OWORD *)v38, *(_OWORD *)&v38[16]);
    }
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v12 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    v37 = 68289282;
    *(_WORD *)v38 = 2082;
    *(_QWORD *)&v38[2] = "";
    *(_WORD *)&v38[10] = 2050;
    *(_QWORD *)&v38[12] = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- arrow state too large\", \"arrowState\":%{public}lu}", (uint8_t *)&v37, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v13 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v37 = 68289282;
    *(_WORD *)v38 = 2082;
    *(_QWORD *)&v38[2] = "";
    *(_WORD *)&v38[10] = 2050;
    *(_QWORD *)&v38[12] = a3;
    v8 = "#sbim Out of bounds access -- arrow state too large";
    v9 = "{\"msg%{public}.0s\":\"#sbim Out of bounds access -- arrow state too large\", \"arrowState\":%{public}lu}";
    v10 = v13;
    goto LABEL_17;
  }
}

uint64_t sub_10019CD70(uint64_t **a1, const void **a2)
{
  uint64_t v3;

  v3 = sub_10019C4C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_100675198(a1, v3);
  return 1;
}

__CFArray *sub_10019CDB4(double a1)
{
  __CFArray *Mutable;
  CFNumberRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  int valuePtr;

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (a1 < 100.0)
  {
    valuePtr = 1;
    v3 = sub_10019CED4(&valuePtr);
    CFArrayAppendValue(Mutable, v3);
    CFRelease(v3);
    valuePtr = 10;
    v4 = sub_10019CED4(&valuePtr);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  if (a1 < 1000.0)
  {
    valuePtr = 4;
    v5 = sub_10019CED4(&valuePtr);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
  }
  if (a1 < 6378135.0)
  {
    valuePtr = 6;
    v6 = sub_10019CED4(&valuePtr);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

CFNumberRef sub_10019CED4(void *valuePtr)
{
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
}

uint64_t sub_10019CEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t result;

  v5 = sub_100195B0C(a1, a2);
  if (!objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v5))
    return 1;
  result = (uint64_t)sub_1001B873C(a1, v5);
  if ((_DWORD)result)
    return *(double *)(a3 + 8) <= 3000.0;
  return result;
}

uint64_t sub_10019CFA0()
{
  unsigned int v0;
  unsigned int v1;

  v0 = sub_1001A09FC();
  if (byte_1023108A0)
    v1 = 1;
  else
    v1 = v0;
  if (v0 == 2)
    return 2;
  else
    return v1;
}

void sub_10019CFCC(uint64_t a1)
{
  CFRunLoopRef Current;
  __objc2_class *v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  id v13;
  void *v14;
  const __CFString *v15;
  id v16;
  __IOHIDServiceClient *v17;
  id v18;
  unsigned int v19;
  NSObject *v20;
  int v21;
  int v22;
  NSObject *info;
  int v24;
  int v25;
  id v26;
  unsigned int v27;
  const char *v28;
  __objc2_class_ro *v29;
  int v30;
  int v31;
  id v32;
  unsigned int v33;
  const char *v34;
  char *v35;
  __objc2_class_ro *v36;
  int v37;
  int v38;
  char *v39;
  id v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  double v43;
  int v44;
  double v45;
  NSObject *v46;
  _BOOL4 v47;
  double v48;
  char *v49;
  double v50;
  NSObject *v51;
  _BOOL4 v52;
  double v53;
  char *v54;
  NSObject *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  id obj;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  int v73;
  _BYTE v74[10];
  __int16 v75;
  const __CFString *v76;
  __int16 v77;
  id v78;
  __int16 v79;
  const char *v80;
  uint8_t v81[128];
  uint8_t buf[4];
  _BYTE v83[10];
  __int16 v84;
  const __CFString *v85;
  __int16 v86;
  id v87;
  __int16 v88;
  const char *v89;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current == (CFRunLoopRef)sub_1001AD8D0())
  {
    if (qword_10229FC70 == -1)
      goto LABEL_3;
  }
  else
  {
    sub_101915558(qword_10229FC70 == -1);
    __break(1u);
  }
  dispatch_once(&qword_10229FC70, &stru_102165728);
LABEL_3:
  v3 = DefaultObserver;
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Apply all dirty device properties", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    LOWORD(v73) = 0;
    v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Apply all dirty device properties", &v73, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v57);
    if (v57 != (char *)buf)
      free(v57);
  }
  v5 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD **)(a1 + 16);
  if (v5 == v6)
    goto LABEL_61;
  v7 = 1;
  v64 = a1;
  v60 = *(_QWORD **)(a1 + 16);
  do
  {
    v8 = v5[1];
    if (v8)
    {
      v9 = *v5;
      v63 = (std::__shared_weak_count *)v5[1];
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v12 = std::__shared_weak_count::lock(v63);
      v72 = v12;
      if (v12)
      {
        v71 = v9;
        v61 = v12;
        v62 = v5;
        if (v9)
        {
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          obj = *(id *)(v9 + 160);
          v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
          if (v13)
          {
            v66 = *(_QWORD *)v68;
            do
            {
              v14 = 0;
              do
              {
                if (*(_QWORD *)v68 != v66)
                  objc_enumerationMutation(obj);
                v15 = *(const __CFString **)(*((_QWORD *)&v67 + 1) + 8 * (_QWORD)v14);
                v16 = objc_msgSend(*(id *)(v9 + 160), "objectForKeyedSubscript:", v15);
                if (objc_msgSend(v16, "dirty"))
                {
                  if (!*(_QWORD *)(v9 + 24))
                    sub_100A08D84(a1, 0);
                  if (*(int *)(a1 + 52) >= 10 && *(_BYTE *)(v9 + 40))
                  {
                    v7 = 1;
                  }
                  else
                  {
                    v17 = *(__IOHIDServiceClient **)(v9 + 24);
                    if (v17)
                    {
                      v18 = objc_msgSend(v16, "value");
                      objc_msgSend(v16, "setDirty:", !sub_1001A9460((uint64_t)v18, v17, v15, v18));
                      if ((v7 & 1) != 0)
                        v19 = objc_msgSend(v16, "dirty") ^ 1;
                      else
                        v19 = 0;
                      if (qword_10229FC70 != -1)
                        dispatch_once(&qword_10229FC70, &stru_102165728);
                      info = v3[79].info;
                      if (os_log_type_enabled(info, OS_LOG_TYPE_DEFAULT))
                      {
                        v25 = *(_DWORD *)(v9 + 16);
                        v24 = *(_DWORD *)(v9 + 20);
                        v26 = objc_msgSend(v16, "value");
                        v27 = objc_msgSend(v16, "dirty");
                        *(_DWORD *)buf = 67241218;
                        v28 = "successfully";
                        if (v27)
                          v28 = "unsuccessfully";
                        *(_DWORD *)v83 = v24;
                        *(_WORD *)&v83[4] = 1026;
                        *(_DWORD *)&v83[6] = v25;
                        v84 = 2114;
                        v85 = v15;
                        v86 = 2114;
                        v87 = v26;
                        v88 = 2082;
                        v89 = v28;
                        _os_log_impl((void *)&_mh_execute_header, info, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Property for usage pair {%{public}d, %{public}d}: {%{public}@ = %{public}@} was set %{public}s", buf, 0x2Cu);
                        a1 = v64;
                        v3 = DefaultObserver;
                      }
                      v7 = v19;
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        HIDWORD(v59) = v19;
                        if (qword_10229FC70 != -1)
                          dispatch_once(&qword_10229FC70, &stru_102165728);
                        v29 = v3[79].info;
                        v31 = *(_DWORD *)(v9 + 16);
                        v30 = *(_DWORD *)(v9 + 20);
                        v32 = objc_msgSend(v16, "value");
                        v33 = objc_msgSend(v16, "dirty");
                        v73 = 67241218;
                        v34 = "successfully";
                        if (v33)
                          v34 = "unsuccessfully";
                        *(_DWORD *)v74 = v30;
                        *(_WORD *)&v74[4] = 1026;
                        *(_DWORD *)&v74[6] = v31;
                        v75 = 2114;
                        v76 = v15;
                        v77 = 2114;
                        v78 = v32;
                        v79 = 2082;
                        v80 = v34;
                        LODWORD(v59) = 44;
                        v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "[CLIoHidInterface] Property for usage pair {%{public}d, %{public}d}: {%{public}@ = %{public}@} was set %{public}s", &v73, v59);
                        sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v35);
                        a1 = v64;
                        v3 = DefaultObserver;
                        v7 = BYTE4(v58);
                        if (v35 != (char *)buf)
                          free(v35);
                      }
                    }
                    else
                    {
                      if (qword_10229FC70 != -1)
                        dispatch_once(&qword_10229FC70, &stru_102165728);
                      v20 = v3[79].info;
                      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                      {
                        v22 = *(_DWORD *)(v9 + 16);
                        v21 = *(_DWORD *)(v9 + 20);
                        *(_DWORD *)buf = 67240448;
                        *(_DWORD *)v83 = v21;
                        *(_WORD *)&v83[4] = 1026;
                        *(_DWORD *)&v83[6] = v22;
                        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for device with usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
                      }
                      if (sub_1001BFF7C(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_10229FC70 != -1)
                          dispatch_once(&qword_10229FC70, &stru_102165728);
                        v36 = v3[79].info;
                        v38 = *(_DWORD *)(v9 + 16);
                        v37 = *(_DWORD *)(v9 + 20);
                        v73 = 67240448;
                        *(_DWORD *)v74 = v37;
                        *(_WORD *)&v74[4] = 1026;
                        *(_DWORD *)&v74[6] = v38;
                        LODWORD(v58) = 14;
                        v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 0, "[CLIoHidInterface] Service for device with usage pair {%{public}d, %{public}d} is not ready", &v73, v58);
                        sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v39);
                        if (v39 != (char *)buf)
                          free(v39);
                      }
                      v7 = 0;
                    }
                  }
                }
                v14 = (char *)v14 + 1;
              }
              while (v13 != v14);
              v40 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v67, v81, 16);
              v13 = v40;
            }
            while (v40);
          }
        }
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        v5 = v62;
        v6 = v60;
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      std::__shared_weak_count::__release_weak(v63);
    }
    v5 += 2;
  }
  while (v5 != v6);
  if ((v7 & 1) != 0)
  {
LABEL_61:
    *(_DWORD *)(a1 + 52) = 0;
LABEL_62:
    v43 = 1.79769313e308;
    goto LABEL_63;
  }
  v44 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v44 + 1;
  if (v44 <= 4)
  {
    v45 = CFAbsoluteTimeGetCurrent();
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v46 = v3[79].info;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v83 = 0x3FD0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
    }
    v47 = sub_1001BFF7C(115, 2);
    v43 = v45 + 0.25;
    if (v47)
    {
      v48 = v45 + 0.25;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v73 = 134349056;
      *(_QWORD *)v74 = 0x3FD0000000000000;
      LODWORD(v58) = 12;
      v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", &v73, v58);
      sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v49);
      a1 = v64;
      if (v49 != (char *)buf)
        free(v49);
      v43 = v48;
    }
    goto LABEL_63;
  }
  if (v44 > 9)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v55 = v3[79].info;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set all properties after too many retries. Giving up.", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_62;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    LOWORD(v73) = 0;
    LODWORD(v58) = 2;
    v56 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "[CLIoHidInterface] Could not set all properties after too many retries. Giving up.", &v73, v58);
    sub_100512490("Generic", 1, 0, 0, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v56);
    if (v56 != (char *)buf)
      free(v56);
    v43 = 1.79769313e308;
LABEL_96:
    a1 = v64;
    goto LABEL_63;
  }
  v50 = CFAbsoluteTimeGetCurrent();
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  v51 = v3[79].info;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v83 = 0x4004000000000000;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
  }
  v52 = sub_1001BFF7C(115, 2);
  v43 = v50 + 2.5;
  if (v52)
  {
    v53 = v50 + 2.5;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v73 = 134349056;
    *(_QWORD *)v74 = 0x4004000000000000;
    LODWORD(v58) = 12;
    v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", &v73, v58);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "%s\n", v54);
    if (v54 != (char *)buf)
      free(v54);
    v43 = v53;
    goto LABEL_96;
  }
LABEL_63:
  CFRunLoopTimerSetNextFireDate(*(CFRunLoopTimerRef *)(a1 + 56), v43);
}

void sub_10019DB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100261F44((uint64_t)&a31);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

_BYTE *sub_10019DBAC(_BYTE *result)
{
  void *v1;
  _QWORD v2[5];

  if (!result[1136])
  {
    result[1136] = 1;
    v1 = (void *)*((_QWORD *)result + 5);
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_10008B370;
    v2[3] = &unk_10212ECA0;
    v2[4] = result;
    return objc_msgSend(v1, "afterInterval:async:", v2, 0.1);
  }
  return result;
}

id sub_10019DC1C(uint64_t a1, unsigned __int8 *a2)
{
  char v4;
  id result;
  void *v6;
  uint64_t *v7;

  v4 = _os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync");
  sub_100197040();
  if ((v4 & 1) != 0)
  {
    result = (id)sub_10019DF90();
    if (!(_DWORD)result)
      return result;
  }
  else if ((sub_100195F08() & 1) == 0)
  {
    sub_100197040();
    result = (id)sub_10019DF90();
    if ((result & 1) == 0)
      return result;
  }
  result = (id)sub_10019DCE4(a1, a2);
  if ((_DWORD)result)
  {
    result = sub_1007DF190(a1, (uint64_t *)a2);
    if (result)
    {
      v6 = *(void **)(a1 + 1528);
      if ((a2[23] & 0x80u) == 0)
        v7 = (uint64_t *)a2;
      else
        v7 = *(uint64_t **)a2;
      return objc_msgSend(v6, "client:didChangeUsageData:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7), result);
    }
  }
  return result;
}

BOOL sub_10019DCE4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  id v10;
  NSObject *v11;
  uint64_t *v12;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t *v18;
  __int16 v19;
  _BOOL4 v20;

  if (!_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync"))
  {
    if ((a2[23] & 0x80u) == 0)
      v9 = (uint64_t *)a2;
    else
      v9 = *(uint64_t **)a2;
    v10 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9)));
    return objc_msgSend(v10, "isValidCKP")
        && (objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v10) & 1) != 0
        || sub_1001986C8((_QWORD *)(a1 + 1488), a2) != 0;
  }
  if (a1 + 600 == sub_10019C4C0(a1 + 592, (const void **)a2))
  {
    v6 = sub_1001987C8((_QWORD *)(a1 + 616), a2) != 0;
  }
  else
  {
    *(_QWORD *)buf = a2;
    v4 = sub_1007F8770((uint64_t **)(a1 + 592), (const void **)a2, (uint64_t)&unk_101B9EB60, (__int128 **)buf)[7];
    v5 = *(unsigned __int8 *)(v4 + 72);
    v6 = *(_BYTE *)(v4 + 72) != 0;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
    if ((a2[23] & 0x80u) == 0)
      v8 = (uint64_t *)a2;
    else
      v8 = *(uint64_t **)a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = v8;
    v19 = 1026;
    v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync fTemporaryInUseAssertions\", \"client\":%{public, location:escape_only}s, \"shouldSync\":%{public}hhd}", buf, 0x22u);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
LABEL_20:
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    if ((a2[23] & 0x80u) == 0)
      v12 = (uint64_t *)a2;
    else
      v12 = *(uint64_t **)a2;
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = v12;
    v19 = 1026;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync shouldSyncUsageForClient\", \"client\":%{public, location:escape_only}s, \"shouldSync\":%{public}hhd}", buf, 0x22u);
  }
  return v6;
}

BOOL sub_10019DF90()
{
  if ((MGGetBoolAnswer(CFSTR("watch-companion")) & 1) != 0)
    return 1;
  if (qword_102303F40 != -1)
    dispatch_once(&qword_102303F40, &stru_102151760);
  return byte_102303F48 != 0;
}

uint64_t sub_10019DFF0(uint64_t result, uint64_t a2)
{
  if (byte_1022FDE70)
    return PLLogRegisteredEvent(4, +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, 4), result, 0);
  return result;
}

uint64_t sub_10019E128(uint64_t result, uint64_t a2)
{
  if (byte_1022FDE70)
    return PLLogTimeSensitiveRegisteredEvent(4, +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a2, 4), result, 0);
  return result;
}

void sub_10019E180(uint64_t a1, void *a2, _QWORD *a3, void *a4)
{
  id v8;
  NSObject *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  NSObject *v12;
  std::string *p_p;
  double Current;
  double v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  id v21;
  std::string *v22;
  std::string __p;
  _BYTE buf[28];
  __int16 v25;
  double v26;

  if (objc_opt_class(CLPLocationConsumptionScoreInfo, a2))
  {
    memset(&__p, 0, sizeof(__p));
    if (objc_msgSend(a4, "isValidCKP"))
    {
      v8 = sub_100196E90(a1, (uint64_t)a4);
      if (v8)
        objc_msgSend(v8, "cppClientKey");
      else
        memset(buf, 0, 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = *(std::string *)buf;
    }
    else
    {
      std::string::assign(&__p, (const std::string::value_type *)objc_msgSend(CFSTR("com.apple.locationd.all-location-clients-stop"), "UTF8String"));
    }
    v10 = sub_1001987C8(a3, (unsigned __int8 *)&__p);
    v11 = v10;
    if (v10 && *((double *)v10 + 5) > 0.0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v12 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289283;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(_QWORD *)&buf[20] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Updating location consumption info on stop\", \"Client\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      Current = CFAbsoluteTimeGetCurrent();
      v15 = *((double *)v11 + 5);
      if (Current <= v15)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v17 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
        {
          v18 = *((_QWORD *)v11 + 5);
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = v18;
          v25 = 2050;
          v26 = Current;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when writing usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", buf, 0x26u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102154528);
        }
        v19 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          v20 = *((_QWORD *)v11 + 5);
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2050;
          *(_QWORD *)&buf[20] = v20;
          v25 = 2050;
          v26 = Current;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Detected CFAbsoluteTime rollback when writing usage score", "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when writing usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", buf, 0x26u);
        }
        v16 = 0;
      }
      else
      {
        v16 = (int)(Current - v15);
      }
      *((_DWORD *)v11 + 12) += v16;
      *((_QWORD *)v11 + 5) = 0;
      v21 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &__p;
      else
        v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(v21, "setClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22, __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]));
      objc_msgSend(v21, "setStopTime:", Current);
      objc_msgSend(v21, "setScore:", v16);
      objc_msgSend(a2, "writeSecondaryObject:toField:", v21, 1);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_10019E5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_10019EB74(void *result)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = objc_msgSend(objc_msgSend(result, "lastPathComponent"), "componentsSeparatedByString:", CFSTR("-"));
    if ((unint64_t)objc_msgSend(v1, "count") >= 3)
    {
      objc_msgSend(objc_msgSend(v1, "objectAtIndex:", 1), "doubleValue");
      v3 = v2;
      objc_msgSend(objc_msgSend(v1, "objectAtIndex:", 2), "intValue");
      return (void *)v3;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

NSString *sub_10019EBF8(uint64_t a1, uint64_t a2)
{
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("secondary-%f-%zu"), a1, a2);
}

CLClientManagerAuthorizationContext *sub_10019EE88(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  id v5;
  _BOOL4 v6;
  uint64_t v7;
  NSMutableDictionary *v8;
  NSObject *v9;
  NSArray *v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  NSObject *v19;
  _OWORD v20[8];
  _OWORD v21[2];
  uint8_t v22[64];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[2];
  _BYTE buf[64];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v5, "isValidCKP") & 1) == 0)
    return (CLClientManagerAuthorizationContext *)sub_1001B6DB8(4);
  v6 = sub_1001A0520(a1, (uint64_t)v5);
  v7 = sub_1001985D8(*(_QWORD *)(a1 + 376), v5);
  v8 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5), "dictionary"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7), CFSTR("InUseLevel"));
  if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
    -[NSMutableDictionary setObject:forKeyedSubscript:](v8, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("LocationRestricted"));
  sub_1007C671C(a1, v5, v8);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v5;
    *(_WORD *)&buf[28] = 2114;
    *(_QWORD *)&buf[30] = v8;
    *(_WORD *)&buf[38] = 1026;
    *(_DWORD *)&buf[40] = v6;
    *(_WORD *)&buf[44] = 2050;
    *(_QWORD *)&buf[46] = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"computing freshAuthorizationContext\", \"Client\":%{public, location:escape_only}@, \"ClientDictionary\":%{public, location:escape_only}@, \"BigSwitch\":%{public}hhd, \"InUseLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x36u);
  }
  v10 = sub_10019F2A0(a1, (uint64_t)v5);
  v11 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](v10, "objectAtIndexedSubscript:", 1), "intValue");
  v12 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](v10, "objectAtIndexedSubscript:", 2), "intValue");
  v13 = a3[7];
  v31 = a3[6];
  v32 = v13;
  v33[0] = a3[8];
  *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)a3 + 140);
  v14 = a3[3];
  *(_OWORD *)&buf[32] = a3[2];
  *(_OWORD *)&buf[48] = v14;
  v15 = a3[5];
  v29 = a3[4];
  v30 = v15;
  v16 = a3[1];
  *(_OWORD *)buf = *a3;
  *(_OWORD *)&buf[16] = v16;
  if (sub_1001A4DD4(a1, (uint64_t)v5) && *(double *)&buf[20] < 0.0)
  {
    v17 = *(void **)(a1 + 352);
    if (v17)
    {
      objc_msgSend(v17, "currentLocation", *(double *)&buf[20]);
    }
    else
    {
      v26 = 0u;
      memset(v27, 0, 28);
      v24 = 0u;
      v25 = 0u;
      v23 = 0u;
      memset(v22, 0, sizeof(v22));
    }
    v31 = v25;
    v32 = v26;
    v33[0] = v27[0];
    *(_OWORD *)((char *)v33 + 12) = *(_OWORD *)((char *)v27 + 12);
    *(_OWORD *)&buf[32] = *(_OWORD *)&v22[32];
    *(_OWORD *)&buf[48] = *(_OWORD *)&v22[48];
    v29 = v23;
    v30 = v24;
    *(_OWORD *)buf = *(_OWORD *)v22;
    *(_OWORD *)&buf[16] = *(_OWORD *)&v22[16];
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v22 = 68290307;
      *(_DWORD *)&v22[4] = 0;
      *(_WORD *)&v22[8] = 2082;
      *(_QWORD *)&v22[10] = "";
      *(_WORD *)&v22[18] = 2114;
      *(_QWORD *)&v22[20] = v5;
      *(_WORD *)&v22[28] = 1040;
      *(_DWORD *)&v22[30] = 156;
      *(_WORD *)&v22[34] = 2097;
      *(_QWORD *)&v22[36] = a3;
      *(_WORD *)&v22[44] = 1040;
      *(_DWORD *)&v22[46] = 156;
      *(_WORD *)&v22[50] = 2097;
      *(_QWORD *)&v22[52] = buf;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla freshAuthorizationContext location updated\", \"Client\":%{public, location:escape_only}@, \"provided-location\":%{private, location:CLClientLocation}.*P, \"fetched-location-ZRT\":%{private, location:CLClientLocation}.*P}", v22, 0x3Cu);
    }
  }
  v20[6] = v31;
  v20[7] = v32;
  v21[0] = v33[0];
  *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)((char *)v33 + 12);
  v20[2] = *(_OWORD *)&buf[32];
  v20[3] = *(_OWORD *)&buf[48];
  v20[4] = v29;
  v20[5] = v30;
  v20[0] = *(_OWORD *)buf;
  v20[1] = *(_OWORD *)&buf[16];
  return sub_1001A372C(v8, v11, v12, v6, (uint64_t)v20);
}

NSArray *sub_10019F2A0(uint64_t a1, uint64_t a2)
{
  id v3;
  _BOOL4 v4;
  _BOOL4 v5;
  NSArray *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  _QWORD v13[3];
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id v19;
  __int16 v20;
  _BOOL4 v21;
  __int16 v22;
  NSArray *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  v4 = sub_1001A0520(a1, (uint64_t)v3);
  if ((objc_msgSend(v3, "isValidCKP") & 1) != 0)
  {
    v5 = sub_10019F610(a1, (uint64_t)v3);
    v6 = sub_10019F778(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v3), "dictionary"), (int)objc_msgSend(*(id *)(a1 + 136), "isKeyPathRegisteredSystemService:", v3), v4, v5);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289794;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2114;
      v19 = v3;
      v20 = 1026;
      v21 = v4;
      v22 = 2114;
      v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client RegistrationResults\", \"Client\":%{public, location:escape_only}@, \"bigSwitchEnabled\":%{public}hhd, \"RegistrationResults\":%{public, location:escape_only}@}", buf, 0x2Cu);
    }
    return v6;
  }
  if (!sub_10011E0F0()
    || !objc_msgSend(v3, "bundlePath")
    || !sub_100197BA8((__CFString *)objc_msgSend(v3, "bundlePath")))
  {
    v9 = 4;
LABEL_14:
    if (v4)
      v10 = v9;
    else
      v10 = 2;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    goto LABEL_19;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#OSXThinksDifferent system service not found in persistent store is allowed by default\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    v9 = 0;
    goto LABEL_14;
  }
  v9 = 0;
  if (v4)
    v10 = 0;
  else
    v10 = 2;
LABEL_19:
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290306;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2114;
    v19 = v3;
    v20 = 1026;
    v21 = v4;
    v22 = 2050;
    v23 = (NSArray *)v9;
    v24 = 2050;
    v25 = v10;
    v26 = 2050;
    v27 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client(does not exists) RegistrationResults\", \"Client\":%{public, location:escape_only}@, \"bigSwitchEnabled\":%{public}hhd, \"static\":%{public, location:CLClientRegistrationResult}lld, \"effective\":%{public, location:CLClientRegistrationResult}lld, \"transient\":%{public, location:CLClientRegistrationResult}lld}", buf, 0x40u);
  }
  v13[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v9);
  v13[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v10);
  v13[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v10);
  return +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v13, 3);
}

BOOL sub_10019F610(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  void *__p;
  _BYTE v10[20];

  v3 = sub_100196E90(a1, a2);
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "cppClientKey");
  }
  else
  {
    __p = 0;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)&v10[8] = 0;
  }
  v5 = sub_10019C4C0(a1 + 704, (const void **)&__p);
  v6 = a1 + 712;
  if ((v10[15] & 0x80000000) != 0)
    operator delete(__p);
  if (v6 != v5)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289282;
      *(_WORD *)v10 = 2082;
      *(_QWORD *)&v10[2] = "";
      *(_WORD *)&v10[10] = 2114;
      *(_QWORD *)&v10[12] = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLEPTO deauthorization overriding allowed\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  return v6 != v5;
}

void sub_10019F754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

NSArray *sub_10019F778(void *a1, int a2, int a3, int a4)
{
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned int v24;
  int v25;
  BOOL v26;
  int v27;
  int v29;
  NSObject *v30;
  NSObject *v31;
  id v32;
  NSObject *v33;
  NSNumber **v34;
  NSObject *v35;
  char *v37;
  id obj;
  uint64_t v41;
  __int16 v43[8];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  NSNumber *v48;
  NSNumber *v49;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  unint64_t v55;
  __int16 v56;
  _BYTE v57[10];
  uint64_t v58;
  _BYTE v59[128];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218BA48);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290050;
    v51 = 0;
    v52 = 2082;
    v53 = "";
    v54 = 2114;
    v55 = (unint64_t)a1;
    v56 = 1026;
    *(_DWORD *)v57 = a2;
    *(_WORD *)&v57[4] = 1026;
    *(_DWORD *)&v57[6] = a3;
    LOWORD(v58) = 1026;
    *(_DWORD *)((char *)&v58 + 2) = a4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"computing #clldu registrationResults\", \"dictionary\":%{public, location:escape_only}@, \"isSystemService\":%{public}hhd, \"bigSwitchEnabled\":%{public}hhd, \"overrideDeauthorization\":%{public}hhd}", buf, 0x2Eu);
  }
  v6 = +[NSMutableArray array](NSMutableArray, "array");
  objc_msgSend(v6, "addObject:", a1);
  v7 = sub_10019FF60(a1);
  if (objc_msgSend(v7, "count"))
    objc_msgSend(v6, "addObjectsFromArray:", v7);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
  if (v8)
  {
    v9 = v8;
    v10 = 4;
    v41 = *(_QWORD *)v45;
    v11 = 4;
    v12 = 4;
    obj = v6;
LABEL_9:
    v13 = 0;
    while (1)
    {
      if (*(_QWORD *)v45 != v41)
        objc_enumerationMutation(obj);
      v14 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * v13);
      v15 = objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("ZoneId"));
      v16 = objc_msgSend(v14, "objectForKey:", CFSTR("TimeMissing"));
      if (v16)
      {
        objc_msgSend(v16, "doubleValue");
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218BA48);
        v17 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289282;
          v51 = 0;
          v52 = 2082;
          v53 = "";
          v54 = 2114;
          v55 = (unint64_t)v14;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu _staticRegistrationResult , missing client\", \"dictionary\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        v18 = 7;
      }
      else
      {
        if (v15)
          v26 = 1;
        else
          v26 = a2 == 0;
        if (v26)
          goto LABEL_57;
        v27 = sub_100197710(v14, 1);
        if (v27 != 6 && v27 != 0)
          goto LABEL_57;
        v29 = v27;
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218BA48);
        v30 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289282;
          v51 = 0;
          v52 = 2082;
          v53 = "";
          v54 = 2114;
          v55 = (unint64_t)v14;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu staticRegistrationResult , unsupported system service\", \"dictionary\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        v18 = 3;
        if (v29)
        {
          if (v29 != 6)
          {
LABEL_57:
            v18 = sub_1001A013C(v14);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10218BA48);
            v31 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289282;
              v51 = 0;
              v52 = 2082;
              v53 = "";
              v54 = 2050;
              v55 = v18;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu _staticRegistrationResult\", \"registration\":%{public, location:CLClientRegistrationResult}lld}", buf, 0x1Cu);
            }
          }
        }
      }
      if (objc_msgSend(&off_102220738, "containsObject:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18)))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218BA48);
        v33 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "computing #clldu registrationResults, encountered doNotProceed static registration result. Early return", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10218BA48);
          v43[0] = 0;
          v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "computing #clldu registrationResults, encountered doNotProceed static registration result. Early return", v43, 2);
          sub_100512490("Generic", 1, 0, 2, "NSArray *CLLocationDictionaryUtilitiesGetClientRegistrationResults(NSDictionary *, BOOL, BOOL, BOOL)", "%s\n", v37);
          if (v37 != (char *)buf)
            free(v37);
        }
        v49 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v18);
        v10 = 4;
        v34 = &v49;
        v11 = 4;
        goto LABEL_75;
      }
      if (a3)
      {
        v19 = v18;
        if ((_DWORD)v18 == 1)
        {
          if (objc_msgSend(objc_msgSend(v14, "objectForKey:", CFSTR("ProvisionalMonitoring")), "BOOLValue"))v19 = 8;
          else
            v19 = 1;
        }
        v20 = a2;
        if ((_DWORD)v18 != 2)
          v20 = 0;
        if ((v20 & a4) != 0)
          v21 = 0;
        else
          v21 = v19;
        v22 = v21;
        if ((_DWORD)v21 == 4)
        {
          v23 = objc_msgSend(objc_msgSend(v14, "objectForKey:", CFSTR("TemporaryAuthorization")), "intValue");
          if ((v23 & 1) != 0)
            v24 = 1;
          else
            v24 = 4;
          if ((v23 & 4) != 0)
            v22 = 2;
          else
            v22 = v24;
        }
        if (!v15)
        {
LABEL_39:
          v10 = v21;
          v11 = v22;
          v12 = v18;
          goto LABEL_40;
        }
      }
      else
      {
        v21 = 2;
        v22 = 2;
        if (!v15)
          goto LABEL_39;
      }
      v25 = objc_msgSend(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator")), "intValue");
      v12 = sub_100E484C8(v12, v18, v25);
      v10 = sub_100E484C8(v10, v21, v25);
      v11 = sub_100E484C8(v11, v22, v25);
LABEL_40:
      if (v9 == (id)++v13)
      {
        v32 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v44, v59, 16);
        v9 = v32;
        if (v32)
          goto LABEL_9;
        goto LABEL_70;
      }
    }
  }
  v10 = 4;
  v11 = 4;
  v12 = 4;
LABEL_70:
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218BA48);
  v35 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289794;
    v51 = 0;
    v52 = 2082;
    v53 = "";
    v54 = 2050;
    v55 = v12;
    v56 = 2050;
    *(_QWORD *)v57 = v10;
    *(_WORD *)&v57[8] = 2050;
    v58 = v11;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu registrationResults\", \"static\":%{public, location:CLClientRegistrationResult}lld, \"effective\":%{public, location:CLClientRegistrationResult}lld, \"transient\":%{public, location:CLClientRegistrationResult}lld}", buf, 0x30u);
  }
  v48 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v12);
  v34 = &v48;
LABEL_75:
  v34[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v10);
  v34[2] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v11);
  return +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v34, 3);
}

id sub_10019FF60(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  id v10;
  id v11;
  NSMutableDictionary *v12;
  unsigned int v13;
  void *v14;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v2 = +[NSMutableArray array](NSMutableArray, "array");
  v3 = objc_msgSend(a1, "objectForKey:", CFSTR("InterestZones"));
  if (objc_msgSend(v3, "count"))
  {
    v4 = +[NSMutableArray array](NSMutableArray, "array");
    v16 = +[NSMutableArray array](NSMutableArray, "array");
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (!v5)
      goto LABEL_15;
    v6 = v5;
    v7 = *(_QWORD *)v18;
    while (1)
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v7)
          objc_enumerationMutation(v3);
        v9 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v10 = objc_msgSend(v3, "objectForKeyedSubscript:", v9);
        v11 = objc_msgSend(v10, "objectForKey:", CFSTR("Relevant"));
        if (v11 && objc_msgSend(v11, "BOOLValue"))
        {
          v12 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v10);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v9, CFSTR("ZoneId"));
          v13 = objc_msgSend(objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator")), "intValue");
          v14 = v4;
          if (v13)
          {
            if (v13 != 1)
              continue;
            v14 = v16;
          }
          objc_msgSend(v14, "addObject:", v12);
        }
      }
      v6 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      if (!v6)
      {
LABEL_15:
        objc_msgSend(v2, "addObjectsFromArray:", v4);
        objc_msgSend(v2, "addObjectsFromArray:", v16);
        return v2;
      }
    }
  }
  return v2;
}

uint64_t sub_1001A013C(void *a1)
{
  unint64_t v2;
  int v3;
  NSObject *v4;
  NSObject *v5;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  void *v14;

  v2 = sub_100199284(a1);
  v3 = v2;
  if (v2 < 5 && ((0x17u >> v2) & 1) != 0)
    return dword_101C29E88[v2];
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218BA48);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    v7 = 68289538;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v3;
    v13 = 2114;
    v14 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected AuthMask #clldu RegistrationResult\", \"LocationDictionaryUtility AuthMask\":%{public}d, \"dictionary\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x22u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218BA48);
  }
  v5 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v7 = 68289538;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    v11 = 1026;
    v12 = v3;
    v13 = 2114;
    v14 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected AuthMask #clldu RegistrationResult", "{\"msg%{public}.0s\":\"Unexpected AuthMask #clldu RegistrationResult\", \"LocationDictionaryUtility AuthMask\":%{public}d, \"dictionary\":%{public, location:escape_only}@}", (uint8_t *)&v7, 0x22u);
  }
  return 4;
}

uint64_t sub_1001A0310(uint64_t a1, int *a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  unsigned int v10;
  _DWORD v12[4];
  uint8_t buf[4];
  int v14;

  v4 = *a2;
  if (v4 < 9 && ((0x1DFu >> v4) & 1) != 0)
  {
    v7 = dword_101BC22B0[v4];
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v6 = *a2;
      *(_DWORD *)buf = 67240192;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "unknown registsration result %{public}d", buf, 8u);
    }
    v7 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v8 = *a2;
      v12[0] = 67240192;
      v12[1] = v8;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "unknown registsration result %{public}d", v12, 8);
      sub_100512490("Generic", 1, 0, 0, "CLTypeAuthorizationStatus CLClientManager::registrationResultToAuthorizationStatus(const CLTypeRegistrationResult &)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
      v7 = 0;
    }
  }
  if (objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus") == 1)
    v10 = v7;
  else
    v10 = 2;
  if (v10 <= 2)
  {
    if (objc_msgSend(*(id *)(a1 + 120), "locationRestricted"))
      return 1;
    else
      return v10;
  }
  return v7;
}

BOOL sub_1001A0520(uint64_t a1, uint64_t a2)
{
  id v3;
  int v4;
  NSObject *v5;
  _BOOL8 result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  int v13;
  id v14;
  __int128 buf;
  uint64_t v16;

  v3 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  v4 = sub_1001A09FC();
  if (objc_msgSend(*(id *)(a1 + 120), "locationServicesEnabledStatus") != 1)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "location disabled system-wide, denying executable %{public}@", (uint8_t *)&buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = 138543362;
    v14 = v3;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "location disabled system-wide, denying executable %{public}@", &v13, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::bigSwitchEnabledForClient(CLClientKeyPath *)", "%s\n", v7);
LABEL_33:
    if (v7 != (char *)&buf)
      free(v7);
    return 0;
  }
  if (v4 == 1)
    return 1;
  if (objc_msgSend(v3, "isValidCKP"))
  {
    if (v3)
    {
      objc_msgSend(v3, "cppClientKey");
    }
    else
    {
      buf = 0uLL;
      v16 = 0;
    }
    v8 = sub_10019C4C0(a1 + 680, (const void **)&buf);
    v9 = a1 + 688;
    if (SHIBYTE(v16) < 0)
      operator delete((void *)buf);
    if (v9 != v8)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138543362;
        *(_QWORD *)((char *)&buf + 4) = v3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "location emergency-enablement explicitly benefits %{public}@, not denying", (uint8_t *)&buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v13 = 138543362;
        v14 = v3;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "location emergency-enablement explicitly benefits %{public}@, not denying", &v13, 12);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::bigSwitchEnabledForClient(CLClientKeyPath *)", "%s\n", v12);
        if (v12 != (char *)&buf)
          free(v12);
      }
      return 1;
    }
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "location emergency-enabled with explicit beneficiaries, denying executable %{public}@", (uint8_t *)&buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = 138543362;
    v14 = v3;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "location emergency-enabled with explicit beneficiaries, denying executable %{public}@", &v13, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::bigSwitchEnabledForClient(CLClientKeyPath *)", "%s\n", v7);
    goto LABEL_33;
  }
  return result;
}

void sub_1001A09D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1001A09FC()
{
  uint64_t v0;

  if (qword_102301758 != -1)
    dispatch_once(&qword_102301758, &stru_1021410E8);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102301750);
  v0 = dword_1022A287C;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102301750);
  return v0;
}

void sub_1001A0FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  void *v17;

  sub_100008848((uint64_t)&a13, a14);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1001A1008(uint64_t a1, void *a2)
{
  id v4;
  CLClientKeyPath *v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  int v9;
  NSString *v10;
  CLClientKeyPath *v11;
  unsigned int v12;
  char v13;
  CLClientKeyPath *v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  char v23;
  char v24;
  unint64_t v25;
  id v26;
  unsigned int v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  CFBundleRef v31;
  unsigned int v32;
  CLClientKeyPath *v33;
  NSObject *v34;
  NSURL *v35;
  std::string *p_p;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  NSString *v47;
  NSObject *v48;
  NSString *v49;
  const __CFURL *v50;
  NSObject *v51;
  NSString *v52;
  NSString *v53;
  NSObject *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  NSObject *v58;
  const char *v59;
  std::string *v60;
  const char *v61;
  const char *v62;
  NSObject *v63;
  const char *v64;
  std::string *v65;
  const char *v66;
  const char *v67;
  int v68;
  NSObject *v69;
  NSString *v70;
  id v71;
  id v72;
  uint64_t v73;
  NSObject *v74;
  unsigned int v75;
  NSObject *v76;
  NSObject *v77;
  id v78;
  id v79;
  unsigned int v80;
  NSObject *v81;
  uint64_t v82;
  void *v83;
  NSBundle *v84;
  NSString *v85;
  void *v86;
  BOOL v87;
  const __CFURL *v88;
  id v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  BOOL v93;
  NSObject *v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  NSMutableDictionary *v100;
  int v101;
  int v102;
  NSObject *v103;
  uint64_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  NSObject *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t UniqueRemotePid;
  id v117;
  id v118;
  NSObject *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *p_shared_owners;
  unint64_t v123;
  NSObject *v124;
  NSObject *v125;
  NSObject *v126;
  __CFString *v127;
  NSString *v128;
  NSString *v129;
  unsigned int v130;
  NSObject *v131;
  const __CFString *v132;
  const __CFURL *v133;
  NSObject *v134;
  id v135;
  NSObject *v136;
  NSObject *v137;
  int HasPrefix;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  id v145;
  char *v146;
  uint64_t v147;
  NSString *v148;
  NSString *v149;
  id v150;
  id v151;
  CFURLRef bundleURL;
  CLClientKeyPath *v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  _BOOL4 v157;
  NSBundle *v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  _QWORD v161[6];
  BOOL v162;
  audit_token_t v163;
  audit_token_t v164;
  __int128 v165;
  __int128 v166;
  std::string __p;
  _QWORD v168[2];
  _QWORD v169[2];
  _BYTE buf[1632];
  uint64_t v171;
  __int16 v172;
  const char *v173;
  __int16 v174;
  NSString *v175;
  __int16 v176;
  const char *v177;
  __int16 v178;
  const char *v179;
  _QWORD v180[4];
  __int128 v181;
  __int128 v182;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v165 = 0u;
  v166 = 0u;
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
  memset(&v164, 0, sizeof(v164));
  v5 = sub_1001A4450(&v164);
  v155 = a2;
  if (!-[CLClientKeyPath isValidCKP](v5, "isValidCKP"))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Couldn't get information from PID for DaemonClient registration. Defaulting natural identity to nullCKP.\", \"pid\":%{public}u}", buf, 0x18u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
    }
    v8 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v9 = *(_DWORD *)(a1 + 272);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get information from PID for DaemonClient registration. Defaulting natural identity to nullCKP.", "{\"msg%{public}.0s\":\"Couldn't get information from PID for DaemonClient registration. Defaulting natural identity to nullCKP.\", \"pid\":%{public}u}", buf, 0x18u);
    }
  }
  if (a2)
  {
    v10 = -[CLClientKeyPath bundleId](v5, "bundleId");
    v11 = (CLClientKeyPath *)sub_1007B6CB0(*(_QWORD *)(a1 + 16), (uint64_t)v5);
    v12 = -[CLClientKeyPath isValidCKP](v11, "isValidCKP");
    v13 = v12;
    if (v12)
      v14 = v11;
    else
      v14 = v5;
    v153 = v14;
    v154 = (unint64_t)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundleIdentifierKey"));
    v15 = (unint64_t)objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundlePathKey"));
    if (objc_msgSend(a2, "objectForKey:", CFSTR("kCLConnectionMessageClientSDKKey")))
    {
      v16 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageClientSDKKey")), "unsignedIntValue");
      *(_BYTE *)(a1 + 192) = (v16 & 0xFFF80000) != 0;
      *(_BYTE *)(a1 + 193) = HIWORD(v16) > 0xAu;
      v17 = v16 > 0xCFFFF;
    }
    else
    {
      *(_BYTE *)(a1 + 192) = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageClientSDKAtLeast2014Key")), "unsignedIntValue") != 0;
      *(_BYTE *)(a1 + 193) = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageClientSDKAtLeast2017Key")), "unsignedIntValue") != 0;
      v17 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageClientSDKAtLeast2019Key")), "unsignedIntValue") != 0;
    }
    *(_BYTE *)(a1 + 194) = v17;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(unsigned __int8 *)(a1 + 192);
      v21 = *(unsigned __int8 *)(a1 + 193);
      v22 = *(unsigned __int8 *)(a1 + 194);
      *(_DWORD *)buf = 68290050;
      *(_WORD *)&buf[8] = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v153;
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v20;
      *(_WORD *)&buf[34] = 1026;
      *(_DWORD *)&buf[36] = v21;
      *(_WORD *)&buf[40] = 1026;
      *(_DWORD *)&buf[42] = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client sdk\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"sdkAtLeast2014?\":%{public}hhd, \"sdkAtLeast2017?\":%{public}hhd, \"sdkAtLeast2019?\":%{public}hhd}", buf, 0x2Eu);
    }
    v156 = a1;
    if (!(v154 | v15))
      goto LABEL_42;
    sub_1015A2E04(buf, "com.apple.locationd.effective_bundle");
    v23 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
    v24 = v23;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if ((v24 & 1) != 0)
      {
LABEL_28:
        if (v15)
        {
          v25 = v154;
          v26 = objc_msgSend((id)v15, "stringByResolvingSymlinksInPath");
          if (v154)
            v27 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLAppMonitor")), "syncgetIsApplicationInstalledLocally:", v154);
          else
            v27 = 1;
          v35 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v26, 1);
          if ((-[NSURL checkResourceIsReachableAndReturnError:](v35, "checkResourceIsReachableAndReturnError:", 0) & v27) != 1)
            goto LABEL_116;
          CLConnection::getAuditToken(*(CLConnection **)(a1 + 264));
          v158 = +[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:", v35);
          sub_1001A48F4(&v163, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v148 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
          v38 = -[NSBundle objectForInfoDictionaryKey:](v158, "objectForInfoDictionaryKey:", CFSTR("CLSystemServiceRadars"));
          v151 = v26;
          bundleURL = (CFURLRef)v35;
          v149 = v10;
          if (v38 && (v39 = objc_opt_class(NSArray, v37), (objc_opt_isKindOfClass(v38, v39) & 1) != 0))
          {
            v181 = 0u;
            v182 = 0u;
            memset(v180, 0, sizeof(v180));
            v41 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", v180, buf, 16);
            if (v41)
            {
              v42 = *(_QWORD *)v180[2];
              do
              {
                v43 = 0;
                do
                {
                  if (*(_QWORD *)v180[2] != v42)
                    objc_enumerationMutation(v38);
                  v44 = *(_QWORD *)(v180[1] + 8 * (_QWORD)v43);
                  v45 = objc_opt_class(NSNumber, v40);
                  if ((objc_opt_isKindOfClass(v44, v45) & 1) == 0)
                  {
                    if (qword_1022A01D0 != -1)
                      dispatch_once(&qword_1022A01D0, &stru_102174F78);
                    v46 = qword_1022A01D8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
                    {
                      v47 = -[NSBundle bundlePath](v158, "bundlePath");
                      v171 = 68289539;
                      v172 = 2082;
                      v173 = "";
                      v174 = 2113;
                      v175 = v47;
                      v176 = 2113;
                      v177 = (const char *)v38;
                      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy System Service's CLSystemServiceRadars key does not only include radar numbers.\", \"Bundle\":%{private, location:escape_only}@, \"RadarsArray\":%{private, location:escape_only}@}", (uint8_t *)&v171, 0x26u);
                    }
                  }
                  v43 = (char *)v43 + 1;
                }
                while (v41 != v43);
                v41 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", v180, buf, 16);
              }
              while (v41);
            }
          }
          else
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102174F78);
            v48 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              v49 = -[NSBundle bundlePath](v158, "bundlePath");
              *(_DWORD *)buf = 68289283;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2113;
              *(_QWORD *)&buf[20] = v49;
              _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy System Service has no listed radars\", \"Bundle\":%{private, location:escape_only}@}", buf, 0x1Cu);
            }
          }
          a2 = v155;
          v10 = v149;
          v25 = v154;
          v26 = v151;
          v50 = bundleURL;
          if (sub_100197C20(-[NSBundle bundlePath](v158, "bundlePath"))
            && !-[NSBundle objectForInfoDictionaryKey:](v158, "objectForInfoDictionaryKey:", CFSTR("CLSystemService")))
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102174F78);
            v51 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              v52 = -[NSBundle bundlePath](v158, "bundlePath");
              v171 = 68289283;
              v172 = 2082;
              v173 = "";
              v174 = 2113;
              v175 = v52;
              _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy Bundle for LocationdInternalSystemService not marked as SystemService.\", \"Bundle\":%{private, location:escape_only}@}", (uint8_t *)&v171, 0x1Cu);
            }
          }
          v53 = -[NSBundle objectForInfoDictionaryKey:](v158, "objectForInfoDictionaryKey:", CFSTR("CLEligibleMasqueraders"));
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v54 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
          {
            v56 = -[NSString UTF8String](-[NSBundle bundlePath](v158, "bundlePath"), "UTF8String");
            v171 = 68289539;
            v172 = 2082;
            v173 = "";
            v174 = 2113;
            v175 = v53;
            v176 = 2081;
            v177 = v56;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLEligibleMasqueraders for bundle\", \"EligibleMasqueraders\":%{private, location:escape_only}@, \"Bundle\":%{private, location:escape_only}s}", (uint8_t *)&v171, 0x26u);
          }
          if (v53 && (v57 = objc_opt_class(NSArray, v55), (objc_opt_isKindOfClass(v53, v57) & 1) != 0))
          {
            if ((-[NSString containsObject:](v53, "containsObject:", v148) & 1) == 0)
            {
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_102174F58);
              v58 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
              {
                v59 = -[NSString UTF8String](-[NSBundle bundlePath](v158, "bundlePath"), "UTF8String");
                v60 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__p
                    : (std::string *)__p.__r_.__value_.__r.__words[0];
                v61 = -[NSString UTF8String](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v60), "UTF8String");
                v62 = -[NSString UTF8String](-[NSString description](v53, "description"), "UTF8String");
                v171 = 68289794;
                v172 = 2082;
                v173 = "";
                v174 = 2082;
                v175 = (NSString *)v59;
                v176 = 2082;
                v177 = v61;
                v178 = 2082;
                v179 = v62;
                _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid masquerader for bundle\", \"Bundle\":%{public, location:escape_only}s, \"Client ProcessPath\":%{public, location:escape_only}s, \"EligibleMasqueraders for bundle\":%{public, location:escape_only}s}", (uint8_t *)&v171, 0x30u);
                v26 = v151;
                v50 = bundleURL;
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102174F58);
              }
              v63 = qword_1022A01C8;
              if (os_signpost_enabled((os_log_t)qword_1022A01C8))
              {
                v64 = -[NSString UTF8String](-[NSBundle bundlePath](v158, "bundlePath"), "UTF8String");
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v65 = &__p;
                else
                  v65 = (std::string *)__p.__r_.__value_.__r.__words[0];
                v66 = -[NSString UTF8String](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v65), "UTF8String");
                v67 = -[NSString UTF8String](-[NSString description](v53, "description"), "UTF8String");
                v171 = 68289794;
                v172 = 2082;
                v173 = "";
                v174 = 2082;
                v175 = (NSString *)v64;
                v176 = 2082;
                v177 = v66;
                v178 = 2082;
                v179 = v67;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid masquerader for bundle", "{\"msg%{public}.0s\":\"Invalid masquerader for bundle\", \"Bundle\":%{public, location:escape_only}s, \"Client ProcessPath\":%{public, location:escape_only}s, \"EligibleMasqueraders for bundle\":%{public, location:escape_only}s}", (uint8_t *)&v171, 0x30u);
                v68 = 0;
                v26 = v151;
                v50 = bundleURL;
              }
              else
              {
                v68 = 0;
              }
LABEL_105:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              if (v68)
              {
                v71 = sub_100195B0C(*(_QWORD *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", v26, 112));
                if (v154)
                {
                  v72 = sub_100195B0C(*(_QWORD *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", v154, 105));
                  if ((objc_msgSend(v72, "isValidCKP") & 1) == 0)
                  {
                    if (qword_1022A01C0 != -1)
                      dispatch_once(&qword_1022A01C0, &stru_102174F58);
                    v136 = qword_1022A01C8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 68289794;
                      *(_DWORD *)&buf[4] = 0;
                      *(_WORD *)&buf[8] = 2082;
                      *(_QWORD *)&buf[10] = "";
                      *(_WORD *)&buf[18] = 2114;
                      *(_QWORD *)&buf[20] = v153;
                      *(_WORD *)&buf[28] = 2114;
                      *(_QWORD *)&buf[30] = v26;
                      *(_WORD *)&buf[38] = 2114;
                      *(_QWORD *)&buf[40] = v154;
                      _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Failed auth-limited masquerading attempt; effectiveBundleIdentifier faile"
                        "d to register, but didn't we just check that it's installed??\", \"NaturalKeyPath\":%{public, lo"
                        "cation:escape_only}@, \"effectiveBundlePath\":%{public, location:escape_only}@, \"effectiveBundl"
                        "eIdentifier\":%{public, location:escape_only}@}",
                        buf,
                        0x30u);
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_102174F58);
                    }
                    v137 = qword_1022A01C8;
                    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
                    {
                      *(_DWORD *)buf = 68289794;
                      *(_DWORD *)&buf[4] = 0;
                      *(_WORD *)&buf[8] = 2082;
                      *(_QWORD *)&buf[10] = "";
                      *(_WORD *)&buf[18] = 2114;
                      *(_QWORD *)&buf[20] = v153;
                      *(_WORD *)&buf[28] = 2114;
                      *(_QWORD *)&buf[30] = v26;
                      *(_WORD *)&buf[38] = 2114;
                      *(_QWORD *)&buf[40] = v154;
                      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v137, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed auth-limited masquerading attempt; effectiveBundleIdentifier failed to register, but didn"
                        "'t we just check that it's installed??",
                        "{\"msg%{public}.0s\":\"Failed auth-limited masquerading attempt; effectiveBundleIdentifier faile"
                        "d to register, but didn't we just check that it's installed??\", \"NaturalKeyPath\":%{public, lo"
                        "cation:escape_only}@, \"effectiveBundlePath\":%{public, location:escape_only}@, \"effectiveBundl"
                        "eIdentifier\":%{public, location:escape_only}@}",
                        buf,
                        0x30u);
                    }
                    v32 = 0;
                    v30 = 0;
                    goto LABEL_275;
                  }
                  v71 = sub_100195B0C(*(_QWORD *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:", objc_msgSend(v72, "bundleId"), 108, v26, 112));
                }
                v73 = (uint64_t)v71;
                v32 = v154 == 0;
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102174F58);
                v74 = qword_1022A01C8;
                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
                {
                  v75 = sub_1007BCED8(*(_QWORD *)(a1 + 16), v73);
                  *(_DWORD *)buf = 68289794;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(_QWORD *)&buf[20] = v153;
                  *(_WORD *)&buf[28] = 2114;
                  *(_QWORD *)&buf[30] = v73;
                  *(_WORD *)&buf[38] = 1026;
                  *(_DWORD *)&buf[40] = v75;
                  _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client is setting effective bundle path\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"MasqueradingKeyPath\":%{public, location:escape_only}@, \"SystemService\":%{public}hhd}", buf, 0x2Cu);
                }
                v30 = 1;
                v153 = (CLClientKeyPath *)v73;
                v50 = bundleURL;
LABEL_275:
                v31 = CFBundleCreate(kCFAllocatorDefault, v50);
                v157 = 0;
                *(_BYTE *)(a1 + 104) = 1;
                goto LABEL_38;
              }
LABEL_116:
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_102174F58);
              v76 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 68289794;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(_QWORD *)&buf[20] = v153;
                *(_WORD *)&buf[28] = 2114;
                *(_QWORD *)&buf[30] = v26;
                *(_WORD *)&buf[38] = 2114;
                *(_QWORD *)&buf[40] = v25;
                _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed bundle-path masquerading attempt\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"NewBundlePath\":%{public, location:escape_only}@, \"NewLimitingBundleId\":%{public, location:escape_only}@}", buf, 0x30u);
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102174F58);
              }
              v77 = qword_1022A01C8;
              if (os_signpost_enabled((os_log_t)qword_1022A01C8))
              {
                *(_DWORD *)buf = 68289794;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                v11 = v153;
                *(_QWORD *)&buf[20] = v153;
                *(_WORD *)&buf[28] = 2114;
                *(_QWORD *)&buf[30] = v26;
                *(_WORD *)&buf[38] = 2114;
                *(_QWORD *)&buf[40] = v25;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v77, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed bundle-path masquerading attempt", "{\"msg%{public}.0s\":\"Failed bundle-path masquerading attempt\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"NewBundlePath\":%{public, location:escape_only}@, \"NewLimitingBundleId\":%{public, location:escape_only}@}", buf, 0x30u);
                v157 = 0;
                v30 = 0;
                v31 = 0;
LABEL_123:
                v32 = 1;
                goto LABEL_124;
              }
              goto LABEL_37;
            }
          }
          else
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102174F78);
            v69 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              v70 = -[NSBundle bundlePath](v158, "bundlePath");
              v171 = 68289539;
              v172 = 2082;
              v173 = "";
              v174 = 2113;
              v175 = v70;
              v176 = 2113;
              v177 = (const char *)v148;
              _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationPrivacy Masquerading bundle has no EligibleMasqueraders\", \"Bundle\":%{private, location:escape_only}@, \"Masquerader\":%{private, location:escape_only}@}", (uint8_t *)&v171, 0x26u);
            }
          }
          v68 = 1;
          goto LABEL_105;
        }
        if (v154)
        {
          v33 = (CLClientKeyPath *)sub_100195B0C(*(_QWORD *)(a1 + 16), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", v154, 105));
          v11 = v33;
          if (v10)
            v32 = -[NSString isEqualToString:](-[CLClientKeyPath bundleId](v33, "bundleId"), "isEqualToString:", v10);
          else
            v32 = 0;
          v127 = -[CLClientKeyPath bundleId](v11, "bundleId");
          if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLAppMonitor")), "syncgetIsApplicationInstalledLocally:", v127))
          {
            v128 = -[CLClientKeyPath clientKey](v153, "clientKey");
            v129 = -[CLClientKeyPath clientKey](v11, "clientKey");
            v130 = v32;
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102174F58);
            v131 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 68289794;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(_QWORD *)&buf[20] = v128;
              *(_WORD *)&buf[28] = 2114;
              *(_QWORD *)&buf[30] = v129;
              *(_WORD *)&buf[38] = 1026;
              *(_DWORD *)&buf[40] = v130;
              _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client is setting effective bundle identifier\", \"NaturalKeyPath\":%{public, location:escape_only}@, \"MasqueradingKeyPath\":%{public, location:escape_only}@, \"shouldAuthSlide\":%{public}hhd}", buf, 0x2Cu);
            }
            v132 = (const __CFString *)sub_1001CD64C(v127);
            v32 = v130;
            if (v132)
            {
              v133 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v132, kCFURLPOSIXPathStyle, 0);
              if (v133)
              {
                v31 = CFBundleCreate(kCFAllocatorDefault, v133);
                CFRelease(v133);
                v157 = 0;
              }
              else
              {
                v157 = 0;
                v31 = 0;
              }
            }
            else
            {
              HasPrefix = CFStringHasPrefix(v127, CFSTR("com.apple.webapp-"));
              v31 = 0;
              v157 = HasPrefix != 0;
            }
            v30 = 1;
            *(_BYTE *)(a1 + 104) = 1;
LABEL_124:
            v78 = sub_1001AA814(*(_QWORD *)(a1 + 16), (uint64_t)v11);
            if (objc_msgSend(objc_msgSend(v78, "arrayForKey:defaultValue:", CFSTR("PluginBundleIds"), 0), "containsObject:", v10))*(_QWORD *)(a1 + 96) = v10;
            *(_BYTE *)(a1 + 90) = objc_msgSend(v78, "BOOLForKey:defaultValue:", CFSTR("IsAppClip"), 0);
            *(_BYTE *)(a1 + 74) = objc_msgSend(v78, "BOOLForKey:defaultValue:", CFSTR("DefaultAccuracyReduced"), 0);
            *(_BYTE *)(a1 + 73) = objc_msgSend(v78, "BOOLForKey:defaultValue:", CFSTR("AuthRequestsDisabled"), 0);
            v80 = sub_1007BCED8(*(_QWORD *)(a1 + 16), (uint64_t)v11);
            *(_BYTE *)(a1 + 91) = v80;
            if (v30 && !*(_BYTE *)(a1 + 104))
            {
              if (!*(_QWORD *)(a1 + 96))
                goto LABEL_139;
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_102174F58);
              v81 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v11;
                _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "Client '%{public}@' is a plugin, auto-masquerading as its containing app", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102174F58);
                LODWORD(v180[0]) = 138543362;
                *(_QWORD *)((char *)v180 + 4) = v11;
                LODWORD(v147) = 12;
                v139 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Client '%{public}@' is a plugin, auto-masquerading as its containing app", v180, v147);
                sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v139);
                if (v139 != buf)
                  free(v139);
                a2 = v155;
              }
              if (sub_1001B6C9C(*(unsigned int *)(a1 + 272), v82)
                && (v83 = *(void **)(a1 + 96)) != 0
                && (v79 = sub_1001AF3C4(v83)) != 0)
              {
                v84 = +[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:", v79);
                if (v84)
                {
                  v30 = 1;
                }
                else
                {
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_102174F78);
                  v124 = qword_1022A01D8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(_QWORD *)&buf[20] = v11;
                    _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Avocado couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                    if (qword_1022A01D0 != -1)
                      dispatch_once(&qword_1022A01D0, &stru_102174F78);
                  }
                  v125 = qword_1022A01D8;
                  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(_QWORD *)&buf[20] = v11;
                    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v125, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Avocado couldn't get bundle for client", "{\"msg%{public}.0s\":\"#Avocado couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  }
                  v30 = 0;
                }
                if ((sub_100517150(v84) & 1) == 0)
                {
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_102174F78);
                  v126 = qword_1022A01D8;
                  v30 = 0;
                  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(_QWORD *)&buf[20] = v11;
                    _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #Avocado client did not set NSWidgetWantsLocation key in their info.plist\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                    v30 = 0;
                  }
                }
              }
              else
              {
LABEL_139:
                v30 = 1;
              }
              v85 = -[CLClientKeyPath bundleId](v11, "bundleId", v79);
              sub_100197040();
              if (!sub_100195F08())
                goto LABEL_145;
              v86 = *(void **)(a1 + 96);
              if (!v86)
                goto LABEL_145;
              sub_1015A2E04(buf, (char *)objc_msgSend(v86, "UTF8String"));
              v87 = sub_1011477E4((uint64_t **)buf);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              v85 = *(NSString **)(a1 + 96);
              if (!v87)
              {
                v31 = sub_10114734C(*(void **)(a1 + 96));
                if (!v31)
                {
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_102174F58);
                  v103 = qword_1022A01C8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(_QWORD *)&buf[20] = v11;
                    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Could not find placeholder bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  }
                  v31 = 0;
                }
              }
              else
              {
LABEL_145:
                v88 = (const __CFURL *)sub_1001AF3C4(v85);
                if (v88)
                  v31 = CFBundleCreate(kCFAllocatorDefault, v88);
              }
            }
            v89 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageSubidentityKey")), "stringByReplacingOccurrencesOfString:withString:", CFSTR(":"), CFSTR("-"));
            if (v89)
            {
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_102174F58);
              v90 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 68289538;
                *(_DWORD *)&buf[4] = 0;
                *(_WORD *)&buf[8] = 2082;
                *(_QWORD *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(_QWORD *)&buf[20] = v11;
                *(_WORD *)&buf[28] = 2114;
                *(_QWORD *)&buf[30] = v89;
                _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"registering website daemon client\", \"ClientKeyPath\":%{public, location:escape_only}@, \"website\":%{public, location:escape_only}@}", buf, 0x26u);
              }
              v11 = -[CLClientKeyPath clientKeyPathWithReplacementSubIdentityId:subIdentityType:](v11, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:", v89, 119);
            }
            sub_1001A49A8(a1, v11);
            if (*(_QWORD *)(a1 + 48))
              v91 = v30;
            else
              v91 = 0;
            *(_QWORD *)(a1 + 80) = 0;
            sub_1001AA890(a1);
            if (*(_BYTE *)(a1 + 104) && !v31)
            {
              if (v157)
              {
                *(_QWORD *)(a1 + 80) = 3;
              }
              else
              {
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_102174F78);
                v98 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                {
                  v99 = *(_QWORD *)(a1 + 48);
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v99;
                  _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_FAULT, "Could not access bundle for masquerading client %{public}@", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01D0 != -1)
                    dispatch_once(&qword_1022A01D0, &stru_102174F78);
                  v142 = *(_QWORD *)(a1 + 48);
                  LODWORD(v180[0]) = 138543362;
                  *(_QWORD *)((char *)v180 + 4) = v142;
                  LODWORD(v147) = 12;
                  v143 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Could not access bundle for masquerading client %{public}@", v180, v147);
                  sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v143);
                  if (v143 != buf)
                    free(v143);
                }
              }
              v100 = 0;
              v180[0] = 0;
              if (!v91)
              {
                v101 = 0;
LABEL_224:
                sub_1001AC304(v156, v180);
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102174F58);
                v119 = qword_1022A01C8;
                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
                {
                  v120 = *(_QWORD *)(v156 + 48);
                  *(_DWORD *)buf = 68289538;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(_QWORD *)&buf[20] = v120;
                  *(_WORD *)&buf[28] = 2050;
                  *(_QWORD *)&buf[30] = v156;
                  _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient registered\", \"ClientKeyPath\":%{public, location:escape_only}@, \"tag\":\"%{public}p\"}", buf, 0x26u);
                }
                *(_BYTE *)(v156 + 72) = v101;
                if (v101 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v156 + 80))(v156))
                  sub_1007D6064(*(_QWORD *)(v156 + 16), *(void **)(v156 + 48), 0, 0, 1, 0, 1);
                sub_1001ABD64(v156);
                sub_1001A975C(*(_QWORD *)(v156 + 16), *(void **)(v156 + 48), *(unsigned __int8 *)(v156 + 204));
                if (*(_BYTE *)(v156 + 72))
                {
                  sub_1001AA9E8((uint64_t *)v156, &v159);
                  v121 = v160;
                  if (v160)
                  {
                    p_shared_owners = (unint64_t *)&v160->__shared_owners_;
                    do
                      v123 = __ldaxr(p_shared_owners);
                    while (__stlxr(v123 - 1, p_shared_owners));
                    if (!v123)
                    {
                      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
                      std::__shared_weak_count::__release_weak(v121);
                    }
                  }
                  sub_1001AC114(v156);
                }
                goto LABEL_238;
              }
LABEL_216:
              v111 = *(void **)(a1 + 48);
              if ((v32 & ~v80) != 0)
                sub_1001AD98C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 80), *(unsigned __int8 *)(a1 + 74));
              v112 = *(_QWORD *)(a1 + 16);
              v113 = (char *)objc_msgSend(objc_msgSend(v111, "legacyClientKey"), "UTF8String");
              if (v113)
                v114 = v113;
              else
                v114 = "";
              sub_1015A2E04(buf, v114);
              sub_1001A9938(v112, (uint64_t)buf, v100);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              v115 = *(_QWORD *)(a1 + 16);
              UniqueRemotePid = CLConnection::getUniqueRemotePid(*(CLConnection **)(a1 + 264));
              sub_1001A508C(v115, (uint64_t)v111, UniqueRemotePid, 1);
              v117 = sub_1001AA760(*(_QWORD *)(a1 + 16), (uint64_t)v111);
              v168[0] = CFSTR("kCLConnectionMessageClientKeyForIdentityValidation");
              v118 = objc_msgSend(*(id *)(a1 + 48), "clientKey");
              v168[1] = CFSTR("kCLConnectionMessageMonitorLedgerAccessKey");
              v169[0] = v118;
              v169[1] = v117;
              v180[0] = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v169, v168, 2);
              v101 = 1;
              goto LABEL_224;
            }
            if (!v91)
            {
              v101 = 0;
              v180[0] = 0;
              goto LABEL_224;
            }
            sub_100197040();
            if (sub_100195F08())
            {
              v92 = *(_QWORD *)(a1 + 96);
              v93 = v92 != 0;
              if (v92 && !v31)
              {
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102174F58);
                v94 = qword_1022A01C8;
                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                {
                  v95 = *(_QWORD *)(a1 + 48);
                  *(_DWORD *)buf = 68289282;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(_QWORD *)&buf[20] = v95;
                  _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"WatchKit-Plugin connecting on watch , but companion placeholder bundle not found\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_102174F58);
                }
                v96 = qword_1022A01C8;
                if (os_signpost_enabled((os_log_t)qword_1022A01C8))
                {
                  v97 = *(_QWORD *)(a1 + 48);
                  *(_DWORD *)buf = 68289282;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2114;
                  *(_QWORD *)&buf[20] = v97;
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "WatchKit-Plugin connecting on watch , but companion placeholder bundle not found", "{\"msg%{public}.0s\":\"WatchKit-Plugin connecting on watch , but companion placeholder bundle not found\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                }
              }
            }
            else
            {
              v93 = 0;
            }
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1))
            {
              *(_QWORD *)(a1 + 80) |= 1uLL;
              v100 = 0;
              if (sub_10019782C((const __CFString *)-[CLClientKeyPath bundlePath](v11, "bundlePath")))
              {
                *(_QWORD *)(a1 + 80) |= 4uLL;
                goto LABEL_207;
              }
            }
            else
            {
              if (*(_BYTE *)(a1 + 193))
                v102 = 2;
              else
                v102 = *(unsigned __int8 *)(a1 + 192);
              v161[0] = _NSConcreteStackBlock;
              v161[1] = 3221225472;
              v161[2] = sub_1001AC4EC;
              v161[3] = &unk_102174A98;
              v161[4] = a1;
              v161[5] = v31;
              v162 = v93;
              v104 = *(_QWORD *)(a1 + 80) | sub_1001AC3FC(v102, (uint64_t)v161);
              *(_QWORD *)(a1 + 80) = v104;
              if (!v31)
              {
                v100 = 0;
LABEL_196:
                if (v104 == 1)
                {
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_102174F58);
                  v105 = qword_1022A01C8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
                  {
                    v106 = *(_QWORD *)(a1 + 48);
                    *(_DWORD *)buf = 138543362;
                    *(_QWORD *)&buf[4] = v106;
                    _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "%{public}@ is creating a CLLocationManager, but does not have any NSLocation*UsageDescription keys", buf, 0xCu);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A01C0 != -1)
                      dispatch_once(&qword_1022A01C0, &stru_102174F58);
                    v107 = *(_QWORD *)(a1 + 48);
                    LODWORD(v180[0]) = 138543362;
                    *(_QWORD *)((char *)v180 + 4) = v107;
                    LODWORD(v147) = 12;
                    v108 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "%{public}@ is creating a CLLocationManager, but does not have any NSLocation*UsageDescription keys", v180, v147);
                    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v108);
                    if (v108 != buf)
                      free(v108);
                  }
                  goto LABEL_213;
                }
LABEL_207:
                if (*(_BYTE *)(a1 + 90))
                {
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_102174F58);
                  v109 = qword_1022A01C8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
                  {
                    v110 = *(_QWORD *)(a1 + 48);
                    *(_DWORD *)buf = 68289282;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 2114;
                    *(_QWORD *)&buf[20] = v110;
                    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#appclip Removing Always from allowable authorizations\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
                  }
                  *(_QWORD *)(a1 + 80) &= ~4uLL;
                }
LABEL_213:
                if (v31)
                  CFRelease(v31);
                v180[0] = 0;
                goto LABEL_216;
              }
              v100 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", sub_1001ACF6C(v31));
            }
            v104 = *(_QWORD *)(a1 + 80);
            goto LABEL_196;
          }
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v134 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
          {
            v135 = -[__CFString UTF8String](v127, "UTF8String");
            *(_DWORD *)buf = 138543618;
            *(_QWORD *)&buf[4] = v153;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v135;
            _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_FAULT, "Client '%{public}@' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'", buf, 0x16u);
          }
          if (!sub_1001BFF7C(115, 0))
          {
            v157 = 0;
            v30 = 0;
            v31 = 0;
            goto LABEL_38;
          }
          v150 = v4;
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v144 = qword_1022A01C8;
          v145 = -[__CFString UTF8String](v127, "UTF8String");
          LODWORD(v180[0]) = 138543618;
          *(_QWORD *)((char *)v180 + 4) = v153;
          WORD2(v180[1]) = 2082;
          *(_QWORD *)((char *)&v180[1] + 6) = v145;
          v146 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v144, 17, "Client '%{public}@' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'", v180, 22);
          sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v146);
          if (v146 != buf)
            free(v146);
          v157 = 0;
          v30 = 0;
          v31 = 0;
LABEL_290:
          v11 = v153;
          v4 = v150;
          goto LABEL_124;
        }
LABEL_42:
        if ((v13 & 1) != 0
          || (v11 = (CLClientKeyPath *)sub_100195B0C(*(_QWORD *)(a1 + 16), (uint64_t)v5),
              -[CLClientKeyPath isValidCKP](v11, "isValidCKP")))
        {
          v157 = 0;
          v31 = 0;
          v32 = 1;
          v30 = 1;
          goto LABEL_124;
        }
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v34 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v5;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning naturalKeyPath registration resulted in nullCKP\", \"NaturalKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        v157 = 0;
        v30 = 0;
        v31 = 0;
        v11 = v5;
        goto LABEL_123;
      }
    }
    else if ((v23 & 1) != 0)
    {
      goto LABEL_28;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v28 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v29 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 138544130;
      *(_QWORD *)&buf[4] = v29;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "com.apple.locationd.effective_bundle";
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v154;
      *(_WORD *)&buf[32] = 2114;
      *(_QWORD *)&buf[34] = v15;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning Client '%{public}@' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}@', or effective bundle, '%{public}@'", buf, 0x2Au);
    }
    if (!sub_1001BFF7C(115, 2))
    {
LABEL_37:
      v157 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 1;
LABEL_38:
      v11 = v153;
      goto LABEL_124;
    }
    v150 = v4;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v140 = *(_QWORD *)(a1 + 48);
    LODWORD(v180[0]) = 138544130;
    *(_QWORD *)((char *)v180 + 4) = v140;
    WORD2(v180[1]) = 2082;
    *(_QWORD *)((char *)&v180[1] + 6) = "com.apple.locationd.effective_bundle";
    HIWORD(v180[2]) = 2114;
    v180[3] = v154;
    LOWORD(v181) = 2114;
    *(_QWORD *)((char *)&v181 + 2) = v15;
    v141 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Warning Client '%{public}@' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}@', or effective bundle, '%{public}@'", v180, 42);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::processRegistration(NSDictionary *)", "%s\n", v141);
    if (v141 != buf)
      free(v141);
    v157 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 1;
    goto LABEL_290;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v18 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v5;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Processing Registrationless client\", \"NaturalKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  sub_1001A49A8(a1, v5);
LABEL_238:

}

void sub_1001A35F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{

  _Unwind_Resume(a1);
}

CLClientManagerAuthorizationContext *sub_1001A372C(NSMutableDictionary *a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  id v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  NSMutableDictionary *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  id v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  NSObject *v36;
  uint32_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  void *i;
  uint64_t v45;
  id v46;
  double v47;
  double v48;
  double v49;
  double v50;
  long double v51;
  NSMutableDictionary *v52;
  uint64_t v53;
  id v54;
  unsigned int v55;
  void *j;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  CLClientManagerAuthorizationContext *v69;
  id v70;
  id v71;
  NSObject *v72;
  NSArray *v73;
  BOOL v74;
  CLClientManagerAuthorizationContext *v75;
  NSObject *v76;
  uint64_t v78;
  NSMutableDictionary *v79;
  NSMutableDictionary *v80;
  int v81;
  unsigned int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  id v87;
  id v88;
  id obj;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  NSMutableDictionary *v94;
  id v95;
  int v96;
  NSMutableDictionary *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint8_t v105[4];
  int v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  NSMutableDictionary *v110;
  __int16 v111;
  NSMutableDictionary *v112;
  uint8_t buf[4];
  int v114;
  __int16 v115;
  const char *v116;
  __int16 v117;
  unint64_t v118;
  __int16 v119;
  _BYTE v120[20];
  uint64_t v121;
  _BYTE v122[10];
  _BYTE v123[10];
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  int v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  uint64_t v135;
  __int16 v136;
  int v137;
  __int16 v138;
  int v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;

  v10 = sub_1001A4E68(a1);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218BA48);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290819;
    v114 = 0;
    v115 = 2082;
    v116 = "";
    v117 = 2050;
    v118 = a2;
    v119 = 2050;
    *(_QWORD *)v120 = a3;
    *(_WORD *)&v120[8] = 1026;
    *(_DWORD *)&v120[10] = a4;
    *(_WORD *)&v120[14] = 1026;
    *(_DWORD *)&v120[16] = (_DWORD)v10;
    v121 = 0x8310000009C0410;
    *(_QWORD *)v122 = a5;
    *(_WORD *)&v122[8] = 2114;
    *(_QWORD *)v123 = a1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"computing #clldu freshAuthContext\", \"EffectiveRegistration\":%{public, location:CLClientRegistrationResult}lld, \"TransientRegistration\":%{public, location:CLClientRegistrationResult}lld, \"bigSwitchState\":%{public}hhd, \"isClientZonal\":%{public}hhd, \"location\":%{private, location:CLClientLocation}.*P, \"dictionary\":%{public, location:escape_only}@}", buf, 0x4Cu);
  }
  v92 = a2;
  v83 = a4;
  v12 = objc_msgSend(-[NSMutableDictionary objectForKey:](a1, "objectForKey:", CFSTR("InUseLevel")), "unsignedIntValue");
  v13 = sub_1001A4400(a1);
  v14 = objc_msgSend(-[NSMutableDictionary objectForKey:](a1, "objectForKey:", CFSTR("IncidentalUseMode")), "unsignedIntValue");
  v15 = sub_100199044(a1, (uint64_t)CFSTR("SignificantTimeStarted"), (uint64_t)CFSTR("SignificantTimeStopped"), -1.0);
  v81 = v14;
  v16 = sub_1001A4314(a3, v12, v13, v14, (uint64_t)v10, v15, (int)objc_msgSend(-[NSMutableDictionary objectForKey:](a1, "objectForKey:", CFSTR("BackgroundLocationCapability")), "BOOLValue"));
  v18 = v17;
  v96 = (int)v10;
  v19 = objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", CFSTR("PassiveServiceSession")), "BOOLValue");
  v20 = objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", CFSTR("WhenInUseServiceSession")), "BOOLValue");
  v94 = a1;
  v21 = objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](a1, "objectForKeyedSubscript:", CFSTR("AlwaysServiceSession")), "BOOLValue");
  v22 = objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](v94, "objectForKeyedSubscript:", CFSTR("SessionWithOldLinking")), "BOOLValue");
  v23 = objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](v94, "objectForKeyedSubscript:", CFSTR("ExplicitServiceSession")), "BOOLValue");
  v90 = a3;
  v82 = v12;
  v24 = v21;
  v25 = v94;
  if (sub_1005171A8(a3, v12, v19, v20, v24, v22, v23))
  {
    v16 |= 0x80000uLL;
    v18 |= 0x80000uLL;
  }
  v26 = sub_1005171E4((int)objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](v94, "objectForKeyedSubscript:", CFSTR("ExplicitServiceSession")), "BOOLValue"));
  if (v26)
    v27 = v16 | 0x100000;
  else
    v27 = v16;
  if (v26)
    v28 = v18 | 0x100000;
  else
    v28 = v18;
  v99 = v28;
  v100 = v27;
  if (!v96)
  {
    v29 = &qword_1022A0000;
    goto LABEL_22;
  }
  v29 = &qword_1022A0000;
  if (*(double *)(a5 + 20) <= 0.0)
  {
LABEL_22:
    v31 = &qword_1022A0000;
    v32 = v83;
    v38 = v92;
    v39 = v90;
    goto LABEL_66;
  }
  v30 = -[NSMutableDictionary objectForKey:](v94, "objectForKey:", CFSTR("InterestZones"));
  v31 = &qword_1022A0000;
  v32 = v83;
  if (objc_msgSend(v30, "count"))
  {
    if (*(double *)(a5 + 20) >= 0.0)
    {
      v79 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v94);
      v97 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v30);
      sub_1002433B8((uint64_t)&v101);
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v41 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v140, buf, 16);
      if (v41)
      {
        v42 = v41;
        v43 = *(_QWORD *)v141;
        do
        {
          for (i = 0; i != v42; i = (char *)i + 1)
          {
            if (*(_QWORD *)v141 != v43)
              objc_enumerationMutation(v30);
            v45 = *(_QWORD *)(*((_QWORD *)&v140 + 1) + 8 * (_QWORD)i);
            v46 = objc_msgSend(v30, "objectForKeyedSubscript:", v45);
            objc_msgSend(objc_msgSend(v46, "objectForKeyedSubscript:", CFSTR("Latitude")), "doubleValue");
            v48 = v47;
            objc_msgSend(objc_msgSend(v46, "objectForKeyedSubscript:", CFSTR("Longitude")), "doubleValue");
            v50 = v49;
            objc_msgSend(objc_msgSend(v46, "objectForKeyedSubscript:", CFSTR("Radius")), "doubleValue");
            if (sub_10011E634((double *)&v101, v48, v50, *(double *)(a5 + 4), *(double *)(a5 + 12), 0.0) < v51)
            {
              v52 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v46);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v52, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("Relevant"));
              -[NSMutableDictionary setObject:forKeyedSubscript:](v97, "setObject:forKeyedSubscript:", v52, v45);
            }
          }
          v42 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v140, buf, 16);
        }
        while (v42);
      }
      v25 = v79;
      -[NSMutableDictionary setObject:forKeyedSubscript:](v79, "setObject:forKeyedSubscript:", v97, CFSTR("InterestZones"));
      v29 = &qword_1022A0000;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218BA48);
      v31 = &qword_1022A0000;
      v32 = v83;
      v53 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        goto LABEL_41;
      *(_DWORD *)v105 = 68289538;
      v106 = 0;
      v107 = 2082;
      v108 = "";
      v109 = 2114;
      v110 = v94;
      v111 = 2114;
      v112 = v79;
      v34 = "{\"msg%{public}.0s\":\"#clldu conincidingZones marked as Relevant\", \"provided-dictionary\":%{public, locat"
            "ion:escape_only}@, \"updatedDictionary\":%{public, location:escape_only}@}";
      v35 = v105;
      v36 = v53;
      v37 = 38;
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218BA48);
      v33 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        goto LABEL_41;
      *(_DWORD *)buf = 68289795;
      v114 = 0;
      v115 = 2082;
      v116 = "";
      v117 = 2114;
      v118 = (unint64_t)v94;
      v119 = 1040;
      *(_DWORD *)v120 = 156;
      *(_WORD *)&v120[4] = 2097;
      *(_QWORD *)&v120[6] = a5;
      v34 = "{\"msg%{public}.0s\":\"#pla Skip #clldu-MarkZonesAsRelevant. Invalid location\", \"dictionary\":%{public, lo"
            "cation:escape_only}@, \"location\":%{private, location:CLClientLocation}.*P}";
      v35 = buf;
      v36 = v33;
      v37 = 44;
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218BA48);
    v40 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      goto LABEL_41;
    *(_DWORD *)buf = 68289282;
    v114 = 0;
    v115 = 2082;
    v116 = "";
    v117 = 2114;
    v118 = (unint64_t)v94;
    v34 = "{\"msg%{public}.0s\":\"#pla Skip #clldu-MarkZonesAsRelevant. No InterestZones\", \"dictionary\":%{public, loca"
          "tion:escape_only}@}";
    v35 = buf;
    v36 = v40;
    v37 = 28;
  }
  _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, v34, v35, v37);
LABEL_41:
  if (v32)
  {
    v54 = sub_10019FF60(v25);
    v80 = v25;
    if (objc_msgSend(v54, "count"))
    {
      v88 = -[NSMutableDictionary objectForKey:](v25, "objectForKey:", CFSTR("BundleId"));
      v87 = -[NSMutableDictionary objectForKey:](v25, "objectForKey:", CFSTR("BundlePath"));
      v55 = objc_msgSend(-[NSMutableDictionary objectForKey:](v25, "objectForKey:", CFSTR("InUseLevel")), "unsignedIntValue");
      v101 = 0u;
      v102 = 0u;
      v103 = 0u;
      v104 = 0u;
      v95 = objc_msgSend(v54, "countByEnumeratingWithState:objects:count:", &v101, &v140, 16);
      if (v95)
      {
        v86 = v100;
        v85 = v99;
        v91 = *(_QWORD *)v102;
        v84 = v55;
        obj = v54;
        v93 = v55;
        do
        {
          for (j = 0; j != v95; j = (char *)j + 1)
          {
            if (*(_QWORD *)v102 != v91)
              objc_enumerationMutation(obj);
            v57 = *(void **)(*((_QWORD *)&v101 + 1) + 8 * (_QWORD)j);
            v58 = objc_msgSend(objc_msgSend(v57, "objectForKeyedSubscript:", CFSTR("ServiceMaskOperator")), "intValue");
            v59 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](sub_10019F778(v57, 0, 1, 0), "objectAtIndexedSubscript:", 2), "intValue");
            v60 = sub_1001A4400(v57);
            v61 = objc_msgSend(objc_msgSend(v57, "objectForKey:", CFSTR("IncidentalUseMode")), "unsignedIntValue");
            v62 = sub_1001A4314(v59, v55, v60, v61, 1, 0, 0);
            v64 = v62;
            v65 = v63;
            v66 = v62 | v100;
            v98 = v58;
            if (v58)
              v66 = v62 & v100;
            v100 = v66;
            if (v58)
              v67 = v63 & v99;
            else
              v67 = v63 | v99;
            v99 = v67;
            if (v29[58] != -1)
              dispatch_once(&qword_1022A01D0, &stru_10218BA48);
            v68 = v31[59];
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
            {
              v69 = (CLClientManagerAuthorizationContext *)objc_msgSend(v88, "UTF8String");
              v70 = objc_msgSend(v87, "UTF8String");
              v71 = objc_msgSend(objc_msgSend(v57, "objectForKeyedSubscript:", CFSTR("ZoneId")), "UTF8String");
              *(_DWORD *)buf = 68292610;
              v114 = 0;
              v115 = 2082;
              v116 = "";
              v117 = 2082;
              v118 = (unint64_t)v69;
              v31 = &qword_1022A0000;
              v119 = 2082;
              *(_QWORD *)v120 = v70;
              v29 = &qword_1022A0000;
              *(_WORD *)&v120[8] = 2082;
              *(_QWORD *)&v120[10] = v71;
              *(_WORD *)&v120[18] = 2050;
              v121 = v59;
              *(_WORD *)v122 = 2050;
              *(_QWORD *)&v122[2] = v60;
              *(_WORD *)v123 = 2050;
              *(_QWORD *)&v123[2] = v61;
              v124 = 2050;
              v125 = v84;
              v126 = 1026;
              v127 = v64;
              v128 = 1026;
              v129 = v65;
              v130 = 1026;
              v131 = v86;
              v132 = 1026;
              v133 = v85;
              v134 = 2050;
              v135 = v98;
              v136 = 1026;
              v137 = v100;
              v138 = 1026;
              v139 = v99;
              _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#pla #clldu-UpdateServiceMask using relevant zone\", \"bundleID\":%{public, location:escape_only}s, \"bundlePath\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s, \"zoneTransientRegistration\":%{public, location:CLClientRegistrationResult}lld, \"zoneCC\":%{public, location:CLClientCorrectiveCompensation}lld, \"zoneIncidentalUse\":%{public, location:CLClientIncidentalUseMode}lld, \"zoneInUseLevel\":%{public, location:CLClientInUseLevel}lld, \"zoneEffectiveMask\":%{public}d, \"zoneProvisionalMask\":%{public}d, \"ClientOldEffectiveMask\":%{public}d, \"ClientOldProvisionalMask\":%{public}d, \"zoneServiceMaskOptr\":%{public, location:CLClientInterestZoneServiceMaskOperator}lld, \"ClientNewEffectiveMask\":%{public}d, \"ClientNewProvisionalMask\":%{public}d}", buf, 0x86u);
            }
            v55 = v93;
          }
          v95 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v101, &v140, 16);
        }
        while (v95);
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218BA48);
      v72 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289282;
        v114 = 0;
        v115 = 2082;
        v116 = "";
        v117 = 2114;
        v118 = (unint64_t)v25;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Skip #clldu-UpdateClientServiceTypeMasks #pla for zones. No Relevant Interest Zones\", \"dictionary\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    v32 = v83;
    v25 = v80;
  }
  v73 = sub_10019F778(v25, 0, v32, 0);
  v38 = (unint64_t)objc_msgSend(-[NSArray objectAtIndexedSubscript:](v73, "objectAtIndexedSubscript:", 1), "intValue");
  v39 = (unint64_t)objc_msgSend(-[NSArray objectAtIndexedSubscript:](v73, "objectAtIndexedSubscript:", 2), "intValue");
LABEL_66:
  if ((_DWORD)v38 == 8 || (_DWORD)v38 == 1)
    v74 = v81 == 3;
  else
    v74 = (_DWORD)v38 == 0;
  LOBYTE(v78) = v74;
  v75 = -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:]([CLClientManagerAuthorizationContext alloc], "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:", v82, v38, v39, v100, v99, sub_1005171EC(v25, v39, v32), v78);
  if (v29[58] != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218BA48);
  v76 = v31[59];
  if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v114 = 0;
    v115 = 2082;
    v116 = "";
    v117 = 2114;
    v118 = (unint64_t)v75;
    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#clldu freshAuthContext\", \"AuthContext\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  return v75;
}

uint64_t sub_1001A4314(int a1, int a2, int a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v7;
  BOOL v9;
  uint64_t v10;

  v7 = 0;
  switch(a1)
  {
    case 0:
      v7 = 64639;
      if (a6)
        v7 = 195711;
      if (a7)
        v7 |= 0x40000uLL;
      break;
    case 1:
    case 8:
      v9 = (a4 != 3 || a2 != 1) && a2 <= 1;
      v10 = 0x4000;
      if (!v9)
        v10 = 52351;
      if (a7)
        v10 |= 0x40000uLL;
      v7 = v10 | 0x1000;
      break;
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      break;
    case 5:
      sub_1018FD430();
    default:
      v7 = 0;
      break;
  }
  if (a3 == 2)
    return v7 & 0x7AFF8;
  else
    return v7;
}

uint64_t sub_1001A4400(void *a1)
{
  if ((objc_msgSend(objc_msgSend(a1, "objectForKey:", CFSTR("TemporaryAuthorization")), "unsignedIntValue") & 2) != 0)return 1;
  else
    return (uint64_t)objc_msgSend(objc_msgSend(a1, "objectForKey:", CFSTR("CorrectiveCompensationEnabled")), "unsignedIntValue");
}

CLClientKeyPath *sub_1001A4450(audit_token_t *a1)
{
  void *p_p;
  NSString *v2;
  uint64_t v3;
  CLClientKeyPath *v4;
  NSObject *v5;
  NSObject *v6;
  char v8;
  void *__p;
  __int16 v10;
  const char *v11;
  __int16 v12;
  CLClientKeyPath *v13;

  v8 = 0;
  sub_1001A4674(a1, &v8, (std::string *)&__p);
  if (SBYTE3(v13) >= 0)
    p_p = &__p;
  else
    p_p = __p;
  v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  if (SBYTE3(v13) < 0)
    operator delete(__p);
  if (-[NSString length](v2, "length"))
  {
    if (v8)
      v3 = 101;
    else
      v3 = 105;
    v4 = +[CLClientKeyPath clientKeyPathWithUserName:clientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithUserName:clientAnchor:anchorType:", 0, v2, v3);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      __p = (void *)68289282;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Determined clientKeyPath from audit token\", \"clientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      __p = (void *)68289026;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Failed to get client info from audit token to create clientKeyPath. Returning #nullCKP\"}", (uint8_t *)&__p, 0x12u);
    }
    return (CLClientKeyPath *)+[CLClientKeyPath nullClientKeyPath](CLClientKeyPath, "nullClientKeyPath");
  }
  return v4;
}

void sub_1001A4650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001A4674(audit_token_t *a1@<X0>, _BYTE *a2@<X1>, std::string *a3@<X8>)
{
  void *v6;
  int v7;
  void *__p[2];
  int64_t v9;

  sub_1001A4728(a1, __p);
  *a2 = 0;
  v6 = (void *)HIBYTE(v9);
  v7 = SHIBYTE(v9);
  if (v9 < 0)
    v6 = __p[1];
  if (v6)
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a3->__r_.__value_.__r.__words[2] = v9;
  }
  else
  {
    *a2 = 1;
    sub_1001A48F4(a1, a3);
    if (v7 < 0)
      operator delete(__p[0]);
  }
}

void sub_1001A4710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  int v10;

  if (v10 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001A4728(audit_token_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::string *p_p;
  const __CFString *v4;
  CFURLRef v5;
  CFURLRef v6;
  const void *v7;
  __CFBundle *Unique;
  __CFBundle *v9;
  const __CFString *Identifier;
  __int128 v11;
  uint64_t v12;
  std::string __p;

  sub_1001A48F4(a1, &__p);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v4 = sub_1001A48D8((char *)p_p);
  if (v4)
  {
    v5 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v4, kCFURLPOSIXPathStyle, 0);
    v6 = v5;
    if (v5)
    {
      v7 = (const void *)_CFBundleCopyBundleURLForExecutableURL(v5);
      if (v7)
      {
        Unique = (__CFBundle *)_CFBundleCreateUnique(kCFAllocatorDefault, v7);
        v9 = Unique;
        if (Unique)
        {
          Identifier = CFBundleGetIdentifier(Unique);
          if (Identifier)
          {
            sub_1001A486C(Identifier, (uint64_t)&v11);
            *(_OWORD *)a2 = v11;
            a2[2] = v12;
          }
          CFRelease(v9);
        }
        CFRelease(v7);
      }
      CFRelease(v6);
    }
    CFRelease(v4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1001A482C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1001A486C@<W0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_1001C0048(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_1001A48BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

CFStringRef sub_1001A48D8(char *cStr)
{
  return CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
}

std::string *sub_1001A48F4@<X0>(audit_token_t *a1@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  std::string::value_type buffer[4096];

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  result = (std::string *)proc_pidpath_audittoken(a1, buffer, 0x1000u);
  if ((int)result >= 1)
    return std::string::assign(a2, buffer);
  return result;
}

void sub_1001A498C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1001A49A8(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  void *v25;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v10 = 68290562;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2082;
    v15 = "state_transition";
    v16 = 2082;
    v17 = "DaemonClient";
    v18 = 2050;
    v19 = a1;
    v20 = 2082;
    v21 = "clientKeyPath";
    v22 = 2114;
    v23 = v5;
    v24 = 2114;
    v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"state transition\", \"event\":%{public, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"id\":\"%{public}p\", \"property\":%{public, location:escape_only}s, \"old\":%{public, location:escape_only}@, \"new\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x4Eu);
  }
  if (!*(_QWORD *)(a1 + 48))
    goto LABEL_16;
  if ((objc_msgSend(a2, "isEqual:") & 1) != 0)
    return;
  if (!*(_BYTE *)(a1 + 72))
  {

LABEL_16:
    *(_QWORD *)(a1 + 48) = a2;
    return;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    v7 = *(const char **)(a1 + 48);
    v10 = 68289538;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v7;
    v16 = 2114;
    v17 = (const char *)a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking with the ckp that we originally set fRegistrationReceived with\", \"old\":%{public, location:escape_only}@, \"new\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
  }
  v8 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    v9 = *(const char **)(a1 + 48);
    v10 = 68289538;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v9;
    v16 = 2114;
    v17 = (const char *)a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking with the ckp that we originally set fRegistrationReceived with", "{\"msg%{public}.0s\":\"Attempting to set CLDC clientKeyPath after we've already finished registration. Sticking with the ckp that we originally set fRegistrationReceived with\", \"old\":%{public, location:escape_only}@, \"new\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x26u);
  }
}

uint64_t sub_1001A4C54(id *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  id v7;
  id v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  unsigned int v12;
  id v13;
  _QWORD v15[8];

  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  v7 = sub_100196E90((uint64_t)a1, a2);
  v8 = objc_msgSend(v7, "legacyClientKey");
  v9 = sub_1001A4DD4((uint64_t)a1, (uint64_t)v7);
  v10 = a1[135];
  if (v9)
  {
    if (objc_msgSend(v10, "objectForKeyedSubscript:", v8))
    {
      objc_msgSend(a1[135], "removeObjectForKey:", v8);
      objc_msgSend(a1[134], "setClientsAuthorizationMap:", objc_msgSend(a1[135], "copy"));
    }
    sub_1007B6BC8((uint64_t)a1, v7, (NSMutableDictionary *)objc_msgSend(objc_msgSend(a1[17], "readonlyStoreAtKeyPath:", v7), "dictionary"));
    v11 = 1;
  }
  else
  {
    v12 = objc_msgSend(objc_msgSend(v10, "objectForKeyedSubscript:", v8), "isEqual:", a3);
    if ((v12 & 1) == 0)
    {
      v13 = a1[17];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      v15[2] = sub_10020F488;
      v15[3] = &unk_102153E98;
      v15[4] = v7;
      v15[5] = a3;
      v15[6] = v8;
      v15[7] = a1;
      objc_msgSend(v13, "iterateIdentitiesRelatedToKeyPath:withBlock:", v7, v15);
      objc_msgSend(a1[134], "setClientsAuthorizationMap:", objc_msgSend(a1[135], "copy"));
    }
    v11 = v12 ^ 1;
  }

  return v11;
}

void sub_1001A4DB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001A4DD4(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  id v6;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v5, "isValidCKP") & 1) != 0)
    v6 = sub_1001A4E68(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5), "dictionary"));
  else
    v6 = 0;

  return v6;
}

void sub_1001A4E50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1001A4E68(void *a1)
{
  id v1;
  id result;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *i;
  id v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v1 = objc_msgSend(a1, "objectForKey:", CFSTR("InterestZones"));
  result = objc_msgSend(v1, "count");
  if (result)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v3)
    {
      v4 = v3;
      v5 = 0;
      v6 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v1);
          v8 = objc_msgSend(v1, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i));
          if (objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("Provenance")), "intValue") != 2)
          {
            v9 = sub_100199284(v8);
            if (!v9)
              v9 = 2
                 * (objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("TemporaryAuthorization")), "intValue") & 1u);
            v5 |= v9;
          }
        }
        v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
    return (id)(v5 != 0);
  }
  return result;
}

void sub_1001A508C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7;
  NSMutableArray *v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  NSMutableArray *v25;

  v7 = sub_100196E90(a1, a2);
  v8 = (NSMutableArray *)objc_msgSend(*(id *)(a1 + 360), "objectForKey:", v7);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = 68290306;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2114;
    v17 = v7;
    v18 = 2050;
    v19 = a3;
    v20 = 1026;
    v21 = (unsigned __int16)a3;
    v22 = 1026;
    v23 = a4;
    v24 = 2114;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#identityValidation cache updating\", \"Client\":%{public, location:escape_only}@, \"upid\":%{public}lld, \"pid\":%{public}d, \"coming\":%{public}hhd, \"AllowedUniquePids\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x3Cu);
  }
  if (a4)
  {
    if (!v8)
    {
      v8 = objc_opt_new(NSMutableArray);
      objc_msgSend(*(id *)(a1 + 360), "setObject:forKeyedSubscript:", v8, v7);
    }
    -[NSMutableArray addObject:](v8, "addObject:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a3));
  }
  else
  {
    v10 = -[NSMutableArray indexOfObject:](v8, "indexOfObject:", +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", a3));
    if (v10 != (id)0x7FFFFFFFFFFFFFFFLL)
    {
      -[NSMutableArray removeObjectAtIndex:](v8, "removeObjectAtIndex:", v10);
      if (!-[NSMutableArray count](v8, "count"))
      {
        objc_msgSend(*(id *)(a1 + 360), "removeObjectForKey:", v7);
        v8 = 0;
      }
    }
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = 68290306;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2114;
    v17 = v7;
    v18 = 2050;
    v19 = a3;
    v20 = 1026;
    v21 = (unsigned __int16)a3;
    v22 = 1026;
    v23 = a4;
    v24 = 2114;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#identityValidation cache updated\", \"Client\":%{public, location:escape_only}@, \"upid\":%{public}lld, \"pid\":%{public}d, \"coming\":%{public}hhd, \"AllowedUniquePids\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x3Cu);
  }
}

void sub_1001A5324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  NSDictionary *v7;
  _QWORD v8[3];
  _QWORD v9[3];

  v2 = *(_QWORD *)(a1 + 16);
  LODWORD(v7) = objc_msgSend(*(id *)(a1 + 112), "transientAwareRegistrationResult");
  v3 = sub_1001A0310(v2, (int *)&v7);
  if (*(_BYTE *)(a1 + 72))
  {
    v4 = v3;
    v5 = objc_msgSend(*(id *)(a1 + 112), "isAuthorizedForServiceType:", 12) ^ 1;
    if ((_DWORD)v4)
      v6 = v5;
    else
      v6 = 0;
    v8[0] = CFSTR("kCLConnectionMessageStatusKey");
    v9[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v4);
    v8[1] = CFSTR("kCLConnectionMessageCompensationKey");
    v9[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6);
    v8[2] = CFSTR("kCLConnectionMessageAuthorizedForWidgetUpdatesKey");
    v9[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 112), "authorizedForWidgetUpdates"));
    v7 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v9, v8, 3);
    sub_1001A7EA8(a1, &v7);
  }
}

uint64_t sub_1001A5490(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t **i;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t k;
  uint64_t v30;
  char *v31;
  size_t v32;
  _BYTE *v33;
  char *v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  NSObject *v37;
  uint64_t v38;
  std::string *v39;
  uint64_t v40;
  std::string *v41;
  char *v42;
  std::string v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  std::string *v52;
  _BYTE buf[28];
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  void *v57;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_QWORD *)(a1 + 112);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v5;
    v54 = 2114;
    v55 = v6;
    v56 = 2114;
    v57 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthContext Set authorization context\", \"ckp\":%{public, location:escape_only}@, \"prevAuthContext\":%{public, location:escape_only}@, \"newAuthContext\":%{public, location:escape_only}@}", buf, 0x30u);
  }
  v7 = *(id *)(a1 + 112);
  v8 = a2;
  *(_QWORD *)(a1 + 112) = v8;
  sub_1001A5BAC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 160), v8);
  for (i = *(uint64_t ***)(a1 + 304); i; i = (uint64_t **)*i)
    sub_1001A5C80((id *)i[3], *(void **)(a1 + 112));
  result = (uint64_t)objc_msgSend(v7, "isEqual:", *(_QWORD *)(a1 + 112));
  if ((result & 1) == 0)
  {
    v11 = objc_msgSend(*(id *)(a1 + 112), "transientAwareRegistrationResult");
    if (v11 <= 8)
    {
      if (((1 << v11) & 0x1C) != 0)
      {
        sub_1001A5324(a1);
        v27 = 0;
        v28 = a1;
LABEL_73:
        sub_1001A6AC4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), v28);
        return sub_1001A6B50(*(_QWORD *)(a1 + 16), a1, v27);
      }
      if (((1 << v11) & 0x103) != 0)
      {
        *(_QWORD *)&v47 = &v47;
        *((_QWORD *)&v47 + 1) = &v47;
        v48 = 0;
        v12 = a1 + 128;
        sub_1001A83D0(&v47, (uint64_t *)(a1 + 128));
        for (j = *((_QWORD *)&v47 + 1); (__int128 *)j != &v47; j = *(_QWORD *)(j + 8))
        {
          v14 = CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v14))
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102174F58);
            v15 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
            {
              v16 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
              if (*((char *)v16 + 23) >= 0)
                v17 = v16;
              else
                v17 = (uint64_t *)*v16;
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v17;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client authorized; sending out cached message\", \"msg\":%{public, location:escape_only}s}",
                buf,
                0x1Cu);
            }
            v18 = *(std::__shared_weak_count **)(j + 24);
            v44 = *(_QWORD *)(j + 16);
            v45 = v18;
            if (v18)
            {
              p_shared_owners = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(p_shared_owners);
              while (__stxr(v20 + 1, p_shared_owners));
            }
            v46 = *(_OWORD *)(j + 32);
            sub_10011D4E8(a1, (uint64_t)&v44);
            v21 = v45;
            if (v45)
            {
              v22 = (unint64_t *)&v45->__shared_owners_;
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
          }
          else
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102174F58);
            v24 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
            {
              v25 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)(j + 16));
              if (*((char *)v25 + 23) >= 0)
                v26 = v25;
              else
                v26 = (uint64_t *)*v25;
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = v26;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client authorized but no longer interested in cached message; discarding cache\","
                " \"msg\":%{public, location:escape_only}s}",
                buf,
                0x1Cu);
            }
          }
        }
        if (*(_QWORD *)(a1 + 144))
        {
          sub_1015A2E04(&v43, "{ ");
          for (k = *(_QWORD *)(a1 + 136); k != v12; k = *(_QWORD *)(k + 8))
          {
            v30 = CLConnectionMessage::name(*(CLConnectionMessage **)(k + 16));
            v31 = (char *)v30;
            if (*(char *)(v30 + 23) >= 0)
              v32 = *(unsigned __int8 *)(v30 + 23);
            else
              v32 = *(_QWORD *)(v30 + 8);
            sub_100259584((uint64_t)buf, v32 + 1);
            if (buf[23] >= 0)
              v33 = buf;
            else
              v33 = *(_BYTE **)buf;
            if (v32)
            {
              if (v31[23] >= 0)
                v34 = v31;
              else
                v34 = *(char **)v31;
              memmove(v33, v34, v32);
            }
            *(_WORD *)&v33[v32] = 32;
            if (buf[23] >= 0)
              v35 = buf;
            else
              v35 = *(const std::string::value_type **)buf;
            if (buf[23] >= 0)
              v36 = buf[23];
            else
              v36 = *(_QWORD *)&buf[8];
            std::string::append(&v43, v35, v36);
            if ((buf[23] & 0x80000000) != 0)
              operator delete(*(void **)buf);
          }
          std::string::append(&v43, "}");
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102174F78);
          v37 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            v38 = *(_QWORD *)(a1 + 48);
            v39 = &v43;
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v39 = (std::string *)v43.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 138412546;
            *(_QWORD *)&buf[4] = v38;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v39;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Warning %@ is still not authorized for %s, dropping", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102174F78);
            v40 = *(_QWORD *)(a1 + 48);
            v41 = &v43;
            if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v41 = (std::string *)v43.__r_.__value_.__r.__words[0];
            v49 = 138412546;
            v50 = v40;
            v51 = 2080;
            v52 = v41;
            v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning %@ is still not authorized for %s, dropping", &v49, 22);
            sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::setAuthorizationContext(CLClientManagerAuthorizationContext *)", "%s\n", v42);
            if (v42 != buf)
              free(v42);
          }
          sub_1001A5CBC((uint64_t *)(a1 + 128));
          if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v43.__r_.__value_.__l.__data_);
        }
        sub_1001A5CBC((uint64_t *)&v47);
      }
      else if (v11 == 5 && objc_msgSend(*(id *)(a1 + 112), "registrationResult") == 5)
      {
        sub_10191BB0C();
        __break(1u);
      }
    }
    sub_1001A5324(a1);
    v28 = 0;
    v27 = 1;
    goto LABEL_73;
  }
  return result;
}

void sub_1001A5B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a18 < 0)
    operator delete(__p);
  sub_1001A5CBC(&a23);
  _Unwind_Resume(a1);
}

void sub_1001A5BAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  int v9;

  v7 = sub_100196E90(a1, a2);
  if (objc_msgSend(a4, "isAuthorizedForServiceTypeMask:", a3)
    && !objc_msgSend(a4, "registrationResult"))
  {
    v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v7), "dictionary");
    v9 = sub_1001A4400(v8);
    LODWORD(v8) = sub_100248810(v8);
    if ((a3 & ~sub_1001A4314(1, (int)objc_msgSend(a4, "inUseLevel"), v9, (int)v8, 0, 0, 0)) != 0)
      sub_100240394(a1, (uint64_t)v7);
  }
}

uint64_t sub_1001A5C80(id *a1, void *a2)
{
  id v4;

  v4 = a2;

  a1[2] = a2;
  return (*((uint64_t (**)(id *))*a1 + 3))(a1);
}

void sub_1001A5CBC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_100261F44((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1001A5D2C(uint64_t a1, int a2, void *a3)
{
  id v6;
  unsigned int v7;
  void *v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  char v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  const char *v36;
  uint8_t *v37;
  int v38;
  uint64_t v39;
  uint8_t buf[1640];

  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDynamicAccuracyReductionKey")), "BOOLValue");
  v8 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = a3;
  v9 = a3;

  if ((sub_1001A638C(a1) & 1) == 0)
    goto LABEL_37;
  sub_1001A638C(a1);
  if (objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")), "doubleValue");
    v11 = v10;
  }
  else
  {
    v11 = -1.0;
  }
  if (objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDistanceFilterKey")))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDistanceFilterKey")), "doubleValue");
    v13 = v12;
    if (a2)
    {
LABEL_7:
      v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDynamicAccuracyReductionKey")), "BOOLValue");
      v15 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageAlteredAccessoryLocationsKey")), "BOOLValue");
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v16 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v17 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 68290306;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v17;
        *(_WORD *)&buf[28] = 2050;
        *(double *)&buf[30] = v11;
        *(_WORD *)&buf[38] = 2050;
        *(double *)&buf[40] = v13;
        *(_WORD *)&buf[48] = 1026;
        *(_DWORD *)&buf[50] = v14;
        *(_WORD *)&buf[54] = 1026;
        *(_DWORD *)&buf[56] = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"client subscribing to location\", \"Client\":%{public, location:escape_only}@, \"desiredAccuracy\":\"%{public}f\", \"distanceFilter\":\"%{public}f\", \"dynamicAccuracyReductionEnabled\":%{public}d, \"allowsAlteredAccessoryLocations\":%{public}d}", buf, 0x3Cu);
      }
      if (*(double *)(a1 + 224) != -1.0)
        *(double *)(a1 + 224) = sub_100515CB4();
      if (v7 != v14)
        sub_100090A50(a1 + 520);
      sub_1001AFFFC(a1);
      sub_1001A765C(a1);
      goto LABEL_37;
    }
  }
  else
  {
    v13 = -1.0;
    if (a2)
      goto LABEL_7;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v18 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v19 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = a1;
    *(_WORD *)&buf[28] = 2114;
    *(_QWORD *)&buf[30] = v19;
    *(_WORD *)&buf[38] = 2050;
    *(double *)&buf[40] = v11;
    *(_WORD *)&buf[48] = 2050;
    *(double *)&buf[50] = v13;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationSubcription #pwrlog client unsubscribing\", \"this\":\"%{public}p\", \"ClientKeyPath\":%{public, location:escape_only}@, \"DesiredAccuracy\":\"%{public}f\", \"DistanceFilter\":\"%{public}f\"}", buf, 0x3Au);
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A38C8);
  v20 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "@ClxClient, unsubscribe, %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A38C8);
    v35 = *(_QWORD *)(a1 + 24);
    v38 = 138543362;
    v39 = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxClient, unsubscribe, %{public}@", &v38, 12);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::handleRequestLocation(BOOL, NSDictionary *)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  objc_msgSend(*(id *)(a1 + 576), "invalidate");

  *(_QWORD *)(a1 + 576) = 0;
  v22 = *(_BYTE *)(a1 + 236);
  *(_BYTE *)(a1 + 236) = 0;
  sub_101163EF4(a1);
  sub_1011644B8((id **)(a1 + 512), 0);
  if (*(_BYTE *)(a1 + 312))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v23 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ending metric session (LocationUpdateSession)\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    *(CFAbsoluteTime *)(a1 + 376) = CFAbsoluteTimeGetCurrent();
    *(_BYTE *)(a1 + 432) = v22;
    if (*(_BYTE *)(a1 + 58))
    {
      *(double *)(a1 + 504) = *(double *)(a1 + 504) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
    }
    v25 = sub_10073C788();
    sub_10073CFC8(v25, (unsigned __int8 *)(a1 + 312));
    memset(buf, 0, 71);
    v26 = 0uLL;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
    v27 = (void **)(a1 + 328);
    if (*(char *)(a1 + 351) < 0)
    {
      operator delete(*v27);
      v26 = 0uLL;
    }
    *(_OWORD *)v27 = v26;
    *(_OWORD *)(a1 + 344) = v26;
    *(_DWORD *)(a1 + 360) = 1000;
    *(_DWORD *)(a1 + 372) = 0;
    *(_QWORD *)(a1 + 364) = 0;
    *(_QWORD *)(a1 + 376) = 0xBFF0000000000000;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 384) = xmmword_101BAFEE0;
    *(_OWORD *)(a1 + 400) = _Q1;
    *(_OWORD *)(a1 + 416) = _Q1;
    *(_BYTE *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)&buf[63];
    *(_QWORD *)(a1 + 504) = 0xBFF0000000000000;
    v33 = *(_OWORD *)&buf[48];
    *(_OWORD *)(a1 + 465) = *(_OWORD *)&buf[32];
    *(_OWORD *)(a1 + 481) = v33;
    v34 = *(_OWORD *)&buf[16];
    *(_OWORD *)(a1 + 433) = *(_OWORD *)buf;
    *(_OWORD *)(a1 + 449) = v34;
  }
  *(_BYTE *)(a1 + 58) = 0;
LABEL_37:

}

void sub_1001A6348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1001A638C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1001A639C(uint64_t a1, char *__s, int a3)
{
  int v3;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSNull *v9;
  void *v10;
  uint64_t v11;
  void *i;
  uint64_t v13;
  CLOSTransaction *v14;
  CLOSTransaction *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  unsigned int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  void *v29[2];
  char v30;
  unsigned int v31[18];
  __int128 v32;
  char v33;
  unsigned int v34[18];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  char *v46;
  _BYTE __p[12];
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  char *v53;
  _BYTE v54[128];

  v3 = a3;
  if (a3)
  {
    sub_1015A2E04(__p, __s);
    v6 = sub_10011DCB4(a1, (uint64_t)__p);
    if (SHIBYTE(v50) < 0)
      operator delete(*(void **)__p);
    if ((objc_msgSend(*(id *)(a1 + 112), "isAuthorizedForServiceTypeMask:", v6) & 1) != 0)
    {
LABEL_5:
      LODWORD(v7) = 0;
      v8 = 1;
    }
    else
    {
      switch(objc_msgSend(*(id *)(a1 + 112), "transientAwareRegistrationResult"))
      {
        case 2u:
          if ((sub_10011E0F0() & 1) == 0)
            goto LABEL_29;
          v8 = 0;
LABEL_23:
          LODWORD(v7) = 1;
          break;
        case 3u:
          v8 = 0;
          LODWORD(v7) = 0;
          break;
        case 4u:
        case 6u:
        case 7u:
          v8 = 1;
          goto LABEL_23;
        case 5u:
          if (objc_msgSend(*(id *)(a1 + 112), "registrationResult") != 5)
            goto LABEL_5;
          sub_10191C200();
          __break(1u);
LABEL_29:
          LODWORD(v7) = objc_msgSend(*(id *)(a1 + 112), "inUseLevelIsAtLeast:", 3);
          v8 = 0;
          break;
        default:
          goto LABEL_5;
      }
    }
    if (sub_1001A6BBC(__s))
    {
      if (!strncmp(__s, "kCLConnectionMessage", 0x14uLL))
        v13 = 20;
      else
        v13 = 0;
      v14 = sub_1001B7FA8((const void *)a1, &__s[v13]);
    }
    else
    {
      v14 = +[NSNull null](NSNull, "null");
    }
    v15 = v14;
    objc_msgSend(*(id *)(a1 + 152), "setObject:forKeyedSubscript:", v14, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s));
    if (!strcmp(__s, "kCLConnectionMessageLocation"))
      objc_msgSend(*(id *)(a1 + 152), "setObject:forKeyedSubscript:", v15, CFSTR("kCLConnectionMessageCompensatedLocation"));
    *(_QWORD *)(a1 + 160) |= v6;
  }
  else
  {
    v9 = (NSNull *)objc_msgSend(*(id *)(a1 + 152), "objectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s));
    if (v9 && v9 != +[NSNull null](NSNull, "null"))
      sub_1007EF2B8(*(_QWORD *)(a1 + 16));
    objc_msgSend(*(id *)(a1 + 152), "removeObjectForKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __s));
    if (!strcmp(__s, "kCLConnectionMessageLocation"))
      objc_msgSend(*(id *)(a1 + 152), "removeObjectForKey:", CFSTR("kCLConnectionMessageCompensatedLocation"));
    *(_QWORD *)(a1 + 160) = 0;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v10 = *(void **)(a1 + 152);
    v7 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v54, 16);
    if (v7)
    {
      v11 = *(_QWORD *)v36;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v36 != v11)
            objc_enumerationMutation(v10);
          sub_1015A2E04(__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)i), "UTF8String"));
          *(_QWORD *)(a1 + 160) |= sub_10011DCB4(a1, (uint64_t)__p);
          if (SHIBYTE(v50) < 0)
            operator delete(*(void **)__p);
        }
        v7 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v35, v54, 16);
      }
      while (v7);
    }
    v8 = 1;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v16 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v17 = *(_QWORD *)(a1 + 48);
    v18 = "un";
    *(_DWORD *)__p = 138544130;
    if (v3)
      v18 = "";
    *(_QWORD *)&__p[4] = v17;
    v48 = 2050;
    v49 = a1;
    v50 = 2082;
    v51 = v18;
    v52 = 2082;
    v53 = __s;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Client %{public}@ (%{public}p) is %{public}ssubscribing to notification %{public}s", __p, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = "un";
    if (v3)
      v27 = "";
    v39 = 138544130;
    v40 = v26;
    v41 = 2050;
    v42 = a1;
    v43 = 2082;
    v44 = v27;
    v45 = 2082;
    v46 = __s;
    v28 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Client %{public}@ (%{public}p) is %{public}ssubscribing to notification %{public}s", &v39, 42);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLDaemonClient::modifySubscription(const char *const, BOOL)", "%s\n", v28);
    if (v28 != __p)
      free(v28);
  }
  if (*(_BYTE *)(a1 + 72))
  {
    sub_1015A2E04(__p, __s);
    if (!sub_10011DCB4(a1, (uint64_t)__p))
      v3 = 0;
    if (SHIBYTE(v50) < 0)
    {
      operator delete(*(void **)__p);
      if (!v3)
        goto LABEL_55;
    }
    else if (!v3)
    {
      goto LABEL_55;
    }
    v19 = *(void **)(a1 + 48);
    sub_100195B0C(*(_QWORD *)(a1 + 16), (uint64_t)v19);
    if (!*(_BYTE *)(a1 + 104))
      sub_1007D4958(*(_QWORD *)(a1 + 16), v19, 1);
LABEL_55:
    if ((_DWORD)v7)
    {
      if (!*(_BYTE *)(a1 + 91)
        && (objc_msgSend(*(id *)(a1 + 48), "isAuthLimited") & 1) == 0
        && !sub_100240384(*(_QWORD *)(a1 + 16))
        && !*(_BYTE *)(a1 + 73))
      {
        v23 = *(_QWORD *)(a1 + 16);
        v24 = *(_QWORD *)(a1 + 48);
        if (*(_BYTE *)(a1 + 369))
        {
          sub_1015A2E04(&v32, "");
          sub_1007F5908((uint64_t)v34, 2, v24, 0, &v32);
          v20 = sub_1007CEC84(v23, a1, v34, 0);
          sub_100235568((uint64_t)v34);
          if ((v33 & 0x80000000) == 0)
            goto LABEL_62;
          v25 = (void *)v32;
        }
        else
        {
          sub_1015A2E04(v29, "");
          sub_1007F5908((uint64_t)v31, 5, v24, 0, (__int128 *)v29);
          v20 = sub_1007CEC84(v23, a1, v31, 0);
          sub_100235568((uint64_t)v31);
          if ((v30 & 0x80000000) == 0)
            goto LABEL_62;
          v25 = v29[0];
        }
        operator delete(v25);
        goto LABEL_62;
      }
      v20 = objc_msgSend(*(id *)(a1 + 112), "registrationResult");
    }
    else
    {
      v20 = 0;
    }
LABEL_62:
    if (sub_1001A6DE8(__s))
    {
      sub_1001A6AC4(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), 0);
      sub_1001A6B50(*(_QWORD *)(a1 + 16), a1, 1);
    }
    if (v20 == 2)
      v21 = (int)v7;
    else
      v21 = 0;
    if (v21 == 1)
      sub_100B9E87C((_QWORD *)a1);
  }
  return v8;
}

void sub_1001A6A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  sub_100235568((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_1001A6AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  double Current;
  id result;
  unsigned __int8 v9[32];

  v5 = sub_100196E90(a1, a2);
  sub_100193F5C((_QWORD *)a1, (uint64_t)v5, a3, v9);
  sub_10019492C(a1, (uint64_t)v5, v9);
  v6 = v9[30];
  Current = CFAbsoluteTimeGetCurrent();
  result = (id)sub_100194D94(a1, v5, 5, v6, 0, 0, Current);
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 136), "persist");
  return result;
}

uint64_t sub_1001A6B50(uint64_t a1, uint64_t a2, int a3)
{
  id v5;
  uint64_t v6;
  double Current;
  unsigned __int8 v9;

  v9 = 0;
  sub_1001945A8(a1, a2, a3, &v9);
  v5 = sub_1001948D4(a2, 0);
  v6 = v9;
  Current = CFAbsoluteTimeGetCurrent();
  return sub_100194D94(a1, v5, 2, v6, 0, 0, Current);
}

uint64_t sub_1001A6BBC(char *__s)
{
  BOOL v2;
  BOOL v3;
  uint64_t result;
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, __s);
  v2 = sub_10011D92C(__p);
  v3 = v2;
  if (v6 < 0)
  {
    operator delete(__p[0]);
    if (v3)
      return 0;
  }
  else if (v2)
  {
    return 0;
  }
  result = strcmp(__s, "kCLConnectionMessageLocation");
  if ((_DWORD)result)
  {
    result = strcmp(__s, "kCLConnectionMessageLocationUnavailable");
    if ((_DWORD)result)
    {
      result = strcmp(__s, "kCLConnectionMessageMotionActivityUpdate");
      if ((_DWORD)result)
      {
        result = strcmp(__s, "kCLConnectionMessageActivityAlarmStart");
        if ((_DWORD)result)
        {
          result = strcmp(__s, "kCLConnectionMessageSignificantLocationChange");
          if ((_DWORD)result)
          {
            result = strcmp(__s, "kCLConnectionMessageSignificantLocationVisit");
            if ((_DWORD)result)
            {
              result = strcmp(__s, "kCLConnectionMessageSignificantLocationVisitState");
              if ((_DWORD)result)
              {
                result = strcmp(__s, "kCLConnectionMessageStepCountUpdate");
                if ((_DWORD)result)
                {
                  result = strcmp(__s, "kCLConnectionMessageExerciseMinuteUpdate");
                  if ((_DWORD)result)
                  {
                    result = strcmp(__s, "kCLConnectionMessageWorkoutEvent");
                    if ((_DWORD)result)
                    {
                      result = strcmp(__s, "kCLConnectionMessageNatalimetryUpdate");
                      if ((_DWORD)result)
                      {
                        result = strcmp(__s, "kCLConnectionMessageKappaGetStateRequest");
                        if ((_DWORD)result)
                        {
                          result = strcmp(__s, "kCLConnectionMessageSedentaryTimerAlarm");
                          if ((_DWORD)result)
                          {
                            result = strcmp(__s, "kCLConnectionMessageLocationPush");
                            if ((_DWORD)result)
                            {
                              result = strcmp(__s, "kCLConnectionMessageMotionAlarmFire");
                              if ((_DWORD)result)
                              {
                                result = strcmp(__s, "kCLConnectionMessageMiLoServiceEvent");
                                if ((_DWORD)result)
                                {
                                  result = strcmp(__s, "kCLConnectionMessageMiLoPredictionEventUpdate");
                                  if ((_DWORD)result)
                                  {
                                    result = strcmp(__s, "kCLConnectionMessageMiLoServiceDebugResponse");
                                    if ((_DWORD)result)
                                    {
                                      result = strcmp(__s, "kCLConnectionMessageMiLoConnectionStatusEvent");
                                      if ((_DWORD)result)
                                      {
                                        result = strcmp(__s, "kCLConnectionMessageMiLoGenericEventResponse");
                                        if ((_DWORD)result)
                                        {
                                          result = strcmp(__s, "kCLConnectionMessageVO2MaxRetrocomputeStatusUpdate");
                                          if ((_DWORD)result)
                                          {
                                            result = strcmp(__s, "kCLConnectionMessageAnomalyEvent");
                                            if ((_DWORD)result)
                                              return strcmp(__s, "kCLConnectionMessageOdometerGpsAvailability") != 0;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001A6DE8(const char *a1)
{
  uint64_t result;

  result = strcmp(a1, "kCLConnectionMessageCollectMetricsForFunction");
  if ((_DWORD)result)
  {
    result = strcmp(a1, "kCLConnectionMessageGesture");
    if ((_DWORD)result)
    {
      result = strcmp(a1, "kCLConnectionMessageGyroBiasEstimation");
      if ((_DWORD)result)
      {
        result = strcmp(a1, "kCLConnectionMessageMotionActivityUpdate");
        if ((_DWORD)result)
        {
          result = strcmp(a1, "kCLConnectionMessageMotionActivityPeriodicUpdate");
          if ((_DWORD)result)
          {
            result = strcmp(a1, "kCLConnectionMessageMotionActivityQuery");
            if ((_DWORD)result)
            {
              result = strcmp(a1, "kCLConnectionMessageMotionActivityAvailable");
              if ((_DWORD)result)
              {
                result = strcmp(a1, "kCLConnectionMessageActivityAlarmStart");
                if ((_DWORD)result)
                {
                  result = strcmp(a1, "kCLConnectionMessageActivityAlarmAvailable");
                  if ((_DWORD)result)
                  {
                    result = strcmp(a1, "kCLConnectionMessageStepCountUpdate");
                    if ((_DWORD)result)
                    {
                      result = strcmp(a1, "kCLConnectionMessagePedometerEvent");
                      if ((_DWORD)result)
                      {
                        result = strcmp(a1, "kCLConnectionMessageStartStepCountAvailable");
                        if ((_DWORD)result)
                        {
                          result = strcmp(a1, "kCLConnectionMessageStepCountQuery");
                          if ((_DWORD)result)
                          {
                            result = strcmp(a1, "kCLConnectionMessageStepCountRecordQuery");
                            if ((_DWORD)result)
                            {
                              result = strcmp(a1, "kCLConnectionMessageFloorCountAvailable");
                              if ((_DWORD)result)
                              {
                                result = strcmp(a1, "kCLConnectionMessagePaceAndCadenceAPIAvailable");
                                if ((_DWORD)result)
                                {
                                  result = strcmp(a1, "InUseAssertion/kCLConnectionMessage");
                                  if ((_DWORD)result)
                                  {
                                    result = strcmp(a1, "EmergencyEnablementAssertion/kCLConnectionMessage");
                                    if ((_DWORD)result)
                                    {
                                      result = strcmp(a1, "LocationIndependenceAssertion/kCLConnectionMessage");
                                      if ((_DWORD)result)
                                      {
                                        result = strcmp(a1, "kCLConnectionMessageStepCountReset");
                                        if ((_DWORD)result)
                                        {
                                          result = strcmp(a1, "kCLConnectionMessageOdometerGpsAvailability");
                                          if ((_DWORD)result)
                                          {
                                            result = strcmp(a1, "kCLConnectionMessageStartOdometerUpdate");
                                            if ((_DWORD)result)
                                            {
                                              result = strcmp(a1, "kCLConnectionMessageCyclingWorkoutDistanceUpdate");
                                              if ((_DWORD)result)
                                              {
                                                result = strcmp(a1, "kCLConnectionMessageOdometerSuitabilityUpdate");
                                                if ((_DWORD)result)
                                                {
                                                  result = strcmp(a1, "kCLConnectionMessageSedentaryTimerIsAvailable");
                                                  if ((_DWORD)result)
                                                  {
                                                    result = strcmp(a1, "kCLConnectionMessageSedentaryTimerIsArmed");
                                                    if ((_DWORD)result)
                                                    {
                                                      result = strcmp(a1, "kCLConnectionMessageSedentaryTimerStart");
                                                      if ((_DWORD)result)
                                                      {
                                                        result = strcmp(a1, "kCLConnectionMessageSedentaryTimerStop");
                                                        if ((_DWORD)result)
                                                        {
                                                          result = strcmp(a1, "kCLConnectionMessageSedentaryTimerQuery");
                                                          if ((_DWORD)result)
                                                          {
                                                            result = strcmp(a1, "kCLConnectionMessageSedentaryTimerAlarm");
                                                            if ((_DWORD)result)
                                                            {
                                                              result = strcmp(a1, "kCLConnectionMessageOnBodyDetection");
                                                              if ((_DWORD)result)
                                                              {
                                                                result = strcmp(a1, "kCLConnectionMessageOnBodyDetectionParams");
                                                                if ((_DWORD)result)
                                                                {
                                                                  result = strcmp(a1, "kCLConnectionMessageSidebandSensorFusionEnable");
                                                                  if ((_DWORD)result)
                                                                  {
                                                                    result = strcmp(a1, "kCLConnectionMessageNatalimetryUpdate");
                                                                    if ((_DWORD)result)
                                                                    {
                                                                      result = strcmp(a1, "kCLConnectionMessageNatalimetryAvailable");
                                                                      if ((_DWORD)result)
                                                                      {
                                                                        result = strcmp(a1, "kCLConnectionMessageNatalimetryQuery");
                                                                        if ((_DWORD)result)
                                                                        {
                                                                          result = strcmp(a1, "Health/kCLConnectionMessageMetMinutesQuery");
                                                                          if ((_DWORD)result)
                                                                          {
                                                                            result = strcmp(a1, "Health/kCLConnectionMessageVO2MaxInputsQuery");
                                                                            if ((_DWORD)result)
                                                                            {
                                                                              result = strcmp(a1, "kCLConnectionMessageNatalimetryGetUserProfile");
                                                                              if ((_DWORD)result)
                                                                              {
                                                                                result = strcmp(a1, "kCLConnectionMessageNatalimetrySetUserProfile");
                                                                                if ((_DWORD)result)
                                                                                {
                                                                                  result = strcmp(a1, "kCLConnectionMessageExerciseMinuteQuery");
                                                                                  if ((_DWORD)result)
                                                                                  {
                                                                                    result = strcmp(a1, "kCLConnectionMessageExerciseMinuteUpdate");
                                                                                    if ((_DWORD)result)
                                                                                    {
                                                                                      result = strcmp(a1, "kCLConnectionMessageWorkoutEvent");
                                                                                      if ((_DWORD)result)
                                                                                      {
                                                                                        result = strcmp(a1, "kCLConnectionMessageBeginWorkoutSession");
                                                                                        if ((_DWORD)result)
                                                                                        {
                                                                                          result = strcmp(a1, "kCLConnectionMessageEndWorkoutSession");
                                                                                          if ((_DWORD)result)
                                                                                          {
                                                                                            result = strcmp(a1, "kCLConnectionMessageSetCurrentWorkoutType");
                                                                                            if ((_DWORD)result)
                                                                                            {
                                                                                              result = strcmp(a1, "kCLConnectionMessagePauseWorkout");
                                                                                              if ((_DWORD)result)
                                                                                              {
                                                                                                result = strcmp(a1, "kCLConnectionMessageResumeWorkout");
                                                                                                if ((_DWORD)result)
                                                                                                {
                                                                                                  result = strcmp(a1, "kCLConnectionMessageVehicleStateIsAvailable");
                                                                                                  if ((_DWORD)result)
                                                                                                  {
                                                                                                    result = strcmp(a1, "kCLConnectionMessageFallStatsAvailable");
                                                                                                    if ((_DWORD)result)
                                                                                                    {
                                                                                                      result = strcmp(a1, "kCLConnectionMessageFallStatsSetEnabled");
                                                                                                      if ((_DWORD)result)
                                                                                                      {
                                                                                                        result = strcmp(a1, "kCLConnectionMessageFallStatsSendStats");
                                                                                                        if ((_DWORD)result)
                                                                                                        {
                                                                                                          result = strcmp(a1, "kCLConnectionMessageFallStatsGetConfig");
                                                                                                          if ((_DWORD)result)
                                                                                                          {
                                                                                                            result = strcmp(a1, "kCLConnectionMessageAnomalyEvent");
                                                                                                            if ((_DWORD)result)
                                                                                                            {
                                                                                                              result = strcmp(a1, "kCLConnectionMessageAnomalyEventCompleted");
                                                                                                              if ((_DWORD)result)
                                                                                                              {
                                                                                                                result = strcmp(a1, "kCLConnectionMessageAnomalyEventCompletedMostRecent");
                                                                                                                if ((_DWORD)result)
                                                                                                                {
                                                                                                                  result = strcmp(a1, "kCLConnectionMessageAnomalyEventEnabled");
                                                                                                                  if ((_DWORD)result)
                                                                                                                  {
                                                                                                                    result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerIsTracking");
                                                                                                                    if ((_DWORD)result)
                                                                                                                    {
                                                                                                                      result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerStart");
                                                                                                                      if ((_DWORD)result)
                                                                                                                      {
                                                                                                                        result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerStop");
                                                                                                                        if ((_DWORD)result)
                                                                                                                        {
                                                                                                                          result = strcmp(a1, "SpringTracking/kCLConnectionMessageSpringTrackerQuery");
                                                                                                                          if ((_DWORD)result)
                                                                                                                          {
                                                                                                                            result = strcmp(a1, "kCLConnectionMessageMiLoServiceEvent");
                                                                                                                            if ((_DWORD)result)
                                                                                                                            {
                                                                                                                              result = strcmp(a1, "kCLConnectionMessageMiLoCreateService");
                                                                                                                              if ((_DWORD)result)
                                                                                                                              {
                                                                                                                                result = strcmp(a1, "kCLConnectionMessageMiLoDeleteService");
                                                                                                                                if ((_DWORD)result)
                                                                                                                                {
                                                                                                                                  result = strcmp(a1, "kCLConnectionMessageMiLoQueryMyServices");
                                                                                                                                  if ((_DWORD)result)
                                                                                                                                  {
                                                                                                                                    result = strcmp(a1, "kCLConnectionMessageMiLoQueryConnectionStatus");
                                                                                                                                    if ((_DWORD)result)
                                                                                                                                    {
                                                                                                                                      result = strcmp(a1, "kCLConnectionMessageMiLoConnectToService");
                                                                                                                                      if ((_DWORD)result)
                                                                                                                                      {
                                                                                                                                        result = strcmp(a1, "kCLConnectionMessageMiLoPredictionEventUpdate");
                                                                                                                                        if ((_DWORD)result)
                                                                                                                                        {
                                                                                                                                          result = strcmp(a1, "kCLConnectionMessageMiLoServiceDebugResponse");
                                                                                                                                          if ((_DWORD)result)
                                                                                                                                          {
                                                                                                                                            result = strcmp(a1, "kCLConnectionMessageMiLoConnectionStatusEvent");
                                                                                                                                            if ((_DWORD)result)
                                                                                                                                            {
                                                                                                                                              result = strcmp(a1, "kCLConnectionMessageMiLoGenericEventResponse");
                                                                                                                                              if ((_DWORD)result)
                                                                                                                                              {
                                                                                                                                                result = strcmp(a1, "kCLConnectionMessageMiLoEnableMiLoAtCurrentLocation");
                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                {
                                                                                                                                                  result = strcmp(a1, "kCLConnectionMessageRemoveCustomLOI");
                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                  {
                                                                                                                                                    result = strcmp(a1, "kCLConnectionMessageAbsoluteAltitudeUpdate");
                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                    {
                                                                                                                                                      result = strcmp(a1, "kCLConnectionMessageKappaStatsAvailable");
                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                      {
                                                                                                                                                        result = strcmp(a1, "kCLConnectionMessageKappaSendAPCommand");
                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                        {
                                                                                                                                                          result = strcmp(a1, "kCLConnectionMessageKappaGetStateRequest");
                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                          {
                                                                                                                                                            result = strcmp(a1, "kCLConnectionMessageKappaGetState");
                                                                                                                                                            if ((_DWORD)result)
                                                                                                                                                            {
                                                                                                                                                              result = strcmp(a1, "kCLConnectionMessageIndoorOutdoorUpdate");
                                                                                                                                                              if ((_DWORD)result)
                                                                                                                                                              {
                                                                                                                                                                result = strcmp(a1, "kCLConnectionMessageIndoorOutdoorLastKnownState");
                                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                                {
                                                                                                                                                                  result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferAssert");
                                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                                  {
                                                                                                                                                                    result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferAssertError");
                                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                                    {
                                                                                                                                                                      result = strcmp(a1, "kCLConnectionMessageBBTimeFreqTransferMeasurement");
                                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                                      {
                                                                                                                                                                        result = strcmp(a1, "kCLConnectionMessageGNSSHeatMap");
                                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                                        {
                                                                                                                                                                          result = strcmp(a1, "kCLConnectionMessageGnssDisablementAssertReq");
                                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                                          {
                                                                                                                                                                            result = strcmp(a1, "kCLConnectionMessageGnssDisablementAssertRsp");
                                                                                                                                                                            if ((_DWORD)result)
                                                                                                                                                                            {
                                                                                                                                                                              result = strcmp(a1, "kCLConnectionMessageVO2MaxRetrocomputeStatusQuery");
                                                                                                                                                                              if ((_DWORD)result)
                                                                                                                                                                              {
                                                                                                                                                                                result = strcmp(a1, "kCLConnectionMessageEclipseServiceRequest");
                                                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                                                {
                                                                                                                                                                                  result = strcmp(a1, "kCLConnectionMessageEclipseViewObstructedStateRequest");
                                                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                                                  {
                                                                                                                                                                                    result = strcmp(a1, "kCLConnectionMessageProxPDPUpdate");
                                                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                                                    {
                                                                                                                                                                                      result = strcmp(a1, "kCLConnectionMessageALSPhoneUpdate");
                                                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                                                      {
                                                                                                                                                                                        result = strcmp(a1, "kCLConnectionMessageWriteContextConfiguration");
                                                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                                                        {
                                                                                                                                                                                          result = strcmp(a1, "kCLConnectionMessageMagicMountServiceRequest");
                                                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                                                          {
                                                                                                                                                                                            result = strcmp(a1, "kCLConnectionMessageMagicMountAPWakesAllowed");
                                                                                                                                                                                            if ((_DWORD)result)
                                                                                                                                                                                            {
                                                                                                                                                                                              result = strcmp(a1, "kCLConnectionMessageGnssExtensionsClient");
                                                                                                                                                                                              if ((_DWORD)result)
                                                                                                                                                                                              {
                                                                                                                                                                                                result = strcmp(a1, "kCLConnectionMessageGnssExtensionsClientError");
                                                                                                                                                                                                if ((_DWORD)result)
                                                                                                                                                                                                {
                                                                                                                                                                                                  result = strcmp(a1, "kCLConnectionMessageGnssExtensionsData");
                                                                                                                                                                                                  if ((_DWORD)result)
                                                                                                                                                                                                  {
                                                                                                                                                                                                    result = strcmp(a1, "kCLConnectionMessageBatchedAccelerometer");
                                                                                                                                                                                                    if ((_DWORD)result)
                                                                                                                                                                                                    {
                                                                                                                                                                                                      result = strcmp(a1, "kCLConnectionMessageBatchedDeviceMotion");
                                                                                                                                                                                                      if ((_DWORD)result)
                                                                                                                                                                                                      {
                                                                                                                                                                                                        result = strcmp(a1, "kCLConnectionMessageBatchedSensorAvailabilityUpdate");
                                                                                                                                                                                                        if ((_DWORD)result)
                                                                                                                                                                                                        {
                                                                                                                                                                                                          result = strcmp(a1, "kCLConnectionMessageBatchedSensorError");
                                                                                                                                                                                                          if ((_DWORD)result)
                                                                                                                                                                                                          {
                                                                                                                                                                                                            result = strcmp(a1, "kCLConnectionMessageCLGNSSStateQueryAssertionResponse");
                                                                                                                                                                                                            if ((_DWORD)result)
                                                                                                                                                                                                              return strcmp(a1, "kCLConnectionMessageBBGnssStatusQuery") != 0;
                                                                                                                                                                                                          }
                                                                                                                                                                                                        }
                                                                                                                                                                                                      }
                                                                                                                                                                                                    }
                                                                                                                                                                                                  }
                                                                                                                                                                                                }
                                                                                                                                                                                              }
                                                                                                                                                                                            }
                                                                                                                                                                                          }
                                                                                                                                                                                        }
                                                                                                                                                                                      }
                                                                                                                                                                                    }
                                                                                                                                                                                  }
                                                                                                                                                                                }
                                                                                                                                                                              }
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1001A765C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
}

void sub_1001A766C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  void *p_p;
  uint64_t v14;
  const char *v15;
  char *v16;
  _BYTE *v17;
  char *v18;
  NSObject *v19;
  const char *v20;
  char *v21;
  void *v22;
  int v23;
  id v24;
  _BOOL4 v25;
  NSObject *v26;
  id v27;
  const char *v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  _BYTE *v34;
  _BYTE v35[12];
  char v36;
  _BYTE buf[18];
  __int16 v38;
  id v39;
  __int16 v40;
  _BYTE *v41;
  __int16 v42;
  _BOOL4 v43;
  void *__p;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  int v52;

  sub_100197040();
  if ((sub_100195F08() & 1) != 0 || *(_BYTE *)(a1 + 1056))
    return;
  v6 = *(_QWORD *)(a1 + 1032);
  v7 = *(_QWORD *)(a1 + 1040);
  if (v6 != v7)
  {
    while (*(_QWORD *)v6 != a2)
    {
      v6 += 32;
      if (v6 == v7)
        goto LABEL_18;
    }
  }
  if (v6 == v7)
  {
LABEL_18:
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v11 = "Unknown";
      if (a2 == 1)
        v11 = "Bluetooth";
      if (a2)
        v12 = (char *)v11;
      else
        v12 = "Wifi";
      sub_1015A2E04(&__p, v12);
      if (v45 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "ImproveAccuracyNotification object not created for technology, %{public}s", buf, 0xCu);
      if (SHIBYTE(v45) < 0)
        operator delete(__p);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v14 = qword_1022A01D8;
    v15 = "Unknown";
    if (a2 == 1)
      v15 = "Bluetooth";
    if (a2)
      v16 = (char *)v15;
    else
      v16 = "Wifi";
    sub_1015A2E04(buf, v16);
    if (SBYTE3(v39) >= 0)
      v17 = buf;
    else
      v17 = *(_BYTE **)buf;
    *(_DWORD *)v35 = 136446210;
    *(_QWORD *)&v35[4] = v17;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v14, 17, "ImproveAccuracyNotification object not created for technology, %{public}s", v35, 12);
    if (SBYTE3(v39) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 0, "void CLClientManager::ensureTechnologyEnabled(CLClientManagerTechnology, CLDaemonClient *)", "%s\n", v18);
    goto LABEL_102;
  }
  if (*(double *)(v6 + 16) < 0.0 || CFAbsoluteTimeGetCurrent() - *(double *)(v6 + 8) <= *(double *)(v6 + 16))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v19 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v20 = "Unknown";
      if (a2 == 1)
        v20 = "Bluetooth";
      if (a2)
        v21 = (char *)v20;
      else
        v21 = "Wifi";
      sub_1015A2E04(&__p, v21);
      if (v45 >= 0)
        v22 = &__p;
      else
        v22 = __p;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "improve accuracy notification for %s is not eligible to post.", buf, 0xCu);
      if (SHIBYTE(v45) < 0)
        operator delete(__p);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v31 = qword_1022A01D8;
    v32 = "Unknown";
    if (a2 == 1)
      v32 = "Bluetooth";
    if (a2)
      v33 = (char *)v32;
    else
      v33 = "Wifi";
    sub_1015A2E04(buf, v33);
    if (SBYTE3(v39) >= 0)
      v34 = buf;
    else
      v34 = *(_BYTE **)buf;
    *(_DWORD *)v35 = 136315138;
    *(_QWORD *)&v35[4] = v34;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v31, 2, "improve accuracy notification for %s is not eligible to post.", v35);
    if (SBYTE3(v39) < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::ensureTechnologyEnabled(CLClientManagerTechnology, CLDaemonClient *)", "%s\n", v18);
LABEL_102:
    if (v18 != (char *)&__p)
      free(v18);
    return;
  }
  if (*(_QWORD *)v6 != 1)
  {
    if (*(_QWORD *)v6 || !*(_BYTE *)(a1 + 1057))
      return;
    if (sub_10075F33C())
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        __p = (void *)68289026;
        LOWORD(v45) = 2082;
        *(_QWORD *)((char *)&v45 + 2) = "";
        v9 = "{\"msg%{public}.0s\":\"WiFi is disabled, but the prompt will be suppressed because we're in demo mode\"}";
LABEL_88:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&__p, 0x12u);
        return;
      }
      return;
    }
    if (!*(_BYTE *)(a1 + 1568))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v8 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        __p = (void *)68289026;
        LOWORD(v45) = 2082;
        *(_QWORD *)((char *)&v45 + 2) = "";
        v9 = "{\"msg%{public}.0s\":\"WiFi is disabled, but the device has yet to be unlocked, so we will suppress the prompt for now\"}";
        goto LABEL_88;
      }
      return;
    }
LABEL_66:
    LODWORD(__p) = -1;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0;
    v52 = -1;
    if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLAppMonitor")), "syncgetForegroundApp:", &__p))
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 192))(a3);
      if (v23 == (_DWORD)__p && !*(_QWORD *)(a1 + 272) && !*(_QWORD *)(v6 + 24))
      {
        v24 = sub_1001948D4(a3, 0);
        v25 = sub_1007C8520(a1, (uint64_t)v24, a2, v6);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v26 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v27 = sub_1001948D4(a3, 0);
          v28 = "Unknown";
          if (a2 == 1)
            v28 = "Bluetooth";
          if (a2)
            v29 = (char *)v28;
          else
            v29 = "Wifi";
          sub_1015A2E04(v35, v29);
          if (v36 >= 0)
            v30 = v35;
          else
            v30 = *(_BYTE **)v35;
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v38 = 2114;
          v39 = v27;
          v40 = 2082;
          v41 = v30;
          v42 = 1026;
          v43 = v25;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt posted improve accuracy notification\", \"client\":%{public, location:escape_only}@, \"technology\":%{public, location:escape_only}s, \"status\":%{public}hhd}", buf, 0x2Cu);
          if (v36 < 0)
            operator delete(*(void **)v35);
        }
      }
    }
    sub_10079C284((uint64_t)&__p);
    return;
  }
  if (*(_BYTE *)(a1 + 1058))
    goto LABEL_66;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    __p = (void *)68289026;
    LOWORD(v45) = 2082;
    *(_QWORD *)((char *)&v45 + 2) = "";
    v9 = "{\"msg%{public}.0s\":\"bluetooth not disabled, suppress improve accuracy notification\"}";
    goto LABEL_88;
  }
}

void sub_1001A7E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_10079C284((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001A7E9C(uint64_t a1, uint64_t a2)
{
  sub_1001A766C(*(_QWORD *)(a1 + 16), a2, a1);
}

void sub_1001A7EA8(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_100876330(&off_102178410, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1001A7F84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001A815C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1001A83C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, ":");
}

__int128 *sub_1001A83D0(__int128 *result, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 *v4;
  uint64_t *v5;

  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = a2[2];
  a2[2] = v2;
  v3 = *result;
  *result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((_QWORD *)result + 2))
  {
    **((_QWORD **)result + 1) = result;
    v4 = *(__int128 **)result;
  }
  else
  {
    *(_QWORD *)result = result;
    v4 = result;
  }
  *((_QWORD *)v4 + 1) = result;
  if (a2[2])
  {
    *(_QWORD *)a2[1] = a2;
    v5 = (uint64_t *)*a2;
  }
  else
  {
    *a2 = (uint64_t)a2;
    v5 = a2;
  }
  v5[1] = (uint64_t)a2;
  return result;
}

double sub_1001A8444@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  __int128 v8;
  std::string::size_type v9;
  char v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  void *v20;
  const std::string *v21;
  std::string *p_p;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  std::string v28;
  std::string __p;
  std::string v30;
  _QWORD v31[2];

  memset(&__p, 0, sizeof(__p));
  sub_1001A8D50(a1);
  if (*(char *)(a1 + 151) < 0)
  {
    if (*(_QWORD *)(a1 + 136))
    {
LABEL_3:
      sub_1001A8D50(a1);
      sub_10078A2A0((const void **)(a1 + 104), 40, (uint64_t)&v30);
      sub_1001A8D50(a1);
      v4 = *(char *)(a1 + 151);
      if (v4 >= 0)
        v5 = (const std::string::value_type *)(a1 + 128);
      else
        v5 = *(const std::string::value_type **)(a1 + 128);
      if (v4 >= 0)
        v6 = *(unsigned __int8 *)(a1 + 151);
      else
        v6 = *(_QWORD *)(a1 + 136);
      v7 = std::string::append(&v30, v5, v6);
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::string::push_back(&v28, 41);
      v31[0] = v28.__r_.__value_.__l.__size_;
      v9 = v28.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v31 + 7) = *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 7);
      v10 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      memset(&v28, 0, sizeof(v28));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v9;
        __p.__r_.__value_.__l.__size_ = v31[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v31 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v10;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = v9;
        __p.__r_.__value_.__l.__size_ = v31[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v31 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v10;
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = (void *)v30.__r_.__value_.__r.__words[0];
        goto LABEL_38;
      }
      goto LABEL_44;
    }
  }
  else if (*(_BYTE *)(a1 + 151))
  {
    goto LABEL_3;
  }
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 95))
      goto LABEL_14;
LABEL_40:
    sub_1001A8D50(a1);
    if (*(char *)(a1 + 127) < 0)
    {
      if (*(_QWORD *)(a1 + 112))
        goto LABEL_42;
    }
    else if (*(_BYTE *)(a1 + 127))
    {
LABEL_42:
      sub_1001A8D50(a1);
      v21 = (const std::string *)(a1 + 104);
      goto LABEL_43;
    }
    v21 = (const std::string *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      if (*(_QWORD *)(a1 + 56))
        goto LABEL_43;
    }
    else if (*(_BYTE *)(a1 + 71))
    {
      goto LABEL_43;
    }
    v21 = (const std::string *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v26 = *(_QWORD *)(a1 + 32);
    else
      v26 = *(unsigned __int8 *)(a1 + 47);
    if (!v26)
      goto LABEL_44;
LABEL_43:
    std::string::operator=(&__p, v21);
    goto LABEL_44;
  }
  if (!*(_QWORD *)(a1 + 80))
    goto LABEL_40;
LABEL_14:
  if (*(char *)(a1 + 71) >= 0)
    v11 = *(unsigned __int8 *)(a1 + 71);
  else
    v11 = *(_QWORD *)(a1 + 56);
  v12 = &v28;
  sub_100259584((uint64_t)&v28, v11 + 2);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*(char *)(a1 + 71) >= 0)
      v13 = (const void *)(a1 + 48);
    else
      v13 = *(const void **)(a1 + 48);
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "::");
  v14 = *(char *)(a1 + 95);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)(a1 + 72);
  else
    v15 = *(const std::string::value_type **)(a1 + 72);
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(a1 + 95);
  else
    v16 = *(_QWORD *)(a1 + 80);
  v17 = std::string::append(&v28, v15, v16);
  v18 = v17->__r_.__value_.__r.__words[0];
  v30.__r_.__value_.__r.__words[0] = v17->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
  v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v18;
  __p.__r_.__value_.__l.__size_ = v30.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v30.__r_.__value_.__r.__words + 7);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v19;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_38:
    operator delete(v20);
  }
LABEL_44:
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_46;
LABEL_59:
    *(_QWORD *)&v25 = __p.__r_.__value_.__r.__words[0];
    *a2 = __p;
    return *(double *)&v25;
  }
  if (!*(_BYTE *)(a1 + 23))
    goto LABEL_59;
LABEL_46:
  sub_100922B84(91, (const void **)a1, (uint64_t)&v30);
  std::string::push_back(&v30, 93);
  v28 = v30;
  memset(&v30, 0, sizeof(v30));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v28, (const std::string::value_type *)p_p, size);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return *(double *)&v25;
}

void sub_1001A87E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1001A885C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  _BYTE *v5;
  const void *v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  void *v10;
  NSObject *v11;
  void **v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string v22;
  void *v23[2];
  uint64_t v24;
  _BYTE v25[28];

  sub_1001A8BBC(a1, (uint64_t)v23);
  if ((_os_feature_enabled_impl("CoreLocation", "cl_pula") & 1) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)v23;
    *(_QWORD *)(a2 + 16) = v24;
    v23[1] = 0;
    v24 = 0;
    v23[0] = 0;
    goto LABEL_49;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_4:
      if (*(char *)(a1 + 23) >= 0)
        v4 = *(unsigned __int8 *)(a1 + 23);
      else
        v4 = *(_QWORD *)(a1 + 8);
      v5 = v25;
      sub_100259584((uint64_t)v25, v4 + 1);
      if (v25[23] < 0)
        v5 = *(_BYTE **)v25;
      if (v4)
      {
        if (*(char *)(a1 + 23) >= 0)
          v6 = (const void *)a1;
        else
          v6 = *(const void **)a1;
        memmove(v5, v6, v4);
      }
      *(_WORD *)&v5[v4] = 58;
      if (v24 >= 0)
        v7 = v23;
      else
        v7 = (void **)v23[0];
      if (v24 >= 0)
        v8 = HIBYTE(v24);
      else
        v8 = (std::string::size_type)v23[1];
      v9 = std::string::append((std::string *)v25, (const std::string::value_type *)v7, v8);
      *(std::string *)a2 = *v9;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if ((v25[23] & 0x80000000) != 0)
      {
        v10 = *(void **)v25;
LABEL_48:
        operator delete(v10);
        goto LABEL_49;
      }
      goto LABEL_49;
    }
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_4;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021B6768);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = v23;
    if (v24 < 0)
      v12 = (void **)v23[0];
    *(_QWORD *)v25 = 68289282;
    *(_WORD *)&v25[8] = 2082;
    *(_QWORD *)&v25[10] = "";
    *(_WORD *)&v25[18] = 2082;
    *(_QWORD *)&v25[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multi-User fUserName is empty\", \"userlessKey\":%{public, location:escape_only}s}", v25, 0x1Cu);
  }
  sub_1015A2E04(&v22, "none");
  sub_1015A2E04(__p, ":");
  if ((v21 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v14 = v21;
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append(&v22, (const std::string::value_type *)v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)&v25[16] = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)v25 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v24 >= 0)
    v17 = v23;
  else
    v17 = (void **)v23[0];
  if (v24 >= 0)
    v18 = HIBYTE(v24);
  else
    v18 = (std::string::size_type)v23[1];
  v19 = std::string::append((std::string *)v25, (const std::string::value_type *)v17, v18);
  *(std::string *)a2 = *v19;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if ((v25[23] & 0x80000000) != 0)
    operator delete(*(void **)v25);
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (void *)v22.__r_.__value_.__r.__words[0];
    goto LABEL_48;
  }
LABEL_49:
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
}

void sub_1001A8B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void sub_1001A8BBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  const std::string::value_type *v11;
  uint64_t v12;
  const std::string::value_type *v13;
  int v14;
  std::string *v15;
  __int128 v16;
  std::string v17;

  sub_1001A8D50(a1);
  if (*(char *)(a1 + 175) < 0)
    v4 = *(_QWORD *)(a1 + 160);
  else
    v4 = *(unsigned __int8 *)(a1 + 175);
  sub_1001A8D50(a1);
  if (v4)
  {
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
    {
      v5 = a1 + 152;
LABEL_11:
      *(_OWORD *)a2 = *(_OWORD *)v5;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(v5 + 16);
      return;
    }
    v6 = *(void **)(a1 + 152);
    v7 = *(_QWORD *)(a1 + 160);
    goto LABEL_24;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    if (*(_QWORD *)(a1 + 112))
      goto LABEL_9;
  }
  else if (*(_BYTE *)(a1 + 127))
  {
LABEL_9:
    sub_1001A8D50(a1);
    if ((*(char *)(a1 + 127) & 0x80000000) == 0)
    {
      v5 = a1 + 104;
      goto LABEL_11;
    }
    v6 = *(void **)(a1 + 104);
    v7 = *(_QWORD *)(a1 + 112);
LABEL_24:
    sub_100115CE4((_BYTE *)a2, v6, v7);
    return;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(_QWORD *)(a1 + 56))
      goto LABEL_17;
LABEL_26:
    sub_1015A2E04(&v17, "com.apple.locationd.executable-");
    v13 = *(const std::string::value_type **)(a1 + 24);
    v12 = a1 + 24;
    v11 = v13;
    v14 = *(char *)(v12 + 23);
    if (v14 >= 0)
      v9 = (const std::string::value_type *)v12;
    else
      v9 = v11;
    if (v14 >= 0)
      v10 = *(unsigned __int8 *)(v12 + 23);
    else
      v10 = *(_QWORD *)(v12 + 8);
    goto LABEL_32;
  }
  if (!*(_BYTE *)(a1 + 71))
    goto LABEL_26;
LABEL_17:
  sub_1015A2E04(&v17, "com.apple.locationd.bundle-");
  v8 = *(char *)(a1 + 71);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)(a1 + 48);
  else
    v9 = *(const std::string::value_type **)(a1 + 48);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 71);
  else
    v10 = *(_QWORD *)(a1 + 56);
LABEL_32:
  v15 = std::string::append(&v17, v9, v10);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1001A8D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001A8D50(uint64_t a1)
{
  const char *v1;
  const char *v3;
  const char *v4;
  id v5;
  const char *v6;
  NSObject *v7;
  _QWORD *v8;
  id v9;
  NSObject *v10;
  int v11;
  id v12;
  char v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v23;
  const char *v24;
  const char *v25;
  id v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  uint64_t v46;

  if (!*(_BYTE *)(a1 + 176) && *(_BYTE *)(a1 + 96))
  {
    v33 = 0;
    v34 = 0;
    v3 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
    {
      if (!*(_QWORD *)(a1 + 56))
        goto LABEL_12;
      v4 = *(const char **)v3;
    }
    else
    {
      v4 = (const char *)(a1 + 48);
      if (!*(_BYTE *)(a1 + 71))
      {
LABEL_12:
        if (*(char *)(a1 + 127) < 0)
        {
          if (*(_QWORD *)(a1 + 112))
            goto LABEL_14;
        }
        else if (*(_BYTE *)(a1 + 127))
        {
LABEL_14:
          v8 = (_QWORD *)(a1 + 104);
          v9 = objc_alloc((Class)LSApplicationExtensionRecord);
          if (*(char *)(a1 + 127) < 0)
            v8 = (_QWORD *)*v8;
          v7 = objc_msgSend(v9, "initWithBundleIdentifier:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8), &v34);
LABEL_17:
          v10 = v7;
          if (v7)
          {
            if (*(char *)(a1 + 127) < 0)
            {
              if (!*(_QWORD *)(a1 + 112))
              {
LABEL_25:
                v13 = 1;
                goto LABEL_53;
              }
            }
            else if (!*(_BYTE *)(a1 + 127))
            {
              goto LABEL_25;
            }
            std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a1 + 104));
            v12 = objc_msgSend(-[NSObject containingBundleRecord](v10, "containingBundleRecord"), "bundleIdentifier");
            if (v12)
              std::string::assign((std::string *)(a1 + 104), (const std::string::value_type *)objc_msgSend(v12, "UTF8String"));
            goto LABEL_25;
          }
          v11 = *(unsigned __int8 *)(a1 + 127);
LABEL_28:
          v14 = (const char *)(a1 + 104);
          if ((v11 & 0x80) != 0)
          {
            if (*(_QWORD *)(a1 + 112) != 32)
            {
LABEL_52:
              v13 = 0;
              v10 = 0;
LABEL_53:
              *(_BYTE *)(a1 + 178) = 0;
              v1 = (const char *)(a1 + 104);
              if (*(char *)(a1 + 127) < 0)
              {
                if (!*(_QWORD *)(a1 + 112))
                  goto LABEL_61;
                v25 = *(const char **)v1;
              }
              else
              {
                v25 = (const char *)(a1 + 104);
                if (!*(_BYTE *)(a1 + 127))
                  goto LABEL_61;
              }
              v26 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25), 0, &v33);
              v27 = v26;
              if (v26)
              {
                if (objc_msgSend(v26, "appClipMetadata"))
                  *(_BYTE *)(a1 + 178) = 1;
                goto LABEL_70;
              }
LABEL_61:
              if ((v13 & 1) != 0)
              {
LABEL_69:
                v27 = 0;
LABEL_70:

                *(_BYTE *)(a1 + 176) = 1;
                return;
              }
              if (qword_1022A01D0 == -1)
              {
LABEL_63:
                v28 = qword_1022A01D8;
                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
                {
                  if (*(char *)(a1 + 127) < 0)
                    v1 = *(const char **)v1;
                  if (*(char *)(a1 + 71) < 0)
                    v3 = *(const char **)v3;
                  *(_DWORD *)buf = 68290050;
                  v36 = 0;
                  v37 = 2082;
                  v38 = "";
                  v39 = 2082;
                  v40 = v1;
                  v41 = 2082;
                  v42 = v3;
                  v43 = 2114;
                  v44 = v34;
                  v45 = 2114;
                  v46 = v33;
                  _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The given bundleId or bundlePath is not a plugin or an app\", \"bundleId\":%{public, location:escape_only}s, \"bundlePath\":%{public, location:escape_only}s, \"errorExtensionRecord\":%{public, location:escape_only}@, \"errorApplicationRecord\":%{public, location:escape_only}@}", buf, 0x3Au);
                }
                goto LABEL_69;
              }
LABEL_89:
              dispatch_once(&qword_1022A01D0, &stru_1021B6768);
              goto LABEL_63;
            }
            v15 = *(const char **)v14;
          }
          else
          {
            v15 = (const char *)(a1 + 104);
            if (v11 != 32)
              goto LABEL_52;
          }
          v16 = *(_QWORD *)v15;
          v17 = *((_QWORD *)v15 + 1);
          v19 = *((_QWORD *)v15 + 2);
          v18 = *((_QWORD *)v15 + 3);
          if (v16 == 0x6C7070612E6D6F63
            && v17 == 0x472E7370614D2E65
            && v19 == 0x614D6C6172656E65
            && v18 == 0x7465676469577370)
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021B6768);
            v23 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a1 + 127) < 0)
                v14 = *(const char **)v14;
              v24 = (const char *)(a1 + 48);
              if (*(char *)(a1 + 71) < 0)
                v24 = *(const char **)v3;
              *(_DWORD *)buf = 68289538;
              v36 = 0;
              v37 = 2082;
              v38 = "";
              v39 = 2082;
              v40 = v14;
              v41 = 2082;
              v42 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Map's widget didn't get auto-masquerade correctly.\", \"BundleId\":%{public, location:escape_only}s, \"BundlePath\":%{public, location:escape_only}s}", buf, 0x26u);
            }
          }
          goto LABEL_52;
        }
        v11 = *(unsigned __int8 *)(a1 + 127);
        goto LABEL_28;
      }
    }
    if (!+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B6768);
      v29 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v30 = (const char *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v30 = *(const char **)v3;
        *(_DWORD *)buf = 68289795;
        v36 = 0;
        v37 = 2082;
        v38 = "";
        v39 = 2082;
        v40 = v30;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "@(fBundlePath.c_str())";
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fBundlePath to NSString failed.\", \"fBundlePath\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021B6768);
      }
      v31 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v32 = (const char *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v32 = *(const char **)v3;
        *(_DWORD *)buf = 68289795;
        v36 = 0;
        v37 = 2082;
        v38 = "";
        v39 = 2082;
        v40 = v32;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "@(fBundlePath.c_str())";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fBundlePath to NSString failed.", "{\"msg%{public}.0s\":\"fBundlePath to NSString failed.\", \"fBundlePath\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021B6768);
      }
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 71) < 0)
          v3 = *(const char **)v3;
        *(_DWORD *)buf = 68289795;
        v36 = 0;
        v37 = 2082;
        v38 = "";
        v39 = 2082;
        v40 = v3;
        v41 = 2082;
        v42 = "assert";
        v43 = 2081;
        v44 = "@(fBundlePath.c_str())";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fBundlePath to NSString failed.\", \"fBundlePath\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Type.mm", 241, "fetchFromPlugInKitProxy");
      __break(1u);
      goto LABEL_89;
    }
    v5 = objc_alloc((Class)LSApplicationExtensionRecord);
    v6 = (const char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v6 = *(const char **)v3;
    v7 = objc_msgSend(v5, "initWithURL:error:", +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), 1), &v34);
    goto LABEL_17;
  }
}

BOOL sub_1001A9460(uint64_t a1, __IOHIDServiceClient *a2, const __CFString *a3, const void *a4)
{
  CFRunLoopRef Current;
  _BOOL8 result;
  NSObject *v9;
  _BOOL4 v10;
  uint8_t *v11;
  NSObject *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_1019153F8();
    goto LABEL_19;
  }
  if (!a2)
  {
    a3 = (const __CFString *)DefaultObserver;
    if (qword_10229FC70 == -1)
    {
LABEL_6:
      v9 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Property can not be set for null hidServiceRef", buf, 2u);
      }
      v10 = sub_1001BFF7C(115, 0);
      result = 0;
      if (!v10)
        return result;
      bzero(buf, 0x65CuLL);
      if (a3[99].data != (char *)-1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v13[0] = 0;
      v11 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "[CLIoHidInterface] Property can not be set for null hidServiceRef", v13, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "%s\n");
LABEL_23:
      if (v11 != buf)
        free(v11);
      return 0;
    }
LABEL_19:
    dispatch_once(&qword_10229FC70, &stru_102165728);
    goto LABEL_6;
  }
  if (IOHIDServiceClientSetProperty(a2, a3, a4))
    return 1;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  v12 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v13[0] = 0;
    v11 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false", v13, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "%s\n");
    goto LABEL_23;
  }
  return result;
}

void sub_1001A975C(uint64_t a1, void *a2, int a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  int v20;

  v6 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v6, "isValidCKP") & 1) != 0)
  {
    v7 = *(void **)(a1 + 136);
    if (a3)
      objc_msgSend(v7, "setBool:forKey:atKeyPath:", 1, CFSTR("BackgroundLocationCapability"), v6);
    else
      objc_msgSend(v7, "removeValueForKey:atKeyPath:", CFSTR("BackgroundLocationCapability"), v6);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v13 = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = v6;
      v19 = 1026;
      v20 = a3;
      v9 = "{\"msg%{public}.0s\":\"updated BackgroundLocationCapability\", \"Client\":%{public, location:escape_only}@, \""
           "BackgroundLocationCapability\":%{public}hhd}";
      v10 = v12;
      v11 = 34;
      goto LABEL_13;
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v13 = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = a2;
      v9 = "{\"msg%{public}.0s\":\"skip marking BackgroundLocationCapability. Client not found\", \"Client\":%{public, lo"
           "cation:escape_only}@}";
      v10 = v8;
      v11 = 28;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, v9, (uint8_t *)&v13, v11);
    }
  }
}

void sub_1001A9938(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[8];
  uint8_t buf[8];
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  id v37;
  __int16 v38;
  id v39;
  _BYTE v40[128];

  if (*(char *)(a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  v7 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)));
  v8 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v9 = *(void **)(a1 + 136);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472;
  v30[2] = sub_1001AA3D8;
  v30[3] = &unk_102154470;
  v24 = v8;
  v25 = a1;
  v30[4] = v8;
  v30[5] = a3;
  v30[6] = a1;
  v30[7] = a2;
  objc_msgSend(v9, "iterateIdentitiesRelatedToKeyPath:withBlock:", v7, v30);
  if (objc_msgSend(a3, "count"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v11;
      v36 = 2114;
      v37 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"final info.plist zones for #pla registeration\", \"ClientKey\":%{public, location:escape_only}s, \"InfoPlistZones\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v12 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v26, v40, 16);
    if (v12)
    {
      v14 = *(_QWORD *)v27;
      *(_QWORD *)&v13 = 68289794;
      v23 = v13;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v27 != v14)
            objc_enumerationMutation(a3);
          v16 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v15);
          v17 = objc_msgSend(a3, "objectForKeyedSubscript:", v16, v23);
          if (sub_1007F3F3C(v17))
          {
            sub_1015A2E04(buf, (char *)objc_msgSend(v16, "UTF8String"));
            sub_1007DE008(v25, a2, (std::string *)buf, v17, 1u, v24);
            if (SBYTE3(v35) < 0)
              operator delete(*(void **)buf);
          }
          else
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_102154528);
            v18 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0)
                v19 = a2;
              else
                v19 = *(_QWORD *)a2;
              v20 = objc_msgSend(v16, "UTF8String");
              *(_DWORD *)buf = v23;
              *(_DWORD *)&buf[4] = 0;
              v32 = 2082;
              v33 = "";
              v34 = 2082;
              v35 = v19;
              v36 = 2082;
              v37 = v20;
              v38 = 2114;
              v39 = v17;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Info.plist zone registration failed. Invalid zone.\", \"ClientKey\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s, \"Info.PlistZone\":%{public, location:escape_only}@}", buf, 0x30u);
            }
          }
          v15 = (char *)v15 + 1;
        }
        while (v12 != v15);
        v12 = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v26, v40, 16);
      }
      while (v12);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v22 = a2;
      else
        v22 = *(_QWORD *)a2;
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#pla no-eligible info-plist zones for registeration\", \"ClientKey\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
}

void sub_1001A9D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1001A9D64(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v6;
  id v7;
  NSObject *v8;
  uint64_t *v9;
  void *v10;
  _QWORD v12[6];
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t *v19;
  __int16 v20;
  int v21;

  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  v7 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6)));
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v8 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = (uint64_t *)*a2;
    *(_DWORD *)buf = 68289538;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = v9;
    v20 = 1026;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla enforce zone-monitoring\", \"Client\":%{public, location:escape_only}s, \"shouldStart\":%{public}hhd}", buf, 0x22u);
  }
  v10 = *(void **)(a1 + 136);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1001AA110;
  v12[3] = &unk_1021544B0;
  v12[4] = a1;
  v12[5] = a2;
  v13 = a3;
  return objc_msgSend(v10, "iterateIdentitiesRelatedToKeyPath:withBlock:", v7, v12);
}

void sub_1001AA110(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t *v8;
  int v9;
  NSString *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  uint64_t *v16;
  double v17;
  _DWORD v18[2];
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t *v22;
  __int16 v23;
  id v24;
  __int16 v25;
  id v26;

  v4 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(a2, "subIdentityType") == 122)
  {
    v5 = objc_msgSend(a2, "zoneId");
    v6 = objc_msgSend(objc_msgSend(*(id *)(v4 + 136), "readonlyStoreAtKeyPath:", a2), "dictionary");
    if (objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("Provenance")), "intValue") == 1)
    {
      if (objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("Type")), "intValue") == 1)
      {
        v7 = *(void **)(v4 + 352);
        v8 = *(uint64_t **)(a1 + 40);
        v9 = *((char *)v8 + 23);
        if (*(_BYTE *)(a1 + 48))
        {
          if (v9 < 0)
            v8 = (uint64_t *)*v8;
          v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
          objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("Latitude")), "doubleValue");
          v12 = v11;
          objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("Longitude")), "doubleValue");
          v14 = v13;
          objc_msgSend(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("Radius")), "doubleValue");
          _objc_msgSend(v7, "startCircularZoneMonitoringForClient:withZoneId:latitude:longitude:radius:", v10, v5, v12, v14, v17);
        }
        else
        {
          if (v9 < 0)
            v8 = (uint64_t *)*v8;
          objc_msgSend(v7, "stopCircularZoneMonitoringForClient:withZoneId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8), v5);
        }
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(uint64_t **)(a1 + 40);
        if (*((char *)v16 + 23) < 0)
          v16 = (uint64_t *)*v16;
        v18[0] = 68289794;
        v18[1] = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2082;
        v22 = v16;
        v23 = 2082;
        v24 = objc_msgSend(v5, "UTF8String");
        v25 = 2114;
        v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla skip zone-monitoring, provenance not eligible for monitoring\", \"Client\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s, \"ZoneInfo\":%{public, location:escape_only}@}", (uint8_t *)v18, 0x30u);
      }
    }
  }
}

void sub_1001AA3D8(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  char *v12;
  void *__p;
  __int16 v14;
  const char *v15;
  __int16 v16;
  id v17;

  v4 = *(_QWORD *)(a1 + 48);
  if (objc_msgSend(a2, "subIdentityType") != 122)
    return;
  v5 = objc_msgSend(a2, "zoneId");
  v6 = objc_msgSend(objc_msgSend(*(id *)(v4 + 136), "readonlyStoreAtKeyPath:", a2), "dictionary");
  v7 = objc_msgSend(*(id *)(v4 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("Provenance"), a2, 0);
  if (v7 != 1)
  {
    if (v7 == 2)
      objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, a2);
    return;
  }
  v8 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", v5);
  if (v8)
  {
    if (sub_1007F49B4(v8, v6))
    {
      objc_msgSend(*(id *)(a1 + 40), "removeObjectForKey:", v5);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v9 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        __p = (void *)68289282;
        v14 = 2082;
        v15 = "";
        v16 = 2082;
        v17 = objc_msgSend(v5, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Zone unchanged. Remove from infoPlistZones. Will skip registration\", \"ZoneId\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
      }
      return;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      __p = (void *)68289282;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = objc_msgSend(v5, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Zone has been updated. Delete from clients.plist first. Will be re-registered\", \"ZoneId\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      __p = (void *)68289282;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = objc_msgSend(v5, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ClientsPlistZone is stale. Not found in Info.plist. Delete\", \"ZoneId\":%{public, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
    }
  }
  v12 = *(char **)(a1 + 56);
  sub_1015A2E04(&__p, (char *)objc_msgSend(v5, "UTF8String"));
  sub_1007E40B8(v4, v12, (char *)&__p, 0);
  if (SBYTE3(v17) < 0)
    operator delete(__p);
}

void sub_1001AA738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1001AA760(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_msgSend(*(id *)(a1 + 136), "dataForKey:atKeyPath:defaultValue:", CFSTR("ClientStorageToken"), a2, 0);
  if (!v4)
  {
    v4 = objc_msgSend(objc_alloc((Class)NSMutableData), "initWithLength:", 32);
    if (SecRandomCopyBytes(kSecRandomDefault, 0x20uLL, objc_msgSend(v4, "mutableBytes")))
      sub_1019093C0();
    objc_msgSend(*(id *)(a1 + 136), "setData:forKey:atKeyPath:", v4, CFSTR("ClientStorageToken"), a2);
  }
  return v4;
}

id sub_1001AA814(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", a2);
}

BOOL sub_1001AA820(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  id v5;

  v5 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  if ((objc_msgSend(v5, "isValidCKP") & 1) != 0)
    return sub_1001AD254(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5), "dictionary"), a3);
  *a3 = 0x10000000000000;
  return 0;
}

id sub_1001AA890(uint64_t a1)
{
  id result;
  NSObject *v3;
  uint64_t v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  sub_100197040();
  if (sub_1001AA9A8() != 115)
    return 0;
  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "bundlePath"), "isEqual:", CFSTR("/System/Library/LocationBundles/AppleWatchFaces.bundle"));
  if ((_DWORD)result)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289026;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Resetting watch faces auth on Apple Watch Ultra\"}", (uint8_t *)v5, 0x12u);
    }
    return (id)sub_100B9EE1C(a1, v4, CFSTR("AppleWatchUltraWatchFacesAuthReset"));
  }
  return result;
}

uint64_t sub_1001AA9A8()
{
  if (qword_102303CB0 != -1)
    dispatch_once(&qword_102303CB0, &stru_1021513D0);
  return dword_102303CA8;
}

void sub_1001AA9E8(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD *v26;
  unint64_t *v27;
  unint64_t v28;
  uint8_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint8_t buf[8];
  _BYTE v38[32];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = (uint64_t)(a1 + 41);
  *(_QWORD *)buf = &v33;
  v5 = sub_1001AAD20((uint64_t)(a1 + 41), (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v6 = (const void *)v5[3];
  v7 = (std::__shared_weak_count *)v5[4];
  v34 = (uint64_t)v6;
  v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (v6)
  {
    if (!v10)
    {
      sub_10191BDE8((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17, v29, v30, v31, v32, (uint64_t)v33, v34, (uint64_t)v35, v36, *(uint64_t *)buf, *(uint64_t *)v38, *(uint64_t *)&v38[8],
        *(uint64_t *)&v38[16],
        *(uint64_t *)&v38[24],
        v39,
        v40,
        v41);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 441, "getOrCreatePersistentSubscription");
      goto LABEL_26;
    }
    *a2 = (uint64_t)v10;
    a2[1] = (uint64_t)v7;
    if (v7)
    {
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (v10[248])
      goto LABEL_18;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v20 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v21 = a1[6];
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v38 = 2082;
      *(_QWORD *)&v38[2] = "";
      *(_WORD *)&v38[10] = 2114;
      *(_QWORD *)&v38[12] = v21;
      *(_WORD *)&v38[20] = 2082;
      *(_QWORD *)&v38[22] = (unint64_t)"29CLVisitMonitoringSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid persistent subscription detected... getting a fresh one\", \"ClientKeyPath\":%{public, location:escape_only}@, \"subscription\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_100261F44((uint64_t)a2);
  }
  sub_1001AB31C(a1[2], a1[6], a2);
  v22 = *a2;
  *(_BYTE *)(v22 + 144) = (*(uint64_t (**)(uint64_t *))(*a1 + 80))(a1);
  v23 = *a2;
  v24 = (void *)(*(uint64_t (**)(uint64_t *))(*a1 + 96))(a1);
  v25 = v24;

  *(_QWORD *)(v23 + 152) = v24;
  if (!*a2 || !*(_BYTE *)(*a2 + 248))
  {
    sub_10191BC88(a2);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonClient.h", 454, "getOrCreatePersistentSubscription");
LABEL_26:
    __break(1u);
    return;
  }
  *(_QWORD *)buf = &v33;
  v26 = sub_1001AAD20(v4, (uint64_t *)&v33, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  sub_100349198(v26 + 3, a2);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)*a2 + 16))(*a2, a1 + 1);
LABEL_18:
  if (v7)
  {
    v27 = (unint64_t *)&v7->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1001AACEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  sub_100261F44(v6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001AAD20(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = *(_QWORD *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v12)
        v4 = v8 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
    v15 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      v16 = (_QWORD *)*v15;
      if (*v15)
      {
        do
        {
          v17 = v16[1];
          if (v17 == v8)
          {
            if (sub_100270DE8(v16[2], *a2))
              return v16;
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12)
                v17 %= v12;
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4)
              break;
          }
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
    }
  }
  v18 = operator new(0x28uLL);
  v29[0] = v18;
  v29[1] = a1 + 16;
  *v18 = 0;
  v18[1] = v8;
  v19 = **a4;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v19;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10012E444(a1, v25);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12)
        v4 = v8 % v12;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v27 >= v12)
          v27 %= v12;
      }
      else
      {
        v27 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  v16 = (_QWORD *)v29[0];
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_10096EBD8((uint64_t)v29, 0);
  return v16;
}

void sub_1001AAFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10096EBD8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1001AAFB8(uint64_t a1, uint64_t a2)
{
  _QWORD *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  v15 = a2;
  sub_1001AB0C8(a1 + 160, &v15, &v15);
  for (i = *(_QWORD **)(a1 + 216); i; i = (_QWORD *)*i)
  {
    v4 = v15;
    v5 = (std::__shared_weak_count *)i[7];
    v13 = i[6];
    v14 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 16))(v4, &v13, i[5]);
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  sub_100720B68((uint64_t **)(a1 + 24), &v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

void sub_1001AB0AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001AB0C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 264);
}

_QWORD *sub_1001AB0C8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v8;
  i[2] = *a3;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_10012E444(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1001AB304(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1001AB31C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint8_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 __p;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  CLClientManagerAuthorizationContext *v57;
  uint8_t *v58;
  std::__shared_weak_count *v59;
  _UNKNOWN **v60;
  void *v61;
  uint8_t buf[8];
  _BYTE v63[30];
  char v64;

  v5 = sub_100196E90(a1, a2);
  v61 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    objc_msgSend(v5, "cppClientKey");
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)v63 = 0;
    *(_QWORD *)&v63[8] = 0;
  }
  v58 = buf;
  v6 = sub_1001ABAB4(a1 + 976, buf, (uint64_t)&unk_101B9EB60, (__int128 **)&v58) + 40;
  if ((v63[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  *(_QWORD *)buf = &v60;
  v7 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)buf);
  v58 = 0;
  v59 = 0;
  v8 = (std::__shared_weak_count *)v7[4];
  if (v8
    && (v9 = std::__shared_weak_count::lock(v8), (v59 = v9) != 0)
    && (v10 = v9, v11 = (void *)v7[3], (v58 = (uint8_t *)v11) != 0))
  {
    if (v12)
    {
      *(_QWORD *)buf = v12;
      *(_QWORD *)v63 = v10;
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)v63 = 0;
    }
    v32 = sub_1002B7674((uint64_t)a3, (__int128 *)buf);
    v40 = *(std::__shared_weak_count **)v63;
    if (*(_QWORD *)v63)
    {
      v41 = (unint64_t *)(*(_QWORD *)v63 + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (!*a3)
    {
      sub_101908F38(v32, v33, v34, v35, v36, v37, v38, v39, v46, v47, v48, v49, v50, (uint64_t)v51, v52, *((uint64_t *)&v52 + 1), __p, *((uint64_t *)&__p + 1), v54,
        v55,
        *((uint64_t *)&v55 + 1),
        v56,
        (uint64_t)v57,
        (uint64_t)v58);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager.h", 360, "getOrCreatePersistentSubscriptionForClient");
      __break(1u);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_QWORD *)buf = 68289538;
      *(_WORD *)v63 = 2082;
      *(_QWORD *)&v63[2] = "";
      *(_WORD *)&v63[10] = 2082;
      *(_QWORD *)&v63[12] = (unint64_t)"29CLVisitMonitoringSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      *(_WORD *)&v63[20] = 2114;
      *(_QWORD *)&v63[22] = v61;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    v57 = sub_10019EE88(a1, (uint64_t)v61, &xmmword_101C17478);
    if (v61)
    {
      objc_msgSend(v61, "cppClientKey");
    }
    else
    {
      v55 = 0uLL;
      v56 = 0;
    }
    sub_100223FC8(&__p);
    sub_1002354C4((char *)buf, &v55, &__p, (uint64_t)v60);
    if (SHIBYTE(v54) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v56) < 0)
      operator delete((void *)v55);
    sub_1007F62AC((void **)(a1 + 32), (void **)&v57, &v61, (uint64_t)buf, &v52);
    sub_1002B7674((uint64_t)a3, &v52);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
    if (*((_QWORD *)&v52 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_QWORD *)&v52 = &v60;
    v19 = sub_1001AB834((uint64_t)v6, (uint64_t *)&v60, (uint64_t)&unk_101B9EB60, (uint64_t **)&v52);
    v21 = (_QWORD *)*a3;
    v20 = a3[1];
    if (v20)
    {
      v22 = (unint64_t *)(v20 + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = (std::__shared_weak_count *)v19[4];
    v19[3] = v21;
    v19[4] = v20;
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
    v25 = (_QWORD *)*a3;
    v26 = *(_QWORD *)(a1 + 1024);
    v50 = *(_QWORD *)(a1 + 1016);
    v51 = (std::__shared_weak_count *)v26;
    if (v26)
    {
      v27 = (unint64_t *)(v26 + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    sub_100224578(v25, &v50);
    v29 = v51;
    if (v51)
    {
      v30 = (unint64_t *)&v51->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v64 < 0)
      operator delete(*(void **)&v63[16]);
    if ((v63[15] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  v43 = v59;
  if (v59)
  {
    v44 = (unint64_t *)&v59->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1001AB790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  sub_100261F44((uint64_t)&a30);
  sub_100261F44(v30);
  _Unwind_Resume(a1);
}

_QWORD *sub_1001AB834(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD **v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = *(_QWORD *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v12)
        v4 = v8 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
    v15 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = (_QWORD *)*i)
      {
        v17 = i[1];
        if (v17 == v8)
        {
          if (sub_100270DE8(i[2], *a2))
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v8;
  v19 = **a4;
  i[3] = 0;
  i[4] = 0;
  i[2] = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v12 || (float)(v21 * (float)v12) < v20)
  {
    v22 = 1;
    if (v12 >= 3)
      v22 = (v12 & (v12 - 1)) != 0;
    v23 = v22 | (2 * v12);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10012E444(a1, v25);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12)
        v4 = v8 % v12;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *i = *v27;
LABEL_41:
    *v27 = i;
    goto LABEL_42;
  }
  *i = *v18;
  *v18 = i;
  *(_QWORD *)(v26 + 8 * v4) = v18;
  if (*i)
  {
    v28 = *(_QWORD *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v28 >= v12)
        v28 %= v12;
    }
    else
    {
      v28 &= v12 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1001ABA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_1007F6264(v11, v10);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1001ABAB4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)v17 + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *(_OWORD *)(v17 + 40) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  v30 = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_10012E444(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v29[0] = *v26;
    *v26 = v29[0];
  }
  else
  {
    *(_QWORD *)v29[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v29[0])
    {
      v27 = *(_QWORD *)(*(_QWORD *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11)
          v27 %= v11;
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v29[0];
    }
  }
  i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  sub_1007F616C((uint64_t)v29, 0);
  return i;
}

void sub_1001ABD4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1007F616C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1001ABD64(uint64_t a1)
{
  _BOOL4 v2;
  const __CFArray *v4;
  const __CFArray *v5;
  CFTypeID v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  CFRange v19;

  sub_100197040();
  if (sub_1000A42B0())
  {
    sub_100197040();
    v2 = sub_100195F08() ? *(_BYTE *)(a1 + 193) != 0 : *(_QWORD *)(a1 + 96) == 0;
    if (v2 && &_SBSCopyBundleInfoValueForKeyAndProcessID != 0)
    {
      v4 = (const __CFArray *)SBSCopyBundleInfoValueForKeyAndProcessID(CFSTR("UIBackgroundModes"), *(unsigned int *)(a1 + 272));
      if (v4)
      {
        v5 = v4;
        v6 = CFGetTypeID(v4);
        if (v6 == CFArrayGetTypeID())
        {
          v19.length = CFArrayGetCount(v5);
          v19.location = 0;
          if (CFArrayGetFirstIndexOfValue(v5, v19, CFSTR("location")) != -1)
          {
            *(_BYTE *)(a1 + 204) = 1;
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102174F58);
            v7 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
            {
              v8 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)buf = 138412290;
              v18 = v8;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "client '%@' supports background location", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_102174F58);
              v13 = *(_QWORD *)(a1 + 48);
              v15 = 138412290;
              v16 = v13;
              v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "client '%@' supports background location", &v15, 12);
              sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::assessClientCapabilities()", "%s\n", v14);
              if (v14 != (char *)buf)
                free(v14);
            }
          }
        }
        CFRelease(v5);
      }
      else
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v9 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
        {
          v10 = *(_DWORD *)(a1 + 272);
          *(_DWORD *)buf = 67109120;
          LODWORD(v18) = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v11 = *(_DWORD *)(a1 + 272);
          v15 = 67109120;
          LODWORD(v16) = v11;
          v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them", &v15);
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::assessClientCapabilities()", "%s\n", v12);
          if (v12 != (char *)buf)
            free(v12);
        }
      }
    }
  }
}

void *sub_1001AC114(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191BF30();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"19CLFenceSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_1001AC2CC()
{
  operator delete();
}

uint64_t sub_1001AC2FC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

void sub_1001AC304(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_100876330(&off_102178420, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1001AC3E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1001AC3FC(int a1, uint64_t a2)
{
  unsigned int (*v4)(uint64_t, const __CFString *);
  uint64_t v5;

  v4 = *(unsigned int (**)(uint64_t, const __CFString *))(a2 + 16);
  if (a1 < 2)
  {
    if (v4(a2, CFSTR("NSLocationAlwaysUsageDescription")))
      v5 = 7;
    else
      v5 = 1;
  }
  else if (v4(a2, CFSTR("NSLocationAlwaysAndWhenInUseUsageDescription")))
  {
    if ((*(unsigned int (**)(uint64_t, const __CFString *))(a2 + 16))(a2, CFSTR("NSLocationWhenInUseUsageDescription")))
    {
      v5 = 7;
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 1;
  }
  if (((*(uint64_t (**)(uint64_t, const __CFString *))(a2 + 16))(a2, CFSTR("NSLocationWhenInUseUsageDescription")) & 1) != 0|| (*(unsigned int (**)(uint64_t, const __CFString *))(a2 + 16))(a2, CFSTR("NSLocationAuthorizationPurposeDescriptionDictionary")))
  {
    v5 |= 2uLL;
  }
  if (v5 == 1 && a1 == 0)
    return 7;
  else
    return v5;
}

BOOL sub_1001AC4EC(uint64_t a1, CFStringRef key)
{
  __CFBundle *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  const void *v8;

  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(__CFBundle **)(a1 + 40);
  if (v4)
  {
    if (CFBundleGetValueForInfoDictionaryKey(v4, key))
      return 1;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = sub_1001AC584();
      v7 = sub_1001AC5C4(v6, *(__CFBundle **)(a1 + 40), key, 0);
      if (v7)
      {
        CFRelease(v7);
        return 1;
      }
    }
  }
  if (!&_SBSCopyBundleInfoValueForKeyAndProcessID)
    return 0;
  v8 = (const void *)SBSCopyBundleInfoValueForKeyAndProcessID(key, *(unsigned int *)(v5 + 272));
  if (!v8)
    return 0;
  CFRelease(v8);
  return !*(_BYTE *)(a1 + 48);
}

uint64_t sub_1001AC584()
{
  if (qword_102304B38 != -1)
    dispatch_once(&qword_102304B38, &stru_102155530);
  return qword_102310CE0;
}

const __CFString *sub_1001AC5C4(uint64_t a1, __CFBundle *a2, const __CFString *a3, int a4)
{
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *ValueForInfoDictionaryKey;
  CFTypeID v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  void **v17;
  void *__p[2];
  char v20;
  uint64_t v21;
  __int16 v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  void **v28;

  v21 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v22 = 256;
  if (!a2)
    goto LABEL_31;
  v8 = sub_1001AC8C8(a1, a2);
  v9 = (const __CFString *)CFBundleCopyLocalizedStringForLocalization(a2, a3, 0, CFSTR("InfoPlist"), v8);
  if (v8)
    CFRelease(v8);
  if (v9)
  {
    if (CFStringCompare(v9, a3, 1uLL))
    {
      v10 = v9;
      goto LABEL_9;
    }
    CFRelease(v9);
    if (!a4)
    {
      ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(a2, a3);
      v11 = ValueForInfoDictionaryKey;
      if (!ValueForInfoDictionaryKey)
        goto LABEL_32;
      v13 = CFGetTypeID(ValueForInfoDictionaryKey);
      if (v13 == CFStringGetTypeID())
      {
        CFRetain(v11);
        goto LABEL_32;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155570);
      v14 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        sub_1001A486C(a3, (uint64_t)__p);
        if (v20 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2082;
        v28 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"key in bundle does not contain a string value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v20 < 0)
          operator delete(__p[0]);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102155570);
      }
      v16 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        sub_1001A486C(a3, (uint64_t)__p);
        if (v20 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        *(_DWORD *)buf = 68289282;
        v24 = 0;
        v25 = 2082;
        v26 = "";
        v27 = 2082;
        v28 = v17;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "key in bundle does not contain a string value", "{\"msg%{public}.0s\":\"key in bundle does not contain a string value\", \"key\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v20 < 0)
          operator delete(__p[0]);
      }
LABEL_31:
      v11 = 0;
      goto LABEL_32;
    }
  }
  v10 = 0;
LABEL_9:
  if (a4 == 1)
    v11 = v10;
  else
    v11 = v9;
LABEL_32:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return v11;
}

void sub_1001AC89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

const __CFString *sub_1001AC8C8(uint64_t a1, __CFBundle *a2)
{
  const __CFArray *v4;
  const __CFArray *v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  const __CFArray *v9;
  const __CFString *ValueAtIndex;
  NSObject *v11;
  NSObject *v12;
  NSObject *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint8_t buf[1640];

  v19 = a1;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v20 = 256;
  if (!a2)
  {
    ValueAtIndex = 0;
    goto LABEL_28;
  }
  v4 = (const __CFArray *)CFPreferencesCopyValue(CFSTR("AppleLanguages"), CFSTR(".GlobalPreferences"), CFSTR("mobile"), kCFPreferencesAnyHost);
  v5 = v4;
  if (v4 && CFArrayGetCount(v4))
  {
    v6 = CFBundleCopyBundleLocalizations(a2);
    v7 = v6;
    if (v6 && CFArrayGetCount(v6))
    {
      v8 = CFBundleCopyLocalizationsForPreferences(v7, v5);
      v9 = v8;
      if (v8 && CFArrayGetCount(v8))
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, 0);
        CFRetain(ValueAtIndex);
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102155550);
        v14 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning could not get localizations for preferred languages, assuming english", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102155550);
          v18 = 0;
          v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning could not get localizations for preferred languages, assuming english", &v18, 2);
          sub_100512490("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLocalizationLanguage(CFBundleRef)", "%s\n", v17);
          if (v17 != (char *)buf)
            free(v17);
        }
        ValueAtIndex = CFSTR("en");
        CFRetain(CFSTR("en"));
      }
      goto LABEL_24;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155550);
    v12 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning could not get localizations array from bundle, assuming english", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102155550);
      v18 = 0;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning could not get localizations array from bundle, assuming english", &v18, 2);
      sub_100512490("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLocalizationLanguage(CFBundleRef)", "%s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    ValueAtIndex = CFSTR("en");
    CFRetain(CFSTR("en"));
LABEL_23:
    v9 = 0;
LABEL_24:
    CFRelease(v5);
    if (v7)
      CFRelease(v7);
    if (v9)
      CFRelease(v9);
    goto LABEL_28;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102155550);
  v11 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning could not get apple languages array, assuming english", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102155550);
    v18 = 0;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning could not get apple languages array, assuming english", &v18, 2);
    sub_100512490("Generic", 1, 0, 2, "CFStringRef CLLocalization::copyUserPreferredLocalizationLanguage(CFBundleRef)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  CFRetain(CFSTR("en"));
  ValueAtIndex = CFSTR("en");
  if (v5)
  {
    v7 = 0;
    goto LABEL_23;
  }
LABEL_28:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  return ValueAtIndex;
}

void sub_1001ACDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

const __CFBoolean *sub_1001ACE28(__CFBundle *a1)
{
  const __CFBoolean *ValueForInfoDictionaryKey;
  const __CFBoolean *v3;
  CFTypeID v4;
  NSObject *v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  __CFBundle *v11;
  __int16 v12;
  int v13;

  ValueForInfoDictionaryKey = (const __CFBoolean *)CFBundleGetValueForInfoDictionaryKey(a1, CFSTR("NSLocationDefaultAccuracyReduced"));
  v3 = ValueForInfoDictionaryKey;
  if (ValueForInfoDictionaryKey)
  {
    v4 = CFGetTypeID(ValueForInfoDictionaryKey);
    if (v4 == CFBooleanGetTypeID())
      v3 = (const __CFBoolean *)(CFBooleanGetValue(v3) != 0);
    else
      v3 = 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289538;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = a1;
    v12 = 1026;
    v13 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DefaultAccuracyReduced key from Info.plist\", \"For Bundle\":%{public, location:escape_only}@, \"Value\":%{public}hhd}", (uint8_t *)v7, 0x22u);
  }
  return v3;
}

CFTypeRef sub_1001ACF6C(__CFBundle *a1)
{
  CFTypeRef ValueForInfoDictionaryKey;
  CFTypeRef v3;
  CFTypeID v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  __CFBundle *v15;
  __int16 v16;
  CFTypeRef v17;

  ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(a1, CFSTR("NSLocationInterestZones"));
  if (!ValueForInfoDictionaryKey)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"No Info.plist InterestZones\", \"For Bundle\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
    return 0;
  }
  v3 = ValueForInfoDictionaryKey;
  v4 = CFGetTypeID(ValueForInfoDictionaryKey);
  if (v4 != CFDictionaryGetTypeID())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Info.plist InterestZones not of type Dictionary\", \"Bundle\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    }
    v8 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v10 = 68289282;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2114;
      v15 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Info.plist InterestZones not of type Dictionary", "{\"msg%{public}.0s\":\"Info.plist InterestZones not of type Dictionary\", \"Bundle\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
    return 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v10 = 68289538;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = a1;
    v16 = 2114;
    v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Info.plist InterestZones\", \"For Bundle\":%{public, location:escape_only}@, \"InfoPlistZones\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x26u);
  }
  return v3;
}

BOOL sub_1001AD254(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  uint64_t v5;

  *a2 = 0x10000000000000;
  v3 = objc_msgSend(a1, "objectForKey:", CFSTR("TimeMissing"));
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "doubleValue");
    *a2 = v5;
  }
  return v4 != 0;
}

void sub_1001AD2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;
  NSObject *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_101915DEC(a1);
LABEL_10:
    dispatch_once(&qword_10229FC70, &stru_102165728);
    goto LABEL_5;
  }
  sub_1001AD510(*(_QWORD *)(a1 + 32));
  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 160), "setObject:forKeyedSubscript:", -[CLPropertyValue initWithValue:dirty:]([CLPropertyValue alloc], "initWithValue:dirty:", a3, 1), a2);
    goto LABEL_8;
  }
  Current = (CFRunLoopRef)DefaultObserver;
  if (qword_10229FC70 != -1)
    goto LABEL_10;
LABEL_5:
  v7 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543362;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set property value for %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (*((_QWORD *)Current + 398) != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v9 = 138543362;
    v10 = a2;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "[CLIoHidInterface] Could not set property value for %{public}@", &v9, 12);
    sub_100512490("Generic", 1, 0, 0, "virtual void CLIoHidInterface::Device::setProperty(NSString *, id)", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
LABEL_8:
  sub_10019CFCC(*(_QWORD *)(a1 + 32));
}

void sub_1001AD510(uint64_t a1)
{
  CFRunLoopRef Current;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t *v8;
  NSObject *v9;
  _WORD v10[8];
  uint8_t buf[1640];
  const __CFString *v12;
  void *v13;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  if (Current != (CFRunLoopRef)sub_1001AD8D0())
  {
    sub_101914CE8();
LABEL_20:
    dispatch_once(&qword_10229FC70, &stru_102165728);
LABEL_7:
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Event system client initialized successfully", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (*((_QWORD *)Current + 398) != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v10[0] = 0;
      v8 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Event system client initialized successfully", v10, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::initializeHidIfNecessary()", "%s\n");
LABEL_24:
      if (v8 != buf)
        free(v8);
      return;
    }
    return;
  }
  if (*(_QWORD *)(a1 + 40))
    return;
  v12 = CFSTR("HighFrequency");
  v3 = &__kCFBooleanTrue;
  if (!*(_BYTE *)(a1 + 48))
    v3 = &__kCFBooleanFalse;
  v13 = v3;
  v4 = IOHIDEventSystemClientCreateWithType(kCFAllocatorDefault, *(unsigned int *)(a1 + 32), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v13, &v12, 1));
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    v5 = v4;
    sub_100127B9C();
    v6 = sub_1001AD8D0();
    IOHIDEventSystemClientScheduleWithRunLoop(v5, v6, kCFRunLoopDefaultMode);
    IOHIDEventSystemClientRegisterEventCallback(*(_QWORD *)(a1 + 40), sub_1002063F0, a1, 0);
    IOHIDEventSystemClientRegisterResetCallback(*(_QWORD *)(a1 + 40), sub_100A086CC, a1, 0);
    IOHIDEventSystemClientRegisterDeviceMatchingCallback(*(_QWORD *)(a1 + 40), sub_10023D9C0, a1, "ADDED");
    sub_100A086D0((_QWORD *)a1);
    IOHIDEventSystemClientSetProperty(*(IOHIDEventSystemClientRef *)(a1 + 40), CFSTR("PreserveTimestamp"), kCFBooleanTrue);
    Current = (CFRunLoopRef)DefaultObserver;
    if (qword_10229FC70 == -1)
      goto LABEL_7;
    goto LABEL_20;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  v9 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not create event system client. All bets are off", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v10[0] = 0;
    v8 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "[CLIoHidInterface] Could not create event system client. All bets are off", v10, 2);
    sub_100512490("Generic", 1, 0, 0, "void CLIoHidInterface::initializeHidIfNecessary()", "%s\n");
    goto LABEL_24;
  }
}

uint64_t sub_1001AD8D0()
{
  return *(_QWORD *)qword_1023110F8;
}

void sub_1001AD98C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7;
  id v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  id v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint8_t buf[4];
  _BYTE v30[28];
  __int16 v31;
  unint64_t v32;

  v7 = sub_100195B0C(a1, a2);
  v8 = objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), v7, 0);
  v9 = (int)v8;
  v10 = (uint64_t)v8;
  if (a4 && !(_DWORD)v8)
  {
    sub_100197040();
    if (sub_100195F08())
    {
      objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", 2, CFSTR("CorrectiveCompensationEnabled"), v7);
      v10 = (uint64_t)objc_msgSend(*(id *)(a1 + 136), "intForKey:atKeyPath:defaultValue:", CFSTR("CorrectiveCompensationEnabled"), v7, 0);
    }
    else
    {
      v10 = 2;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(_QWORD *)&v30[6] = "";
      *(_WORD *)&v30[14] = 2114;
      *(_QWORD *)&v30[16] = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sliding CorrectiveCompensationUnspecified(0) to CorrectiveCompensationOn(2)\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  objc_msgSend(*(id *)(a1 + 136), "setInt:forKey:atKeyPath:", a3, CFSTR("SupportedAuthorizationMask"), v7);
  sub_100197040();
  if ((sub_100195F08() & 1) == 0)
  {
    v12 = sub_100199284(objc_msgSend(objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v7), "dictionary"));
    if (v12 == 4)
      v13 = a3 & 2;
    else
      v13 = 0;
    if ((v12 & a3) != 0)
      v14 = v12;
    else
      v14 = v13;
    if (v14 == v12)
    {
      if ((_DWORD)v10 == v9)
        return;
    }
    else
    {
      v15 = v12;
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)v30 = v7;
        *(_WORD *)&v30[8] = 2048;
        *(_QWORD *)&v30[10] = a3;
        *(_WORD *)&v30[18] = 2048;
        *(_QWORD *)&v30[20] = v15;
        v31 = 2048;
        v32 = v14;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Client %@ allowable mask (%lu) no longer contains authorization level (%lu) downgrading to (%lu)", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v21 = 138413058;
        v22 = v7;
        v23 = 2048;
        v24 = a3;
        v25 = 2048;
        v26 = v15;
        v27 = 2048;
        v28 = v14;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Client %@ allowable mask (%lu) no longer contains authorization level (%lu) downgrading to (%lu)", &v21, 42);
        sub_100512490("Generic", 1, 0, 2, "void CLClientManager::updateClientAllowableAuthorizationMask(CLClientKeyPath *, CLLocationDictionaryUtilitiesAuthorizationMask, BOOL)", "%s\n", v18);
        if (v18 != (char *)buf)
          free(v18);
      }
    }
    if ((sub_1007D7F38(a1, (uint64_t)v7, v14, v10, 0, 1, 1) & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543362;
        *(_QWORD *)v30 = v7;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Client %{public}@ missing for authorization update, but didn't we just create it?", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v21 = 138543362;
        v22 = v7;
        LODWORD(v20) = 12;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Client %{public}@ missing for authorization update, but didn't we just create it?", &v21, v20);
        sub_100512490("Generic", 1, 0, 0, "void CLClientManager::updateClientAllowableAuthorizationMask(CLClientKeyPath *, CLLocationDictionaryUtilitiesAuthorizationMask, BOOL)", "%s\n", v19);
        if (v19 != (char *)buf)
          free(v19);
      }
    }
  }
}

void sub_1001AE3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;

  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  if (a20 < 0)
    operator delete(a15);
  sub_100010174((uint64_t)&a48);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1001AE4D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  audit_token_t *v4;
  __int128 v5;
  _OWORD v6[2];
  std::string v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *__p;
  char v19;
  std::string __str;
  char v21;

  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  v21 = 0;
  sub_1001A4674((audit_token_t *)a1, &v21, &__str);
  if (v21)
  {
    std::string::operator=((std::string *)(a2 + 24), &__str);
  }
  else
  {
    sub_1001AE67C(&__str, (uint64_t)&v7);
    sub_1001AEF2C(a2, (__int128 *)&v7);
    if (v19 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(v14);
    if (v13 < 0)
      operator delete(v12);
    if (v11 < 0)
      operator delete(v10);
    if (v9 < 0)
      operator delete(v8);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
  v5 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v5;
  CLConnection::getUserNameFromAuditToken(&v7, (CLConnection *)v6, v4);
  sub_1001AE664((std::string *)a2, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1001AE618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  sub_100010174(v19);
  _Unwind_Resume(a1);
}

std::string *sub_1001AE664(std::string *a1, const std::string *a2)
{
  if (a1[4].__r_.__value_.__s.__data_[1])
    return std::string::assign(a1, "root");
  else
    return std::string::operator=(a1, a2);
}

std::string *sub_1001AE67C@<X0>(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  std::string *result;
  std::string::size_type size;

  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  result = std::string::operator=((std::string *)(a2 + 104), __str);
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
    *(_BYTE *)(a2 + 96) = 1;
  return result;
}

void sub_1001AE6F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100010174(v1);
  _Unwind_Resume(a1);
}

const char *sub_1001AE704(unsigned int a1)
{
  if (a1 > 4)
    return "UNKNOWN";
  else
    return off_102141190[a1];
}

id sub_1001AE728(__int128 *a1)
{
  id v1;
  _QWORD v3[4];
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *__p;
  char v17;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_100085570;
  v3[3] = &unk_10215ED00;
  sub_1001AF190((char *)&v4, a1);
  v1 = objc_msgSend(v3, "copy");
  if (v17 < 0)
    operator delete(__p);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4);
  return v1;
}

void sub_1001AE814(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100010174(v1);
  _Unwind_Resume(a1);
}

void sub_1001AEECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1001AEF2C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  char v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  __int16 v18;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = *((_BYTE *)a2 + 98);
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_BYTE *)(a1 + 98) = v11;
  v12 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v12);
  v13 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)v12 = v13;
  *((_BYTE *)a2 + 127) = 0;
  *((_BYTE *)a2 + 104) = 0;
  v14 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
    operator delete(*v14);
  v15 = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_OWORD *)v14 = v15;
  *((_BYTE *)a2 + 151) = 0;
  *((_BYTE *)a2 + 128) = 0;
  v16 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*v16);
  v17 = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *(_OWORD *)v16 = v17;
  *((_BYTE *)a2 + 175) = 0;
  *((_BYTE *)a2 + 152) = 0;
  v18 = *((_WORD *)a2 + 88);
  *(_BYTE *)(a1 + 178) = *((_BYTE *)a2 + 178);
  *(_WORD *)(a1 + 176) = v18;
  return a1;
}

void sub_1001AF17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1001AF190(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int16 v8;
  __int128 v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int16 v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100115CE4(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  v8 = *((_WORD *)a2 + 48);
  __dst[98] = *((_BYTE *)a2 + 98);
  *((_WORD *)__dst + 48) = v8;
  if (*((char *)a2 + 127) < 0)
  {
    sub_100115CE4(__dst + 104, *((void **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 104);
    *((_QWORD *)__dst + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)(__dst + 104) = v9;
  }
  if (*((char *)a2 + 151) < 0)
  {
    sub_100115CE4(__dst + 128, *((void **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v10 = a2[8];
    *((_QWORD *)__dst + 18) = *((_QWORD *)a2 + 18);
    *((_OWORD *)__dst + 8) = v10;
  }
  v11 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_100115CE4(v11, *((void **)a2 + 19), *((_QWORD *)a2 + 20));
  }
  else
  {
    v12 = *(__int128 *)((char *)a2 + 152);
    *((_QWORD *)__dst + 21) = *((_QWORD *)a2 + 21);
    *(_OWORD *)v11 = v12;
  }
  v13 = *((_WORD *)a2 + 88);
  __dst[178] = *((_BYTE *)a2 + 178);
  *((_WORD *)__dst + 88) = v13;
  return __dst;
}

void sub_1001AF330(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

id sub_1001AF3C4(void *a1)
{
  id v2;

  if ((objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "applicationIsInstalled:", a1) & 1) != 0)
  {
    v2 = sub_1001AF434(a1);
    if (v2)
      return objc_msgSend(v2, "URL");
  }
  else
  {
    v2 = objc_msgSend(objc_alloc((Class)LSApplicationExtensionRecord), "initWithBundleIdentifier:error:", a1, 0);
    if (v2)
      return objc_msgSend(v2, "URL");
  }
  return 0;
}

id sub_1001AF434(void *a1)
{
  id v2;
  NSObject *v3;
  id v4;
  uint64_t v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  uint64_t v14;

  v6 = 0;
  v2 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", a1, 0, &v6);
  if (v6)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v4 = objc_msgSend(a1, "UTF8String");
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = v4;
      v13 = 2114;
      v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LSApplicationRecord returned an error for bundleId on getLSApplicationRecord\", \"bundleID\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
  }
  return v2;
}

void sub_1001AF568(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t **v4;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  _BYTE buf[1620];
  _QWORD v22[6];

  v2 = 0;
  v3 = 0;
  v22[0] = 0;
  v22[1] = "regular";
  v22[2] = 1;
  v22[3] = "fine";
  v4 = (uint64_t **)(a1 + 1040);
  v22[4] = 2;
  v22[5] = "coarse";
  __asm { FMOV            V0.2D, #-1.0 }
  do
  {
    v10 = v22[v2 + 1];
    v16 = v22[v2];
    *(_DWORD *)buf = v16;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      if ((v3 & 1) == 0)
      {
        v15 = sub_1001AFF54(a1, v16);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102151238);
        v11 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Now registered for %s location notifications, operating mode %d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102151238);
          v17 = 136315394;
          v18 = v10;
          v19 = 1024;
          v20 = v15;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Now registered for %s location notifications, operating mode %d", (const char *)&v17, 18);
          v13 = (char *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLFilteredLocationController::onLocationTimer()", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
        *(_QWORD *)buf = &v16;
        if (*((_BYTE *)sub_1001AFE94(v4, (int *)&v16, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32))
          sub_1001B3ABC();
        sub_1001B3AF0();
      }
      v3 = 1;
    }
    else
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 168) + 8), v16);
      *(_QWORD *)buf = &v16;
      *((_BYTE *)sub_1001AFE94(v4, (int *)&v16, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = 0;
    }
    v2 += 2;
  }
  while (v2 != 6);
  if ((v3 & 1) == 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102151238);
    v14 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"no more location clients - not re-registering\"}", buf, 0x12u);
    }
  }
}

uint64_t *sub_1001AF928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  int v7;
  uint64_t *v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t *result;
  NSObject *v13;
  NSObject *v14;
  int v15;
  uint64_t i;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;

  v6 = (char *)dword_101C29188;
  while (!*(_QWORD *)(a1 + 16))
  {
LABEL_8:
    v6 += 4;
    if (v6 == "44CLStreamingAwareLocationProviderStateMachine")
    {
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10218AF40);
      v10 = qword_1022A01E8;
      if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
      {
        v17 = 68289026;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"State is out of sync with registrations\"}", (uint8_t *)&v17, 0x12u);
        if (qword_1022A01E0 != -1)
          dispatch_once(&qword_1022A01E0, &stru_10218AF40);
      }
      v11 = qword_1022A01E8;
      if (os_signpost_enabled((os_log_t)qword_1022A01E8))
      {
        v17 = 68289026;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "State is out of sync with registrations", "{\"msg%{public}.0s\":\"State is out of sync with registrations\"}", (uint8_t *)&v17, 0x12u);
      }
      return sub_100E3384C(a1, a2);
    }
  }
  v7 = *(_DWORD *)v6;
  v8 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    v9 = *((_DWORD *)v8 + 7);
    if (v7 >= v9)
      break;
LABEL_7:
    v8 = (uint64_t *)*v8;
    if (!v8)
      goto LABEL_8;
  }
  if (v9 < v7)
  {
    ++v8;
    goto LABEL_7;
  }
  if (v7 | a2)
  {
LABEL_25:
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 93) || !*(_BYTE *)(a1 + 92))
    {
      v7 = 0;
      goto LABEL_25;
    }
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v13 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 68289026;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Local GPS is forbidden right now.  Downgrading to wifi accuracy\"}", (uint8_t *)&v17, 0x12u);
      v7 = 1;
      goto LABEL_25;
    }
    v7 = 1;
  }
  v14 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v15 = *(unsigned __int8 *)(a3 + 17);
    v17 = 68289794;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2050;
    v22 = a2;
    v23 = 2050;
    v24 = v7;
    v25 = 1026;
    v26 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Starting location for source\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"include motion\":%{public}d}", (uint8_t *)&v17, 0x2Cu);
  }
  for (i = 0; i != 12; i += 4)
    result = (uint64_t *)(***(uint64_t (****)(_QWORD, uint64_t))(a1 + 32))(*(_QWORD *)(a1 + 32), a2);
  return result;
}

uint64_t **sub_1001AFCA4(uint64_t a1, int a2, unsigned int a3, int a4, __int128 *a5)
{
  return sub_1001AFCAC(a1 - 120, a2, a3, a4, a5);
}

uint64_t **sub_1001AFCAC(uint64_t a1, int a2, unsigned int a3, int a4, __int128 *a5)
{
  __int128 v5;
  __int128 v7;
  __int128 v8[2];
  __int128 v9[2];

  if (a2 == 1)
  {
    v7 = a5[1];
    v8[0] = *a5;
    v8[1] = v7;
    return sub_1001AFD20(a1, a3, a4, v8, a1 + 208, (uint64_t **)(a1 + 168));
  }
  else
  {
    if (a2)
      sub_10192EC60();
    v5 = a5[1];
    v9[0] = *a5;
    v9[1] = v5;
    return sub_1001AFD20(a1, a3, a4, v9, a1 + 200, (uint64_t **)(a1 + 144));
  }
}

uint64_t **sub_1001AFD20(uint64_t a1, unsigned int a2, int a3, __int128 *a4, uint64_t a5, uint64_t **a6)
{
  int v11;
  __int128 v12;
  uint64_t v13;
  uint64_t **result;
  int v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;

  v18 = a2;
  *(_QWORD *)&v16 = &v18;
  v11 = *((unsigned __int8 *)sub_1001AFE94(a6, (int *)&v18, (uint64_t)&unk_101B9EB60, (_DWORD **)&v16) + 32);
  *(_QWORD *)&v16 = &v18;
  *((_BYTE *)sub_1001AFE94(a6, (int *)&v18, (uint64_t)&unk_101B9EB60, (_DWORD **)&v16) + 32) = a3;
  if (a3)
  {
    v12 = a4[1];
    v16 = *a4;
    v17 = v12;
    DWORD1(v17) = sub_1001AFF54(a1, v18);
    if (v11)
      sub_1001B3ABC();
    sub_1001B3AF0();
  }
  objc_msgSend(*(id *)(*(_QWORD *)a5 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)a5 + 8), v18);
  v13 = 0;
  while (1)
  {
    v15 = dword_101C2A0D4[v13];
    *(_QWORD *)&v16 = &v15;
    result = sub_1001AFE94(a6, &v15, (uint64_t)&unk_101B9EB60, (_DWORD **)&v16);
    if (*((_BYTE *)result + 32))
      break;
    if (++v13 == 3)
      return (uint64_t **)objc_msgSend(*(id *)(*(_QWORD *)a5 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)a5 + 8), 9);
  }
  return result;
}

uint64_t **sub_1001AFE94(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_BYTE *)v11 + 32) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1001AFF54(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *(_DWORD *)(v3 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (!v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 32) > a2)
    return 0;
  v10 = *(_QWORD **)(v5 + 40);
  v11 = (_QWORD *)(v5 + 48);
  result = 11;
  if (v10 != v11)
  {
    do
    {
      v12 = *((_DWORD *)v10 + 15);
      if (v12 < (int)result)
      {
        result = *((unsigned int *)v10 + 15);
        if (!v12)
          break;
      }
      v13 = (_QWORD *)v10[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v10[2];
          v15 = *v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v15);
      }
      v10 = v14;
    }
    while (v14 != v11);
  }
  return result;
}

void sub_1001AFFFC(uint64_t a1)
{
  char v2;
  char v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  char v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL4 v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  int v60;
  _BOOL4 v61;
  NSObject *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  NSObject *v71;
  uint64_t v72;
  void *v73;
  id v74;
  int v75;
  int v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  CFAbsoluteTime Current;
  void **v82;
  void *v83;
  unint64_t *v84;
  unint64_t v85;
  const char *v86;
  int v87;
  int v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  const char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  char *v102;
  const char *v103;
  double v104;
  _QWORD v105[6];
  std::__shared_weak_count *v106;
  CFAbsoluteTime v107;
  _QWORD v108[5];
  __int128 v109;
  __int16 v110;
  int v111;
  int v112;
  unint64_t v113;
  double v114;
  __int16 v115;
  int v116;
  int v117;
  double v118;
  _QWORD v119[6];
  _QWORD v120[2];
  void (*v121)(uint64_t);
  void *v122;
  uint64_t v123;
  _BYTE v124[28];
  __int16 v125;
  int v126;
  __int16 v127;
  double v128;
  __int16 v129;
  _BOOL4 v130;
  _BYTE __p[28];
  __int16 v132;
  _BYTE v133[20];
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  int v138;
  __int16 v139;
  unsigned int v140;
  __int16 v141;
  unsigned int v142;
  __int16 v143;
  unsigned int v144;

  sub_1015A2E04(__p, "kCLConnectionMessageLocation");
  v2 = sub_100FFB214(a1);
  v3 = v2;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v3 & 1) == 0)
      return;
  }
  else if ((v2 & 1) == 0)
  {
    return;
  }
  v120[0] = _NSConcreteStackBlock;
  v120[1] = 3221225472;
  v121 = sub_1011668C0;
  v122 = &unk_10212ECA0;
  v123 = a1;
  if ((sub_100FFB2C8(a1, 4) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 576), "invalidate");

    *(_QWORD *)(a1 + 576) = 0;
    if (*(_BYTE *)(a1 + 236))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v4 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)__p = 138543362;
        *(_QWORD *)&__p[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Client '%{public}@' paused, not starting location", __p, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v6 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)v124 = 138543362;
        *(_QWORD *)&v124[4] = v6;
        v7 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Client '%{public}@' paused, not starting location", v124, 12);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v7);
        if (v7 != __p)
          free(v7);
      }
      return;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 24);
      v10 = sub_1003471BC(a1);
      *(_QWORD *)__p = 68289538;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2114;
      *(_QWORD *)&__p[20] = v9;
      v132 = 2050;
      *(_QWORD *)v133 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client authorized for location; starting shortly\", \"Client\":%{public, location:escape_"
        "only}@, \"DC\":\"%{public}p\"}",
        __p,
        0x26u);
    }
    sub_1001B49DC(a1, 16);
    v118 = 0.0;
    if (objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")))
      objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")), "doubleValue");
    else
      v11 = -1.0;
    v118 = v11;
    if (objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDistanceFilterKey")))
    {
      objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDistanceFilterKey")), "doubleValue");
      v17 = v16;
    }
    else
    {
      v17 = -1.0;
    }
    v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDynamicAccuracyReductionKey")), "BOOLValue");
    v19 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageAlteredAccessoryLocationsKey")), "BOOLValue");
    if (objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageActivityTypeKey")))
      v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageActivityTypeKey")), "intValue");
    else
      v20 = 0;
    if (v17 >= 0.0)
      v21 = v17;
    else
      v21 = -1.0;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v22 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v23 = sub_1003471BC(a1);
      v24 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)__p = 68291330;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2050;
      *(_QWORD *)&__p[20] = a1;
      v132 = 2050;
      *(_QWORD *)v133 = v23;
      *(_WORD *)&v133[8] = 2114;
      *(_QWORD *)&v133[10] = v24;
      *(_WORD *)&v133[18] = 2050;
      v134 = v118;
      v135 = 2050;
      v136 = v21;
      v137 = 1026;
      v138 = 0;
      v139 = 1026;
      v140 = v18;
      v141 = 1026;
      v142 = v19;
      v143 = 1026;
      v144 = v20;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationSubcription #pwrlog authorized client subscribing\", \"this\":\"%{public}p\", \"DC\":\"%{public}p\", \"ClientKeyPath\":%{public, location:escape_only}@, \"DesiredAccuracy\":\"%{public}f\", \"DistanceFilter\":\"%{public}f\", \"OperatingMode\":%{public}d, \"DynamicAccuracyReductionEnabled\":%{public}d, \"AllowsAlteredAccessoryLocations\":%{public}d, \"ActivityType\":%{public}d}", __p, 0x5Cu);
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A38C8);
    v25 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)__p = 138543618;
      *(_QWORD *)&__p[4] = v26;
      *(_WORD *)&__p[12] = 2050;
      *(double *)&__p[14] = v118;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "@ClxClient, register, %{public}@, accuracy, %{public}.1lf", __p, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A38C8);
      v92 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v124 = 138543618;
      *(_QWORD *)&v124[4] = v92;
      *(_WORD *)&v124[12] = 2050;
      *(double *)&v124[14] = v118;
      v93 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxClient, register, %{public}@, accuracy, %{public}.1lf", v124, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v93);
      if (v93 != __p)
        free(v93);
    }
    if (v118 == 2147483640.0)
    {
      sub_1001B527C(a1, 1);
    }
    else
    {
      if (v118 != 2147483640.0)
      {
        sub_1001B527C(a1, 0xFFFFFFFFLL);
        v29 = v118;
        if (v118 >= 100.0)
        {
          if (v118 >= 1000.0)
          {
            if (v118 < 6378135.0)
            {
              v30 = 0;
              v31 = 1;
              v32 = 2;
              goto LABEL_72;
            }
            if (v118 < 6383135.0)
            {
              v32 = v118 == 6380001.0;
              v31 = 1;
              v30 = 1;
              goto LABEL_72;
            }
LABEL_58:
            sub_1015A2E04(__p, "com.apple.locationd.spectator");
            v27 = sub_1002255E0(a1);
            v28 = v27;
            if ((__p[23] & 0x80000000) != 0)
            {
              operator delete(*(void **)__p);
              if (v28)
                goto LABEL_60;
            }
            else if (v27)
            {
LABEL_60:
              v29 = v118;
              if (v118 == 2147483650.0)
              {
                v30 = 0;
                v31 = 1;
                v32 = 4;
                goto LABEL_72;
              }
              if (v118 == 2147483650.0)
              {
                v30 = 0;
                v31 = 1;
                v32 = 5;
                goto LABEL_72;
              }
              if (v118 == 2147483640.0)
              {
                v30 = 0;
                v31 = 1;
                v32 = 22;
                goto LABEL_72;
              }
              if (v118 == 2147483640.0)
              {
                *(_DWORD *)__p = 3600;
                *(_WORD *)&__p[4] = 257;
                *(_QWORD *)&__p[8] = "bundle";
                sub_1001B51F8(a1);
                sub_10061DCC4();
              }
              if (v118 == 2147483640.0)
              {
                v30 = 0;
                v31 = 1;
                v32 = 39;
LABEL_72:
                *(_BYTE *)(a1 + 57) = v30 | objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceType:", 12, v29) ^ 1;
                if ((_DWORD)v32)
                {
                  sub_1001B17A8(a1, 0);
                  if (*(_BYTE *)(a1 + 241))
                  {
                    if (qword_1022A01C0 != -1)
                      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                    v39 = qword_1022A01C8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
                    {
                      v40 = *(_QWORD *)(a1 + 24);
                      *(_QWORD *)__p = 68289282;
                      *(_WORD *)&__p[8] = 2082;
                      *(_QWORD *)&__p[10] = "";
                      *(_WORD *)&__p[18] = 2114;
                      *(_QWORD *)&__p[20] = v40;
                      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stop because accuracy changed\", \"Client\":%{public, location:escape_only}@}", __p, 0x1Cu);
                    }
                    sub_1011655AC(a1, 13);
                  }
                  if ((_DWORD)v32 != 1)
                  {
                    sub_1001B17A8(a1, 1);
                    if ((_DWORD)v32 != 2)
                    {
                      sub_1001B17A8(a1, 2);
                      if ((_DWORD)v32 != 4)
                      {
                        sub_1001B17A8(a1, 4);
                        if ((_DWORD)v32 != 5)
                        {
                          sub_1001B17A8(a1, 5);
                          if ((_DWORD)v32 == 22)
                          {
LABEL_90:
                            sub_1001B17A8(a1, 39);
LABEL_91:
                            if (!v31)
                            {
                              sub_1011644B8((id **)(a1 + 512), 0);
                              return;
                            }
                            v42 = (uint64_t *)(a1 + 512);
                            if (sub_1001B1900(a1))
                            {
                              sub_1011644B8((id **)(a1 + 512), 0);
                            }
                            else
                            {
                              v43 = *v42;
                              if (!*v42)
                              {
                                *(_QWORD *)v124 = objc_msgSend(*(id *)(a1 + 24), "legacyClientKey");
                                sub_101166BCC();
                              }
                              if (*(double *)(v43 + 40) != v118)
                              {
                                sub_1011616A0(*v42);
                                *(double *)(v43 + 40) = v118;
                              }
                            }
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                            v44 = qword_1022A01C8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
                            {
                              v45 = sub_1001B49F8(v32);
                              *(_DWORD *)__p = 67109634;
                              *(_DWORD *)&__p[4] = v32;
                              *(_WORD *)&__p[8] = 2080;
                              *(_QWORD *)&__p[10] = v45;
                              *(_WORD *)&__p[18] = 2048;
                              *(double *)&__p[20] = v118;
                              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "register for notification, %d, %s, desiredAccuracy, %.1f", __p, 0x1Cu);
                            }
                            if (sub_1001BFF7C(115, 2))
                            {
                              bzero(__p, 0x65CuLL);
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                              v94 = qword_1022A01C8;
                              v95 = sub_1001B49F8(v32);
                              *(_DWORD *)v124 = 67109634;
                              *(_DWORD *)&v124[4] = v32;
                              *(_WORD *)&v124[8] = 2080;
                              *(_QWORD *)&v124[10] = v95;
                              *(_WORD *)&v124[18] = 2048;
                              *(double *)&v124[20] = v118;
                              LODWORD(v103) = 28;
                              v96 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v94, 2, "register for notification, %d, %s, desiredAccuracy, %.1f", v124, v103, v104);
                              sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v96);
                              if (v96 != __p)
                                free(v96);
                            }
                            *(double *)(a1 + 304) = v118;
                            *(CFAbsoluteTime *)(a1 + 208) = CFAbsoluteTimeGetCurrent();
                            *(_DWORD *)(a1 + 196) = v32;
                            v113 = 0xBFF0000000000000;
                            v114 = v21;
                            v115 = 0;
                            v116 = 0;
                            v117 = 0;
                            sub_1001B1910(a1, v32);
                            sub_1001B3C4C(a1);
                            sub_1001B3B88(a1);
                            if (*(_BYTE *)(a1 + 241) && v21 > 0.0)
                            {
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                              v46 = qword_1022A01C8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
                              {
                                v47 = *(_QWORD *)(a1 + 24);
                                *(_QWORD *)__p = 68289282;
                                *(_WORD *)&__p[8] = 2082;
                                *(_QWORD *)&__p[10] = "";
                                *(_WORD *)&__p[18] = 2114;
                                *(_QWORD *)&__p[20] = v47;
                                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BATCH: stop because distance filtered\", \"Client\":%{public, location:escape_only}@}", __p, 0x1Cu);
                              }
                              sub_1011655AC(a1, 14);
                            }
                            if (*(_BYTE *)(a1 + 57))
                            {
                              v48 = sub_1001B17F0(a1);
                              objc_msgSend(*(id *)(*(_QWORD *)v48 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v48 + 8), 8);
                              v49 = sub_1001B17F0(a1);
                              objc_msgSend(*(id *)(*(_QWORD *)v49 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v49 + 8), 17);
                              v50 = sub_1001B17F0(a1);
                              objc_msgSend(*(id *)(*(_QWORD *)v50 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v50 + 8), 34);
                              v51 = sub_1001B17F0(a1);
                              objc_msgSend(*(id *)(*(_QWORD *)v51 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v51 + 8), 35);
                              v52 = 0;
                            }
                            else
                            {
                              v53 = sub_1001B17F0(a1);
                              v55 = *(_QWORD *)(*(_QWORD *)v53 + 8);
                              v54 = *(void **)(*(_QWORD *)v53 + 16);
                              if (v118 >= -1.0)
                                objc_msgSend(v54, "unregister:forNotification:", v55, 8);
                              else
                                objc_msgSend(v54, "register:forNotification:registrationInfo:", v55, 8, 0);
                              v52 = v118 < 100.0
                                 && (*(unsigned __int8 *)(a1 + 194) | *(unsigned __int8 *)(a1 + 193)) != 0;
                              v57 = sub_1001B17F0(a1);
                              v59 = *(_QWORD *)(*(_QWORD *)v57 + 8);
                              v58 = *(void **)(*(_QWORD *)v57 + 16);
                              if (v52)
                                objc_msgSend(v58, "register:forNotification:registrationInfo:", v59, 17, 0);
                              else
                                objc_msgSend(v58, "unregister:forNotification:", v59, 17);
                              sub_1001B4BC0(a1, v118 <= -1.0);
                              v60 = *(_DWORD *)(a1 + 232);
                              v61 = (v60 == 4 || v60 == 2)
                                 && (objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 5) & 1) != 0;
                              sub_1001B4C00(a1, v61);
                            }
                            __asm { FMOV            V0.2D, #-1.0 }
                            v109 = _Q0;
                            v110 = 0;
                            v111 = 0;
                            v112 = 0;
                            sub_1001B1910(a1, 9);
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                            v66 = qword_1022A01C8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
                            {
                              v67 = *(_QWORD *)(a1 + 24);
                              v68 = *(_DWORD *)(a1 + 44);
                              v69 = sub_1003471BC(a1);
                              v70 = *(unsigned __int8 *)(a1 + 193);
                              *(_DWORD *)__p = 138413570;
                              *(_QWORD *)&__p[4] = v67;
                              *(_WORD *)&__p[12] = 1024;
                              *(_DWORD *)&__p[14] = v68;
                              *(_WORD *)&__p[18] = 2048;
                              *(_QWORD *)&__p[20] = v69;
                              v132 = 1024;
                              *(_DWORD *)v133 = v70;
                              *(_WORD *)&v133[4] = 2048;
                              *(double *)&v133[6] = v118;
                              *(_WORD *)&v133[14] = 1024;
                              *(_DWORD *)&v133[16] = v52;
                              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "CLMM,Client,'%@',pid,%u,DC,%p,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d", __p, 0x32u);
                            }
                            if (sub_1001BFF7C(115, 2))
                            {
                              bzero(__p, 0x65CuLL);
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                              v97 = qword_1022A01C8;
                              v98 = *(_QWORD *)(a1 + 24);
                              v99 = *(_DWORD *)(a1 + 44);
                              v100 = sub_1003471BC(a1);
                              v101 = *(unsigned __int8 *)(a1 + 193);
                              *(_DWORD *)v124 = 138413570;
                              *(_QWORD *)&v124[4] = v98;
                              *(_WORD *)&v124[12] = 1024;
                              *(_DWORD *)&v124[14] = v99;
                              *(_WORD *)&v124[18] = 2048;
                              *(_QWORD *)&v124[20] = v100;
                              v125 = 1024;
                              v126 = v101;
                              v127 = 2048;
                              v128 = v118;
                              v129 = 1024;
                              v130 = v52;
                              LODWORD(v103) = 50;
                              v102 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v97, 0, "CLMM,Client,'%@',pid,%u,DC,%p,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d", v124, v103);
                              sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::startLocation_nl()", "%s\n", v102);
                              if (v102 != __p)
                                free(v102);
                            }

                            *(_QWORD *)(a1 + 216) = 0;
                            if (v17 > 0.0 || v118 >= 1000.0 && v118 <= 6383135.0)
                            {
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                              v71 = qword_1022A01C8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
                              {
                                v72 = *(_QWORD *)(a1 + 24);
                                *(_QWORD *)__p = 68289282;
                                *(_WORD *)&__p[8] = 2082;
                                *(_QWORD *)&__p[10] = "";
                                *(_WORD *)&__p[18] = 2114;
                                *(_QWORD *)&__p[20] = v72;
                                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional force intermediation - high dF or acc(#cblsPowerSaver)\", \"Client\":%{public, location:escape_only}@}", __p, 0x1Cu);
                              }
                              v73 = (void *)sub_1001B828C(a1);
                              v74 = objc_msgSend(*(id *)(a1 + 24), "legacyClientKey");
                              v108[0] = _NSConcreteStackBlock;
                              v108[1] = 3221225472;
                              v108[2] = sub_101166C84;
                              v108[3] = &unk_102148D08;
                              v108[4] = a1;
                              objc_msgSend(v73, "handleProvisionalIntermediationForService:forClientKey:at:withReply:", 5, v74, 0, v108);
                            }
                            if (v32 <= 0x27 && ((1 << v32) & 0x8000400030) != 0
                              || sub_1001B4C40(a1))
                            {
                              sub_101164924(a1, 1);
                              v76 = *(_DWORD *)(a1 + 184);
                              v75 = *(_DWORD *)(a1 + 188);
                              if (v76 < 5)
                              {
                                if (v75 != 2 && (v76 != 2 || v75 != 3))
                                  goto LABEL_157;
                              }
                              else if (v75 == 1)
                              {
                                goto LABEL_157;
                              }
                              sub_101164790(a1);
                              goto LABEL_157;
                            }
                            if (v118 < 110.0)
                            {
                              v86 = sub_1001B49F8(v32);
                              *(_QWORD *)(a1 + 216) = sub_1001B4F70((const void *)a1, v86);
                            }
                            sub_1001B4478(a1, 1);
                            v88 = *(_DWORD *)(a1 + 184);
                            v87 = *(_DWORD *)(a1 + 188);
                            if (v88 < 5)
                            {
                              if (v87 != 2 && (v88 != 2 || v87 != 3))
                                goto LABEL_191;
                            }
                            else if (v87 == 1)
                            {
                              goto LABEL_191;
                            }
                            if (sub_1001B5540(a1))
                              sub_1011644F4(a1);
LABEL_191:
                            if (!sub_1001B1900(a1))
                            {
LABEL_158:
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
                              v77 = qword_1022A01C8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
                              {
                                v78 = *(_QWORD *)(a1 + 24);
                                v79 = sub_1003471BC(a1);
                                v80 = *(unsigned __int8 *)(a1 + 58);
                                *(_QWORD *)__p = 68289794;
                                *(_WORD *)&__p[8] = 2082;
                                *(_QWORD *)&__p[10] = "";
                                *(_WORD *)&__p[18] = 2114;
                                *(_QWORD *)&__p[20] = v78;
                                v132 = 2050;
                                *(_QWORD *)v133 = v79;
                                *(_WORD *)&v133[8] = 1026;
                                *(_DWORD *)&v133[10] = v80;
                                _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver starting metric session (LocationUpdateSession)\", \"Client\":%{public, location:escape_only}@, \"DC\":\"%{public}p\", \"LossTrackingEnabled\":%{public}hhd}", __p, 0x2Cu);
                              }
                              Current = CFAbsoluteTimeGetCurrent();
                              *(_BYTE *)(a1 + 312) = 1;
                              *(double *)(a1 + 384) = v118;
                              *(double *)(a1 + 392) = v21;
                              *(CFAbsoluteTime *)(a1 + 320) = Current;
                              sub_1001B5504(a1, __p);
                              v82 = (void **)(a1 + 328);
                              if (*(char *)(a1 + 351) < 0)
                                operator delete(*v82);
                              *(_OWORD *)v82 = *(_OWORD *)__p;
                              *(_QWORD *)(a1 + 344) = *(_QWORD *)&__p[16];
                              sub_10052D218(a1 + 552, __p);
                              v83 = *(void **)(a1 + 8);
                              v105[0] = _NSConcreteStackBlock;
                              v105[1] = 3321888768;
                              v105[2] = sub_101166D84;
                              v105[3] = &unk_1021A3728;
                              v105[4] = a1;
                              v105[5] = *(_QWORD *)__p;
                              v106 = *(std::__shared_weak_count **)&__p[8];
                              if (*(_QWORD *)&__p[8])
                              {
                                v84 = (unint64_t *)(*(_QWORD *)&__p[8] + 16);
                                do
                                  v85 = __ldxr(v84);
                                while (__stxr(v85 + 1, v84));
                              }
                              v107 = Current;
                              sub_1001B6EA4(v83, (uint64_t)v105);
                              if (v106)
                                std::__shared_weak_count::__release_weak(v106);
                              if (*(_QWORD *)&__p[8])
                                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
                              return;
                            }
LABEL_157:
                            if (!*(_BYTE *)(a1 + 58))
                              return;
                            goto LABEL_158;
                          }
                        }
LABEL_89:
                        sub_1001B17A8(a1, 22);
                        v41 = sub_1001B51F8(a1);
                        objc_msgSend(*(id *)(*(_QWORD *)v41 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v41 + 8), 12);
                        if ((_DWORD)v32 == 39)
                          goto LABEL_91;
                        goto LABEL_90;
                      }
LABEL_88:
                      sub_1001B17A8(a1, 5);
                      goto LABEL_89;
                    }
LABEL_87:
                    sub_1001B17A8(a1, 4);
                    goto LABEL_88;
                  }
                }
                else
                {
                  sub_1001B17A8(a1, 1);
                }
                sub_1001B17A8(a1, 2);
                goto LABEL_87;
              }
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
              v89 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
              {
                v90 = *(_QWORD *)(a1 + 24);
                *(_QWORD *)__p = 68289282;
                *(_WORD *)&__p[8] = 2082;
                *(_QWORD *)&__p[10] = "";
                *(_WORD *)&__p[18] = 2114;
                *(_QWORD *)&__p[20] = v90;
                _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Not registering for location updates; the planets don't align\", \"Client\":%{p"
                  "ublic, location:escape_only}@}",
                  __p,
                  0x1Cu);
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
              }
              v35 = qword_1022A01C8;
              if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
              {
LABEL_71:
                v31 = 0;
                v30 = 0;
                v32 = 48;
                goto LABEL_72;
              }
              v91 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)__p = 68289282;
              *(_WORD *)&__p[8] = 2082;
              *(_QWORD *)&__p[10] = "";
              *(_WORD *)&__p[18] = 2114;
              *(_QWORD *)&__p[20] = v91;
              v37 = "Not registering for location updates; the planets don't align";
              v38 = "{\"msg%{public}.0s\":\"Not registering for location updates; the planets don't align\", \"Client\":%"
                    "{public, location:escape_only}@}";
LABEL_70:
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v37, v38, __p, 0x1Cu);
              goto LABEL_71;
            }
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
            v33 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
            {
              v34 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)__p = 68289282;
              *(_WORD *)&__p[8] = 2082;
              *(_QWORD *)&__p[10] = "";
              *(_WORD *)&__p[18] = 2114;
              *(_QWORD *)&__p[20] = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Not registering for location updates; desiredAccuracy is too high\", \"Client\":%"
                "{public, location:escape_only}@}",
                __p,
                0x1Cu);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
            }
            v35 = qword_1022A01C8;
            if (!os_signpost_enabled((os_log_t)qword_1022A01C8))
              goto LABEL_71;
            v36 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)__p = 68289282;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2114;
            *(_QWORD *)&__p[20] = v36;
            v37 = "Not registering for location updates; desiredAccuracy is too high";
            v38 = "{\"msg%{public}.0s\":\"Not registering for location updates; desiredAccuracy is too high\", \"Client\""
                  ":%{public, location:escape_only}@}";
            goto LABEL_70;
          }
          v30 = 0;
          v32 = 1;
        }
        else
        {
          v32 = 0;
          v30 = 0;
        }
        v31 = 1;
        goto LABEL_72;
      }
      sub_1001B527C(a1, 0);
    }
    v118 = 2147483650.0;
    goto LABEL_58;
  }
  if (objc_msgSend(*(id *)(a1 + 16), "transientAwareRegistrationResult") == 2)
  {
    sub_1011668C0((uint64_t)v120);
  }
  else if (objc_msgSend(*(id *)(a1 + 16), "transientAwareRegistrationResult") == 3)
  {
    v121((uint64_t)v120);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 24);
      v14 = sub_1003471BC(a1);
      *(_QWORD *)__p = 68289538;
      *(_WORD *)&__p[8] = 2082;
      *(_QWORD *)&__p[10] = "";
      *(_WORD *)&__p[18] = 2114;
      *(_QWORD *)&__p[20] = v13;
      v132 = 2050;
      *(_QWORD *)v133 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"client not authorized for location; not starting yet\", \"Client\":%{public, location:esc"
        "ape_only}@, \"DC\":\"%{public}p\"}",
        __p,
        0x26u);
    }
    if (!*(_QWORD *)(a1 + 576))
    {
      v15 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
      *(_QWORD *)(a1 + 576) = v15;
      v119[0] = _NSConcreteStackBlock;
      v119[1] = 3221225472;
      v119[2] = sub_101166AAC;
      v119[3] = &unk_1021380D0;
      v119[4] = v120;
      v119[5] = a1;
      objc_msgSend(v15, "setHandler:", v119);
      objc_msgSend(*(id *)(a1 + 576), "setNextFireDelay:interval:", 2.0, 1.79769313e308);
    }
  }
  sub_101163EF4(a1);
}

void sub_1001B1760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,std::__shared_weak_count *a54,int a55,__int16 a56,char a57,char a58)
{
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  if (a54)
    std::__shared_weak_count::__release_weak(a54);
  _Unwind_Resume(exception_object);
}

id sub_1001B17A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1001B1874(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v4 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v4 + 8), a2);
  v5 = sub_1001B17F0(a1);
  return objc_msgSend(*(id *)(*(_QWORD *)v5 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v5 + 8), a2);
}

uint64_t sub_1001B17F0(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 136))
    sub_1001B7C9C();
  return a1 + 136;
}

uint64_t sub_1001B1874(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 144))
    sub_1001B7BB8();
  return a1 + 144;
}

uint64_t sub_1001B18F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 91);
}

uint64_t sub_1001B1900(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
}

id sub_1001B1910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 57))
  {
    v6 = sub_1001B1874(a1);
    objc_msgSend(*(id *)(*(_QWORD *)v6 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v6 + 8), a2);
    sub_1001B17F0(a1);
    sub_1001B3AF0();
  }
  v4 = sub_1001B17F0(a1);
  objc_msgSend(*(id *)(*(_QWORD *)v4 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v4 + 8), a2);
  v5 = sub_1001B1874(a1);
  return objc_msgSend(*(id *)(*(_QWORD *)v5 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v5 + 8), a2, 0);
}

void sub_1001B19A8(uint64_t a1, int a2)
{
  double v4;
  NSObject *v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t **v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t **v12;
  _QWORD *v13;
  uint64_t *v14;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  uint64_t **v18;
  _QWORD *v19;
  float v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t **v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t **v42;
  _QWORD *v43;
  float v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  _BYTE v50[12];
  __int16 v51;
  double v52;
  __int16 v53;
  _QWORD *v54;
  _BYTE buf[12];
  __int16 v56;
  double v57;
  __int16 v58;
  _QWORD *v59;

  v49 = a2;
  v4 = sub_1001B75B4(a1);
  if (a2)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v5 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = &v49;
      v6 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
      *(_QWORD *)buf = &v49;
      v7 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v8 = v7 + 6;
      if (*((char *)v7 + 71) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 134349570;
      *(_QWORD *)&buf[4] = v6;
      v56 = 2050;
      v57 = v4;
      v58 = 2082;
      v59 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLIENT:startLocation,registerForNotification,start reg info,client,%{public}p,desiredAccuracy,%{public}.1lf,name,%{public}s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v31 = qword_1022A0028;
      *(_QWORD *)v50 = &v49;
      v32 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)v50)[5];
      *(_QWORD *)v50 = &v49;
      v33 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)v50);
      v34 = v33 + 6;
      if (*((char *)v33 + 71) < 0)
        v34 = (_QWORD *)*v34;
      *(_DWORD *)v50 = 134349570;
      *(_QWORD *)&v50[4] = v32;
      v51 = 2050;
      v52 = v4;
      v53 = 2082;
      v54 = v34;
      v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "CLIENT:startLocation,registerForNotification,start reg info,client,%{public}p,desiredAccuracy,%{public}.1lf,name,%{public}s", v50, 32);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocationProvider(LocationProvider)", "%s\n", v35);
      if (v35 != buf)
        free(v35);
    }
    v9 = (uint64_t **)(a1 + 240);
    *(_QWORD *)buf = &v49;
    if (*((_BYTE *)sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 903)
      || (*(_QWORD *)buf = &v49,
          *((double *)sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 113) > 0.0))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      v10 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LocationController,#Warning, starting already active provider", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        *(_WORD *)v50 = 0;
        LODWORD(v48) = 2;
        v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "LocationController,#Warning, starting already active provider", v50, v48);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocationProvider(LocationProvider)", "%s\n", v36);
        if (v36 != buf)
          free(v36);
      }
    }
    if (!*(_BYTE *)(a1 + 664))
    {
      if (v49 == *(_DWORD *)(a1 + 328))
        sub_1001AFF54(a1, 0);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214C620);
      v17 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)buf = &v49;
        v18 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v19 = v18 + 6;
        if (*((char *)v18 + 71) < 0)
          v19 = (_QWORD *)*v19;
        v20 = sub_1001B75B4(a1);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v19;
        v56 = 2050;
        v57 = v20;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@ClxProvider, start, %{public}s, desiredAccuracy, %{public}.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v41 = qword_1022A0048;
        *(_QWORD *)v50 = &v49;
        v42 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)v50);
        v43 = v42 + 6;
        if (*((char *)v42 + 71) < 0)
          v43 = (_QWORD *)*v43;
        v44 = sub_1001B75B4(a1);
        *(_DWORD *)v50 = 136446466;
        *(_QWORD *)&v50[4] = v43;
        v51 = 2050;
        v52 = v44;
        LODWORD(v48) = 22;
        v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 0, "@ClxProvider, start, %{public}s, desiredAccuracy, %{public}.1f", v50, v48);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocationProvider(LocationProvider)", "%s\n", v45);
        if (v45 != buf)
          free(v45);
      }
      if (v49 == *(_DWORD *)(a1 + 320))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v21 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "WlpReg, 1, loccontroller", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214C620);
          *(_WORD *)v50 = 0;
          LODWORD(v48) = 2;
          v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WlpReg, 1, loccontroller", v50, v48);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocationProvider(LocationProvider)", "%s\n", v46);
          if (v46 != buf)
            free(v46);
        }
      }
      if (v49 == *(_DWORD *)(a1 + 324))
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214C620);
        v22 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "UclpReg, 1, loccontroller", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214C620);
          *(_WORD *)v50 = 0;
          LODWORD(v48) = 2;
          v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "UclpReg, 1, loccontroller", v50, v48);
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocationProvider(LocationProvider)", "%s\n", v47);
          if (v47 != buf)
            free(v47);
        }
      }
      *(_QWORD *)buf = &v49;
      sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      sub_1001B3AF0();
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v11 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)buf = &v49;
      v12 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v13 = v12 + 6;
      if (*((char *)v12 + 71) < 0)
        v13 = (_QWORD *)*v13;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "registering location provider,%{public}s,as a bystander only", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v37 = qword_1022A0028;
      *(_QWORD *)v50 = &v49;
      v38 = sub_1001B2798((uint64_t **)(a1 + 240), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)v50);
      v39 = v38 + 6;
      if (*((char *)v38 + 71) < 0)
        v39 = (_QWORD *)*v39;
      *(_DWORD *)v50 = 136446210;
      *(_QWORD *)&v50[4] = v39;
      LODWORD(v48) = 12;
      v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 2, "registering location provider,%{public}s,as a bystander only", v50, v48);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocationProvider(LocationProvider)", "%s\n", v40);
      if (v40 != buf)
        free(v40);
    }
    *(_QWORD *)buf = &v49;
    v14 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
    objc_msgSend((id)v14[2], "register:forNotification:registrationInfo:", v14[1], 4, 0);
    v23 = v49;
    if (v49 == *(_DWORD *)(a1 + 328))
    {
      *(_QWORD *)buf = &v49;
      v24 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      objc_msgSend((id)v24[5][2], "register:forNotification:registrationInfo:", v24[5][1], 26, 0);
      *(_QWORD *)buf = &v49;
      v25 = sub_100041CE0((uint64_t **)(a1 + 264), &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      objc_msgSend((id)v25[5][2], "register:forNotification:registrationInfo:", v25[5][1], 18, 0);
      v23 = v49;
    }
    if (v23 == *(_DWORD *)(a1 + 336))
    {
      v26 = (uint64_t **)(a1 + 264);
      *(_QWORD *)buf = &v49;
      v27 = sub_100041CE0(v26, &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      objc_msgSend((id)v27[5][2], "register:forNotification:registrationInfo:", v27[5][1], 20, 0);
      *(_QWORD *)buf = &v49;
      v28 = sub_100041CE0(v26, &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      objc_msgSend((id)v28[5][2], "register:forNotification:registrationInfo:", v28[5][1], 21, 0);
    }
    *(_QWORD *)buf = &v49;
    *((_BYTE *)sub_1001B2798(v9, &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 902) = 0;
    *(_QWORD *)buf = &v49;
    *((_BYTE *)sub_1001B2798(v9, &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 903) = 1;
    v29 = sub_100B303DC();
    *(_DWORD *)buf = 1;
    v30 = sub_100B30608(v29, buf);
    *(_QWORD *)buf = &v49;
    *((double *)sub_1001B2798(v9, &v49, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 113) = v30;
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "LocationController,#Warning,startLocation when provider is None", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      *(_WORD *)v50 = 0;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "LocationController,#Warning,startLocation when provider is None", v50, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::startLocationProvider(LocationProvider)", "%s\n", v16);
      if (v16 != buf)
        free(v16);
    }
  }
}

uint64_t **sub_1001B2798(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  int v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x390uLL);
    v14[1] = v7;
    *((_DWORD *)v12 + 8) = **a4;
    sub_1006AB324((uint64_t)(v12 + 5));
    v15 = 1;
    sub_1000145B0(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_1006AB3C8((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t sub_1001B2880(uint64_t a1, unsigned int *a2)
{
  char v4;
  int v5;
  uint64_t *v6;
  NSObject *v7;
  unsigned int v8;
  const char *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int *v20;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  NSObject *v29;
  int v30;
  int v31;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t **v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  double v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t v51;
  double v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  char *v59;
  NSObject *v61;
  uint64_t *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  NSObject *v68;
  unsigned int v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t *v83;
  NSObject *v84;
  NSObject *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  void (*v89)(void);
  uint64_t *v90;
  uint64_t *v91;
  NSObject *v93;
  _BYTE *v94;
  NSObject *v95;
  uint64_t v96;
  unsigned int v97;
  const char *v98;
  char *v99;
  int v100;
  int v101;
  char *v102;
  char *v103;
  uint64_t v104;
  int v105;
  char v106;
  _BYTE v107[24];
  int v108;
  __int16 v109;
  int v110;
  double v111[2];
  __int16 v112;
  int v113;
  int v114;
  _BYTE buf[36];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;

  sub_1001B3B80();
  if (*a2 >= 3)
    v4 = -1;
  else
    v4 = 2 - *(_BYTE *)a2;
  v5 = v4;
  v106 = v4;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v6 = &qword_1022A0000;
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = *a2;
    v9 = sub_1001B49F8(*a2);
    *(_DWORD *)buf = 67240706;
    *(_DWORD *)&buf[4] = v8;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v9;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLIENT:registerForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v96 = qword_1022A0028;
    v97 = *a2;
    v98 = sub_1001B49F8(*a2);
    *(_DWORD *)v107 = 67240706;
    *(_DWORD *)&v107[4] = v97;
    *(_WORD *)&v107[8] = 2082;
    *(_QWORD *)&v107[10] = v98;
    *(_WORD *)&v107[18] = 1026;
    *(_DWORD *)&v107[20] = v5;
    v99 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v96, 2, "CLIENT:registerForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d", v107, 24);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v99);
    if (v99 != buf)
      free(v99);
  }
  switch(*a2)
  {
    case 0u:
    case 1u:
    case 2u:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v29 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v30 = *(char *)(a1 + 160);
        v31 = *(char *)(a1 + 161);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&buf[4] = v30;
        *(_WORD *)&buf[8] = 1026;
        *(_DWORD *)&buf[10] = v31;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Before register,required granularity,%{public}d,active granularity,%{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v100 = *(char *)(a1 + 160);
        v101 = *(char *)(a1 + 161);
        *(_DWORD *)v107 = 67240448;
        *(_DWORD *)&v107[4] = v100;
        *(_WORD *)&v107[8] = 1026;
        *(_DWORD *)&v107[10] = v101;
        LODWORD(v104) = 14;
        v102 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Before register,required granularity,%{public}d,active granularity,%{public}d", v107, v104);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v102);
        if (v102 != buf)
          free(v102);
      }
      *(_DWORD *)buf = 0xFFFF;
      *(_QWORD *)&buf[12] = 0;
      *(_QWORD *)&buf[4] = 0;
      *(_OWORD *)&buf[20] = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      v116 = _Q0;
      v117 = _Q0;
      v118 = _Q0;
      v119 = 0;
      v121 = 0;
      v122 = 0;
      v120 = 0xBFF0000000000000;
      v124 = 0xBFF0000000000000;
      v123 = 0;
      v125 = 0x7FFFFFFF;
      v127 = 0;
      v128 = 0;
      v126 = 0;
      v129 = 0;
      v36 = *(_QWORD *)(a1 + 288);
      if (v36
        && (*(unsigned int (**)(uint64_t, _BYTE *))(*(_QWORD *)v36 + 152))(v36, buf)
        && *(double *)&buf[20] > 0.0)
      {
        *(_DWORD *)v107 = 0;
        v37 = sub_1001B7864(a1, (int *)v107, 1);
        LODWORD(v111[0]) = 1;
        v38 = sub_1001B7864(a1, (int *)v111, 1);
        v105 = 2;
        v39 = sub_1001B7864(a1, &v105, 1);
        sub_101140F78(a1 + 5200, (int *)a2, v37, v38, v39, *(double *)&buf[20]);
      }
      if (v5 > *(char *)(a1 + 160))
        *(_BYTE *)(a1 + 160) = v5;
      if (v5 > *(char *)(a1 + 161))
        sub_100192DD0(a1, &v106);
      goto LABEL_48;
    case 3u:
    case 4u:
    case 6u:
    case 0xAu:
    case 0x27u:
      v10 = *(int **)(a1 + 264);
      v11 = (int *)(a1 + 272);
      if (v10 != (int *)(a1 + 272))
      {
        v12 = a1 + 240;
        do
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v13 = v6[5];
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            v14 = *a2;
            v15 = sub_1000B5C9C(v12, v10 + 8);
            v18 = v15[1];
            v16 = v15 + 1;
            v17 = v18;
            if (*((char *)v16 + 23) >= 0)
              v17 = (uint64_t)v16;
            *(_DWORD *)buf = 67240450;
            *(_DWORD *)&buf[4] = v14;
            v6 = &qword_1022A0000;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = v17;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "registering notification,%{public}d,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v22 = v6[5];
            v23 = *a2;
            v24 = sub_1000B5C9C(v12, v10 + 8);
            v27 = v24[1];
            v25 = v24 + 1;
            v26 = v27;
            if (*((char *)v25 + 23) >= 0)
              v26 = (uint64_t)v25;
            *(_DWORD *)v107 = 67240450;
            *(_DWORD *)&v107[4] = v23;
            *(_WORD *)&v107[8] = 2082;
            *(_QWORD *)&v107[10] = v26;
            LODWORD(v104) = 18;
            v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "registering notification,%{public}d,location provider,%{public}s", v107, v104);
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v28);
            if (v28 != buf)
              free(v28);
            v6 = &qword_1022A0000;
          }
          objc_msgSend(*(id *)(*((_QWORD *)v10 + 5) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v10 + 5) + 8), *a2, 0);
          v19 = (int *)*((_QWORD *)v10 + 1);
          if (v19)
          {
            do
            {
              v20 = v19;
              v19 = *(int **)v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              v20 = (int *)*((_QWORD *)v10 + 2);
              _ZF = *(_QWORD *)v20 == (_QWORD)v10;
              v10 = v20;
            }
            while (!_ZF);
          }
          v10 = v20;
        }
        while (v20 != v11);
      }
      return 1;
    case 8u:
      if (*(_DWORD *)(a1 + 328))
      {
        *(_QWORD *)buf = a1 + 328;
        v40 = sub_100041CE0((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v40[5][2], "register:forNotification:registrationInfo:", v40[5][1], 8, 0);
      }
LABEL_48:
      v111[1] = -1.0;
      v112 = 0;
      v114 = 0;
      v111[0] = sub_1001B75B4(a1);
      v113 = sub_1001AFF54(a1, 0);
      v41 = *(_QWORD *)(a1 + 264);
      if (v41 != a1 + 272)
      {
        v42 = a1 + 240;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v43 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v44 = v111[0];
          v45 = sub_1000B5C9C(v42, (int *)(v41 + 32));
          v48 = v45[1];
          v46 = v45 + 1;
          v47 = v48;
          if (*((char *)v46 + 23) >= 0)
            v49 = v46;
          else
            v49 = (uint64_t *)v47;
          v50 = *((unsigned __int8 *)sub_1000B5C9C(v42, (int *)(v41 + 32)) + 863);
          *(_DWORD *)buf = 134349826;
          *(double *)&buf[4] = v44;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v49;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v50;
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = v113;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLIENT:registerForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d,operating mode,%{public}d", buf, 0x22u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v51 = qword_1022A0028;
          v52 = v111[0];
          v53 = sub_1000B5C9C(v42, (int *)(v41 + 32));
          v56 = v53[1];
          v54 = v53 + 1;
          v55 = v56;
          if (*((char *)v54 + 23) >= 0)
            v57 = v54;
          else
            v57 = (uint64_t *)v55;
          v58 = *((unsigned __int8 *)sub_1000B5C9C(v42, (int *)(v41 + 32)) + 863);
          *(_DWORD *)v107 = 134349826;
          *(double *)&v107[4] = v52;
          *(_WORD *)&v107[12] = 2082;
          *(_QWORD *)&v107[14] = v57;
          *(_WORD *)&v107[22] = 1026;
          v108 = v58;
          v109 = 1026;
          v110 = v113;
          LODWORD(v104) = 34;
          v59 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 2, "CLIENT:registerForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d,operating mode,%{public}d", v107, v104);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v59);
          if (v59 != buf)
            free(v59);
        }
        *(_DWORD *)buf = 0;
        sub_1001B3ABC();
      }
      return 1;
    case 0xFu:
      if (*(_DWORD *)(a1 + 328))
      {
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)buf = _Q0;
        *(_WORD *)&buf[16] = 0;
        *(_DWORD *)&buf[24] = 0;
        *(_DWORD *)&buf[20] = sub_1001AFF54(a1, 15);
        *(_QWORD *)v107 = a1 + 328;
        sub_100041CE0((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)v107);
        sub_1001B3AF0();
      }
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v93 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_FAULT, "BATCH:unsupported platform", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      *(_WORD *)v107 = 0;
      LODWORD(v104) = 2;
      v94 = (_BYTE *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "BATCH:unsupported platform", v107, v104);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n");
      goto LABEL_137;
    case 0x11u:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v61 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLMM,RunMapMatching is turned on", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        *(_WORD *)v107 = 0;
        LODWORD(v104) = 2;
        v103 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,RunMapMatching is turned on", v107, v104);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v103);
        if (v103 != buf)
          free(v103);
      }
      *(_BYTE *)(a1 + 668) = 1;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 184))(*(_QWORD *)(a1 + 288));
      return 1;
    case 0x16u:
      if (*(_DWORD *)(a1 + 320))
      {
        *(_QWORD *)buf = a1 + 320;
        v62 = sub_100041CE0((uint64_t **)(a1 + 264), (int *)(a1 + 320), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
        v64 = v62[1];
        v63 = (void *)v62[2];
        v65 = 22;
LABEL_109:
        objc_msgSend(v63, "register:forNotification:registrationInfo:", v64, v65, 0);
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214C600);
        v95 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "@WsbReg, kNotificationWifiLocationBatched unsupported", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10214C600);
          *(_WORD *)v107 = 0;
          LODWORD(v104) = 2;
          v94 = (_BYTE *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WsbReg, kNotificationWifiLocationBatched unsupported", v107, v104);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n");
LABEL_137:
          if (v94 != buf)
            free(v94);
        }
      }
      return 1;
    case 0x1Cu:
      v66 = 0;
      v67 = *(_DWORD *)(a1 + 344);
      LODWORD(v111[0]) = *(_DWORD *)(a1 + 332);
      HIDWORD(v111[0]) = v67;
      do
      {
        if (*(_DWORD *)((char *)v111 + v66))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v68 = v6[5];
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            v69 = *a2;
            v70 = sub_1000B5C9C(a1 + 240, (int *)((char *)v111 + v66));
            v73 = v70[1];
            v71 = v70 + 1;
            v72 = v73;
            if (*((char *)v71 + 23) >= 0)
              v72 = (uint64_t)v71;
            *(_DWORD *)buf = 67240450;
            *(_DWORD *)&buf[4] = v69;
            v6 = &qword_1022A0000;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = v72;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "registering notification,%{public}d,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v75 = v6[5];
            v76 = *a2;
            v77 = sub_1000B5C9C(a1 + 240, (int *)((char *)v111 + v66));
            v80 = v77[1];
            v78 = v77 + 1;
            v79 = v80;
            if (*((char *)v78 + 23) >= 0)
              v79 = (uint64_t)v78;
            *(_DWORD *)v107 = 67240450;
            *(_DWORD *)&v107[4] = v76;
            *(_WORD *)&v107[8] = 2082;
            *(_QWORD *)&v107[10] = v79;
            LODWORD(v104) = 18;
            v81 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v75, 2, "registering notification,%{public}d,location provider,%{public}s", v107, v104);
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v81);
            if (v81 != buf)
              free(v81);
            v6 = &qword_1022A0000;
          }
          v74 = sub_1000B5C9C(a1 + 264, (int *)((char *)v111 + v66));
          objc_msgSend(*(id *)(*v74 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*v74 + 8), 28, 0);
        }
        v66 += 4;
      }
      while (v66 != 8);
      if (*(_DWORD *)(a1 + 328))
      {
        v87 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
        objc_msgSend(*(id *)(*v87 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*v87 + 8), 28, 0);
      }
      v88 = *(_QWORD *)(a1 + 288);
      if (!v88)
        return 1;
      v89 = *(void (**)(void))(*(_QWORD *)v88 + 320);
LABEL_119:
      v89();
      return 1;
    case 0x1Du:
      if (*(_DWORD *)(a1 + 328))
      {
        v90 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
        objc_msgSend(*(id *)(*v90 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*v90 + 8), 29, 0);
      }
      if (*(_DWORD *)(a1 + 336))
      {
        v91 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 336));
        objc_msgSend(*(id *)(*v91 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*v91 + 8), 29, 0);
      }
      v89 = *(void (**)(void))(**(_QWORD **)(a1 + 288) + 312);
      goto LABEL_119;
    case 0x22u:
      if (!*(_DWORD *)(a1 + 328))
        return 1;
      v82 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
      v64 = *(_QWORD *)(*v82 + 8);
      v63 = *(void **)(*v82 + 16);
      v65 = 34;
      goto LABEL_109;
    case 0x23u:
      if (!*(_DWORD *)(a1 + 328))
        return 1;
      v83 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
      v64 = *(_QWORD *)(*v83 + 8);
      v63 = *(void **)(*v83 + 16);
      v65 = 35;
      goto LABEL_109;
    case 0x28u:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v84 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"register kNotificationExternalLocationDisablementAssert\"}", buf, 0x12u);
      }
      if (!*(_DWORD *)(a1 + 336))
        return 1;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v85 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"registering kNotificationExternalLocationDisablementAssert w/ accessory provider\"}", buf, 0x12u);
      }
      v86 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 336));
      v64 = *(_QWORD *)(*v86 + 8);
      v63 = *(void **)(*v86 + 16);
      v65 = 40;
      goto LABEL_109;
    default:
      return 1;
  }
}

void sub_1001B3ABC()
{
  sub_1001B3AF0();
}

void sub_1001B3AF0()
{
  operator new();
}

uint64_t sub_1001B3B80()
{
  return 1;
}

id sub_1001B3B88(uint64_t a1)
{
  id result;
  int v3;
  double v4;
  double v5;

  result = objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 3);
  if (*(double *)(a1 + 208) != 1.79769313e308
    && (v3 = (int)result,
        (result = objc_msgSend(*(id *)(a1 + 176), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey"))) != 0)&& (result = objc_msgSend(result, "doubleValue"), v3))
  {
    v5 = v4;
    if (!*(_BYTE *)(a1 + 88) || *(double *)(a1 + 80) != v4)
    {
      result = objc_msgSend((id)sub_1001B7D80(a1), "takeAccuracyEnablementAssertionForClient:withDesiredAccuracy:", *(_QWORD *)(a1 + 48), v4);
      *(double *)(a1 + 80) = v5;
      *(_BYTE *)(a1 + 88) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    result = objc_msgSend((id)sub_1001B7D80(a1), "releaseAccuracyEnablementAssertionForClient:", *(_QWORD *)(a1 + 48));
    *(_QWORD *)(a1 + 80) = 0x7FF0000000000000;
    *(_BYTE *)(a1 + 88) = 0;
  }
  return result;
}

void sub_1001B3C4C(uint64_t a1)
{
  id v2;
  double v3;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  int v7;
  CLStatusBarAssertion *v8;
  uint64_t v9;
  BOOL v10;
  const char *v11;
  NSObject *v12;
  id v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  void **v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  const char *v31;
  id v32;
  uint64_t v33;
  int v34;
  int v35;
  id v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  uint8_t buf[4];
  id v50;
  __int16 v51;
  int v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  const char *v60;
  __int16 v61;
  const char *v62;

  v2 = objc_msgSend(*(id *)(a1 + 24), "description");
  v3 = *(double *)(a1 + 208);
  v4 = v3 != 1.79769313e308 && *(_BYTE *)(a1 + 89) && *(_BYTE *)(a1 + 90) != 0;
  v5 = *(unsigned int *)(a1 + 44);
  v6 = sub_1001B40B8(a1);
  v7 = v6;
  if (v4 == (*(_QWORD *)(a1 + 96) != 0))
    goto LABEL_14;
  if ((v4 & v6) != 1)
  {
    if (!v4)
    {
      v18 = sub_10022E420(a1, 0);
      v19 = objc_msgSend(*(id *)(a1 + 8), "silo");
      v28 = _NSConcreteStackBlock;
      v29 = 3221225472;
      v30 = sub_1011666AC;
      v31 = (const char *)&unk_10217CC78;
      v34 = v5;
      v32 = v2;
      v33 = v18;
      objc_msgSend(v19, "afterInterval:async:", &v28, 1.0);
      v11 = "Releasing";
      goto LABEL_15;
    }
LABEL_14:
    v11 = "None";
    goto LABEL_15;
  }
  v8 = -[CLStatusBarAssertion initWithPid:name:queue:backgrounded:registration:]([CLStatusBarAssertion alloc], "initWithPid:name:queue:backgrounded:registration:", v5, objc_msgSend(*(id *)(a1 + 24), "description"), objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"), *(double *)(a1 + 224) != -1.0, objc_msgSend(*(id *)(a1 + 16), "registrationResult"));
  v9 = sub_10022E420(a1, (uint64_t)v8);
  if (v8)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (!v10)
    sub_101942274();
  v11 = "Acquiring";
LABEL_15:
  sub_1001B40C8(a1);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v12 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v13 = objc_msgSend(v2, "UTF8String");
    v14 = "N";
    if (*(_BYTE *)(a1 + 89))
    {
      if (*(_BYTE *)(a1 + 90))
        v15 = "Y";
      else
        v15 = "N";
    }
    else
    {
      v15 = "N";
    }
    *(_DWORD *)buf = 136316674;
    v50 = v13;
    v51 = 1024;
    if (v3 == 1.79769313e308)
      v16 = "N";
    else
      v16 = "Y";
    v52 = v5;
    if (v4)
      v17 = "Y";
    else
      v17 = "N";
    v53 = 2080;
    if (v7)
      v14 = "Y";
    v54 = v15;
    v55 = 2080;
    v56 = v16;
    v57 = 2080;
    v58 = v17;
    v59 = 2080;
    v60 = v14;
    v61 = 2080;
    v62 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#visibility For %s (PID:%d)  Background:%s  Started:%s  > Needed:%s  Eligible:%s  Action:%s", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v20 = qword_1022A01C8;
    v21 = objc_msgSend(v2, "UTF8String");
    v22 = "N";
    if (*(_BYTE *)(a1 + 89))
    {
      if (*(_BYTE *)(a1 + 90))
        v23 = "Y";
      else
        v23 = "N";
    }
    else
    {
      v23 = "N";
    }
    v35 = 136316674;
    if (v3 == 1.79769313e308)
      v24 = "N";
    else
      v24 = "Y";
    v36 = v21;
    v37 = 1024;
    if (v4)
      v25 = "Y";
    else
      v25 = "N";
    v38 = v5;
    if (v7)
      v22 = "Y";
    v39 = 2080;
    v40 = v23;
    v41 = 2080;
    v42 = v24;
    v43 = 2080;
    v44 = v25;
    v45 = 2080;
    v46 = v22;
    v47 = 2080;
    v48 = v11;
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "#visibility For %s (PID:%d)  Background:%s  Started:%s  > Needed:%s  Eligible:%s  Action:%s", (const char *)&v35, 68, v27, (const char *)v28, (const char *)v29, (const char *)v30, v31);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::updateVisibilityAssertion()", "%s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
}

uint64_t sub_1001B40B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32));
}

id sub_1001B40C8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  id result;
  void *__p[14];

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(_BYTE *)(a1 + 91))
      {
LABEL_4:
        v3 = 1;
LABEL_10:
        objc_msgSend(v2, "setDesiredEnablementState:", v3);
        goto LABEL_11;
      }
      if ((objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceType:", 13) & 1) == 0
        && objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 4))
      {
        v2 = *(void **)(a1 + 96);
        goto LABEL_4;
      }
      v2 = *(void **)(a1 + 96);
    }
    v3 = 0;
    goto LABEL_10;
  }
LABEL_11:
  v4 = *(_QWORD *)(a1 + 104) != 0;
  result = objc_msgSend(*(id *)(a1 + 96), "isEnabled");
  if (v4 != (_DWORD)result)
  {
    __p[13] = 0;
    if ((_DWORD)result)
    {
      sub_1015A2E04(__p, "Ongoing visibility assertion");
      sub_100FFB244(a1, (uint64_t)__p, 4);
      operator new();
    }
    result = *(id *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    if (result)
    {
      sub_100C1EE6C(result);
      operator delete();
    }
  }
  return result;
}

void sub_1001B41E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  operator delete();
}

uint64_t sub_1001B4248(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t result;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  if (objc_msgSend(*(id *)(a1 + 112), "inUseLevelIsAtLeast:", 5))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v2 = qword_1022A01C8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      return 1;
    v3 = *(_QWORD *)(a1 + 48);
    v10 = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v3;
    v4 = "{\"msg%{public}.0s\":\"Allowing process assertion due to foreground-ish status\", \"ClientKeyPath\":%{public, l"
         "ocation:escape_only}@}";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v10, 0x1Cu);
    return 1;
  }
  if (sub_10004D4FC(*(_QWORD *)(a1 + 16), a1))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v2 = qword_1022A01C8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      return 1;
    v5 = *(_QWORD *)(a1 + 48);
    v10 = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v5;
    v4 = "{\"msg%{public}.0s\":\"Allowing process assertion due to client manager.\", \"ClientKeyPath\":%{public, locatio"
         "n:escape_only}@}";
    goto LABEL_11;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  v8 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2114;
    v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Denying process assertion\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_1001B4478(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  _BYTE v32[14];
  __int16 v33;
  uint64_t v34;
  RBSDomainAttribute *v35;

  *(_DWORD *)(a1 + 120) |= a2;
  if (objc_opt_class(RBSAssertion, a2))
  {
    v3 = *(_QWORD *)(a1 + 112);
    if (*(_DWORD *)(a1 + 120) && *(_BYTE *)(a1 + 89))
    {
      v4 = *(_QWORD *)(a1 + 112);
      if (*(_BYTE *)(a1 + 90))
      {
        v5 = sub_1001B40B8(a1);
        v4 = *(_QWORD *)(a1 + 112);
        if (v5)
        {
          if (v4)
            goto LABEL_22;
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
          v6 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            v7 = *(_DWORD *)(a1 + 44);
            v8 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)buf = 68289538;
            v28 = 0;
            v29 = 2082;
            v30 = "";
            v31 = 1026;
            *(_DWORD *)v32 = v7;
            *(_WORD *)&v32[4] = 2114;
            *(_QWORD *)&v32[6] = v8;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"initializing process assertion to support background location for client\", \"pid\":%{public}u, \"Client\":%{public, location:escape_only}@}", buf, 0x22u);
          }
          v35 = +[RBSDomainAttribute attributeWithDomain:name:](RBSDomainAttribute, "attributeWithDomain:name:", CFSTR("com.apple.locationd"), CFSTR("Location"));
          v9 = objc_msgSend(objc_alloc((Class)RBSAssertion), "initWithExplanation:target:attributes:", CFSTR("Location subscription"), +[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", *(unsigned int *)(a1 + 44)), +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1));
          *(_QWORD *)(a1 + 112) = v9;
          v26 = 0;
          if ((objc_msgSend(v9, "acquireWithError:", &v26) & 1) == 0)
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
            v10 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
            {
              v11 = *(_DWORD *)(a1 + 44);
              v12 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)buf = 68289794;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 1026;
              *(_DWORD *)v32 = v11;
              *(_WORD *)&v32[4] = 2114;
              *(_QWORD *)&v32[6] = v12;
              v33 = 2114;
              v34 = v26;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't initialize process assertion for client\", \"pid\":%{public}u, \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x2Cu);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
            }
            v13 = qword_1022A01D8;
            if (os_signpost_enabled((os_log_t)qword_1022A01D8))
            {
              v14 = *(_DWORD *)(a1 + 44);
              v15 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)buf = 68289794;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 1026;
              *(_DWORD *)v32 = v14;
              *(_WORD *)&v32[4] = 2114;
              *(_QWORD *)&v32[6] = v15;
              v33 = 2114;
              v34 = v26;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't initialize process assertion for client", "{\"msg%{public}.0s\":\"Couldn't initialize process assertion for client\", \"pid\":%{public}u, \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", buf, 0x2Cu);
            }
          }
          v4 = *(_QWORD *)(a1 + 112);
        }
      }
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 112);
    }
    if (!v4)
      goto LABEL_37;
LABEL_22:
    if (*(_DWORD *)(a1 + 120) == 3)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v16 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        goto LABEL_37;
      v17 = *(_DWORD *)(a1 + 44);
      v18 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 68289538;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 1026;
      *(_DWORD *)v32 = v17;
      *(_WORD *)&v32[4] = 2114;
      *(_QWORD *)&v32[6] = v18;
      v19 = "{\"msg%{public}.0s\":\"Client is performing batch location, allowing idle sleep.\", \"pid\":%{public}u, \"Cl"
            "ient\":%{public, location:escape_only}@}";
      goto LABEL_36;
    }
    v20 = qword_1022A01D0;
    if ((*(_DWORD *)(a1 + 120) & 3) == 2)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v21 = qword_1022A01D8;
      if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      v22 = *(_QWORD *)(a1 + 24);
      v23 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)buf = 68289538;
      v28 = 0;
      v29 = 2082;
      v30 = "";
      v31 = 2114;
      *(_QWORD *)v32 = v22;
      *(_WORD *)&v32[8] = 1026;
      *(_DWORD *)&v32[10] = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Client is performing batch without location.\", \"Client\":%{public, location:escape_only}@, \"pid\":%{public}u}", buf, 0x22u);
      v20 = qword_1022A01D0;
    }
    if (v20 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
LABEL_34:
    v16 = qword_1022A01D8;
    if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      goto LABEL_37;
    v24 = *(_DWORD *)(a1 + 44);
    v25 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 68289538;
    v28 = 0;
    v29 = 2082;
    v30 = "";
    v31 = 1026;
    *(_DWORD *)v32 = v24;
    *(_WORD *)&v32[4] = 2114;
    *(_QWORD *)&v32[6] = v25;
    v19 = "{\"msg%{public}.0s\":\"Client is not performing batch location, preventing task suspend.\", \"pid\":%{public}u"
          ", \"Client\":%{public, location:escape_only}@}";
LABEL_36:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, v19, buf, 0x22u);
LABEL_37:
    if ((v3 != 0) != (*(_QWORD *)(a1 + 112) != 0))
      sub_100FFB234(a1);
  }
}

uint64_t sub_1001B49DC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 120))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24), a2, *(_QWORD *)(a1 + 16));
}

const char *sub_1001B49F8(unsigned int a1)
{
  NSObject *v2;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  if (a1 < 0x30)
    return off_1021B7508[a1];
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021B7688);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "toString,Invalid CLLocationProvider notification,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021B7688);
    v5[0] = 67109120;
    v5[1] = a1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "toString,Invalid CLLocationProvider notification,%d", v5);
    sub_100512490("Generic", 1, 0, 0, "const char *CLLocationProvider_Type::toString(CLLocationProvider_Type::Notification)", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return "Unknown";
}

id sub_1001B4BC0(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = sub_1001B17F0(a1);
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  v4 = *(void **)(*(_QWORD *)v3 + 16);
  if (a2)
    return objc_msgSend(v4, "register:forNotification:registrationInfo:", v5, 34, 0);
  else
    return objc_msgSend(v4, "unregister:forNotification:", v5, 34);
}

id sub_1001B4C00(uint64_t a1, int a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = sub_1001B17F0(a1);
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  v4 = *(void **)(*(_QWORD *)v3 + 16);
  if (a2)
    return objc_msgSend(v4, "register:forNotification:registrationInfo:", v5, 35, 0);
  else
    return objc_msgSend(v4, "unregister:forNotification:", v5, 35);
}

uint64_t sub_1001B4C40(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  int v18;
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  int v33;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKey:", CFSTR("kCLConnectionMessageDistanceFilterKey")), "doubleValue");
  v3 = v2;
  objc_msgSend(objc_msgSend(*(id *)(a1 + 176), "objectForKey:", CFSTR("kCLConnectionMessageDesiredAccuracyKey")), "doubleValue");
  v5 = v4;
  v6 = objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 3) ^ 1;
  v7 = objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceType:", 17);
  v8 = v7;
  if (v3 > 0.0 || (v9 = 0, v5 >= 1000.0) && v5 <= 6383135.0)
  {
    v9 = v6 & v7;
    if (!*(_BYTE *)(a1 + 58))
    {
      if ((_DWORD)v9)
      {
        v9 = 1;
        if ((sub_1001B1900(a1) & 1) == 0)
        {
          *(_BYTE *)(a1 + 58) = 1;
          *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
          v10 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
          {
            v11 = *(_QWORD *)(a1 + 24);
            v12 = *(double *)(a1 + 64);
            v18 = 68289538;
            v19 = 0;
            v20 = 2082;
            v21 = "";
            v22 = 2114;
            v23 = v11;
            v24 = 2050;
            v25 = v12;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver LossTracking enabled\", \"Client\":%{public, location:escape_only}@, \"LossTrackingStartTime\":\"%{public}f\"}", (uint8_t *)&v18, 0x26u);
          }
          v9 = 1;
        }
      }
    }
  }
  if ((_os_feature_enabled_impl("CoreLocation", "CBLSPowerSaver") & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v14 = *(_QWORD *)(a1 + 24);
      v18 = 68290562;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2114;
      v23 = v14;
      v24 = 2050;
      v25 = v3;
      v26 = 2050;
      v27 = v5;
      v28 = 1026;
      v29 = v6;
      v30 = 1026;
      v31 = v8;
      v32 = 1026;
      v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver should release processAssertion\", \"Client\":%{public, location:escape_only}@, \"distanceFilter\":\"%{public}f\", \"desiredAccuracy\":\"%{public}f\", \"inUseLevelLessThanDecayingUserEng\":%{public}hhd, \"backgroundLaunchable\":%{public}hhd, \"eligibleForReleasingProcessAssertion\":%{public}hhd}", (uint8_t *)&v18, 0x42u);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_QWORD *)(a1 + 24);
      v18 = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2114;
      v23 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ineligible for releasing process assertion - #cblsPowerSaver feature-flag not enabled\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v18, 0x1Cu);
    }
    return 0;
  }
  return v9;
}

CLOSTransaction *sub_1001B4F70(const void *a1, const char *a2)
{
  char __str[47];

  snprintf(__str, 0x2FuLL, "CLLS:%p.%s", a1, a2);
  return -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", __str);
}

uint64_t sub_1001B51F8(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 152))
    sub_1001B7DEC();
  return a1 + 152;
}

void sub_1001B527C(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  _BYTE __p[12];
  __int16 v15;
  int v16;
  char v17;

  if (*(_DWORD *)(a1 + 200) != (_DWORD)a2)
  {
    if ((_DWORD)a2 != -1)
    {
      sub_1015A2E04(__p, "com.apple.locationd.spectator");
      v4 = sub_1002255E0(a1);
      v5 = v4;
      if (v17 < 0)
      {
        operator delete(*(void **)__p);
        if ((v5 & 1) == 0)
          return;
      }
      else if ((v4 & 1) == 0)
      {
        return;
      }
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)__p = 138543618;
      *(_QWORD *)&__p[4] = v7;
      v15 = 1026;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "client '%{public}@' updating RhythmicGnss with CLRhythmicGnssWakeMode, %{public}.1d", __p, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v8 = *(_QWORD *)(a1 + 24);
      v10 = 138543618;
      v11 = v8;
      v12 = 1026;
      v13 = a2;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "client '%{public}@' updating RhythmicGnss with CLRhythmicGnssWakeMode, %{public}.1d", &v10, 18);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::updateRhythmicGNSS(CLRhythmicGnssWakeMode)", "%s\n", v9);
      if (v9 != __p)
        free(v9);
    }
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLGnssProvider")), "addRhythmicGnssClient:", a2);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLGnssProvider")), "removeRhythmicGnssClient:", *(unsigned int *)(a1 + 200));
    *(_DWORD *)(a1 + 200) = a2;
  }
}

void sub_1001B54D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001B54FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_1001A5BAC(*(_QWORD *)(a1 + 16), a2, a3, a4);
}

_QWORD *sub_1001B5504@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;

  v3 = (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "clientAnchor"), "UTF8String");
  if (v3)
    v4 = v3;
  else
    v4 = "";
  return sub_1015A2E04(a2, v4);
}

BOOL sub_1001B5540(uint64_t a1)
{
  signed int v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BOOL4 v15;

  v2 = objc_msgSend(*(id *)(a1 + 16), "inUseLevel");
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_DWORD *)(a1 + 44);
    v7[0] = 68289794;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v4;
    v12 = 1026;
    v13 = v5;
    v14 = 1026;
    v15 = v2 < 5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"canBePaused()\", \"Client\":%{public, location:escape_only}@, \"pid\":%{public}d, \"flag\":%{public}hhd}", (uint8_t *)v7, 0x28u);
  }
  return v2 < 5;
}

uint64_t sub_1001B5664(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v6;
  void *__p;
  char v9;

  v6 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v6 = off_10213EEF8;
  v6[6] = 0;
  v6[7] = 0;
  *(_BYTE *)(a1 + 64) = +[CLFenceManagerAdapter isSupported](CLFenceManagerAdapter, "isSupported");
  *(_BYTE *)(a1 + 65) = 0;
  sub_100119F3C(a1 + 72);
  sub_1015A2E04(&__p, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"), "UTF8String"));
  if (*(_QWORD *)sub_1001B5A8C(a1))
    sub_1001B5954();
  if (*(_BYTE *)(a1 + 64))
  {
    sub_1001B5BF8(a1);
    sub_1001B5954();
  }
  if (v9 < 0)
    operator delete(__p);
  return a1;
}

void sub_1001B58AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  sub_10011A5A8(v16);
  v19 = *(_QWORD *)(v15 + 56);
  *(_QWORD *)(v15 + 56) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v17;
  *v17 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  sub_10002FA68(v15);
  _Unwind_Resume(a1);
}

void sub_1001B5954()
{
  operator new();
}

void sub_1001B5A08()
{
  operator delete();
}

uint64_t sub_1001B5A2C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *(_QWORD *)a1 = off_102198B20;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 40) = 1;
  return a1;
}

uint64_t sub_1001B5A8C(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 48))
    sub_1001B5B10();
  return a1 + 48;
}

void sub_1001B5B10()
{
  operator new();
}

void sub_1001B5BBC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1001B5BF8(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 56))
    sub_1001B5C7C();
  return a1 + 56;
}

void sub_1001B5C7C()
{
  operator new();
}

void sub_1001B5D28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1001B5D64(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021AB118;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_1001B5E38(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10215EB08;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

_QWORD *sub_1001B6158(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;

  result = (_QWORD *)sub_1001B6190(a1, 0, a2, a3, a4, a5);
  *result = off_10214EEC8;
  return result;
}

uint64_t sub_1001B6190(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10213E550;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1001B6264(uint64_t a1, CLConnection *a2, uint64_t a3, void *a4, void *a5)
{
  NSMutableDictionary *v8;
  _QWORD *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  NSObject *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  os_activity_scope_state_s v20;
  uint8_t buf[8];
  __int16 v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  *(_QWORD *)a1 = off_102174980;
  *(_QWORD *)(a1 + 8) = &off_102174A58;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = objc_msgSend(a4, "silo");
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 71) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = (id)sub_1001B6DB8(4);
  *(_BYTE *)(a1 + 120) = 1;
  *(_QWORD *)(a1 + 128) = a1 + 128;
  *(_QWORD *)(a1 + 136) = a1 + 128;
  *(_QWORD *)(a1 + 144) = 0;
  v8 = objc_opt_new(NSMutableDictionary);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 152) = v8;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 194) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = a2;
  *(_QWORD *)(a1 + 272) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_BYTE *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 320) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 360) = 1065353216;
  *(_DWORD *)(a1 + 368) = 65537;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = off_102141E98;
  v9 = operator new(0x20uLL);
  v9[2] = 0;
  *v9 = off_102141ED0;
  v9[1] = 0;
  *((_DWORD *)v9 + 6) = 31337;
  *(_QWORD *)(a1 + 408) = v9 + 3;
  *(_QWORD *)(a1 + 416) = v9;
  v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient(ctor)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v10, &v20);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v11 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2082;
    v25 = "activity";
    v26 = 2050;
    v27 = (const char *)a1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient(ctor)\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v12 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290562;
    *(_DWORD *)&buf[4] = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2082;
    v25 = "state_transition";
    v26 = 2082;
    v27 = "DaemonClient";
    v28 = 2050;
    v30 = 2082;
    v29 = a1;
    v31 = "lifecycle";
    v32 = 2050;
    v33 = 0;
    v34 = 2050;
    v35 = a1;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"state transition\", \"event\":%{public, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"id\":\"%{public}p\", \"property\":%{public, location:escape_only}s, \"old\":\"%{public}p\", \"new\":\"%{public}p\"}", buf, 0x4Eu);
  }
  *(_DWORD *)(a1 + 272) = CLConnection::getRemotePid(a2);
  sub_1001B6D30(a1);
  CLConnection::start(*(CLConnection **)(a1 + 264));
  sub_1001A1008(a1, a5);
  if (!sub_1001B6C9C(*(unsigned int *)(a1 + 272), v13))
    goto LABEL_22;
  sub_1015A2E04(buf, "com.apple.locationd.prompt_from_background");
  v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)a1 + 40))(a1, buf);
  v15 = v14;
  if (SBYTE3(v25) < 0)
  {
    operator delete(*(void **)buf);
    if (v15)
    {
LABEL_12:
      *(_BYTE *)(a1 + 368) = 1;
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v16 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
      {
        v17 = *(const char **)(a1 + 48);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        v22 = 2082;
        v23 = "";
        v24 = 2114;
        v25 = v17;
        v26 = 2050;
        v27 = (const char *)a1;
        v28 = 1026;
        LODWORD(v29) = 1;
        v18 = "{\"msg%{public}.0s\":\"#widgetkit entitled to show location prompts\", \"ClientKeyPath\":%{public, locatio"
              "n:escape_only}@, \"this\":\"%{public}p\", \"isWidgetKitExtension:\":%{public}hhd}";
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, v18, buf, 0x2Cu);
        goto LABEL_22;
      }
      goto LABEL_22;
    }
  }
  else if (v14)
  {
    goto LABEL_12;
  }
  *(_BYTE *)(a1 + 368) = 0;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v16 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v19 = *(const char **)(a1 + 48);
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v22 = 2082;
    v23 = "";
    v24 = 2114;
    v25 = v19;
    v26 = 2050;
    v27 = (const char *)a1;
    v28 = 1026;
    LODWORD(v29) = 1;
    v18 = "{\"msg%{public}.0s\":\"#widgetkit location prompts disabled\", \"ClientKeyPath\":%{public, location:escape_onl"
          "y}@, \"this\":\"%{public}p\", \"isWidgetKitExtension:\":%{public}hhd}";
    goto LABEL_21;
  }
LABEL_22:
  sub_1001B6870(a1);
}

void sub_1001B6788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_activity_scope_state_s a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char **v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a15 < 0)
    operator delete(__p);
  os_activity_scope_leave(&a9);
  sub_100090A0C((_QWORD *)(v17 + 232));
  sub_100090BB8(v17 + 160);
  sub_100090B34(v18);
  v22 = v15[30];
  v15[30] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v15[29];
  v15[29] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v15[28];
  v15[28] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v15[27];
  v15[27] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *v20;
  *v20 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  sub_100090AE4(v17, *v19);
  sub_1001A5CBC(v16);
  _Unwind_Resume(a1);
}

void sub_1001B6870(uint64_t a1)
{
  CLDaemonClientAdapter *v2;

  v2 = -[CLDaemonClientAdapter initWithDaemonClient:]([CLDaemonClientAdapter alloc], "initWithDaemonClient:", a1);
  *(_QWORD *)(a1 + 40) = v2;
  -[CLDaemonClientAdapter setValid:](v2, "setValid:", 1);
  sub_1001B6924();
}

void sub_1001B6924()
{
  operator new();
}

void sub_1001B69D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1001B6A0C()
{
  operator new();
}

void sub_1001B6AB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1001B6AF4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102148FB8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_1001B6BC8(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_1021547E8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_1001B6C9C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  id v5;
  uint64_t v6;

  result = objc_opt_class(RBSProcessIdentifier, a2);
  if (result)
  {
    result = objc_opt_class(RBSProcessHandle, v4);
    if (result)
    {
      v6 = 0;
      v5 = objc_msgSend(objc_msgSend(+[RBSProcessHandle handleForIdentifier:error:](RBSProcessHandle, "handleForIdentifier:error:", +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", a1), &v6), "bundle"), "extensionPointIdentifier");
      return v5 && (objc_msgSend(v5, "isEqualToString:", CFSTR("com.apple.widgetkit-extension")) & 1) != 0;
    }
  }
  return result;
}

uint64_t sub_1001B6D30(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];

  if (qword_1023071C8 != -1)
    dispatch_once(&qword_1023071C8, &stru_102174A78);
  v2 = *(_QWORD *)(a1 + 264);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001B8CCC;
  v4[3] = &unk_10213D510;
  v4[4] = a1;
  return CLConnection::setDefaultMessageHandler(v2, v4);
}

uint64_t sub_1001B6DB8(int a1)
{
  _QWORD v3[6];

  v3[4] = 0;
  v3[5] = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007B61E0;
  v3[3] = &unk_102143528;
  if (qword_102304A20 != -1)
    dispatch_once(&qword_102304A20, v3);
  if (a1 == 4)
    return qword_102304A18;
  if (a1 == 5)
    return qword_102304A10;
  return 0;
}

void sub_1001B6EA4(void *a1, uint64_t a2)
{
  CLDaemonStatsFetchLocationSystemStateAdapter *v4;
  NSObject *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD block[7];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  dispatch_group_t v24;
  _QWORD v25[6];
  int v26;
  char v27;
  int v28;
  char v29;
  uint64_t v30;

  v4 = objc_alloc_init(CLDaemonStatsFetchLocationSystemStateAdapter);
  v5 = dispatch_group_create();
  v25[0] = 0;
  v25[1] = v25;
  v25[2] = 0x4812000000;
  v25[3] = sub_100206D14;
  v25[4] = nullsub_54;
  v25[5] = &unk_102080316;
  v26 = 0;
  v27 = 0;
  v28 = 1000;
  v29 = 0;
  v30 = 0;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3812000000;
  v23[3] = sub_10073CE68;
  v23[4] = sub_10073CE78;
  v24 = v5;
  dispatch_group_enter(v5);
  v6 = objc_msgSend(objc_msgSend(a1, "vendor"), "proxyForService:", CFSTR("CLTelephonyService"));
  objc_msgSend(v6, "registerDelegate:inSilo:", v4, objc_msgSend(a1, "silo"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100209F40;
  v22[3] = &unk_102150C58;
  v22[4] = v25;
  v22[5] = v23;
  objc_msgSend(v6, "fetchIsCellAvailableWithReply:", v22);
  v7 = objc_msgSend(objc_msgSend(a1, "vendor"), "proxyForService:", CFSTR("CLWifiService"));
  objc_msgSend(v7, "registerDelegate:inSilo:", v4, objc_msgSend(a1, "silo"));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1002092CC;
  v21[3] = &unk_102150C58;
  v21[4] = v25;
  v21[5] = v23;
  objc_msgSend(v7, "fetchIsWifiAvailableWithReply:", v21);
  v8 = objc_msgSend(objc_msgSend(a1, "vendor"), "proxyForService:", CFSTR("CLDataProtectionManager"));
  objc_msgSend(v8, "registerDelegate:inSilo:", v4, objc_msgSend(a1, "silo"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100209F0C;
  v20[3] = &unk_102150C80;
  v20[4] = v25;
  v20[5] = v23;
  objc_msgSend(v8, "fetchDataAvailabilityWithReply:", v20);
  v9 = objc_msgSend(objc_msgSend(a1, "vendor"), "proxyForService:", CFSTR("CLDaemonStatus"));
  objc_msgSend(v9, "registerDelegate:inSilo:", v4, objc_msgSend(a1, "silo"));
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100209EFC;
  v19[3] = &unk_102150C58;
  v19[4] = v25;
  v19[5] = v23;
  objc_msgSend(v9, "fetchIsAirplaneModeEnabledWithReply:", v19);
  v10 = objc_msgSend(objc_msgSend(a1, "vendor"), "proxyForService:", CFSTR("CLAccessoryLocationProvider"));
  objc_msgSend(v10, "registerDelegate:inSilo:", v4, objc_msgSend(a1, "silo"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100209EEC;
  v18[3] = &unk_102150C58;
  v18[4] = v25;
  v18[5] = v23;
  objc_msgSend(v10, "fetchIsAccessoryConnectedWithReply:", v18);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100209EDC;
  v17[3] = &unk_102150C80;
  v17[4] = v25;
  v17[5] = v23;
  objc_msgSend(v9, "fetchReachabilityWithReply:", v17);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100209ECC;
  v16[3] = &unk_102150C58;
  v16[4] = v25;
  v16[5] = v23;
  objc_msgSend(v9, "fetchIsBatteryConnectedWithReply:", v16);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100209EAC;
  v15[3] = &unk_102150CA8;
  v15[4] = v25;
  v15[5] = v23;
  objc_msgSend(v9, "fetchWirelessModemClientCountWithReply:", v15);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100209E90;
  v14[3] = &unk_102150C58;
  v14[4] = v25;
  v14[5] = v23;
  objc_msgSend(v7, "fetchIsAssociatedWithReply:", v14);
  v11 = objc_msgSend(objc_msgSend(a1, "vendor"), "proxyForService:", CFSTR("CLBluetoothService"));
  objc_msgSend(v11, "registerDelegate:inSilo:", v4, objc_msgSend(a1, "silo"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100209F24;
  v13[3] = &unk_102150C58;
  v13[4] = v25;
  v13[5] = v23;
  objc_msgSend(v11, "fetchHasConnectedDevicesWithReply:", v13);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100061CCC;
  block[3] = &unk_102150CD0;
  block[6] = v25;
  block[4] = v5;
  block[5] = a2;
  dispatch_group_notify(v5, (dispatch_queue_t)objc_msgSend(objc_msgSend(a1, "silo"), "queue"), block);
  _Block_object_dispose(v23, 8);
  if (v24)
    dispatch_group_leave(v24);
  _Block_object_dispose(v25, 8);
}

void sub_1001B7304(_Unwind_Exception *a1)
{
  uint64_t v1;
  NSObject *v3;

  _Block_object_dispose((const void *)(v1 - 232), 8);
  v3 = *(NSObject **)(v1 - 184);
  if (v3)
    dispatch_group_leave(v3);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

id sub_1001B7388(uint64_t a1)
{
  id v2;
  int v4;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLLocationController"));
  v4 = 0;
  objc_msgSend(v2, "setGpsAssistantHasClients:forNotification:", sub_1001B7864(a1, &v4, 1) != 0, 0);
  v4 = 1;
  objc_msgSend(v2, "setGpsAssistantHasClients:forNotification:", sub_1001B7864(a1, &v4, 1) != 0, 1);
  v4 = 5;
  objc_msgSend(v2, "setGpsAssistantHasClients:forNotification:", sub_1001B7864(a1, &v4, 1) != 0, 5);
  v4 = 4;
  return objc_msgSend(v2, "setGpsAssistantHasClients:forNotification:", sub_1001B7864(a1, &v4, 1) != 0, 4);
}

uint64_t sub_1001B7478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;

  *(double *)(a2 + 3440) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 184))(*(_QWORD *)(a1 + 120));
  objc_msgSend(*(id *)(a1 + 136), "nextFireTime");
  *(_QWORD *)(a2 + 3448) = v6;
  v12 = 0;
  v7 = sub_1001B7864(a1, &v12, 1);
  v12 = 3;
  v8 = sub_1001B7864(a1, &v12, 1);
  v12 = 4;
  v9 = sub_1001B7864(a1, &v12, 1);
  v12 = 22;
  v10 = sub_1001B7864(a1, &v12, 1);
  sub_1001B79AC(a1);
  *(_DWORD *)(a2 + 3456) = v7;
  *(_DWORD *)(a2 + 3460) = v8;
  *(_DWORD *)(a2 + 3464) = v9;
  *(_DWORD *)(a2 + 3468) = v10;
  *(_DWORD *)(a2 + 3472) = 1176256512;
  *(_BYTE *)(a2 + 3476) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 216))(*(_QWORD *)(a1 + 120));
  *(_BYTE *)(a2 + 3477) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 224))(*(_QWORD *)(a1 + 120));
  *(_BYTE *)(a2 + 3478) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 232))(*(_QWORD *)(a1 + 120));
  return sub_10012CBDC(a3, a2);
}

float sub_1001B75B4(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  float v5;
  float v6;
  NSObject *v7;
  char *v9;
  _DWORD v10[2];
  __int16 v11;
  _BOOL4 v12;
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  _BOOL4 v18;
  __int16 v19;
  _BOOL4 v20;
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  double v24;

  *(_DWORD *)buf = 0;
  v2 = sub_1001B7864(a1, (int *)buf, 1);
  *(_DWORD *)buf = 1;
  v3 = sub_1001B7864(a1, (int *)buf, 1);
  *(_DWORD *)buf = 2;
  v4 = sub_1001B7864(a1, (int *)buf, 1);
  v5 = 1000.0;
  if (!v4)
    v5 = -1.0;
  if (v3)
    v5 = 100.0;
  if (v2)
    v6 = 1.0;
  else
    v6 = v5;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240960;
    v18 = v2 != 0;
    v19 = 1026;
    v20 = v3 != 0;
    v21 = 1026;
    v22 = v4 != 0;
    v23 = 2050;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLIENT:hasClients,%{public}d,hasFineClients,%{public}d,hasCoarseClients,%{public}d,desiredAccuracy,%{public}.1lf", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v10[0] = 67240960;
    v10[1] = v2 != 0;
    v11 = 1026;
    v12 = v3 != 0;
    v13 = 1026;
    v14 = v4 != 0;
    v15 = 2050;
    v16 = v6;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLIENT:hasClients,%{public}d,hasFineClients,%{public}d,hasCoarseClients,%{public}d,desiredAccuracy,%{public}.1lf", v10, 30);
    sub_100512490("Generic", 1, 0, 2, "float CLLocationController::getDesiredAccuracy()", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  return v6;
}

uint64_t sub_1001B7864(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;

  if (*(_BYTE *)(a1 + 108) || !a3)
    return 0;
  v3 = 0;
  v4 = &a2[a3];
  v7 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v6 = v7;
  do
  {
    if (v6)
    {
      v8 = *a2;
      v9 = v5;
      v10 = v6;
      do
      {
        v11 = *(_DWORD *)(v10 + 32);
        v12 = v11 < v8;
        if (v11 >= v8)
          v13 = (uint64_t *)v10;
        else
          v13 = (uint64_t *)(v10 + 8);
        if (!v12)
          v9 = v10;
        v10 = *v13;
      }
      while (*v13);
      if (v9 != v5 && v8 >= *(_DWORD *)(v9 + 32))
        v3 = (v3 + *(_DWORD *)(v9 + 56));
    }
    ++a2;
  }
  while (a2 != v4);
  return v3;
}

uint64_t sub_1001B78E0()
{
  sub_100197040();
  return sub_100195F08();
}

unint64_t sub_1001B78F8()
{
  return ((unint64_t)sub_1001B7910() >> 22) & 1;
}

uint64_t sub_1001B7910()
{
  if (qword_102303F20 != -1)
    dispatch_once(&qword_102303F20, &stru_1021516F0);
  return qword_102303F28;
}

uint64_t sub_1001B7950()
{
  sub_100197040();
  return (sub_1001B796C() >> 19) & 1;
}

uint64_t sub_1001B796C()
{
  if (qword_102303DE0 != -1)
    dispatch_once(&qword_102303DE0, &stru_1021514B0);
  return dword_102303DD8;
}

uint64_t sub_1001B79AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  uint64_t *v6;
  uint64_t result;
  double *v8;
  float v9;
  float v10;
  double *v11;
  double *v12;
  BOOL v13;
  int v14;

  v2 = a1 + 64;
  v1 = *(_QWORD *)(a1 + 64);
  if (!v1)
    goto LABEL_11;
  v3 = a1 + 64;
  do
  {
    v4 = *(_DWORD *)(v1 + 32);
    v5 = v4 < 0;
    if (v4 >= 0)
      v6 = (uint64_t *)v1;
    else
      v6 = (uint64_t *)(v1 + 8);
    if (!v5)
      v3 = v1;
    v1 = *v6;
  }
  while (*v6);
  if (v3 == v2 || *(int *)(v3 + 32) >= 1)
LABEL_11:
    v3 = a1 + 64;
  v14 = 0;
  result = sub_1001B7864(a1, &v14, 1);
  if ((_DWORD)result)
  {
    if (v3 != v2)
    {
      v8 = *(double **)(v3 + 40);
      if (v8 != (double *)(v3 + 48))
      {
        v9 = 10000.0;
        do
        {
          v10 = v8[5];
          if (v9 >= v10)
            v9 = v8[5];
          v11 = (double *)*((_QWORD *)v8 + 1);
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = *(double **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (double *)*((_QWORD *)v8 + 2);
              v13 = *(_QWORD *)v12 == (_QWORD)v8;
              v8 = v12;
            }
            while (!v13);
          }
          v8 = v12;
        }
        while (v12 != (double *)(v3 + 48));
      }
    }
  }
  return result;
}

_QWORD *sub_1001B7B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1001B7B9C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1001B7BB8()
{
  operator new();
}

void sub_1001B7C60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1001B7C9C()
{
  operator new();
}

void sub_1001B7D44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1001B7D80(uint64_t a1)
{
  uint64_t result;
  id v3;

  result = *(_QWORD *)(a1 + 72);
  if (!result)
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLStreamingAwareLocationProvider"));
    *(_QWORD *)(a1 + 72) = v3;
    objc_msgSend(v3, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 8), "silo"));
    return *(_QWORD *)(a1 + 72);
  }
  return result;
}

void sub_1001B7DEC()
{
  operator new();
}

void sub_1001B7E98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1001B7ED4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102146B88;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

CLOSTransaction *sub_1001B7FA8(const void *a1, const char *a2)
{
  char __str[47];

  snprintf(__str, 0x2FuLL, "CLDC.%p.%s", a1, a2);
  return -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", __str);
}

void sub_1001B804C(uint64_t a1)
{
  unsigned __int8 v2;
  double v3;
  uint64_t v4;
  unsigned int v5;
  char v6;
  double Current;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  _DWORD v13[2];
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;

  if ((sub_100FFB2C8(a1, 4) & 1) == 0)
    sub_100FFB31C(a1);
  v2 = objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 5);
  v3 = -1.0;
  if ((v2 & 1) == 0)
  {
    if (*(double *)(a1 + 224) != -1.0)
      goto LABEL_7;
    v3 = sub_100515CB4();
  }
  *(double *)(a1 + 224) = v3;
LABEL_7:
  sub_1001B3B88(a1);
  sub_1001B3C4C(a1);
  if (objc_msgSend(*(id *)(a1 + 16), "transientAwareRegistrationResult") - 2 <= 2)
  {
    *(_BYTE *)(a1 + 236) = 0;
    sub_101163EF4(a1);
  }
  v4 = *(_QWORD *)(a1 + 512);
  if (v4)
  {
    v5 = objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 3);
    if (*(unsigned __int8 *)(v4 + 48) != v5)
    {
      v6 = v5;
      sub_10022E580(v4);
      *(_BYTE *)(v4 + 48) = v6;
    }
  }
  if (*(_BYTE *)(a1 + 58) && objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 5))
  {
    *(_BYTE *)(a1 + 58) = 0;
    Current = CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 504) = *(double *)(a1 + 504) + Current - *(double *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0xBFF0000000000000;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 500);
      v11 = *(_QWORD *)(a1 + 504);
      v13[0] = 68290050;
      v13[1] = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2114;
      v17 = v9;
      v18 = 2050;
      v19 = Current;
      v20 = 1026;
      v21 = v10;
      v22 = 2050;
      v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#cblsPowerSaver LossTracking disabled due to App Foregrounding\", \"Client\":%{public, location:escape_only}@, \"endTime\":\"%{public}f\", \"LocationLoss\":%{public}d, \"RuntimeLoss\":\"%{public}f\"}", (uint8_t *)v13, 0x36u);
    }
  }
  sub_1001AFFFC(a1);
  v12 = objc_msgSend(*(id *)(a1 + 16), "inUseLevelIsAtLeast:", 5);
  if (v12)
    sub_1001B4478(a1, 0);
  objc_msgSend(*(id *)(a1 + 96), "setBackgrounded:", v12 ^ 1);
  sub_1001B9A84(a1);
}

uint64_t sub_1001B828C(uint64_t a1)
{
  uint64_t result;
  id v3;

  result = *(_QWORD *)(a1 + 168);
  if (!result)
  {
    v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    *(_QWORD *)(a1 + 168) = v3;
    objc_msgSend(v3, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 48), objc_msgSend(*(id *)(a1 + 8), "silo"));
    return *(_QWORD *)(a1 + 168);
  }
  return result;
}

void sub_1001B82F8(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  char v4;
  int64_t size;
  std::string *v6;
  std::string *v7;
  int64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v14;
  std::string *v15;
  std::string __p;
  char v20;

  v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    size = __str->__r_.__value_.__l.__size_;
  if (v4 >= 0)
    v6 = __str;
  else
    v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v7 = (std::string *)((char *)v6 + size);
  if (size >= 31)
  {
    v8 = size;
    v9 = v6;
    do
    {
      v10 = (std::string *)memchr(v9, 99, v8 - 30);
      if (!v10)
        break;
      if (v10->__r_.__value_.__r.__words[0] == 0x6C7070612E6D6F63
        && v10->__r_.__value_.__l.__size_ == 0x697461636F6C2E65
        && v10->__r_.__value_.__r.__words[2] == 0x636578652E646E6FLL
        && *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[2] + 7) == 0x2D656C6261747563)
      {
        if (v10 == v7 || v10 != v6)
          break;
        *(_DWORD *)(a2 + 95) = 0;
        *(_OWORD *)(a2 + 64) = 0u;
        *(_OWORD *)(a2 + 80) = 0u;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(_OWORD *)(a2 + 104) = 0u;
        *(_OWORD *)(a2 + 120) = 0u;
        *(_OWORD *)(a2 + 136) = 0u;
        *(_OWORD *)(a2 + 152) = 0u;
        *(_OWORD *)(a2 + 163) = 0u;
        std::string::basic_string(&__p, __str, 0x1FuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
        std::string::operator=((std::string *)(a2 + 24), &__p);
LABEL_43:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return;
      }
      v9 = (std::string *)((char *)&v10->__r_.__value_.__l.__data_ + 1);
      v8 = (char *)v7 - (char *)v9;
    }
    while ((char *)v7 - (char *)v9 >= 31);
  }
  if (size >= 27)
  {
    v14 = v6;
    do
    {
      v15 = (std::string *)memchr(v14, 99, size - 26);
      if (!v15)
        break;
      if (v15->__r_.__value_.__r.__words[0] == 0x6C7070612E6D6F63
        && v15->__r_.__value_.__l.__size_ == 0x697461636F6C2E65
        && v15->__r_.__value_.__r.__words[2] == 0x646E75622E646E6FLL
        && *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[2] + 3) == 0x2D656C646E75622ELL)
      {
        if (v15 != v7 && v15 == v6)
        {
          std::string::basic_string(&__p, __str, 0x1BuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
          sub_1001B8590(&__p, a2);
          goto LABEL_43;
        }
        break;
      }
      v14 = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
      size = (char *)v7 - (char *)v14;
    }
    while ((char *)v7 - (char *)v14 >= 27);
  }
  sub_1001AE67C(__str, a2);
}

void sub_1001B854C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1001B8590(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  __CFString *v4;
  const __CFString *v5;

  *(_DWORD *)(a2 + 95) = 0;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  v3 = (char *)(a2 + 48);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 163) = 0u;
  std::string::operator=((std::string *)(a2 + 48), __str);
  *(_WORD *)(a2 + 97) = 0;
  if (*(char *)(a2 + 71) < 0)
  {
    if (!*(_QWORD *)(a2 + 56))
      return;
    v3 = *(char **)v3;
  }
  else if (!*(_BYTE *)(a2 + 71))
  {
    return;
  }
  v4 = (__CFString *)sub_1001A48D8(v3);
  v5 = v4;
  if (v4)
  {
    if (sub_100197BA8(v4))
      *(_BYTE *)(a2 + 97) = 1;
    if (sub_1001B8660(v5))
      *(_BYTE *)(a2 + 98) = 1;
    CFRelease(v5);
  }
}

void sub_1001B8648(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100010174(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1001B8660(const __CFString *a1)
{
  uint64_t v2;

  v2 = sub_100197BE0();
  return sub_1001B8688(v2, a1);
}

BOOL sub_1001B8688(uint64_t a1, const __CFString *a2)
{
  uint64_t v3;
  const __CFBoolean *v4;
  const __CFBoolean *v5;
  _BOOL8 v6;

  v3 = a1 + 48;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 16))(a1 + 48);
  v4 = sub_100197EB0(*(__CFDictionary **)(v3 - 40), a2, CFSTR("CLHarvestableSystemService"));
  v5 = v4;
  if (v4)
  {
    v6 = CFBooleanGetValue(v4) != 0;
    CFRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  return v6;
}

void sub_1001B8728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1001B873C(uint64_t a1, void *a2)
{
  const __CFString *v5;
  _BOOL8 v6;

  if (objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", CFSTR("isHarvestableSystemService"), a2))return objc_msgSend(*(id *)(a1 + 136), "BOOLForKey:atKeyPath:defaultValue:", CFSTR("isHarvestableSystemService"), a2, 0);
  v5 = (const __CFString *)objc_msgSend(a2, "bundlePath");
  if (!v5)
    return 0;
  v6 = sub_1001B8660(v5);
  objc_msgSend(*(id *)(a1 + 136), "setBool:forKey:atKeyPath:", v6, CFSTR("isHarvestableSystemService"), a2);
  return (id)v6;
}

void sub_1001B87DC(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  NSString *v7;
  void *v8;
  _QWORD v9[5];
  _QWORD v10[5];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;

  sub_100197040();
  if (sub_1001974CC())
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v7 = -[NSUUID UUIDString](+[NSUUID UUID](NSUUID, "UUID"), "UUIDString");
      *(_DWORD *)buf = 68289794;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2114;
      v16 = a2;
      v17 = 2114;
      v18 = a3;
      v19 = 2082;
      v20 = -[NSString UTF8String](v7, "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SystemStatus Publishing receiving location interval begin\", \"Client\":%{public, location:escape_only}@, \"AttributionIdentifier\":%{public, location:escape_only}@, \"MessageUUID\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(void **)(a1 + 400);
    v9[4] = v7;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100013F8C;
    v10[3] = &unk_102153D00;
    v10[4] = a3;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1007C4448;
    v9[3] = &unk_10212BB58;
    objc_msgSend(v8, "updateVolatileData:completion:", v10, v9);
    if (_os_feature_enabled_impl("CoreLocation", "CLSwissLocationAttribution"))
      sub_1001988C8(a1, *(void **)(a1 + 544), a1 + 504, a2);
  }
}

void sub_1001B899C()
{
  operator new();
}

void sub_1001B8C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1001B8CCC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v2;
  CLConnectionMessage *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  CLConnectionMessage *v8[2];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = a2[1];
  v8[0] = *a2;
  v8[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)((char *)v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  sub_1001B8D6C(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)((char *)v3 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v3 + 16))(v3);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
    }
  }
}

void sub_1001B8D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001B8D6C(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  _BOOL8 v18;
  CLConnectionMessage *v19;
  CLConnectionMessage *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  CLConnectionMessage *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  CLConnectionMessage *v32;
  std::__shared_weak_count *v33;
  CLConnectionMessage *v34[2];
  os_activity_scope_state_s state;
  uint8_t buf[8];
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  uint64_t v42;

  v4 = (_QWORD *)qword_1023071C0;
  v5 = (unsigned __int8 *)CLConnectionMessage::name(*a2);
  v6 = sub_10025A024((uint64_t)(v4 + 3), (uint64_t)v5);
  v7 = (int8x8_t)v4[1];
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v11 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(*v4 + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        v14 = (uint64_t)(v4 + 4);
        do
        {
          v15 = *((_QWORD *)v13 + 1);
          if (v15 == v8)
          {
            if ((sub_10025A4CC(v14, v13 + 16, v5) & 1) != 0)
            {
              v25 = a2[1];
              v32 = *a2;
              v33 = (std::__shared_weak_count *)v25;
              if (v25)
              {
                v26 = (unint64_t *)((char *)v25 + 8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 1, v26));
              }
              *(_QWORD *)buf = a1;
              v28 = *((_QWORD *)v13 + 8);
              if (!v28)
                sub_10025FD1C();
              (*(void (**)(uint64_t, uint8_t *, CLConnectionMessage **))(*(_QWORD *)v28 + 48))(v28, buf, &v32);
              v29 = v33;
              if (v33)
              {
                p_shared_owners = (unint64_t *)&v33->__shared_owners_;
                do
                  v31 = __ldaxr(p_shared_owners);
                while (__stlxr(v31 - 1, p_shared_owners));
                if (!v31)
                {
                  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                  std::__shared_weak_count::__release_weak(v29);
                }
              }
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v15 >= *(_QWORD *)&v7)
                v15 %= *(_QWORD *)&v7;
            }
            else
            {
              v15 &= *(_QWORD *)&v7 - 1;
            }
            if (v15 != v11)
              break;
          }
          v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
    }
  }
  v16 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageUnknown", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v16, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v17 = qword_1022A01C8;
  v18 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v37 = 2082;
    v38 = "";
    v39 = 2082;
    v40 = "activity";
    v41 = 2050;
    v42 = a1;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageUnknown\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  v19 = *a2;
  v20 = a2[1];
  v34[0] = v19;
  v34[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)((char *)v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  sub_100B9562C(v18, v34);
  if (v20)
  {
    v23 = (unint64_t *)((char *)v20 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v20 + 16))(v20);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v20);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1001B9070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, os_activity_scope_state_s state)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1001B90A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_1001B92D4(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1001B92A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1001B92CC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BB3C14(a1 + 8, a2, a3);
}

void *sub_1001B92D4(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191C7AC(0);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"22CLLocationSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_1001BAA8C();
  }
  return result;
}

_QWORD *sub_1001B9458(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  _QWORD **v15;
  _QWORD *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = *(_QWORD *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    v10 = 5381;
    do
    {
      v8 = v10;
      v11 = *v9++;
      v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v12)
        v4 = v8 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
    v15 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = (_QWORD *)*i)
      {
        v17 = i[1];
        if (v17 == v8)
        {
          if (sub_100270DE8(i[2], *a2))
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  v18 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  i[2] = **a4;
  i[3] = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_10012E444(a1, v24);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12)
        v4 = v8 % v12;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v12 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *i = *v26;
LABEL_41:
    *v26 = i;
    goto LABEL_42;
  }
  *i = *v18;
  *v18 = i;
  *(_QWORD *)(v25 + 8 * v4) = v18;
  if (*i)
  {
    v27 = *(_QWORD *)(*i + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12)
        v27 %= v12;
    }
    else
    {
      v27 &= v12 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1001B96B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_100BB2224(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B96D4()
{
  return 0;
}

void sub_1001B96DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101167BF8(a1 + 8, a2, a3);
}

void sub_1001B96E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_101167A60(a1 + 8, a2, a3);
}

void sub_1001B96EC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  const char *v18;
  _BYTE buf[18];
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  HIDWORD(v16) = 0;
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey"));
  if (v5 && (sub_1001C13CC(v5, (_DWORD *)&v16 + 1) & 1) != 0)
  {
    if (*(_DWORD *)(a1 + 184) != HIDWORD(v16))
    {
      *(_DWORD *)(a1 + 184) = HIDWORD(v16);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_QWORD *)(a1 + 24);
        v8 = *(_DWORD *)(a1 + 184);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v20 = 2114;
        v21 = v7;
        v22 = 1026;
        v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client is setting AutoPause\", \"Client\":%{public, location:escape_only}@, \"autopause\":%{public}d}", buf, 0x22u);
      }
      sub_1001B9A84(a1);
      sub_1015A2E04(buf, "kCLConnectionMessageLocation");
      v9 = sub_100FFB214(a1);
      v10 = v9;
      if (SBYTE3(v21) < 0)
      {
        operator delete(*(void **)buf);
        if (!v10)
          goto LABEL_16;
      }
      else if (!v9)
      {
        goto LABEL_16;
      }
      v13 = *(_DWORD *)(a1 + 184);
      v12 = *(_DWORD *)(a1 + 188);
      if (v13 < 5)
      {
        if (v12 != 2 && (v13 != 2 || v12 != 3))
          goto LABEL_26;
      }
      else if (v12 == 1)
      {
        goto LABEL_26;
      }
      if (!sub_1001B5540(a1))
      {
LABEL_26:
        sub_101164790(a1);
        goto LABEL_16;
      }
      sub_1011644F4(a1);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v11 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v17 = 136446210;
      v18 = "kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey";
      LODWORD(v16) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v17, v16);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessagePausesLocationUpdatesAutomatically(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
LABEL_16:

}

void sub_1001B9A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1001B9A84(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  double v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  int v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  double v40;
  NSObject *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  char v52;
  double v53;
  int v54;
  char *v55;
  double v56;
  double v57;
  char *v58;
  double v59;
  char *v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  double v66;
  int v67;
  int v68;
  int v69;
  int v70;
  char *v71;
  double v72;
  int v73;
  double v74;
  __int16 v75;
  _BYTE v76[10];
  _BYTE v77[12];
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  _BYTE __p[12];
  __int16 v82;
  _BYTE v83[10];
  _BYTE v84[12];
  uint64_t v85;
  __int16 v86;
  uint64_t v87;

  v2 = *(unsigned __int8 *)(a1 + 236);
  sub_1015A2E04(__p, "kCLConnectionMessageLocation");
  v3 = sub_100FFB214(a1);
  if ((v83[9] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v4 = sub_100FFB2C8(a1, 4);
  if ((v3 & v4 & 1) == 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v11 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)__p = 138412802;
      *(_QWORD *)&__p[4] = v11;
      v82 = 1024;
      *(_DWORD *)v83 = v3;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not a location client (%d), or not authorized (%d).", __p, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_18;
    bzero(__p, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v56 = *(double *)(a1 + 24);
    v73 = 138412802;
    v74 = v56;
    v75 = 1024;
    *(_DWORD *)v76 = v3;
    *(_WORD *)&v76[4] = 1024;
    *(_DWORD *)&v76[6] = v4;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PAUSE: '%@' not a location client (%d), or not authorized (%d).", &v73, 24);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v9);
    goto LABEL_96;
  }
  v5 = *(_DWORD *)(a1 + 188);
  if (v5 == 1)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)__p = 138412290;
      *(_QWORD *)&__p[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' overridden to off.", __p, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_18;
    bzero(__p, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v8 = *(double *)(a1 + 24);
    v73 = 138412290;
    v74 = v8;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PAUSE: '%@' overridden to off.", &v73, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v9);
LABEL_96:
    if (v9 != __p)
      free(v9);
LABEL_18:
    *(_BYTE *)(a1 + 236) = 0;
    goto LABEL_19;
  }
  if (v5 != 2)
  {
    v17 = *(_DWORD *)(a1 + 184);
    if (v17 <= 4 && (v5 != 3 || v17 != 2))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v38 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v39 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)__p = 138412290;
        *(_QWORD *)&__p[4] = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not allowed to pause.", __p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_18;
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v40 = *(double *)(a1 + 24);
      v73 = 138412290;
      v74 = v40;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PAUSE: '%@' not allowed to pause.", &v73, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v9);
      goto LABEL_96;
    }
  }
  if (*(double *)(a1 + 224) == -1.0)
  {
    *(_BYTE *)(a1 + 236) = 0;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 24);
      v20 = *(_QWORD *)(a1 + 224);
      *(_DWORD *)__p = 138412546;
      *(_QWORD *)&__p[4] = v19;
      v82 = 2048;
      *(_QWORD *)v83 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not backgrounded right now (%.1f).", __p, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v21 = *(double *)(a1 + 24);
      v22 = *(_QWORD *)(a1 + 224);
      v73 = 138412546;
      v74 = v21;
      v75 = 2048;
      *(_QWORD *)v76 = v22;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PAUSE: '%@' not backgrounded right now (%.1f).", &v73, 22);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v23);
LABEL_61:
      if (v23 != __p)
        free(v23);
    }
  }
  else if (v2 || !*(_BYTE *)(a1 + 240) || sub_100515CB4() <= *(double *)(a1 + 224) + *(double *)(a1 + 544))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v26 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(unsigned __int8 *)(a1 + 240);
      v29 = sub_100515CB4();
      v30 = *(_QWORD *)(a1 + 224);
      v31 = *(_QWORD *)(a1 + 544);
      *(_DWORD *)__p = 138413570;
      *(_QWORD *)&__p[4] = v27;
      v82 = 1024;
      *(_DWORD *)v83 = v2;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = v28;
      *(_WORD *)v84 = 2048;
      *(double *)&v84[2] = v29;
      *(_WORD *)&v84[10] = 2048;
      v85 = v30;
      v86 = 2048;
      v87 = v31;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "PAUSE: '%@' not changing state wasPaused: %d lastState: %d now clock: %f timestamp: %f thresh: %f.", __p, 0x36u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v32 = qword_1022A01C8;
      v33 = *(double *)(a1 + 24);
      v34 = *(unsigned __int8 *)(a1 + 240);
      v35 = sub_100515CB4();
      v36 = *(_QWORD *)(a1 + 224);
      v37 = *(_QWORD *)(a1 + 544);
      v73 = 138413570;
      v74 = v33;
      v75 = 1024;
      *(_DWORD *)v76 = v2;
      *(_WORD *)&v76[4] = 1024;
      *(_DWORD *)&v76[6] = v34;
      *(_WORD *)v77 = 2048;
      *(double *)&v77[2] = v35;
      *(_WORD *)&v77[10] = 2048;
      v78 = v36;
      v79 = 2048;
      v80 = v37;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v32, 2, "PAUSE: '%@' not changing state wasPaused: %d lastState: %d now clock: %f timestamp: %f thresh: %f.", &v73, 54);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v23);
      goto LABEL_61;
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v41 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v42 = sub_100515CB4();
      v43 = *(_QWORD *)(a1 + 224);
      v44 = *(_QWORD *)(a1 + 544);
      *(_DWORD *)__p = 134218496;
      *(double *)&__p[4] = v42;
      v82 = 2048;
      *(_QWORD *)v83 = v43;
      *(_WORD *)&v83[8] = 2048;
      *(_QWORD *)v84 = v44;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "PAUSE: now clock %f timestamp %f thresh %f.", __p, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v61 = qword_1022A01C8;
      v62 = sub_100515CB4();
      v63 = *(_QWORD *)(a1 + 224);
      v64 = *(_QWORD *)(a1 + 544);
      v73 = 134218496;
      v74 = v62;
      v75 = 2048;
      *(_QWORD *)v76 = v63;
      *(_WORD *)&v76[8] = 2048;
      *(_QWORD *)v77 = v64;
      LODWORD(v72) = 32;
      v65 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v61, 2, "PAUSE: now clock %f timestamp %f thresh %f.", COERCE_DOUBLE(&v73), v72);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v65);
      if (v65 != __p)
        free(v65);
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v45 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v46 = *(_QWORD *)(a1 + 24);
      v47 = *(_DWORD *)(a1 + 232);
      v48 = *(unsigned __int8 *)(a1 + 238);
      v49 = *(unsigned __int8 *)(a1 + 239);
      v50 = *(unsigned __int8 *)(a1 + 237);
      *(_DWORD *)__p = 138413314;
      *(_QWORD *)&__p[4] = v46;
      v82 = 1024;
      *(_DWORD *)v83 = v47;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = v48;
      *(_WORD *)v84 = 1024;
      *(_DWORD *)&v84[2] = v49;
      *(_WORD *)&v84[6] = 1024;
      *(_DWORD *)&v84[8] = v50;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "PAUSE: client: '%@' type: %d states: veh %d fit %d oth %d", __p, 0x24u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v66 = *(double *)(a1 + 24);
      v67 = *(_DWORD *)(a1 + 232);
      v68 = *(unsigned __int8 *)(a1 + 238);
      v69 = *(unsigned __int8 *)(a1 + 239);
      v70 = *(unsigned __int8 *)(a1 + 237);
      v73 = 138413314;
      v74 = v66;
      v75 = 1024;
      *(_DWORD *)v76 = v67;
      *(_WORD *)&v76[4] = 1024;
      *(_DWORD *)&v76[6] = v68;
      *(_WORD *)v77 = 1024;
      *(_DWORD *)&v77[2] = v69;
      *(_WORD *)&v77[6] = 1024;
      *(_DWORD *)&v77[8] = v70;
      LODWORD(v72) = 36;
      v71 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PAUSE: client: '%@' type: %d states: veh %d fit %d oth %d", &v73, *(_QWORD *)&v72);
      sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v71);
      if (v71 != __p)
        free(v71);
    }
    v51 = *(_DWORD *)(a1 + 232);
    if (v51 == 3)
    {
      v52 = *(_BYTE *)(a1 + 239);
    }
    else if (v51 == 2)
    {
      v52 = *(_BYTE *)(a1 + 238);
    }
    else
    {
      v52 = *(_BYTE *)(a1 + 237);
    }
    *(_BYTE *)(a1 + 236) = v52;
  }
LABEL_19:
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  v12 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(unsigned __int8 *)(a1 + 236);
    *(_DWORD *)__p = 138413058;
    *(_QWORD *)&__p[4] = v13;
    v82 = 2048;
    *(_QWORD *)v83 = a1;
    *(_WORD *)&v83[8] = 1024;
    *(_DWORD *)v84 = v2;
    *(_WORD *)&v84[4] = 1024;
    *(_DWORD *)&v84[6] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PAUSE: %@ (%p) changed from %d to %d", __p, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v53 = *(double *)(a1 + 24);
    v54 = *(unsigned __int8 *)(a1 + 236);
    v73 = 138413058;
    v74 = v53;
    v75 = 2048;
    *(_QWORD *)v76 = a1;
    *(_WORD *)&v76[8] = 1024;
    *(_DWORD *)v77 = v2;
    *(_WORD *)&v77[4] = 1024;
    *(_DWORD *)&v77[6] = v54;
    LODWORD(v72) = 34;
    v55 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PAUSE: %@ (%p) changed from %d to %d", &v73, *(_QWORD *)&v72);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v55);
    if (v55 != __p)
      free(v55);
  }
  if (v2 != *(unsigned __int8 *)(a1 + 236))
  {
    if (*(_BYTE *)(a1 + 236))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v15 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v16 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)__p = 138412290;
        *(_QWORD *)&__p[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "PAUSE: Pausing client '%@'", __p, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v57 = *(double *)(a1 + 24);
        v73 = 138412290;
        v74 = v57;
        LODWORD(v72) = 12;
        v58 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "PAUSE: Pausing client '%@'", &v73, *(_QWORD *)&v72);
        sub_100512490("Generic", 1, 0, 2, "void CLLocationSubscription::checkPauseState()", "%s\n", v58);
        if (v58 != __p)
          free(v58);
      }
      sub_101163EF4(a1);
      sub_101165F50(a1, 1);
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v24 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        v25 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)__p = 138543362;
        *(_QWORD *)&__p[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "PAUSE: Resuming client '%{public}@' (This should be handled on framework side)", __p, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
        v59 = *(double *)(a1 + 24);
        v73 = 138543362;
        v74 = v59;
        LODWORD(v72) = 12;
        v60 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 17, "PAUSE: Resuming client '%{public}@' (This should be handled on framework side)", &v73, *(_QWORD *)&v72);
        sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::checkPauseState()", "%s\n", v60);
        if (v60 != __p)
          free(v60);
      }
      sub_101165F50(a1, 0);
      sub_1001AFFFC(a1);
    }
  }
}

