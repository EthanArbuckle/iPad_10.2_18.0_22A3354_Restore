void sub_100BBBC9C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175EF8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBBD0C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175EF8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBBD64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBBD78(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175EF8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBBDBC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBBDF0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBBE40(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBBEF4(a1 + 8, a2, a3);
}

uint64_t sub_100BBBE48(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBBE84()
{
}

uint64_t sub_100BBBE90(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBBEF4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBBF7C(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBBF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBBF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBC1A4(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBC17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBC1A4(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191FE7C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"27CLActivityAlarmSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBC35C()
{
  operator delete();
}

_QWORD *sub_100BBC388(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175F78;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBC3E8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175F78;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBC458(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175F78;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBC4B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBC4C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175F78;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBC508(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBC53C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBC58C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBC640(a1 + 8, a2, a3);
}

uint64_t sub_100BBC594(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBC5D0()
{
}

uint64_t sub_100BBC5DC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBC640(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBC6C8(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBC6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBC6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBC8F0(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBC8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBC8F0(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10192014C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"29CLOnBodyDetectionSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBCAA8()
{
  operator delete();
}

_QWORD *sub_100BBCAD4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102175FF8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBCB34(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102175FF8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBCBA4(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102175FF8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBCBFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBCC10(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102175FF8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBCC54(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBCC88(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBCCD8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBCD8C(a1 + 8, a2, a3);
}

uint64_t sub_100BBCCE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBCD1C()
{
}

uint64_t sub_100BBCD28(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBCD8C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBCE14(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBCDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBCE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBD03C(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBD014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBD03C(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10192041C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"27CLSafetyAnomalySubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBD1F4()
{
  operator delete();
}

_QWORD *sub_100BBD220(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102176078;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBD280(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102176078;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBD2F0(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102176078;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBD348(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBD35C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102176078;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBD3A0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBD3D4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBD424(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBD4D8(a1 + 8, a2, a3);
}

uint64_t sub_100BBD42C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBD468()
{
}

uint64_t sub_100BBD474(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBD4D8(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBD560(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBD548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBD560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBD788(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBD760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBD788(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_1019206EC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"27CLIndoorOutdoorSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBD940()
{
  operator delete();
}

_QWORD *sub_100BBD96C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021760F8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBD9CC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021760F8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBDA3C(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_1021760F8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBDA94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBDAA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021760F8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBDAEC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBDB20(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBDB70(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBDC24(a1 + 8, a2, a3);
}

uint64_t sub_100BBDB78(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBDBB4()
{
}

uint64_t sub_100BBDBC0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBDC24(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBDCAC(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBDC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBDCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBDED4(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBDEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBDED4(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_1019209BC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"20CLVO2MaxSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBE08C()
{
  operator delete();
}

_QWORD *sub_100BBE0B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102176178;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBE118(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102176178;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBE188(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102176178;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBE1E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBE1F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102176178;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBE238(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBE26C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBE2BC(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBE370(a1 + 8, a2, a3);
}

uint64_t sub_100BBE2C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBE300()
{
}

uint64_t sub_100BBE30C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBE370(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBE3F8(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBE3E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBE3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBE620(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBE5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBE620(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101920C8C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"21CLEclipseSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBE7D8()
{
  operator delete();
}

_QWORD *sub_100BBE804(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021761F8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBE864(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021761F8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBE8D4(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_1021761F8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBE92C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBE940(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021761F8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBE984(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBE9B8(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBEA08(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBEA58(a1 + 8, a2, a3);
}

uint64_t sub_100BBEA10(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBEA4C()
{
}

void sub_100BBEA58(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBEAE0(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBEAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBEAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBED08(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBECE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBED08(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_101920F5C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"32CLProxPDPAndALSPhoneSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBEEC0()
{
  operator delete();
}

_QWORD *sub_100BBEEEC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_102176278;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBEF4C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_102176278;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBEFBC(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_102176278;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBF014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBF028(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_102176278;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBF06C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBF0A0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBF0F0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBF1A4(a1 + 8, a2, a3);
}

uint64_t sub_100BBF0F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBF134()
{
}

uint64_t sub_100BBF140(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBF1A4(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBF22C(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBF214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBF22C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBF454(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBF42C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBF454(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10192122C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"24CLMagicMountSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBF60C()
{
  operator delete();
}

_QWORD *sub_100BBF638(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = off_1021762F8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100BBF698(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1021762F8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  operator delete();
}

_BYTE *sub_100BBF708(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;

  v2 = a1 + 8;
  v3 = operator new(0x30uLL);
  *(_QWORD *)v3 = off_1021762F8;
  sub_100270E34((uint64_t)(v3 + 8), v2);
  v3[40] = *(_BYTE *)(a1 + 40);
  return v3;
}

void sub_100BBF760(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BBF774(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)a2 = off_1021762F8;
  result = sub_100270E34(a2 + 8, a1 + 8);
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 40);
  return result;
}

_QWORD *sub_100BBF7B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_100BBF7EC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_100BBF83C(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  sub_100BBF8F0(a1 + 8, a2, a3);
}

uint64_t sub_100BBF844(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BBF880()
{
}

uint64_t sub_100BBF88C(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BBF8F0(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a2;
  v7 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_100BBF978(a1, v3, (uint64_t)&v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_100BBF960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_10190BA48();
  _Unwind_Resume(exception_object);
}

void sub_100BBF978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  CLConnectionMessage *v19;
  std::__shared_weak_count *v20;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;

  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: Incoming message", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a3);
    if (*((char *)v8 + 23) >= 0)
      v9 = v8;
    else
      v9 = (uint64_t *)*v8;
    v10 = *(unsigned __int8 *)(a2 + 72);
    *(_DWORD *)buf = 68290050;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    v26 = 2082;
    v27 = "activity";
    v28 = 2082;
    v29 = v9;
    v30 = 2050;
    v31 = a2;
    v32 = 1026;
    v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incoming message\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationReceived\":%{public}hhd}", buf, 0x36u);
  }
  if (*(_BYTE *)(a2 + 72) || *(_BYTE *)(a1 + 32))
  {
    v11 = sub_100BBFBA0(a2);
    v12 = *(std::__shared_weak_count **)(a3 + 8);
    v19 = *(CLConnectionMessage **)a3;
    v20 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void *, CLConnectionMessage **))(*(_QWORD *)v15 + 48))(v15, v11, &v19);
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100BBFB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void *sub_100BBFBA0(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_1019214FC();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"27CLBatchedSensorSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_100BBFD58()
{
  operator delete();
}

void sub_100BBFD88()
{
  operator delete();
}

_QWORD *sub_100BBFD9C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176378;
  return result;
}

void sub_100BBFDC0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176378;
}

void sub_100BBFDD8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: LocationManager/kCLConnectionMessageRegistration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LocationManager/kCLConnectionMessageRegistration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100B9EFF4(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BBFFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC0034(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC0070()
{
}

uint64_t sub_100BC007C(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int8x8_t v20;
  unint64_t v21;
  uint8x8_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  _QWORD *v26;

  v4 = a2 + 16;
  v26 = (_QWORD *)(a1 + 24);
  v5 = sub_10025A024(a1 + 24, (uint64_t)(a2 + 16));
  *((_QWORD *)a2 + 1) = v5;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = v5;
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v6 <= v5)
        v10 = v5 % v6;
    }
    else
    {
      v10 = (v6 - 1) & v5;
    }
    v11 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v7)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, v4) & 1) != 0)
            return 0;
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= v6)
              v13 %= v6;
          }
          else
          {
            v13 &= v6 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v6 || (float)(v15 * (float)v6) < v14)
  {
    v16 = 1;
    if (v6 >= 3)
      v16 = (v6 & (v6 - 1)) != 0;
    v17 = v16 | (2 * v6);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_100BB0D64(a1, v19);
  }
  v20 = *(int8x8_t *)(a1 + 8);
  v21 = *((_QWORD *)a2 + 1);
  v22 = (uint8x8_t)vcnt_s8(v20);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    if (v21 >= *(_QWORD *)&v20)
      v21 %= *(_QWORD *)&v20;
  }
  else
  {
    v21 &= *(_QWORD *)&v20 - 1;
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v21);
  if (v23)
  {
    *(_QWORD *)a2 = *v23;
LABEL_37:
    *v23 = a2;
    goto LABEL_38;
  }
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = a1 + 16;
  if (*(_QWORD *)a2)
  {
    v24 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v22.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&v20)
        v24 %= *(_QWORD *)&v20;
    }
    else
    {
      v24 &= *(_QWORD *)&v20 - 1;
    }
    v23 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_37;
  }
LABEL_38:
  ++*v26;
  return 1;
}

void sub_100BC02B4()
{
  operator delete();
}

_QWORD *sub_100BC02C8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021763F8;
  return result;
}

void sub_100BC02EC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021763F8;
}

void sub_100BC0304(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageAllowsLocationPrompts", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageAllowsLocationPrompts\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BA113C(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC04EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC0560(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC059C()
{
}

void sub_100BC05AC()
{
  operator delete();
}

_QWORD *sub_100BC05C0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176478;
  return result;
}

void sub_100BC05E4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176478;
}

void sub_100BC05FC(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageShowLocationPrompt", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageShowLocationPrompt\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BA1658(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC07E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC0858(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC0894()
{
}

void sub_100BC08A4()
{
  operator delete();
}

_QWORD *sub_100BC08B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021764F8;
  return result;
}

void sub_100BC08DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021764F8;
}

void sub_100BC08F4(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePurpose", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePurpose\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100B9F190(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC0AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC0B70(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC0BAC()
{
}

void sub_100BC0BBC()
{
  operator delete();
}

_QWORD *sub_100BC0BD0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176578;
  return result;
}

void sub_100BC0BF4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176578;
}

void sub_100BC0C0C(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageIsActuallyAWatchKitExtension", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageIsActuallyAWatchKitExtension\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100B9F3CC(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC0E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC0E88(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC0EC4()
{
}

void sub_100BC0ED4()
{
  operator delete();
}

_QWORD *sub_100BC0EE8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021765F8;
  return result;
}

void sub_100BC0F0C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021765F8;
}

void sub_100BC0F24(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageProxyForRemoteClient", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageProxyForRemoteClient\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100B9F8F4(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC110C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC1180(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC11BC()
{
}

void sub_100BC11CC()
{
  operator delete();
}

_QWORD *sub_100BC11E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176678;
  return result;
}

void sub_100BC1204(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176678;
}

uint64_t sub_100BC121C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC1258()
{
}

void sub_100BC1268()
{
  operator delete();
}

_QWORD *sub_100BC127C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021766F8;
  return result;
}

void sub_100BC12A0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021766F8;
}

void sub_100BC12B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestTemporaryPrecise", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestTemporaryPrecise\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    sub_100B9FDEC((_QWORD *)v3, (uint64_t)v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)&v4->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100BC14C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC1534(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC1570()
{
}

void sub_100BC1580()
{
  operator delete();
}

_QWORD *sub_100BC1594()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176778;
  return result;
}

void sub_100BC15B8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176778;
}

uint64_t sub_100BC15D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC160C()
{
}

void sub_100BC161C()
{
  operator delete();
}

_QWORD *sub_100BC1630()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021767F8;
  return result;
}

void sub_100BC1654(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021767F8;
}

void sub_100BC166C(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMatchInfoEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMatchInfoEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100BA0380(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC1874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC18E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC1924()
{
}

void sub_100BC1934()
{
  operator delete();
}

_QWORD *sub_100BC1948()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176878;
  return result;
}

void sub_100BC196C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176878;
}

void sub_100BC1984(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageGroundAltitudeEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageGroundAltitudeEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100BA0800(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC1B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC1C00(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC1C3C()
{
}

void sub_100BC1C4C()
{
  operator delete();
}

_QWORD *sub_100BC1C60()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021768F8;
  return result;
}

void sub_100BC1C84(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021768F8;
}

void sub_100BC1C9C(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageFusionInfoEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageFusionInfoEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100BA0B14(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC1EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC1F18(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC1F54()
{
}

void sub_100BC1F64()
{
  operator delete();
}

_QWORD *sub_100BC1F78()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176978;
  return result;
}

void sub_100BC1F9C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176978;
}

void sub_100BC1FB4(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageTrackRunInfoEnabled", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageTrackRunInfoEnabled\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100BA0E28(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC21BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC2230(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC226C()
{
}

void sub_100BC227C()
{
  operator delete();
}

_QWORD *sub_100BC2290()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021769F8;
  return result;
}

void sub_100BC22B4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021769F8;
}

void sub_100BC22CC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  os_activity_scope_state_s v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRegisterAsLocationClient", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v14);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    v20 = "activity";
    v21 = 2050;
    v22 = v3;
    v23 = 1026;
    v24 = 1;
    v25 = 1026;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRegisterAsLocationClient\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    sub_100BA1B74(v3);
    if (!v4)
    {
      os_activity_scope_leave(&v14);
      return;
    }
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&v14);
  }
  else
  {
    os_activity_scope_leave(&v14);
    if (!v4)
      return;
  }
  v12 = (unint64_t *)&v4->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100BC24CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v9)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC2540(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC257C()
{
}

void sub_100BC258C()
{
  operator delete();
}

_QWORD *sub_100BC25A0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176A78;
  return result;
}

void sub_100BC25C4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176A78;
}

void sub_100BC25DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageFetchEstimatedLocationAtDate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageFetchEstimatedLocationAtDate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA1D70(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC27C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC2838(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC2874()
{
}

void sub_100BC2884()
{
  operator delete();
}

_QWORD *sub_100BC2898()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176AF8;
  return result;
}

void sub_100BC28BC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176AF8;
}

void sub_100BC28D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCurrentClientDictionary", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCurrentClientDictionary\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    sub_100BA26DC(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)&v4->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100BC2ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC2B50(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC2B8C()
{
}

void sub_100BC2B9C()
{
  operator delete();
}

_QWORD *sub_100BC2BB0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176B78;
  return result;
}

void sub_100BC2BD4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176B78;
}

void sub_100BC2BEC(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleHeading", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleHeading\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100BA2E8C((_QWORD *)v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC2DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC2E68(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC2EA4()
{
}

void sub_100BC2EB4()
{
  operator delete();
}

_QWORD *sub_100BC2EC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176BF8;
  return result;
}

void sub_100BC2EEC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176BF8;
}

void sub_100BC2F04(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleSpeed", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleSpeed\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_100BA2764((_QWORD *)v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100BC310C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC3180(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC31BC()
{
}

void sub_100BC31CC()
{
  operator delete();
}

_QWORD *sub_100BC31E0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176C78;
  return result;
}

void sub_100BC3204(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176C78;
}

void sub_100BC321C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestMicroLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestMicroLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAB470((_QWORD *)v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC3404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC3478(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC34B4()
{
}

void sub_100BC34C4()
{
  operator delete();
}

_QWORD *sub_100BC34D8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176CF8;
  return result;
}

void sub_100BC34FC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176CF8;
}

void sub_100BC3514(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestMicroLocationRecordingScan", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestMicroLocationRecordingScan\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BABA08((_QWORD *)v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC36FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC3770(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC37AC()
{
}

void sub_100BC37BC()
{
  operator delete();
}

_QWORD *sub_100BC37D0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176D78;
  return result;
}

void sub_100BC37F4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176D78;
}

void sub_100BC380C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationDonateTruthLabelEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationDonateTruthLabelEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAC01C((_QWORD *)v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC39F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC3A68(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC3AA4()
{
}

void sub_100BC3AB4()
{
  operator delete();
}

_QWORD *sub_100BC3AC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176DF8;
  return result;
}

void sub_100BC3AEC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176DF8;
}

void sub_100BC3B04(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationDonateTruthLabelBetweenDatesEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAC714((_QWORD *)v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC3CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC3D60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC3D9C()
{
}

void sub_100BC3DAC()
{
  operator delete();
}

_QWORD *sub_100BC3DC0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176E78;
  return result;
}

void sub_100BC3DE4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176E78;
}

void sub_100BC3DFC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePurgeMicroLocationSemiSupervisedData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    v20 = 2050;
    v21 = v3;
    v22 = 1026;
    v23 = 0;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePurgeMicroLocationSemiSupervisedData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100BACE08((_QWORD *)v3);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&v13);
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&v13);
  }
}

void sub_100BC3FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v9)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC4050(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC408C()
{
}

void sub_100BC409C()
{
  operator delete();
}

_QWORD *sub_100BC40B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176EF8;
  return result;
}

void sub_100BC40D4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176EF8;
}

void sub_100BC40EC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePurgeMicroLocationData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    v20 = 2050;
    v21 = v3;
    v22 = 1026;
    v23 = 0;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePurgeMicroLocationData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100BAD030((_QWORD *)v3);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&v13);
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&v13);
  }
}

void sub_100BC42CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v9)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC4340(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC437C()
{
}

void sub_100BC438C()
{
  operator delete();
}

_QWORD *sub_100BC43A0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176F78;
  return result;
}

void sub_100BC43C4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176F78;
}

void sub_100BC43DC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationExportDatabaseTables", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationExportDatabaseTables\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAD334((_QWORD *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC45C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC4638(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC4674()
{
}

void sub_100BC4684()
{
  operator delete();
}

_QWORD *sub_100BC4698()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102176FF8;
  return result;
}

void sub_100BC46BC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102176FF8;
}

void sub_100BC46D4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationExportDataForMigration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationExportDataForMigration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAD900((_QWORD *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC48BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC4930(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC496C()
{
}

void sub_100BC497C()
{
  operator delete();
}

_QWORD *sub_100BC4990()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177078;
  return result;
}

void sub_100BC49B4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177078;
}

void sub_100BC49CC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationRequestStaticSourcesStatistics\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BADECC((_QWORD *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC4BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC4C28(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC4C64()
{
}

void sub_100BC4C74()
{
  operator delete();
}

_QWORD *sub_100BC4C88()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021770F8;
  return result;
}

void sub_100BC4CAC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021770F8;
}

void sub_100BC4CC4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMicroLocationRequestLearning", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMicroLocationRequestLearning\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAE498((_QWORD *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC4EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC4F20(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC4F5C()
{
}

void sub_100BC4F6C()
{
  operator delete();
}

_QWORD *sub_100BC4F80()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177178;
  return result;
}

void sub_100BC4FA4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177178;
}

uint64_t sub_100BC4FBC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC4FF8()
{
}

void sub_100BC5008()
{
  operator delete();
}

_QWORD *sub_100BC501C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021771F8;
  return result;
}

void sub_100BC5040(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021771F8;
}

uint64_t sub_100BC5058(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC5094()
{
}

void sub_100BC50A4()
{
  operator delete();
}

_QWORD *sub_100BC50B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177278;
  return result;
}

void sub_100BC50DC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177278;
}

void sub_100BC50F4(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageGyroBiasEstimation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageGyroBiasEstimation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100243414(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC52DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC5350(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC538C()
{
}

void sub_100BC539C()
{
  operator delete();
}

_QWORD *sub_100BC53B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021772F8;
  return result;
}

void sub_100BC53D4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021772F8;
}

void sub_100BC53EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageHasRunMiniCal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageHasRunMiniCal\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA66AC(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC55D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC5648(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC5684()
{
}

void sub_100BC5694()
{
  operator delete();
}

_QWORD *sub_100BC56A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177378;
  return result;
}

void sub_100BC56CC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177378;
}

void sub_100BC56E4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageStartMiniCal", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageStartMiniCal\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA6E04(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC58CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC5940(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC597C()
{
}

void sub_100BC598C()
{
  operator delete();
}

_QWORD *sub_100BC59A0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021773F8;
  return result;
}

void sub_100BC59C4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021773F8;
}

void sub_100BC59DC(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCatherineData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCatherineData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BA69EC((_QWORD *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC5BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC5C38(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC5C74()
{
}

void sub_100BC5C84()
{
  operator delete();
}

_QWORD *sub_100BC5C98()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177478;
  return result;
}

void sub_100BC5CBC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177478;
}

void sub_100BC5CD4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleConnectionMostRecent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleConnectionMostRecent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA3E2C(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC5EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC5F30(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC5F6C()
{
}

void sub_100BC5F7C()
{
  operator delete();
}

_QWORD *sub_100BC5F90()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021774F8;
  return result;
}

void sub_100BC5FB4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021774F8;
}

void sub_100BC5FCC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateIsAvailable", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateIsAvailable\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA5FB0(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC61B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC6228(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC6264()
{
}

void sub_100BC6274()
{
  operator delete();
}

_QWORD *sub_100BC6288()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177578;
  return result;
}

void sub_100BC62AC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177578;
}

void sub_100BC62C4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateMostRecentVehicleConnection", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateMostRecentVehicleConnection\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA3E2C(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC64AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC6520(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC655C()
{
}

void sub_100BC656C()
{
  operator delete();
}

_QWORD *sub_100BC6580()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021775F8;
  return result;
}

void sub_100BC65A4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021775F8;
}

void sub_100BC65BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateMostRecentInVehicle", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateMostRecentInVehicle\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA4480(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC67A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC6818(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC6854()
{
}

void sub_100BC6864()
{
  operator delete();
}

_QWORD *sub_100BC6878()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177678;
  return result;
}

void sub_100BC689C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177678;
}

void sub_100BC68B4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicleStateIsVehicle", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicleStateIsVehicle\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA4AD4(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC6A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC6B10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC6B4C()
{
}

void sub_100BC6B5C()
{
  operator delete();
}

_QWORD *sub_100BC6B70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021776F8;
  return result;
}

void sub_100BC6B94(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021776F8;
}

void sub_100BC6BAC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicularState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicularState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA583C(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC6D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC6E08(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC6E44()
{
}

void sub_100BC6E54()
{
  operator delete();
}

_QWORD *sub_100BC6E68()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177778;
  return result;
}

void sub_100BC6E8C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177778;
}

void sub_100BC6EA4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVehicularOperatorState", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVehicularOperatorState\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA50F4(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC708C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC7100(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC713C()
{
}

void sub_100BC714C()
{
  operator delete();
}

_QWORD *sub_100BC7160()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021777F8;
  return result;
}

void sub_100BC7184(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021777F8;
}

void sub_100BC719C(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageHealthAssessmentRecordTypeForDurationKey", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageHealthAssessmentRecordTypeForDurationKey\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BA7510(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC7384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC73F8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC7434()
{
}

void sub_100BC7444()
{
  operator delete();
}

_QWORD *sub_100BC7458()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177878;
  return result;
}

void sub_100BC747C(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177878;
}

void sub_100BC7494(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageHealthAssessmentParkinsonsResultQuery", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    v20 = 2050;
    v21 = v3;
    v22 = 1026;
    v23 = 0;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageHealthAssessmentParkinsonsResultQuery\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100BA7758();
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&v13);
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&v13);
  }
}

void sub_100BC7670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v9)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC76E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC7720()
{
}

void sub_100BC7730()
{
  operator delete();
}

_QWORD *sub_100BC7744()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021778F8;
  return result;
}

void sub_100BC7768(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021778F8;
}

void sub_100BC7780(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMovementDisorderLastProcessedDate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    v20 = 2050;
    v21 = v3;
    v22 = 1026;
    v23 = 0;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMovementDisorderLastProcessedDate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100BA777C();
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&v13);
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&v13);
  }
}

void sub_100BC795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v9)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC79D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC7A0C()
{
}

void sub_100BC7A1C()
{
  operator delete();
}

_QWORD *sub_100BC7A30()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177978;
  return result;
}

void sub_100BC7A54(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177978;
}

void sub_100BC7A6C(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  os_activity_scope_state_s v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMovementDisorderMonitorKinesiasExpirationDate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v13);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    v20 = 2050;
    v21 = v3;
    v22 = 1026;
    v23 = 0;
    v24 = 1026;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMovementDisorderMonitorKinesiasExpirationDate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_100BA77A0();
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&v13);
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&v13);
  }
}

void sub_100BC7C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v9)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC7CBC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC7CF8()
{
}

void sub_100BC7D08()
{
  operator delete();
}

_QWORD *sub_100BC7D1C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021779F8;
  return result;
}

void sub_100BC7D40(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021779F8;
}

void sub_100BC7D58(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderAuthorized", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderAuthorized\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA77C4(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC7F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC7FB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC7FF0()
{
}

void sub_100BC8000()
{
  operator delete();
}

_QWORD *sub_100BC8014()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177A78;
  return result;
}

void sub_100BC8038(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177A78;
}

void sub_100BC8050(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderSensorAvailable", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderSensorAvailable\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BA78B4(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC8238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC82AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC82E8()
{
}

void sub_100BC82F8()
{
  operator delete();
}

_QWORD *sub_100BC830C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177AF8;
  return result;
}

void sub_100BC8330(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177AF8;
}

void sub_100BC8348(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetMetaByID", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetMetaByID\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA7ACC(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC8530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC85A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC85E0()
{
}

void sub_100BC85F0()
{
  operator delete();
}

_QWORD *sub_100BC8604()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177B78;
  return result;
}

void sub_100BC8628(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177B78;
}

void sub_100BC8640(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetMetaSinceID", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetMetaSinceID\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA7FC4(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC8828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC889C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC88D8()
{
}

void sub_100BC88E8()
{
  operator delete();
}

_QWORD *sub_100BC88FC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177BF8;
  return result;
}

void sub_100BC8920(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177BF8;
}

void sub_100BC8938(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetMetasByDateRange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetMetasByDateRange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA849C(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC8B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC8B94(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC8BD0()
{
}

void sub_100BC8BE0()
{
  operator delete();
}

_QWORD *sub_100BC8BF4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177C78;
  return result;
}

void sub_100BC8C18(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177C78;
}

void sub_100BC8C30(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderGetDataByID", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderGetDataByID\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA94B4(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC8E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC8E8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC8EC8()
{
}

void sub_100BC8ED8()
{
  operator delete();
}

_QWORD *sub_100BC8EEC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177CF8;
  return result;
}

void sub_100BC8F10(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177CF8;
}

void sub_100BC8F28(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderRecordFor", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderRecordFor\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BAA018(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC9110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC9184(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC91C0()
{
}

void sub_100BC91D0()
{
  operator delete();
}

_QWORD *sub_100BC91E4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177D78;
  return result;
}

void sub_100BC9208(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177D78;
}

void sub_100BC9220(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA8B60(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC9408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC947C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC94B8()
{
}

void sub_100BC94C8()
{
  operator delete();
}

_QWORD *sub_100BC94DC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177DF8;
  return result;
}

void sub_100BC9500(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177DF8;
}

void sub_100BC9518(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageSensorRecorderSetSensorSampleRate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageSensorRecorderSetSensorSampleRate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA9090(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC9700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC9774(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC97B0()
{
}

void sub_100BC97C0()
{
  operator delete();
}

_QWORD *sub_100BC97D4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177E78;
  return result;
}

void sub_100BC97F8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177E78;
}

void sub_100BC9810(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _BOOL8 v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageDeviceHasOriginalCamera", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  v8 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 0;
    v27 = 1026;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageDeviceHasOriginalCamera\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v15[0] = v5;
  v15[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_100B9E4F4(v8, v15);
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC99F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC9A68(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC9AA4()
{
}

void sub_100BC9AB4()
{
  operator delete();
}

_QWORD *sub_100BC9AC8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177EF8;
  return result;
}

void sub_100BC9AEC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177EF8;
}

void sub_100BC9B04(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _BOOL8 v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCameraVcmActuatorId", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  v8 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 0;
    v27 = 1026;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCameraVcmActuatorId\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v15[0] = v5;
  v15[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_100B9E5D4(v8, v15);
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC9CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BC9D5C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BC9D98()
{
}

void sub_100BC9DA8()
{
  operator delete();
}

_QWORD *sub_100BC9DBC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177F78;
  return result;
}

void sub_100BC9DE0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177F78;
}

void sub_100BC9DF8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _BOOL8 v8;
  int v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCompassCalibrationData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  v8 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 0;
    v27 = 1026;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCompassCalibrationData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v15[0] = v5;
  v15[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_100B9E724(v8, v15);
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BC9FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCA050(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCA08C()
{
}

void sub_100BCA09C()
{
  operator delete();
}

_QWORD *sub_100BCA0B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102177FF8;
  return result;
}

void sub_100BCA0D4(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102177FF8;
}

void sub_100BCA0EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageFitnessMachineData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageFitnessMachineData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BA6298((uint64_t *)v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCA2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCA348(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCA384()
{
}

void sub_100BCA394()
{
  operator delete();
}

_QWORD *sub_100BCA3A8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102178078;
  return result;
}

void sub_100BCA3CC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102178078;
}

void sub_100BCA3E4(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  _BOOL8 v8;
  int v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePredictedWalkDistanceReset", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  v8 = os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    v9 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 0;
    v27 = 1026;
    v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePredictedWalkDistanceReset\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v15[0] = v5;
  v15[1] = v4;
  if (v4)
  {
    v10 = (unint64_t *)((char *)v4 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_100BAA348(v8, v15);
  if (v4)
  {
    v12 = (unint64_t *)((char *)v4 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    if (!v14)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCA5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCA63C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCA678()
{
}

void sub_100BCA688()
{
  operator delete();
}

_QWORD *sub_100BCA69C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021780F8;
  return result;
}

void sub_100BCA6C0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021780F8;
}

void sub_100BCA6D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageWriteDbToFile", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageWriteDbToFile\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAA66C(v3, (uint64_t)v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCA8C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCA934(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCA970()
{
}

void sub_100BCA980()
{
  operator delete();
}

_QWORD *sub_100BCA994()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102178178;
  return result;
}

void sub_100BCA9B8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102178178;
}

void sub_100BCA9D0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageTriggerVO2MaxRetrocompute", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageTriggerVO2MaxRetrocompute\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAE964(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCABB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCAC2C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCAC68()
{
}

void sub_100BCAC78()
{
  operator delete();
}

_QWORD *sub_100BCAC8C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021781F8;
  return result;
}

void sub_100BCACB0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021781F8;
}

void sub_100BCACC8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageVO2MaxRetrocomputeStatusQuery", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageVO2MaxRetrocomputeStatusQuery\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAEDBC(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCAEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCAF24(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCAF60()
{
}

void sub_100BCAF70()
{
  operator delete();
}

_QWORD *sub_100BCAF84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102178278;
  return result;
}

void sub_100BCAFA8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102178278;
}

void sub_100BCAFC0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageWriteContextConfiguration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageWriteContextConfiguration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BAF1D0(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCB1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCB21C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCB258()
{
}

void sub_100BCB268()
{
  operator delete();
}

_QWORD *sub_100BCB27C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021782F8;
  return result;
}

void sub_100BCB2A0(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021782F8;
}

void sub_100BCB2B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageColdStorageQueryConfiguration", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageColdStorageQueryConfiguration\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  sub_100BAF7C8((id *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)&v4->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCB4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCB514(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCB550()
{
}

void sub_100BCB560()
{
  operator delete();
}

_QWORD *sub_100BCB574()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102178378;
  return result;
}

void sub_100BCB598(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102178378;
}

void sub_100BCB5B0(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageCollectMetricsForFunction", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageCollectMetricsForFunction\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BAFD94(v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100BCB798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BCB80C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BCB848()
{
}

void sub_100BCB854(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_102178428, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100BCB8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BCB8F4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_102178430, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100BCB980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BCB994(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_102178438, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100BCBA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BCBA34(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_102178440, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100BCBAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BCBAD4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_102178448, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 24))(a1, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100BCBB60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BCBBBC()
{
  std::__shared_weak_count *v0;

  std::__shared_weak_count::__release_weak(v0);
}

void sub_100BCBBC4()
{
  os_activity_scope_state_s *v0;

  os_activity_scope_leave(v0);
}

void sub_100BCBBE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 0x2Cu);
}

void sub_100BCBC28(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x2Cu);
}

void sub_100BCBC3C(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_impl(a1, v9, OS_LOG_TYPE_INFO, a4, &a9, 0x2Cu);
}

_QWORD *sub_100BCBC50(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

void sub_100BCBC8C()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C17774;
      v1[3] = unk_101C17784;
      v1[4] = xmmword_101C17794;
      v1[0] = xmmword_101C17754;
      v1[1] = unk_101C17764;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100BCBD60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100BCBD78()
{
  NSDictionary *result;
  _QWORD v1[7];
  _QWORD v2[7];

  sub_1015A2E04(qword_102307178, "Acc800Fp");
  dword_102307190 = 800;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102307178, (void *)&_mh_execute_header);
  sub_1015A2E04(qword_102307198, "DmFp");
  dword_1023071B0 = 200;
  __cxa_atexit((void (*)(void *))sub_1005CB0EC, qword_102307198, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxPowerBudgetEstimatorQueryLookbackInterval");
  v2[0] = &off_102220648;
  v1[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetRefreshInterval");
  v2[1] = &off_102220660;
  v1[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds");
  v2[2] = &off_102220678;
  v1[3] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationBudgetAllowanceSeconds");
  v2[3] = &off_102220690;
  v1[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationExtendedBudgetAllowanceSeconds");
  v2[4] = &off_1022206A8;
  v1[5] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetAllowanceSeconds");
  v2[5] = &off_1022206C0;
  v1[6] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "SensitiveEscalationGeneralStairsBudgetRefreshInterval");
  v2[6] = &off_1022206D8;
  result = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 7);
  qword_1023071B8 = (uint64_t)result;
  return result;
}

uint64_t sub_100BCBF40(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = -1;
  sub_1015A2E04((_QWORD *)(a1 + 24), "");
  return a1;
}

uint64_t sub_100BCBF80(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (__cdecl **v6)(std::basic_stringstream<char> *__hidden);
  int v8;
  void (__cdecl **v9[3])(std::basic_stringstream<char> *__hidden);
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_100512D24(v9, a2, 24);
  v8 = 0;
  v3 = std::istream::operator>>(v9, &v8);
  v4 = std::istream::operator>>(v3, a1 + 8);
  v5 = std::istream::operator>>(v4, a1 + 4);
  std::istream::operator>>(v5, a1 + 16);
  *(_DWORD *)a1 = v8;
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v9
  v9[2] = v6;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf(v10);
  std::ios::~ios(&v12);
  return a1;
}

void sub_100BCC060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 47) < 0)
    operator delete(*v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BCC090@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  _QWORD v14[10];
  char v15;
  uint64_t v16;
  char v17;

  sub_100263E50((uint64_t)v12);
  v4 = (_QWORD *)std::ostream::operator<<(&v13, *a1);
  v17 = 32;
  v5 = sub_100263F7C(v4, (uint64_t)&v17, 1);
  v6 = (_QWORD *)std::ostream::operator<<(v5, a1[2]);
  v17 = 32;
  v7 = sub_100263F7C(v6, (uint64_t)&v17, 1);
  v8 = (_QWORD *)std::ostream::operator<<(v7, a1[1]);
  v17 = 32;
  v9 = sub_100263F7C(v8, (uint64_t)&v17, 1);
  std::ostream::operator<<(v9, *((_QWORD *)a1 + 2));
  std::stringbuf::str(a2, v14);
  *(_QWORD *)((char *)v12
  v13 = v10;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_100BCC19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1018B38B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_100BCC1B0(uint64_t a1)
{
  void **v2;
  double result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  LODWORD(v4) = *(_DWORD *)a1;
  *(_QWORD *)((char *)&v4 + 4) = -1;
  sub_1015A2E04(&v5, "");
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = -1;
  v2 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v2);
  result = *(double *)&v5;
  *(_OWORD *)v2 = v5;
  *(_QWORD *)(a1 + 40) = v6;
  return result;
}

uint64_t sub_100BCC240@<X0>(unsigned int *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[10];
  char v34;
  uint64_t v35;

  sub_100263E50((uint64_t)v31);
  v4 = sub_100263F7C(&v32, (uint64_t)"TileId(", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"type=", 5);
  v6 = (_QWORD *)std::ostream::operator<<(v5, *a1);
  v7 = sub_100263F7C(v6, (uint64_t)", typeStr=", 10);
  v8 = sub_1001CC818(*a1);
  v9 = strlen(v8);
  sub_100263F7C(v7, (uint64_t)v8, v9);
  if (*((char *)a1 + 47) < 0)
  {
    if (*((_QWORD *)a1 + 4))
      goto LABEL_3;
  }
  else if (*((_BYTE *)a1 + 47))
  {
LABEL_3:
    v10 = sub_100263F7C(&v32, (uint64_t)", path=", 7);
    v11 = *((char *)a1 + 47);
    if (v11 >= 0)
      v12 = (uint64_t)(a1 + 6);
    else
      v12 = *((_QWORD *)a1 + 3);
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)a1 + 47);
    else
      v13 = *((_QWORD *)a1 + 4);
    sub_100263F7C(v10, v12, v13);
    goto LABEL_12;
  }
  v14 = sub_100263F7C(&v32, (uint64_t)", corner=(", 10);
  v15 = *v14;
  *(uint64_t *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 16) = 4;
  *(_DWORD *)((char *)v14 + *(_QWORD *)(v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v14 + *(_QWORD *)(v15 - 24) + 8) & 0xFFFFFEFB | 4;
  v16 = (_QWORD *)std::ostream::operator<<(v14, (double)(int)a1[2] / 10000.0 + -90.0);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = *v17;
  *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 16) = 4;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  v19 = (_QWORD *)std::ostream::operator<<(v17, (double)(int)a1[1] / 10000.0 + -180.0);
  v20 = sub_100263F7C(v19, (uint64_t)")", 1);
  v21 = sub_100263F7C(v20, (uint64_t)", tileY=", 8);
  v22 = (_QWORD *)std::ostream::operator<<(v21, a1[2]);
  v23 = sub_100263F7C(v22, (uint64_t)", tileX=", 8);
  v24 = (_QWORD *)std::ostream::operator<<(v23, a1[1]);
  v25 = sub_100263F7C(v24, (uint64_t)", skey=", 7);
  v30 = 48;
  v26 = sub_100B06348(v25, &v30);
  v27 = *v26;
  *(uint64_t *)((char *)v26 + *(_QWORD *)(*v26 - 24) + 24) = 16;
  *(_DWORD *)((char *)v26 + *(_QWORD *)(v27 - 24) + 8) = *(_DWORD *)((_BYTE *)v26 + *(_QWORD *)(v27 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v26 + *(_QWORD *)(v27 - 24) + 8) |= 0x4000u;
  std::ostream::operator<<(v26, *((_QWORD *)a1 + 2));
LABEL_12:
  sub_100263F7C(&v32, (uint64_t)")", 1);
  std::stringbuf::str(a2, v33);
  *(_QWORD *)((char *)v31
  v32 = v28;
  if (v34 < 0)
    operator delete((void *)v33[8]);
  std::streambuf::~streambuf(v33);
  return std::ios::~ios(&v35);
}

void sub_100BCC528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BCC54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  uint64_t result;

  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
  {
    return 0;
  }
  v2 = *(unsigned __int8 *)(a1 + 47);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 47);
  else
    v3 = *(_QWORD *)(a1 + 32);
  v4 = *(unsigned __int8 *)(a2 + 47);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 32);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 24);
  v9 = *(unsigned __int8 **)(a2 + 24);
  v7 = (unsigned __int8 *)(a2 + 24);
  v8 = v9;
  if (v5 < 0)
    v7 = v8;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, v7, *(_QWORD *)(a1 + 32)) == 0;
  if (!*(_BYTE *)(a1 + 47))
    return 1;
  v10 = v2 - 1;
  do
  {
    v12 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v11 = v12;
    v14 = *v7++;
    v13 = v14;
    v16 = v10-- != 0;
    result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_100BCC62C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  int v5;
  _QWORD *v6;
  const char **v7;
  const char *v8;
  size_t v9;
  NSObject *v10;
  const char *v11;
  void **v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[10];
  char v35;
  uint64_t v36;
  _BYTE buf[12];
  __int16 v38;
  void **v39;
  char v40;
  int v41;
  const char **v42;
  __int16 v43;
  _BYTE *v44;
  void *__p[2];
  char v46;

  v4 = *(_DWORD *)(a1 + 4);
  v5 = *(_DWORD *)(a1 + 8);
  sub_100263E50((uint64_t)v32);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
LABEL_3:
    v6 = sub_100263F7C(&v33, (uint64_t)"/", 1);
    v7 = (const char **)(a1 + 24);
    v8 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v8 = *v7;
    v9 = strlen(v8);
    sub_100263F7C(v6, (uint64_t)v8, v9);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102178470);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v11 = (const char *)(a1 + 24);
      if (*(char *)(a1 + 47) < 0)
        v11 = *v7;
      std::stringbuf::str(__p, v34);
      if (v46 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v11;
      v38 = 2080;
      v39 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TmmFile, name, path, %s, servername, %s", buf, 0x16u);
      if (v46 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178470);
      if (*(char *)(a1 + 47) < 0)
        v7 = (const char **)*v7;
      v13 = qword_1022A02D8;
      std::stringbuf::str(buf, v34);
      if (v40 >= 0)
        v14 = buf;
      else
        v14 = *(_BYTE **)buf;
      v41 = 136315394;
      v42 = v7;
      v43 = 2080;
      v44 = v14;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v13, 2, "TmmFile, name, path, %s, servername, %s", (const char *)&v41, 22);
      v16 = v15;
      if (v40 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "std::string TileId::getServerFileName() const", "%s\n", v16);
      if (v16 != (char *)__p)
        free(v16);
    }
    goto LABEL_30;
  }
  v17 = sub_100263F7C(&v33, (uint64_t)"/", 1);
  v18 = (_QWORD *)std::ostream::operator<<(v17, (int)((double)v5 / 10000.0));
  v19 = sub_100263F7C(v18, (uint64_t)"/", 1);
  v20 = (_QWORD *)std::ostream::operator<<(v19, (int)((double)v4 / 10000.0));
  v21 = sub_100263F7C(v20, (uint64_t)"/", 1);
  LOBYTE(__p[0]) = 48;
  v22 = sub_100B06348(v21, (char *)__p);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = 7;
  v23 = (_QWORD *)std::ostream::operator<<(v22, *(unsigned int *)(a1 + 8));
  v24 = sub_100263F7C(v23, (uint64_t)"_", 1);
  buf[0] = 48;
  v25 = sub_100B06348(v24, buf);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(*v25 - 24) + 24) = 7;
  std::ostream::operator<<(v25, *(unsigned int *)(a1 + 4));
  if (*(_QWORD *)(a1 + 16) != -1)
  {
    v26 = sub_100263F7C(&v33, (uint64_t)"_", 1);
    LOBYTE(__p[0]) = 48;
    v27 = sub_100B06348(v26, (char *)__p);
    v28 = *v27;
    *(uint64_t *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 24) = 16;
    *(_DWORD *)((char *)v27 + *(_QWORD *)(v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(v28 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v27 + *(_QWORD *)(v28 - 24) + 8) |= 0x4000u;
    std::ostream::operator<<(v27, *(_QWORD *)(a1 + 16));
  }
LABEL_30:
  std::stringbuf::str(__p, v34);
  if (v46 >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  sub_1015A2E04(a2, v29);
  if (v46 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v32
  v33 = v30;
  if (v35 < 0)
    operator delete((void *)v34[8]);
  std::streambuf::~streambuf(v34);
  return std::ios::~ios(&v36);
}

void sub_100BCCAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  sub_1018B38B4((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100BCCB3C(int *a1)
{
  return sub_100FC7764(*a1);
}

void sub_100BCCB44(int *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  size_t v7;
  std::string *p_p;
  char *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string __p;

  v5 = sub_100FC7764(*a1);
  v6 = (char *)v5;
  if (*(char *)(v5 + 23) >= 0)
    v7 = *(unsigned __int8 *)(v5 + 23);
  else
    v7 = *(_QWORD *)(v5 + 8);
  p_p = &__p;
  sub_100259584((uint64_t)&__p, v7 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (v6[23] >= 0)
      v9 = v6;
    else
      v9 = *(char **)v6;
    memmove(p_p, v9, v7);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 47;
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&__p, v11, v12);
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100BCCC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100BCCC4C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100BCCC78(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100BCCD58(uint64_t a1, char *a2, void *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  NSObject *v14;
  id v15;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint8_t *v23;
  uint64_t v24;
  int v25;
  id v26;
  uint8_t buf[4];
  id v28;

  v8 = sub_1006DAF10(a1, a2, a3);
  *(_QWORD *)v8 = off_1021784A0;
  *(_OWORD *)(v8 + 120) = 0u;
  v9 = (uint64_t *)(v8 + 120);
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = -[CLBundleLocationProviderContext initWithBundleLocationProvider:inSilo:]([CLBundleLocationProviderContext alloc], "initWithBundleLocationProvider:inSilo:", a1, *(_QWORD *)(a1 + 40));
  *(_BYTE *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 180) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 188) = 0;
  if (a4 | a5)
  {
    if (a5)
    {
      if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", a5))
      {
        *(_QWORD *)(a1 + 152) = objc_msgSend((id)a5, "copy");
        *(_BYTE *)(a1 + 176) = 1;
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102178618);
        v13 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          v28 = objc_msgSend((id)a5, "UTF8String");
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "#BLP bundle path does not exist, %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_102178618);
          v17 = qword_1022A01D8;
          v25 = 136446210;
          v26 = objc_msgSend((id)a5, "UTF8String");
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 17, "#BLP bundle path does not exist, %{public}s", &v25, 12);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 0, "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
      }
    }
    if (a4)
    {
      if (sub_100020780((void *)a4))
      {
        *(_QWORD *)(a1 + 160) = objc_msgSend((id)a4, "copy");
        *(_BYTE *)(a1 + 176) = 1;
        goto LABEL_28;
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102178618);
      v14 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v15 = objc_msgSend((id)a4, "UTF8String");
        *(_DWORD *)buf = 136446210;
        v28 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "#BLP no application installed backed by bundle identifier, %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102178618);
        v20 = qword_1022A01D8;
        v21 = objc_msgSend((id)a4, "UTF8String");
        v25 = 136446210;
        v26 = v21;
        LODWORD(v24) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 17, "#BLP no application installed backed by bundle identifier, %{public}s", &v25, v24);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 0, "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
    }
    if (!*(_BYTE *)(a1 + 176))
      return a1;
LABEL_28:
    *v9 = sub_100BCD2AC((_QWORD *)a1);
    return a1;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102178618);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102178618);
    LOWORD(v25) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier", &v25, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "CLBundleLocationProvider::CLBundleLocationProvider(const char *, id<CLIntersiloUniverse>, CFStringRef, CFStringRef)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return a1;
}

void sub_100BCD27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1006DB4AC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BCD2AC(_QWORD *a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[6];
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (*(_OWORD *)(a1 + 19) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102178638);
    v1 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "BLP: Need a bundle path or a bundle identifier.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BLP: Need a bundle path or a bundle identifier.", v16, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "CLClientRef CLBundleLocationProvider::createClient()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    return 0;
  }
  else
  {
    v4 = a1[21];
    v16[0] = 0;
    v16[1] = v4;
    v16[2] = sub_10006BDF0;
    v16[3] = j__objc_release;
    v16[4] = 0;
    v5 = CLClientCreateWithBundleIdentifierAndPathOnSilo(kCFAllocatorDefault, sub_10008E9D0, v16);
    v2 = v5;
    if (v5)
    {
      CLClientSetAllowsMapCorrection(v5, 0);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v7 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
        *(_DWORD *)buf = 136446210;
        v20 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "BLP: Couldn't create client for bundle path %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v11 = qword_1022A02D8;
        v12 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), a1[20], a1[19]), "UTF8String");
        v17 = 136446210;
        v18 = v12;
        LODWORD(v15) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 17, "BLP: Couldn't create client for bundle path %{public}s", &v17, v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "CLClientRef CLBundleLocationProvider::createClient()", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
  return v2;
}

uint64_t sub_100BCD638(uint64_t a1)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)a1 = off_1021784A0;
  objc_msgSend(*(id *)(a1 + 168), "invalidate");

  *(_QWORD *)(a1 + 168) = 0;
  if (*(_QWORD *)(a1 + 120))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 120));
    *(_QWORD *)(a1 + 120) = 0;
  }
  if (*(_QWORD *)(a1 + 128))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 128));
    *(_QWORD *)(a1 + 128) = 0;
  }
  if (*(_QWORD *)(a1 + 136))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 136));
    *(_QWORD *)(a1 + 136) = 0;
  }
  if (*(_QWORD *)(a1 + 144))
  {
    CLClientInvalidate();
    CFRelease(*(CFTypeRef *)(a1 + 144));
    *(_QWORD *)(a1 + 144) = 0;
  }
  v2 = *(const void **)(a1 + 152);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v3 = *(const void **)(a1 + 160);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 160) = 0;
  }
  return sub_1006DB4AC(a1);
}

void sub_100BCD700(uint64_t a1)
{
  sub_100BCD638(a1);
  operator delete();
}

void sub_100BCD724(uint64_t a1)
{
  _BOOL4 v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  const char *v6;
  double v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  double v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint8_t *v34;
  NSObject *v35;
  id v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  NSObject *v40;
  const char *v41;
  double v42;
  NSObject *v43;
  const char *v44;
  NSObject *v45;
  const char *v46;
  int v47;
  NSObject *v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  const char *v52;
  uint8_t *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint8_t *v57;
  uint64_t v58;
  const char *v59;
  const char *v60;
  uint8_t *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  const char *v65;
  uint8_t *v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  uint8_t *v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  uint8_t *v74;
  uint64_t v75;
  const char *v76;
  const char *v77;
  uint8_t *v78;
  uint64_t v79;
  const char *v80;
  const char *v81;
  uint8_t *v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  uint8_t *v86;
  uint64_t v87;
  const char *v88;
  const char *v89;
  uint8_t *v90;
  uint64_t v91;
  const char *v92;
  const char *v93;
  uint8_t *v94;
  const char *v95;
  uint8_t *v96;
  uint64_t v97;
  const char *v98;
  const char *v99;
  const char *v100;
  int v101;
  int v102;
  _BYTE v103[18];
  __int16 v104;
  int v105;
  uint8_t buf[4];
  _BYTE v107[18];
  __int16 v108;
  int v109;

  if (*(_QWORD *)(a1 + 120))
  {
    *(_DWORD *)buf = 0;
    v2 = 1;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      v3 = 0xFFFFFFFFLL;
    }
    else
    {
      *(_DWORD *)buf = 1;
      if (sub_1001B7864(a1, (int *)buf, 1))
      {
        v3 = 100;
        v2 = 1;
      }
      else
      {
        *(_DWORD *)buf = 2;
        v4 = sub_1001B7864(a1, (int *)buf, 1);
        v2 = v4 != 0;
        if (v4)
          v3 = 3000;
        else
          v3 = 2147483646;
      }
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102178638);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v107 = v3;
      *(_WORD *)&v107[4] = 2080;
      *(_QWORD *)&v107[6] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BLP: Registering with desired accuracy %d (%s)", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v54 = qword_1022A02D8;
      v55 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
      v102 = 67109378;
      *(_DWORD *)v103 = v3;
      *(_WORD *)&v103[4] = 2080;
      *(_QWORD *)&v103[6] = v55;
      LODWORD(v98) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v54, 2, "BLP: Registering with desired accuracy %d (%s)", &v102, v98);
      v57 = (uint8_t *)v56;
      sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
    if (v2)
    {
      v7 = sub_100BCEDFC(a1, (uint64_t)&unk_101C1D218, 3);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v8 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v9 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 134218242;
        *(double *)v107 = v7;
        *(_WORD *)&v107[8] = 2080;
        *(_QWORD *)&v107[10] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BLP: Location distance filter is now %.2f (%s)", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v75 = qword_1022A02D8;
        v76 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 134218242;
        *(double *)v103 = v7;
        *(_WORD *)&v103[8] = 2080;
        *(_QWORD *)&v103[10] = v76;
        LODWORD(v100) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v75, 2, "BLP: Location distance filter is now %.2f (%s)", COERCE_DOUBLE(&v102), v100);
        v78 = (uint8_t *)v77;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v77);
        if (v78 != buf)
          free(v78);
      }
      CLClientStartLocationUpdates(*(_QWORD *)(a1 + 120), v3, v7);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v10 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v11 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v107 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BLP: Stopping location updates (%s)", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v79 = qword_1022A02D8;
        v80 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 136315138;
        *(_QWORD *)v103 = v80;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 2, "BLP: Stopping location updates (%s)", (const char *)&v102);
        v82 = (uint8_t *)v81;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v81);
        if (v82 != buf)
          free(v82);
      }
      CLClientStopLocationUpdates(*(_QWORD *)(a1 + 120));
    }
  }
  if (*(_QWORD *)(a1 + 128))
  {
    *(_DWORD *)buf = 4;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
LABEL_35:
      v14 = 2147483646;
LABEL_36:
      v15 = sub_100BCEDFC(a1, (uint64_t)&unk_101C1D224, 3);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v16 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v17 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 134218242;
        *(double *)v107 = v15;
        *(_WORD *)&v107[8] = 2080;
        *(_QWORD *)&v107[10] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "BLP: Bystander distance filter is now %.2f (%s)", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v58 = qword_1022A02D8;
        v59 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 134218242;
        *(double *)v103 = v15;
        *(_WORD *)&v103[8] = 2080;
        *(_QWORD *)&v103[10] = v59;
        LODWORD(v99) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v58, 2, "BLP: Bystander distance filter is now %.2f (%s)", COERCE_DOUBLE(&v102), v99);
        v61 = (uint8_t *)v60;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
      CLClientStartLocationUpdates(*(_QWORD *)(a1 + 128), v14, v15);
      goto LABEL_42;
    }
    *(_DWORD *)buf = 3;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v107 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning BLP: CLBundleLocationProvider does not support spectators (%s)", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v87 = qword_1022A02D8;
        v88 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 136315138;
        *(_QWORD *)v103 = v88;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, 0, "#Warning BLP: CLBundleLocationProvider does not support spectators (%s)", (const char *)&v102);
        v90 = (uint8_t *)v89;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v89);
        if (v90 != buf)
          free(v90);
      }
      goto LABEL_35;
    }
    *(_DWORD *)buf = 5;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      v47 = *(_DWORD *)(a1 + 184);
      if (v47 == 1)
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102178658);
        v51 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicWaking", buf, 2u);
        }
        v14 = 2147483641;
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102178658);
          LOWORD(v102) = 0;
          LODWORD(v97) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicWaking", &v102, v97);
          v53 = (uint8_t *)v52;
          sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v52);
          if (v53 != buf)
            free(v53);
        }
      }
      else if (v47)
      {
        v14 = 0x7FFFFFFFLL;
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_102178658);
        v48 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicNonWaking", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_102178658);
          LOWORD(v102) = 0;
          LODWORD(v97) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "BLP: Set newAccuracy based on Rhythmic status: kCLClientLocationAccuracyRhythmicNonWaking", &v102, v97);
          v96 = (uint8_t *)v95;
          sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v95);
          if (v96 != buf)
            free(v96);
        }
        v14 = 2147483642;
      }
      goto LABEL_36;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102178638);
    v49 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v50 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v107 = v50;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "BLP: Stopping bystander location updates (%s)", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v91 = qword_1022A02D8;
      v92 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
      v102 = 136315138;
      *(_QWORD *)v103 = v92;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v91, 2, "BLP: Stopping bystander location updates (%s)", (const char *)&v102);
      v94 = (uint8_t *)v93;
      sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v93);
      if (v94 != buf)
        free(v94);
    }
    CLClientStopLocationUpdates(*(_QWORD *)(a1 + 128));
  }
LABEL_42:
  if (*(_QWORD *)(a1 + 136))
  {
    *(_DWORD *)buf = 22;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      v18 = *(_QWORD *)(a1 + 64);
      if (!v18)
        goto LABEL_54;
      v19 = a1 + 64;
      do
      {
        v20 = *(_DWORD *)(v18 + 32);
        v21 = v20 < 22;
        if (v20 >= 22)
          v22 = (uint64_t *)v18;
        else
          v22 = (uint64_t *)(v18 + 8);
        if (!v21)
          v19 = v18;
        v18 = *v22;
      }
      while (*v22);
      if (v19 == a1 + 64 || *(int *)(v19 + 32) >= 23)
LABEL_54:
        v19 = a1 + 64;
      v23 = *(_QWORD **)(v19 + 40);
      if (v23 == (_QWORD *)(v19 + 48))
      {
        v24 = 0;
      }
      else
      {
        v24 = 0;
        do
        {
          v25 = (_QWORD *)v23[1];
          v26 = v23;
          if (v25)
          {
            do
            {
              v27 = v25;
              v25 = (_QWORD *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v27 = (_QWORD *)v26[2];
              v28 = *v27 == (_QWORD)v26;
              v26 = v27;
            }
            while (!v28);
          }
          v24 += *((unsigned __int8 *)v23 + 56);
          v23 = v27;
        }
        while (v27 != (_QWORD *)(v19 + 48));
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102178678);
      v35 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v36 = objc_msgSend(*(id *)(a1 + 152), "UTF8String");
        v37 = *(_QWORD *)(v19 + 56);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)v107 = v36;
        *(_WORD *)&v107[8] = 2050;
        *(_QWORD *)&v107[10] = v37;
        v108 = 1026;
        v109 = v24;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "@WsbBundle, %{public}s, clients, %{public}ld, numActive, %{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102178678);
        v62 = qword_1022A0058;
        v63 = objc_msgSend(*(id *)(a1 + 152), "UTF8String");
        v64 = *(_QWORD *)(v19 + 56);
        v102 = 136446722;
        *(_QWORD *)v103 = v63;
        *(_WORD *)&v103[8] = 2050;
        *(_QWORD *)&v103[10] = v64;
        v104 = 1026;
        v105 = v24;
        LODWORD(v97) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, 0, "@WsbBundle, %{public}s, clients, %{public}ld, numActive, %{public}d", &v102, v97);
        v66 = (uint8_t *)v65;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v65);
        if (v66 != buf)
          free(v66);
      }
      v101 = 22;
      v38 = sub_100BCEDFC(a1, (uint64_t)&v101, 1);
      if (v24)
        v39 = 2147483644;
      else
        v39 = 2147483645;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v40 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v41 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v107 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "BLP: starting wifi location batch, bundleId, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v67 = qword_1022A02D8;
        v68 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 136315138;
        *(_QWORD *)v103 = v68;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v67, 2, "BLP: starting wifi location batch, bundleId, %s", (const char *)&v102);
        v70 = (uint8_t *)v69;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v69);
        if (v70 != buf)
          free(v70);
      }
      CLClientStartLocationUpdates(*(_QWORD *)(a1 + 136), v39, v38);
    }
    else
    {
      CLClientStopLocationUpdates(*(_QWORD *)(a1 + 136));
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v29 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v30 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v107 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "BLP: stopping wifi location batch, bundleId, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v31 = qword_1022A02D8;
        v32 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 136315138;
        *(_QWORD *)v103 = v32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "BLP: stopping wifi location batch, bundleId, %s", (const char *)&v102);
        v34 = (uint8_t *)v33;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v33);
        if (v34 != buf)
          free(v34);
      }
    }
  }
  if (*(_QWORD *)(a1 + 144))
  {
    *(_DWORD *)buf = 39;
    if (sub_1001B7864(a1, (int *)buf, 1))
    {
      v101 = 39;
      v42 = sub_100BCEDFC(a1, (uint64_t)&v101, 1);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v43 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v44 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v107 = v44;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "BLP: starting BystanderPreLoiOverride, bundleId, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v71 = qword_1022A02D8;
        v72 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 136315138;
        *(_QWORD *)v103 = v72;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 2, "BLP: starting BystanderPreLoiOverride, bundleId, %s", (const char *)&v102);
        v74 = (uint8_t *)v73;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v73);
        if (v74 != buf)
          free(v74);
      }
      CLClientStartLocationUpdates(*(_QWORD *)(a1 + 144), 2147483643, v42);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102178638);
      v45 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v46 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v107 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "BLP: stopping BystanderPreLoiOverride, bundleId, %s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102178638);
        v83 = qword_1022A02D8;
        v84 = -[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bundleIdentifier, %@, bundlePath, %@"), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 152)), "UTF8String");
        v102 = 136315138;
        *(_QWORD *)v103 = v84;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 2, "BLP: stopping BystanderPreLoiOverride, bundleId, %s", (const char *)&v102);
        v86 = (uint8_t *)v85;
        sub_100512490("Generic", 1, 0, 2, "void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()", "%s\n", v85);
        if (v86 != buf)
          free(v86);
      }
      CLClientStopLocationUpdates(*(_QWORD *)(a1 + 144));
    }
  }
}

double sub_100BCEDFC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  BOOL v18;

  if (!a3)
    return 1.79769313e308;
  v3 = 0;
  v6 = *(_QWORD *)(a1 + 64);
  v4 = a1 + 64;
  v5 = v6;
  result = 1.79769313e308;
  do
  {
    if (v5)
    {
      v8 = *(_DWORD *)(a2 + 4 * v3);
      v9 = v4;
      v10 = v5;
      do
      {
        v11 = *(_DWORD *)(v10 + 32);
        v12 = v11 < v8;
        if (v11 >= v8)
          v13 = (uint64_t *)v10;
        else
          v13 = (uint64_t *)(v10 + 8);
        if (!v12)
          v9 = v10;
        v10 = *v13;
      }
      while (*v13);
      if (v9 != v4 && v8 >= *(_DWORD *)(v9 + 32))
      {
        v14 = *(double **)(v9 + 40);
        v15 = (double *)(v9 + 48);
        if (v14 != v15)
        {
          do
          {
            if (v14[6] < result)
              result = v14[6];
            v16 = (double *)*((_QWORD *)v14 + 1);
            if (v16)
            {
              do
              {
                v17 = v16;
                v16 = *(double **)v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                v17 = (double *)*((_QWORD *)v14 + 2);
                v18 = *(_QWORD *)v17 == (_QWORD)v14;
                v14 = v17;
              }
              while (!v18);
            }
            v14 = v17;
          }
          while (v17 != v15);
        }
      }
    }
    ++v3;
  }
  while (v3 != a3);
  return result;
}

uint64_t sub_100BCEEC4(uint64_t a1, int *a2)
{
  int v3;
  uint64_t v4;

  v3 = *a2;
  if ((*a2 - 3) >= 3)
  {
    if (v3 == 22)
    {
      if (*(_QWORD *)(a1 + 136))
        return sub_1001B3B80();
      v4 = sub_100BCD2AC((_QWORD *)a1);
      *(_QWORD *)(a1 + 136) = v4;
    }
    else
    {
      if (v3 != 39 || *(_QWORD *)(a1 + 144))
        return sub_1001B3B80();
      v4 = sub_100BCD2AC((_QWORD *)a1);
      *(_QWORD *)(a1 + 144) = v4;
    }
  }
  else
  {
    if (*(_QWORD *)(a1 + 128))
      return sub_1001B3B80();
    v4 = sub_100BCD2AC((_QWORD *)a1);
    *(_QWORD *)(a1 + 128) = v4;
  }
  if (*(_BYTE *)(a1 + 188))
    CLClientSetMatchInfoEnabled(v4, 1);
  return sub_1001B3B80();
}

uint64_t sub_100BCEF60(uint64_t a1)
{
  sub_100BCD724(a1);
  return sub_10003DFD4(a1);
}

void sub_100BCEF8C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 184) = a2;
  sub_100BCD724(a1);
}

uint64_t sub_100BCEF94(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(unsigned __int8 *)(result + 188) != (_DWORD)a2)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 120);
    if (v4)
      CLClientSetMatchInfoEnabled(v4, a2);
    v5 = *(_QWORD *)(v3 + 128);
    if (v5)
      CLClientSetMatchInfoEnabled(v5, a2);
    v6 = *(_QWORD *)(v3 + 136);
    if (v6)
      CLClientSetMatchInfoEnabled(v6, a2);
    result = *(_QWORD *)(v3 + 144);
    if (result)
      result = CLClientSetMatchInfoEnabled(result, a2);
    *(_BYTE *)(v3 + 188) = a2;
  }
  return result;
}

uint64_t sub_100BCF004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v9;
  __int16 v10;
  int v11;
  int v12;

  v10 = 0;
  v11 = 0;
  v12 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v9 = _Q0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &v9);
}

BOOL sub_100BCF040(uint64_t a1, int a2, int *a3, __int128 *a4)
{
  _BOOL8 v6;
  int v7;
  BOOL v8;

  v6 = sub_100129730(a1, a2, a3, a4);
  if (v6)
  {
    v7 = *a3;
    if (*a3 < 6 || (v7 != 39 ? (v8 = v7 == 22) : (v8 = 1), v8))
      sub_100BCD724(a1);
  }
  return v6;
}

uint64_t sub_100BCF098(uint64_t a1)
{
  return *(unsigned int *)(a1 + 180);
}

uint64_t sub_100BCF0A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 120);
  if (result)
    return CLClientMarkAsHavingReceivedLocation();
  return result;
}

void sub_100BCF0B0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100BCF0DC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100BCF108(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100BCF134(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100BCF160(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100BCF1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100BCF250((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100BCF1DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_10104B594(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100BCF210(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100BCF250(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10104B594(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100BCF2F8(uint64_t a1, void *a2, int a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  int *v54;
  double v55;
  void **v56;
  uint64_t v57;
  void (*v58)(uint64_t, void *, uint64_t);
  void *v59;
  id v60;
  _BYTE v61[3624];
  _QWORD v62[255];
  uint64_t v63;
  char v64;
  uint64_t (**v65)();
  CFAbsoluteTime Current;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  int v84;
  int v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;
  __int16 v95;
  int v96;

  objc_msgSend(a2, "coordinate");
  v7 = v6;
  objc_msgSend(a2, "coordinate");
  v9 = v8;
  v10 = *(_BYTE *)(a1 + 1803);
  if (v10)
  {
    v7 = (double)sub_1000AE470(COERCE_UNSIGNED_INT64(ceil(v7 * 500.0) / 500.0));
    v9 = (double)sub_1000AE470(COERCE_UNSIGNED_INT64(ceil(v9 * 500.0) / 500.0));
  }
  v65 = off_102172218;
  v67 = v7;
  v68 = v9;
  objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
  v69 = v11;
  objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
  v70 = v12;
  objc_msgSend(a2, "horizontalAccuracy");
  v71 = v13;
  v72 = a3;
  Current = CFAbsoluteTimeGetCurrent();
  v14 = sub_1011B78D4();
  sub_1011B8DB0(v14, (uint64_t)&v65);
  sub_1015EB864(v62);
  sub_1016058C0((uint64_t)v62);
  v64 |= 1u;
  *(CFAbsoluteTime *)&v62[77] = Current;
  v15 = v63;
  *(_WORD *)(v63 + 92) |= 0x40u;
  *(double *)(v15 + 56) = v7;
  v16 = v63;
  *(_WORD *)(v63 + 92) |= 0x20u;
  *(double *)(v16 + 48) = v9;
  v17 = v63;
  *(_WORD *)(v63 + 92) |= 0x800u;
  *(_BYTE *)(v17 + 88) = v10;
  v18 = v63;
  objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
  *(_WORD *)(v18 + 92) |= 4u;
  *(_QWORD *)(v18 + 24) = v19;
  v20 = v63;
  objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
  *(_WORD *)(v20 + 92) |= 1u;
  *(_QWORD *)(v20 + 8) = v21;
  v22 = v63;
  objc_msgSend(a2, "horizontalAccuracy");
  *(_WORD *)(v22 + 92) |= 0x10u;
  *(_QWORD *)(v22 + 40) = v23;
  v24 = v63;
  *(_WORD *)(v63 + 92) |= 0x200u;
  *(_DWORD *)(v24 + 80) = a3;
  v25 = v63;
  *(_WORD *)(v63 + 92) |= 0x400u;
  *(_DWORD *)(v25 + 84) = -1;
  v26 = v63;
  *(_WORD *)(v63 + 92) |= 0x100u;
  *(_QWORD *)(v26 + 72) = 0x407F400000000000;
  v27 = objc_alloc((Class)CLLocation);
  objc_msgSend(a2, "coordinate");
  v29 = v28;
  objc_msgSend(a2, "coordinate");
  v30 = objc_msgSend(v27, "initWithLatitude:longitude:", v29);
  v31 = *(void **)(a1 + 2048);
  v56 = _NSConcreteStackBlock;
  v57 = 3321888768;
  v58 = sub_100BEB920;
  v59 = &unk_102178860;
  sub_1015F5B28(v61, v62);
  v60 = v30;
  objc_msgSend(v31, "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:", v30, &v56, 500.0);

  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v62);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v32 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(a2, "coordinate");
    v34 = v33;
    objc_msgSend(a2, "coordinate");
    v36 = v35;
    objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
    v38 = v37;
    objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
    v40 = v39;
    objc_msgSend(a2, "horizontalAccuracy");
    v85 = 134219264;
    v86 = v34;
    v87 = 2048;
    v88 = v36;
    v89 = 2048;
    v90 = v38;
    v91 = 2048;
    v92 = v40;
    v93 = 2048;
    v94 = v41;
    v95 = 1024;
    v96 = a3;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Received an LOI notification:longitude,%f,lattitude,%f,\t\t\t\t\tdepartureDate,%f,arrivalDate,%f,\t\t\t\t\thorizontalAccuracy,%f,confidence,%d", (uint8_t *)&v85, 0x3Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v85, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v43 = qword_10229FC78;
    objc_msgSend(a2, "coordinate");
    v45 = v44;
    objc_msgSend(a2, "coordinate");
    v47 = v46;
    objc_msgSend(objc_msgSend(a2, "departureDate"), "timeIntervalSinceReferenceDate");
    v49 = v48;
    objc_msgSend(objc_msgSend(a2, "arrivalDate"), "timeIntervalSinceReferenceDate");
    v51 = v50;
    objc_msgSend(a2, "horizontalAccuracy");
    v73 = 134219264;
    v74 = v45;
    v75 = 2048;
    v76 = v47;
    v77 = 2048;
    v78 = v49;
    v79 = 2048;
    v80 = v51;
    v81 = 2048;
    v82 = v52;
    v83 = 1024;
    v84 = a3;
    LODWORD(v55) = 58;
    _os_log_send_and_compose_impl(2, 0, &v85, 1628, &_mh_execute_header, v43, 0, "Received an LOI notification:longitude,%f,lattitude,%f,\t\t\t\t\tdepartureDate,%f,arrivalDate,%f,\t\t\t\t\thorizontalAccuracy,%f,confidence,%d", COERCE_DOUBLE(&v73), v55, *(double *)&v56, *(double *)&v57, *(double *)&v58, (_DWORD)v59);
    v54 = (int *)v53;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)", "%s\n", v53);
    if (v54 != &v85)
      free(v54);
  }
  sub_1015EE304((PB::Base *)v61);
  return sub_1015EE304((PB::Base *)v62);
}

void sub_100BCF884(_Unwind_Exception *a1)
{
  PB::Base *v1;

  sub_1015EE304(v1);
  sub_1015EE304((PB::Base *)&STACK[0xE60]);
  _Unwind_Resume(a1);
}

uint64_t sub_100BCF8F4(uint64_t result)
{
  if (*(_BYTE *)(result + 1854))
  {
    CFAbsoluteTimeGetCurrent();
    sub_10163B1DC();
  }
  return result;
}

void sub_100BCF9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  sub_1015EE304((PB::Base *)&a9);
  v11 = *(_QWORD *)(v9 - 40);
  *(_QWORD *)(v9 - 40) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BCFA10(uint64_t result, uint64_t a2)
{
  _BYTE v3[248];

  if (*(_BYTE *)(result + 1903))
  {
    CFAbsoluteTimeGetCurrent();
    sub_100ECEE80(a2, (uint64_t)v3);
  }
  return result;
}

void sub_100BCFB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  sub_10162FD3C((PB::Base *)&STACK[0xE28]);
  _Unwind_Resume(a1);
}

uint64_t sub_100BCFB28(uint64_t a1, void *a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t j;
  uint64_t k;
  _QWORD *v33;
  _DWORD *v34;
  unint64_t v35;
  char *v36;
  _DWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  uint64_t v46;
  int v47;
  _QWORD v49[411];
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;

  sub_1015EB864(v49);
  sub_10160346C((uint64_t)v49);
  Current = CFAbsoluteTimeGetCurrent();
  v51 |= 1u;
  *(CFAbsoluteTime *)&v49[77] = Current;
  v4 = v50;
  objc_msgSend(a2, "timestamp");
  *(_BYTE *)(v4 + 100) |= 0x10u;
  *(_QWORD *)(v4 + 88) = v5;
  v6 = v50;
  if (a2)
  {
    objc_msgSend(a2, "location");
    v7 = v52;
    *(_BYTE *)(v6 + 100) |= 4u;
    *(_QWORD *)(v6 + 72) = v7;
    v8 = v50;
    objc_msgSend(a2, "location");
    v9 = *((_QWORD *)&v52 + 1);
    *(_BYTE *)(v8 + 100) |= 8u;
    *(_QWORD *)(v8 + 80) = v9;
    v10 = v50;
    objc_msgSend(a2, "location");
    v11 = v53;
    *(_BYTE *)(v10 + 100) |= 1u;
    *(_QWORD *)(v10 + 56) = v11;
    v12 = v50;
    objc_msgSend(a2, "location");
    v13 = v54;
  }
  else
  {
    *(_BYTE *)(v50 + 100) |= 4u;
    *(_QWORD *)(v6 + 72) = 0;
    v14 = v50;
    *(_BYTE *)(v50 + 100) |= 8u;
    *(_QWORD *)(v14 + 80) = 0;
    v15 = v50;
    *(_BYTE *)(v50 + 100) |= 1u;
    *(_QWORD *)(v15 + 56) = 0;
    v12 = v50;
    v13 = 0;
  }
  v16 = 0;
  *(_BYTE *)(v12 + 100) |= 2u;
  *(_QWORD *)(v12 + 64) = v13;
  do
  {
    for (i = 0; i != 4; ++i)
    {
      v18 = (_QWORD *)v50;
      if (a2)
      {
        objc_msgSend(a2, "transform");
      }
      else
      {
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
      }
      v19 = *((_QWORD *)&v52 + 4 * i + (v16 & 3));
      v20 = v18[6];
      v21 = (char *)v18[5];
      if ((unint64_t)v21 >= v20)
      {
        v23 = (char *)v18[4];
        v24 = (v21 - v23) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          sub_100259694();
        v25 = v20 - (_QWORD)v23;
        v26 = (uint64_t)(v20 - (_QWORD)v23) >> 2;
        if (v26 <= v24 + 1)
          v26 = v24 + 1;
        if (v25 >= 0x7FFFFFFFFFFFFFF8)
          v27 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
        {
          v28 = (char *)sub_10025E6A0((uint64_t)(v18 + 6), v27);
          v23 = (char *)v18[4];
          v21 = (char *)v18[5];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[8 * v24];
        *(_QWORD *)v29 = v19;
        v22 = v29 + 8;
        while (v21 != v23)
        {
          v30 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v29 - 1) = v30;
          v29 -= 8;
        }
        v18[4] = v29;
        v18[5] = v22;
        v18[6] = &v28[8 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v21 = v19;
        v22 = v21 + 8;
      }
      v18[5] = v22;
    }
    ++v16;
  }
  while (v16 != 4);
  for (j = 0; j != 6; ++j)
  {
    for (k = 0; k != 6; ++k)
    {
      v33 = (_QWORD *)v50;
      if (a2)
      {
        objc_msgSend(a2, "covariance");
      }
      else
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v52 = 0u;
      }
      v34 = (_DWORD *)&v52 + 6 * k + j;
      v35 = v33[3];
      v36 = (char *)v33[2];
      if ((unint64_t)v36 >= v35)
      {
        v38 = (char *)v33[1];
        v39 = (v36 - v38) >> 2;
        if ((unint64_t)(v39 + 1) >> 62)
          sub_100259694();
        v40 = v35 - (_QWORD)v38;
        v41 = (uint64_t)(v35 - (_QWORD)v38) >> 1;
        if (v41 <= v39 + 1)
          v41 = v39 + 1;
        if (v40 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          v43 = (char *)sub_100260634((uint64_t)(v33 + 3), v42);
          v38 = (char *)v33[1];
          v36 = (char *)v33[2];
        }
        else
        {
          v43 = 0;
        }
        v44 = &v43[4 * v39];
        *(_DWORD *)v44 = *v34;
        v37 = v44 + 4;
        while (v36 != v38)
        {
          v45 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v44 - 1) = v45;
          v44 -= 4;
        }
        v33[1] = v44;
        v33[2] = v37;
        v33[3] = &v43[4 * v42];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *(_DWORD *)v36 = *v34;
        v37 = v36 + 4;
      }
      v33[2] = v37;
    }
  }
  v46 = v50;
  objc_msgSend(a2, "confidence");
  *(_BYTE *)(v46 + 100) |= 0x20u;
  *(_DWORD *)(v46 + 96) = v47;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v49);
  return sub_1015EE304((PB::Base *)v49);
}

void sub_100BCFF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BCFFA8(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  sub_100BE4CF0(a1, 0);
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_1021789C8);
  v1 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "onPedestrianFenceNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "onPedestrianFenceNotification", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onPedestrianFenceExit()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

uint64_t sub_100BD013C(uint64_t a1, void *a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD v31[177];
  uint64_t v32;
  char v33;

  sub_1015EB864(v31);
  Current = CFAbsoluteTimeGetCurrent();
  v33 |= 1u;
  *(CFAbsoluteTime *)&v31[77] = Current;
  sub_101604538((uint64_t)v31);
  v4 = v32;
  objc_msgSend(a2, "timestamp");
  *(_WORD *)(v4 + 68) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v32;
  if (objc_msgSend(a2, "deltaPositionX"))
    objc_msgSend(objc_msgSend(a2, "deltaPositionX"), "floatValue");
  else
    v7 = 2143289344;
  *(_WORD *)(v6 + 68) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  v8 = v32;
  if (objc_msgSend(a2, "deltaPositionY"))
    objc_msgSend(objc_msgSend(a2, "deltaPositionY"), "floatValue");
  else
    v9 = 2143289344;
  *(_WORD *)(v8 + 68) |= 4u;
  *(_DWORD *)(v8 + 20) = v9;
  v10 = v32;
  if (objc_msgSend(a2, "deltaPositionZ"))
    objc_msgSend(objc_msgSend(a2, "deltaPositionZ"), "floatValue");
  else
    v11 = 2143289344;
  *(_WORD *)(v10 + 68) |= 8u;
  *(_DWORD *)(v10 + 24) = v11;
  v12 = v32;
  if (objc_msgSend(a2, "deltaVelocityX"))
    objc_msgSend(objc_msgSend(a2, "deltaVelocityX"), "floatValue");
  else
    v13 = 2143289344;
  *(_WORD *)(v12 + 68) |= 0x10u;
  *(_DWORD *)(v12 + 28) = v13;
  v14 = v32;
  if (objc_msgSend(a2, "deltaVelocityY"))
    objc_msgSend(objc_msgSend(a2, "deltaVelocityY"), "floatValue");
  else
    v15 = 2143289344;
  *(_WORD *)(v14 + 68) |= 0x20u;
  *(_DWORD *)(v14 + 32) = v15;
  v16 = v32;
  if (objc_msgSend(a2, "deltaVelocityZ"))
    objc_msgSend(objc_msgSend(a2, "deltaVelocityZ"), "floatValue");
  else
    v17 = 2143289344;
  *(_WORD *)(v16 + 68) |= 0x40u;
  *(_DWORD *)(v16 + 36) = v17;
  v18 = v32;
  if (objc_msgSend(a2, "quaternionX"))
    objc_msgSend(objc_msgSend(a2, "quaternionX"), "floatValue");
  else
    v19 = 2143289344;
  *(_WORD *)(v18 + 68) |= 0x100u;
  *(_DWORD *)(v18 + 44) = v19;
  v20 = v32;
  if (objc_msgSend(a2, "quaternionY"))
    objc_msgSend(objc_msgSend(a2, "quaternionY"), "floatValue");
  else
    v21 = 2143289344;
  *(_WORD *)(v20 + 68) |= 0x200u;
  *(_DWORD *)(v20 + 48) = v21;
  v22 = v32;
  if (objc_msgSend(a2, "quaternionZ"))
    objc_msgSend(objc_msgSend(a2, "quaternionZ"), "floatValue");
  else
    v23 = 2143289344;
  *(_WORD *)(v22 + 68) |= 0x400u;
  *(_DWORD *)(v22 + 52) = v23;
  v24 = v32;
  if (objc_msgSend(a2, "quaternionW"))
    objc_msgSend(objc_msgSend(a2, "quaternionW"), "floatValue");
  else
    v25 = 2143289344;
  *(_WORD *)(v24 + 68) |= 0x80u;
  *(_DWORD *)(v24 + 40) = v25;
  v26 = v32;
  v27 = objc_msgSend(a2, "referenceFrame");
  *(_WORD *)(v26 + 68) |= 0x800u;
  *(_DWORD *)(v26 + 56) = v27;
  v28 = v32;
  v29 = objc_msgSend(a2, "staticFlag");
  *(_WORD *)(v28 + 68) |= 0x1000u;
  *(_DWORD *)(v28 + 60) = v29;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v31);
  return sub_1015EE304((PB::Base *)v31);
}

void sub_100BD045C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BD048C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_102178720;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a2;
  sub_10023CFD8(a1 + 256, (uint64_t)"MotionDataCollection", a1, 0.0);
  *(_QWORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 784) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_QWORD *)(a1 + 824) = CFSTR("CLMotionLogger");
  *(_BYTE *)(a1 + 832) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  sub_100E4F1B4(a1 + 904, "MotionCalibration", *(_QWORD *)(a1 + 248));
  *(_OWORD *)(a1 + 1121) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  bzero((void *)(a1 + 1144), 0x380uLL);
  sub_100BF2270((unsigned __int8 *)(a1 + 1272));
  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2080) = 0;
  *(_QWORD *)(a1 + 2088) = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "silo"), "newTimer");
  *(_QWORD *)(a1 + 2096) = 0;
  *(_QWORD *)(a1 + 2328) = 0;
  *(_OWORD *)(a1 + 2264) = xmmword_101C1D498;
  *(_OWORD *)(a1 + 2280) = unk_101C1D4A8;
  *(_OWORD *)(a1 + 2296) = xmmword_101C1D4B8;
  *(_OWORD *)(a1 + 2312) = unk_101C1D4C8;
  *(_OWORD *)(a1 + 2200) = xmmword_101C1D458;
  *(_OWORD *)(a1 + 2216) = unk_101C1D468;
  *(_OWORD *)(a1 + 2232) = xmmword_101C1D478;
  *(_OWORD *)(a1 + 2248) = unk_101C1D488;
  *(_OWORD *)(a1 + 2136) = xmmword_101C1D418;
  *(_OWORD *)(a1 + 2152) = unk_101C1D428;
  *(_OWORD *)(a1 + 2168) = xmmword_101C1D438;
  *(_OWORD *)(a1 + 2184) = unk_101C1D448;
  *(_OWORD *)(a1 + 2104) = xmmword_101C1D3F8;
  *(_OWORD *)(a1 + 2120) = unk_101C1D408;
  *(_OWORD *)(a1 + 664) = xmmword_101C1D4F0;
  *(_OWORD *)(a1 + 680) = unk_101C1D500;
  *(_OWORD *)(a1 + 692) = unk_101C1D50C;
  *(_OWORD *)(a1 + 648) = xmmword_101C1D4E0;
  *(_DWORD *)(a1 + 692) = 1088421888;
  *(_QWORD *)(a1 + 720) = 0x200000002;
  sub_1006CB5B4();
}

void sub_100BD12CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = v1[156];
  v1[156] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v1[155];
  v1[155] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v1[154];
  v1[154] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v1[153];
  v1[153] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v1[152];
  v1[152] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v1[151];
  v1[151] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v1[150];
  v1[150] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  sub_10042B248(v1 + 149, 0);
  v14 = v1[148];
  v1[148] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v1[147];
  v1[147] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v1[146];
  v1[146] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v1[145];
  v1[145] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v1[144];
  v1[144] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *v4;
  *v4 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v1[141];
  v1[141] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v1[140];
  v1[140] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v1[139];
  v1[139] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v1[138];
  v1[138] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *v5;
  *v5 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  sub_100BCD638(v3);
  v25 = v1[112];
  v1[112] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v1[111];
  v1[111] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = v1[110];
  v1[110] = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v1[109];
  v1[109] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v1[69];
  v1[69] = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = v1[65];
  v1[65] = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = v1[57];
  v1[57] = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = v1[56];
  v1[56] = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_100E3E6C8(v2);
  sub_1008A1B98(v1);
  _Unwind_Resume(a1);
}

void sub_100BD1610(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionLogger::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100BE45AC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BD17C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD17E8(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onOdometerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BE6ACC(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD199C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD19BC(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onCatherineNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onCatherineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onCatherineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BE7024(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD1B90(uint64_t a1, _DWORD *a2, double *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onVehicleConnectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onVehicleConnectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onVehicleConnectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BE74A4(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD1D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD1D64(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionLogger::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100BE75F0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BD1F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD1F3C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionLogger::onRhythmicGnssModeOfOperationStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onRhythmicGnssModeOfOperationStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onRhythmicGnssModeOfOperationStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100BE8F2C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BD20F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD2114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onGnssLeechLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onGnssLeechLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onGnssLeechLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BE98A8(v6, v7, v8, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD22C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD22E0(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionLogger::onCalorieUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onCalorieUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onCalorieUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100BE907C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BD2498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD24B8(uint64_t a1, _DWORD *a2, char *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onMotionStateUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BEA9B8(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD266C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD268C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionLogger::onLocationDerivedNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onLocationDerivedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onLocationDerivedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100BE7BFC(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BD2844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD2864(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionLogger::onWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100BE9310(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BD2A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD2A3C(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLMotionLogger::onGeomagneticModelNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onGeomagneticModelNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onGeomagneticModelNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  if (!*a2)
  {
    v9 = *a3;
    v10 = a3[1];
    v11 = a3[3];
    *(_OWORD *)(a4 + 760) = a3[2];
    *(_OWORD *)(a4 + 776) = v11;
    *(_OWORD *)(a4 + 728) = v9;
    *(_OWORD *)(a4 + 744) = v10;
  }
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_100BD2C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD2C1C(uint64_t a1, _DWORD *a2, __n128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionLogger::onStepCountNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100BE9588(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100BD2DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD2DF4(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onSignalEnvironmentNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BE96C4(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD2FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD2FC8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onGnssAvailabilityPredictorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onGnssAvailabilityPredictorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onGnssAvailabilityPredictorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BE9790(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD319C(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onFitnessMachineNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onFitnessMachineNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onFitnessMachineNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BEA034(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD3350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD3370(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onMagneticAccessoryEvent");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMagneticAccessoryEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMagneticAccessoryEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BEA2F0(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD3524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD3544(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onDaemonStatus");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BF0F0C(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD36F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD3718(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  CLProfilingIdentify("CLMotionLogger::onBLSData");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onBLSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v10 = qword_1022A0228;
    v7 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onBLSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_100BF176C(v7, v8, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_100BD38CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BD38EC(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 872) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 872) + 8), 2, 0);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v1 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "logging workout events", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v4[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "logging workout events", v4, 2);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::registerForWorkoutEvents()", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
}

void sub_100BD3A84(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  char v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  uint8_t *v31;
  NSObject *v32;
  NSObject *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  const char *v57;
  uint8_t *v58;
  const char *v59;
  uint8_t *v60;
  const char *v61;
  uint8_t *v62;
  const char *v63;
  uint8_t *v64;
  const char *v65;
  uint64_t v66;
  _QWORD v67[5];
  void *v68[2];
  char v69;
  uint64_t v70;
  void *__p[2];
  char v72;
  _QWORD v73[3];
  _QWORD *v74;
  uint8_t v75[8];
  uint8_t buf[8];

  *(_OWORD *)(a1 + 664) = xmmword_101C1D4F0;
  *(_OWORD *)(a1 + 680) = unk_101C1D500;
  *(_OWORD *)(a1 + 692) = unk_101C1D50C;
  *(_OWORD *)(a1 + 648) = xmmword_101C1D4E0;
  *(_DWORD *)(a1 + 692) = 1088421888;
  *(_QWORD *)(a1 + 720) = 0x200000002;
  if (*(_BYTE *)(a1 + 1273))
  {
    if (!*(_BYTE *)(a1 + 800))
    {
      sub_1015A2E04(__p, "ctor");
      sub_10002B684(a1 + 256, (uint64_t *)__p);
      if (v72 < 0)
        operator delete(__p[0]);
    }
  }
  if (*(_BYTE *)(a1 + 1276))
  {
    sub_100197040();
    if (sub_100195F08())
    {
      sub_100197040();
      if (sub_10075D288())
      {
        *(_QWORD *)(a1 + 712) = +[CLLocationIndependenceAssertion newAssertionWithReason:](CLLocationIndependenceAssertion, "newAssertionWithReason:", CFSTR("Log GPS on both devices"));
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021788E8);
        v2 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Taking a CLLocationIndependenceAssertion", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021788E8);
          *(_WORD *)v75 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Taking a CLLocationIndependenceAssertion", v75, 2);
          v60 = (uint8_t *)v59;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v59);
          if (v60 != buf)
            free(v60);
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 1740) == 1)
  {
    sub_100197040();
    if (sub_10075D288())
    {
      if (!*(_BYTE *)(a1 + 800))
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1096) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1096) + 8), 5);
        if (*(_QWORD *)(a1 + 1104))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102178908);
          v3 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#wigo,on,MotionLoggerLocal", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102178908);
            *(_WORD *)v75 = 0;
            LODWORD(v66) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,MotionLoggerLocal", v75, v66);
            v62 = (uint8_t *)v61;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v61);
            if (v62 != buf)
              free(v62);
          }
          AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_1021787B8);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1104) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1104) + 8), 0, 0);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021788E8);
          v4 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Logging GPS: Local source", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_1021788E8);
            *(_WORD *)v75 = 0;
            LODWORD(v66) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging GPS: Local source", v75, v66);
            v6 = (uint8_t *)v5;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v5);
LABEL_292:
            if (v6 != buf)
              free(v6);
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102178908);
          v7 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#wigo,on,MotionLoggerMediated", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102178908);
            *(_WORD *)v75 = 0;
            LODWORD(v66) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,MotionLoggerMediated", v75, v66);
            v64 = (uint8_t *)v63;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v63);
            if (v64 != buf)
              free(v64);
          }
          AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_1021787D8);
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1096) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1096) + 8), 0, 0);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021788E8);
          v8 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Logging GPS: Mediated source", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_1021788E8);
            *(_WORD *)v75 = 0;
            LODWORD(v66) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging GPS: Mediated source", v75, v66);
            v6 = (uint8_t *)v65;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v65);
            goto LABEL_292;
          }
        }
      }
    }
  }
  if (*(double *)(a1 + 1296) > 0.0 && sub_10024095C())
    operator new();
  if (*(double *)(a1 + 1320) > 0.0 && sub_100680488())
    operator new();
  if (*(double *)(a1 + 1344) > 0.0 && sub_10021C350())
  {
    v70 = *(_QWORD *)(a1 + 1344);
    operator new();
  }
  if (*(double *)(a1 + 1368) > 0.0 && sub_1000A6A30())
    operator new();
  if (*(double *)(a1 + 1392) > 0.0 && sub_1000824CC())
    operator new();
  if (*(double *)(a1 + 1416) > 0.0)
  {
    if (sub_1002433D4())
    {
      v9 = *(_DWORD *)(a1 + 1712);
      if (v9)
      {
        if (v9 == 15)
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1176) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1176) + 8), 0, 0);
        -[CLDeviceMotionProperties initWithMode:]([CLDeviceMotionProperties alloc], "initWithMode:", *(unsigned int *)(a1 + 1712));
        operator new();
      }
    }
  }
  if (*(_BYTE *)(a1 + 1776))
    operator new();
  if (*(_BYTE *)(a1 + 1788))
    operator new();
  if (*(double *)(a1 + 1440) > 0.0 && *(_DWORD *)(a1 + 1460) && sub_1012670A4())
    operator new();
  if (*(_BYTE *)(a1 + 1469) && sub_101247B6C())
  {
    objc_msgSend(*(id *)(a1 + 248), "silo");
    operator new();
  }
  if (*(double *)(a1 + 1480) > 0.0 && *(_DWORD *)(a1 + 1500) && sub_100720D90())
    operator new();
  if (*(double *)(a1 + 1520) > 0.0 && *(_DWORD *)(a1 + 1540) && sub_100CEB354())
    operator new();
  if (*(double *)(a1 + 1640) > 0.0 && *(_DWORD *)(a1 + 1660) && sub_100661CFC())
    operator new();
  if (*(double *)(a1 + 1680) > 0.0 && *(_DWORD *)(a1 + 1700) && sub_10078A824())
    operator new();
  if (*(double *)(a1 + 1560) > 0.0 && *(_DWORD *)(a1 + 1580) && sub_100B2A660())
    operator new();
  if (*(double *)(a1 + 1600) > 0.0 && *(_DWORD *)(a1 + 1620) && sub_10141A388())
  {
    v10 = *(_BYTE *)(a1 + 1629);
    *(_BYTE *)(sub_10141A388() + 28) = v10;
    operator new();
  }
  if (*(_BYTE *)(a1 + 1794))
    sub_1001B7DEC();
  if (*(_BYTE *)(a1 + 1836))
    operator new();
  if (*(_BYTE *)(a1 + 1842))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1184) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1184) + 8), 0, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Registering for SignalEnvironment notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for SignalEnvironment notifications", v75, v66);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
  }
  if (*(_BYTE *)(a1 + 1845))
  {
    v12 = *(_QWORD *)(a1 + 1120);
    if (v12)
      objc_msgSend(*(id *)(v12 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v12 + 8), 36, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v13 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Registering for Gnss Availability notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for Gnss Availability notifications", v75, v66);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  if (*(_BYTE *)(a1 + 1848))
  {
    v14 = *(_QWORD *)(a1 + 1128);
    if (v14)
      objc_msgSend(*(id *)(v14 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v14 + 8), 5, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v15 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Registering for Gnss Leech Location notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for Gnss Leech Location notifications", v75, v66);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  if (*(_BYTE *)(a1 + 1851) && !*(_BYTE *)(a1 + 1136))
  {
    v16 = sub_10022B068();
    sub_1015A2E04(v68, "CLMotionLogger");
    v17 = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "silo"), "queue");
    v73[0] = off_1021791C0;
    v73[1] = a1;
    v74 = v73;
    sub_10001CFEC(v16, (char *)v68, (uint64_t)v17, (uint64_t)v73);
    v18 = v74;
    if (v74 == v73)
    {
      v19 = 4;
      v18 = v73;
    }
    else
    {
      if (!v74)
      {
LABEL_129:
        if (v69 < 0)
          operator delete(v68[0]);
        *(_BYTE *)(a1 + 1136) = 1;
        goto LABEL_132;
      }
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    goto LABEL_129;
  }
LABEL_132:
  if (*(_BYTE *)(a1 + 1863))
  {
    v20 = objc_alloc_init((Class)BrightnessSystemClient);
    *(_QWORD *)(a1 + 576) = v20;
    if (v20)
    {
      v67[0] = _NSConcreteStackBlock;
      v67[1] = 3221225472;
      v67[2] = sub_100BDF670;
      v67[3] = &unk_10214D320;
      v67[4] = a1;
      objc_msgSend(v20, "registerNotificationBlock:forProperties:", v67, &off_1022206F0);
      objc_msgSend(*(id *)(a1 + 576), "setProperty:forKey:", (id)CFMakeCollectable(kCFBooleanTrue), CFSTR("ActivateALS"));
    }
  }
  if (*(_BYTE *)(a1 + 1942))
LABEL_142:
    operator new();
  if (*(_BYTE *)(a1 + 1867))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "logALSUpdatesAOP is a deprecated defaults write", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "logALSUpdatesAOP is a deprecated defaults write", v75, v66);
      v58 = (uint8_t *)v57;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
    goto LABEL_142;
  }
  if (*(_BYTE *)(a1 + 1885))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 10, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v22 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Registering for display state notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for display state notifications", v75, v66);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  if (*(_BYTE *)(a1 + 1888))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 2, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v23 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Registering for AP sleep notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for AP sleep notifications", v75, v66);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
  }
  if (*(_BYTE *)(a1 + 1891))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 3, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v24 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Registering for AP wake notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for AP wake notifications", v75, v66);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
  }
  if (*(_BYTE *)(a1 + 1870))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 7, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v25 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Registering for battery status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for battery status notifications", v75, v66);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
  }
  if (*(_BYTE *)(a1 + 1873))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 11, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v26 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Registering for screen lock status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for screen lock status notifications", v75, v66);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 15, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v27 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Registering for battery saver mode status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for battery saver mode status notifications", v75, v66);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
  }
  if (*(_BYTE *)(a1 + 1909))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v28 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Registering for AOP SPL notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for AOP SPL notifications", v75, v66);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
    operator new();
  }
  if (*(_BYTE *)(a1 + 1918))
    operator new();
  if (*(_BYTE *)(a1 + 1921))
    operator new();
  if (*(_BYTE *)(a1 + 1924))
  {
    if (sub_1000A42B0())
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1248) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1248) + 8), 0, 0);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102178948);
      v29 = qword_10229FC68;
      if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Registering for backlight state notifications", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC60 != -1)
          dispatch_once(&qword_10229FC60, &stru_102178948);
        *(_WORD *)v75 = 0;
        LODWORD(v66) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Registering for backlight state notifications", v75, v66);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v30);
LABEL_271:
        if (v31 != buf)
          free(v31);
      }
    }
    else
    {
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102178948);
      v32 = qword_10229FC68;
      if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Backlight state notifications are not available on this platform", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC60 != -1)
          dispatch_once(&qword_10229FC60, &stru_102178948);
        *(_WORD *)v75 = 0;
        LODWORD(v66) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 16, "Backlight state notifications are not available on this platform", v75, v66);
        v31 = (uint8_t *)v56;
        sub_100512490("Generic", 1, 0, 0, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v56);
        goto LABEL_271;
      }
    }
  }
  if (*(_BYTE *)(a1 + 1927))
    operator new();
  if (*(_BYTE *)(a1 + 1930))
    operator new();
  if (*(_BYTE *)(a1 + 1933))
    operator new();
  if (*(_BYTE *)(a1 + 1936))
    operator new();
  if (*(_BYTE *)(a1 + 1951))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1216) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1216) + 8), 0, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v33 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Registering for Fitness Machine update notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v75 = 0;
      LODWORD(v66) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for Fitness Machine update notifications", v75, v66);
      v55 = (uint8_t *)v54;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
  }
  if (*(_BYTE *)(a1 + 2028))
    operator new();
  if (*(_BYTE *)(a1 + 1945))
    operator new();
}

void sub_100BD8BD8(_Unwind_Exception *a1)
{
  sub_1015EE304((PB::Base *)&STACK[0x740]);
  _Unwind_Resume(a1);
}

void sub_100BD8D74(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  _QWORD *v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  uint8_t *v49;
  const char *v50;
  uint8_t *v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  const char *v56;
  uint8_t *v57;
  const char *v58;
  uint8_t *v59;
  const char *v60;
  uint8_t *v61;
  const char *v62;
  uint8_t *v63;
  const char *v64;
  uint8_t *v65;
  const char *v66;
  uint64_t v67;
  void *__p[2];
  char v69;
  _QWORD v70[3];
  _QWORD *v71;
  int v72;
  double v73;
  _QWORD *v74;
  uint8_t buf[4];
  double v76;

  if (*(_BYTE *)(a1 + 1770))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1144) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1144) + 8), 2, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Logging body metrics", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging body metrics", &v72, 2);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
  }
  if (*(_BYTE *)(a1 + 1721))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 3, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Logging elevation change active", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging elevation change active", &v72, v67);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v4);
LABEL_233:
      if (v5 != buf)
        free(v5);
    }
  }
  else if (*(_BYTE *)(a1 + 1724))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 7, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Logging elevation change spectator", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging elevation change spectator", &v72, v67);
      v5 = (uint8_t *)v66;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v66);
      goto LABEL_233;
    }
  }
  if (*(_BYTE *)(a1 + 1727))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 5, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Logging coarse elevation change", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging coarse elevation change", &v72, v67);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
  }
  if (*(_BYTE *)(a1 + 1730))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 888) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8), 5, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 888) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8), 6, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 888) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8), 10, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Logging HR spectator", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging HR spectator", &v72, v67);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
  }
  if (*(_BYTE *)(a1 + 1733))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 896) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 896) + 8), 0, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Loggging BT vehicle connections", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Loggging BT vehicle connections", &v72, v67);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
  }
  if (*(_BYTE *)(a1 + 1761) || *(_BYTE *)(a1 + 1764) || *(_DWORD *)(a1 + 1740))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 22, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 4, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 33, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v10 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Logging WiFi locations", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging WiFi locations", &v72, v67);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
  if (*(_BYTE *)(a1 + 1767))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 23, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Logging Buffered Odometer Locations", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging Buffered Odometer Locations", &v72, v67);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
  }
  if (*(_BYTE *)(a1 + 1773))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 4, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v12 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Logging GPS odometer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging GPS odometer", &v72, v67);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
  }
  if (*(_DWORD *)(a1 + 1740))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1096) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1096) + 8), 5, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v13 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Logging GPS locations (leech)", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging GPS locations (leech)", &v72, v67);
      v49 = (uint8_t *)v48;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v48);
      if (v49 != buf)
        free(v49);
    }
  }
  if (*(_BYTE *)(a1 + 1782))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1152) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8), 5, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1152) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8), 6, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v14 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Logging motion state hints, e.g., vibration and touch events", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging motion state hints, e.g., vibration and touch events", &v72, v67);
      v51 = (uint8_t *)v50;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v50);
      if (v51 != buf)
        free(v51);
    }
  }
  if (*(_BYTE *)(a1 + 1779))
    operator new();
  if (*(_BYTE *)(a1 + 1785))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), 0, 0);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), 1, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v15 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Logging watch orientation settings", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging watch orientation settings", &v72, v67);
      v53 = (uint8_t *)v52;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v52);
      if (v53 != buf)
        free(v53);
    }
  }
  if (*(_BYTE *)(a1 + 1791))
  {
    v16 = operator new(0x20uLL);
    *v16 = off_1021793D0;
    v16[1] = sub_100BEABA0;
    v16[2] = 0;
    v16[3] = a1;
    v74 = v16;
    operator new();
  }
  if (*(_BYTE *)(a1 + 1800))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v17 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Registering for lois", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for lois", &v72, v67);
      v55 = (uint8_t *)v54;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v54);
      if (v55 != buf)
        free(v55);
    }
    objc_msgSend(*(id *)(a1 + 2048), "startMonitoringVisitsForClient:", *(_QWORD *)(a1 + 2040));
    objc_msgSend(*(id *)(a1 + 2048), "startLeechingLowConfidenceVisitsForClient:", *(_QWORD *)(a1 + 2040));
  }
  if (*(_BYTE *)(a1 + 1839))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1208) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 8), 0, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v18 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "CLMotionLogger: Registering for Step Count Updates", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "CLMotionLogger: Registering for Step Count Updates", &v72, v67);
      v57 = (uint8_t *)v56;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v56);
      if (v57 != buf)
        free(v57);
    }
  }
  if (*(_BYTE *)(a1 + 1842))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1184) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1184) + 8), 0, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v19 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Registering for SignalEnvironment notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for SignalEnvironment notifications", &v72, v67);
      v59 = (uint8_t *)v58;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v58);
      if (v59 != buf)
        free(v59);
    }
  }
  if (*(_BYTE *)(a1 + 1845))
  {
    v20 = *(_QWORD *)(a1 + 1120);
    if (v20)
      objc_msgSend(*(id *)(v20 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v20 + 8), 36, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Registering for Gnss Availability notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for Gnss Availability notifications", &v72, v67);
      v61 = (uint8_t *)v60;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v60);
      if (v61 != buf)
        free(v61);
    }
  }
  if (*(_BYTE *)(a1 + 1848))
  {
    v22 = *(_QWORD *)(a1 + 1128);
    if (v22)
      objc_msgSend(*(id *)(v22 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v22 + 8), 5, 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v23 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Registering for Gnss Leech Location notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for Gnss Leech Location notifications", &v72, v67);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
  }
  if (*(_BYTE *)(a1 + 1851) && !*(_BYTE *)(a1 + 1136))
  {
    v24 = sub_10022B068();
    sub_1015A2E04(__p, "CLMotionLogger");
    v25 = objc_msgSend(objc_msgSend(*(id *)(a1 + 248), "silo"), "queue");
    v70[0] = off_102179468;
    v70[1] = a1;
    v71 = v70;
    sub_10001CFEC(v24, (char *)__p, (uint64_t)v25, (uint64_t)v70);
    v26 = v71;
    if (v71 == v70)
    {
      v27 = 4;
      v26 = v70;
    }
    else
    {
      if (!v71)
      {
LABEL_124:
        if (v69 < 0)
          operator delete(__p[0]);
        *(_BYTE *)(a1 + 1136) = 1;
        goto LABEL_127;
      }
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
    goto LABEL_124;
  }
LABEL_127:
  if (*(_BYTE *)(a1 + 1854))
    objc_msgSend(*(id *)(a1 + 2056), "registerForMobilityBoutMetrics:", *(_QWORD *)(a1 + 2040));
  if (*(_BYTE *)(a1 + 1903))
    objc_msgSend(*(id *)(a1 + 2056), "registerForWalkingSteadiness:", *(_QWORD *)(a1 + 2040));
  if (*(_BYTE *)(a1 + 1857))
  {
    objc_msgSend(*(id *)(a1 + 248), "silo");
    operator new();
  }
  if (*(_BYTE *)(a1 + 1915))
  {
    objc_msgSend(*(id *)(a1 + 248), "silo");
    operator new();
  }
  if (*(_BYTE *)(a1 + 1860))
    sub_100BE3C7C(a1);
  if (*(_BYTE *)(a1 + 1894))
    operator new();
  v28 = *(double *)(a1 + 1992);
  if (*(_BYTE *)(a1 + 1957) && v28 <= 0.1)
  {
    v28 = 0.1;
  }
  else if (v28 <= 0.0)
  {
    goto LABEL_148;
  }
  sub_100F6CDE0(a1, objc_msgSend(*(id *)(a1 + 248), "silo"), v28);
  if (qword_10229FF80 != -1)
    dispatch_once(&qword_10229FF80, &stru_102178968);
  v29 = qword_10229FF88;
  if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    v76 = v28;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Logging InertialOdometry at interval, %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102178968);
    v72 = 134349056;
    v73 = v28;
    LODWORD(v67) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 0, "Logging InertialOdometry at interval, %{public}f", &v72, v67);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
LABEL_148:
  if (*(_BYTE *)(a1 + 1900))
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1224) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1224) + 8), 0, 0);
  if (*(_BYTE *)(a1 + 1948))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102178988);
    v30 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Logging GNSS mode of operation status", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102178988);
      LOWORD(v72) = 0;
      LODWORD(v67) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "Logging GNSS mode of operation status", &v72, v67);
      v65 = (uint8_t *)v64;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableAlwaysOnLogging()", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
    v31 = *(_QWORD *)(a1 + 1112);
    if (v31)
      objc_msgSend(*(id *)(v31 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v31 + 8), 41, 0);
  }
  if (*(_BYTE *)(a1 + 2025))
  {
    if (!*(_QWORD *)(a1 + 520))
      operator new();
  }
}

void sub_100BDAE80(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  operator delete();
}

void sub_100BDAF9C(unsigned __int8 *a1, uint64_t a2)
{
  sub_100BEB244(a2, a1);
}

void sub_100BDAFAC(id a1, unint64_t a2, unint64_t a3)
{
  CFAbsoluteTime Current;
  uint64_t v5;
  _QWORD v6[308];
  uint64_t v7;
  char v8;

  sub_1015EB864(v6);
  sub_101603B10((uint64_t)v6);
  Current = CFAbsoluteTimeGetCurrent();
  v8 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  v5 = v7;
  *(_BYTE *)(v7 + 16) |= 1u;
  *(_QWORD *)(v5 + 8) = a2;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v6);
  sub_1015EE304((PB::Base *)v6);
}

void sub_100BDB054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BDB06C(id a1, BPSCompletion *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  const char *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (-[BPSCompletion state](a2, "state"))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v3 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v12 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Unregistering for focus modes user activity with an error: %s\n", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v4 = qword_10229FC78;
    v9 = 136315138;
    v10 = objc_msgSend(objc_msgSend(-[BPSCompletion error](a2, "error"), "description"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 1, "Unregistering for focus modes user activity with an error: %s\n", (const char *)&v9);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v5);
    if (v6 == buf)
      return;
LABEL_20:
    free(v6);
    return;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v7 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Unregistering for focus modes user activity", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    LOWORD(v9) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for focus modes user activity", &v9, 2);
    v6 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v8);
    if (v6 != buf)
      goto LABEL_20;
  }
}

void sub_100BDB360(id a1, BMStoreEvent *a2)
{
  NSObject *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  const char *v9;
  uint64_t v10;
  CFAbsoluteTime Current;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  uint64_t v39;
  uint8_t buf[4];
  id v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  CFAbsoluteTime v54;
  uint64_t v55;
  char v56;
  _BYTE v57[12];
  __int16 v58;
  id v59;
  __int16 v60;
  id v61;
  __int16 v62;
  id v63;
  __int16 v64;
  id v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  uint64_t v69;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v3 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v4 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "mode"), "UTF8String");
    v5 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "semanticModeIdentifier"), "UTF8String");
    v6 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateReason");
    v7 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeSemanticType");
    v8 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateSource");
    if (objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "isStarting"))
      v9 = "1";
    else
      v9 = "0";
    -[BMStoreEvent timestamp](a2, "timestamp");
    *(_DWORD *)buf = 136316674;
    v41 = v4;
    v42 = 2080;
    v43 = v5;
    v44 = 2048;
    v45 = v6;
    v46 = 2048;
    v47 = v7;
    v48 = 2048;
    v49 = v8;
    v50 = 2080;
    v51 = v9;
    v52 = 2048;
    v53 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[Focus Mode] mode: %s | semanticModeIdentifier: %s | modeUpdateReason: %llu | modeSemanticType: %lld | modeUpdateSource: %lld | starting: %s | timestamp: %f", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v27 = qword_10229FC78;
    v28 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "mode"), "UTF8String");
    v29 = objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "semanticModeIdentifier"), "UTF8String");
    v30 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateReason");
    v31 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeSemanticType");
    v32 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateSource");
    if (objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "isStarting"))
      v33 = "1";
    else
      v33 = "0";
    -[BMStoreEvent timestamp](a2, "timestamp");
    *(_DWORD *)v57 = 136316674;
    *(_QWORD *)&v57[4] = v28;
    v58 = 2080;
    v59 = v29;
    v60 = 2048;
    v61 = v30;
    v62 = 2048;
    v63 = v31;
    v64 = 2048;
    v65 = v32;
    v66 = 2080;
    v67 = v33;
    v68 = 2048;
    v69 = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 0, "[Focus Mode] mode: %s | semanticModeIdentifier: %s | modeUpdateReason: %llu | modeSemanticType: %lld | modeUpdateSource: %lld | starting: %s | timestamp: %f", v57, 72);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  if (a2 && -[BMStoreEvent eventBody](a2, "eventBody"))
  {
    sub_1015EB864(buf);
    sub_101603B74((uint64_t)buf);
    Current = CFAbsoluteTimeGetCurrent();
    v56 |= 1u;
    v54 = Current;
    v12 = v55;
    sub_1015A2E04(v57, (char *)objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "mode"), "UTF8String"));
    *(_QWORD *)&v13 = sub_100AB85CC(v12, (__n128 *)v57).n128_u64[0];
    if (SHIBYTE(v60) < 0)
      operator delete(*(void **)v57);
    v14 = v55;
    sub_1015A2E04(v57, (char *)objc_msgSend(objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody", v13), "semanticModeIdentifier"), "UTF8String"));
    *(_QWORD *)&v15 = sub_100BDB99C(v14, (__n128 *)v57).n128_u64[0];
    if (SHIBYTE(v60) < 0)
      operator delete(*(void **)v57);
    v16 = v55;
    v17 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody", v15), "modeUpdateReason");
    *(_BYTE *)(v16 + 48) |= 4u;
    *(_DWORD *)(v16 + 36) = v17;
    v18 = v55;
    v19 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeSemanticType");
    *(_BYTE *)(v18 + 48) |= 2u;
    *(_DWORD *)(v18 + 32) = v19;
    v20 = v55;
    v21 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "modeUpdateSource");
    *(_BYTE *)(v20 + 48) |= 8u;
    *(_DWORD *)(v20 + 40) = v21;
    v22 = v55;
    v23 = objc_msgSend(-[BMStoreEvent eventBody](a2, "eventBody"), "isStarting");
    *(_BYTE *)(v22 + 48) |= 0x10u;
    *(_BYTE *)(v22 + 44) = v23;
    v24 = v55;
    -[BMStoreEvent timestamp](a2, "timestamp");
    *(_BYTE *)(v24 + 48) |= 1u;
    *(_QWORD *)(v24 + 24) = v25;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v26 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Corrupted data package for focus modes user activity event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      *(_WORD *)v57 = 0;
      LODWORD(v39) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Corrupted data package for focus modes user activity event", v57, v39);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "CLMotionLogger::CLMotionLogger(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
  }
}

void sub_100BDB958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

__n128 sub_100BDB99C(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  sub_100BF2E38(a1);
  v4 = *(_QWORD *)(a1 + 16);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

id sub_100BDB9EC(id result)
{
  id v1;
  int v2;
  float v3;
  NSObject *v4;
  double v5;
  CMActivityAlarmLocal *v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  _QWORD v10[5];
  int v11;
  double v12;
  uint8_t buf[4];
  double v14;

  if (!*((_QWORD *)result + 101))
  {
    v1 = result;
    result = (id)+[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable");
    if ((_DWORD)result)
    {
      v2 = *((_DWORD *)v1 + 491);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_1021789C8);
      v3 = (float)v2;
      v4 = qword_10229FF78;
      if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v14 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "createActivityAlarmStatic,duration,%0.3f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF70 != -1)
          dispatch_once(&qword_10229FF70, &stru_1021789C8);
        v5 = v3;
        v11 = 134217984;
        v12 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "createActivityAlarmStatic,duration,%0.3f", COERCE_DOUBLE(&v11));
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::createActivityAlarmStatic()", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      else
      {
        v5 = v3;
      }
      v6 = [CMActivityAlarmLocal alloc];
      v7 = objc_msgSend(objc_msgSend(*((id *)v1 + 31), "silo"), "queue");
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100BE4B50;
      v10[3] = &unk_102142BD0;
      v10[4] = v1;
      result = -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:](v6, "initWithTrigger:duration:onQueue:withHandler:", 0, v7, v10, v5);
      *((_QWORD *)v1 + 101) = result;
    }
  }
  return result;
}

NSDictionary *__cdecl sub_100BDBC2C(id a1)
{
  return (NSDictionary *)&off_10221FFC0;
}

NSDictionary *__cdecl sub_100BDBC38(id a1)
{
  return (NSDictionary *)&off_10221FFE8;
}

uint64_t sub_100BDBC44(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD v8[3];
  uint64_t v9;
  CFAbsoluteTime v10;
  char v11;
  uint64_t (**v12)();
  CFAbsoluteTime Current;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v12 = off_1021713A8;
  v16 = *((_DWORD *)a1 + 4);
  v2 = a1[1];
  v14 = *a1;
  v15 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v12);
  sub_1015EB864(v8);
  sub_101604A4C((uint64_t)v8);
  v11 |= 1u;
  v10 = Current;
  v4 = v9;
  v5 = *a1;
  v6 = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v9 + 32) = v6 | 1;
  *(_QWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v4 + 32) = v6 | 5;
  *(_DWORD *)(v4 + 20) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v4 + 32) = v6 | 0xD;
  *(_DWORD *)(v4 + 24) = v5;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v4 + 32) = v6 | 0x1D;
  *(_DWORD *)(v4 + 28) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BDBD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDBD78(uint64_t *a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[166];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  sub_1016031B0((uint64_t)v9);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  sub_101547254(v10);
  v3 = *(_QWORD *)(v10 + 8);
  v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 1u;
  *(_QWORD *)(v3 + 8) = v4;
  v5 = *(_QWORD *)(v10 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v5 + 32) |= 4u;
  *(_DWORD *)(v5 + 20) = v4;
  v6 = *(_QWORD *)(v10 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v6 + 32) |= 8u;
  *(_DWORD *)(v6 + 24) = v4;
  v7 = *(_QWORD *)(v10 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v7 + 32) |= 0x10u;
  *(_DWORD *)(v7 + 28) = v4;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100BDBE84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDBE9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD v16[143];
  uint64_t v17;
  char v18;
  uint64_t (**v19)();
  CFAbsoluteTime Current;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _DWORD v24[3];

  v19 = off_102171410;
  v23 = *((_DWORD *)a1 + 4);
  v24[0] = 0;
  *(_DWORD *)((char *)v24 + 3) = 0;
  v2 = a1[1];
  v21 = *a1;
  v22 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v19);
  sub_1015EB864(v16);
  sub_101604B14((uint64_t)v16);
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = Current;
  v4 = v17;
  v5 = *a1;
  *(_WORD *)(v17 + 44) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v17;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_WORD *)(v17 + 44) |= 0x10u;
  *(_DWORD *)(v6 + 28) = v5;
  v7 = v17;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_WORD *)(v17 + 44) |= 0x20u;
  *(_DWORD *)(v7 + 32) = v5;
  v8 = v17;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_WORD *)(v17 + 44) |= 0x40u;
  *(_DWORD *)(v8 + 36) = v5;
  v9 = v17;
  *(_WORD *)(v17 + 44) |= 8u;
  *(_DWORD *)(v9 + 24) = 0;
  v10 = v17;
  v11 = HIWORD(*(_DWORD *)(v17 + 24));
  *(_WORD *)(v17 + 44) |= 4u;
  *(_DWORD *)(v10 + 20) = (unsigned __int16)v11 % 3u;
  v12 = v17;
  LOBYTE(v11) = *(_BYTE *)(v17 + 25) & 1;
  *(_WORD *)(v17 + 44) |= 0x80u;
  *(_BYTE *)(v12 + 40) = v11;
  v13 = v17;
  v14 = (*(_DWORD *)(v17 + 24) >> 9) & 1;
  *(_WORD *)(v17 + 44) |= 0x100u;
  *(_BYTE *)(v13 + 41) = v14;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v16);
  return sub_1015EE304((PB::Base *)v16);
}

void sub_100BDC050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDC068(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD v6[158];
  uint64_t v7;
  char v8;
  uint64_t (**v9)();
  CFAbsoluteTime Current;
  int v11;

  v9 = off_1021714C0;
  Current = CFAbsoluteTimeGetCurrent();
  v11 = *(_DWORD *)(a1 + 8);
  v2 = sub_1011B78D4();
  sub_1011B8DB0(v2, (uint64_t)&v9);
  sub_1015EB864(v6);
  sub_101604BDC((uint64_t)v6);
  v8 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  v3 = v7;
  v4 = *(_DWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) |= 2u;
  *(_DWORD *)(v3 + 12) = v4;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v6);
  return sub_1015EE304((PB::Base *)v6);
}

void sub_100BDC140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

void sub_100BDC158(uint64_t a1, _DWORD *a2, double *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  double v10;
  uint64_t v11;
  char *v12;
  int *v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  _BYTE v20[19];
  _DWORD v21[69];
  uint64_t (**__src)();
  _QWORD v23[14];
  int v24;
  _BYTE v25[28];
  int v26;
  _QWORD v27[2];
  uint8_t buf[616];
  uint64_t v29;
  char *v30;
  char v31;

  if (!*a2)
  {
    v3 = *(_DWORD *)a3;
    if (*(_DWORD *)a3)
    {
      v5 = *((_DWORD *)a3 + 8);
      v4 = *((_DWORD *)a3 + 9);
      v7 = *((_DWORD *)a3 + 10);
      v6 = *((_DWORD *)a3 + 11);
      v9 = *((_DWORD *)a3 + 12);
      v8 = *((_DWORD *)a3 + 13);
      if (v3 == 2)
      {
        v20[2] = HIBYTE(*((_DWORD *)a3 + 8));
        *(_WORD *)v20 = v5 >> 8;
        *(_DWORD *)&v20[3] = v4;
        *(_DWORD *)&v20[7] = v7;
        *(_DWORD *)&v20[11] = v6;
        *(_DWORD *)&v20[15] = v9;
        v21[0] = v8;
        memcpy(&v21[1], a3 + 7, 0x103uLL);
        __src = off_102171AF0;
        v23[0] = CFAbsoluteTimeGetCurrent();
        v13 = &v24;
        v14 = 4;
        do
        {
          v15 = &v20[v14];
          *((_QWORD *)v13 - 13) = *(_QWORD *)&v20[v14];
          *(v13 - 24) = *(_DWORD *)&v20[v14 + 8];
          *((_QWORD *)v13 - 1) = *(_QWORD *)&v20[v14 + 12];
          *v13 = *(_DWORD *)((char *)&v21[v14 / 4] + 1);
          v13 += 3;
          v14 += 24;
        }
        while (v15 + 24 != (char *)&v21[44] + 1);
        *(_OWORD *)v25 = *(_OWORD *)((char *)&v21[44] + 1);
        *(_OWORD *)&v25[12] = *(_OWORD *)((char *)&v21[47] + 1);
        v27[0] = *(_QWORD *)((char *)&v21[52] + 1);
        *(_QWORD *)((char *)v27 + 5) = *(_QWORD *)((char *)&v21[53] + 2);
        v26 = *(_DWORD *)((char *)&v21[51] + 1);
        v16 = sub_1011B78D4();
        sub_1011B8DB0(v16, (uint64_t)&__src);
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_1021788C8);
        if (qword_1023118B0)
          sub_10121E680((uint64_t)&__src, (uint64_t)buf);
      }
      else if (v3 == 1)
      {
        v10 = a3[1];
        *(_QWORD *)v20 = off_102171518;
        *(_QWORD *)&v20[8] = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)((char *)v21 + 1) = v5;
        *(_DWORD *)((char *)&v21[1] + 1) = v4;
        *(_DWORD *)((char *)&v21[2] + 1) = v7;
        *(_DWORD *)((char *)&v21[3] + 1) = v6;
        *(_DWORD *)((char *)&v21[4] + 1) = v9;
        *(_DWORD *)((char *)&v21[5] + 1) = v8;
        *(float *)&v10 = v10;
        *(_DWORD *)((char *)&v21[6] + 1) = LODWORD(v10);
        v11 = sub_1011B78D4();
        sub_1011B8DB0(v11, (uint64_t)v20);
        sub_1015EB864(buf);
        sub_101604CA4((uint64_t)buf);
        v31 |= 1u;
        v29 = *(_QWORD *)&v20[8];
        __src = (uint64_t (**)())__PAIR64__(v4, v5);
        LODWORD(v23[0]) = v7;
        sub_1002A3054(v30 + 32, (char *)&__src, (uint64_t)v23 + 4, 3uLL);
        __src = (uint64_t (**)())__PAIR64__(v9, v6);
        LODWORD(v23[0]) = v8;
        sub_1002A3054(v30 + 8, (char *)&__src, (uint64_t)v23 + 4, 3uLL);
        v12 = v30;
        v30[60] |= 1u;
        *((_DWORD *)v12 + 14) = LODWORD(v10);
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_1021788C8);
        if (qword_1023118B0)
          sub_101888B64(qword_1023118B0, (uint64_t)buf);
        sub_1015EE304((PB::Base *)buf);
      }
    }
    else
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102178A28);
      v17 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Invalid gyro bias fit type", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_102178A28);
        *(_WORD *)v20 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 16, "Invalid gyro bias fit type", v20, 2);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "static void CLMotionLogger::onGyroCalibrationDatabase(int, const CLGyroCalibrationDatabase_Type::Notification &, const CLGyroCalibrationDatabase_Type::NotificationData &, void *)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
    }
  }
}

void sub_100BDC824(_Unwind_Exception *a1)
{
  sub_1015EE304((PB::Base *)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDC868(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[240];
  uint64_t v12;
  char v13;
  uint64_t (**v14)();
  CFAbsoluteTime Current;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v14 = off_1021715C8;
  v18 = *((_DWORD *)a1 + 4);
  v2 = a1[1];
  v16 = *a1;
  v17 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v14);
  sub_1015EB864(v11);
  sub_101604D6C((uint64_t)v11);
  v13 |= 1u;
  *(CFAbsoluteTime *)&v11[77] = Current;
  v4 = v12;
  v5 = *a1;
  *(_BYTE *)(v12 + 36) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v12 + 36) |= 8u;
  *(_DWORD *)(v6 + 24) = v5;
  v7 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v12 + 36) |= 0x10u;
  *(_DWORD *)(v7 + 28) = v5;
  v8 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(_BYTE *)(v12 + 36) |= 0x20u;
  *(_DWORD *)(v8 + 32) = v5;
  v9 = v12;
  LODWORD(v5) = *((_DWORD *)a1 + 5);
  *(_BYTE *)(v12 + 36) |= 4u;
  *(_DWORD *)(v9 + 20) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v11);
  return sub_1015EE304((PB::Base *)v11);
}

void sub_100BDC9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDC9C0(uint64_t *a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[318];
  uint64_t v9;
  char v10;

  sub_1015EB864(v8);
  sub_101603660((uint64_t)v8);
  Current = CFAbsoluteTimeGetCurrent();
  v10 |= 1u;
  *(CFAbsoluteTime *)&v8[77] = Current;
  sub_10166BEA4(v9);
  v3 = *(_QWORD *)(v9 + 8);
  v4 = *a1;
  *(_BYTE *)(v3 + 24) |= 1u;
  *(_QWORD *)(v3 + 8) = v4;
  v5 = *(_QWORD *)(v9 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v5 + 24) |= 2u;
  *(_DWORD *)(v5 + 16) = v4;
  v6 = *(_QWORD *)(v9 + 8);
  LODWORD(v4) = *((_DWORD *)a1 + 3);
  *(_BYTE *)(v6 + 24) |= 4u;
  *(_DWORD *)(v6 + 20) = v4;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BDCAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDCAC8(uint64_t *a1, uint64_t a2)
{
  int8x16_t v4;
  int8x16_t v5;
  __int128 v6;
  float v7;
  double v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD v45[93];
  uint64_t v46;
  char v47;
  uint64_t (**v48)();
  CFAbsoluteTime Current;
  uint64_t v50;
  int8x16_t v51;
  __int128 v52;
  __int128 v53;
  int v54;
  char v55;
  float v56;
  float v57;
  int v58;
  int v59;
  int v60;
  int v61;
  __int16 v62;

  v48 = off_102171830;
  v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a1 + 1)), *(float64x2_t *)(a1 + 3));
  v5 = vextq_s8(v4, v4, 4uLL);
  v6 = *(_OWORD *)(a1 + 5);
  v51 = v5;
  v52 = v6;
  v53 = *(_OWORD *)(a1 + 7);
  v54 = *((_DWORD *)a1 + 18);
  v55 = *((_DWORD *)a1 + 19);
  v7 = *((float *)a1 + 21);
  v56 = v7;
  v58 = *((_DWORD *)a1 + 24);
  v57 = -1.0;
  if (v7 >= 0.0)
  {
    v8 = 0.0;
    if (*(double *)(a2 + 784) >= 0.0)
      v8 = *(double *)(a2 + 768);
    v9 = sub_10012C9E0(v7, v8);
    v57 = v9;
  }
  v62 = *((_WORD *)a1 + 55);
  v10 = *((_DWORD *)a1 + 26);
  v60 = *((unsigned __int8 *)a1 + 108);
  v61 = v10;
  v59 = *(_DWORD *)(a2 + 1712);
  v50 = *a1;
  Current = CFAbsoluteTimeGetCurrent();
  v11 = sub_1011B78D4();
  sub_1011B8DB0(v11, (uint64_t)&v48);
  sub_1015EB864(v45);
  sub_101604FC4((uint64_t)v45);
  v47 |= 1u;
  *(CFAbsoluteTime *)&v45[77] = Current;
  v12 = v46;
  v13 = *a1;
  *(_DWORD *)(v46 + 124) |= 0x10u;
  *(_QWORD *)(v12 + 40) = v13;
  v14 = v46;
  *(float *)&v13 = *((double *)a1 + 2);
  *(_DWORD *)(v46 + 124) |= 2u;
  *(double *)(v14 + 16) = *(float *)&v13;
  v15 = v46;
  *(float *)&v13 = *((double *)a1 + 3);
  *(_DWORD *)(v46 + 124) |= 4u;
  *(double *)(v15 + 24) = *(float *)&v13;
  v16 = v46;
  *(float *)&v13 = *((double *)a1 + 4);
  *(_DWORD *)(v46 + 124) |= 8u;
  *(double *)(v16 + 32) = *(float *)&v13;
  v17 = v46;
  *(float *)&v13 = *((double *)a1 + 1);
  *(_DWORD *)(v46 + 124) |= 1u;
  *(double *)(v17 + 8) = *(float *)&v13;
  v18 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 10);
  *(_DWORD *)(v46 + 124) |= 0x40000u;
  *(_DWORD *)(v18 + 100) = v13;
  v19 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 11);
  *(_DWORD *)(v46 + 124) |= 0x80000u;
  *(_DWORD *)(v19 + 104) = v13;
  v20 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 12);
  *(_DWORD *)(v46 + 124) |= 0x100000u;
  *(_DWORD *)(v20 + 108) = v13;
  v21 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 13);
  *(_DWORD *)(v46 + 124) |= 0x2000u;
  *(_DWORD *)(v21 + 80) = v13;
  v22 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 14);
  *(_DWORD *)(v46 + 124) |= 0x4000u;
  *(_DWORD *)(v22 + 84) = v13;
  v23 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 15);
  *(_DWORD *)(v46 + 124) |= 0x8000u;
  *(_DWORD *)(v23 + 88) = v13;
  v24 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 16);
  *(_DWORD *)(v46 + 124) |= 0x100u;
  *(_DWORD *)(v24 + 60) = v13;
  v25 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 17);
  *(_DWORD *)(v46 + 124) |= 0x200u;
  *(_DWORD *)(v25 + 64) = v13;
  v26 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 18);
  *(_DWORD *)(v46 + 124) |= 0x400u;
  *(_DWORD *)(v26 + 68) = v13;
  v27 = v46;
  v28 = *((_DWORD *)a1 + 19);
  *(_DWORD *)(v46 + 124) |= 0x80u;
  *(_DWORD *)(v27 + 56) = v28;
  v29 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 21);
  *(_DWORD *)(v46 + 124) |= 0x800u;
  *(_DWORD *)(v29 + 72) = v13;
  v30 = v46;
  LODWORD(v13) = *((_DWORD *)a1 + 24);
  *(_DWORD *)(v46 + 124) |= 0x20u;
  *(_DWORD *)(v30 + 48) = v13;
  v31 = v46;
  *(_DWORD *)(v46 + 124) |= 0x20000u;
  *(_DWORD *)(v31 + 96) = -1082130432;
  if (*((float *)a1 + 21) >= 0.0)
  {
    v32 = 0.0;
    if (*(double *)(a2 + 784) >= 0.0)
      v32 = *(double *)(a2 + 768);
    v33 = v46;
    v34 = sub_10012C9E0(v56, v32);
    *(_DWORD *)(v33 + 124) |= 0x20000u;
    *(float *)(v33 + 96) = v34;
  }
  v35 = v46;
  v36 = *((unsigned __int8 *)a1 + 108);
  *(_DWORD *)(v46 + 124) |= 0x1000u;
  *(_DWORD *)(v35 + 76) = v36;
  v37 = v46;
  v38 = *((_DWORD *)a1 + 26);
  *(_DWORD *)(v46 + 124) |= 0x40u;
  *(_DWORD *)(v37 + 52) = v38;
  v39 = v46;
  v40 = *((unsigned __int16 *)a1 + 55);
  *(_DWORD *)(v46 + 124) |= 0x10000u;
  *(_DWORD *)(v39 + 92) = v40;
  v41 = v46;
  v42 = *(_DWORD *)(a2 + 1712);
  *(_DWORD *)(v46 + 124) |= 0x200000u;
  *(_DWORD *)(v41 + 112) = v42;
  v43 = v46;
  *(_DWORD *)(v46 + 124) |= 0x800000u;
  *(_BYTE *)(v43 + 120) = 1;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v45);
  return sub_1015EE304((PB::Base *)v45);
}

void sub_100BDCEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

void sub_100BDCED4(double *a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLMotionLogger::onMotionStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  sub_100BE595C(a2, a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_100BDD084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BDD0A4(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  char *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  int v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  int v43;
  int v44;
  uint64_t (**v45)();
  CFAbsoluteTime v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  int v54;
  float v55;
  int v56;
  uint64_t v57;
  int v58;
  char v59;
  _QWORD v60[148];
  char *v61;
  char v62;
  uint64_t (**v63)();
  CFAbsoluteTime Current;
  int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  unint64_t __src;
  int v72;
  _BYTE v73[644];
  uint64_t v74;
  char v75;

  v2 = *(_DWORD *)(a1 + 25);
  v3 = *(_DWORD *)(a1 + 29);
  v4 = *(_DWORD *)(a1 + 33);
  v63 = off_102171518;
  v66 = 0;
  v65 = 0;
  v67 = v2;
  v68 = v3;
  v69 = v4;
  v70 = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = sub_1011B78D4();
  sub_1011B8DB0(v5, (uint64_t)&v63);
  sub_1015EB864(v60);
  sub_101604CA4((uint64_t)v60);
  v62 |= 1u;
  *(CFAbsoluteTime *)&v60[77] = Current;
  __src = 0;
  v72 = 0;
  sub_1002A3054(v61 + 32, (char *)&__src, (uint64_t)v73, 3uLL);
  __src = __PAIR64__(v3, v2);
  v72 = v4;
  sub_1002A3054(v61 + 8, (char *)&__src, (uint64_t)v73, 3uLL);
  v6 = v61;
  v61[60] |= 1u;
  *((_DWORD *)v6 + 14) = 0;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v60);
  v7 = *(float *)(a1 + 37);
  v8 = *(float *)(a1 + 53);
  v9 = *(float *)(a1 + 69);
  v10 = *(float *)(a1 + 73);
  v11 = *(float *)(a1 + 77);
  v12 = *(float *)(a1 + 81);
  v45 = off_102171678;
  v13 = *(unsigned __int8 *)(a1 + 126);
  v14 = *(_DWORD *)(a1 + 85);
  v15 = *(_DWORD *)(a1 + 97);
  v16 = *(float *)(a1 + 105);
  v17 = *(_DWORD *)(a1 + 93);
  v18 = (float)-v10 / v7;
  v19 = (float)-v11 / v8;
  v47 = v18;
  v48 = v19;
  v20 = (float)-v12 / v9;
  v49 = v20;
  v50 = v7;
  v51 = v8;
  v52 = v9;
  v53 = v14;
  v54 = v15;
  v43 = v15;
  v44 = v17;
  if (v13 == 2)
    v21 = 0.0;
  else
    v21 = v16;
  v55 = v21;
  v56 = v17;
  v57 = 0;
  v58 = 0;
  v59 = 5;
  v46 = CFAbsoluteTimeGetCurrent();
  v22 = sub_1011B78D4();
  sub_1011B8DB0(v22, (uint64_t)&v45);
  sub_1015EB864(&__src);
  sub_101604E98((uint64_t)&__src);
  HIDWORD(v23) = HIDWORD(v46);
  v75 |= 1u;
  *(CFAbsoluteTime *)&v73[604] = v46;
  v24 = v74;
  LODWORD(v23) = *(_DWORD *)(a1 + 17);
  *(_DWORD *)(v74 + 80) |= 1u;
  *(double *)(v24 + 8) = (double)v23;
  v25 = v74;
  *(_DWORD *)(v74 + 80) |= 2u;
  *(float *)(v25 + 16) = v18;
  v26 = v74;
  *(_DWORD *)(v74 + 80) |= 4u;
  *(float *)(v26 + 20) = v19;
  v27 = v74;
  *(_DWORD *)(v74 + 80) |= 8u;
  *(float *)(v27 + 24) = v20;
  v28 = v74;
  *(_DWORD *)(v74 + 80) |= 0x2000u;
  *(float *)(v28 + 64) = v7;
  v29 = v74;
  *(_DWORD *)(v74 + 80) |= 0x4000u;
  *(float *)(v29 + 68) = v8;
  v30 = v74;
  *(_DWORD *)(v74 + 80) |= 0x8000u;
  *(float *)(v30 + 72) = v9;
  v31 = v74;
  *(_DWORD *)(v74 + 80) |= 0x1000u;
  *(_DWORD *)(v31 + 60) = v14;
  v32 = v74;
  *(_DWORD *)(v74 + 80) |= 0x20u;
  *(_DWORD *)(v32 + 32) = v43;
  v33 = v74;
  *(_DWORD *)(v74 + 80) |= 0x40u;
  *(float *)(v33 + 36) = v21;
  v34 = v74;
  *(_DWORD *)(v74 + 80) |= 0x80u;
  *(_DWORD *)(v34 + 40) = v44;
  v35 = v74;
  *(_DWORD *)(v74 + 80) |= 0x200u;
  *(_DWORD *)(v35 + 48) = 0;
  v36 = v74;
  *(_DWORD *)(v74 + 80) |= 0x400u;
  *(_DWORD *)(v36 + 52) = 0;
  v37 = v74;
  *(_DWORD *)(v74 + 80) |= 0x800u;
  *(_DWORD *)(v37 + 56) = 0;
  v38 = v74;
  *(_DWORD *)(v74 + 80) |= 0x10u;
  *(_DWORD *)(v38 + 28) = 5;
  v39 = v74;
  v40 = *(_BYTE *)(a1 + 125);
  *(_DWORD *)(v74 + 80) |= 0x20000u;
  *(_BYTE *)(v39 + 77) = v40;
  v41 = v74;
  *(_DWORD *)(v74 + 80) |= 0x100u;
  *(_DWORD *)(v41 + 44) = 0;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)&__src);
  sub_1015EE304((PB::Base *)&__src);
  return sub_1015EE304((PB::Base *)v60);
}

void sub_100BDD4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_1015EE304((PB::Base *)&STACK[0xEC0]);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDD4F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  char v6;
  _QWORD v8[3];
  uint64_t v9;
  CFAbsoluteTime v10;
  char v11;
  uint64_t (**v12)();
  CFAbsoluteTime Current;
  double v14;
  uint64_t v15;
  int v16;

  v12 = off_1021713A8;
  v2 = *(_QWORD *)(a1 + 16);
  v16 = *(_DWORD *)(a1 + 24);
  v14 = (double)*(unint64_t *)a1 / 1000000.0;
  v15 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v12);
  sub_1015EB864(v8);
  sub_101604A4C((uint64_t)v8);
  v11 |= 1u;
  v10 = Current;
  v4 = v9;
  v5 = (double)*(unint64_t *)a1 / 1000000.0;
  v6 = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v9 + 32) = v6 | 1;
  *(double *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v4 + 32) = v6 | 5;
  *(_DWORD *)(v4 + 20) = LODWORD(v5);
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(v4 + 32) = v6 | 0xD;
  *(_DWORD *)(v4 + 24) = LODWORD(v5);
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v4 + 32) = v6 | 0x1D;
  *(_DWORD *)(v4 + 28) = LODWORD(v5);
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BDD638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDD650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD v17[158];
  uint64_t v18;
  char v19;
  uint64_t (**v20)();
  CFAbsoluteTime v21;
  int v22;
  _QWORD v23[143];
  uint64_t v24;
  char v25;
  uint64_t (**v26)();
  CFAbsoluteTime Current;
  double v28;
  uint64_t v29;
  int v30;
  _DWORD v31[3];

  v26 = off_102171410;
  v2 = *(_QWORD *)(a1 + 20);
  v30 = *(_DWORD *)(a1 + 28);
  v31[0] = 0;
  *(_DWORD *)((char *)v31 + 3) = 0;
  v28 = (double)*(unint64_t *)a1 / 1000000.0;
  v29 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v26);
  sub_1015EB864(v23);
  sub_101604B14((uint64_t)v23);
  v25 |= 1u;
  *(CFAbsoluteTime *)&v23[77] = Current;
  v4 = v24;
  v5 = (double)*(unint64_t *)a1 / 1000000.0;
  *(_WORD *)(v24 + 44) |= 1u;
  *(double *)(v4 + 8) = v5;
  v6 = v24;
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(_WORD *)(v24 + 44) |= 0x10u;
  *(_DWORD *)(v6 + 28) = LODWORD(v5);
  v7 = v24;
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(_WORD *)(v24 + 44) |= 0x20u;
  *(_DWORD *)(v7 + 32) = LODWORD(v5);
  v8 = v24;
  LODWORD(v5) = *(_DWORD *)(a1 + 28);
  *(_WORD *)(v24 + 44) |= 0x40u;
  *(_DWORD *)(v8 + 36) = LODWORD(v5);
  v9 = v24;
  *(_WORD *)(v24 + 44) |= 8u;
  *(_DWORD *)(v9 + 24) = 0;
  v10 = v24;
  *(_WORD *)(v24 + 44) |= 4u;
  *(_DWORD *)(v10 + 20) = 0;
  v11 = v24;
  *(_WORD *)(v24 + 44) |= 0x80u;
  *(_BYTE *)(v11 + 40) = 0;
  v12 = v24;
  *(_WORD *)(v24 + 44) |= 0x100u;
  *(_BYTE *)(v12 + 41) = 0;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v23);
  v20 = off_1021714C0;
  v21 = CFAbsoluteTimeGetCurrent();
  v22 = *(_DWORD *)(a1 + 16);
  v13 = sub_1011B78D4();
  sub_1011B8DB0(v13, (uint64_t)&v20);
  sub_1015EB864(v17);
  sub_101604BDC((uint64_t)v17);
  v19 |= 1u;
  *(CFAbsoluteTime *)&v17[77] = v21;
  v14 = v18;
  v15 = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v18 + 16) |= 2u;
  *(_DWORD *)(v14 + 12) = v15;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v17);
  sub_1015EE304((PB::Base *)v17);
  return sub_1015EE304((PB::Base *)v23);
}

void sub_100BDD8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  sub_1015EE304((PB::Base *)&STACK[0xE40]);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDD8EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[240];
  uint64_t v11;
  char v12;
  uint64_t (**v13)();
  CFAbsoluteTime Current;
  double v15;
  uint64_t v16;
  int v17;

  v13 = off_1021715C8;
  v2 = *(_QWORD *)(a1 + 16);
  v17 = *(_DWORD *)(a1 + 24);
  v15 = (double)*(unint64_t *)a1 / 1000000.0;
  v16 = v2;
  Current = CFAbsoluteTimeGetCurrent();
  v3 = sub_1011B78D4();
  sub_1011B8DB0(v3, (uint64_t)&v13);
  sub_1015EB864(v10);
  sub_101604D6C((uint64_t)v10);
  v12 |= 1u;
  *(CFAbsoluteTime *)&v10[77] = Current;
  v4 = v11;
  v5 = (double)*(unint64_t *)a1 / 1000000.0;
  *(_BYTE *)(v11 + 36) |= 1u;
  *(double *)(v4 + 8) = v5;
  v6 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 16);
  *(_BYTE *)(v11 + 36) |= 8u;
  *(_DWORD *)(v6 + 24) = LODWORD(v5);
  v7 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(v11 + 36) |= 0x10u;
  *(_DWORD *)(v7 + 28) = LODWORD(v5);
  v8 = v11;
  LODWORD(v5) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v11 + 36) |= 0x20u;
  *(_DWORD *)(v8 + 32) = LODWORD(v5);
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v10);
  return sub_1015EE304((PB::Base *)v10);
}

void sub_100BDDA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BDDA50(uint64_t a1)
{
  int8x16_t v2;
  int8x16_t v3;
  __int128 v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[93];
  uint64_t v33;
  char v34;
  uint64_t (**v35)();
  CFAbsoluteTime Current;
  double v37;
  int8x16_t v38;
  __int128 v39;
  int8x16_t v40;
  int v41;
  char v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  __int16 v46;

  v35 = off_102171830;
  v2 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a1), *(float64x2_t *)(a1 + 16));
  v3 = vextq_s8(v2, v2, 4uLL);
  v2.i64[0] = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 32);
  v38 = v3;
  v39 = v4;
  v2.i64[1] = *(_QWORD *)(a1 + 100);
  v40 = v2;
  v41 = *(_DWORD *)(a1 + 108);
  v43 = 0xBF80000000000000;
  v44 = 1127481344;
  v5 = *(unsigned __int8 *)(a1 + 114);
  v6 = *(unsigned __int8 *)(a1 + 113) | (v5 << 8);
  v46 = *(unsigned __int8 *)(a1 + 113) | (unsigned __int16)((_WORD)v5 << 8);
  v7 = (v5 << 29 >> 31) & 5;
  v42 = (v5 << 29 >> 31) & 5;
  v45 = 4;
  v37 = (double)*(unint64_t *)(a1 + 80);
  Current = CFAbsoluteTimeGetCurrent();
  v8 = sub_1011B78D4();
  sub_1011B8DB0(v8, (uint64_t)&v35);
  sub_1015EB864(v32);
  sub_101604FC4((uint64_t)v32);
  v34 |= 1u;
  *(CFAbsoluteTime *)&v32[77] = Current;
  v9 = v33;
  v10 = (double)*(unint64_t *)(a1 + 80);
  *(_DWORD *)(v33 + 124) |= 0x10u;
  *(double *)(v9 + 40) = v10;
  v11 = v33;
  *(float *)&v10 = *(double *)(a1 + 8);
  *(_DWORD *)(v33 + 124) |= 2u;
  *(double *)(v11 + 16) = *(float *)&v10;
  v12 = v33;
  *(float *)&v10 = *(double *)(a1 + 16);
  *(_DWORD *)(v33 + 124) |= 4u;
  *(double *)(v12 + 24) = *(float *)&v10;
  v13 = v33;
  *(float *)&v10 = *(double *)(a1 + 24);
  *(_DWORD *)(v33 + 124) |= 8u;
  *(double *)(v13 + 32) = *(float *)&v10;
  v14 = v33;
  *(float *)&v10 = *(double *)a1;
  *(_DWORD *)(v33 + 124) |= 1u;
  *(double *)(v14 + 8) = *(float *)&v10;
  v15 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(v33 + 124) |= 0x40000u;
  *(_DWORD *)(v15 + 100) = LODWORD(v10);
  v16 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(v33 + 124) |= 0x80000u;
  *(_DWORD *)(v16 + 104) = LODWORD(v10);
  v17 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v33 + 124) |= 0x100000u;
  *(_DWORD *)(v17 + 108) = LODWORD(v10);
  v18 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v33 + 124) |= 0x2000u;
  *(_DWORD *)(v18 + 80) = LODWORD(v10);
  v19 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v33 + 124) |= 0x4000u;
  *(_DWORD *)(v19 + 84) = LODWORD(v10);
  v20 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(v33 + 124) |= 0x8000u;
  *(_DWORD *)(v20 + 88) = LODWORD(v10);
  v21 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(v33 + 124) |= 0x100u;
  *(_DWORD *)(v21 + 60) = LODWORD(v10);
  v22 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(v33 + 124) |= 0x200u;
  *(_DWORD *)(v22 + 64) = LODWORD(v10);
  v23 = v33;
  LODWORD(v10) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(v33 + 124) |= 0x400u;
  *(_DWORD *)(v23 + 68) = LODWORD(v10);
  v24 = v33;
  *(_DWORD *)(v33 + 124) |= 0x80u;
  *(_DWORD *)(v24 + 56) = v7;
  v25 = v33;
  *(_DWORD *)(v33 + 124) |= 0x800u;
  *(_DWORD *)(v25 + 72) = 0;
  v26 = v33;
  *(_DWORD *)(v33 + 124) |= 0x20000u;
  *(_DWORD *)(v26 + 96) = -1082130432;
  v27 = v33;
  *(_DWORD *)(v33 + 124) |= 0x20u;
  *(_DWORD *)(v27 + 48) = 1127481344;
  v28 = v33;
  *(_DWORD *)(v33 + 124) |= 0x1000u;
  *(_DWORD *)(v28 + 76) = 4;
  v29 = v33;
  *(_DWORD *)(v33 + 124) |= 0x40u;
  *(_DWORD *)(v29 + 52) = 0;
  v30 = v33;
  *(_DWORD *)(v33 + 124) |= 0x10000u;
  *(_DWORD *)(v30 + 92) = v6;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v32);
  return sub_1015EE304((PB::Base *)v32);
}

void sub_100BDDDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

void sub_100BDDDB8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onAccessoryAccelerometerData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryAccelerometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryAccelerometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BEC060(v6, a1, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDDF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BDDF8C(int *a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __n128 __p;
  char v10;
  _QWORD v11[12];
  uint64_t v12;
  CFAbsoluteTime v13;
  char v14;

  sub_1015EB864(v11);
  sub_101605988((uint64_t)v11);
  Current = CFAbsoluteTimeGetCurrent();
  v14 |= 1u;
  v13 = Current;
  v3 = v12;
  sub_1015A2E04(&__p, (char *)a1 + 60);
  sub_100BDB99C(v3, &__p);
  if (v10 < 0)
    operator delete((void *)__p.n128_u64[0]);
  sub_1015A7D48(v12);
  v4 = *(_QWORD *)(v12 + 24);
  v5 = *a1;
  *(_BYTE *)(v4 + 32) |= 2u;
  *(_DWORD *)(v4 + 28) = v5;
  v6 = *(_QWORD *)(v12 + 24);
  sub_100AB8834(v6);
  std::string::operator=(*(std::string **)(v6 + 8), (const std::string *)(a1 + 2));
  v7 = *(_QWORD *)(v12 + 24);
  sub_100BF2E38(v7);
  std::string::operator=(*(std::string **)(v7 + 16), (const std::string *)(a1 + 8));
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v11);
  return sub_1015EE304((PB::Base *)v11);
}

void sub_100BDE0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1015EE304((PB::Base *)&a15);
  _Unwind_Resume(a1);
}

void sub_100BDE0E4(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onAccessoryMonitorLogEvent");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryMonitorLogEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryMonitorLogEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BEC1DC(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BDE290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BDE2B0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onAccessoryProximityData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryProximityData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryProximityData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BEFD3C(v6, a1, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDE464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BDE484(int *a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __n128 __p;
  char v11;
  _QWORD v12[30];
  uint64_t v13;
  CFAbsoluteTime v14;
  char v15;

  sub_1015EB864(v12);
  sub_1016059EC((uint64_t)v12);
  Current = CFAbsoluteTimeGetCurrent();
  v15 |= 1u;
  v14 = Current;
  v3 = v13;
  sub_1015A2E04(&__p, (char *)a1 + 60);
  sub_100BEFEDC(v3, &__p);
  if (v11 < 0)
    operator delete((void *)__p.n128_u64[0]);
  v4 = v13;
  sub_1015A2E04(&__p, (char *)a1 + 135);
  sub_100BEFF2C(v4, &__p);
  if (v11 < 0)
    operator delete((void *)__p.n128_u64[0]);
  sub_1015AAFCC(v13);
  v5 = *(_QWORD *)(v13 + 8);
  v6 = *a1;
  *(_BYTE *)(v5 + 32) |= 2u;
  *(_DWORD *)(v5 + 28) = v6;
  v7 = *(_QWORD *)(v13 + 8);
  sub_100AB8834(v7);
  std::string::operator=(*(std::string **)(v7 + 8), (const std::string *)(a1 + 2));
  v8 = *(_QWORD *)(v13 + 8);
  sub_100BF2E38(v8);
  std::string::operator=(*(std::string **)(v8 + 16), (const std::string *)(a1 + 8));
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v12);
  return sub_1015EE304((PB::Base *)v12);
}

void sub_100BDE5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1015EE304((PB::Base *)&a15);
  _Unwind_Resume(a1);
}

void sub_100BDE610(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onAccessoryGyroData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryGyroData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryGyroData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BEFF7C(v6, a1, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDE7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BDE7E4(int *a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[20];
  uint64_t v9;
  CFAbsoluteTime v10;
  char v11;

  sub_1015EB864(v8);
  sub_101605A50((uint64_t)v8);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  v10 = Current;
  sub_1015AAFCC(v9);
  v3 = *(_QWORD *)(v9 + 8);
  v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  v5 = *(_QWORD *)(v9 + 8);
  sub_100AB8834(v5);
  std::string::operator=(*(std::string **)(v5 + 8), (const std::string *)(a1 + 2));
  v6 = *(_QWORD *)(v9 + 8);
  sub_100BF2E38(v6);
  std::string::operator=(*(std::string **)(v6 + 16), (const std::string *)(a1 + 8));
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BDE8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BDE8F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onAccessoryHeartRateData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryHeartRateData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryHeartRateData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BF0110(v6, a1, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDEAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BDEAC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onAccessoryPPGData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryPPGData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryPPGData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BF0234(v6, a1, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDEC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BDEC9C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onAccessoryMagnetometerData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryMagnetometerData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryMagnetometerData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BF04F4(v6, a1, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDEE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BDEE70(int *a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[25];
  uint64_t v9;
  CFAbsoluteTime v10;
  char v11;

  sub_1015EB864(v8);
  sub_101605AB4((uint64_t)v8);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  v10 = Current;
  sub_1015AAFCC(v9);
  v3 = *(_QWORD *)(v9 + 8);
  v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  v5 = *(_QWORD *)(v9 + 8);
  sub_100AB8834(v5);
  std::string::operator=(*(std::string **)(v5 + 8), (const std::string *)(a1 + 2));
  v6 = *(_QWORD *)(v9 + 8);
  sub_100BF2E38(v6);
  std::string::operator=(*(std::string **)(v6 + 16), (const std::string *)(a1 + 8));
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BDEF68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BDEF80(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onAccessoryDeviceMotionData");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAccessoryDeviceMotionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    v6 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAccessoryDeviceMotionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BF068C(v6, a1, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDF134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BDF154(int *a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[17];
  uint64_t v12;
  CFAbsoluteTime v13;
  char v14;
  __int128 __src;
  uint64_t v16;

  sub_1015EB864(v11);
  sub_101605B18((uint64_t)v11);
  Current = CFAbsoluteTimeGetCurrent();
  v14 |= 1u;
  v13 = Current;
  sub_1015AA064(v12);
  v3 = *(_QWORD *)(v12 + 32);
  v4 = *a1;
  *(_BYTE *)(v3 + 32) |= 2u;
  *(_DWORD *)(v3 + 28) = v4;
  v5 = *(_QWORD *)(v12 + 32);
  sub_100AB8834(v5);
  std::string::operator=(*(std::string **)(v5 + 8), (const std::string *)(a1 + 2));
  v6 = *(_QWORD *)(v12 + 32);
  sub_100BF2E38(v6);
  std::string::operator=(*(std::string **)(v6 + 16), (const std::string *)(a1 + 8));
  v7 = *(_QWORD *)(v12 + 32);
  v8 = a1[14];
  *(_BYTE *)(v7 + 32) |= 1u;
  *(_DWORD *)(v7 + 24) = v8;
  v9 = v12;
  LOBYTE(v8) = *((_BYTE *)a1 + 76);
  *(_BYTE *)(v12 + 44) |= 1u;
  *(_BYTE *)(v9 + 40) = v8;
  __src = *((_OWORD *)a1 + 5);
  sub_1002A3054((char *)(v12 + 8), (char *)&__src, (uint64_t)&v16, 4uLL);
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v11);
  return sub_1015EE304((PB::Base *)v11);
}

void sub_100BDF2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BDF2EC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLMotionLogger::onWifiScanNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onWifiScanNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onWifiScanNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100BEAE70(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100BDF49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100BDF4BC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Triggering wifi scan", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Triggering wifi scan", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::enableRuntimeSwitchableLogging()_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 1200) + 16), "syncgetStartScanWithType:lowPriority:passive:requester:", 8, 0, 0, "motionlog");
}

uint64_t sub_100BDF670(uint64_t a1, uint64_t a2, void *a3)
{
  float v3;

  objc_msgSend(a3, "floatValue");
  return sub_100BDF688(v3);
}

uint64_t sub_100BDF688(float a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  _QWORD v5[37];
  uint64_t v6;
  CFAbsoluteTime v7;
  char v8;

  Current = CFAbsoluteTimeGetCurrent();
  sub_1015EB864(v5);
  v8 |= 1u;
  v7 = Current;
  sub_1016033A4((uint64_t)v5);
  v3 = v6;
  *(_BYTE *)(v6 + 12) |= 1u;
  *(float *)(v3 + 8) = a1;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v5);
  return sub_1015EE304((PB::Base *)v5);
}

void sub_100BDF73C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BDF754(uint64_t *a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onAveragedALSData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onAveragedALSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onAveragedALSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF0C3C(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BDF900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BDF920(uint64_t *a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onSPL");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onSPL", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onSPL\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF1418(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BDFACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BDFAEC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onProxPDPData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onProxPDPData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onProxPDPData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF14F4(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BDFC98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BDFCB8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onALSData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onALSData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onALSData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF1690(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BDFE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BDFE84(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onViewObstructedStateData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onViewObstructedStateData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onViewObstructedStateData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF1870(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE0030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE0050(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onOrientationData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onOrientationData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onOrientationData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF1A3C(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE01FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE021C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onDeviceMotionAlwaysOnData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onDeviceMotionAlwaysOnData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onDeviceMotionAlwaysOnData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF1B28(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE03C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE03E8(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  os_activity_scope_state_s state;
  char v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  CLProfilingIdentify("CLMotionLogger::onSignificantUserInteractionData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v6 = 1;
    v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onSignificantUserInteractionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v4 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "activity";
      v13 = 2050;
      v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onSignificantUserInteractionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100BF1D60();
  if (v6)
    os_activity_scope_leave(&state);
}

void sub_100BE0584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE05A4(uint64_t *a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onHapticModuleStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onHapticModuleStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onHapticModuleStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BEA8D4(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE0750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE0770(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onKeyboardMotion");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onKeyboardMotion", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onKeyboardMotion\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF1E08(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE091C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE093C(char *a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onKeyboardKeyPress");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onKeyboardKeyPress", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onKeyboardKeyPress\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF2024(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE0AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE0B08(char *a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onTrackpad");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onTrackpad", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onTrackpad\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF20E8(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE0CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100BE0CD4(char *a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onKeyboardAttach");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onKeyboardAttach", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onKeyboardAttach\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BF21AC(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE0E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100BE0EA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = &off_102178720;
  sub_100BE11B4(a1);
  sub_100BE3388(a1);

  *(_QWORD *)(a1 + 2048) = 0;
  *(_QWORD *)(a1 + 2056) = 0;

  *(_QWORD *)(a1 + 2040) = 0;
  if (*(_QWORD *)(a1 + 792))
    IOPMUnregisterNotification();
  sub_100BE362C(a1);
  sub_100BE37E0(a1);

  *(_QWORD *)(a1 + 2072) = 0;
  v2 = *(_QWORD *)(a1 + 1248);
  *(_QWORD *)(a1 + 1248) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 1240);
  *(_QWORD *)(a1 + 1240) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 1232);
  *(_QWORD *)(a1 + 1232) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 1224);
  *(_QWORD *)(a1 + 1224) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 1216);
  *(_QWORD *)(a1 + 1216) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 1208);
  *(_QWORD *)(a1 + 1208) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 1200);
  *(_QWORD *)(a1 + 1200) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_10042B248((uint64_t *)(a1 + 1192), 0);
  v9 = *(_QWORD *)(a1 + 1184);
  *(_QWORD *)(a1 + 1184) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 1176);
  *(_QWORD *)(a1 + 1176) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 1160);
  *(_QWORD *)(a1 + 1160) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 1152);
  *(_QWORD *)(a1 + 1152) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 1144);
  *(_QWORD *)(a1 + 1144) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a1 + 1128);
  *(_QWORD *)(a1 + 1128) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *(_QWORD *)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 1112);
  *(_QWORD *)(a1 + 1112) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 1104);
  *(_QWORD *)(a1 + 1104) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(a1 + 1096);
  *(_QWORD *)(a1 + 1096) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_100BCD638(a1 + 904);
  v20 = *(_QWORD *)(a1 + 896);
  *(_QWORD *)(a1 + 896) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 888);
  *(_QWORD *)(a1 + 888) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a1 + 880);
  *(_QWORD *)(a1 + 880) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 872);
  *(_QWORD *)(a1 + 872) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *(_QWORD *)(a1 + 552);
  *(_QWORD *)(a1 + 552) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 520) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  sub_100E3E6C8(a1 + 256);
  return sub_1008A1B98((_QWORD *)a1);
}

BOOL sub_100BE11B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  _BOOL4 v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  void *v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  const char *v119;
  uint8_t *v120;
  const char *v121;
  uint8_t *v122;
  const char *v123;
  uint8_t *v124;
  const char *v125;
  uint8_t *v126;
  const char *v127;
  uint8_t *v128;
  const char *v129;
  uint8_t *v130;
  const char *v131;
  uint8_t *v132;
  const char *v133;
  uint8_t *v134;
  const char *v135;
  uint8_t *v136;
  const char *v137;
  uint8_t *v138;
  const char *v139;
  uint8_t *v140;
  const char *v141;
  uint8_t *v142;
  const char *v143;
  uint8_t *v144;
  const char *v145;
  uint8_t *v146;
  const char *v147;
  uint8_t *v148;
  const char *v149;
  uint8_t *v150;
  const char *v151;
  uint8_t *v152;
  const char *v153;
  uint8_t *v154;
  const char *v155;
  uint8_t *v156;
  uint64_t v157;
  void *__p[2];
  char v159;
  _WORD v160[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 304))
  {
    v2 = sub_1002433D4();
    sub_101193558(v2, *(_QWORD *)(a1 + 304));
    v3 = *(_QWORD *)(a1 + 304);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *(_QWORD *)(a1 + 304) = 0;
  }
  v4 = *(_QWORD *)(a1 + 1176);
  if (v4)
    objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 0);
  if (*(_QWORD *)(a1 + 312))
  {
    v5 = sub_10024095C();
    sub_1000A4A6C(v5, 0, *(_QWORD *)(a1 + 312));
    v6 = *(_QWORD *)(a1 + 312);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(a1 + 312) = 0;
  }
  if (*(_QWORD *)(a1 + 320))
  {
    v7 = sub_100680488();
    sub_1000A4A6C(v7, 0, *(_QWORD *)(a1 + 320));
    v8 = *(_QWORD *)(a1 + 320);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    *(_QWORD *)(a1 + 320) = 0;
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v9 = sub_10021C350();
    sub_1000A4A6C(v9, 0, *(_QWORD *)(a1 + 328));
    v10 = *(_QWORD *)(a1 + 328);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    *(_QWORD *)(a1 + 328) = 0;
  }
  if (*(_QWORD *)(a1 + 336))
  {
    v11 = sub_10021C350();
    sub_1000A4A6C(v11, 1, *(_QWORD *)(a1 + 336));
    v12 = *(_QWORD *)(a1 + 336);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    *(_QWORD *)(a1 + 336) = 0;
  }
  if (*(_QWORD *)(a1 + 344))
  {
    v13 = sub_1000A6A30();
    sub_1000A4A6C(v13, 0, *(_QWORD *)(a1 + 344));
    v14 = *(_QWORD *)(a1 + 344);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    *(_QWORD *)(a1 + 344) = 0;
  }
  if (*(_QWORD *)(a1 + 352))
  {
    v15 = sub_1000824CC();
    sub_1000A4A6C(v15, 0, *(_QWORD *)(a1 + 352));
    v16 = *(_QWORD *)(a1 + 352);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    *(_QWORD *)(a1 + 352) = 0;
  }
  if (*(_QWORD *)(a1 + 1104))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102178908);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#wigo,off,MotionLoggerLocal", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102178908);
      v160[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,MotionLoggerLocal", v160, 2);
      v120 = (uint8_t *)v119;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v119);
      if (v120 != buf)
        free(v120);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_1021787F8);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1104) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1104) + 8), 0);
  }
  if (*(_QWORD *)(a1 + 1096))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102178908);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#wigo,off,MotionLoggerMediated", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102178908);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,MotionLoggerMediated", v160, v157);
      v122 = (uint8_t *)v121;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v121);
      if (v122 != buf)
        free(v122);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_102178818);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1096) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1096) + 8), 0);
    if (*(_DWORD *)(a1 + 1740))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1096) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1096) + 8), 5, 0);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v19 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Logging GPS: Mediated leech", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021788E8);
        v160[0] = 0;
        LODWORD(v157) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Logging GPS: Mediated leech", v160, v157);
        v138 = (uint8_t *)v137;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v137);
        if (v138 != buf)
          free(v138);
      }
    }
  }
  v20 = *(_QWORD *)(a1 + 1184);
  if (v20)
    objc_msgSend(*(id *)(v20 + 16), "unregister:forNotification:", *(_QWORD *)(v20 + 8), 0);
  v21 = *(_QWORD *)(a1 + 1120);
  if (v21)
    objc_msgSend(*(id *)(v21 + 16), "unregister:forNotification:", *(_QWORD *)(v21 + 8), 36);
  v22 = *(_QWORD *)(a1 + 1128);
  if (v22)
    objc_msgSend(*(id *)(v22 + 16), "unregister:forNotification:", *(_QWORD *)(v22 + 8), 5);
  if (*(_BYTE *)(a1 + 1136))
  {
    v23 = sub_10022B068();
    sub_1015A2E04(__p, "CLMotionLogger");
    sub_10000782C(v23, (uint64_t *)__p);
    if (v159 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 1136) = 0;
  }
  if (*(_QWORD *)(a1 + 416))
  {
    v24 = sub_1001FBB04(0);
    sub_1000A4A6C(v24, 0, *(_QWORD *)(a1 + 416));
    v25 = *(_QWORD *)(a1 + 416);
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    *(_QWORD *)(a1 + 416) = 0;
  }
  if (*(_QWORD *)(a1 + 360))
  {
    v26 = sub_10056B584();
    sub_1000A4A6C(v26, 9, *(_QWORD *)(a1 + 360));
    v27 = *(_QWORD *)(a1 + 360);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    *(_QWORD *)(a1 + 360) = 0;
  }
  if (*(_QWORD *)(a1 + 368))
  {
    v28 = sub_10056B584();
    sub_1000A4A6C(v28, 4, *(_QWORD *)(a1 + 368));
    v29 = *(_QWORD *)(a1 + 368);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    *(_QWORD *)(a1 + 368) = 0;
  }
  if (*(_QWORD *)(a1 + 376))
  {
    v30 = sub_10056B584();
    sub_1000A4A6C(v30, 5, *(_QWORD *)(a1 + 376));
    v31 = *(_QWORD *)(a1 + 376);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    *(_QWORD *)(a1 + 376) = 0;
  }
  if (*(_QWORD *)(a1 + 384))
  {
    v32 = sub_10056B584();
    sub_1000A4A6C(v32, 6, *(_QWORD *)(a1 + 384));
    v33 = *(_QWORD *)(a1 + 384);
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    *(_QWORD *)(a1 + 384) = 0;
  }
  if (*(_QWORD *)(a1 + 392))
  {
    v34 = sub_10056B584();
    sub_1000A4A6C(v34, 0, *(_QWORD *)(a1 + 392));
    v35 = *(_QWORD *)(a1 + 392);
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    *(_QWORD *)(a1 + 392) = 0;
  }
  if (*(_QWORD *)(a1 + 536))
  {
    v36 = sub_1012670A4();
    sub_1000A4A6C(v36, 0, *(_QWORD *)(a1 + 536));
    v37 = *(_QWORD *)(a1 + 536);
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    *(_QWORD *)(a1 + 536) = 0;
  }
  if (*(_QWORD *)(a1 + 544))
  {
    v38 = sub_1012670A4();
    sub_1000A4A6C(v38, 1, *(_QWORD *)(a1 + 544));
    v39 = *(_QWORD *)(a1 + 544);
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    *(_QWORD *)(a1 + 544) = 0;
  }
  if (*(_QWORD *)(a1 + 552))
  {
    v40 = sub_101247B6C();
    sub_1000A4A6C(v40, 0, *(_QWORD *)(a1 + 552));
    v41 = *(_QWORD *)(a1 + 552);
    *(_QWORD *)(a1 + 552) = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  if (*(_QWORD *)(a1 + 560))
  {
    v42 = sub_100720D90();
    sub_1000A4A6C(v42, 0, *(_QWORD *)(a1 + 560));
    v43 = *(_QWORD *)(a1 + 560);
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    *(_QWORD *)(a1 + 560) = 0;
  }
  if (*(_QWORD *)(a1 + 568))
  {
    v44 = sub_100720D90();
    sub_1000A4A6C(v44, 1, *(_QWORD *)(a1 + 568));
    v45 = *(_QWORD *)(a1 + 568);
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    *(_QWORD *)(a1 + 568) = 0;
  }
  if (*(_QWORD *)(a1 + 584))
  {
    v46 = sub_100CEB354();
    sub_1000A4A6C(v46, 0, *(_QWORD *)(a1 + 584));
    v47 = *(_QWORD *)(a1 + 584);
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    *(_QWORD *)(a1 + 584) = 0;
  }
  if (*(_QWORD *)(a1 + 592))
  {
    v48 = sub_100CEB354();
    sub_1000A4A6C(v48, 1, *(_QWORD *)(a1 + 592));
    v49 = *(_QWORD *)(a1 + 592);
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    *(_QWORD *)(a1 + 592) = 0;
  }
  if (*(_QWORD *)(a1 + 632))
  {
    v50 = sub_100661CFC();
    sub_1000A4A6C(v50, 0, *(_QWORD *)(a1 + 632));
    v51 = *(_QWORD *)(a1 + 632);
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    *(_QWORD *)(a1 + 632) = 0;
  }
  if (*(_QWORD *)(a1 + 640))
  {
    v52 = sub_10078A824();
    sub_1000A4A6C(v52, 0, *(_QWORD *)(a1 + 640));
    v53 = *(_QWORD *)(a1 + 640);
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    *(_QWORD *)(a1 + 640) = 0;
  }
  if (*(_QWORD *)(a1 + 600))
  {
    v54 = sub_100B2A660();
    sub_1000A4A6C(v54, 0, *(_QWORD *)(a1 + 600));
    v55 = *(_QWORD *)(a1 + 600);
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    *(_QWORD *)(a1 + 600) = 0;
  }
  if (*(_QWORD *)(a1 + 608))
  {
    v56 = sub_100B2A660();
    sub_1000A4A6C(v56, 1, *(_QWORD *)(a1 + 608));
    v57 = *(_QWORD *)(a1 + 608);
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    *(_QWORD *)(a1 + 608) = 0;
  }
  if (*(_QWORD *)(a1 + 616))
  {
    v58 = sub_10141A388();
    sub_1000A4A6C(v58, 0, *(_QWORD *)(a1 + 616));
    v59 = *(_QWORD *)(a1 + 616);
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    *(_QWORD *)(a1 + 616) = 0;
  }
  if (*(_QWORD *)(a1 + 624))
  {
    v60 = sub_10141A388();
    sub_1000A4A6C(v60, 1, *(_QWORD *)(a1 + 624));
    v61 = *(_QWORD *)(a1 + 624);
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    *(_QWORD *)(a1 + 624) = 0;
  }
  if (*(_QWORD *)(a1 + 400))
  {
    v62 = sub_1011FDDD0();
    sub_1000A4A6C(v62, 0, *(_QWORD *)(a1 + 400));
    v63 = sub_1011FDDD0();
    sub_1000A4A6C(v63, 1, *(_QWORD *)(a1 + 400));
    v64 = sub_1011FDDD0();
    sub_1000A4A6C(v64, 2, *(_QWORD *)(a1 + 400));
    v65 = *(_QWORD *)(a1 + 400);
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    *(_QWORD *)(a1 + 400) = 0;
  }
  objc_msgSend(*(id *)(a1 + 712), "invalidate");

  objc_msgSend(*(id *)(a1 + 2088), "invalidate");
  *(_QWORD *)(a1 + 2088) = 0;
  objc_msgSend(*(id *)(a1 + 2056), "unregisterForMobilityBoutMetrics:", *(_QWORD *)(a1 + 2040));
  if (*(_QWORD *)(a1 + 448))
  {
    v66 = sub_1001FBB04(0);
    sub_1000A4A6C(v66, 27, *(_QWORD *)(a1 + 448));
    v67 = *(_QWORD *)(a1 + 448);
    *(_QWORD *)(a1 + 448) = 0;
    if (v67)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  }
  if (*(_QWORD *)(a1 + 456))
  {
    v68 = sub_1001FBB04(0);
    sub_1000A4A6C(v68, 39, *(_QWORD *)(a1 + 456));
    v69 = *(_QWORD *)(a1 + 456);
    *(_QWORD *)(a1 + 456) = 0;
    if (v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  }
  v70 = *(void **)(a1 + 576);
  if (v70)
  {

    *(_QWORD *)(a1 + 576) = 0;
  }
  if (*(_QWORD *)(a1 + 432))
  {
    v71 = *(_BYTE *)(a1 + 1865) == 0;
    v72 = sub_1001FBB04(0);
    if (v71)
      v73 = 32;
    else
      v73 = 31;
    sub_1000A4A6C(v72, v73, *(_QWORD *)(a1 + 432));
    v74 = *(_QWORD *)(a1 + 432);
    if (v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
    *(_QWORD *)(a1 + 432) = 0;
  }
  if (*(_BYTE *)(a1 + 1882))
  {
    v75 = *(void **)(a1 + 1256);
    if (v75)
    {
      objc_msgSend(v75, "cancel");
      *(_QWORD *)(a1 + 1256) = 0;
    }
    v76 = *(NSObject **)(a1 + 1264);
    if (v76)
    {
      dispatch_release(v76);
      *(_QWORD *)(a1 + 1264) = 0;
    }
  }
  if (*(_BYTE *)(a1 + 1885))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 10);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v77 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "Unregistering for display state notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for display state notifications", v160, v157);
      v124 = (uint8_t *)v123;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v123);
      if (v124 != buf)
        free(v124);
    }
  }
  if (*(_BYTE *)(a1 + 1888))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 2);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v78 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "Unregistering for AP sleep notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for AP sleep notifications", v160, v157);
      v126 = (uint8_t *)v125;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v125);
      if (v126 != buf)
        free(v126);
    }
  }
  if (*(_BYTE *)(a1 + 1891))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 3);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v79 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_INFO, "Unregistering for AP wake notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for AP wake notifications", v160, v157);
      v128 = (uint8_t *)v127;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v127);
      if (v128 != buf)
        free(v128);
    }
  }
  if (*(_BYTE *)(a1 + 1870))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 7);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v80 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "Unregistering for battery status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for battery status notifications", v160, v157);
      v130 = (uint8_t *)v129;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v129);
      if (v130 != buf)
        free(v130);
    }
  }
  if (*(_BYTE *)(a1 + 1873))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 11);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v81 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Unregistering for screen lock status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for screen lock status notifications", v160, v157);
      v132 = (uint8_t *)v131;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v131);
      if (v132 != buf)
        free(v132);
    }
  }
  if (*(_BYTE *)(a1 + 1876))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1240) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1240) + 8), 15);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v82 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "Unregistering for battery saver mode status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for battery saver mode status notifications", v160, v157);
      v134 = (uint8_t *)v133;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v133);
      if (v134 != buf)
        free(v134);
    }
  }
  if (*(_BYTE *)(a1 + 1918) && *(_QWORD *)(a1 + 472))
  {
    v83 = sub_1001FBB04(0);
    sub_1000A4A6C(v83, 40, *(_QWORD *)(a1 + 472));
    v84 = *(_QWORD *)(a1 + 472);
    if (v84)
      (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
    *(_QWORD *)(a1 + 472) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v85 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "Unregistering for prox PDP notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for prox PDP notifications", v160, v157);
      v140 = (uint8_t *)v139;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v139);
      if (v140 != buf)
        free(v140);
    }
  }
  if (*(_BYTE *)(a1 + 1921) && *(_QWORD *)(a1 + 480))
  {
    v86 = sub_1001FBB04(0);
    sub_1000A4A6C(v86, 41, *(_QWORD *)(a1 + 480));
    v87 = *(_QWORD *)(a1 + 480);
    if (v87)
      (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
    *(_QWORD *)(a1 + 480) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v88 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "Unregistering for ALS notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for ALS notifications", v160, v157);
      v142 = (uint8_t *)v141;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v141);
      if (v142 != buf)
        free(v142);
    }
  }
  if (*(_BYTE *)(a1 + 1924) && sub_1000A42B0())
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1248) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1248) + 8), 0);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_102178948);
    v89 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_INFO, "Unregistering for backlight state notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102178948);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 1, "Unregistering for backlight state notifications", v160, v157);
      v154 = (uint8_t *)v153;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v153);
      if (v154 != buf)
        free(v154);
    }
  }
  if (*(_BYTE *)(a1 + 1927) && *(_QWORD *)(a1 + 488))
  {
    v90 = sub_1001FBB04(0);
    sub_1000A4A6C(v90, 42, *(_QWORD *)(a1 + 488));
    v91 = *(_QWORD *)(a1 + 488);
    if (v91)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
    *(_QWORD *)(a1 + 488) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v92 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "Unregistering for view obstructed state notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for view obstructed state notifications", v160, v157);
      v144 = (uint8_t *)v143;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v143);
      if (v144 != buf)
        free(v144);
    }
  }
  if (*(_BYTE *)(a1 + 1930) && *(_QWORD *)(a1 + 496))
  {
    v93 = sub_1001FBB04(0);
    sub_1000A4A6C(v93, 43, *(_QWORD *)(a1 + 496));
    v94 = *(_QWORD *)(a1 + 496);
    if (v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
    *(_QWORD *)(a1 + 496) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v95 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "Unregistering orientation notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering orientation notifications", v160, v157);
      v146 = (uint8_t *)v145;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v145);
      if (v146 != buf)
        free(v146);
    }
  }
  if (*(_BYTE *)(a1 + 1933) && *(_QWORD *)(a1 + 504))
  {
    v96 = sub_1001FBB04(0);
    sub_1000A4A6C(v96, 44, *(_QWORD *)(a1 + 504));
    v97 = *(_QWORD *)(a1 + 504);
    if (v97)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
    *(_QWORD *)(a1 + 504) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v98 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_INFO, "Unregistering ALS notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering ALS notifications", v160, v157);
      v148 = (uint8_t *)v147;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v147);
      if (v148 != buf)
        free(v148);
    }
  }
  if (*(_BYTE *)(a1 + 1936) && *(_QWORD *)(a1 + 512))
  {
    v99 = sub_1001FBB04(0);
    sub_1000A4A6C(v99, 45, *(_QWORD *)(a1 + 512));
    v100 = *(_QWORD *)(a1 + 512);
    if (v100)
      (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
    *(_QWORD *)(a1 + 512) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v101 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_INFO, "Unregistering Significant User Interaction notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering Significant User Interaction notifications", v160, v157);
      v150 = (uint8_t *)v149;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v149);
      if (v150 != buf)
        free(v150);
    }
  }
  v102 = *(_QWORD *)(a1 + 1216);
  if (v102)
  {
    objc_msgSend(*(id *)(v102 + 16), "unregister:forNotification:", *(_QWORD *)(v102 + 8), 0);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v103 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_INFO, "Unregistering Fitness Machine notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering Fitness Machine notifications", v160, v157);
      v136 = (uint8_t *)v135;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v135);
      if (v136 != buf)
        free(v136);
    }
  }
  if (*(_QWORD *)(a1 + 520))
  {
    v104 = sub_101015D0C();
    sub_1000A4A6C(v104, 0, *(_QWORD *)(a1 + 520));
    v105 = *(_QWORD *)(a1 + 520);
    *(_QWORD *)(a1 + 520) = 0;
    if (v105)
      (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
  }
  if (*(_BYTE *)(a1 + 2028) && *(_QWORD *)(a1 + 528))
  {
    v106 = sub_1001FBB04(0);
    sub_1000A4A6C(v106, 50, *(_QWORD *)(a1 + 528));
    v107 = *(_QWORD *)(a1 + 528);
    if (v107)
      (*(void (**)(uint64_t))(*(_QWORD *)v107 + 8))(v107);
    *(_QWORD *)(a1 + 528) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v108 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_INFO, "Unregistering Haptic Module State notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering Haptic Module State notifications", v160, v157);
      v152 = (uint8_t *)v151;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v151);
      if (v152 != buf)
        free(v152);
    }
  }
  if (*(_BYTE *)(a1 + 1945) && *(_QWORD *)(a1 + 840) && sub_1009545A0())
  {
    v109 = sub_1009545A0();
    sub_1000A4A6C(v109, 0, *(_QWORD *)(a1 + 840));
    v110 = *(_QWORD *)(a1 + 840);
    if (v110)
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
    *(_QWORD *)(a1 + 840) = 0;
    v111 = sub_1009545A0();
    sub_1000A4A6C(v111, 1, *(_QWORD *)(a1 + 848));
    v112 = *(_QWORD *)(a1 + 848);
    if (v112)
      (*(void (**)(uint64_t))(*(_QWORD *)v112 + 8))(v112);
    *(_QWORD *)(a1 + 848) = 0;
    v113 = sub_1009545A0();
    sub_1000A4A6C(v113, 3, *(_QWORD *)(a1 + 856));
    v114 = *(_QWORD *)(a1 + 856);
    if (v114)
      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
    *(_QWORD *)(a1 + 856) = 0;
    v115 = sub_1009545A0();
    sub_1000A4A6C(v115, 2, *(_QWORD *)(a1 + 864));
    v116 = *(_QWORD *)(a1 + 864);
    if (v116)
      (*(void (**)(uint64_t))(*(_QWORD *)v116 + 8))(v116);
    *(_QWORD *)(a1 + 864) = 0;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v117 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_INFO, "Unregistering for keyboard notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v160[0] = 0;
      LODWORD(v157) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Unregistering for keyboard notifications", v160, v157);
      v156 = (uint8_t *)v155;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::disableRuntimeSwitchableLogging()", "%s\n", v155);
      if (v156 != buf)
        free(v156);
    }
  }
  return sub_100E3E6F0(a1 + 256);
}

void sub_100BE3364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100BE3388(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1144) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1144) + 8), 2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 3);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 7);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 880) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1096) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1096) + 8), 5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8), 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8), 5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8), 6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 888) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 888) + 8), 10);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 896) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 896) + 8), 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1152) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8), 5);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1152) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1152) + 8), 6);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 4);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 22);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 33);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1160) + 8), 23);
  v2 = *(_QWORD *)(a1 + 1112);
  if (v2)
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 41);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1168) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1168) + 8), 1);
  if (*(_QWORD *)(a1 + 424))
  {
    v3 = sub_1001FBB04(0);
    sub_1000A4A6C(v3, 12, *(_QWORD *)(a1 + 424));
    v4 = *(_QWORD *)(a1 + 424);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 424) = 0;
  }
  objc_msgSend(*(id *)(a1 + 2048), "stopMonitoringVisitsForClient:", *(_QWORD *)(a1 + 2040));
  objc_msgSend(*(id *)(a1 + 2048), "stopLeechingLowConfidenceVisitsForClient:", *(_QWORD *)(a1 + 2040));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1208) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 8), 0);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1184) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1184) + 8), 0);
  v5 = *(_QWORD *)(a1 + 1120);
  if (v5)
    objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 36);
  v6 = *(_QWORD *)(a1 + 1128);
  if (v6)
    objc_msgSend(*(id *)(v6 + 16), "unregister:forNotification:", *(_QWORD *)(v6 + 8), 5);
  if (*(_BYTE *)(a1 + 1136))
  {
    v7 = sub_10022B068();
    sub_1015A2E04(__p, "CLMotionLogger");
    sub_10000782C(v7, (uint64_t *)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 1136) = 0;
  }
  sub_100BE433C(a1);
  if (*(_QWORD *)(a1 + 464))
  {
    v8 = sub_1001FBB04(0);
    sub_1000A4A6C(v8, 36, *(_QWORD *)(a1 + 464));
    v9 = *(_QWORD *)(a1 + 464);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(a1 + 464) = 0;
  }
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1224) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 1224) + 8), 0);
}

void sub_100BE3610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100BE362C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 808)
    && +[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable"))
  {
    objc_msgSend(*(id *)(a1 + 808), "invalidate");

    *(_QWORD *)(a1 + 808) = 0;
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v2 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "clearActivityAlarmStatic", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_1021789C8);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "clearActivityAlarmStatic", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::clearActivityAlarmStatic()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t sub_100BE37E0(uint64_t a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  __int16 v9;
  _QWORD v10[279];
  uint64_t v11;
  char v12;
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1 + 2064), "clearFence:forClient:", *(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 2040));

  *(_QWORD *)(a1 + 2064) = 0;
  sub_1015EB864(v10);
  sub_101605C44((uint64_t)v10);
  Current = CFAbsoluteTimeGetCurrent();
  v12 |= 1u;
  *(CFAbsoluteTime *)&v10[77] = Current;
  v3 = v11;
  *(_BYTE *)(v11 + 20) |= 1u;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = v11;
  *(_BYTE *)(v11 + 20) |= 2u;
  *(_DWORD *)(v4 + 16) = 0;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v10);
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_1021789C8);
  v5 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "clearPedestrianFence", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v9 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "clearPedestrianFence", &v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::clearPedestrianFence()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return sub_1015EE304((PB::Base *)v10);
}

void sub_100BE3A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BE3A54(uint64_t a1)
{
  sub_100BE0EA0(a1);
  operator delete();
}

NSDictionary *__cdecl sub_100BE3A78(id a1)
{
  return (NSDictionary *)&off_102220010;
}

NSDictionary *__cdecl sub_100BE3A84(id a1)
{
  return (NSDictionary *)&off_102220038;
}

void sub_100BE3A90(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onBasebandSpeedNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onBasebandSpeedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onBasebandSpeedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BEA64C(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE3C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BE3C5C(uint64_t a1, uint64_t a2)
{
  return sub_100BF0A44(a2);
}

uint64_t sub_100BE3C6C(uint64_t a1, uint64_t a2)
{
  return sub_100BF0B48(a2, a1);
}

id sub_100BE3C7C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Registering for visual localizations", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Registering for visual localizations", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::registerForVisualLocalizations()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 2080), "registerForVisionNotifications:", *(_QWORD *)(a1 + 2040));
}

void sub_100BE3E18(uint64_t *a1, uint64_t a2)
{
  _BOOL8 v4;
  NSObject *v5;
  NSObject *v6;
  os_activity_scope_state_s state;
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  CLProfilingIdentify("CLMotionLogger::onBasebandCompassCoexNotification");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 248), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021788A8);
  v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v4)
  {
    v8 = 1;
    v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionLogger::onBasebandCompassCoexNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021788A8);
    v6 = qword_1022A0228;
    v4 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v4)
    {
      *(_DWORD *)buf = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "activity";
      v15 = 2050;
      v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionLogger::onBasebandCompassCoexNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v8 = 0;
  }
  sub_100BEA7B8(v4, a1);
  if (v8)
    os_activity_scope_leave(&state);
}

void sub_100BE3FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_100BE3FE4(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  CFAbsoluteTime Current;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v19[417];
  uint64_t v20;
  char v21;
  uint64_t (**v22)(_QWORD);
  uint64_t v23;
  _QWORD v24[2];
  _DWORD v25[2];
  __int16 v26;
  uint64_t v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  uint64_t v31;

  result = *(unsigned __int8 **)(a1 + 8);
  if (*result == 2)
  {
    memset(v24, 0, 11);
    v22 = &off_102178A58;
    v23 = 0;
    sub_101217628(result, &v22);
    v2 = v23;
    v3 = v24[0];
    v4 = LOBYTE(v24[1]);
    v5 = BYTE1(v24[1]);
    v6 = BYTE2(v24[1]);
    sub_1015EB864(v19);
    sub_101604088((uint64_t)v19);
    Current = CFAbsoluteTimeGetCurrent();
    v21 |= 1u;
    *(CFAbsoluteTime *)&v19[77] = Current;
    v8 = v20;
    *(_BYTE *)(v20 + 44) |= 2u;
    *(_QWORD *)(v8 + 16) = v2;
    v9 = v20;
    *(_BYTE *)(v20 + 44) |= 4u;
    *(_QWORD *)(v9 + 24) = v3;
    v10 = v20;
    *(_BYTE *)(v20 + 44) |= 0x10u;
    *(_DWORD *)(v10 + 36) = v4;
    v11 = v20;
    *(_BYTE *)(v20 + 44) |= 8u;
    *(_DWORD *)(v11 + 32) = v5;
    v12 = v20;
    *(_BYTE *)(v20 + 44) |= 0x20u;
    *(_BYTE *)(v12 + 40) = v6 != 0;
    v13 = v20;
    v14 = sub_1001FCBB4();
    *(_BYTE *)(v13 + 44) |= 1u;
    *(double *)(v13 + 8) = v14;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v19);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_1021789A8);
    v15 = qword_10229FD08;
    if (os_log_type_enabled((os_log_t)qword_10229FD08, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      v29 = v4;
      v30 = 2048;
      v31 = v3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[CLMotionLogger] state,%d,timestampPossible,%llu", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_1021789A8);
      v25[0] = 67109376;
      v25[1] = v4;
      v26 = 2048;
      v27 = v3;
      LODWORD(v18) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD08, 2, "[CLMotionLogger] state,%d,timestampPossible,%llu", v25, v18);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "static void CLMotionLogger::onWakeGesture(const CMSPU::GestureReport::Sample *, void *)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_1015EE304((PB::Base *)v19);
    return (unsigned __int8 *)nullsub_34(&v22);
  }
  return result;
}

void sub_100BE4310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1015EE304((PB::Base *)va);
  nullsub_34(&STACK[0xE40]);
  _Unwind_Resume(a1);
}

id sub_100BE433C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Un-registering for visual localizations", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Un-registering for visual localizations", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::unregisterForVisualLocalizations()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 2080), "deregisterForVisionNotifications:", *(_QWORD *)(a1 + 2040));
}

uint64_t sub_100BE44D8()
{
  if (qword_1023071E8 != -1)
    dispatch_once(&qword_1023071E8, &stru_102178838);
  return qword_1023113B8;
}

void sub_100BE4518(id a1)
{
  if (sub_100760428())
  {
    +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", sub_10024455C());
    operator new();
  }
  qword_1023113B8 = 0;
}

void sub_100BE4588()
{
  operator delete();
}

void sub_100BE45AC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v33;
  int v34;
  id v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[5];
  uint64_t (**v50)();
  CFAbsoluteTime Current;
  int v52;
  int v53;
  uint64_t v54;
  uint8_t buf[616];
  CFAbsoluteTime v56;
  uint64_t v57;
  char v58;

  objc_msgSend(*(id *)(a1 + 248), "silo");
  if (*a3 == 2)
  {
    v50 = off_102171BA0;
    Current = CFAbsoluteTimeGetCurrent();
    v54 = *(_QWORD *)a4;
    v7 = *(_QWORD *)(a4 + 16);
    v52 = *(_QWORD *)(a4 + 112);
    v53 = v7;
    sub_1015EB864(buf);
    sub_101605348((uint64_t)buf);
    v58 |= 1u;
    v56 = Current;
    v8 = v57;
    v9 = *(_QWORD *)(a4 + 24);
    *(_WORD *)(v57 + 64) |= 2u;
    *(_QWORD *)(v8 + 16) = v9;
    v10 = v57;
    v11 = *(_QWORD *)a4;
    *(_WORD *)(v57 + 64) |= 8u;
    *(_QWORD *)(v10 + 32) = v11;
    v12 = v57;
    v13 = *(_QWORD *)(a4 + 8);
    *(_WORD *)(v57 + 64) |= 1u;
    *(_QWORD *)(v12 + 8) = v13;
    v14 = v57;
    v15 = *(_QWORD *)(a4 + 16);
    *(_WORD *)(v57 + 64) |= 0x10u;
    *(_DWORD *)(v14 + 40) = v15;
    v16 = v57;
    v17 = *(_QWORD *)(a4 + 112);
    *(_WORD *)(v57 + 64) |= 0x200u;
    *(_DWORD *)(v16 + 60) = v17;
    v18 = v57;
    v19 = *(_QWORD *)(a4 + 120);
    *(_WORD *)(v57 + 64) |= 0x80u;
    *(_DWORD *)(v18 + 52) = v19;
    v20 = v57;
    v21 = *(_QWORD *)(a4 + 224);
    *(_WORD *)(v57 + 64) |= 0x100u;
    *(_DWORD *)(v20 + 56) = v21;
    v22 = *(_QWORD *)(a4 + 112);
    if (v22 == 14)
    {
      v30 = v57;
      v31 = *(_QWORD *)(a4 + 128);
      *(_WORD *)(v57 + 64) |= 0x20u;
      *(_DWORD *)(v30 + 44) = v31;
    }
    else if (v22 == 19)
    {
      v23 = v57;
      v24 = *(_QWORD *)(a4 + 128);
      *(_WORD *)(v57 + 64) |= 0x40u;
      *(_DWORD *)(v23 + 48) = v24;
      v25 = v57;
      v26 = *(_QWORD *)(a4 + 136);
      *(_WORD *)(v57 + 64) |= 4u;
      *(_QWORD *)(v25 + 24) = v26;
    }
    v33 = *(_QWORD *)(a4 + 16) != 1 && *(_QWORD *)(a4 + 224) == 1;
    *(_BYTE *)(a1 + 800) = v33;
    v34 = sub_100F72B18(a4);
    if (v34 == 2)
    {
      if (*(_BYTE *)(a1 + 1279))
      {
        sub_100127B9C();
        v35 = sub_10024455C();
        v36 = *(double *)(a1 + 1816);
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472;
        v49[2] = sub_100BE4A0C;
        v49[3] = &unk_10212ECA0;
        v49[4] = a1;
        objc_msgSend(v35, "afterInterval:async:", v49, v36);
      }
    }
    else
    {
      if (v34 != 1)
      {
LABEL_28:
        v48 = sub_1011B78D4();
        sub_1011B8DB0(v48, (uint64_t)&v50);
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_1021788C8);
        if (qword_1023118B0)
          sub_101888B64(qword_1023118B0, (uint64_t)buf);
        sub_1015EE304((PB::Base *)buf);
        return;
      }
      if (*(_BYTE *)(a1 + 1279))
        sub_100BD3A84(a1);
    }
    v37 = *(_OWORD *)a4;
    v38 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a1 + 2120) = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 2136) = v38;
    *(_OWORD *)(a1 + 2104) = v37;
    v39 = *(_OWORD *)(a4 + 48);
    v40 = *(_OWORD *)(a4 + 64);
    v41 = *(_OWORD *)(a4 + 96);
    *(_OWORD *)(a1 + 2184) = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 2200) = v41;
    *(_OWORD *)(a1 + 2152) = v39;
    *(_OWORD *)(a1 + 2168) = v40;
    v42 = *(_OWORD *)(a4 + 112);
    v43 = *(_OWORD *)(a4 + 128);
    v44 = *(_OWORD *)(a4 + 160);
    *(_OWORD *)(a1 + 2248) = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a1 + 2264) = v44;
    *(_OWORD *)(a1 + 2216) = v42;
    *(_OWORD *)(a1 + 2232) = v43;
    v45 = *(_OWORD *)(a4 + 176);
    v46 = *(_OWORD *)(a4 + 192);
    v47 = *(_OWORD *)(a4 + 208);
    *(_QWORD *)(a1 + 2328) = *(_QWORD *)(a4 + 224);
    *(_OWORD *)(a1 + 2296) = v46;
    *(_OWORD *)(a1 + 2312) = v47;
    *(_OWORD *)(a1 + 2280) = v45;
    goto LABEL_28;
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v27 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    LOWORD(v50) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning Unhandled notification", &v50, 2);
    v29 = (uint8_t *)v28;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v28);
    if (v29 != buf)
      free(v29);
  }
}

void sub_100BE49E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BE4A0C(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  v1 = *(_QWORD **)(a1 + 32);
  if (sub_100F72B18((uint64_t)(v1 + 263)) == 1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v3 = v1[266];
      v4 = v1[265];
      v5 = v1[277];
      v6[0] = 68289795;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2050;
      v10 = v3;
      v11 = 1025;
      v12 = v4;
      v13 = 1025;
      v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MotionLogger: Still in workout, not disabling runtime logging\", \"eventTime\":\"%{public}f\", \"eventType\":%{private}d, \"workoutType\":%{private}d}", (uint8_t *)v6, 0x28u);
    }
  }
  else
  {
    sub_100BE11B4((uint64_t)v1);
  }
}

void sub_100BE4B50(uint64_t a1)
{
  sub_100BE4B58(*(_QWORD *)(a1 + 32));
}

void sub_100BE4B58(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  sub_100BE362C(a1);
  sub_100BE4CF0(a1, 1);
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_1021789C8);
  v2 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "onActivityAlarmStaticNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "onActivityAlarmStaticNotification", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onActivityAlarmStaticNotification()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

id sub_100BE4CF0(uint64_t a1, int a2)
{
  double Current;
  double v5;
  double v6;
  int v7;
  uint64_t v8;
  __CFUserNotification *v9;
  double v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  NSDateFormatter *v14;
  NSMutableString *v15;
  NSDate *v16;
  NSDate *v17;
  NSObject *v18;
  float v19;
  id v20;
  CFUserNotificationRef v21;
  NSObject *v22;
  CFRunLoopSourceRef RunLoopSource;
  __CFRunLoopSource *v24;
  __CFRunLoop *v25;
  NSObject *v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  char *v33;
  int v34;
  double v35;
  __int128 buf;
  double v37;
  float v38;

  if (a2)
  {
    AudioServicesPlaySystemSound(0x596u);
    Current = CFAbsoluteTimeGetCurrent();
    *(double *)(a1 + 816) = Current;
    return (id)sub_100BE56B8(a1, Current);
  }
  AudioServicesPlaySystemSound(0x60Bu);
  v5 = CFAbsoluteTimeGetCurrent();
  v6 = *(double *)(a1 + 816);
  v7 = *(_DWORD *)(a1 + 1976);
  while (*((_QWORD *)&xmmword_102307240 + 1))
  {
    v8 = *(_QWORD *)(qword_102307228 + (((unint64_t)xmmword_102307240 >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * (xmmword_102307240 & 0x7F);
    v9 = *(__CFUserNotification **)v8;
    v10 = *(double *)(v8 + 16);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v11 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(double *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,popping pending notification,%f", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_1021789C8);
      v34 = 134217984;
      v35 = v10;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "PedestrianFenceNotification,popping pending notification,%f", COERCE_DOUBLE(&v34));
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v12);
      if (v13 != (char *)&buf)
        free(v13);
    }
    CFUserNotificationCancel(v9);
    CFRelease(v9);
    xmmword_102307240 = (__int128)vaddq_s64((int64x2_t)xmmword_102307240, (int64x2_t)xmmword_101B9DFC0);
    sub_1003432C8((uint64_t)&qword_102307220, 1);
  }
  v14 = objc_opt_new(NSDateFormatter);
  -[NSDateFormatter setDateStyle:](v14, "setDateStyle:", 1);
  -[NSDateFormatter setTimeStyle:](v14, "setTimeStyle:", 2);
  -[NSDateFormatter setLocale:](v14, "setLocale:", objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US")));
  v15 = objc_opt_new(NSMutableString);
  -[NSMutableString appendString:](v15, "appendString:", CFSTR("(Response to be logged in MSL)"));
  -[NSMutableString appendString:](v15, "appendString:", CFSTR("\n\n"));
  v16 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v6);
  -[NSMutableString appendString:](v15, "appendString:", CFSTR("Static:\n"));
  -[NSMutableString appendString:](v15, "appendString:", -[NSDateFormatter stringFromDate:](v14, "stringFromDate:", v16));
  -[NSMutableString appendString:](v15, "appendString:", CFSTR("\n\n"));
  v17 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v5);
  -[NSMutableString appendString:](v15, "appendString:", CFSTR("Pedestrian Fence Exit:\n"));
  -[NSMutableString appendString:](v15, "appendString:", -[NSDateFormatter stringFromDate:](v14, "stringFromDate:", v17));
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_1021789C8);
  v18 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(double *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,creating notification,%f", (uint8_t *)&buf, 0xCu);
  }
  v19 = (float)v7;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v34 = 134217984;
    v35 = v5;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "PedestrianFenceNotification,creating notification,%f", COERCE_DOUBLE(&v34));
    v30 = (char *)v29;
    sub_100512490("Generic", 1, 0, 2, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v29);
    if (v30 != (char *)&buf)
      free(v30);
  }
  v20 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Are you >>%.0fm from your last static position?"), v19), kCFUserNotificationAlertHeaderKey);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Yes, >>%.0fm"), v19), kCFUserNotificationAlternateButtonTitleKey);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("No, <<%.0fm"), v19), kCFUserNotificationOtherButtonTitleKey);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", CFSTR("I'm not sure..."), kCFUserNotificationDefaultButtonTitleKey);
  objc_msgSend(v20, "setObject:forKeyedSubscript:", v15, kCFUserNotificationAlertMessageKey);
  v21 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, 0, (CFDictionaryRef)v20);

  if (!v21)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021789E8);
    v26 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "PedestrianFenceNotification,could not create notification", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return sub_100BDB9EC((id)a1);
    bzero(&buf, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021789E8);
    LOWORD(v34) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "PedestrianFenceNotification,could not create notification", &v34, 2);
LABEL_53:
    v33 = (char *)v27;
    sub_100512490("Generic", 1, 0, 0, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v27);
    if (v33 != (char *)&buf)
      free(v33);
    return sub_100BDB9EC((id)a1);
  }
  *(_QWORD *)&buf = v21;
  *((double *)&buf + 1) = v6;
  v37 = v5;
  v38 = v19;
  sub_100BF2FCC(&qword_102307220, (uint64_t)&buf);
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_1021789C8);
  v22 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = *((_QWORD *)&xmmword_102307240 + 1);
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,pending notifications count,%lu", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v34 = 134217984;
    v35 = *((double *)&xmmword_102307240 + 1);
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "PedestrianFenceNotification,pending notifications count,%lu", &v34);
    v32 = (char *)v31;
    sub_100512490("Generic", 1, 0, 2, "void pedestrianFenceNotificationDisplay(const CFAbsoluteTime, const CFAbsoluteTime, const float)", "%s\n", v31);
    if (v32 != (char *)&buf)
      free(v32);
  }
  CFRetain(v21);
  RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v21, (CFUserNotificationCallBack)sub_100BF3058, 0);
  if (!RunLoopSource)
  {
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v28 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "PedestrianFenceNotification,could not create runloop source for notification", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return sub_100BDB9EC((id)a1);
    bzero(&buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    LOWORD(v34) = 0;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FF78, 17, "PedestrianFenceNotification,could not create runloop source for notification", &v34, 2);
    goto LABEL_53;
  }
  v24 = RunLoopSource;
  v25 = (__CFRunLoop *)sub_100193530();
  CFRunLoopAddSource(v25, v24, kCFRunLoopCommonModes);
  CFRelease(v24);
  CFRelease(v21);
  return sub_100BDB9EC((id)a1);
}

uint64_t sub_100BE56B8(uint64_t a1, double a2)
{
  float v2;
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  double v6;
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _QWORD v11[279];
  uint64_t v12;
  char v13;
  int v14;
  double v15;
  uint8_t buf[4];
  double v17;

  v2 = (float)*(int *)(a1 + 1976);
  *(float *)&a2 = v2;
  objc_msgSend(*(id *)(a1 + 2064), "setFence:forClient:withRadius:", *(_QWORD *)(a1 + 824), *(_QWORD *)(a1 + 2040), a2);
  sub_1015EB864(v11);
  sub_101605C44((uint64_t)v11);
  Current = CFAbsoluteTimeGetCurrent();
  v13 |= 1u;
  *(CFAbsoluteTime *)&v11[77] = Current;
  v4 = v12;
  *(_BYTE *)(v12 + 20) |= 1u;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = v12;
  *(_BYTE *)(v12 + 20) |= 2u;
  *(float *)(v5 + 16) = v2;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v11);
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_1021789C8);
  v6 = v2;
  v7 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PedestrianFence set with radius %.0f [m]", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v14 = 134217984;
    v15 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "PedestrianFence set with radius %.0f [m]", COERCE_DOUBLE(&v14));
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::createPedestrianFence()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return sub_1015EE304((PB::Base *)v11);
}

void sub_100BE593C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BE595C(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  double v47;
  int v48;
  _BOOL4 v49;
  _BOOL4 v50;
  NSObject *v51;
  CFAbsoluteTime v52;
  NSDate *v53;
  NSDateFormatter *v54;
  NSMutableString *v55;
  uint64_t v56;
  __CFUserNotification *v57;
  uint64_t v58;
  NSObject *v59;
  const char *v60;
  char *v61;
  NSObject *v62;
  id v63;
  const __CFString *v64;
  CFUserNotificationRef v65;
  NSObject *v66;
  void (__cdecl *v67)(CFUserNotificationRef, CFOptionFlags);
  __CFRunLoopSource *RunLoopSource;
  __CFRunLoop *v69;
  NSObject *v70;
  const char *v71;
  char *v72;
  NSObject *v73;
  const char *v75;
  char *v76;
  uint64_t v77;
  CFAbsoluteTime v78;
  const char *v79;
  char *v80;
  const char *v81;
  char *v82;
  const char *v83;
  char *v84;
  const char *v85;
  double v86;
  double v87;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  _QWORD v95[256];
  uint64_t v96;
  char v97;
  uint64_t (**v98)();
  CFAbsoluteTime Current;
  int v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  double v108;
  double v109;
  uint64_t v110;
  int v111;
  char v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  _BYTE v118[20];
  __int16 v119;
  int v120;
  __int16 v121;
  _BOOL4 v122;
  _BYTE buf[24];
  __int16 v124;
  int v125;
  __int16 v126;
  _BOOL4 v127;

  v3 = *a2;
  v2 = a2[1];
  v4 = *((_DWORD *)a2 + 6);
  v5 = *((unsigned __int8 *)a2 + 28);
  v6 = *((unsigned __int8 *)a2 + 29);
  v7 = *((unsigned __int8 *)a2 + 30);
  v8 = *((unsigned __int8 *)a2 + 31);
  v9 = *((_BYTE *)a2 + 32);
  v10 = *((_BYTE *)a2 + 33);
  v11 = *((unsigned __int8 *)a2 + 35);
  v12 = *((_QWORD *)a2 + 5);
  v92 = *((unsigned __int8 *)a2 + 62);
  v93 = *((unsigned __int8 *)a2 + 60);
  v89 = *((unsigned __int8 *)a2 + 104);
  v90 = *((unsigned __int8 *)a2 + 105);
  v91 = *((unsigned __int8 *)a2 + 61);
  v13 = *((_DWORD *)a2 + 29);
  v15 = *((_DWORD *)a2 + 31);
  v14 = *((_DWORD *)a2 + 32);
  v17 = *((_DWORD *)a2 + 33);
  v16 = *((_DWORD *)a2 + 34);
  v18 = *((_BYTE *)a2 + 144);
  v98 = off_102171888;
  Current = CFAbsoluteTimeGetCurrent();
  v94 = v4;
  v100 = v4;
  v101 = v5;
  v102 = v6;
  v103 = v7;
  v105 = v8;
  v19 = v9 & 1;
  v106 = v9 & 1;
  v20 = v10 & 1;
  v107 = v10 & 1;
  v104 = v11;
  v108 = v2;
  v109 = v3;
  v110 = v12;
  v111 = v13;
  v113 = v15;
  v114 = v14;
  v115 = v17;
  v116 = v16;
  v21 = v18 & 1;
  v112 = v18 & 1;
  v22 = sub_1011B78D4();
  sub_1011B8DB0(v22, (uint64_t)&v98);
  sub_1015EB864(v95);
  sub_101605028((uint64_t)v95);
  v23 = v93;
  v97 |= 1u;
  *(CFAbsoluteTime *)&v95[77] = Current;
  v24 = v96;
  *(_QWORD *)(v96 + 192) |= 0x8000uLL;
  *(_DWORD *)(v24 + 100) = v94;
  v25 = v96;
  *(_QWORD *)(v96 + 192) |= 0x100uLL;
  *(_DWORD *)(v25 + 72) = v5;
  v26 = v96;
  *(_QWORD *)(v96 + 192) |= 0x10000uLL;
  *(_DWORD *)(v26 + 104) = v6;
  v27 = v96;
  *(_QWORD *)(v96 + 192) |= 0x20000uLL;
  *(_DWORD *)(v27 + 108) = v7;
  v28 = v96;
  *(_QWORD *)(v96 + 192) |= 0x800uLL;
  *(_DWORD *)(v28 + 84) = v11;
  v29 = v96;
  *(_QWORD *)(v96 + 192) |= 0x8000000uLL;
  *(_DWORD *)(v29 + 148) = v8;
  v30 = v96;
  *(_QWORD *)(v96 + 192) |= 0x2000uLL;
  *(_DWORD *)(v30 + 92) = v19;
  v31 = v96;
  *(_QWORD *)(v96 + 192) |= 0x1000uLL;
  *(_DWORD *)(v31 + 88) = v20;
  v32 = v96;
  *(_QWORD *)(v96 + 192) |= 8uLL;
  *(double *)(v32 + 40) = v2;
  v33 = v96;
  *(_QWORD *)(v96 + 192) |= 1uLL;
  *(double *)(v33 + 8) = v3;
  v34 = v96;
  *(_QWORD *)(v96 + 192) |= 4uLL;
  *(_QWORD *)(v34 + 24) = v12;
  v35 = v96;
  *(_QWORD *)(v96 + 192) |= 0x20000000uLL;
  *(_DWORD *)(v35 + 156) = v13;
  v36 = v96;
  *(_QWORD *)(v96 + 192) |= 0x4000000uLL;
  *(_DWORD *)(v36 + 144) = v21;
  v37 = v96;
  *(_QWORD *)(v96 + 192) |= 0x4000uLL;
  *(_DWORD *)(v37 + 96) = v15;
  v38 = v96;
  *(_QWORD *)(v96 + 192) |= 0x400000uLL;
  *(_DWORD *)(v38 + 128) = v14;
  v39 = v96;
  *(_QWORD *)(v96 + 192) |= 0x200000uLL;
  *(_DWORD *)(v39 + 124) = v17;
  v40 = v96;
  *(_QWORD *)(v96 + 192) |= 0x800000uLL;
  *(_DWORD *)(v40 + 132) = v16;
  v41 = v96;
  *(_QWORD *)(v96 + 192) |= 0x800000000uLL;
  *(_DWORD *)(v41 + 180) = v91;
  sub_10164F6D8(v96);
  v42 = *(_QWORD *)(v96 + 32);
  *(_BYTE *)(v42 + 20) |= 1u;
  *(_DWORD *)(v42 + 8) = v93;
  v43 = v96;
  *(_QWORD *)(v96 + 192) |= 0x10000000uLL;
  *(_DWORD *)(v43 + 152) = v89;
  v44 = v96;
  *(_QWORD *)(v96 + 192) |= 0x2000000000uLL;
  *(_DWORD *)(v44 + 188) = v90;
  v45 = v96;
  *(_QWORD *)(v96 + 192) |= 0x400000000uLL;
  *(_DWORD *)(v45 + 176) = v92;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v95);
  if (*(_BYTE *)(a1 + 1939))
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021789E8);
    v46 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = (v94 & 0x7300) != 0;
      *(_WORD *)&buf[8] = 2048;
      *(double *)&buf[10] = v3;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] motion state update: vehicular,%d timestamp,%f", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v117 = 67109376;
      *(_DWORD *)v118 = (v94 & 0x7300) != 0;
      *(_WORD *)&v118[4] = 2048;
      *(double *)&v118[6] = v3;
      LODWORD(v86) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] motion state update: vehicular,%d timestamp,%f", &v117, v86);
      v76 = (char *)v75;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onMotionStateNotification(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v75);
      if (v76 != buf)
        free(v76);
      v23 = v93;
    }
    v47 = CFAbsoluteTimeGetCurrent() - *(double *)&qword_102307258;
    v48 = v94 & 0x7300;
    v49 = v48 != 0;
    if (byte_102307250)
      v49 = 0;
    v50 = v47 > 1800.0 && v49;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021789E8);
    v51 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      v52 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v94;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v92;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&buf[16] = v52 - *(double *)&qword_102307258;
      v124 = 1024;
      v125 = byte_102307250;
      v126 = 1024;
      v127 = v50;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] motion state update: motionState,%d,vehicleType,%d,timeSinceLastPopup,%f,wasVehicular,%d,shouldShowTTR,%d", buf, 0x24u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v77 = qword_10229FCB8;
      v78 = CFAbsoluteTimeGetCurrent();
      v117 = 67110144;
      *(_DWORD *)v118 = v94;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v92;
      *(_WORD *)&v118[10] = 2048;
      *(double *)&v118[12] = v78 - *(double *)&qword_102307258;
      v119 = 1024;
      v120 = byte_102307250;
      v121 = 1024;
      v122 = v50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 0, "[VehicleDetectionAlert] motion state update: motionState,%d,vehicleType,%d,timeSinceLastPopup,%f,wasVehicular,%d,shouldShowTTR,%d", &v117, 36, v87, a1, v89);
      v80 = (char *)v79;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onMotionStateNotification(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v79);
      if (v80 != buf)
        free(v80);
      v23 = v93;
      if (!v50)
        goto LABEL_76;
    }
    else if (!v50)
    {
LABEL_76:
      byte_102307250 = v48 != 0;
      return sub_1015EE304((PB::Base *)v95);
    }
    qword_102307258 = CFAbsoluteTimeGetCurrent();
    v53 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v2);
    v54 = objc_opt_new(NSDateFormatter);
    -[NSDateFormatter setDateStyle:](v54, "setDateStyle:", 1);
    -[NSDateFormatter setTimeStyle:](v54, "setTimeStyle:", 2);
    -[NSDateFormatter setLocale:](v54, "setLocale:", objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US")));
    v55 = objc_opt_new(NSMutableString);
    -[NSMutableString appendString:](v55, "appendString:", CFSTR("(Response logged in MSL)\n\nVehicle State Detected:\n"));
    -[NSMutableString appendString:](v55, "appendString:", -[NSDateFormatter stringFromDate:](v54, "stringFromDate:", v53));
    if ((v23 & 1) != 0)
      -[NSMutableString appendString:](v55, "appendString:", CFSTR("\nmotion hint"));
    if ((v23 & 2) != 0)
      -[NSMutableString appendString:](v55, "appendString:", CFSTR("\ngps hint"));
    if ((v23 & 4) != 0)
      -[NSMutableString appendString:](v55, "appendString:", CFSTR("\nbaseband hint"));
    if ((v23 & 8) != 0)
      -[NSMutableString appendString:](v55, "appendString:", CFSTR("\nwifi hint"));
    if ((v23 & 0x10) != 0)
      -[NSMutableString appendString:](v55, "appendString:", CFSTR("\nbt hint"));
    while (*((_QWORD *)&xmmword_102307210 + 1))
    {
      v56 = *(_QWORD *)(qword_1023071F8 + (((unint64_t)xmmword_102307210 >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * xmmword_102307210;
      v57 = *(__CFUserNotification **)v56;
      v58 = *(_QWORD *)(v56 + 8);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v59 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v58;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] Popping pending notification: %f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021789E8);
        v117 = 134217984;
        *(_QWORD *)v118 = v58;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] Popping pending notification: %f", COERCE_DOUBLE(&v117));
        v61 = (char *)v60;
        sub_100512490("Generic", 1, 0, 2, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v60);
        if (v61 != buf)
          free(v61);
      }
      CFUserNotificationCancel(v57);
      CFRelease(v57);
      xmmword_102307210 = (__int128)vaddq_s64((int64x2_t)xmmword_102307210, (int64x2_t)xmmword_101B9DFC0);
      sub_1004A57E8((uint64_t)&qword_1023071F0, 1);
    }
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021789E8);
    v62 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v92;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] Creating vehicle notification,%f type:%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v117 = 134218240;
      *(double *)v118 = v2;
      *(_WORD *)&v118[8] = 1024;
      *(_DWORD *)&v118[10] = v92;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] Creating vehicle notification,%f type:%d", COERCE_DOUBLE(&v117), 18);
      v82 = (char *)v81;
      sub_100512490("Generic", 1, 0, 2, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v81);
      if (v82 != buf)
        free(v82);
    }
    v63 = objc_alloc_init((Class)NSMutableDictionary);
    if (v92 == 3)
      v64 = CFSTR("Are you riding a motorcycle? \n🏍️");
    else
      v64 = CFSTR("Are you in a vehicle? \n🚗");
    objc_msgSend(v63, "setObject:forKeyedSubscript:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", v64), kCFUserNotificationAlertHeaderKey);
    objc_msgSend(v63, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v92), CFSTR("vehicleType"));
    objc_msgSend(v63, "setObject:forKeyedSubscript:", CFSTR("Yes"), kCFUserNotificationAlternateButtonTitleKey);
    objc_msgSend(v63, "setObject:forKeyedSubscript:", CFSTR("No"), kCFUserNotificationOtherButtonTitleKey);
    objc_msgSend(v63, "setObject:forKeyedSubscript:", CFSTR("File Radar"), kCFUserNotificationDefaultButtonTitleKey);
    objc_msgSend(v63, "setObject:forKeyedSubscript:", v55, kCFUserNotificationAlertMessageKey);
    v65 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, 0, (CFDictionaryRef)v63);

    if (v65)
    {
      *(_QWORD *)buf = v65;
      *(double *)&buf[8] = v2;
      sub_100BF3C08(&qword_1023071F0, (__n128 *)buf);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v66 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = *((_QWORD *)&xmmword_102307210 + 1);
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] pending notifications count: %lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021789E8);
        v117 = 134217984;
        *(_QWORD *)v118 = *((_QWORD *)&xmmword_102307210 + 1);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] pending notifications count: %lu", &v117);
        v84 = (char *)v83;
        sub_100512490("Generic", 1, 0, 2, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v83);
        if (v84 != buf)
          free(v84);
      }
      CFRetain(v65);
      if (v92 == 3)
        v67 = (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))sub_100BF3C90;
      else
        v67 = (void (__cdecl *)(CFUserNotificationRef, CFOptionFlags))sub_100BF3C98;
      RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v65, v67, 0);
      if (RunLoopSource)
      {
        v69 = (__CFRunLoop *)sub_100193530();
        CFRunLoopAddSource(v69, RunLoopSource, kCFRunLoopCommonModes);
        CFRelease(RunLoopSource);
        CFRelease(v65);
        goto LABEL_76;
      }
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v73 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_FAULT, "[VehicleDetectionAlert] Could not create runloop source for Vehicle user notification", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_76;
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      LOWORD(v117) = 0;
      LODWORD(v86) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "[VehicleDetectionAlert] Could not create runloop source for Vehicle user notification", &v117, *(_QWORD *)&v86);
      v72 = (char *)v85;
      sub_100512490("Generic", 1, 0, 0, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v85);
    }
    else
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v70 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_FAULT, "[VehicleDetectionAlert] Could not create Vehicle user notification", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_76;
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      LOWORD(v117) = 0;
      LODWORD(v86) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "[VehicleDetectionAlert] Could not create Vehicle user notification", &v117, *(_QWORD *)&v86);
      v72 = (char *)v71;
      sub_100512490("Generic", 1, 0, 0, "void DisplayVehicleDialog(NSString *, double, CMMotionContext::VehicleType)", "%s\n", v71);
    }
    if (v72 != buf)
      free(v72);
    v48 = v94 & 0x7300;
    goto LABEL_76;
  }
  return sub_1015EE304((PB::Base *)v95);
}

void sub_100BE6A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BE6ACC(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CFAbsoluteTime v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  _BYTE v60[56];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[64];
  _QWORD v67[77];
  CFAbsoluteTime v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t (**v72)();
  CFAbsoluteTime Current;
  __int128 v74;
  uint64_t v75;
  int v76;

  switch(*a3)
  {
    case 3:
    case 7:
      v5 = a4[1];
      v59 = *a4;
      *(_OWORD *)v60 = v5;
      v6 = a4[3];
      *(_OWORD *)&v60[16] = a4[2];
      *(_OWORD *)&v60[32] = v6;
      v72 = off_102172428;
      Current = CFAbsoluteTimeGetCurrent();
      v74 = v59;
      v75 = *(_QWORD *)v60;
      v76 = *(_DWORD *)&v60[24];
      v7 = sub_1011B78D4();
      sub_1011B8DB0(v7, (uint64_t)&v72);
      sub_1015EB864(v67);
      v71 |= 1u;
      v68 = Current;
      sub_10163B6DC((uint64_t)&v59, (uint64_t)v66);
      operator new();
    case 4:
      *(_QWORD *)&v59 = off_102172270;
      *((_QWORD *)&v59 + 1) = CFAbsoluteTimeGetCurrent();
      v8 = a4[1];
      *(_OWORD *)&v60[8] = *a4;
      *(_OWORD *)&v60[24] = v8;
      v9 = a4[3];
      *(_OWORD *)&v60[40] = a4[2];
      v61 = v9;
      *(int32x2_t *)&v9 = vrev64_s32((int32x2_t)a4[5]);
      v62 = *((_QWORD *)a4 + 8);
      v63 = v9;
      v10 = a4[7];
      v64 = a4[6];
      v65 = v10;
      v11 = sub_1011B78D4();
      sub_1011B8DB0(v11, (uint64_t)&v59);
      sub_1015EB864(v67);
      sub_101605924((uint64_t)v67);
      v71 |= 1u;
      v68 = *((double *)&v59 + 1);
      sub_101654E98(v70);
      v12 = *(_QWORD *)(v70 + 72);
      v13 = *(_QWORD *)a4;
      *(_WORD *)(v12 + 100) |= 0x80u;
      *(_QWORD *)(v12 + 64) = v13;
      v14 = *(_QWORD *)(v70 + 72);
      v15 = *((_QWORD *)a4 + 1);
      *(_WORD *)(v14 + 100) |= 2u;
      *(_QWORD *)(v14 + 16) = v15;
      v16 = *(_QWORD *)(v70 + 72);
      v17 = *((_QWORD *)a4 + 2);
      *(_WORD *)(v16 + 100) |= 1u;
      *(_QWORD *)(v16 + 8) = v17;
      v18 = *(_QWORD *)(v70 + 72);
      v19 = *((_QWORD *)a4 + 3);
      *(_WORD *)(v18 + 100) |= 4u;
      *(_QWORD *)(v18 + 24) = v19;
      v20 = *(_QWORD *)(v70 + 72);
      v21 = *((_QWORD *)a4 + 4);
      *(_WORD *)(v20 + 100) |= 0x40u;
      *(_QWORD *)(v20 + 56) = v21;
      v22 = *(_QWORD *)(v70 + 72);
      v23 = *((_QWORD *)a4 + 5);
      *(_WORD *)(v22 + 100) |= 0x20u;
      *(_QWORD *)(v22 + 48) = v23;
      v24 = *(_QWORD *)(v70 + 72);
      v25 = *((_QWORD *)a4 + 6);
      *(_WORD *)(v24 + 100) |= 0x10u;
      *(_QWORD *)(v24 + 40) = v25;
      v26 = *(_QWORD *)(v70 + 72);
      v27 = *((_QWORD *)a4 + 7);
      *(_WORD *)(v26 + 100) |= 8u;
      *(_QWORD *)(v26 + 32) = v27;
      v28 = *(_QWORD *)(v70 + 72);
      v29 = *((_QWORD *)a4 + 8);
      *(_WORD *)(v28 + 100) |= 0x100u;
      *(_QWORD *)(v28 + 72) = v29;
      v30 = *(_QWORD *)(v70 + 72);
      v31 = *((_DWORD *)a4 + 21);
      *(_WORD *)(v30 + 100) |= 0x400u;
      *(_DWORD *)(v30 + 84) = v31;
      v32 = *(_QWORD *)(v70 + 72);
      v33 = *((_DWORD *)a4 + 20);
      *(_WORD *)(v32 + 100) |= 0x800u;
      *(_DWORD *)(v32 + 88) = v33;
      v34 = *(_QWORD *)(v70 + 72);
      LOBYTE(v33) = *((_BYTE *)a4 + 168);
      *(_WORD *)(v34 + 100) |= 0x2000u;
      *(_BYTE *)(v34 + 96) = v33;
      v35 = v70;
      v36 = *((_QWORD *)a4 + 12);
      *(_BYTE *)(v70 + 80) |= 4u;
      *(_QWORD *)(v35 + 24) = v36;
      v37 = v70;
      v38 = *((_QWORD *)a4 + 13);
      *(_BYTE *)(v70 + 80) |= 8u;
      *(_QWORD *)(v37 + 32) = v38;
      v39 = v70;
      v40 = *((_QWORD *)a4 + 14);
      *(_BYTE *)(v70 + 80) |= 0x40u;
      *(_QWORD *)(v39 + 56) = v40;
      v41 = v70;
      v42 = *((_QWORD *)a4 + 15);
      *(_BYTE *)(v70 + 80) |= 0x80u;
      *(_QWORD *)(v41 + 64) = v42;
      v43 = v70;
      v44 = *((_QWORD *)a4 + 16);
      *(_BYTE *)(v70 + 80) |= 2u;
      *(_QWORD *)(v43 + 16) = v44;
      v45 = v70;
      v46 = *((_QWORD *)a4 + 17);
      *(_BYTE *)(v70 + 80) |= 1u;
      *(_QWORD *)(v45 + 8) = v46;
      v47 = v70;
      v48 = *((_QWORD *)a4 + 18);
      *(_BYTE *)(v70 + 80) |= 0x20u;
      *(_QWORD *)(v47 + 48) = v48;
      v49 = v70;
      v50 = *((_QWORD *)a4 + 19);
      *(_BYTE *)(v70 + 80) |= 0x10u;
      *(_QWORD *)(v49 + 40) = v50;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v51 = qword_1023118B0;
      if (qword_1023118B0)
        goto LABEL_10;
      goto LABEL_11;
    case 5:
      *(_QWORD *)&v59 = off_102172480;
      v52 = CFAbsoluteTimeGetCurrent();
      v53 = *(_QWORD *)a4;
      *((CFAbsoluteTime *)&v59 + 1) = v52;
      *(_QWORD *)&v60[8] = v53;
      *(_DWORD *)&v60[16] = *((_DWORD *)a4 + 2);
      v54 = sub_1011B78D4();
      sub_1011B8DB0(v54, (uint64_t)&v59);
      sub_1015EB864(v67);
      sub_101605474((uint64_t)v67);
      v71 |= 1u;
      v68 = *((double *)&v59 + 1);
      v55 = v69;
      v56 = *(_QWORD *)a4;
      *(_BYTE *)(v69 + 20) |= 1u;
      *(_QWORD *)(v55 + 8) = v56;
      v57 = v69;
      v58 = *((_DWORD *)a4 + 2);
      *(_BYTE *)(v69 + 20) |= 2u;
      *(_DWORD *)(v57 + 16) = v58;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v51 = qword_1023118B0;
      if (qword_1023118B0)
LABEL_10:
        sub_101888B64(v51, (uint64_t)v67);
LABEL_11:
      sub_1015EE304((PB::Base *)v67);
      break;
    default:
      return;
  }
}

void sub_100BE6FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1015EE304((PB::Base *)&a35);
  _Unwind_Resume(a1);
}

void sub_100BE7024(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  CFAbsoluteTime Current;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  CFAbsoluteTime v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD v52[76];
  uint64_t v53;
  CFAbsoluteTime v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t (**v58)();
  CFAbsoluteTime v59;
  uint64_t v60;
  __int128 v61;
  char v62;
  __int128 v63;
  uint64_t v64;
  _BOOL4 v65;

  v5 = *a3;
  if (*a3 == 10)
  {
    sub_1015EB864(v52);
    sub_101604984((uint64_t)v52);
    Current = CFAbsoluteTimeGetCurrent();
    v57 |= 1u;
    v54 = Current;
    sub_10161A348(v56);
    v26 = *(_QWORD *)(v56 + 8);
    v27 = *a4;
    *(_WORD *)(v26 + 68) |= 0x40u;
    *(_DWORD *)(v26 + 52) = v27;
    v28 = *(_QWORD *)(v56 + 8);
    v29 = a4[1];
    *(_WORD *)(v28 + 68) |= 0x80u;
    *(_DWORD *)(v28 + 56) = v29;
    v30 = *(_QWORD *)(v56 + 8);
    v31 = *((_QWORD *)a4 + 1);
    *(_WORD *)(v30 + 68) |= 2u;
    *(_QWORD *)(v30 + 16) = v31;
    v32 = *(_QWORD *)(v56 + 8);
    v33 = *((_QWORD *)a4 + 2);
    *(_WORD *)(v32 + 68) |= 1u;
    *(_QWORD *)(v32 + 8) = v33;
    v34 = *(_QWORD *)(v56 + 8);
    LOBYTE(v29) = *((_BYTE *)a4 + 24);
    *(_WORD *)(v34 + 68) |= 0x200u;
    *(_BYTE *)(v34 + 64) = v29;
    v35 = *(_QWORD *)(v56 + 8);
    v36 = *((_QWORD *)a4 + 4);
    *(_WORD *)(v35 + 68) |= 0x10u;
    *(_QWORD *)(v35 + 40) = v36;
    v37 = *(_QWORD *)(v56 + 8);
    v38 = *((_QWORD *)a4 + 5);
    *(_WORD *)(v37 + 68) |= 8u;
    *(_QWORD *)(v37 + 32) = v38;
    v39 = *(_QWORD *)(v56 + 8);
    v40 = *((_QWORD *)a4 + 6);
    *(_WORD *)(v39 + 68) |= 4u;
    *(_QWORD *)(v39 + 24) = v40;
    v41 = *(_QWORD *)(v56 + 8);
    v42 = a4[14];
    *(_WORD *)(v41 + 68) |= 0x20u;
    *(_DWORD *)(v41 + 48) = v42;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    v24 = qword_1023118B0;
    if (!qword_1023118B0)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (v5 == 6)
  {
    sub_1015EB864(v52);
    v43 = CFAbsoluteTimeGetCurrent();
    v57 |= 1u;
    v54 = v43;
    sub_101602EF4((uint64_t)v52);
    v44 = v53;
    v45 = *(_QWORD *)a4;
    *(_BYTE *)(v53 + 36) |= 4u;
    *(_QWORD *)(v44 + 24) = v45;
    v46 = v53;
    v47 = *((_QWORD *)a4 + 1);
    *(_BYTE *)(v53 + 36) |= 1u;
    *(_QWORD *)(v46 + 8) = v47;
    v48 = v53;
    v49 = *((_QWORD *)a4 + 2);
    *(_BYTE *)(v53 + 36) |= 2u;
    *(_QWORD *)(v48 + 16) = v49;
    v50 = v53;
    v51 = a4[6];
    *(_BYTE *)(v53 + 36) |= 8u;
    *(_DWORD *)(v50 + 32) = v51;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    v24 = qword_1023118B0;
    if (!qword_1023118B0)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (v5 != 5)
    return;
  v58 = off_102172530;
  v59 = CFAbsoluteTimeGetCurrent();
  v60 = *(_QWORD *)a4;
  v61 = *(_OWORD *)(a4 + 2);
  v62 = *((_BYTE *)a4 + 24);
  v63 = *((_OWORD *)a4 + 2);
  v64 = *((_QWORD *)a4 + 6);
  v65 = a4[14] == 5;
  v6 = sub_1011B78D4();
  sub_1011B8DB0(v6, (uint64_t)&v58);
  sub_1015EB864(v52);
  sub_101605410((uint64_t)v52);
  v57 |= 1u;
  v54 = v59;
  sub_10161A348(v55);
  v7 = *(_QWORD *)(v55 + 8);
  v8 = *a4;
  *(_WORD *)(v7 + 68) |= 0x40u;
  *(_DWORD *)(v7 + 52) = v8;
  v9 = *(_QWORD *)(v55 + 8);
  v10 = a4[1];
  *(_WORD *)(v9 + 68) |= 0x80u;
  *(_DWORD *)(v9 + 56) = v10;
  v11 = *(_QWORD *)(v55 + 8);
  v12 = *((_QWORD *)a4 + 1);
  *(_WORD *)(v11 + 68) |= 2u;
  *(_QWORD *)(v11 + 16) = v12;
  v13 = *(_QWORD *)(v55 + 8);
  v14 = *((_QWORD *)a4 + 2);
  *(_WORD *)(v13 + 68) |= 1u;
  *(_QWORD *)(v13 + 8) = v14;
  v15 = *(_QWORD *)(v55 + 8);
  LOBYTE(v10) = *((_BYTE *)a4 + 24);
  *(_WORD *)(v15 + 68) |= 0x200u;
  *(_BYTE *)(v15 + 64) = v10;
  v16 = *(_QWORD *)(v55 + 8);
  v17 = *((_QWORD *)a4 + 4);
  *(_WORD *)(v16 + 68) |= 0x10u;
  *(_QWORD *)(v16 + 40) = v17;
  v18 = *(_QWORD *)(v55 + 8);
  v19 = *((_QWORD *)a4 + 5);
  *(_WORD *)(v18 + 68) |= 8u;
  *(_QWORD *)(v18 + 32) = v19;
  v20 = *(_QWORD *)(v55 + 8);
  v21 = *((_QWORD *)a4 + 6);
  *(_WORD *)(v20 + 68) |= 4u;
  *(_QWORD *)(v20 + 24) = v21;
  v22 = *(_QWORD *)(v55 + 8);
  v23 = a4[14];
  *(_WORD *)(v22 + 68) |= 0x20u;
  *(_DWORD *)(v22 + 48) = v23;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  v24 = qword_1023118B0;
  if (qword_1023118B0)
LABEL_15:
    sub_101888B64(v24, (uint64_t)v52);
LABEL_16:
  sub_1015EE304((PB::Base *)v52);
}

void sub_100BE7474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

void sub_100BE74A4(uint64_t a1, uint64_t a2, _DWORD *a3, double *a4)
{
  CFAbsoluteTime Current;
  double v6;
  double v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD v16[49];
  uint64_t v17;
  CFAbsoluteTime v18;
  char v19;
  uint64_t (**v20)();
  CFAbsoluteTime v21;
  double v22;
  double v23;
  BOOL v24;

  if (!*a3)
  {
    v20 = off_102171990;
    Current = CFAbsoluteTimeGetCurrent();
    v6 = *a4;
    v7 = a4[1];
    v21 = Current;
    v22 = v6;
    v23 = v7;
    v8 = v6 > 0.0;
    if (v7 >= 0.0)
      v8 = 0;
    v24 = v8;
    v9 = sub_1011B78D4();
    sub_1011B8DB0(v9, (uint64_t)&v20);
    sub_1015EB864(v16);
    sub_10160508C((uint64_t)v16);
    v19 |= 1u;
    v18 = v21;
    v10 = v17;
    v11 = *a4;
    *(_BYTE *)(v17 + 28) |= 2u;
    *(double *)(v10 + 16) = v11;
    v12 = v17;
    v13 = *((_QWORD *)a4 + 1);
    *(_BYTE *)(v17 + 28) |= 1u;
    *(_QWORD *)(v12 + 8) = v13;
    v14 = v17;
    v15 = *a4 > 0.0;
    if (a4[1] >= 0.0)
      v15 = 0;
    *(_BYTE *)(v17 + 28) |= 4u;
    *(_BYTE *)(v14 + 24) = v15;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v16);
    sub_1015EE304((PB::Base *)v16);
  }
}

void sub_100BE75D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BE75F0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  double v8;
  double v9;
  float v10;
  float v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  NSObject *v57;
  int v58;
  int v59;
  const char *v60;
  uint8_t *v61;
  _BYTE v62[8];
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  char v68;
  char v69;
  uint8_t buf[616];
  CFAbsoluteTime v71;
  uint64_t v72;
  char v73;
  uint64_t (**v74)();
  CFAbsoluteTime v75;
  uint64_t v76;
  double v77;
  double v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  uint64_t v90;
  int v91;

  if (*a3 == 5 || *a3 == 0)
  {
    v8 = *(double *)(a4 + 4);
    v9 = *(double *)(a4 + 12);
    if (*(_BYTE *)(a1 + 1748))
    {
      v10 = __exp10((float)*(int *)(a1 + 1752));
      v8 = round(v8 * v10) / v10;
      v11 = __exp10((float)*(int *)(a1 + 1752));
      v9 = round(v9 * v11) / v11;
    }
    v74 = off_102172588;
    Current = CFAbsoluteTimeGetCurrent();
    v13 = *(_QWORD *)(a4 + 76);
    v75 = Current;
    v76 = v13;
    v77 = v8;
    v79 = *(_OWORD *)(a4 + 44);
    v80 = *(_QWORD *)(a4 + 20);
    v81 = *(_OWORD *)(a4 + 60);
    v82 = *(_OWORD *)(a4 + 28);
    v14 = *(_QWORD *)(a4 + 176);
    v84 = *(_QWORD *)(a4 + 184);
    v85 = *(_DWORD *)(a4 + 476);
    v87 = *(_QWORD *)(a4 + 200);
    v88 = *(_DWORD *)(a4 + 208);
    v89 = *(_OWORD *)(a4 + 160);
    v78 = v9;
    v83 = *(_DWORD *)(a4 + 96);
    v86 = *(_DWORD *)(a4 + 472);
    v90 = v14;
    v91 = *(_DWORD *)(a4 + 512);
    v15 = sub_1011B78D4();
    sub_1011B8DB0(v15, (uint64_t)&v74);
    sub_1015EB864(buf);
    sub_1016054D8((uint64_t)buf);
    v73 |= 1u;
    v71 = v75;
    v16 = v72;
    v17 = *(_QWORD *)(a4 + 76);
    *(_DWORD *)(v72 + 180) |= 0x800u;
    *(_QWORD *)(v16 + 96) = v17;
    v18 = v72;
    *(_DWORD *)(v72 + 180) |= 0x40u;
    *(double *)(v18 + 56) = v8;
    v19 = v72;
    *(_DWORD *)(v72 + 180) |= 0x80u;
    *(double *)(v19 + 64) = v9;
    v20 = v72;
    v21 = *(_QWORD *)(a4 + 44);
    *(_DWORD *)(v72 + 180) |= 0x200u;
    *(_QWORD *)(v20 + 80) = v21;
    v22 = v72;
    v23 = *(_QWORD *)(a4 + 52);
    *(_DWORD *)(v72 + 180) |= 0x400u;
    *(_QWORD *)(v22 + 88) = v23;
    v24 = v72;
    v25 = *(_QWORD *)(a4 + 20);
    *(_DWORD *)(v72 + 180) |= 0x20u;
    *(_QWORD *)(v24 + 48) = v25;
    v26 = v72;
    v27 = *(_QWORD *)(a4 + 60);
    *(_DWORD *)(v72 + 180) |= 2u;
    *(_QWORD *)(v26 + 16) = v27;
    v28 = v72;
    v29 = *(_QWORD *)(a4 + 68);
    *(_DWORD *)(v72 + 180) |= 4u;
    *(_QWORD *)(v28 + 24) = v29;
    v30 = v72;
    v31 = *(_QWORD *)(a4 + 28);
    *(_DWORD *)(v72 + 180) |= 1u;
    *(_QWORD *)(v30 + 8) = v31;
    v32 = v72;
    v33 = *(_QWORD *)(a4 + 36);
    *(_DWORD *)(v72 + 180) |= 0x2000u;
    *(_QWORD *)(v32 + 120) = v33;
    v34 = v72;
    v35 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)(v72 + 180) |= 0x800000u;
    *(_DWORD *)(v34 + 164) = v35;
    v36 = v72;
    v37 = *(_QWORD *)(a4 + 184);
    *(_DWORD *)(v72 + 180) |= 0x1000u;
    *(_QWORD *)(v36 + 104) = v37;
    v38 = v72;
    LODWORD(v37) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(v72 + 180) |= 0x1000000u;
    *(_DWORD *)(v38 + 168) = v37;
    v39 = v72;
    v40 = *(_DWORD *)(a4 + 472);
    *(_DWORD *)(v72 + 180) |= 0x2000000u;
    *(_DWORD *)(v39 + 172) = v40;
    v41 = v72;
    LODWORD(v37) = *(_DWORD *)(a4 + 200);
    *(_DWORD *)(v72 + 180) |= 0x20000u;
    *(_DWORD *)(v41 + 140) = v37;
    v42 = v72;
    LODWORD(v37) = *(_DWORD *)(a4 + 204);
    *(_DWORD *)(v72 + 180) |= 0x80000u;
    *(_DWORD *)(v42 + 148) = v37;
    v43 = v72;
    LODWORD(v37) = *(_DWORD *)(a4 + 208);
    *(_DWORD *)(v72 + 180) |= 0x40000u;
    *(_DWORD *)(v43 + 144) = v37;
    v44 = v72;
    v45 = *(_QWORD *)(a4 + 160);
    *(_DWORD *)(v72 + 180) |= 0x100u;
    *(_QWORD *)(v44 + 72) = v45;
    v46 = v72;
    v47 = *(_QWORD *)(a4 + 168);
    *(_DWORD *)(v72 + 180) |= 8u;
    *(_QWORD *)(v46 + 32) = v47;
    v48 = v72;
    v49 = *(_QWORD *)(a4 + 176);
    *(_DWORD *)(v72 + 180) |= 0x10u;
    *(_QWORD *)(v48 + 40) = v49;
    v50 = v72;
    v51 = *(_DWORD *)(a4 + 512);
    *(_DWORD *)(v72 + 180) |= 0x200000u;
    *(_DWORD *)(v50 + 156) = v51;
    v52 = v72;
    v53 = *(_QWORD *)(a1 + 2096);
    *(_DWORD *)(v72 + 180) |= 0x10000u;
    *(_DWORD *)(v52 + 136) = v53;
    v54 = v72;
    LODWORD(v53) = *a3;
    *(_DWORD *)(v72 + 180) |= 0x100000u;
    *(_DWORD *)(v54 + 152) = v53;
    sub_10161FED8((uint64_t)v62);
    v55 = *(_DWORD *)(a4 + 408);
    v65 = *(_QWORD *)(a4 + 424);
    v64 = *(_DWORD *)(a4 + 432);
    v56 = *(_DWORD *)(a4 + 436);
    v66 = v55;
    v67 = v56;
    v63 = *(_QWORD *)(a4 + 440);
    LOBYTE(v55) = *(_BYTE *)(a4 + 448);
    v69 |= 0x7Fu;
    v68 = v55;
    operator new();
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  v57 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
  {
    v58 = *a3;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v58;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "MotionLogger: Unexpected LocationNotification=%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v59 = *a3;
    LODWORD(v74) = 67109120;
    HIDWORD(v74) = v59;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "MotionLogger: Unexpected LocationNotification=%d", &v74);
    v61 = (uint8_t *)v60;
    sub_100512490("Generic", 1, 0, 0, "void CLMotionLogger::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v60);
    if (v61 != buf)
      free(v61);
  }
}

void sub_100BE7BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  PB::Base::~Base((PB::Base *)va);
  sub_1015EE304((PB::Base *)va1);
  _Unwind_Resume(a1);
}

void sub_100BE7BFC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double v7;
  double v8;
  float v9;
  float v10;
  int v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  float v20;
  float v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  CFAbsoluteTime v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  CFAbsoluteTime v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  CFAbsoluteTime v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *p_shared_owners;
  unint64_t v210;
  uint64_t (**v211)();
  CFAbsoluteTime Current;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  int v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  int v224;
  CFAbsoluteTime v225;
  uint64_t v226;
  char v227;
  uint64_t (**v228)();
  CFAbsoluteTime v229;
  uint64_t v230;
  double v231;
  double v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  __int128 v237;
  int v238;
  uint64_t v239;
  int v240;
  int v241;
  uint64_t v242;
  int v243;
  _OWORD v244[8];
  _OWORD v245[2];
  uint64_t v246[66];
  std::__shared_weak_count *v247;
  CFAbsoluteTime v248;
  uint64_t v249;
  uint64_t v250;
  char v251;

  v7 = *(double *)(a4 + 4);
  v8 = *(double *)(a4 + 12);
  if (*(_BYTE *)(a1 + 1748))
  {
    v9 = __exp10((float)*(int *)(a1 + 1752));
    v7 = round(v7 * v9) / v9;
    v10 = __exp10((float)*(int *)(a1 + 1752));
    v8 = round(v8 * v10) / v10;
  }
  v11 = *a3;
  if (*a3 <= 22)
  {
    if (v11 != 4)
    {
      if (v11 == 22)
      {
        v12 = *(int **)(a4 + 800);
        if (v12)
        {
          if (sub_10104BD1C(v12))
          {
            v13 = 0;
            v14 = 52;
            v15 = 316;
            do
            {
              v16 = sub_1003471B4(*(_QWORD *)(a4 + 800));
              v17 = sub_1003471BC(*(_QWORD *)(a4 + 800));
              v19 = *(double *)(v16 + v14 - 48);
              v18 = *(double *)(v16 + v14 - 40);
              if (*(_BYTE *)(a1 + 1748))
              {
                v20 = __exp10((float)*(int *)(a1 + 1752));
                v19 = round(v19 * v20) / v20;
                v21 = __exp10((float)*(int *)(a1 + 1752));
                v18 = round(v18 * v21) / v21;
              }
              v211 = off_1021725E0;
              Current = CFAbsoluteTimeGetCurrent();
              v22 = v16 + v14;
              v213 = *(_QWORD *)(v16 + v14 + 24);
              v214 = *(_OWORD *)(v16 + v14 - 48);
              v215 = *(_OWORD *)(v16 + v14 - 8);
              v216 = *(_QWORD *)(v16 + v14 - 32);
              v217 = *(_OWORD *)(v16 + v14 + 8);
              v218 = *(_OWORD *)(v16 + v14 - 24);
              v219 = *(_DWORD *)(v16 + v14 + 44);
              v23 = (_DWORD *)(v17 + v15);
              v24 = (uint64_t *)(v17 + v15 - 292);
              v220 = *v24;
              v221 = *(_DWORD *)(v17 + v15);
              v222 = -1;
              v25 = (uint64_t *)(v17 + v15 - 276);
              v223 = *v25;
              v26 = (int *)(v17 + v15 - 268);
              v224 = *v26;
              v27 = sub_1011B78D4();
              sub_1011B8DB0(v27, (uint64_t)&v211);
              sub_1015EB864(v246);
              sub_10160553C((uint64_t)v246);
              v251 |= 1u;
              v248 = Current;
              sub_10164FD00(v250);
              v28 = *(_QWORD *)(v250 + 8);
              v29 = *(_QWORD *)(v22 + 24);
              *(_DWORD *)(v28 + 180) |= 0x800u;
              *(_QWORD *)(v28 + 96) = v29;
              v30 = *(_QWORD *)(v250 + 8);
              *(_DWORD *)(v30 + 180) |= 0x40u;
              *(double *)(v30 + 56) = v19;
              v31 = *(_QWORD *)(v250 + 8);
              *(_DWORD *)(v31 + 180) |= 0x80u;
              *(double *)(v31 + 64) = v18;
              v32 = *(_QWORD *)(v250 + 8);
              v33 = *(_QWORD *)(v22 - 8);
              *(_DWORD *)(v32 + 180) |= 0x200u;
              *(_QWORD *)(v32 + 80) = v33;
              v34 = *(_QWORD *)(v250 + 8);
              v35 = *(_QWORD *)v22;
              *(_DWORD *)(v34 + 180) |= 0x400u;
              *(_QWORD *)(v34 + 88) = v35;
              v36 = *(_QWORD *)(v250 + 8);
              v37 = *(_QWORD *)(v22 - 32);
              *(_DWORD *)(v36 + 180) |= 0x20u;
              *(_QWORD *)(v36 + 48) = v37;
              v38 = *(_QWORD *)(v250 + 8);
              v39 = *(_QWORD *)(v22 + 8);
              *(_DWORD *)(v38 + 180) |= 2u;
              *(_QWORD *)(v38 + 16) = v39;
              v40 = *(_QWORD *)(v250 + 8);
              v41 = *(_QWORD *)(v22 + 16);
              *(_DWORD *)(v40 + 180) |= 4u;
              *(_QWORD *)(v40 + 24) = v41;
              v42 = *(_QWORD *)(v250 + 8);
              v43 = *(_QWORD *)(v22 - 24);
              *(_DWORD *)(v42 + 180) |= 1u;
              *(_QWORD *)(v42 + 8) = v43;
              v44 = *(_QWORD *)(v250 + 8);
              v45 = *(_QWORD *)(v22 - 16);
              *(_DWORD *)(v44 + 180) |= 0x2000u;
              *(_QWORD *)(v44 + 120) = v45;
              v46 = *(_QWORD *)(v250 + 8);
              v47 = *(_DWORD *)(v22 + 44);
              *(_DWORD *)(v46 + 180) |= 0x800000u;
              *(_DWORD *)(v46 + 164) = v47;
              v48 = *(_QWORD *)(v250 + 8);
              v49 = *v24;
              *(_DWORD *)(v48 + 180) |= 0x1000u;
              *(_QWORD *)(v48 + 104) = v49;
              v50 = *(_QWORD *)(v250 + 8);
              LODWORD(v49) = *v23;
              *(_DWORD *)(v50 + 180) |= 0x1000000u;
              *(_DWORD *)(v50 + 168) = v49;
              v51 = *(_QWORD *)(v250 + 8);
              *(_DWORD *)(v51 + 180) |= 0x2000000u;
              *(_DWORD *)(v51 + 172) = -1;
              v52 = *(_QWORD *)(v250 + 8);
              LODWORD(v49) = *(_DWORD *)v25;
              *(_DWORD *)(v52 + 180) |= 0x20000u;
              *(_DWORD *)(v52 + 140) = v49;
              v53 = *(_QWORD *)(v250 + 8);
              LODWORD(v49) = *(v23 - 68);
              *(_DWORD *)(v53 + 180) |= 0x80000u;
              *(_DWORD *)(v53 + 148) = v49;
              v54 = *(_QWORD *)(v250 + 8);
              LODWORD(v49) = *v26;
              *(_DWORD *)(v54 + 180) |= 0x40000u;
              *(_DWORD *)(v54 + 144) = v49;
              if (qword_1023118A8 != -1)
                dispatch_once(&qword_1023118A8, &stru_1021788C8);
              if (qword_1023118B0)
                sub_101888B64(qword_1023118B0, (uint64_t)v246);
              sub_1015EE304((PB::Base *)v246);
              ++v13;
              v14 += 156;
              v15 += 560;
            }
            while (v13 < sub_10104BD1C(*(int **)(a4 + 800)));
          }
        }
      }
      return;
    }
    sub_1015EB864(v246);
    sub_101603534((uint64_t)v246);
    v113 = CFAbsoluteTimeGetCurrent();
    v251 |= 1u;
    v248 = v113;
    v114 = v249;
    v115 = *(_QWORD *)(a4 + 76);
    *(_DWORD *)(v249 + 220) |= 0x40000u;
    *(_QWORD *)(v114 + 152) = v115;
    v116 = v249;
    *(_DWORD *)(v249 + 220) |= 0x100u;
    *(double *)(v116 + 72) = v7;
    v117 = v249;
    *(_DWORD *)(v249 + 220) |= 0x200u;
    *(double *)(v117 + 80) = v8;
    v118 = v249;
    v119 = *(_QWORD *)(a4 + 44);
    *(_DWORD *)(v249 + 220) |= 0x10000u;
    *(_QWORD *)(v118 + 136) = v119;
    v120 = v249;
    v121 = *(_QWORD *)(a4 + 52);
    *(_DWORD *)(v249 + 220) |= 0x20000u;
    *(_QWORD *)(v120 + 144) = v121;
    v122 = v249;
    v123 = *(_QWORD *)(a4 + 20);
    *(_DWORD *)(v249 + 220) |= 0x80u;
    *(_QWORD *)(v122 + 64) = v123;
    v124 = v249;
    v125 = *(_QWORD *)(a4 + 60);
    *(_DWORD *)(v249 + 220) |= 2u;
    *(_QWORD *)(v124 + 16) = v125;
    v126 = v249;
    v127 = *(_QWORD *)(a4 + 68);
    *(_DWORD *)(v249 + 220) |= 4u;
    *(_QWORD *)(v126 + 24) = v127;
    v128 = v249;
    v129 = *(_QWORD *)(a4 + 28);
    *(_DWORD *)(v249 + 220) |= 1u;
    *(_QWORD *)(v128 + 8) = v129;
    v130 = v249;
    v131 = *(_QWORD *)(a4 + 36);
    *(_DWORD *)(v249 + 220) |= 0x100000u;
    *(_QWORD *)(v130 + 168) = v131;
    v132 = v249;
    v133 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)(v249 + 220) |= 0x10000000u;
    *(_DWORD *)(v132 + 204) = v133;
    v134 = v249;
    v135 = *(_QWORD *)(a4 + 184);
    *(_DWORD *)(v249 + 220) |= 0x80000u;
    *(_QWORD *)(v134 + 160) = v135;
    v136 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(v249 + 220) |= 0x20000000u;
    *(_DWORD *)(v136 + 208) = v135;
    v137 = v249;
    v138 = *(_DWORD *)(a4 + 472);
    *(_DWORD *)(v249 + 220) |= 0x40000000u;
    *(_DWORD *)(v137 + 212) = v138;
    v139 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 200);
    *(_DWORD *)(v249 + 220) |= 0x200000u;
    *(_DWORD *)(v139 + 176) = v135;
    v140 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 204);
    *(_DWORD *)(v249 + 220) |= 0x800000u;
    *(_DWORD *)(v140 + 184) = v135;
    v141 = v249;
    LODWORD(v135) = *(_DWORD *)(a4 + 208);
    *(_DWORD *)(v249 + 220) |= 0x400000u;
    *(_DWORD *)(v141 + 180) = v135;
    v142 = v249;
    v143 = *(_QWORD *)(a4 + 160);
    *(_DWORD *)(v249 + 220) |= 0x800u;
    *(_QWORD *)(v142 + 96) = v143;
    v144 = v249;
    v145 = *(_QWORD *)(a4 + 168);
    *(_DWORD *)(v249 + 220) |= 8u;
    *(_QWORD *)(v144 + 32) = v145;
    v146 = v249;
    v147 = *(_QWORD *)(a4 + 176);
    *(_DWORD *)(v249 + 220) |= 0x10u;
    *(_QWORD *)(v146 + 40) = v147;
    v148 = v249;
    v149 = *(_DWORD *)(a4 + 512);
    *(_DWORD *)(v249 + 220) |= 0x2000000u;
    *(_DWORD *)(v148 + 192) = v149;
    v150 = v249;
    v151 = *(_DWORD *)(a4 + 140);
    *(_DWORD *)(v249 + 220) |= 0x8000000u;
    *(_DWORD *)(v150 + 200) = v151;
    v152 = v249;
    v153 = *(_DWORD *)(a4 + 216);
    *(_DWORD *)(v249 + 220) |= 0x1000000u;
    *(_DWORD *)(v152 + 188) = v153;
    v154 = v249;
    v155 = *(_QWORD *)(a4 + 536);
    *(_DWORD *)(v249 + 220) |= 0x20u;
    *(_QWORD *)(v154 + 48) = v155;
    v156 = v249;
    v157 = *(_QWORD *)(a4 + 544);
    *(_DWORD *)(v249 + 220) |= 0x40u;
    *(_QWORD *)(v156 + 56) = v157;
    v158 = v249;
    v159 = *(_QWORD *)(a4 + 520);
    *(_DWORD *)(v249 + 220) |= 0x8000u;
    *(_QWORD *)(v158 + 128) = v159;
    v160 = v249;
    v161 = *(_QWORD *)(a4 + 528);
    *(_DWORD *)(v249 + 220) |= 0x400u;
    *(_QWORD *)(v160 + 88) = v161;
    v162 = v249;
    *(_DWORD *)(v249 + 220) |= 0x80000000;
    *(_BYTE *)(v162 + 216) = 0;
    v163 = v249;
    v164 = *(_QWORD *)(a4 + 704);
    *(_DWORD *)(v249 + 220) |= 0x1000u;
    *(_QWORD *)(v163 + 104) = v164;
    v165 = v249;
    v166 = *(_QWORD *)(a4 + 712);
    *(_DWORD *)(v249 + 220) |= 0x4000u;
    *(_QWORD *)(v165 + 120) = v166;
    v167 = v249;
    v168 = *(_QWORD *)(a4 + 720);
    *(_DWORD *)(v249 + 220) |= 0x2000u;
    *(_QWORD *)(v167 + 112) = v168;
    v169 = v249;
    v170 = *(_DWORD *)(a4 + 728);
    *(_DWORD *)(v249 + 220) |= 0x4000000u;
    *(_DWORD *)(v169 + 196) = v170;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v246);
    v171 = *(_OWORD *)(a4 + 112);
    v244[6] = *(_OWORD *)(a4 + 96);
    v244[7] = v171;
    v245[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v245 + 12) = *(_OWORD *)(a4 + 140);
    v172 = *(_OWORD *)(a4 + 48);
    v244[2] = *(_OWORD *)(a4 + 32);
    v244[3] = v172;
    v173 = *(_OWORD *)(a4 + 80);
    v244[4] = *(_OWORD *)(a4 + 64);
    v244[5] = v173;
    v174 = *(_OWORD *)(a4 + 16);
    v244[0] = *(_OWORD *)a4;
    v244[1] = v174;
    if (sub_100162654((uint64_t)v244, *(double *)(a4 + 936)) == 2)
    {
      v228 = off_1021725E0;
      v175 = CFAbsoluteTimeGetCurrent();
      v176 = *(_QWORD *)(a4 + 944);
      v229 = v175;
      v230 = v176;
      v231 = v7;
      v232 = v8;
      v177 = *(_QWORD *)(a4 + 952);
      v233 = *(_QWORD *)(a4 + 936);
      v234 = v177;
      v235 = *(_QWORD *)(a4 + 20);
      v236 = *(_OWORD *)(a4 + 60);
      v237 = *(_OWORD *)(a4 + 28);
      v238 = *(_DWORD *)(a4 + 96);
      v239 = *(_QWORD *)(a4 + 184);
      v240 = *(_DWORD *)(a4 + 476);
      v241 = -1;
      v242 = *(_QWORD *)(a4 + 200);
      v243 = *(_DWORD *)(a4 + 208);
      v178 = sub_1011B78D4();
      sub_1011B8DB0(v178, (uint64_t)&v228);
      sub_1015EB864(&v211);
      sub_10160553C((uint64_t)&v211);
      v227 |= 1u;
      v225 = v229;
      sub_10164FD00(v226);
      v179 = *(_QWORD *)(v226 + 8);
      v180 = *(_QWORD *)(a4 + 944);
      *(_DWORD *)(v179 + 180) |= 0x800u;
      *(_QWORD *)(v179 + 96) = v180;
      v181 = *(_QWORD *)(v226 + 8);
      *(_DWORD *)(v181 + 180) |= 0x40u;
      *(double *)(v181 + 56) = v7;
      v182 = *(_QWORD *)(v226 + 8);
      *(_DWORD *)(v182 + 180) |= 0x80u;
      *(double *)(v182 + 64) = v8;
      v183 = *(_QWORD *)(v226 + 8);
      v184 = *(_QWORD *)(a4 + 936);
      *(_DWORD *)(v183 + 180) |= 0x200u;
      *(_QWORD *)(v183 + 80) = v184;
      v185 = *(_QWORD *)(v226 + 8);
      v186 = *(_QWORD *)(a4 + 952);
      *(_DWORD *)(v185 + 180) |= 0x400u;
      *(_QWORD *)(v185 + 88) = v186;
      v187 = *(_QWORD *)(v226 + 8);
      v188 = *(_QWORD *)(a4 + 20);
      *(_DWORD *)(v187 + 180) |= 0x20u;
      *(_QWORD *)(v187 + 48) = v188;
      v189 = *(_QWORD *)(v226 + 8);
      v190 = *(_QWORD *)(a4 + 60);
      *(_DWORD *)(v189 + 180) |= 2u;
      *(_QWORD *)(v189 + 16) = v190;
      v191 = *(_QWORD *)(v226 + 8);
      v192 = *(_QWORD *)(a4 + 68);
      *(_DWORD *)(v191 + 180) |= 4u;
      *(_QWORD *)(v191 + 24) = v192;
      v193 = *(_QWORD *)(v226 + 8);
      v194 = *(_QWORD *)(a4 + 28);
      *(_DWORD *)(v193 + 180) |= 1u;
      *(_QWORD *)(v193 + 8) = v194;
      v195 = *(_QWORD *)(v226 + 8);
      v196 = *(_QWORD *)(a4 + 36);
      *(_DWORD *)(v195 + 180) |= 0x2000u;
      *(_QWORD *)(v195 + 120) = v196;
      v197 = *(_QWORD *)(v226 + 8);
      v198 = *(_DWORD *)(a4 + 96);
      *(_DWORD *)(v197 + 180) |= 0x800000u;
      *(_DWORD *)(v197 + 164) = v198;
      v199 = *(_QWORD *)(v226 + 8);
      v200 = *(_QWORD *)(a4 + 184);
      *(_DWORD *)(v199 + 180) |= 0x1000u;
      *(_QWORD *)(v199 + 104) = v200;
      v201 = *(_QWORD *)(v226 + 8);
      LODWORD(v200) = *(_DWORD *)(a4 + 476);
      *(_DWORD *)(v201 + 180) |= 0x1000000u;
      *(_DWORD *)(v201 + 168) = v200;
      v202 = *(_QWORD *)(v226 + 8);
      *(_DWORD *)(v202 + 180) |= 0x2000000u;
      *(_DWORD *)(v202 + 172) = -1;
      v203 = *(_QWORD *)(v226 + 8);
      LODWORD(v200) = *(_DWORD *)(a4 + 200);
      *(_DWORD *)(v203 + 180) |= 0x20000u;
      *(_DWORD *)(v203 + 140) = v200;
      v204 = *(_QWORD *)(v226 + 8);
      LODWORD(v200) = *(_DWORD *)(a4 + 204);
      *(_DWORD *)(v204 + 180) |= 0x80000u;
      *(_DWORD *)(v204 + 148) = v200;
      v205 = *(_QWORD *)(v226 + 8);
      LODWORD(v200) = *(_DWORD *)(a4 + 208);
      *(_DWORD *)(v205 + 180) |= 0x40000u;
      *(_DWORD *)(v205 + 144) = v200;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)&v211);
      sub_1015EE304((PB::Base *)&v211);
    }
LABEL_33:
    sub_1015EE304((PB::Base *)v246);
    return;
  }
  if (v11 != 23)
  {
    if (v11 != 33)
      return;
    sub_1015EB864(v246);
    sub_101603534((uint64_t)v246);
    v55 = CFAbsoluteTimeGetCurrent();
    v251 |= 1u;
    v248 = v55;
    v56 = v249;
    v57 = *(_QWORD *)(a4 + 76);
    *(_DWORD *)(v249 + 220) |= 0x40000u;
    *(_QWORD *)(v56 + 152) = v57;
    v58 = v249;
    *(_DWORD *)(v249 + 220) |= 0x100u;
    *(double *)(v58 + 72) = v7;
    v59 = v249;
    *(_DWORD *)(v249 + 220) |= 0x200u;
    *(double *)(v59 + 80) = v8;
    v60 = v249;
    v61 = *(_QWORD *)(a4 + 44);
    *(_DWORD *)(v249 + 220) |= 0x10000u;
    *(_QWORD *)(v60 + 136) = v61;
    v62 = v249;
    v63 = *(_QWORD *)(a4 + 52);
    *(_DWORD *)(v249 + 220) |= 0x20000u;
    *(_QWORD *)(v62 + 144) = v63;
    v64 = v249;
    v65 = *(_QWORD *)(a4 + 20);
    *(_DWORD *)(v249 + 220) |= 0x80u;
    *(_QWORD *)(v64 + 64) = v65;
    v66 = v249;
    v67 = *(_QWORD *)(a4 + 60);
    *(_DWORD *)(v249 + 220) |= 2u;
    *(_QWORD *)(v66 + 16) = v67;
    v68 = v249;
    v69 = *(_QWORD *)(a4 + 68);
    *(_DWORD *)(v249 + 220) |= 4u;
    *(_QWORD *)(v68 + 24) = v69;
    v70 = v249;
    v71 = *(_QWORD *)(a4 + 28);
    *(_DWORD *)(v249 + 220) |= 1u;
    *(_QWORD *)(v70 + 8) = v71;
    v72 = v249;
    v73 = *(_QWORD *)(a4 + 36);
    *(_DWORD *)(v249 + 220) |= 0x100000u;
    *(_QWORD *)(v72 + 168) = v73;
    v74 = v249;
    v75 = *(_DWORD *)(a4 + 96);
    *(_DWORD *)(v249 + 220) |= 0x10000000u;
    *(_DWORD *)(v74 + 204) = v75;
    v76 = v249;
    v77 = *(_QWORD *)(a4 + 184);
    *(_DWORD *)(v249 + 220) |= 0x80000u;
    *(_QWORD *)(v76 + 160) = v77;
    v78 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(v249 + 220) |= 0x20000000u;
    *(_DWORD *)(v78 + 208) = v77;
    v79 = v249;
    v80 = *(_DWORD *)(a4 + 472);
    *(_DWORD *)(v249 + 220) |= 0x40000000u;
    *(_DWORD *)(v79 + 212) = v80;
    v81 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 200);
    *(_DWORD *)(v249 + 220) |= 0x200000u;
    *(_DWORD *)(v81 + 176) = v77;
    v82 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 204);
    *(_DWORD *)(v249 + 220) |= 0x800000u;
    *(_DWORD *)(v82 + 184) = v77;
    v83 = v249;
    LODWORD(v77) = *(_DWORD *)(a4 + 208);
    *(_DWORD *)(v249 + 220) |= 0x400000u;
    *(_DWORD *)(v83 + 180) = v77;
    v84 = v249;
    v85 = *(_QWORD *)(a4 + 160);
    *(_DWORD *)(v249 + 220) |= 0x800u;
    *(_QWORD *)(v84 + 96) = v85;
    v86 = v249;
    v87 = *(_QWORD *)(a4 + 168);
    *(_DWORD *)(v249 + 220) |= 8u;
    *(_QWORD *)(v86 + 32) = v87;
    v88 = v249;
    v89 = *(_QWORD *)(a4 + 176);
    *(_DWORD *)(v249 + 220) |= 0x10u;
    *(_QWORD *)(v88 + 40) = v89;
    v90 = v249;
    v91 = *(_DWORD *)(a4 + 512);
    *(_DWORD *)(v249 + 220) |= 0x2000000u;
    *(_DWORD *)(v90 + 192) = v91;
    v92 = v249;
    v93 = *(_DWORD *)(a4 + 140);
    *(_DWORD *)(v249 + 220) |= 0x8000000u;
    *(_DWORD *)(v92 + 200) = v93;
    v94 = v249;
    v95 = *(_DWORD *)(a4 + 216);
    *(_DWORD *)(v249 + 220) |= 0x1000000u;
    *(_DWORD *)(v94 + 188) = v95;
    v96 = v249;
    v97 = *(_QWORD *)(a4 + 536);
    *(_DWORD *)(v249 + 220) |= 0x20u;
    *(_QWORD *)(v96 + 48) = v97;
    v98 = v249;
    v99 = *(_QWORD *)(a4 + 544);
    *(_DWORD *)(v249 + 220) |= 0x40u;
    *(_QWORD *)(v98 + 56) = v99;
    v100 = v249;
    v101 = *(_QWORD *)(a4 + 520);
    *(_DWORD *)(v249 + 220) |= 0x8000u;
    *(_QWORD *)(v100 + 128) = v101;
    v102 = v249;
    v103 = *(_QWORD *)(a4 + 528);
    *(_DWORD *)(v249 + 220) |= 0x400u;
    *(_QWORD *)(v102 + 88) = v103;
    v104 = v249;
    *(_DWORD *)(v249 + 220) |= 0x80000000;
    *(_BYTE *)(v104 + 216) = 1;
    v105 = v249;
    v106 = *(_QWORD *)(a4 + 704);
    *(_DWORD *)(v249 + 220) |= 0x1000u;
    *(_QWORD *)(v105 + 104) = v106;
    v107 = v249;
    v108 = *(_QWORD *)(a4 + 712);
    *(_DWORD *)(v249 + 220) |= 0x4000u;
    *(_QWORD *)(v107 + 120) = v108;
    v109 = v249;
    v110 = *(_QWORD *)(a4 + 720);
    *(_DWORD *)(v249 + 220) |= 0x2000u;
    *(_QWORD *)(v109 + 112) = v110;
    v111 = v249;
    v112 = *(_DWORD *)(a4 + 728);
    *(_DWORD *)(v249 + 220) |= 0x4000000u;
    *(_DWORD *)(v111 + 196) = v112;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v246);
    goto LABEL_33;
  }
  v206 = *(int **)(a4 + 800);
  if (v206 && (unint64_t)sub_10104BD1C(v206) >= 2)
  {
    if (sub_10104BD1C(*(int **)(a4 + 800)))
    {
      v207 = 0;
      do
      {
        sub_10104B598(*(_QWORD *)(a4 + 800), v207, (uint64_t)&v211);
        sub_10104BAA8(*(_QWORD *)(a4 + 800), v207, (uint64_t)v246);
        sub_100BE8BAC(a1, (uint64_t)&v211, v246);
        v208 = v247;
        if (v247)
        {
          p_shared_owners = (unint64_t *)&v247->__shared_owners_;
          do
            v210 = __ldaxr(p_shared_owners);
          while (__stlxr(v210 - 1, p_shared_owners));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
        ++v207;
      }
      while (v207 < sub_10104BD1C(*(int **)(a4 + 800)));
    }
  }
  else
  {
    sub_100BE8BAC(a1, a4, (uint64_t *)(a4 + 160));
  }
}

void sub_100BE8B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  sub_1015EE304((PB::Base *)&STACK[0xF88]);
  _Unwind_Resume(a1);
}

uint64_t sub_100BE8BAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v5;
  double v6;
  float v8;
  float v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD v50[55];
  uint64_t v51;
  CFAbsoluteTime v52;
  char v53;

  v5 = *(double *)(a2 + 4);
  v6 = *(double *)(a2 + 12);
  if (*(_BYTE *)(a1 + 1748))
  {
    v8 = __exp10((float)*(int *)(a1 + 1752));
    v5 = round(v5 * v8) / v8;
    v9 = __exp10((float)*(int *)(a1 + 1752));
    v6 = round(v6 * v9) / v9;
  }
  sub_1015EB864(v50);
  sub_10160427C((uint64_t)v50);
  Current = CFAbsoluteTimeGetCurrent();
  v53 |= 1u;
  v52 = Current;
  v11 = v51;
  v12 = *((_DWORD *)a3 + 154);
  *(_BYTE *)(v51 + 20) |= 1u;
  *(_DWORD *)(v11 + 16) = v12;
  sub_1015BCB2C(v51);
  v13 = *(_QWORD *)(v51 + 8);
  v14 = *(_QWORD *)(a2 + 76);
  *(_DWORD *)(v13 + 180) |= 0x800u;
  *(_QWORD *)(v13 + 96) = v14;
  v15 = *(_QWORD *)(v51 + 8);
  *(_DWORD *)(v15 + 180) |= 0x40u;
  *(double *)(v15 + 56) = v5;
  v16 = *(_QWORD *)(v51 + 8);
  *(_DWORD *)(v16 + 180) |= 0x80u;
  *(double *)(v16 + 64) = v6;
  v17 = *(_QWORD *)(v51 + 8);
  v18 = *(_QWORD *)(a2 + 44);
  *(_DWORD *)(v17 + 180) |= 0x200u;
  *(_QWORD *)(v17 + 80) = v18;
  v19 = *(_QWORD *)(v51 + 8);
  v20 = *(_QWORD *)(a2 + 52);
  *(_DWORD *)(v19 + 180) |= 0x400u;
  *(_QWORD *)(v19 + 88) = v20;
  v21 = *(_QWORD *)(v51 + 8);
  v22 = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(v21 + 180) |= 0x20u;
  *(_QWORD *)(v21 + 48) = v22;
  v23 = *(_QWORD *)(v51 + 8);
  v24 = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(v23 + 180) |= 2u;
  *(_QWORD *)(v23 + 16) = v24;
  v25 = *(_QWORD *)(v51 + 8);
  v26 = *(_QWORD *)(a2 + 68);
  *(_DWORD *)(v25 + 180) |= 4u;
  *(_QWORD *)(v25 + 24) = v26;
  v27 = *(_QWORD *)(v51 + 8);
  v28 = *(_QWORD *)(a2 + 28);
  *(_DWORD *)(v27 + 180) |= 1u;
  *(_QWORD *)(v27 + 8) = v28;
  v29 = *(_QWORD *)(v51 + 8);
  v30 = *(_QWORD *)(a2 + 36);
  *(_DWORD *)(v29 + 180) |= 0x2000u;
  *(_QWORD *)(v29 + 120) = v30;
  v31 = *(_QWORD *)(v51 + 8);
  v32 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(v31 + 180) |= 0x800000u;
  *(_DWORD *)(v31 + 164) = v32;
  v33 = *(_QWORD *)(v51 + 8);
  v34 = a3[3];
  *(_DWORD *)(v33 + 180) |= 0x1000u;
  *(_QWORD *)(v33 + 104) = v34;
  v35 = *(_QWORD *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 79);
  *(_DWORD *)(v35 + 180) |= 0x1000000u;
  *(_DWORD *)(v35 + 168) = v34;
  v36 = *(_QWORD *)(v51 + 8);
  v37 = *((_DWORD *)a3 + 78);
  *(_DWORD *)(v36 + 180) |= 0x2000000u;
  *(_DWORD *)(v36 + 172) = v37;
  v38 = *(_QWORD *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 10);
  *(_DWORD *)(v38 + 180) |= 0x20000u;
  *(_DWORD *)(v38 + 140) = v34;
  v39 = *(_QWORD *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 11);
  *(_DWORD *)(v39 + 180) |= 0x80000u;
  *(_DWORD *)(v39 + 148) = v34;
  v40 = *(_QWORD *)(v51 + 8);
  LODWORD(v34) = *((_DWORD *)a3 + 12);
  *(_DWORD *)(v40 + 180) |= 0x40000u;
  *(_DWORD *)(v40 + 144) = v34;
  v41 = *(_QWORD *)(v51 + 8);
  v42 = *a3;
  *(_DWORD *)(v41 + 180) |= 0x100u;
  *(_QWORD *)(v41 + 72) = v42;
  v43 = *(_QWORD *)(v51 + 8);
  v44 = a3[1];
  *(_DWORD *)(v43 + 180) |= 8u;
  *(_QWORD *)(v43 + 32) = v44;
  v45 = *(_QWORD *)(v51 + 8);
  v46 = a3[2];
  *(_DWORD *)(v45 + 180) |= 0x10u;
  *(_QWORD *)(v45 + 40) = v46;
  v47 = *(_QWORD *)(v51 + 8);
  v48 = *((_DWORD *)a3 + 88);
  *(_DWORD *)(v47 + 180) |= 0x200000u;
  *(_DWORD *)(v47 + 156) = v48;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v50);
  return sub_1015EE304((PB::Base *)v50);
}

void sub_100BE8F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BE8F2C(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  CFAbsoluteTime Current;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[339];
  uint64_t v16;
  char v17;

  if (*a3 == 41)
  {
    v4 = *(_DWORD *)(a4 + 1448);
    v5 = *(unsigned __int8 *)(a4 + 1452);
    v6 = *(_DWORD *)(a4 + 1456);
    v7 = *(_QWORD *)(a4 + 1464);
    v8 = *(unsigned __int8 *)(a4 + 1472);
    *(_QWORD *)(result + 2096) = v7;
    sub_1015EB864(v15);
    sub_1016040EC((uint64_t)v15);
    Current = CFAbsoluteTimeGetCurrent();
    v17 |= 1u;
    *(CFAbsoluteTime *)&v15[77] = Current;
    v10 = v16;
    *(_BYTE *)(v16 + 24) |= 2u;
    *(_DWORD *)(v10 + 12) = v4;
    v11 = v16;
    *(_BYTE *)(v16 + 24) |= 8u;
    *(_BYTE *)(v11 + 20) = v5 != 0;
    v12 = v16;
    *(_BYTE *)(v16 + 24) |= 4u;
    *(_DWORD *)(v12 + 16) = v6;
    v13 = v16;
    *(_BYTE *)(v16 + 24) |= 1u;
    *(_DWORD *)(v13 + 8) = v7;
    v14 = v16;
    *(_BYTE *)(v16 + 24) |= 0x10u;
    *(_BYTE *)(v14 + 21) = v8 != 0;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v15);
    return sub_1015EE304((PB::Base *)v15);
  }
  return result;
}

void sub_100BE9064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BE907C(uint64_t result, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  _QWORD v41[66];
  uint64_t v42;
  CFAbsoluteTime v43;
  char v44;
  uint64_t (**v45)();
  CFAbsoluteTime Current;
  int v47;
  __int128 v48;
  __int128 v49;
  int v50;
  int v51;

  if (*a3 == 2)
  {
    v5 = result;
    v6 = (_OWORD *)(result + 648);
    result = sub_1018CBFA4(result + 648, (uint64_t)a4);
    if ((result & 1) == 0)
    {
      v7 = *a4;
      v8 = a4[1];
      v9 = a4[2];
      *(_OWORD *)((char *)v6 + 44) = *(__int128 *)((char *)a4 + 44);
      v6[1] = v8;
      v6[2] = v9;
      *v6 = v7;
      v45 = off_102171B48;
      Current = CFAbsoluteTimeGetCurrent();
      v10 = *(_DWORD *)(v5 + 648);
      v11 = *(_OWORD *)(v5 + 672);
      v48 = *(_OWORD *)(v5 + 656);
      v49 = v11;
      v12 = *(_DWORD *)(v5 + 688);
      v47 = v10;
      v50 = v12;
      v51 = *(_DWORD *)(v5 + 692);
      v13 = sub_1011B78D4();
      sub_1011B8DB0(v13, (uint64_t)&v45);
      sub_1015EB864(v41);
      sub_1016052E4((uint64_t)v41);
      v44 |= 1u;
      v43 = Current;
      v14 = v42;
      v15 = *(_DWORD *)(v5 + 648);
      *(_WORD *)(v42 + 64) |= 0x10u;
      *(_DWORD *)(v14 + 24) = v15;
      v16 = v42;
      v17 = *(_DWORD *)(v5 + 656);
      *(_WORD *)(v42 + 64) |= 0x20u;
      *(_DWORD *)(v16 + 28) = v17;
      v18 = v42;
      v19 = *(_DWORD *)(v5 + 660);
      *(_WORD *)(v42 + 64) |= 0x1000u;
      *(_DWORD *)(v18 + 56) = v19;
      v20 = v42;
      v21 = *(_DWORD *)(v5 + 664);
      *(_WORD *)(v42 + 64) |= 0x800u;
      *(_DWORD *)(v20 + 52) = v21;
      v22 = v42;
      v23 = *(_DWORD *)(v5 + 668);
      *(_WORD *)(v42 + 64) |= 2u;
      *(_DWORD *)(v22 + 12) = v23;
      v24 = v42;
      v25 = *(_DWORD *)(v5 + 672);
      *(_WORD *)(v42 + 64) |= 0x80u;
      *(_DWORD *)(v24 + 36) = v25;
      v26 = v42;
      v27 = *(_DWORD *)(v5 + 676);
      *(_WORD *)(v42 + 64) |= 0x40u;
      *(_DWORD *)(v26 + 32) = v27;
      v28 = v42;
      v29 = *(_DWORD *)(v5 + 680);
      *(_WORD *)(v42 + 64) |= 0x100u;
      *(_DWORD *)(v28 + 40) = v29;
      v30 = v42;
      v31 = *(_DWORD *)(v5 + 684);
      *(_WORD *)(v42 + 64) |= 0x200u;
      *(_DWORD *)(v30 + 44) = v31;
      v32 = v42;
      v33 = *(_DWORD *)(v5 + 688);
      *(_WORD *)(v42 + 64) |= 8u;
      *(_DWORD *)(v32 + 20) = v33;
      v34 = v42;
      v35 = *(_DWORD *)(v5 + 692);
      *(_WORD *)(v42 + 64) |= 0x400u;
      *(_DWORD *)(v34 + 48) = v35;
      v36 = v42;
      LOBYTE(v33) = *(_BYTE *)(v5 + 696);
      *(_WORD *)(v42 + 64) |= 0x2000u;
      *(_BYTE *)(v36 + 60) = v33;
      v37 = v42;
      v38 = *(_DWORD *)(v5 + 652);
      *(_WORD *)(v42 + 64) |= 4u;
      *(_DWORD *)(v37 + 16) = v38;
      v39 = v42;
      v40 = *(_DWORD *)(v5 + 700);
      *(_WORD *)(v42 + 64) |= 1u;
      *(_DWORD *)(v39 + 8) = v40;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v41);
      return sub_1015EE304((PB::Base *)v41);
    }
  }
  return result;
}

void sub_100BE92F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BE9310(uint64_t result, uint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[77];
  CFAbsoluteTime v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t (**v29)();
  CFAbsoluteTime v30;
  char v31;
  char v32;

  if (*a3 == 1)
  {
    sub_1015EB864(v24);
    sub_101602E90((uint64_t)v24);
    Current = CFAbsoluteTimeGetCurrent();
    v28 |= 1u;
    v25 = Current;
    v13 = v26;
    v14 = *a4;
    *(_BYTE *)(v26 + 40) |= 4u;
    *(_DWORD *)(v13 + 24) = v14;
    v15 = v26;
    v16 = a4[1];
    *(_BYTE *)(v26 + 40) |= 0x10u;
    *(_DWORD *)(v15 + 32) = v16;
    v17 = v26;
    v18 = a4[2];
    *(_BYTE *)(v26 + 40) |= 8u;
    *(_DWORD *)(v17 + 28) = v18;
    v19 = v26;
    LOBYTE(v18) = *((_BYTE *)a4 + 24);
    *(_BYTE *)(v26 + 40) |= 0x40u;
    *(_BYTE *)(v19 + 37) = v18;
    v20 = v26;
    LOBYTE(v18) = *((_BYTE *)a4 + 25);
    *(_BYTE *)(v26 + 40) |= 0x20u;
    *(_BYTE *)(v20 + 36) = v18;
    v21 = v26;
    LOBYTE(v18) = *((_BYTE *)a4 + 26);
    *(_BYTE *)(v26 + 40) |= 0x80u;
    *(_BYTE *)(v21 + 38) = v18;
    v22 = v26;
    v23 = *((_QWORD *)a4 + 2);
    *(_BYTE *)(v26 + 40) |= 2u;
    *(_QWORD *)(v22 + 16) = v23;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    v11 = qword_1023118B0;
    if (!qword_1023118B0)
      return sub_1015EE304((PB::Base *)v24);
LABEL_12:
    sub_101888B64(v11, (uint64_t)v24);
    return sub_1015EE304((PB::Base *)v24);
  }
  if (!*a3)
  {
    v5 = result;
    if (*(_DWORD *)(result + 720) != *a4 || *(_DWORD *)(result + 724) != a4[1])
    {
      *(_QWORD *)(result + 720) = *(_QWORD *)a4;
      v29 = off_102172168;
      v30 = CFAbsoluteTimeGetCurrent();
      v31 = *(_DWORD *)(v5 + 720);
      v32 = *(_DWORD *)(v5 + 724);
      v6 = sub_1011B78D4();
      sub_1011B8DB0(v6, (uint64_t)&v29);
      sub_1015EB864(v24);
      sub_1016057F8((uint64_t)v24);
      v28 |= 1u;
      v25 = v30;
      v7 = v27;
      v8 = *(_DWORD *)(v5 + 720);
      *(_BYTE *)(v27 + 16) |= 2u;
      *(_DWORD *)(v7 + 12) = v8;
      v9 = v27;
      v10 = *(_DWORD *)(v5 + 724);
      *(_BYTE *)(v27 + 16) |= 1u;
      *(_DWORD *)(v9 + 8) = v10;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v11 = qword_1023118B0;
      if (!qword_1023118B0)
        return sub_1015EE304((PB::Base *)v24);
      goto LABEL_12;
    }
  }
  return result;
}

void sub_100BE9560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_100BE9588(uint64_t a1, uint64_t a2, _DWORD *a3, __n128 *a4)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 result;
  _QWORD v9[379];
  char v10;
  int8x16_t v11[5];
  uint64_t v12;
  __n128 v13[11];

  if (!*a3)
  {
    v4 = a4[9];
    v13[8] = a4[8];
    v13[9] = v4;
    v13[10] = a4[10];
    v5 = a4[5];
    v13[4] = a4[4];
    v13[5] = v5;
    v6 = a4[7];
    v13[6] = a4[6];
    v13[7] = v6;
    v7 = a4[1];
    v13[0] = *a4;
    v13[1] = v7;
    result = a4[3];
    v13[2] = a4[2];
    v13[3] = result;
    if (*(_BYTE *)(a1 + 1839))
    {
      sub_1006B301C((uint64_t)v13, v11);
      sub_1015EB864(v9);
      v10 |= 1u;
      v9[77] = v12;
      operator new();
    }
  }
  return result;
}

void sub_100BE96A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  sub_1016166A0((PB::Base *)&STACK[0xE30]);
  _Unwind_Resume(a1);
}

void sub_100BE96C4(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  CFAbsoluteTime Current;
  uint64_t v6;
  int v7;
  _QWORD v8[356];
  uint64_t v9;
  char v10;

  if (!*a3)
  {
    sub_1015EB864(v8);
    sub_10160314C((uint64_t)v8);
    Current = CFAbsoluteTimeGetCurrent();
    v10 |= 1u;
    *(CFAbsoluteTime *)&v8[77] = Current;
    v6 = v9;
    v7 = *a4;
    *(_BYTE *)(v9 + 12) |= 1u;
    *(_DWORD *)(v6 + 8) = v7;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v8);
    sub_1015EE304((PB::Base *)v8);
  }
}

void sub_100BE9778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BE9790(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  CFAbsoluteTime Current;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[139];
  uint64_t v15;
  char v16;

  if (*a3 == 36)
  {
    sub_1015EB864(v14);
    sub_1016042E0((uint64_t)v14);
    Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    v6 = v15;
    v7 = *(_QWORD *)(a4 + 1344);
    *(_BYTE *)(v15 + 32) |= 2u;
    *(_QWORD *)(v6 + 16) = v7;
    v8 = v15;
    v9 = *(_DWORD *)(a4 + 1332);
    *(_BYTE *)(v15 + 32) |= 8u;
    *(_DWORD *)(v8 + 28) = v9;
    v10 = v15;
    v11 = *(_DWORD *)(a4 + 1328);
    *(_BYTE *)(v15 + 32) |= 4u;
    *(_DWORD *)(v10 + 24) = v11;
    v12 = v15;
    v13 = *(_QWORD *)(a4 + 1336);
    *(_BYTE *)(v15 + 32) |= 1u;
    *(_QWORD *)(v12 + 8) = v13;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v14);
    sub_1015EE304((PB::Base *)v14);
  }
}

void sub_100BE9890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BE98A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFAbsoluteTime Current;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t *v10;
  __int32 v11;
  int32x2_t *v12;
  __int32 v13;
  int32x2_t *v14;
  __int32 v15;
  int32x2_t *v16;
  __int32 v17;
  int32x2_t *i;
  __int32 v19;
  _QWORD v20[140];
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26[8];
  int32x2_t v27;
  __int32 v28;
  char v29;

  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  if ((sub_100BE9C08(a4, (uint64_t)&v23) & 1) != 0)
  {
    sub_1015EB864(v20);
    sub_101604344((uint64_t)v20);
    Current = CFAbsoluteTimeGetCurrent();
    v22 |= 1u;
    *(CFAbsoluteTime *)&v20[77] = Current;
    v5 = v21;
    v6 = *((_QWORD *)&v23 + 1);
    *(_QWORD *)(v21 + 144) = v23;
    *(_BYTE *)(v5 + 152) |= 4u;
    v7 = v21;
    *(_BYTE *)(v21 + 152) |= 2u;
    *(_QWORD *)(v7 + 16) = v6;
    v8 = v21;
    v9 = v24;
    *(_BYTE *)(v21 + 152) |= 1u;
    *(_QWORD *)(v8 + 8) = v9;
    v10 = (int32x2_t *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1) != (_QWORD)v25)
    {
      do
      {
        if (!v10->i32[0])
        {
          sub_10160A81C((uint64_t)v26);
          v27 = vrev64_s32(v10[1]);
          v11 = v10[2].i32[0];
          v29 |= 7u;
          v28 = v11;
          sub_100BF4D78();
        }
        v10 = (int32x2_t *)((char *)v10 + 28);
      }
      while (v10 != (int32x2_t *)v25);
      v12 = (int32x2_t *)*((_QWORD *)&v24 + 1);
      if (*((_QWORD *)&v24 + 1) != (_QWORD)v25)
      {
        do
        {
          if (v12->i32[0] == 4)
          {
            sub_10160A81C((uint64_t)v26);
            v27 = vrev64_s32(v12[1]);
            v13 = v12[2].i32[0];
            v29 |= 7u;
            v28 = v13;
            sub_100BF4D78();
          }
          v12 = (int32x2_t *)((char *)v12 + 28);
        }
        while (v12 != (int32x2_t *)v25);
        v14 = (int32x2_t *)*((_QWORD *)&v24 + 1);
        if (*((_QWORD *)&v24 + 1) != (_QWORD)v25)
        {
          do
          {
            if (v14->i32[0] == 1)
            {
              sub_10160A81C((uint64_t)v26);
              v27 = vrev64_s32(v14[1]);
              v15 = v14[2].i32[0];
              v29 |= 7u;
              v28 = v15;
              sub_100BF4D78();
            }
            v14 = (int32x2_t *)((char *)v14 + 28);
          }
          while (v14 != (int32x2_t *)v25);
          v16 = (int32x2_t *)*((_QWORD *)&v24 + 1);
          if (*((_QWORD *)&v24 + 1) != (_QWORD)v25)
          {
            do
            {
              if (v16->i32[0] == 3)
              {
                sub_10160A81C((uint64_t)v26);
                v27 = vrev64_s32(v16[1]);
                v17 = v16[2].i32[0];
                v29 |= 7u;
                v28 = v17;
                sub_100BF4D78();
              }
              v16 = (int32x2_t *)((char *)v16 + 28);
            }
            while (v16 != (int32x2_t *)v25);
            for (i = (int32x2_t *)*((_QWORD *)&v24 + 1); i != (int32x2_t *)v25; i = (int32x2_t *)((char *)i + 28))
            {
              if (i->i32[0] == 2)
              {
                sub_10160A81C((uint64_t)v26);
                v27 = vrev64_s32(i[1]);
                v19 = i[2].i32[0];
                v29 |= 7u;
                v28 = v19;
                sub_100BF4D78();
              }
            }
          }
        }
      }
    }
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v20);
    sub_1015EE304((PB::Base *)v20);
  }
  if (*((_QWORD *)&v24 + 1))
  {
    *(_QWORD *)&v25 = *((_QWORD *)&v24 + 1);
    operator delete(*((void **)&v24 + 1));
  }
}

void sub_100BE9BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  v4 = *(void **)(v2 - 88);
  if (v4)
  {
    *(_QWORD *)(v2 - 80) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100BE9C08(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  __int128 **v12;
  __int128 *v13;
  __int128 *v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  __int128 v29;

  result = 0;
  if ((*(_DWORD *)(a1 + 96) & 0xFFFFFFF7) == 1)
  {
    v4 = *(double *)(a1 + 88);
    if (v4 >= 0.0)
    {
      v5 = *(uint64_t **)(a1 + 680);
      if (v5)
      {
        v7 = *(_QWORD *)(a1 + 192);
        *(_QWORD *)a2 = *(_QWORD *)(a1 + 76);
        *(_QWORD *)(a2 + 8) = v7;
        *(double *)(a2 + 16) = v4;
        v8 = *v5;
        v9 = v5[1];
        if (v8 == v9)
        {
          v10 = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            v10 = v10 + *(unsigned __int8 *)(v8 + 24);
            v8 += 28;
          }
          while (v8 != v9);
        }
        v11 = (char **)(a2 + 24);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 24);
        sub_100BF4C8C((void **)(a2 + 24), v10);
        v12 = *(__int128 ***)(a1 + 680);
        v13 = *v12;
        v14 = v12[1];
        if (*v12 != v14)
        {
          do
          {
            if (*((_BYTE *)v13 + 24))
            {
              v16 = *(_OWORD **)(a2 + 32);
              v15 = *(_QWORD *)(a2 + 40);
              if ((unint64_t)v16 >= v15)
              {
                v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v16 - *v11) >> 2);
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) > 0x924924924924924)
                  sub_100259694();
                v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)*v11) >> 2);
                if (2 * v21 > v20)
                  v20 = 2 * v21;
                if (v21 >= 0x492492492492492)
                  v22 = 0x924924924924924;
                else
                  v22 = v20;
                if (v22)
                  v23 = (char *)sub_100AAF154(a2 + 40, v22);
                else
                  v23 = 0;
                v24 = &v23[28 * v19];
                v25 = *v13;
                *(_OWORD *)(v24 + 12) = *(__int128 *)((char *)v13 + 12);
                *(_OWORD *)v24 = v25;
                v27 = *(char **)(a2 + 24);
                v26 = *(char **)(a2 + 32);
                v28 = v24;
                if (v26 != v27)
                {
                  do
                  {
                    v29 = *(_OWORD *)(v26 - 28);
                    *(v28 - 1) = *((_OWORD *)v26 - 1);
                    *(_OWORD *)((char *)v28 - 28) = v29;
                    v28 = (_OWORD *)((char *)v28 - 28);
                    v26 -= 28;
                  }
                  while (v26 != v27);
                  v26 = *v11;
                }
                v18 = v24 + 28;
                *(_QWORD *)(a2 + 24) = v28;
                *(_QWORD *)(a2 + 32) = v24 + 28;
                *(_QWORD *)(a2 + 40) = &v23[28 * v22];
                if (v26)
                  operator delete(v26);
              }
              else
              {
                v17 = *v13;
                *(_OWORD *)((char *)v16 + 12) = *(__int128 *)((char *)v13 + 12);
                *v16 = v17;
                v18 = (char *)v16 + 28;
              }
              *(_QWORD *)(a2 + 32) = v18;
            }
            v13 = (__int128 *)((char *)v13 + 28);
          }
          while (v13 != v14);
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100BE9E10(uint64_t a1, _DWORD *a2)
{
  double v3;
  uint64_t result;
  CFAbsoluteTime Current;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  double v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  double v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  double v29;
  BOOL v30;
  _QWORD v31[243];
  uint64_t v32;
  char v33;

  v3 = sub_1001FCBB4();
  result = sub_1002199F0((uint64_t)a2, v3, 6.0);
  if ((result & 1) == 0)
  {
    sub_1015EB864(v31);
    sub_1016043A8((uint64_t)v31);
    Current = CFAbsoluteTimeGetCurrent();
    v33 |= 1u;
    *(CFAbsoluteTime *)&v31[77] = Current;
    v6 = v32;
    v7 = *a2 == 1;
    *(_WORD *)(v32 + 20) |= 0x80u;
    *(_BYTE *)(v6 + 15) = v7;
    v8 = v32;
    v9 = *a2 == 3;
    *(_WORD *)(v32 + 20) |= 2u;
    *(_BYTE *)(v8 + 9) = v9;
    v10 = v32;
    v11 = *a2 == 0;
    *(_WORD *)(v32 + 20) |= 8u;
    *(_BYTE *)(v10 + 11) = v11;
    v12 = v32;
    v13 = a2[1] == 3;
    *(_WORD *)(v32 + 20) |= 0x20u;
    *(_BYTE *)(v12 + 13) = v13;
    v14 = v32;
    v15 = a2[1] == 0;
    *(_WORD *)(v32 + 20) |= 0x40u;
    *(_BYTE *)(v14 + 14) = v15;
    v16 = v32;
    v17 = sub_1001FCBB4();
    v18 = sub_1002199F0((uint64_t)a2, v17, 6.0);
    v19 = *a2 == 0;
    *(_WORD *)(v16 + 20) |= 0x10u;
    *(_BYTE *)(v16 + 12) = v19 & ~v18;
    v20 = v32;
    v21 = sub_1001FCBB4();
    v22 = sub_1002199F0((uint64_t)a2, v21, 6.0);
    v23 = *a2 == 1;
    *(_WORD *)(v20 + 20) |= 0x100u;
    *(_BYTE *)(v20 + 16) = v23 & ~v22;
    v24 = v32;
    v25 = sub_1001FCBB4();
    v26 = sub_1002199F0((uint64_t)a2, v25, 6.0);
    v27 = *a2 == 3;
    *(_WORD *)(v24 + 20) |= 4u;
    *(_BYTE *)(v24 + 10) = v27 & ~v26;
    v28 = v32;
    v29 = sub_1001FCBB4();
    v30 = sub_1008ABF50(a2, v29);
    *(_WORD *)(v28 + 20) |= 1u;
    *(_BYTE *)(v28 + 8) = v30;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v31);
    return sub_1015EE304((PB::Base *)v31);
  }
  return result;
}

void sub_100BEA01C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BEA034(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  CFAbsoluteTime Current;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  double v46;
  _QWORD v47[128];
  uint64_t v48;
  char v49;

  if (!*a3 && *((_DWORD *)a4 + 40) == 1)
  {
    sub_1015EB864(v47);
    sub_10160440C((uint64_t)v47);
    Current = CFAbsoluteTimeGetCurrent();
    v49 |= 1u;
    *(CFAbsoluteTime *)&v47[77] = Current;
    v6 = v48;
    v7 = a4[17];
    *(_DWORD *)(v48 + 176) |= 8u;
    *(_QWORD *)(v6 + 32) = v7;
    v8 = v48;
    v9 = *a4;
    *(_DWORD *)(v48 + 176) |= 0x800u;
    *(_QWORD *)(v8 + 96) = v9;
    v10 = v48;
    v11 = a4[18];
    *(_DWORD *)(v48 + 176) |= 0x100u;
    *(_QWORD *)(v10 + 72) = v11;
    v12 = v48;
    v13 = a4[14];
    *(_DWORD *)(v48 + 176) |= 0x20u;
    *(_QWORD *)(v12 + 48) = v13;
    v14 = v48;
    v15 = a4[11];
    *(_DWORD *)(v48 + 176) |= 0x10u;
    *(_QWORD *)(v14 + 40) = v15;
    v16 = v48;
    v17 = a4[8];
    *(_DWORD *)(v48 + 176) |= 0x40u;
    *(_QWORD *)(v16 + 56) = v17;
    v18 = v48;
    v19 = a4[3];
    *(_DWORD *)(v48 + 176) |= 0x2000u;
    *(_QWORD *)(v18 + 112) = v19;
    v20 = v48;
    v21 = a4[4];
    *(_DWORD *)(v48 + 176) |= 0x4000u;
    *(_QWORD *)(v20 + 120) = v21;
    v22 = v48;
    v23 = a4[2];
    *(_DWORD *)(v48 + 176) |= 0x8000u;
    *(_QWORD *)(v22 + 128) = v23;
    v24 = v48;
    v25 = a4[5];
    *(_DWORD *)(v48 + 176) |= 0x20000u;
    *(_QWORD *)(v24 + 144) = v25;
    v26 = v48;
    v27 = a4[6];
    *(_DWORD *)(v48 + 176) |= 0x40000u;
    *(_QWORD *)(v26 + 152) = v27;
    v28 = v48;
    v29 = a4[7];
    *(_DWORD *)(v48 + 176) |= 0x10000u;
    *(_QWORD *)(v28 + 136) = v29;
    v30 = v48;
    v31 = a4[19];
    *(_DWORD *)(v48 + 176) |= 0x80000u;
    *(_QWORD *)(v30 + 160) = v31;
    v32 = v48;
    LODWORD(v29) = *((_DWORD *)a4 + 40);
    *(_DWORD *)(v48 + 176) |= 0x100000u;
    *(_DWORD *)(v32 + 168) = v29;
    v33 = v48;
    v34 = a4[15];
    *(_DWORD *)(v48 + 176) |= 0x80u;
    *(_QWORD *)(v33 + 64) = v34;
    v35 = v48;
    v36 = a4[12];
    *(_DWORD *)(v48 + 176) |= 2u;
    *(_QWORD *)(v35 + 16) = v36;
    v37 = v48;
    v38 = a4[9];
    *(_DWORD *)(v48 + 176) |= 0x400u;
    *(_QWORD *)(v37 + 88) = v38;
    v39 = v48;
    v40 = a4[1];
    *(_DWORD *)(v48 + 176) |= 4u;
    *(_QWORD *)(v39 + 24) = v40;
    v41 = v48;
    v42 = *(_DWORD *)(v48 + 176) | 0x200000;
    *(_DWORD *)(v48 + 172) = *((_DWORD *)a4 + 32);
    *(_DWORD *)(v41 + 176) = v42;
    v43 = v48;
    v44 = (double)*((int *)a4 + 20);
    *(_DWORD *)(v48 + 176) |= 0x200u;
    *(double *)(v43 + 80) = v44;
    v45 = v48;
    v46 = (double)*((int *)a4 + 26);
    *(_DWORD *)(v48 + 176) |= 1u;
    *(double *)(v45 + 8) = v46;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v47);
    sub_1015EE304((PB::Base *)v47);
  }
}

void sub_100BEA2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BEA2F0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  unsigned __int32 v5;
  CFAbsoluteTime v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  CFAbsoluteTime Current;
  uint64_t v12;
  char v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  __n128 __p;
  char v18;
  uint8_t buf[616];
  CFAbsoluteTime v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (!*a3)
  {
    v5 = *(_DWORD *)a4;
    if (*(_DWORD *)a4 == 2)
    {
      sub_1015EB864(buf);
      sub_101603728((uint64_t)buf);
      Current = CFAbsoluteTimeGetCurrent();
      v23 |= 1u;
      v20 = Current;
      v12 = v22;
      v13 = *(_BYTE *)(a4 + 4);
      *(_BYTE *)(v22 + 12) |= 1u;
      *(_BYTE *)(v12 + 8) = v13;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)buf);
      goto LABEL_14;
    }
    if (v5 == 1)
    {
      sub_1015EB864(buf);
      sub_1016036C4((uint64_t)buf);
      v6 = CFAbsoluteTimeGetCurrent();
      v23 |= 1u;
      v20 = v6;
      v7 = v21;
      sub_1015A2E04(&__p, (char *)(a4 + 4));
      sub_100AB85CC(v7, &__p);
      if (v18 < 0)
        operator delete((void *)__p.n128_u64[0]);
      v8 = v21;
      v9 = *(unsigned __int8 *)(a4 + 260);
      *(_BYTE *)(v21 + 24) |= 1u;
      *(_DWORD *)(v8 + 16) = v9;
      v10 = v21;
      LOBYTE(v9) = *(_BYTE *)(a4 + 261);
      *(_BYTE *)(v21 + 24) |= 2u;
      *(_BYTE *)(v10 + 20) = v9;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)buf);
LABEL_14:
      sub_1015EE304((PB::Base *)buf);
      return;
    }
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102178A08);
    v14 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Received unexpected event type: %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      __p.n128_u32[0] = 67240192;
      __p.n128_u32[1] = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 16, "Received unexpected event type: %{public}d", &__p, 8);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionLogger::onMagneticAccessoryEvent(int, const CLMagneticAccessory_Type::Notification &, const CLMagneticAccessory_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
}

void sub_100BEA608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  sub_1015EE304((PB::Base *)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEA64C(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[53];
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[4];
  char v20;
  char v21;
  char v22;
  char v23;

  v2 = *(double *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 17);
  v6 = *(unsigned __int8 *)(a2 + 18);
  v7 = *(unsigned __int8 *)(a2 + 19);
  v19[0] = off_102172060;
  v19[1] = v3;
  *(double *)&v19[3] = v2;
  v20 = v4;
  v21 = v5;
  v22 = v6;
  v23 = v7;
  v8 = sub_1011B78D4();
  sub_1011B8DB0(v8, (uint64_t)v19);
  sub_1015EB864(v15);
  sub_1016056CC((uint64_t)v15);
  v18 |= 1u;
  v17 = v3;
  v9 = v16;
  *(_BYTE *)(v16 + 32) |= 1u;
  *(_QWORD *)(v9 + 8) = (unint64_t)v2;
  v10 = v16;
  *(_BYTE *)(v16 + 32) |= 0x10u;
  *(_DWORD *)(v10 + 28) = v4;
  v11 = v16;
  *(_BYTE *)(v16 + 32) |= 8u;
  *(_DWORD *)(v11 + 24) = v5;
  v12 = v16;
  *(_BYTE *)(v16 + 32) |= 4u;
  *(_DWORD *)(v12 + 20) = v6;
  v13 = v16;
  *(_BYTE *)(v16 + 32) |= 2u;
  *(_DWORD *)(v13 + 16) = v7;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v15);
  return sub_1015EE304((PB::Base *)v15);
}

void sub_100BEA7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEA7B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[51];
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = *a2;
  v3 = a2[1];
  v4 = *((unsigned __int8 *)a2 + 16);
  v5 = *((unsigned __int8 *)a2 + 17);
  v6 = *((unsigned __int8 *)a2 + 18);
  sub_1015EB864(v12);
  sub_101603DCC((uint64_t)v12);
  v15 |= 1u;
  v14 = v3;
  v7 = v13;
  *(_BYTE *)(v13 + 28) |= 1u;
  *(_QWORD *)(v7 + 8) = v2;
  v8 = v13;
  *(_BYTE *)(v13 + 28) |= 4u;
  *(_DWORD *)(v8 + 20) = v4;
  v9 = v13;
  *(_BYTE *)(v13 + 28) |= 8u;
  *(_BYTE *)(v9 + 24) = v5 != 0;
  v10 = v13;
  *(_BYTE *)(v13 + 28) |= 2u;
  *(_DWORD *)(v10 + 16) = v6;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v12);
  return sub_1015EE304((PB::Base *)v12);
}

void sub_100BEA8BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEA8D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[159];
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = *((unsigned __int8 *)a2 + 16);
  sub_1015EB864(v8);
  sub_1016046C8((uint64_t)v8);
  v10 |= 1u;
  v8[77] = v3;
  v5 = v9;
  *(_BYTE *)(v9 + 20) |= 1u;
  *(_QWORD *)(v5 + 8) = v2;
  v6 = v9;
  *(_BYTE *)(v9 + 20) |= 2u;
  *(_BYTE *)(v6 + 16) = v4 != 0;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BEA9A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BEA9B8(uint64_t a1, uint64_t a2, _DWORD *a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t (**v14)();
  CFAbsoluteTime Current;
  char v16;
  uint64_t v17;
  char v18;
  _QWORD v19[77];
  CFAbsoluteTime v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  if (*a3 == 6)
  {
    v14 = off_1021717D8;
    v18 = *a4;
    v17 = *((_QWORD *)a4 + 1);
    Current = CFAbsoluteTimeGetCurrent();
    v9 = sub_1011B78D4();
    sub_1011B8DB0(v9, (uint64_t)&v14);
    sub_1015EB864(v19);
    sub_101604F60((uint64_t)v19);
    v23 |= 1u;
    v20 = Current;
    v10 = v21;
    v11 = *((_QWORD *)a4 + 1);
    *(_BYTE *)(v21 + 20) |= 1u;
    *(_QWORD *)(v10 + 8) = v11;
    v12 = v21;
    v13 = *a4;
    *(_BYTE *)(v21 + 20) |= 2u;
    *(_BYTE *)(v12 + 16) = v13;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    v8 = qword_1023118B0;
    if (!qword_1023118B0)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*a3 != 5)
    return;
  v14 = off_1021720B8;
  v16 = *a4;
  Current = CFAbsoluteTimeGetCurrent();
  v5 = sub_1011B78D4();
  sub_1011B8DB0(v5, (uint64_t)&v14);
  sub_1015EB864(v19);
  sub_101605730((uint64_t)v19);
  v23 |= 1u;
  v20 = Current;
  v6 = v22;
  v7 = *a4;
  *(_BYTE *)(v22 + 12) |= 1u;
  *(_BYTE *)(v6 + 8) = v7;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  v8 = qword_1023118B0;
  if (qword_1023118B0)
LABEL_10:
    sub_101888B64(v8, (uint64_t)v19);
LABEL_11:
  sub_1015EE304((PB::Base *)v19);
}

void sub_100BEAB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEABA0(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  _BOOL4 v10;
  const char *v11;
  uint8_t *v12;
  _QWORD v13[452];
  char v14;
  uint64_t (**v15)();
  CFAbsoluteTime Current;
  BOOL v17;
  _DWORD v18[4];
  uint8_t buf[4];
  _BOOL4 v20;

  if ((*a3 & 0xFFFFFFFE) == 6)
  {
    v3 = result;
    v15 = off_1021721C0;
    v17 = sub_100219670(*(_QWORD *)(result + 1192));
    Current = CFAbsoluteTimeGetCurrent();
    v4 = sub_1011B78D4();
    sub_1011B8DB0(v4, (uint64_t)&v15);
    sub_1015EB864(v13);
    v14 |= 1u;
    *(CFAbsoluteTime *)&v13[77] = Current;
    sub_10160585C((uint64_t)v13);
    v5 = v13[257];
    v6 = sub_100219670(*(_QWORD *)(v3 + 1192));
    *(_BYTE *)(v5 + 12) |= 1u;
    *(_BYTE *)(v5 + 8) = v6;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v13);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v8 = sub_100219670(*(_QWORD *)(v3 + 1192));
      *(_DWORD *)buf = 67109120;
      v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "WiFi association update %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v9 = qword_10229FC78;
      v10 = sub_100219670(*(_QWORD *)(v3 + 1192));
      v18[0] = 67109120;
      v18[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "WiFi association update %d", v18);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    return sub_1015EE304((PB::Base *)v13);
  }
  return result;
}

void sub_100BEAE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEAE70(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  CFAbsoluteTime Current;
  void (**v5)(_OWORD *__return_ptr);
  __int128 v6;
  __int128 v7;
  _QWORD v8[427];
  char v9;
  uint8_t buf[8];

  if (*a3 == 3)
  {
    v3 = result;
    sub_1015EB864(v8);
    Current = CFAbsoluteTimeGetCurrent();
    v9 |= 1u;
    *(CFAbsoluteTime *)&v8[77] = Current;
    sub_101602F58((uint64_t)v8);
    v5 = (void (**)(_OWORD *__return_ptr))objc_msgSend(*(id *)(*(_QWORD *)(v3 + 1200) + 16), "syncgetScanResult");
    if (v5)
    {
      v5[2](&v6);
      if (*((_QWORD *)&v6 + 1) != (_QWORD)v7)
        sub_10163445C();
    }
    else
    {
      v6 = 0u;
      v7 = 0u;
    }
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v8);
    *(_QWORD *)buf = (char *)&v6 + 8;
    sub_100279AA4((void ***)buf);
    return sub_1015EE304((PB::Base *)v8);
  }
  return result;
}

void sub_100BEB200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  STACK[0xEB0] = a5;
  sub_100279AA4((void ***)&STACK[0xEB0]);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BEB244(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  CFAbsoluteTime v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  CFAbsoluteTime Current;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFAbsoluteTime v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  const char *v44;
  uint8_t *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  CFAbsoluteTime v63;
  char v64;
  int __src;
  uint64_t v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;

  v4 = *a2;
  if (v4 == 2)
  {
    if (!*(_BYTE *)(a1 + 1833))
      return;
    sub_1015EB864(buf);
    sub_101602A44((uint64_t)buf);
    Current = CFAbsoluteTimeGetCurrent();
    v64 |= 1u;
    v63 = Current;
    v23 = v61;
    *(_BYTE *)(v61 + 32) |= 2u;
    *(_DWORD *)(v23 + 24) = 0;
    sub_1015A5F74(v61);
    v24 = *(_QWORD *)(v61 + 8);
    v25 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(v24 + 32) |= 1u;
    *(_QWORD *)(v24 + 8) = v25;
    v26 = *(_QWORD *)(v61 + 8);
    LODWORD(v25) = *((_DWORD *)a2 + 1);
    *(_BYTE *)(v26 + 32) |= 4u;
    *(_DWORD *)(v26 + 20) = v25;
    v27 = *(_QWORD *)(v61 + 8);
    LODWORD(v25) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(v27 + 32) |= 8u;
    *(_DWORD *)(v27 + 24) = v25;
    v28 = *(_QWORD *)(v61 + 8);
    LODWORD(v25) = *((_DWORD *)a2 + 3);
    *(_BYTE *)(v28 + 32) |= 0x10u;
    *(_DWORD *)(v28 + 28) = v25;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    v21 = qword_1023118B0;
    if (!qword_1023118B0)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v4 == 1)
  {
    if (!*(_BYTE *)(a1 + 1833))
      return;
    sub_1015EB864(buf);
    sub_101602A44((uint64_t)buf);
    v29 = CFAbsoluteTimeGetCurrent();
    v64 |= 1u;
    v63 = v29;
    v30 = v61;
    *(_BYTE *)(v61 + 32) |= 2u;
    *(_DWORD *)(v30 + 24) = 0;
    sub_1015A5F74(v61);
    v31 = *(_QWORD *)(v61 + 8);
    v32 = *((_QWORD *)a2 + 2);
    *(_BYTE *)(v31 + 32) |= 1u;
    *(_QWORD *)(v31 + 8) = v32;
    v33 = *(_QWORD *)(v61 + 8);
    LODWORD(v32) = *((_DWORD *)a2 + 1);
    *(_BYTE *)(v33 + 32) |= 4u;
    *(_DWORD *)(v33 + 20) = v32;
    v34 = *(_QWORD *)(v61 + 8);
    LODWORD(v32) = *((_DWORD *)a2 + 2);
    *(_BYTE *)(v34 + 32) |= 8u;
    *(_DWORD *)(v34 + 24) = v32;
    v35 = *(_QWORD *)(v61 + 8);
    LODWORD(v32) = *((_DWORD *)a2 + 3);
    *(_BYTE *)(v35 + 32) |= 0x10u;
    *(_DWORD *)(v35 + 28) = v32;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    v21 = qword_1023118B0;
    if (!qword_1023118B0)
      goto LABEL_24;
LABEL_23:
    sub_101888B64(v21, (uint64_t)buf);
LABEL_24:
    sub_1015EE304((PB::Base *)buf);
    return;
  }
  if (*a2)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v36 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v37 = *a2;
      *(_DWORD *)buf = 67240192;
      LODWORD(v50) = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Unexpected PencilDebug data type %{public}u", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v46 = *a2;
      __src = 67240192;
      LODWORD(v66) = v46;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Unexpected PencilDebug data type %{public}u", &__src, 8);
      v48 = (uint8_t *)v47;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionLogger::onPencilDebug(const CLPencilDebug::Data *)", "%s\n", v47);
      if (v48 != buf)
        free(v48);
    }
  }
  else
  {
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102178A08);
    v5 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_QWORD *)a2 + 2);
      v7 = a2[4];
      v8 = a2[5];
      v9 = *((__int16 *)a2 + 3);
      v10 = *((__int16 *)a2 + 4);
      v11 = *((__int16 *)a2 + 5);
      *(_DWORD *)buf = 134350336;
      v50 = v6;
      v51 = 1026;
      v52 = v7;
      v53 = 1026;
      v54 = v8;
      v55 = 1026;
      v56 = v9;
      v57 = 1026;
      v58 = v10;
      v59 = 1026;
      v60 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "onPencilDebug::Wake,MachAbs,%{public}f,sensor,%{public}u,host,%{public}u,%{public}d,%{public}d,%{public}d", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v38 = *((_QWORD *)a2 + 2);
      v39 = a2[4];
      v40 = a2[5];
      v41 = *((__int16 *)a2 + 3);
      v42 = *((__int16 *)a2 + 4);
      v43 = *((__int16 *)a2 + 5);
      __src = 134350336;
      v66 = v38;
      v67 = 1026;
      v68 = v39;
      v69 = 1026;
      v70 = v40;
      v71 = 1026;
      v72 = v41;
      v73 = 1026;
      v74 = v42;
      v75 = 1026;
      v76 = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "onPencilDebug::Wake,MachAbs,%{public}f,sensor,%{public}u,host,%{public}u,%{public}d,%{public}d,%{public}d", &__src, 42);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onPencilDebug(const CLPencilDebug::Data *)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    if (*(_BYTE *)(a1 + 1833))
    {
      sub_1015EB864(buf);
      sub_101602FBC((uint64_t)buf);
      v12 = CFAbsoluteTimeGetCurrent();
      v64 |= 1u;
      v63 = v12;
      v13 = v62;
      *(_BYTE *)(v62 + 52) |= 4u;
      *(_DWORD *)(v13 + 44) = 0;
      v14 = v62;
      v15 = *((_QWORD *)a2 + 2);
      *(_BYTE *)(v62 + 52) |= 1u;
      *(_QWORD *)(v14 + 32) = v15;
      v16 = v62;
      v17 = a2[4];
      *(_BYTE *)(v62 + 52) |= 8u;
      *(_DWORD *)(v16 + 48) = v17;
      v18 = v62;
      v19 = a2[5];
      *(_BYTE *)(v62 + 52) |= 2u;
      *(_DWORD *)(v18 + 40) = v19;
      v20 = *((__int16 *)a2 + 4);
      __src = *((__int16 *)a2 + 3);
      LODWORD(v66) = v20;
      HIDWORD(v66) = *((__int16 *)a2 + 5);
      sub_1002A3054((char *)(v62 + 8), (char *)&__src, (uint64_t)&v67, 3uLL);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v21 = qword_1023118B0;
      if (!qword_1023118B0)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
}

void sub_100BEB8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BEB920(uint64_t a1, void *a2, uint64_t a3)
{
  NSObject *v4;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  id v18;
  double v19;
  double v20;
  double v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  double v26;
  uint8_t *v27;
  uint8_t *v28;
  double v29;
  uint8_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  int v36;
  uint64_t v37;
  uint8_t buf[4];
  uint64_t v39;

  if (a3)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v39 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error retrieving LOIs. %{public}@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v36 = 138543362;
    v37 = a3;
    v29 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Error retrieving LOIs. %{public}@", &v36, 12);
    v28 = v30;
    sub_100512490("Generic", 1, 0, 0, "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)_block_invoke", "%s\n", v29);
LABEL_30:
    if (v28 != buf)
      free(v28);
    return;
  }
  if (objc_msgSend(a2, "count"))
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v7 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v32;
      while (2)
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v32 != v9)
            objc_enumerationMutation(a2);
          v11 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v11, "type") != (id)-1)
          {
            v12 = *(_QWORD *)(a1 + 2080);
            objc_msgSend(objc_msgSend(v11, "location"), "horizontalUncertainty");
            *(_WORD *)(v12 + 92) |= 0x80u;
            *(_QWORD *)(v12 + 64) = v13;
            v14 = *(_QWORD *)(a1 + 2080);
            objc_msgSend(v11, "confidence");
            *(_WORD *)(v14 + 92) |= 2u;
            *(_QWORD *)(v14 + 16) = v15;
            v16 = *(_QWORD *)(a1 + 2080);
            v17 = objc_msgSend(v11, "type");
            *(_WORD *)(v16 + 92) |= 0x400u;
            *(_DWORD *)(v16 + 84) = v17;
            v18 = objc_alloc((Class)CLLocation);
            objc_msgSend(objc_msgSend(v11, "location"), "latitude");
            v20 = v19;
            objc_msgSend(objc_msgSend(v11, "location"), "longitude");
            v22 = objc_msgSend(v18, "initWithLatitude:longitude:", v20, v21);
            v23 = *(_QWORD *)(a1 + 2080);
            objc_msgSend(*(id *)(a1 + 32), "distanceFromLocation:", v22);
            *(_WORD *)(v23 + 92) |= 8u;
            *(_QWORD *)(v23 + 32) = v24;

            return;
          }
        }
        v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
        if (v8)
          continue;
        break;
      }
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v25 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "No LOIs near", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v36) = 0;
      v26 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "No LOIs near", &v36, 2);
      v28 = v27;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onLoiNotification(CLVisit *, CMMotionContext::Confidence)_block_invoke", "%s\n", v26);
      goto LABEL_30;
    }
  }
}

uint64_t sub_100BEBD60(uint64_t a1, uint64_t a2)
{
  return sub_1015F5B28(a1 + 40, a2 + 40);
}

uint64_t sub_100BEBD6C(uint64_t a1)
{
  return sub_1015EE304((PB::Base *)(a1 + 40));
}

id sub_100BEBD74(uint64_t a1)
{
  id v2;
  id v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[1640];

  v2 = +[NSMutableArray array](NSMutableArray, "array");
  if (*(double *)(a1 + 1440) > 0.0 || *(double *)(a1 + 1480) > 0.0 || *(_BYTE *)(a1 + 1469))
  {
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
    {
      v3 = sub_100EC8158(qword_1023118B0);
      if (v3)
        objc_msgSend(v2, "addObject:", v3);
      return v2;
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to access Motion Logger.  Maybe it is not enabled?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Unable to access Motion Logger.  Maybe it is not enabled?", v9, 2, v9[0]);
LABEL_26:
      v8 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "NSArray<NSString *> *CLMotionLogger::onTapToRadarAccessoryRequest()", "%s\n", v5);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Accessory Logging is not enabled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Accessory Logging is not enabled.", v9, 2, v9[0]);
      goto LABEL_26;
    }
  }
  return v2;
}

void sub_100BEC060(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  CFAbsoluteTime Current;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[11];
  uint64_t v16;
  CFAbsoluteTime v17;
  char v18;

  if (a3)
  {
    v3 = a3;
    v4 = a2 + 16;
    do
    {
      sub_1015EB864(v15);
      sub_101602A44((uint64_t)v15);
      Current = CFAbsoluteTimeGetCurrent();
      v18 |= 1u;
      v17 = Current;
      v6 = v16;
      v7 = *(unsigned __int16 *)(v4 + 16);
      *(_BYTE *)(v16 + 32) |= 4u;
      *(_DWORD *)(v6 + 28) = v7;
      sub_1015A5F74(v16);
      v8 = *(_QWORD *)(v16 + 8);
      v9 = *(_QWORD *)(v4 - 16);
      *(_BYTE *)(v8 + 32) |= 1u;
      *(_QWORD *)(v8 + 8) = v9;
      v10 = *(_QWORD *)(v16 + 8);
      LODWORD(v9) = *(_DWORD *)(v4 - 8);
      *(_BYTE *)(v10 + 32) |= 4u;
      *(_DWORD *)(v10 + 20) = v9;
      v11 = *(_QWORD *)(v16 + 8);
      LODWORD(v9) = *(_DWORD *)(v4 - 4);
      *(_BYTE *)(v11 + 32) |= 8u;
      *(_DWORD *)(v11 + 24) = v9;
      v12 = *(_QWORD *)(v16 + 8);
      LODWORD(v9) = *(_DWORD *)v4;
      *(_BYTE *)(v12 + 32) |= 0x10u;
      *(_DWORD *)(v12 + 28) = v9;
      v13 = v16;
      v14 = *(_QWORD *)(v4 + 8);
      *(_BYTE *)(v16 + 32) |= 1u;
      *(_QWORD *)(v13 + 16) = v14;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v15);
      sub_1015EE304((PB::Base *)v15);
      v4 += 40;
      --v3;
    }
    while (v3);
  }
}

void sub_100BEC1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BEC1DC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  NSObject *v11;
  int v12;
  unsigned int v13;
  __CFString *v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t i;
  _QWORD *v25;
  uint64_t j;
  _QWORD *v27;
  NSObject *v28;
  int v29;
  unsigned int v30;
  NSString *v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  NSObject *v55;
  int v56;
  unsigned int v57;
  __CFString *v58;
  NSObject *v59;
  int v60;
  int v61;
  unsigned int v62;
  __CFString *v63;
  int v64;
  uint64_t n;
  _QWORD *v66;
  uint64_t ii;
  _QWORD *v68;
  NSObject *v69;
  uint8_t *v70;
  int v71;
  uint64_t v72;
  NSObject *v73;
  int v74;
  int v75;
  unsigned int v76;
  __CFString *v77;
  uint64_t k;
  _QWORD *v79;
  uint64_t m;
  _QWORD *v81;
  NSObject *v82;
  int v83;
  unsigned int v84;
  NSString *v85;
  NSObject *v86;
  int v87;
  uint8_t *v88;
  uint64_t v89;
  int v90;
  uint8_t *v91;
  char *v92;
  char *v93;
  int v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  double v108;
  double v109;
  double v110;
  double v111;
  uint64_t v112;
  double v113;
  double v114;
  uint8_t *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint8_t *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  const char *v140;
  uint8_t *v141;
  int v142;
  uint64_t v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  const char *v152;
  uint8_t *v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  __CFString *v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  const char *v169;
  uint8_t *v170;
  uint64_t v171;
  int v172;
  unsigned int v173;
  __CFString *v174;
  uint64_t v175;
  int v176;
  int v177;
  unsigned int v178;
  __CFString *v179;
  uint64_t v180;
  int v181;
  int v182;
  unsigned int v183;
  __CFString *v184;
  uint64_t v185;
  void *v186;
  int v187;
  char *v188;
  char *v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  __CFString *v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  __CFString *v197;
  int v198;
  int v199;
  int v200;
  int v201;
  const char *v202;
  uint8_t *v203;
  uint64_t v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  const char *v212;
  uint8_t *v213;
  uint64_t v214;
  int v215;
  double v216;
  double v217;
  double v218;
  double v219;
  const char *v220;
  uint8_t *v221;
  uint64_t v222;
  double v223;
  double v224;
  const char *v225;
  uint8_t *v226;
  void *v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  char *v234;
  char *v235;
  void *v236;
  int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242;
  int v243;
  int v244;
  char *v245;
  char *v246;
  uint8_t v247[8];
  __int16 v248;
  void *v249;
  __int16 v250;
  void *v251;
  __int16 v252;
  int v253;
  __int16 v254;
  int v255;
  __int16 v256;
  int v257;
  __int16 v258;
  int v259;
  __int16 v260;
  int v261;
  __int16 v262;
  int v263;
  __int16 v264;
  int v265;
  __int16 v266;
  int v267;
  void *v268;
  __int16 v269;
  uint8_t *v270;
  char v271;
  uint8_t buf[8];
  __int16 v273;
  _BYTE v274[60];
  _BYTE v275[10];
  void *__p;
  __int16 v277;
  _BYTE v278[60];
  _BYTE v279[10];
  void *v280;
  char v281;
  _BYTE v282[152];

  if (*(unsigned __int8 *)(a2 + 9) >= 0x10u)
    sub_10192195C();
  switch(*(_BYTE *)(a2 + 9))
  {
    case 0:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v3 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(unsigned __int8 *)(a2 + 12);
        v5 = *(unsigned __int8 *)(a2 + 16);
        *(_DWORD *)buf = 67240963;
        *(_DWORD *)&buf[4] = v4;
        v273 = 1026;
        *(_DWORD *)v274 = v5;
        *(_WORD *)&v274[4] = 1040;
        *(_DWORD *)&v274[6] = 10;
        *(_WORD *)&v274[10] = 2097;
        *(_QWORD *)&v274[12] = a2 + 17;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_GENERAL sequenceNumber,%{public}u,id,%{public}hhu,data,%{private}.*P", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v6 = *(unsigned __int8 *)(a2 + 12);
        v7 = *(unsigned __int8 *)(a2 + 16);
        LODWORD(__p) = 67240963;
        HIDWORD(__p) = v6;
        v277 = 1026;
        *(_DWORD *)v278 = v7;
        *(_WORD *)&v278[4] = 1040;
        *(_DWORD *)&v278[6] = 10;
        *(_WORD *)&v278[10] = 2097;
        *(_QWORD *)&v278[12] = a2 + 17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryMonitor] eEL_GENERAL sequenceNumber,%{public}u,id,%{public}hhu,data,%{private}.*P", &__p, 30);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      break;
    case 1:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v55 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v56 = *(unsigned __int8 *)(a2 + 12);
        v57 = *(unsigned __int8 *)(a2 + 16);
        if (v57 >= 5)
          v58 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16));
        else
          v58 = off_1021795E0[(char)v57];
        v98 = *(_QWORD *)(a2 + 24);
        v99 = *(unsigned __int8 *)(a2 + 17);
        v100 = *(unsigned __int8 *)(a2 + 18);
        v101 = *(unsigned __int8 *)(a2 + 19);
        v102 = *(unsigned __int8 *)(a2 + 20);
        v103 = *(unsigned __int8 *)(a2 + 21);
        v104 = *(unsigned __int8 *)(a2 + 22);
        v105 = *(unsigned __int8 *)(a2 + 23);
        *(_DWORD *)buf = 67242498;
        *(_DWORD *)&buf[4] = v56;
        v273 = 2114;
        *(_QWORD *)v274 = v58;
        *(_WORD *)&v274[8] = 2050;
        *(_QWORD *)&v274[10] = v98;
        *(_WORD *)&v274[18] = 1026;
        *(_DWORD *)&v274[20] = v99;
        *(_WORD *)&v274[24] = 1026;
        *(_DWORD *)&v274[26] = v100;
        *(_WORD *)&v274[30] = 1026;
        *(_DWORD *)&v274[32] = v101;
        *(_WORD *)&v274[36] = 1026;
        *(_DWORD *)&v274[38] = v102;
        *(_WORD *)&v274[42] = 1026;
        *(_DWORD *)&v274[44] = v103;
        *(_WORD *)&v274[48] = 1026;
        *(_DWORD *)&v274[50] = v104;
        *(_WORD *)&v274[54] = 1026;
        *(_DWORD *)&v274[56] = v105;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_INEAR_EVENT sequenceNumber,%{public}u,inEarState,%{public}@,timestamp,%{public}llu,status,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u", buf, 0x46u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v171 = qword_10229FD88;
        v172 = *(unsigned __int8 *)(a2 + 12);
        v173 = *(unsigned __int8 *)(a2 + 16);
        if (v173 >= 5)
          v174 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16));
        else
          v174 = off_1021795E0[(char)v173];
        v204 = *(_QWORD *)(a2 + 24);
        v205 = *(unsigned __int8 *)(a2 + 17);
        v206 = *(unsigned __int8 *)(a2 + 18);
        v207 = *(unsigned __int8 *)(a2 + 19);
        v208 = *(unsigned __int8 *)(a2 + 20);
        v209 = *(unsigned __int8 *)(a2 + 21);
        v210 = *(unsigned __int8 *)(a2 + 22);
        v211 = *(unsigned __int8 *)(a2 + 23);
        LODWORD(__p) = 67242498;
        HIDWORD(__p) = v172;
        v277 = 2114;
        *(_QWORD *)v278 = v174;
        *(_WORD *)&v278[8] = 2050;
        *(_QWORD *)&v278[10] = v204;
        *(_WORD *)&v278[18] = 1026;
        *(_DWORD *)&v278[20] = v205;
        *(_WORD *)&v278[24] = 1026;
        *(_DWORD *)&v278[26] = v206;
        *(_WORD *)&v278[30] = 1026;
        *(_DWORD *)&v278[32] = v207;
        *(_WORD *)&v278[36] = 1026;
        *(_DWORD *)&v278[38] = v208;
        *(_WORD *)&v278[42] = 1026;
        *(_DWORD *)&v278[44] = v209;
        *(_WORD *)&v278[48] = 1026;
        *(_DWORD *)&v278[50] = v210;
        *(_WORD *)&v278[54] = 1026;
        *(_DWORD *)&v278[56] = v211;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v171, 0, "[AccessoryMonitor] eEL_INEAR_EVENT sequenceNumber,%{public}u,inEarState,%{public}@,timestamp,%{public}llu,status,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u", &__p, 70);
        v213 = (uint8_t *)v212;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v212);
        if (v213 != buf)
          free(v213);
      }
      operator new();
    case 2:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v32 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v33 = *(unsigned __int8 *)(a2 + 12);
        v34 = *(_QWORD *)(a2 + 16);
        v35 = *(unsigned __int8 *)(a2 + 24);
        v36 = *(unsigned __int8 *)(a2 + 25);
        v37 = *(unsigned __int8 *)(a2 + 26);
        v38 = *(unsigned __int8 *)(a2 + 27);
        v39 = *(unsigned __int8 *)(a2 + 28);
        v40 = *(unsigned __int8 *)(a2 + 29);
        v41 = *(unsigned __int8 *)(a2 + 30);
        v42 = *(unsigned __int8 *)(a2 + 31);
        *(_DWORD *)buf = 67242496;
        *(_DWORD *)&buf[4] = v33;
        v273 = 2050;
        *(_QWORD *)v274 = v34;
        *(_WORD *)&v274[8] = 1026;
        *(_DWORD *)&v274[10] = v35;
        *(_WORD *)&v274[14] = 1026;
        *(_DWORD *)&v274[16] = v36;
        *(_WORD *)&v274[20] = 1026;
        *(_DWORD *)&v274[22] = v37;
        *(_WORD *)&v274[26] = 1026;
        *(_DWORD *)&v274[28] = v38;
        *(_WORD *)&v274[32] = 1026;
        *(_DWORD *)&v274[34] = v39;
        *(_WORD *)&v274[38] = 1026;
        *(_DWORD *)&v274[40] = v40;
        *(_WORD *)&v274[44] = 1026;
        *(_DWORD *)&v274[46] = v41;
        *(_WORD *)&v274[50] = 1026;
        *(_DWORD *)&v274[52] = v42;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_DOUBLE_TAP_EVENT sequenceNumber,%{public}u,timestamp,%{public}llu,status,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u", buf, 0x42u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v142 = *(unsigned __int8 *)(a2 + 12);
        v143 = *(_QWORD *)(a2 + 16);
        v144 = *(unsigned __int8 *)(a2 + 24);
        v145 = *(unsigned __int8 *)(a2 + 25);
        v146 = *(unsigned __int8 *)(a2 + 26);
        v147 = *(unsigned __int8 *)(a2 + 27);
        v148 = *(unsigned __int8 *)(a2 + 28);
        v149 = *(unsigned __int8 *)(a2 + 29);
        v150 = *(unsigned __int8 *)(a2 + 30);
        v151 = *(unsigned __int8 *)(a2 + 31);
        LODWORD(__p) = 67242496;
        HIDWORD(__p) = v142;
        v277 = 2050;
        *(_QWORD *)v278 = v143;
        *(_WORD *)&v278[8] = 1026;
        *(_DWORD *)&v278[10] = v144;
        *(_WORD *)&v278[14] = 1026;
        *(_DWORD *)&v278[16] = v145;
        *(_WORD *)&v278[20] = 1026;
        *(_DWORD *)&v278[22] = v146;
        *(_WORD *)&v278[26] = 1026;
        *(_DWORD *)&v278[28] = v147;
        *(_WORD *)&v278[32] = 1026;
        *(_DWORD *)&v278[34] = v148;
        *(_WORD *)&v278[38] = 1026;
        *(_DWORD *)&v278[40] = v149;
        *(_WORD *)&v278[44] = 1026;
        *(_DWORD *)&v278[46] = v150;
        *(_WORD *)&v278[50] = 1026;
        *(_DWORD *)&v278[52] = v151;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryMonitor] eEL_DOUBLE_TAP_EVENT sequenceNumber,%{public}u,timestamp,%{public}llu,status,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u,%{public}u", &__p, 66);
        v153 = (uint8_t *)v152;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v152);
        if (v153 != buf)
          free(v153);
      }
      operator new();
    case 3:
      sub_100BEF2E4((uint64_t)"eEL_IED_TRANSITION", (unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 12));
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_100BEF98C();
      return;
    case 4:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v11 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(unsigned __int8 *)(a2 + 12);
        v13 = *(unsigned __int8 *)(a2 + 16);
        if (v13 >= 0xA)
          v14 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16));
        else
          v14 = off_1021796C8[(char)v13];
        v94 = *(__int16 *)(a2 + 17);
        v95 = *(__int16 *)(a2 + 19);
        v96 = *(__int16 *)(a2 + 21);
        v97 = *(__int16 *)(a2 + 23);
        *(_DWORD *)buf = 67241474;
        *(_DWORD *)&buf[4] = v12;
        v273 = 2114;
        *(_QWORD *)v274 = v14;
        *(_WORD *)&v274[8] = 1026;
        *(_DWORD *)&v274[10] = v94;
        *(_WORD *)&v274[14] = 1026;
        *(_DWORD *)&v274[16] = v95;
        *(_WORD *)&v274[20] = 1026;
        *(_DWORD *)&v274[22] = v96;
        *(_WORD *)&v274[26] = 1026;
        *(_DWORD *)&v274[28] = v97;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_SESSION sequenceNumber,%{public}u,state,%{public}@,conchaMin,%{public}d,conchaMax,%{public}d,tragusMin,%{public}d,tragusMax,%{public}d", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v154 = qword_10229FD88;
        v155 = *(unsigned __int8 *)(a2 + 12);
        v156 = *(unsigned __int8 *)(a2 + 16);
        if (v156 >= 0xA)
          v157 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16));
        else
          v157 = off_1021796C8[(char)v156];
        v198 = *(__int16 *)(a2 + 17);
        v199 = *(__int16 *)(a2 + 19);
        v200 = *(__int16 *)(a2 + 21);
        v201 = *(__int16 *)(a2 + 23);
        LODWORD(__p) = 67241474;
        HIDWORD(__p) = v155;
        v277 = 2114;
        *(_QWORD *)v278 = v157;
        *(_WORD *)&v278[8] = 1026;
        *(_DWORD *)&v278[10] = v198;
        *(_WORD *)&v278[14] = 1026;
        *(_DWORD *)&v278[16] = v199;
        *(_WORD *)&v278[20] = 1026;
        *(_DWORD *)&v278[22] = v200;
        *(_WORD *)&v278[26] = 1026;
        *(_DWORD *)&v278[28] = v201;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v154, 0, "[AccessoryMonitor] eEL_IED_SESSION sequenceNumber,%{public}u,state,%{public}@,conchaMin,%{public}d,conchaMax,%{public}d,tragusMin,%{public}d,tragusMax,%{public}d", &__p, 42);
        v203 = (uint8_t *)v202;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v202);
        if (v203 != buf)
          free(v203);
      }
      operator new();
    case 5:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v59 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v60 = *(unsigned __int8 *)(a2 + 12);
        v61 = *(unsigned __int8 *)(a2 + 16);
        v62 = *(char *)(a2 + 17) + 1;
        if (v62 >= 9)
          v63 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(char *)(a2 + 17));
        else
          v63 = off_102179608[v62];
        v106 = *(_QWORD *)(a2 + 18);
        v107 = *(__int16 *)(a2 + 26);
        v108 = *(float *)(a2 + 28);
        v109 = *(float *)(a2 + 32);
        v110 = *(float *)(a2 + 36);
        v111 = *(float *)(a2 + 40);
        *(_DWORD *)buf = 67242242;
        *(_DWORD *)&buf[4] = v60;
        v273 = 1026;
        *(_DWORD *)v274 = v61;
        *(_WORD *)&v274[4] = 2114;
        *(_QWORD *)&v274[6] = v63;
        *(_WORD *)&v274[14] = 2050;
        *(_QWORD *)&v274[16] = v106;
        *(_WORD *)&v274[24] = 1026;
        *(_DWORD *)&v274[26] = v107;
        *(_WORD *)&v274[30] = 2050;
        *(double *)&v274[32] = v108;
        *(_WORD *)&v274[40] = 2050;
        *(double *)&v274[42] = v109;
        *(_WORD *)&v274[50] = 2050;
        *(double *)&v274[52] = v110;
        *(_WORD *)v275 = 2050;
        *(double *)&v275[2] = v111;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_DOUBLE_TAP_STATUS sequenceNumber,%{public}u,id,%{public}u,detectionStatus,%{public}@,statusTime,%{public}llu,tapInterval,%{public}d,meanAngleY,%{public}f,deltaAngleY,%{public}f,entropyConcha,%{public}f,entropyTragus,%{public}f", buf, 0x50u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v175 = qword_10229FD88;
        v176 = *(unsigned __int8 *)(a2 + 12);
        v177 = *(unsigned __int8 *)(a2 + 16);
        v178 = *(char *)(a2 + 17) + 1;
        if (v178 >= 9)
          v179 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(char *)(a2 + 17));
        else
          v179 = off_102179608[v178];
        v214 = *(_QWORD *)(a2 + 18);
        v215 = *(__int16 *)(a2 + 26);
        v216 = *(float *)(a2 + 28);
        v217 = *(float *)(a2 + 32);
        v218 = *(float *)(a2 + 36);
        v219 = *(float *)(a2 + 40);
        LODWORD(__p) = 67242242;
        HIDWORD(__p) = v176;
        v277 = 1026;
        *(_DWORD *)v278 = v177;
        *(_WORD *)&v278[4] = 2114;
        *(_QWORD *)&v278[6] = v179;
        *(_WORD *)&v278[14] = 2050;
        *(_QWORD *)&v278[16] = v214;
        *(_WORD *)&v278[24] = 1026;
        *(_DWORD *)&v278[26] = v215;
        *(_WORD *)&v278[30] = 2050;
        *(double *)&v278[32] = v216;
        *(_WORD *)&v278[40] = 2050;
        *(double *)&v278[42] = v217;
        *(_WORD *)&v278[50] = 2050;
        *(double *)&v278[52] = v218;
        *(_WORD *)v279 = 2050;
        *(double *)&v279[2] = v219;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v175, 0, "[AccessoryMonitor] eEL_DOUBLE_TAP_STATUS sequenceNumber,%{public}u,id,%{public}u,detectionStatus,%{public}@,statusTime,%{public}llu,tapInterval,%{public}d,meanAngleY,%{public}f,deltaAngleY,%{public}f,entropyConcha,%{public}f,entropyTragus,%{public}f", &__p, 80);
        v221 = (uint8_t *)v220;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v220);
        if (v221 != buf)
          free(v221);
      }
      operator new();
    case 6:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v73 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v74 = *(unsigned __int8 *)(a2 + 12);
        v75 = *(unsigned __int8 *)(a2 + 16);
        v76 = *(char *)(a2 + 17) + 1;
        if (v76 >= 9)
          v77 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(char *)(a2 + 17));
        else
          v77 = off_102179650[v76];
        v112 = *(_QWORD *)(a2 + 18);
        v113 = *(float *)(a2 + 26);
        v114 = *(float *)(a2 + 30);
        *(_DWORD *)buf = 67241474;
        *(_DWORD *)&buf[4] = v74;
        v273 = 1026;
        *(_DWORD *)v274 = v75;
        *(_WORD *)&v274[4] = 2114;
        *(_QWORD *)&v274[6] = v77;
        *(_WORD *)&v274[14] = 2050;
        *(_QWORD *)&v274[16] = v112;
        *(_WORD *)&v274[24] = 2050;
        *(double *)&v274[26] = v113;
        *(_WORD *)&v274[34] = 2050;
        *(double *)&v274[36] = v114;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_TAP_ACCEPT_STATUS sequenceNumber,%{public}u,id,%{public}u,acceptanceStatus,%{public}@,statusTime,%{public}llu,peakMagnitude,%{public}f,peakWidth,%{public}f", buf, 0x36u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v180 = qword_10229FD88;
        v181 = *(unsigned __int8 *)(a2 + 12);
        v182 = *(unsigned __int8 *)(a2 + 16);
        v183 = *(char *)(a2 + 17) + 1;
        if (v183 >= 9)
          v184 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(char *)(a2 + 17));
        else
          v184 = off_102179650[v183];
        v222 = *(_QWORD *)(a2 + 18);
        v223 = *(float *)(a2 + 26);
        v224 = *(float *)(a2 + 30);
        LODWORD(__p) = 67241474;
        HIDWORD(__p) = v181;
        v277 = 1026;
        *(_DWORD *)v278 = v182;
        *(_WORD *)&v278[4] = 2114;
        *(_QWORD *)&v278[6] = v184;
        *(_WORD *)&v278[14] = 2050;
        *(_QWORD *)&v278[16] = v222;
        *(_WORD *)&v278[24] = 2050;
        *(double *)&v278[26] = v223;
        *(_WORD *)&v278[34] = 2050;
        *(double *)&v278[36] = v224;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v180, 0, "[AccessoryMonitor] eEL_TAP_ACCEPT_STATUS sequenceNumber,%{public}u,id,%{public}u,acceptanceStatus,%{public}@,statusTime,%{public}llu,peakMagnitude,%{public}f,peakWidth,%{public}f", &__p, 54);
        v226 = (uint8_t *)v225;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v225);
        if (v226 != buf)
          free(v226);
      }
      operator new();
    case 7:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v43 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v44 = *(unsigned __int8 *)(a2 + 12);
        v45 = *(_DWORD *)(a2 + 16);
        v46 = *(_DWORD *)(a2 + 20);
        v47 = *(__int16 *)(a2 + 24);
        v48 = *(__int16 *)(a2 + 26);
        v49 = *(_DWORD *)(a2 + 28);
        v50 = *(_DWORD *)(a2 + 32);
        v51 = *(_DWORD *)(a2 + 36);
        v52 = *(_DWORD *)(a2 + 44);
        v53 = *(_DWORD *)(a2 + 48);
        v54 = *(unsigned __int8 *)(a2 + 52);
        *(_DWORD *)buf = 67243008;
        *(_DWORD *)&buf[4] = v44;
        v273 = 1026;
        *(_DWORD *)v274 = v45;
        *(_WORD *)&v274[4] = 1026;
        *(_DWORD *)&v274[6] = v46;
        *(_WORD *)&v274[10] = 1026;
        *(_DWORD *)&v274[12] = v47;
        *(_WORD *)&v274[16] = 1026;
        *(_DWORD *)&v274[18] = v48;
        *(_WORD *)&v274[22] = 1026;
        *(_DWORD *)&v274[24] = v49;
        *(_WORD *)&v274[28] = 1026;
        *(_DWORD *)&v274[30] = v50;
        *(_WORD *)&v274[34] = 1026;
        *(_DWORD *)&v274[36] = v51;
        *(_WORD *)&v274[40] = 1026;
        *(_DWORD *)&v274[42] = v50;
        *(_WORD *)&v274[46] = 1026;
        *(_DWORD *)&v274[48] = v52;
        *(_WORD *)&v274[52] = 1026;
        *(_DWORD *)&v274[54] = v53;
        *(_WORD *)&v274[58] = 1026;
        *(_DWORD *)v275 = v54;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_CALIBRATION sequenceNumber,%{public}u,conchaGain,%{public}d,tragusGain,%{public}d,conchaOffset,%{public}d,tragusOffset,%{public}d,conchaTempCalA,%{public}d,conchaTempCalB,%{public}d,tragusTempCalA,%{public}d,tragusTempCalB,%{public}d,conchaTempCalT0,%{public}d,tragusTempCalT0,%{public}d,isTempCalEnabled,%{public}u", buf, 0x4Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v158 = *(unsigned __int8 *)(a2 + 12);
        v159 = *(_DWORD *)(a2 + 16);
        v160 = *(_DWORD *)(a2 + 20);
        v161 = *(__int16 *)(a2 + 24);
        v162 = *(__int16 *)(a2 + 26);
        v163 = *(_DWORD *)(a2 + 28);
        v164 = *(_DWORD *)(a2 + 32);
        v165 = *(_DWORD *)(a2 + 36);
        v166 = *(_DWORD *)(a2 + 44);
        v167 = *(_DWORD *)(a2 + 48);
        v168 = *(unsigned __int8 *)(a2 + 52);
        LODWORD(__p) = 67243008;
        HIDWORD(__p) = v158;
        v277 = 1026;
        *(_DWORD *)v278 = v159;
        *(_WORD *)&v278[4] = 1026;
        *(_DWORD *)&v278[6] = v160;
        *(_WORD *)&v278[10] = 1026;
        *(_DWORD *)&v278[12] = v161;
        *(_WORD *)&v278[16] = 1026;
        *(_DWORD *)&v278[18] = v162;
        *(_WORD *)&v278[22] = 1026;
        *(_DWORD *)&v278[24] = v163;
        *(_WORD *)&v278[28] = 1026;
        *(_DWORD *)&v278[30] = v164;
        *(_WORD *)&v278[34] = 1026;
        *(_DWORD *)&v278[36] = v165;
        *(_WORD *)&v278[40] = 1026;
        *(_DWORD *)&v278[42] = v164;
        *(_WORD *)&v278[46] = 1026;
        *(_DWORD *)&v278[48] = v166;
        *(_WORD *)&v278[52] = 1026;
        *(_DWORD *)&v278[54] = v167;
        *(_WORD *)&v278[58] = 1026;
        *(_DWORD *)v279 = v168;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryMonitor] eEL_IED_CALIBRATION sequenceNumber,%{public}u,conchaGain,%{public}d,tragusGain,%{public}d,conchaOffset,%{public}d,tragusOffset,%{public}d,conchaTempCalA,%{public}d,conchaTempCalB,%{public}d,tragusTempCalA,%{public}d,tragusTempCalB,%{public}d,conchaTempCalT0,%{public}d,tragusTempCalT0,%{public}d,isTempCalEnabled,%{public}u", &__p, 74);
        v170 = (uint8_t *)v169;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v169);
        if (v170 != buf)
          free(v170);
      }
      operator new();
    case 8:
      sub_100BEF2E4((uint64_t)"eEL_IED_STATUS", (unsigned __int8 *)(a2 + 16), *(unsigned __int8 *)(a2 + 8), *(unsigned __int8 *)(a2 + 12));
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_100BEF98C();
      return;
    case 9:
      sub_100263E50((uint64_t)&__p);
      sub_100263F7C(&v278[6], (uint64_t)"concha", 6);
      for (i = 17; i != 57; i += 2)
      {
        v25 = sub_100263F7C(&v278[6], (uint64_t)",", 1);
        std::ostream::operator<<(v25, *(__int16 *)(a2 + i));
      }
      sub_100263F7C(&v278[6], (uint64_t)",tragus", 7);
      for (j = 0; j != 40; j += 2)
      {
        v27 = sub_100263F7C(&v278[6], (uint64_t)",", 1);
        std::ostream::operator<<(v27, *(__int16 *)(a2 + 57 + j));
      }
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v28 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v29 = *(unsigned __int8 *)(a2 + 12);
        v30 = *(unsigned __int8 *)(a2 + 16);
        v31 = v30 >= 0xA
            ? +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16)): (NSString *)off_1021796C8[(char)v30];
        std::stringbuf::str(v247, &v278[14]);
        v115 = SBYTE3(v251) >= 0 ? v247 : *(uint8_t **)v247;
        v116 = *(_DWORD *)(a2 + 97);
        v117 = *(_DWORD *)(a2 + 101);
        v118 = *(_DWORD *)(a2 + 105);
        v119 = *(_DWORD *)(a2 + 109);
        v120 = *(char *)(a2 + 113);
        v121 = *(char *)(a2 + 114);
        *(_DWORD *)buf = 67242242;
        *(_DWORD *)&buf[4] = v29;
        v273 = 2114;
        *(_QWORD *)v274 = v31;
        *(_WORD *)&v274[8] = 2082;
        *(_QWORD *)&v274[10] = v115;
        *(_WORD *)&v274[18] = 1026;
        *(_DWORD *)&v274[20] = v116;
        *(_WORD *)&v274[24] = 1026;
        *(_DWORD *)&v274[26] = v117;
        *(_WORD *)&v274[30] = 1026;
        *(_DWORD *)&v274[32] = v118;
        *(_WORD *)&v274[36] = 1026;
        *(_DWORD *)&v274[38] = v119;
        *(_WORD *)&v274[42] = 1026;
        *(_DWORD *)&v274[44] = v120;
        *(_WORD *)&v274[48] = 1026;
        *(_DWORD *)&v274[50] = v121;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_BASELINING sequenceNumber,%{public}u,state,%{public}@,%{public}s,oldConchaOpenLidResp,%{public}d,oldTragusOpenLidResp,%{public}d,newConchaOpenLidResp,%{public}d,newTragusOpenLidResp,%{public}d,conchaMinAccepted,%{public}d,tragusMinAccepted,%{public}d", buf, 0x40u);
        if (SBYTE3(v251) < 0)
          operator delete(*(void **)v247);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v190 = qword_10229FD88;
        v191 = *(unsigned __int8 *)(a2 + 12);
        v192 = *(unsigned __int8 *)(a2 + 16);
        if (v192 >= 0xA)
          v193 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16));
        else
          v193 = off_1021796C8[(char)v192];
        std::stringbuf::str(&v268, &v278[14]);
        if (v271 >= 0)
          v227 = &v268;
        else
          v227 = v268;
        v228 = *(_DWORD *)(a2 + 97);
        v229 = *(_DWORD *)(a2 + 101);
        v230 = *(_DWORD *)(a2 + 105);
        v231 = *(_DWORD *)(a2 + 109);
        v232 = *(char *)(a2 + 113);
        v233 = *(char *)(a2 + 114);
        *(_DWORD *)v247 = 67242242;
        *(_DWORD *)&v247[4] = v191;
        v248 = 2114;
        v249 = v193;
        v250 = 2082;
        v251 = v227;
        v252 = 1026;
        v253 = v228;
        v254 = 1026;
        v255 = v229;
        v256 = 1026;
        v257 = v230;
        v258 = 1026;
        v259 = v231;
        v260 = 1026;
        v261 = v232;
        v262 = 1026;
        v263 = v233;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v190, 0, "[AccessoryMonitor] eEL_IED_BASELINING sequenceNumber,%{public}u,state,%{public}@,%{public}s,oldConchaOpenLidResp,%{public}d,oldTragusOpenLidResp,%{public}d,newConchaOpenLidResp,%{public}d,newTragusOpenLidResp,%{public}d,conchaMinAccepted,%{public}d,tragusMinAccepted,%{public}d", v247, 64);
        v235 = v234;
        if (v271 < 0)
          operator delete(v268);
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v235);
        if (v235 != (char *)buf)
          free(v235);
      }
      operator new();
    case 0xA:
      sub_100263E50((uint64_t)&__p);
      sub_100263F7C(&v278[6], (uint64_t)"concha", 6);
      for (k = 0; k != 30; k += 2)
      {
        v79 = sub_100263F7C(&v278[6], (uint64_t)",", 1);
        std::ostream::operator<<(v79, *(__int16 *)(a2 + 17 + k));
      }
      sub_100263F7C(&v278[6], (uint64_t)",tragus", 7);
      for (m = 0; m != 30; m += 2)
      {
        v81 = sub_100263F7C(&v278[6], (uint64_t)",", 1);
        std::ostream::operator<<(v81, *(__int16 *)(a2 + 47 + m));
      }
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v82 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v83 = *(unsigned __int8 *)(a2 + 12);
        v84 = *(unsigned __int8 *)(a2 + 16);
        v85 = v84 >= 0xA
            ? +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16)): (NSString *)off_1021796C8[(char)v84];
        std::stringbuf::str(v247, &v278[14]);
        v122 = SBYTE3(v251) >= 0 ? v247 : *(uint8_t **)v247;
        v123 = *(_DWORD *)(a2 + 77);
        v124 = *(_DWORD *)(a2 + 81);
        v125 = *(_DWORD *)(a2 + 85);
        v126 = *(_DWORD *)(a2 + 89);
        v127 = *(unsigned __int8 *)(a2 + 93);
        v128 = *(unsigned __int8 *)(a2 + 94);
        v129 = *(unsigned __int8 *)(a2 + 95);
        v130 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)buf = 67242754;
        *(_DWORD *)&buf[4] = v83;
        v273 = 2114;
        *(_QWORD *)v274 = v85;
        *(_WORD *)&v274[8] = 2082;
        *(_QWORD *)&v274[10] = v122;
        *(_WORD *)&v274[18] = 1026;
        *(_DWORD *)&v274[20] = v123;
        *(_WORD *)&v274[24] = 1026;
        *(_DWORD *)&v274[26] = v124;
        *(_WORD *)&v274[30] = 1026;
        *(_DWORD *)&v274[32] = v125;
        *(_WORD *)&v274[36] = 1026;
        *(_DWORD *)&v274[38] = v126;
        *(_WORD *)&v274[42] = 1026;
        *(_DWORD *)&v274[44] = v127;
        *(_WORD *)&v274[48] = 1026;
        *(_DWORD *)&v274[50] = v128;
        *(_WORD *)&v274[54] = 1026;
        *(_DWORD *)&v274[56] = v129;
        *(_WORD *)v275 = 1026;
        *(_DWORD *)&v275[2] = v130;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_SENSOR_DROP sequenceNumber,%{public}u,state,%{public}@,%{public}s,xMean,%{public}d,yMean,%{public}d,xVariance,%{public}d,yVariance,%{public}d,conchaDropped,%{public}u,tragusDropped,%{public}u,conchaRecovered,%{public}u,tragusRecovered,%{public}u", buf, 0x4Cu);
        if (SBYTE3(v251) < 0)
          operator delete(*(void **)v247);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v194 = qword_10229FD88;
        v195 = *(unsigned __int8 *)(a2 + 12);
        v196 = *(unsigned __int8 *)(a2 + 16);
        if (v196 >= 0xA)
          v197 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *(unsigned __int8 *)(a2 + 16));
        else
          v197 = off_1021796C8[(char)v196];
        std::stringbuf::str(&v268, &v278[14]);
        if (v271 >= 0)
          v236 = &v268;
        else
          v236 = v268;
        v237 = *(_DWORD *)(a2 + 77);
        v238 = *(_DWORD *)(a2 + 81);
        v239 = *(_DWORD *)(a2 + 85);
        v240 = *(_DWORD *)(a2 + 89);
        v241 = *(unsigned __int8 *)(a2 + 93);
        v242 = *(unsigned __int8 *)(a2 + 94);
        v243 = *(unsigned __int8 *)(a2 + 95);
        v244 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)v247 = 67242754;
        *(_DWORD *)&v247[4] = v195;
        v248 = 2114;
        v249 = v197;
        v250 = 2082;
        v251 = v236;
        v252 = 1026;
        v253 = v237;
        v254 = 1026;
        v255 = v238;
        v256 = 1026;
        v257 = v239;
        v258 = 1026;
        v259 = v240;
        v260 = 1026;
        v261 = v241;
        v262 = 1026;
        v263 = v242;
        v264 = 1026;
        v265 = v243;
        v266 = 1026;
        v267 = v244;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v194, 0, "[AccessoryMonitor] eEL_IED_SENSOR_DROP sequenceNumber,%{public}u,state,%{public}@,%{public}s,xMean,%{public}d,yMean,%{public}d,xVariance,%{public}d,yVariance,%{public}d,conchaDropped,%{public}u,tragusDropped,%{public}u,conchaRecovered,%{public}u,tragusRecovered,%{public}u", v247, 76);
        v246 = v245;
        if (v271 < 0)
          operator delete(v268);
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v246);
        if (v246 != (char *)buf)
          free(v246);
      }
      operator new();
    case 0xB:
      if (*(unsigned __int8 *)(a2 + 16) >= 0xFu)
        v10 = 15;
      else
        v10 = *(unsigned __int8 *)(a2 + 16);
      sub_100263E50((uint64_t)&__p);
      sub_100263F7C(&v278[6], (uint64_t)"history", 7);
      if (v10)
        operator new();
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v86 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v87 = *(unsigned __int8 *)(a2 + 12);
        std::stringbuf::str(buf, &v278[14]);
        v88 = v274[13] >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v247 = 67240450;
        *(_DWORD *)&v247[4] = v87;
        v248 = 2082;
        v249 = v88;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] sequenceNumber,%{public}u,eEL_IED_FSM_TRANSITION_HISTORY %{public}s", v247, 0x12u);
        if ((v274[13] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v89 = qword_10229FD88;
        v90 = *(unsigned __int8 *)(a2 + 12);
        std::stringbuf::str(v247, &v278[14]);
        if (SBYTE3(v251) >= 0)
          v91 = v247;
        else
          v91 = *(uint8_t **)v247;
        LODWORD(v268) = 67240450;
        HIDWORD(v268) = v90;
        v269 = 2082;
        v270 = v91;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v89, 0, "[AccessoryMonitor] sequenceNumber,%{public}u,eEL_IED_FSM_TRANSITION_HISTORY %{public}s", &v268, 18);
        v93 = v92;
        if (SBYTE3(v251) < 0)
          operator delete(*(void **)v247);
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v93);
        if (v93 != (char *)buf)
          free(v93);
      }
      *(void **)((char *)&__p
      *(_QWORD *)&v278[6] = v131;
      if (v281 < 0)
        operator delete(v280);
      std::streambuf::~streambuf(&v278[14]);
      std::ios::~ios(v282);
      break;
    case 0xC:
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v15 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(unsigned __int8 *)(a2 + 12);
        v17 = *(unsigned __int8 *)(a2 + 16);
        v18 = *(unsigned __int8 *)(a2 + 17);
        v19 = *(unsigned __int16 *)(a2 + 18);
        v20 = *(_DWORD *)(a2 + 20);
        v21 = *(_DWORD *)(a2 + 24);
        v22 = *(_DWORD *)(a2 + 28);
        v23 = *(_QWORD *)(a2 + 32);
        *(_DWORD *)buf = 67241984;
        *(_DWORD *)&buf[4] = v16;
        v273 = 1026;
        *(_DWORD *)v274 = v17;
        *(_WORD *)&v274[4] = 1026;
        *(_DWORD *)&v274[6] = v18;
        *(_WORD *)&v274[10] = 1026;
        *(_DWORD *)&v274[12] = v19;
        *(_WORD *)&v274[16] = 1026;
        *(_DWORD *)&v274[18] = v20;
        *(_WORD *)&v274[22] = 1026;
        *(_DWORD *)&v274[24] = v21;
        *(_WORD *)&v274[28] = 1026;
        *(_DWORD *)&v274[30] = v22;
        *(_WORD *)&v274[34] = 2050;
        *(_QWORD *)&v274[36] = v23;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_TEMP_COMP sequenceNumber,%{public}u,isValid,%{public}u,pwrState,%{public}u,prescalar,%{public}d,wdtPeriod_ms,%{public}d,conchaDegreeC,%{public}d,tragusDegreeC,%{public}d,timestamp,%{public}llu", buf, 0x36u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v132 = *(unsigned __int8 *)(a2 + 12);
        v133 = *(unsigned __int8 *)(a2 + 16);
        v134 = *(unsigned __int8 *)(a2 + 17);
        v135 = *(unsigned __int16 *)(a2 + 18);
        v136 = *(_DWORD *)(a2 + 20);
        v137 = *(_DWORD *)(a2 + 24);
        v138 = *(_DWORD *)(a2 + 28);
        v139 = *(_QWORD *)(a2 + 32);
        LODWORD(__p) = 67241984;
        HIDWORD(__p) = v132;
        v277 = 1026;
        *(_DWORD *)v278 = v133;
        *(_WORD *)&v278[4] = 1026;
        *(_DWORD *)&v278[6] = v134;
        *(_WORD *)&v278[10] = 1026;
        *(_DWORD *)&v278[12] = v135;
        *(_WORD *)&v278[16] = 1026;
        *(_DWORD *)&v278[18] = v136;
        *(_WORD *)&v278[22] = 1026;
        *(_DWORD *)&v278[24] = v137;
        *(_WORD *)&v278[28] = 1026;
        *(_DWORD *)&v278[30] = v138;
        *(_WORD *)&v278[34] = 2050;
        *(_QWORD *)&v278[36] = v139;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD88, 0, "[AccessoryMonitor] eEL_TEMP_COMP sequenceNumber,%{public}u,isValid,%{public}u,pwrState,%{public}u,prescalar,%{public}d,wdtPeriod_ms,%{public}d,conchaDegreeC,%{public}d,tragusDegreeC,%{public}d,timestamp,%{public}llu", &__p, 54);
        v141 = (uint8_t *)v140;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionLogger::onAccessoryMonitorLogEvent(const CLAccessoryMonitor::LogEvent *)", "%s\n", v140);
        if (v141 != buf)
          free(v141);
      }
      operator new();
    case 0xD:
      v64 = *(unsigned __int8 *)(a2 + 12);
      sub_100263E50((uint64_t)&__p);
      sub_100263F7C(&v278[6], (uint64_t)"conchaSlow", 10);
      for (n = 0; n != 30; n += 2)
      {
        v66 = sub_100263F7C(&v278[6], (uint64_t)",", 1);
        std::ostream::operator<<(v66, *(__int16 *)(a2 + 16 + n));
      }
      sub_100263F7C(&v278[6], (uint64_t)",tragusSlow", 11);
      for (ii = 0; ii != 30; ii += 2)
      {
        v68 = sub_100263F7C(&v278[6], (uint64_t)",", 1);
        std::ostream::operator<<(v68, *(__int16 *)(a2 + 46 + ii));
      }
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102178A08);
      v69 = qword_10229FD88;
      if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str(v247, &v278[14]);
        v70 = SBYTE3(v251) >= 0 ? v247 : *(uint8_t **)v247;
        v71 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)&buf[4] = v64;
        v273 = 2082;
        *(_QWORD *)v274 = v70;
        *(_WORD *)&v274[8] = 1026;
        *(_DWORD *)&v274[10] = v71;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] eEL_IED_ADDITIONAL_STATE sequenceNumber,%{public}u,%{public}s,lastSampleId,%{public}d", buf, 0x18u);
        if (SBYTE3(v251) < 0)
          operator delete(*(void **)v247);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD80 != -1)
          dispatch_once(&qword_10229FD80, &stru_102178A08);
        v185 = qword_10229FD88;
        std::stringbuf::str(&v268, &v278[14]);
        if (v271 >= 0)
          v186 = &v268;
        else
          v186 = v268;
        v187 = *(_DWORD *)(a2 + 76);
        *(_DWORD *)v247 = 67240706;
        *(_DWORD *)&v247[4] = v64;
        v248 = 2082;
        v249 = v186;
        v250 = 1026;
        LODWORD(v251) = v187;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v185, 0, "[AccessoryMonitor] eEL_IED_ADDITIONAL_STATE sequenceNumber,%{public}u,%{public}s,lastSampleId,%{public}d", v247, 24);
        v189 = v188;
        if (v271 < 0)
          operator delete(v268);
        sub_100512490("Generic", 1, 0, 2, "void (anonymous namespace)::logIEDAdditionalState(const sLog_IEDAdditionalState_t &, uint8_t)", "%s\n", v189);
        if (v189 != (char *)buf)
          free(v189);
      }
      *(void **)((char *)&__p
      *(_QWORD *)&v278[6] = v72;
      if (v281 < 0)
        operator delete(v280);
      std::streambuf::~streambuf(&v278[14]);
      std::ios::~ios(v282);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        operator new();
      return;
    case 0xE:
      operator new();
    case 0xF:
      operator new();
    default:
      return;
  }
}

void sub_100BEF0A0(_Unwind_Exception *a1)
{
  sub_1018B38B4((uint64_t)&STACK[0x6E0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100BEF2E4(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  uint64_t i;
  _QWORD *v9;
  uint64_t j;
  _QWORD *v11;
  uint64_t k;
  _QWORD *v13;
  uint64_t m;
  _QWORD *v15;
  uint64_t n;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t ii;
  _QWORD *v21;
  _BYTE *v22;
  uint64_t v23;
  NSObject *v24;
  unsigned int v25;
  NSString *v26;
  _BYTE *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  unsigned int v37;
  __CFString *v38;
  void **v39;
  double v40;
  double v41;
  double v42;
  double v43;
  int v44;
  int v45;
  char *v46;
  char *v47;
  void *v48[2];
  char v49;
  _QWORD v50[2];
  uint64_t v51;
  _QWORD v52[10];
  char v53;
  uint64_t v54;
  _BYTE __p[12];
  __int16 v56;
  int v57;
  __int16 v58;
  __CFString *v59;
  __int16 v60;
  void **v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  double v69;
  __int16 v70;
  int v71;
  __int16 v72;
  int v73;
  _BYTE v74[28];
  __int16 v75;
  _BYTE *v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;

  sub_100263E50((uint64_t)v50);
  sub_100263F7C(&v51, (uint64_t)"concha", 6);
  for (i = 1; i != 31; i += 2)
  {
    v9 = sub_100263F7C(&v51, (uint64_t)",", 1);
    std::ostream::operator<<(v9, *(__int16 *)&a2[i]);
  }
  sub_100263F7C(&v51, (uint64_t)",tragus", 7);
  for (j = 31; j != 61; j += 2)
  {
    v11 = sub_100263F7C(&v51, (uint64_t)",", 1);
    std::ostream::operator<<(v11, *(__int16 *)&a2[j]);
  }
  if (a3 > 0xE)
  {
    sub_100263F7C(&v51, (uint64_t)",concha temperature", 19);
    for (k = 0; k != 30; k += 2)
    {
      v13 = sub_100263F7C(&v51, (uint64_t)",", 1);
      std::ostream::operator<<(v13, *(__int16 *)&a2[k + 109]);
    }
    sub_100263F7C(&v51, (uint64_t)",tragus temperature", 19);
    for (m = 0; m != 30; m += 2)
    {
      v15 = sub_100263F7C(&v51, (uint64_t)",", 1);
      std::ostream::operator<<(v15, *(__int16 *)&a2[m + 139]);
    }
  }
  sub_100263F7C(&v51, (uint64_t)",tip", 4);
  for (n = 61; n != 76; ++n)
  {
    v17 = sub_100263F7C(&v51, (uint64_t)",", 1);
    std::to_string((std::string *)v74, (char)a2[n]);
    if (v74[23] >= 0)
      v18 = v74;
    else
      v18 = *(_BYTE **)v74;
    if (v74[23] >= 0)
      v19 = v74[23];
    else
      v19 = *(_QWORD *)&v74[8];
    sub_100263F7C(v17, (uint64_t)v18, v19);
    if ((v74[23] & 0x80000000) != 0)
      operator delete(*(void **)v74);
  }
  sub_100263F7C(&v51, (uint64_t)",tilt", 5);
  for (ii = 76; ii != 91; ++ii)
  {
    v21 = sub_100263F7C(&v51, (uint64_t)",", 1);
    std::to_string((std::string *)v74, (char)a2[ii]);
    if (v74[23] >= 0)
      v22 = v74;
    else
      v22 = *(_BYTE **)v74;
    if (v74[23] >= 0)
      v23 = v74[23];
    else
      v23 = *(_QWORD *)&v74[8];
    sub_100263F7C(v21, (uint64_t)v22, v23);
    if ((v74[23] & 0x80000000) != 0)
      operator delete(*(void **)v74);
  }
  if (qword_10229FD80 != -1)
    dispatch_once(&qword_10229FD80, &stru_102178A08);
  v24 = qword_10229FD88;
  if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_DEFAULT))
  {
    v25 = *a2;
    v26 = v25 >= 0xA
        ? +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *a2)
        : (NSString *)off_1021796C8[(char)v25];
    std::stringbuf::str(__p, v52);
    v27 = SBYTE3(v59) >= 0 ? __p : *(_BYTE **)__p;
    v28 = *(float *)(a2 + 91);
    v29 = *(float *)(a2 + 95);
    v30 = *(float *)(a2 + 99);
    v31 = *(float *)(a2 + 103);
    v32 = (char)a2[107];
    v33 = (char)a2[108];
    *(_DWORD *)v74 = 136448514;
    *(_QWORD *)&v74[4] = a1;
    *(_WORD *)&v74[12] = 1026;
    *(_DWORD *)&v74[14] = a4;
    *(_WORD *)&v74[18] = 2114;
    *(_QWORD *)&v74[20] = v26;
    v75 = 2082;
    v76 = v27;
    v77 = 2050;
    v78 = v28;
    v79 = 2050;
    v80 = v29;
    v81 = 2050;
    v82 = v30;
    v83 = 2050;
    v84 = v31;
    v85 = 1026;
    v86 = v32;
    v87 = 1026;
    v88 = v33;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "[AccessoryMonitor] %{public}s sequenceNumber,%{public}u,state,%{public}@,%{public}s,conchaRunningMin,%{public}f,tragusRunningMin,%{public}f,conchaBaseline,%{public}f,tragusBaseline,%{public}f,runningMinAccepted,%{public}d,ringBufferUpdated,%{public}d", v74, 0x5Au);
    if (SBYTE3(v59) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v74, 0x65CuLL);
    if (qword_10229FD80 != -1)
      dispatch_once(&qword_10229FD80, &stru_102178A08);
    v36 = qword_10229FD88;
    v37 = *a2;
    if (v37 >= 0xA)
      v38 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("(unknown: %i)"), *a2);
    else
      v38 = off_1021796C8[(char)v37];
    std::stringbuf::str(v48, v52);
    if (v49 >= 0)
      v39 = v48;
    else
      v39 = (void **)v48[0];
    v40 = *(float *)(a2 + 91);
    v41 = *(float *)(a2 + 95);
    v42 = *(float *)(a2 + 99);
    v43 = *(float *)(a2 + 103);
    v44 = (char)a2[107];
    v45 = (char)a2[108];
    *(_DWORD *)__p = 136448514;
    *(_QWORD *)&__p[4] = a1;
    v56 = 1026;
    v57 = a4;
    v58 = 2114;
    v59 = v38;
    v60 = 2082;
    v61 = v39;
    v62 = 2050;
    v63 = v40;
    v64 = 2050;
    v65 = v41;
    v66 = 2050;
    v67 = v42;
    v68 = 2050;
    v69 = v43;
    v70 = 1026;
    v71 = v44;
    v72 = 1026;
    v73 = v45;
    _os_log_send_and_compose_impl(2, 0, v74, 1628, &_mh_execute_header, v36, 0, "[AccessoryMonitor] %{public}s sequenceNumber,%{public}u,state,%{public}@,%{public}s,conchaRunningMin,%{public}f,tragusRunningMin,%{public}f,conchaBaseline,%{public}f,tragusBaseline,%{public}f,runningMinAccepted,%{public}d,ringBufferUpdated,%{public}d", __p, 90);
    v47 = v46;
    if (v49 < 0)
      operator delete(v48[0]);
    sub_100512490("Generic", 1, 0, 2, "void (anonymous namespace)::logIEDData(const char *, const _sLog_IEDData_t &, uint8_t, uint8_t)", "%s\n", v47);
    if (v47 != v74)
      free(v47);
  }
  *(_QWORD *)((char *)v50
  v51 = v34;
  if (v53 < 0)
    operator delete((void *)v52[8]);
  std::streambuf::~streambuf(v52);
  return std::ios::~ios(&v54);
}

void sub_100BEF920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100BEF98C()
{
  operator new();
}

void sub_100BEFBA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void sub_100BEFBEC()
{
  operator new();
}

void sub_100BEFD20(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100BEFD3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  CFAbsoluteTime Current;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[27];
  uint64_t v20;
  CFAbsoluteTime v21;
  char v22;

  if (a3)
  {
    v3 = a3;
    v4 = (unsigned __int8 *)(a2 + 16);
    do
    {
      sub_1015EB864(v19);
      sub_101602B0C((uint64_t)v19);
      Current = CFAbsoluteTimeGetCurrent();
      v22 |= 1u;
      v21 = Current;
      v6 = v20;
      *(float *)&Current = (float)*((__int16 *)v4 + 2);
      *(_WORD *)(v20 + 56) |= 4u;
      *(_DWORD *)(v6 + 24) = LODWORD(Current);
      v7 = v20;
      *(float *)&Current = (float)*((__int16 *)v4 + 1);
      *(_WORD *)(v20 + 56) |= 0x20u;
      *(_DWORD *)(v7 + 36) = LODWORD(Current);
      v8 = v20;
      *(float *)&Current = (float)*((__int16 *)v4 + 3);
      *(_WORD *)(v20 + 56) |= 0x200u;
      *(_DWORD *)(v8 + 52) = LODWORD(Current);
      v9 = v20;
      v10 = *((_QWORD *)v4 - 2);
      *(_WORD *)(v20 + 56) |= 2u;
      *(_QWORD *)(v9 + 16) = v10;
      v11 = v20;
      v12 = v4[1];
      *(_WORD *)(v20 + 56) |= 0x100u;
      *(_DWORD *)(v11 + 48) = v12;
      v13 = v20;
      v14 = *((unsigned __int16 *)v4 + 4);
      *(_WORD *)(v20 + 56) |= 0x80u;
      *(_DWORD *)(v13 + 44) = v14;
      v15 = v20;
      v16 = *v4;
      *(_WORD *)(v20 + 56) |= 0x40u;
      *(_DWORD *)(v15 + 40) = v16;
      v17 = v20;
      v18 = *((_QWORD *)v4 - 1);
      *(_WORD *)(v20 + 56) |= 1u;
      *(_QWORD *)(v17 + 8) = v18;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v19);
      sub_1015EE304((PB::Base *)v19);
      v4 += 32;
      --v3;
    }
    while (v3);
  }
}

void sub_100BEFEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

__n128 sub_100BEFEDC(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  sub_100BF5240(a1);
  v4 = *(_QWORD *)(a1 + 24);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

__n128 sub_100BEFF2C(uint64_t a1, __n128 *a2)
{
  uint64_t v4;
  __n128 result;

  sub_100BF52A0(a1);
  v4 = *(_QWORD *)(a1 + 40);
  if (*(char *)(v4 + 23) < 0)
    operator delete(*(void **)v4);
  result = *a2;
  *(_QWORD *)(v4 + 16) = a2[1].n128_u64[0];
  *(__n128 *)v4 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void sub_100BEFF7C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  CFAbsoluteTime Current;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[18];
  uint64_t v17;
  CFAbsoluteTime v18;
  char v19;

  if (a3)
  {
    v3 = a3;
    v4 = (uint64_t *)(a2 + 24);
    do
    {
      sub_1015EB864(v16);
      sub_101602AA8((uint64_t)v16);
      Current = CFAbsoluteTimeGetCurrent();
      v19 |= 1u;
      v18 = Current;
      v6 = v17;
      v7 = *((unsigned __int16 *)v4 + 4);
      *(_BYTE *)(v17 + 36) |= 4u;
      *(_DWORD *)(v6 + 28) = v7;
      v8 = v17;
      LODWORD(Current) = *((_DWORD *)v4 + 3);
      *(_BYTE *)(v17 + 36) |= 8u;
      *(_DWORD *)(v8 + 32) = LODWORD(Current);
      sub_1015AA8E0(v17);
      v9 = *(_QWORD *)(v17 + 8);
      v10 = *(v4 - 3);
      *(_WORD *)(v9 + 44) |= 1u;
      *(_QWORD *)(v9 + 8) = v10;
      v11 = *(_QWORD *)(v17 + 8);
      LODWORD(v10) = *((_DWORD *)v4 - 4);
      *(_WORD *)(v11 + 44) |= 0x10u;
      *(_DWORD *)(v11 + 28) = v10;
      v12 = *(_QWORD *)(v17 + 8);
      LODWORD(v10) = *((_DWORD *)v4 - 3);
      *(_WORD *)(v12 + 44) |= 0x20u;
      *(_DWORD *)(v12 + 32) = v10;
      v13 = *(_QWORD *)(v17 + 8);
      LODWORD(v10) = *((_DWORD *)v4 - 2);
      *(_WORD *)(v13 + 44) |= 0x40u;
      *(_DWORD *)(v13 + 36) = v10;
      v14 = v17;
      v15 = *v4;
      *(_BYTE *)(v17 + 36) |= 1u;
      *(_QWORD *)(v14 + 16) = v15;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v16);
      sub_1015EE304((PB::Base *)v16);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
}

void sub_100BF00F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BF0110(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _QWORD v12[22];
  uint64_t v13;

  if (a3)
  {
    v3 = a3;
    v4 = (unint64_t *)(a2 + 16);
    do
    {
      sub_1015EB864(v12);
      sub_101604790((uint64_t)v12);
      v5 = v13;
      v6 = *(v4 - 2);
      *(_BYTE *)(v13 + 36) |= 2u;
      *(_QWORD *)(v5 + 16) = v6;
      v7 = v13;
      v8 = *((_DWORD *)v4 - 2);
      *(_BYTE *)(v13 + 36) |= 8u;
      *(_DWORD *)(v7 + 28) = v8;
      v9 = v13;
      LODWORD(v6) = *((_DWORD *)v4 - 1);
      *(_BYTE *)(v13 + 36) |= 4u;
      *(_DWORD *)(v9 + 24) = v6;
      v10 = v13;
      v11 = (double)*v4;
      *(_BYTE *)(v13 + 36) |= 1u;
      *(double *)(v10 + 8) = v11;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v12);
      sub_1015EE304((PB::Base *)v12);
      v4 += 4;
      --v3;
    }
    while (v3);
  }
}

void sub_100BF021C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BF0234(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  _QWORD v16[26];
  char *v17;
  int __src;
  int v19;
  int v20;
  uint64_t v21;

  if (a3)
  {
    v3 = a3;
    v4 = (unsigned __int8 *)(a2 + 19);
    do
    {
      sub_1015EB864(v16);
      sub_1016047F4((uint64_t)v16);
      v5 = v17;
      v6 = *(_QWORD *)(v4 - 19);
      v7 = v17[224];
      v17[224] = v7 | 2;
      *((_QWORD *)v5 + 26) = v6;
      v8 = *(_QWORD *)(v4 - 11);
      v5[224] = v7 | 3;
      *((_QWORD *)v5 + 25) = v8;
      LODWORD(v8) = *(v4 - 3);
      v5[224] = v7 | 0xB;
      *((_DWORD *)v5 + 55) = v8;
      LODWORD(v8) = *(v4 - 2);
      v5[224] = v7 | 0xF;
      *((_DWORD *)v5 + 54) = v8;
      LODWORD(v8) = *v4;
      __src = *(v4 - 1);
      v19 = v8;
      v20 = v4[1];
      sub_1002A3054(v5 + 8, (char *)&__src, (uint64_t)&v21, 3uLL);
      v9 = v4[6];
      __src = v4[5];
      v19 = v9;
      v20 = v4[7];
      sub_1002A3054(v17 + 32, (char *)&__src, (uint64_t)&v21, 3uLL);
      v10 = v4[9];
      __src = v4[8];
      v19 = v10;
      v20 = v4[10];
      sub_1002A3054(v17 + 56, (char *)&__src, (uint64_t)&v21, 3uLL);
      v11 = v4[15];
      __src = v4[14];
      v19 = v11;
      v20 = v4[16];
      sub_1002A3054(v17 + 80, (char *)&__src, (uint64_t)&v21, 3uLL);
      v12 = v4[3];
      __src = v4[2];
      v19 = v12;
      v20 = v4[4];
      sub_1002A3054(v17 + 128, (char *)&__src, (uint64_t)&v21, 3uLL);
      v13 = v4[12];
      __src = v4[11];
      v19 = v13;
      v20 = v4[13];
      sub_1002A3054(v17 + 152, (char *)&__src, (uint64_t)&v21, 3uLL);
      v14 = v4[18];
      __src = v4[17];
      v19 = v14;
      sub_1002A3054(v17 + 176, (char *)&__src, (uint64_t)&v20, 2uLL);
      v15 = v4[20];
      __src = v4[19];
      v19 = v15;
      sub_1002A3054(v17 + 104, (char *)&__src, (uint64_t)&v20, 2uLL);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v16);
      sub_1015EE304((PB::Base *)v16);
      v4 += 40;
      --v3;
    }
    while (v3);
  }
}

void sub_100BF04BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

void sub_100BF04F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  CFAbsoluteTime Current;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[24];
  uint64_t v17;
  CFAbsoluteTime v18;
  char v19;

  if (a3)
  {
    v3 = a3;
    v4 = (uint64_t *)(a2 + 24);
    do
    {
      sub_1015EB864(v16);
      sub_101603980((uint64_t)v16);
      Current = CFAbsoluteTimeGetCurrent();
      v19 |= 1u;
      v18 = Current;
      v6 = v17;
      v7 = *((unsigned __int16 *)v4 + 4);
      *(_BYTE *)(v17 + 32) |= 4u;
      *(_DWORD *)(v6 + 28) = v7;
      sub_1015AC500(v17);
      v8 = *(_QWORD *)(v17 + 8);
      v9 = *(v4 - 3);
      *(_BYTE *)(v8 + 36) |= 1u;
      *(_QWORD *)(v8 + 8) = v9;
      v10 = *(_QWORD *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 - 4);
      *(_BYTE *)(v10 + 36) |= 8u;
      *(_DWORD *)(v10 + 24) = v9;
      v11 = *(_QWORD *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 - 3);
      *(_BYTE *)(v11 + 36) |= 0x10u;
      *(_DWORD *)(v11 + 28) = v9;
      v12 = *(_QWORD *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 - 2);
      *(_BYTE *)(v12 + 36) |= 0x20u;
      *(_DWORD *)(v12 + 32) = v9;
      v13 = *(_QWORD *)(v17 + 8);
      LODWORD(v9) = *((_DWORD *)v4 + 3);
      *(_BYTE *)(v13 + 36) |= 4u;
      *(_DWORD *)(v13 + 20) = v9;
      v14 = v17;
      v15 = *v4;
      *(_BYTE *)(v17 + 32) |= 1u;
      *(_QWORD *)(v14 + 16) = v15;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v16);
      sub_1015EE304((PB::Base *)v16);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
}

void sub_100BF0674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BF068C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  CFAbsoluteTime Current;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD v33[46];
  uint64_t v34;
  CFAbsoluteTime v35;
  char v36;
  __int128 __src;
  uint64_t v38;

  if (a3)
  {
    v4 = 0;
    v5 = 144 * a3;
    do
    {
      sub_1015EB864(v33);
      sub_1016032DC((uint64_t)v33);
      Current = CFAbsoluteTimeGetCurrent();
      v36 |= 1u;
      v35 = Current;
      sub_1015B89BC(v34);
      v7 = *(_QWORD *)(v34 + 72);
      v8 = *(_QWORD *)(a2 + v4 + 64);
      *(_BYTE *)(v7 + 152) |= 2u;
      *(_QWORD *)(v7 + 136) = v8;
      __src = *(_OWORD *)(a2 + v4);
      sub_1002A3054((char *)(*(_QWORD *)(v34 + 72) + 56), (char *)&__src, (uint64_t)&v38, 4uLL);
      *(_QWORD *)&__src = *(_QWORD *)(a2 + v4 + 16);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 24);
      sub_1002A3054((char *)(*(_QWORD *)(v34 + 72) + 80), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(_QWORD *)&__src = *(_QWORD *)(a2 + v4 + 28);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 36);
      sub_1002A3054((char *)(*(_QWORD *)(v34 + 72) + 32), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      *(_QWORD *)&__src = *(_QWORD *)(a2 + v4 + 40);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 48);
      sub_1002A3054((char *)(*(_QWORD *)(v34 + 72) + 104), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      v9 = *(_QWORD *)(v34 + 72);
      v10 = a2 + v4;
      v11 = *(unsigned __int16 *)(a2 + v4 + 52);
      *(_BYTE *)(v9 + 152) |= 4u;
      *(_DWORD *)(v9 + 144) = v11;
      v12 = *(_QWORD *)(v34 + 72);
      v13 = *(_QWORD *)(a2 + v4 + 56);
      *(_BYTE *)(v12 + 152) |= 1u;
      *(_QWORD *)(v12 + 128) = v13;
      *(_QWORD *)&__src = *(_QWORD *)(a2 + v4 + 80);
      DWORD2(__src) = *(_DWORD *)(a2 + v4 + 88);
      sub_1002A3054((char *)(v34 + 8), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      v14 = v34;
      v15 = *(_DWORD *)(a2 + v4 + 92);
      *(_WORD *)(v34 + 116) |= 0x40u;
      *(_DWORD *)(v14 + 96) = v15;
      v16 = v34;
      v17 = *(_DWORD *)(a2 + v4 + 96);
      *(_WORD *)(v34 + 116) |= 0x20u;
      *(_DWORD *)(v16 + 92) = v17;
      v18 = v34;
      v19 = *(_DWORD *)(a2 + v4 + 100);
      *(_WORD *)(v34 + 116) |= 0x100u;
      *(_DWORD *)(v18 + 104) = v19;
      v20 = v34;
      if (*(_DWORD *)(a2 + v4 + 104) == 2)
        v21 = 1;
      else
        v21 = 2;
      *(_WORD *)(v34 + 116) |= 0x10u;
      *(_DWORD *)(v20 + 88) = v21;
      v22 = v34;
      v23 = *(_DWORD *)(v10 + 108);
      *(_WORD *)(v34 + 116) |= 0x200u;
      *(_DWORD *)(v22 + 108) = v23;
      v24 = v34;
      v25 = *(_QWORD *)(v10 + 112);
      *(_WORD *)(v34 + 116) |= 1u;
      *(_QWORD *)(v24 + 56) = v25;
      v26 = v34;
      v27 = *(double *)(v10 + 72);
      *(_WORD *)(v34 + 116) |= 8u;
      *(float *)(v26 + 84) = v27;
      v28 = v34;
      v29 = *(double *)(v10 + 120);
      *(_WORD *)(v34 + 116) |= 0x80u;
      *(float *)(v28 + 100) = v29;
      v30 = v34;
      LOBYTE(v25) = *(_BYTE *)(v10 + 143);
      *(_WORD *)(v34 + 116) |= 0x400u;
      *(_BYTE *)(v30 + 112) = v25;
      if (*(_BYTE *)(v10 + 140))
      {
        *(_QWORD *)&__src = *(_QWORD *)(a2 + v4 + 128);
        DWORD2(__src) = *(_DWORD *)(a2 + v4 + 136);
        sub_1002A3054((char *)(v34 + 32), (char *)&__src, (uint64_t)&__src + 12, 3uLL);
      }
      if (*(_BYTE *)(a2 + v4 + 142))
      {
        v31 = v34;
        v32 = *(unsigned __int8 *)(a2 + v4 + 141);
        *(_WORD *)(v34 + 116) |= 4u;
        *(_DWORD *)(v31 + 80) = v32;
      }
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v33);
      sub_1015EE304((PB::Base *)v33);
      v4 += 144;
    }
    while (v5 != v4);
  }
}

void sub_100BF0A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF0A44(uint64_t result)
{
  if (*(_BYTE *)(result + 1857))
    sub_10163B35C();
  return result;
}

void sub_100BF0B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  sub_1015EE304((PB::Base *)&a9);
  v11 = *(_QWORD *)(v9 - 24);
  *(_QWORD *)(v9 - 24) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF0B48(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char v7;
  _QWORD v8[112];
  uint64_t v9;
  char v10;

  if (*(_BYTE *)(result + 1915))
  {
    sub_1015EB864(v8);
    v3 = *(_QWORD *)(a2 + 16);
    v10 |= 1u;
    v8[77] = v3;
    sub_101603E30((uint64_t)v8);
    v4 = v9;
    v5 = (double)*(unint64_t *)a2 / 1000000.0;
    *(_BYTE *)(v9 + 20) |= 1u;
    *(double *)(v4 + 8) = v5;
    v6 = v9;
    v7 = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(v9 + 20) |= 2u;
    *(_BYTE *)(v6 + 16) = v7;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v8);
    return sub_1015EE304((PB::Base *)v8);
  }
  return result;
}

void sub_100BF0C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF0C3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  CFAbsoluteTime Current;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[48];
  uint64_t v9;
  CFAbsoluteTime v10;
  char v11;

  v2 = *a2;
  v3 = *((_DWORD *)a2 + 2);
  sub_1015EB864(v8);
  sub_101603854((uint64_t)v8);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  v10 = Current;
  v5 = v9;
  *(_BYTE *)(v9 + 20) |= 1u;
  *(_QWORD *)(v5 + 8) = v2;
  v6 = v9;
  *(_BYTE *)(v9 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = v3;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BF0D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF0D1C(uint64_t a1, float *a2)
{
  CFAbsoluteTime Current;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  int v19;
  SystemSoundID v20;
  _QWORD v22[177];
  uint64_t v23;
  char v24;

  sub_1015EB864(v22);
  sub_101604538((uint64_t)v22);
  Current = CFAbsoluteTimeGetCurrent();
  v24 |= 1u;
  *(CFAbsoluteTime *)&v22[77] = Current;
  v5 = v23;
  v6 = *(_QWORD *)a2;
  *(_WORD *)(v23 + 68) |= 1u;
  *(_QWORD *)(v5 + 8) = v6;
  v7 = v23;
  v8 = a2[2];
  if (!*((_BYTE *)a2 + 20))
    v8 = NAN;
  *(_WORD *)(v23 + 68) |= 2u;
  *(float *)(v7 + 16) = v8;
  v9 = v23;
  v10 = a2[3];
  if (!*((_BYTE *)a2 + 21))
    v10 = NAN;
  *(_WORD *)(v23 + 68) |= 4u;
  *(float *)(v9 + 20) = v10;
  v11 = v23;
  v12 = a2[4];
  if (!*((_BYTE *)a2 + 22))
    v12 = NAN;
  *(_WORD *)(v23 + 68) |= 8u;
  *(float *)(v11 + 24) = v12;
  v13 = v23;
  v14 = a2[6];
  if (!*((_BYTE *)a2 + 36))
    v14 = NAN;
  *(_WORD *)(v23 + 68) |= 0x10u;
  *(float *)(v13 + 28) = v14;
  v15 = v23;
  v16 = a2[7];
  if (!*((_BYTE *)a2 + 37))
    v16 = NAN;
  *(_WORD *)(v23 + 68) |= 0x20u;
  *(float *)(v15 + 32) = v16;
  v17 = v23;
  v18 = a2[8];
  if (!*((_BYTE *)a2 + 38))
    v18 = NAN;
  *(_WORD *)(v23 + 68) |= 0x40u;
  *(float *)(v17 + 36) = v18;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v22);
  if (*(_BYTE *)(a1 + 1957))
  {
    v19 = *((unsigned __int8 *)a2 + 39);
    if (*(unsigned __int8 *)(a1 + 832) != v19)
    {
      if (v19 == 1)
      {
        v20 = 1430;
      }
      else
      {
        if (v19 != 2)
        {
LABEL_24:
          *(_BYTE *)(a1 + 832) = *((_BYTE *)a2 + 39);
          return sub_1015EE304((PB::Base *)v22);
        }
        v20 = 1547;
      }
      AudioServicesPlaySystemSound(v20);
      goto LABEL_24;
    }
  }
  return sub_1015EE304((PB::Base *)v22);
}

void sub_100BF0EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BF0F0C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  CFAbsoluteTime Current;
  uint64_t v6;
  CFAbsoluteTime v7;
  uint64_t v8;
  uint64_t v9;
  CFAbsoluteTime v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  CFAbsoluteTime v22;
  uint64_t v23;
  char v24;
  CFAbsoluteTime v25;
  uint64_t v26;
  char v27;
  CFAbsoluteTime v28;
  uint64_t v29;
  char v30;
  __n128 v31;
  char v32;
  size_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFAbsoluteTime v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __n128 __p;
  char v43;

  switch(*a3)
  {
    case 2:
      sub_1015EB864(v34);
      Current = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      v38 = Current;
      sub_101603C3C((uint64_t)v34);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v6 = qword_1023118B0;
      if (!qword_1023118B0)
        goto LABEL_31;
      goto LABEL_30;
    case 3:
      sub_1015EB864(v34);
      v7 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      v38 = v7;
      sub_101603CA0((uint64_t)v34);
      v8 = v35;
      sub_1015A2E04(&__p, "Unknown");
      sub_100AB85CC(v8, &__p);
      if (v43 < 0)
        operator delete((void *)__p.n128_u64[0]);
      v33 = 0;
      if ((sysctlbyname("kern.wakereason", &__p, &v33, 0, 0) & 0x80000000) == 0)
      {
        v9 = v35;
        sub_1015A2E04(&v31, (char *)&__p);
        sub_100AB85CC(v9, &v31);
        if (v32 < 0)
          operator delete((void *)v31.n128_u64[0]);
      }
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v34);
      goto LABEL_31;
    case 7:
      sub_1015EB864(v34);
      v10 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      v38 = v10;
      sub_1016039E4((uint64_t)v34);
      v11 = v37;
      v12 = *a4;
      *(_BYTE *)(v37 + 28) |= 1u;
      *(_QWORD *)(v11 + 8) = v12;
      v13 = v37;
      v14 = *((_BYTE *)a4 + 8);
      *(_BYTE *)(v37 + 28) |= 8u;
      *(_BYTE *)(v13 + 24) = v14;
      v15 = v37;
      v16 = *((_BYTE *)a4 + 9);
      *(_BYTE *)(v37 + 28) |= 0x10u;
      *(_BYTE *)(v15 + 25) = v16;
      v17 = v37;
      v18 = *((_DWORD *)a4 + 3);
      *(_BYTE *)(v37 + 28) |= 4u;
      *(_DWORD *)(v17 + 20) = v18;
      v19 = v37;
      LOBYTE(v18) = *((_BYTE *)a4 + 16);
      *(_BYTE *)(v37 + 28) |= 0x20u;
      *(_BYTE *)(v19 + 26) = v18;
      v20 = v37;
      v21 = *((_DWORD *)a4 + 5);
      *(_BYTE *)(v37 + 28) |= 2u;
      *(_DWORD *)(v20 + 16) = v21;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v6 = qword_1023118B0;
      if (qword_1023118B0)
        goto LABEL_30;
      goto LABEL_31;
    case 0xA:
      sub_1015EB864(v34);
      v22 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      v38 = v22;
      sub_101603BD8((uint64_t)v34);
      v23 = v39;
      v24 = *(_BYTE *)a4;
      *(_BYTE *)(v39 + 12) |= 1u;
      *(_BYTE *)(v23 + 8) = v24;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v6 = qword_1023118B0;
      if (qword_1023118B0)
        goto LABEL_30;
      goto LABEL_31;
    case 0xB:
      sub_1015EB864(v34);
      v25 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      v38 = v25;
      sub_101603A48((uint64_t)v34);
      v26 = v40;
      v27 = *(_BYTE *)a4;
      *(_BYTE *)(v40 + 12) |= 1u;
      *(_BYTE *)(v26 + 8) = v27;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v6 = qword_1023118B0;
      if (qword_1023118B0)
        goto LABEL_30;
      goto LABEL_31;
    case 0xF:
      sub_1015EB864(v34);
      v28 = CFAbsoluteTimeGetCurrent();
      v41 |= 1u;
      v38 = v28;
      sub_101603AAC((uint64_t)v34);
      v29 = v36;
      v30 = *(_BYTE *)a4;
      *(_BYTE *)(v36 + 12) |= 1u;
      *(_BYTE *)(v29 + 8) = v30;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021788C8);
      v6 = qword_1023118B0;
      if (qword_1023118B0)
LABEL_30:
        sub_101888B64(v6, (uint64_t)v34);
LABEL_31:
      sub_1015EE304((PB::Base *)v34);
      break;
    default:
      return;
  }
}

void sub_100BF1368(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1418(uint64_t a1, uint64_t *a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[367];
  uint64_t v9;
  char v10;

  sub_1015EB864(v8);
  sub_1016034D0((uint64_t)v8);
  Current = CFAbsoluteTimeGetCurrent();
  v10 |= 1u;
  *(CFAbsoluteTime *)&v8[77] = Current;
  v4 = v9;
  LODWORD(Current) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(v9 + 20) |= 2u;
  *(_DWORD *)(v4 + 16) = LODWORD(Current);
  v5 = v9;
  v6 = *a2;
  *(_BYTE *)(v9 + 20) |= 1u;
  *(_QWORD *)(v5 + 8) = v6;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BF14DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF14F4(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[327];
  uint64_t v17;
  char v18;

  sub_1015EB864(v16);
  sub_101603EF8((uint64_t)v16);
  Current = CFAbsoluteTimeGetCurrent();
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = Current;
  v4 = v17;
  v5 = *(_QWORD *)(a2 + 9);
  *(_WORD *)(v17 + 48) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 23);
  *(_WORD *)(v17 + 48) |= 8u;
  *(_DWORD *)(v6 + 24) = LODWORD(Current);
  v7 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 27);
  *(_WORD *)(v17 + 48) |= 0x20u;
  *(_DWORD *)(v7 + 32) = LODWORD(Current);
  v8 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 31);
  *(_WORD *)(v17 + 48) |= 0x10u;
  *(_DWORD *)(v8 + 28) = LODWORD(Current);
  v9 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 35);
  *(_WORD *)(v17 + 48) |= 2u;
  *(_DWORD *)(v9 + 16) = LODWORD(Current);
  v10 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 39);
  *(_WORD *)(v17 + 48) |= 0x40u;
  *(_DWORD *)(v10 + 36) = LODWORD(Current);
  v11 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 43);
  *(_WORD *)(v17 + 48) |= 4u;
  *(_DWORD *)(v11 + 20) = LODWORD(Current);
  v12 = v17;
  LODWORD(Current) = *(_DWORD *)(a2 + 19);
  *(_WORD *)(v17 + 48) |= 0x80u;
  *(_DWORD *)(v12 + 40) = LODWORD(Current);
  v13 = v17;
  LOBYTE(v5) = *(_BYTE *)(a2 + 17);
  *(_WORD *)(v17 + 48) |= 0x200u;
  *(_BYTE *)(v13 + 45) = v5;
  v14 = v17;
  LOBYTE(v5) = *(_BYTE *)(a2 + 18);
  *(_WORD *)(v17 + 48) |= 0x100u;
  *(_BYTE *)(v14 + 44) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v16);
  return sub_1015EE304((PB::Base *)v16);
}

void sub_100BF1678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1690(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[38];
  uint64_t v9;
  CFAbsoluteTime v10;
  char v11;

  sub_1015EB864(v8);
  sub_101603FC0((uint64_t)v8);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  v10 = Current;
  v4 = v9;
  v5 = *(_QWORD *)(a2 + 12);
  *(_BYTE *)(v9 + 20) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v9;
  LODWORD(Current) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(v9 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = LODWORD(Current);
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v8);
  return sub_1015EE304((PB::Base *)v8);
}

void sub_100BF1754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BF176C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  CFAbsoluteTime Current;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[50];
  uint64_t v11;
  CFAbsoluteTime v12;
  char v13;

  if (!*a3)
  {
    sub_1015EB864(v10);
    sub_101604218((uint64_t)v10);
    Current = CFAbsoluteTimeGetCurrent();
    v13 |= 1u;
    v12 = Current;
    v6 = v11;
    v7 = *a4;
    *(_BYTE *)(v11 + 28) |= 1u;
    *(_DWORD *)(v6 + 24) = v7;
    v8 = v11;
    sub_100AB8834(v11);
    std::string::operator=(*(std::string **)(v8 + 8), (const std::string *)(a4 + 2));
    v9 = v11;
    sub_100BF2E38(v11);
    std::string::operator=(*(std::string **)(v9 + 16), (const std::string *)(a4 + 8));
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)v10);
    sub_1015EE304((PB::Base *)v10);
  }
}

void sub_100BF1858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1870(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[406];
  uint64_t v19;
  char v20;

  sub_1015EB864(v18);
  sub_101603D04((uint64_t)v18);
  Current = CFAbsoluteTimeGetCurrent();
  v20 |= 1u;
  *(CFAbsoluteTime *)&v18[77] = Current;
  v4 = v19;
  v5 = *(_QWORD *)(a2 + 9);
  *(_DWORD *)(v19 + 84) |= 1u;
  *(_QWORD *)(v4 + 8) = v5;
  v6 = v19;
  LOBYTE(v5) = *(_BYTE *)(a2 + 17);
  *(_DWORD *)(v19 + 84) |= 0x20000u;
  *(_BYTE *)(v6 + 80) = v5;
  v7 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 18);
  *(_DWORD *)(v19 + 84) |= 4u;
  *(_DWORD *)(v7 + 20) = v5;
  v8 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 20);
  *(_DWORD *)(v19 + 84) |= 0x2000u;
  *(_DWORD *)(v8 + 64) = v5;
  v9 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 21);
  *(_DWORD *)(v19 + 84) |= 0x1000u;
  *(_DWORD *)(v9 + 60) = v5;
  v10 = v19;
  LOBYTE(v5) = *(_BYTE *)(a2 + 22);
  *(_DWORD *)(v19 + 84) |= 0x40000u;
  *(_BYTE *)(v10 + 81) = v5;
  v11 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 23);
  *(_DWORD *)(v19 + 84) |= 0x200u;
  *(_DWORD *)(v11 + 48) = LODWORD(Current);
  v12 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 35);
  *(_DWORD *)(v19 + 84) |= 0x10000u;
  *(_DWORD *)(v12 + 76) = LODWORD(Current);
  v13 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 39);
  *(_DWORD *)(v19 + 84) |= 0x4000u;
  *(_DWORD *)(v13 + 68) = LODWORD(Current);
  v14 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 43);
  *(_DWORD *)(v19 + 84) |= 0x8000u;
  *(_DWORD *)(v14 + 72) = LODWORD(Current);
  v15 = v19;
  LODWORD(Current) = *(_DWORD *)(a2 + 47);
  *(_DWORD *)(v19 + 84) |= 0x40u;
  *(_DWORD *)(v15 + 36) = LODWORD(Current);
  v16 = v19;
  LODWORD(v5) = *(unsigned __int8 *)(a2 + 19);
  *(_DWORD *)(v19 + 84) |= 2u;
  *(_DWORD *)(v16 + 16) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v18);
  return sub_1015EE304((PB::Base *)v18);
}

void sub_100BF1A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1A3C(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  _QWORD v9[268];
  uint64_t v10;
  char v11;

  sub_1015EB864(v9);
  sub_101605BE0((uint64_t)v9);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  v4 = v10;
  v5 = (double)*(unint64_t *)(a2 + 10) / 1000000.0;
  *(_BYTE *)(v10 + 20) |= 1u;
  *(double *)(v4 + 8) = v5;
  v6 = v10;
  v7 = *(unsigned __int8 *)(a2 + 9);
  *(_BYTE *)(v10 + 20) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_100BF1B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1B28(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  _QWORD v25[94];
  uint64_t v26;
  char v27;

  sub_1015EB864(v25);
  sub_101605B7C((uint64_t)v25);
  sub_1015D1C30(v26);
  Current = CFAbsoluteTimeGetCurrent();
  v27 |= 1u;
  *(CFAbsoluteTime *)&v25[77] = Current;
  v4 = *(_QWORD *)(v26 + 8);
  v5 = (double)*(unint64_t *)(a2 + 49) / 1000000.0;
  *(_DWORD *)(v4 + 124) |= 0x10u;
  *(double *)(v4 + 40) = v5;
  v6 = *(_QWORD *)(v26 + 8);
  v7 = *(float *)(a2 + 9);
  *(_DWORD *)(v6 + 124) |= 2u;
  *(double *)(v6 + 16) = v7;
  v8 = *(_QWORD *)(v26 + 8);
  v9 = *(float *)(a2 + 13);
  *(_DWORD *)(v8 + 124) |= 4u;
  *(double *)(v8 + 24) = v9;
  v10 = *(_QWORD *)(v26 + 8);
  v11 = *(float *)(a2 + 17);
  *(_DWORD *)(v10 + 124) |= 8u;
  *(double *)(v10 + 32) = v11;
  v12 = *(_QWORD *)(v26 + 8);
  v13 = *(float *)(a2 + 21);
  *(_DWORD *)(v12 + 124) |= 1u;
  *(double *)(v12 + 8) = v13;
  v14 = *(_QWORD *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 37);
  *(_DWORD *)(v14 + 124) |= 0x40000u;
  *(_DWORD *)(v14 + 100) = LODWORD(v13);
  v15 = *(_QWORD *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 41);
  *(_DWORD *)(v15 + 124) |= 0x80000u;
  *(_DWORD *)(v15 + 104) = LODWORD(v13);
  v16 = *(_QWORD *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 45);
  *(_DWORD *)(v16 + 124) |= 0x100000u;
  *(_DWORD *)(v16 + 108) = LODWORD(v13);
  v17 = *(_QWORD *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 25);
  *(_DWORD *)(v17 + 124) |= 0x2000u;
  *(_DWORD *)(v17 + 80) = LODWORD(v13);
  v18 = *(_QWORD *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 29);
  *(_DWORD *)(v18 + 124) |= 0x4000u;
  *(_DWORD *)(v18 + 84) = LODWORD(v13);
  v19 = *(_QWORD *)(v26 + 8);
  LODWORD(v13) = *(_DWORD *)(a2 + 33);
  *(_DWORD *)(v19 + 124) |= 0x8000u;
  *(_DWORD *)(v19 + 88) = LODWORD(v13);
  v20 = v26;
  v21 = *(_BYTE *)(a2 + 57);
  *(_BYTE *)(v26 + 20) |= 1u;
  *(_BYTE *)(v20 + 16) = v21;
  v22 = v26;
  v23 = *(_BYTE *)(a2 + 58);
  *(_BYTE *)(v26 + 20) |= 2u;
  *(_BYTE *)(v22 + 17) = v23;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v25);
  return sub_1015EE304((PB::Base *)v25);
}

void sub_100BF1D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1D60()
{
  CFAbsoluteTime Current;
  _QWORD v2[452];
  char v3;

  sub_1015EB864(v2);
  sub_101603214((uint64_t)v2);
  Current = CFAbsoluteTimeGetCurrent();
  v3 |= 1u;
  *(CFAbsoluteTime *)&v2[77] = Current;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v2);
  return sub_1015EE304((PB::Base *)v2);
}

void sub_100BF1DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF1E08(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFAbsoluteTime v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  int v14;
  _QWORD v16[225];
  uint64_t v17;
  char v18;
  _QWORD v19[11];
  uint64_t v20;
  CFAbsoluteTime v21;
  char v22;

  sub_1015EB864(v19);
  Current = CFAbsoluteTimeGetCurrent();
  v22 |= 1u;
  v21 = Current;
  sub_101602A44((uint64_t)v19);
  v4 = v20;
  *(_BYTE *)(v20 + 32) |= 2u;
  *(_DWORD *)(v4 + 24) = 995511;
  sub_1015A5F74(v20);
  v5 = *(_QWORD *)(v20 + 8);
  v6 = (double)*(unint64_t *)a2 * 0.000001;
  *(_BYTE *)(v5 + 32) |= 1u;
  *(double *)(v5 + 8) = v6;
  v7 = *(_QWORD *)(v20 + 8);
  LODWORD(v6) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(v7 + 32) |= 4u;
  *(_DWORD *)(v7 + 20) = LODWORD(v6);
  v8 = *(_QWORD *)(v20 + 8);
  LODWORD(v6) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(v8 + 32) |= 8u;
  *(_DWORD *)(v8 + 24) = LODWORD(v6);
  v9 = *(_QWORD *)(v20 + 8);
  LODWORD(v6) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(v9 + 32) |= 0x10u;
  *(_DWORD *)(v9 + 28) = LODWORD(v6);
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v19);
  sub_1015EB864(v16);
  sub_101603F5C((uint64_t)v16);
  v10 = CFAbsoluteTimeGetCurrent();
  v18 |= 1u;
  *(CFAbsoluteTime *)&v16[77] = v10;
  v11 = v17;
  v12 = (double)*(unint64_t *)a2;
  *(_BYTE *)(v17 + 20) |= 1u;
  *(double *)(v11 + 8) = v12;
  v13 = v17;
  v14 = *(unsigned __int8 *)(a2 + 22);
  *(_BYTE *)(v17 + 20) |= 2u;
  *(_DWORD *)(v13 + 16) = v14;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v16);
  sub_1015EE304((PB::Base *)v16);
  return sub_1015EE304((PB::Base *)v19);
}

void sub_100BF1FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  sub_1015EE304((PB::Base *)&STACK[0xE28]);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF2024(uint64_t a1, char *a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  char v5;
  _QWORD v7[223];
  uint64_t v8;
  char v9;

  sub_1015EB864(v7);
  sub_101604024((uint64_t)v7);
  Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  v4 = v8;
  v5 = *a2;
  *(_BYTE *)(v8 + 20) |= 2u;
  *(_BYTE *)(v4 + 16) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v7);
  return sub_1015EE304((PB::Base *)v7);
}

void sub_100BF20D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF20E8(uint64_t a1, char *a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  char v5;
  _QWORD v7[226];
  uint64_t v8;
  char v9;

  sub_1015EB864(v7);
  sub_101604150((uint64_t)v7);
  Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  v4 = v8;
  v5 = *a2;
  *(_BYTE *)(v8 + 20) |= 2u;
  *(_BYTE *)(v4 + 16) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v7);
  return sub_1015EE304((PB::Base *)v7);
}

void sub_100BF2194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF21AC(uint64_t a1, char *a2)
{
  CFAbsoluteTime Current;
  uint64_t v4;
  char v5;
  _QWORD v7[222];
  uint64_t v8;
  char v9;

  sub_1015EB864(v7);
  sub_1016041B4((uint64_t)v7);
  Current = CFAbsoluteTimeGetCurrent();
  v9 |= 1u;
  *(CFAbsoluteTime *)&v7[77] = Current;
  v4 = v8;
  v5 = *a2;
  *(_BYTE *)(v8 + 20) |= 2u;
  *(_BYTE *)(v4 + 16) = v5;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021788C8);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v7);
  return sub_1015EE304((PB::Base *)v7);
}

void sub_100BF2258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100BF2270(unsigned __int8 *a1)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  unsigned __int8 v5;
  uint64_t v6;

  LOBYTE(v6) = 0;
  v2 = sub_1018BF25C(a1, "MotionLoggerHoldPowerAssertion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(v2 + 3, "MotionLoggerHoldIndependenceAssertion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 6, "MotionLoggerOnlyLogSensorsInSession", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 9, "MotionLoggerLogWorkoutEvents", (unsigned __int8 *)&v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 16, "MotionLoggerAccelerometerLoggingInterval", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 40, "MotionLoggerHALoggingInterval", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 64, "MotionLoggerGyroLoggingInterval", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 88, "MotionLoggerMagnetometerLoggingInterval", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 112, "MotionLoggerPressureLoggingInterval", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 136, "MotionLoggerDeviceMotionLoggingInterval", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 160, "MotionLoggerAccessoryAccelerometerLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_1018C1A0C(a1 + 184, "MotionLoggerAccessoryAccelerometerBufferSize", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 196, "MotionLoggerAccessoryMonitor", (unsigned __int8 *)&v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 200, "MotionLoggerAccessoryProximityLoggingInterval", &v6, 0);
  LODWORD(v6) = 20;
  sub_1018C1A0C(a1 + 224, "MotionLoggerAccessoryProximityBufferSize", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 240, "MotionLoggerAccessoryGyroLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_1018C1A0C(a1 + 264, "MotionLoggerAccessoryGyroBufferSize", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 280, "MotionLoggerAccessoryMagnetometerLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_1018C1A0C(a1 + 304, "MotionLoggerAccessoryMagnetometerBufferSize", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 320, "MotionLoggerAccessoryDeviceMotionLoggingInterval", &v6, 0);
  LODWORD(v6) = 20;
  sub_1018C1A0C(a1 + 344, "MotionLoggerAccessoryDeviceMotionBufferSize", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 356, "MotionLoggerAccessoryDeviceMotionLowLatency", (unsigned __int8 *)&v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 360, "MotionLoggerAccessoryHeartRateLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_1018C1A0C(a1 + 384, "MotionLoggerAccessoryHeartRateBufferSize", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 400, "MotionLoggerAccessoryPPGLoggingInterval", &v6, 0);
  LODWORD(v6) = 30;
  sub_1018C1A0C(a1 + 424, "MotionLoggerAccessoryPPGBufferSize", &v6, 0);
  LODWORD(v6) = 0;
  sub_1004AD1D8(a1 + 436, "MotionLoggerLogDeviceMotionVariant", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 448, "MotionLoggerLogElevationChangeEntryActive", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 451, "MotionLoggerLogElevationChangeEntrySpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 454, "MotionLoggerLogCoarseElevationChange", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 457, "MotionLoggerLogHeartRateSpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 460, "MotionLoggerLogBTVehicleConnections", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 0;
  sub_1004AD1D8(a1 + 464, "MotionLoggerLogRawGPS", &v6, 0);
  LODWORD(v6) = 6;
  sub_1004AD1D8(a1 + 476, "MotionLoggerCoarseGPSScalingFactor", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 488, "MotionLoggerLogWifiLocation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 491, "MotionLoggerLogSourceAgnosticLocations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 494, "MotionLogBufferedOdometerLocations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 497, "MotionLoggerLogBodyMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 500, "MotionLoggerLogOdometerSpectator", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 503, "MotionLoggerLogMotionState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 506, "MotionLoggerLogBasebandSpeed", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 509, "MotionLoggerLogMotionStateHints", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 512, "MotionLoggerLogWatchOrientationSettings", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 515, "MotionLoggerLogATVRemoteDebug", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 518, "MotionLoggerLogWifiAssociation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 521, "MotionLoggerLogWifiScan", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 524, "MotionLoggerEnableActiveWifiScans", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 527, "MotionLoggerLogLois", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 530, "MotionLoggerHashLois", (unsigned __int8 *)&v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 536, "MotionLoggerPostWorkoutLoggingInterval", &v6, 0);
  LOBYTE(v6) = 1;
  sub_1018BF25C(a1 + 560, "MotionLoggerLogPencilDebug", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 563, "MotionLoggerLogPencilMotion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 566, "MotionLoggerLogPedometer", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 569, "MotionLoggerLogSignalEnvironment", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 572, "MotionLoggerLogGnssAvailabilityPredictor", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 575, "MotionLoggerLogGnssLeechLocation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 578, "MotionLoggerLogMapsRouteHint", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 581, "MotionLoggerLogMobilityBoutMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 584, "MotionLoggerLogSPUGaitMetrics", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 587, "MotionLoggerLogVisualLocalizations", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 590, "MotionLoggerLogALSUpdates", (unsigned __int8 *)&v6, 0);
  v5 = 0;
  sub_1018BF25C((unsigned __int8 *)&v6, "MotionLoggerEnableALSActiveScansAOP", &v5, 0);
  if (BYTE1(v6))
  {
    sub_100197040();
    v3 = sub_100761B14();
  }
  else
  {
    v3 = 0;
  }
  a1[593] = v3;
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 594, "MotionLoggerLogALSUpdatesAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 597, "MotionLoggerLogBatteryUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 600, "MotionLoggerLogScreenLockUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 603, "MotionLoggerLogBatterySaverModeUpdates", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 606, "MotionLoggerLogPowerManagementUserActivity", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 609, "MotionLoggerLogFocusModes", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 612, "MotionLoggerLogDisplayState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 615, "MotionLoggerLogAPSleeps", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 618, "MotionLoggerLogAPWakes", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 621, "MotionLoggerLogBasebandCompassCoex", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 624, "MotionLoggerLogGaitEvents", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 627, "MotionLoggerLogMagneticAccessories", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 630, "MotionLoggerLogWalkingSteadinessClassification", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 633, "MotionLoggerLogRunningForm", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 636, "MotionLoggerSPLLoggingInterval", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 639, "MotionLoggerLogRunningPower", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 642, "MotionLoggerLogFaceCovered", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 645, "MotionLoggerLogProxPDP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 648, "MotionLoggerLogALSAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 651, "MotionLoggerLogBacklightState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 654, "MotionLoggerLogViewObstructedState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 657, "MotionLoggerLogOrientation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 660, "MotionLoggerLogDeviceMotionAlwaysOn", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 663, "MotionLoggerLogSignificantUserInteraction", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 666, "EnableVehicleDetectionAlerts", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 669, "MotionLoggerLogAverageALSAOP", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 672, "MotionLoggerLogKeyboardMotion", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 675, "MotionLoggerLogGnssModeOfOperation", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 678, "MotionLoggerFitnessMachineData", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 681, "EnablePedestrianFenceNotifications", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 684, "EnableDisplacingStateNotifications", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 5;
  sub_1004AD1D8(a1 + 688, "DurationActivityAlarmStatic", &v6, 0);
  LODWORD(v6) = 3;
  sub_1004AD1D8(a1 + 700, "RadiusPedestrianFence", &v6, 0);
  v6 = 0;
  sub_1018BEA14(a1 + 712, "MotionLoggerInertialOdometryLoggingInterval", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 736, "MotionLoggerLogBackgroundInertialOdometry", (unsigned __int8 *)&v6, 0);
  LODWORD(v6) = 1;
  sub_1004AD1D8(a1 + 740, "MotionLoggerBackgroundInertialOdometryReferenceFrame", &v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 752, "MotionLoggerLogWakeGesture", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 755, "MotionLoggerLogHapticModuleState", (unsigned __int8 *)&v6, 0);
  LOBYTE(v6) = 0;
  sub_1018BF25C(a1 + 758, "MotionLoggerLogPostureSkeleton", (unsigned __int8 *)&v6, 0);
  return a1;
}

void sub_100BF2DDC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100BF2E0C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100BF2E38(uint64_t result)
{
  if (!*(_QWORD *)(result + 16))
    operator new();
  return result;
}

void sub_100BF2E98(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100BF2EC4(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_100BF2EF0(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

void sub_100BF2F1C(id a1)
{
  qword_10229FF88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_100BF2F48(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100BF2F74(id a1)
{
  qword_10229FD08 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WakeGesture");
}

void sub_100BF2FA0(id a1)
{
  qword_10229FF78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

__n128 sub_100BF2FCC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100BF36F4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_100BF3058(const void *a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  NSObject *v24;
  CFAbsoluteTime Current;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v38;
  CFAbsoluteTime v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;

  cf = a1;
  v3 = (_QWORD *)(qword_102307228 + 8 * ((unint64_t)xmmword_102307240 >> 7));
  if (*(_QWORD *)algn_102307230 == qword_102307228)
  {
    v4 = 0;
    v6 = 0;
    v5 = (_QWORD **)(qword_102307228 + 8 * ((*((_QWORD *)&xmmword_102307240 + 1) + (_QWORD)xmmword_102307240) >> 7));
  }
  else
  {
    v4 = (_QWORD *)(*v3 + 32 * (xmmword_102307240 & 0x7F));
    v5 = (_QWORD **)(qword_102307228 + 8 * ((*((_QWORD *)&xmmword_102307240 + 1) + (_QWORD)xmmword_102307240) >> 7));
    v6 = &(*v5)[4 * ((*((_QWORD *)&xmmword_102307240 + 1) + xmmword_102307240) & 0x7F)];
  }
  sub_100BF3A9C(v3, v4, v5, v6, &cf);
  v8 = v7;
  if (*(_QWORD *)algn_102307230 == qword_102307228)
    v9 = 0;
  else
    v9 = *(_QWORD *)(qword_102307228
                   + (((*((_QWORD *)&xmmword_102307240 + 1) + (_QWORD)xmmword_102307240) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*((_QWORD *)&xmmword_102307240 + 1) + xmmword_102307240) & 0x7F);
  if (v9 == v7)
  {
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v15 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "PedestrianFenceNotification,no timestamp", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_1021789C8);
      LOWORD(v42) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 16, "PedestrianFenceNotification,no timestamp", &v42, 2);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v10 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v38 = *((_QWORD *)&xmmword_102307240 + 1);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dropping PedestrianFencePendingNotification, queue size, %lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_1021789C8);
      v42 = 134217984;
      v43 = *((_QWORD *)&xmmword_102307240 + 1);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "Dropping PedestrianFencePendingNotification, queue size, %lu", &v42);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    CFRelease(cf);
    v11 = (_QWORD *)(qword_102307228 + 8 * ((unint64_t)xmmword_102307240 >> 7));
    if (*(_QWORD *)algn_102307230 == qword_102307228)
    {
      v12 = 0;
      v14 = 0;
      v13 = (_QWORD **)(qword_102307228 + 8 * ((*((_QWORD *)&xmmword_102307240 + 1) + (_QWORD)xmmword_102307240) >> 7));
    }
    else
    {
      v12 = (_QWORD *)(*v11 + 32 * (xmmword_102307240 & 0x7F));
      v13 = (_QWORD **)(qword_102307228 + 8 * ((*((_QWORD *)&xmmword_102307240 + 1) + (_QWORD)xmmword_102307240) >> 7));
      v14 = &(*v13)[4 * ((*((_QWORD *)&xmmword_102307240 + 1) + xmmword_102307240) & 0x7F)];
    }
    v19 = (char *)sub_100BF3A08(v11, v12, v13, v14, &cf);
    v20 = (char *)(qword_102307228 + 8 * (((_QWORD)xmmword_102307240 + *((_QWORD *)&xmmword_102307240 + 1)) >> 7));
    if (*(_QWORD *)algn_102307230 == qword_102307228)
      v21 = 0;
    else
      v21 = *(_QWORD *)v20 + 32 * (((_BYTE)xmmword_102307240 + BYTE8(xmmword_102307240)) & 0x7F);
    sub_1000D9878(&qword_102307220, v19, v18, v20, v21);
    if ((a2 & 3) == 2)
      v22 = 0;
    else
      v22 = -1;
    if ((a2 & 3) == 1)
      v23 = 1;
    else
      v23 = v22;
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_1021789C8);
    v24 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v38) = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "PedestrianFenceNotification,Exit,user response,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_1021789C8);
      v42 = 67109120;
      LODWORD(v43) = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 0, "PedestrianFenceNotification,Exit,user response,%d", &v42);
      v35 = (uint8_t *)v34;
      sub_100512490("Generic", 1, 0, 2, "void pedestrianFenceNotificationHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v34);
      if (v35 != buf)
        free(v35);
    }
    sub_1015EB864(buf);
    sub_1016044D4((uint64_t)buf);
    Current = CFAbsoluteTimeGetCurrent();
    v41 |= 1u;
    v39 = Current;
    v26 = v40;
    v27 = *(_QWORD *)(v8 + 8);
    *(_BYTE *)(v40 + 32) |= 2u;
    *(_QWORD *)(v26 + 16) = v27;
    v28 = v40;
    v29 = *(_QWORD *)(v8 + 16);
    *(_BYTE *)(v40 + 32) |= 1u;
    *(_QWORD *)(v28 + 8) = v29;
    v30 = v40;
    LODWORD(v29) = *(_DWORD *)(v8 + 24);
    *(_BYTE *)(v40 + 32) |= 4u;
    *(_DWORD *)(v30 + 24) = v29;
    v31 = v40;
    *(_BYTE *)(v40 + 32) |= 8u;
    *(_DWORD *)(v31 + 28) = v23;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021788C8);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
}

void sub_100BF36D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_100BF36F4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100BF39BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_100BF3A08(_QWORD *a1, _QWORD *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *result;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;

  result = sub_100BF3A9C(a1, a2, a3, a4, a5);
  if (v8 != (_OWORD *)a4)
  {
    v9 = v8;
    v10 = result;
    while (1)
    {
      v9 += 2;
      if ((_OWORD *)((char *)v9 - *v10) == (_OWORD *)4096)
      {
        v11 = (_OWORD *)v10[1];
        ++v10;
        v9 = v11;
      }
      if (v9 == (_OWORD *)a4)
        break;
      if (*(_QWORD *)v9 != *a5)
      {
        v12 = v9[1];
        *v8 = *v9;
        v8[1] = v12;
        v8 += 2;
        if ((_OWORD *)((char *)v8 - *result) == (_OWORD *)4096)
        {
          v13 = (_OWORD *)result[1];
          ++result;
          v8 = v13;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_100BF3A9C(_QWORD *result, _QWORD *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  if (result == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        a2 += 4;
        if (a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }
    if (result && (_QWORD *)(*result + 4096) == a2)
      ++result;
  }
  else
  {
    v5 = *result + 4096;
    if ((_QWORD *)v5 == a2)
      goto LABEL_14;
    while (*a2 != *a5)
    {
      a2 += 4;
      if (a2 == (_QWORD *)v5)
        goto LABEL_14;
    }
    if (a2 == (_QWORD *)v5)
    {
LABEL_14:
      v6 = result + 1;
      if (result + 1 == a3)
      {
        v8 = result;
      }
      else
      {
        do
        {
          v7 = 0;
          v8 = v6;
          v9 = *v6;
          do
          {
            if (*(_QWORD *)(v9 + v7) == *a5)
              return v8;
            v7 += 32;
          }
          while (v7 != 4096);
          v6 = v8 + 1;
        }
        while (v8 + 1 != a3);
      }
      if (*a3 == a4)
      {
        return a3;
      }
      else
      {
        v10 = *a3;
        while (*v10 != *a5)
        {
          v10 += 4;
          if (v10 == a4)
          {
            v10 = a4;
            break;
          }
        }
        result = a3;
        if (*a3 + 512 == v10)
          return v8 + 2;
      }
    }
  }
  return result;
}

void sub_100BF3BDC(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

__n128 sub_100BF3C08(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100BF3CA0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_100BF3C90(const void *a1, char a2)
{
  sub_100BF3FB4(a1, a2, 3);
}

void sub_100BF3C98(const void *a1, char a2)
{
  sub_100BF3FB4(a1, a2, 2);
}

void sub_100BF3CA0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100BF3F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100BF3FB4(const void *a1, char a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD **v18;
  _QWORD *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  const __CFString *v27;
  NSMutableString *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  double v36;
  id v37;
  const void *v38;
  NSURL *v39;
  const char *v40;
  __n128 *v41;
  const char *v42;
  __n128 *v43;
  const char *v44;
  __n128 *v45;
  const char *v46;
  __n128 *v47;
  CFTypeRef cf;
  int v49;
  uint64_t v50;
  __n128 buf;
  char v52;
  uint8_t v53[616];
  CFAbsoluteTime v54;
  uint64_t v55;
  char v56;

  cf = a1;
  v5 = (_QWORD *)(qword_1023071F8 + 8 * ((unint64_t)xmmword_102307210 >> 8));
  if (unk_102307200 == qword_1023071F8)
  {
    v6 = 0;
    v8 = 0;
    v7 = (_QWORD **)(qword_1023071F8 + 8 * ((*((_QWORD *)&xmmword_102307210 + 1) + (_QWORD)xmmword_102307210) >> 8));
  }
  else
  {
    v6 = (_QWORD *)(*v5 + 16 * xmmword_102307210);
    v7 = (_QWORD **)(qword_1023071F8 + 8 * ((*((_QWORD *)&xmmword_102307210 + 1) + (_QWORD)xmmword_102307210) >> 8));
    v8 = &(*v7)[2 * (BYTE8(xmmword_102307210) + xmmword_102307210)];
  }
  sub_100BF4B4C(v5, v6, v7, v8, &cf);
  v10 = v9;
  if (unk_102307200 == qword_1023071F8)
    v11 = 0;
  else
    v11 = *(_QWORD *)(qword_1023071F8
                    + (((*((_QWORD *)&xmmword_102307210 + 1) + (_QWORD)xmmword_102307210) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (BYTE8(xmmword_102307210) + xmmword_102307210);
  if (v11 != v9)
  {
    sub_1015EB864(v53);
    sub_101603278((uint64_t)v53);
    Current = CFAbsoluteTimeGetCurrent();
    v56 |= 1u;
    v54 = Current;
    v13 = v55;
    v14 = *(_QWORD *)(v10 + 8);
    *(_BYTE *)(v55 + 24) |= 1u;
    *(_QWORD *)(v13 + 16) = v14;
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021789E8);
    v15 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
    {
      buf.n128_u32[0] = 134217984;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = *((_QWORD *)&xmmword_102307210 + 1);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] removing notification, size of pending deque, %lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v49 = 134217984;
      v50 = *((_QWORD *)&xmmword_102307210 + 1);
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] removing notification, size of pending deque, %lu", &v49);
      v41 = (__n128 *)v40;
      sub_100512490("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", v40);
      if (v41 != &buf)
        free(v41);
    }
    CFRelease(cf);
    v16 = (_QWORD *)(qword_1023071F8 + 8 * ((unint64_t)xmmword_102307210 >> 8));
    if (unk_102307200 == qword_1023071F8)
    {
      v17 = 0;
      v19 = 0;
      v18 = (_QWORD **)(qword_1023071F8 + 8 * ((*((_QWORD *)&xmmword_102307210 + 1) + (_QWORD)xmmword_102307210) >> 8));
    }
    else
    {
      v17 = (_QWORD *)(*v16 + 16 * xmmword_102307210);
      v18 = (_QWORD **)(qword_1023071F8 + 8 * ((*((_QWORD *)&xmmword_102307210 + 1) + (_QWORD)xmmword_102307210) >> 8));
      v19 = &(*v18)[2 * (BYTE8(xmmword_102307210) + xmmword_102307210)];
    }
    v24 = (char *)sub_100BF4AB8(v16, v17, v18, v19, &cf);
    v25 = (char *)(qword_1023071F8 + 8 * (((_QWORD)xmmword_102307210 + *((_QWORD *)&xmmword_102307210 + 1)) >> 8));
    if (unk_102307200 == qword_1023071F8)
      v26 = 0;
    else
      v26 = *(_QWORD *)v25 + 16 * (xmmword_102307210 + BYTE8(xmmword_102307210));
    sub_1000D8D4C(&qword_1023071F0, v24, v23, v25, v26);
    if (a3 == 3)
      v27 = CFSTR("motorcycle");
    else
      v27 = CFSTR("vehicle");
    v28 = objc_opt_new(NSMutableString);
    v29 = a2 & 3;
    if ((a2 & 3) == 0)
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v34 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        buf.n128_u16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] user chose to file radar", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021789E8);
        LOWORD(v49) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] user chose to file radar", &v49, 2);
        v47 = (__n128 *)v46;
        sub_100512490("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", v46);
        if (v47 != &buf)
          free(v47);
      }
      -[NSMutableString appendString:](v28, "appendString:", CFSTR("ttr_user_not_in_"));
      -[NSMutableString appendString:](v28, "appendString:", v27);
      v35 = v55;
      sub_1015A2E04(&buf, (char *)-[NSMutableString cStringUsingEncoding:](v28, "cStringUsingEncoding:", 1));
      *(_QWORD *)&v36 = sub_100AB85CC(v35, &buf).n128_u64[0];
      if (v52 < 0)
        operator delete((void *)buf.n128_u64[0]);
      v37 = objc_msgSend(CFSTR("tap-to-radar://new"), "mutableCopy", v36);
      objc_msgSend(v37, "appendString:", CFSTR("?Title="));
      objc_msgSend(v37, "appendString:", CFSTR("iOS%20"));
      v38 = (const void *)MGCopyAnswer(CFSTR("mZfUC7qo4pURNhyMHZ62RQ"), 0);
      objc_msgSend(v37, "appendString:", v38);
      objc_msgSend(v37, "appendString:", CFSTR("%20-%20Motion%20Activity:%20Vehicular%20detection%20TTR"));
      objc_msgSend(v37, "appendString:", CFSTR("&Classification=Other%20Bug"));
      objc_msgSend(v37, "appendString:", CFSTR("&ComponentID=954151&ComponentName=CoreMotionVehicularDetection&ComponentVersion=All"));
      objc_msgSend(v37, "appendString:", CFSTR("&Reproducibility=I%20Didn't%20Try"));
      objc_msgSend(v37, "appendFormat:", CFSTR("&Description=%@"), objc_msgSend(CFSTR("Additional Information:"), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")));
      v39 = +[NSURL URLWithString:](NSURL, "URLWithString:", v37);

      CFRelease(v38);
      objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openURL:configuration:completionHandler:", v39, 0, 0);
      goto LABEL_56;
    }
    if (v29 == 1)
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v32 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        buf.n128_u16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] user confirmed in vehicle", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021789E8);
        LOWORD(v49) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] user confirmed in vehicle", &v49, 2);
        v43 = (__n128 *)v42;
        sub_100512490("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", v42);
        if (v43 != &buf)
          free(v43);
      }
      -[NSMutableString appendString:](v28, "appendString:", CFSTR("user_in_"));
      -[NSMutableString appendString:](v28, "appendString:", v27);
      v33 = v55;
      sub_1015A2E04(&buf, (char *)-[NSMutableString cStringUsingEncoding:](v28, "cStringUsingEncoding:", 1));
      sub_100AB85CC(v33, &buf);
    }
    else
    {
      if (v29 != 2)
      {
LABEL_56:
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_1021788C8);
        if (qword_1023118B0)
          sub_101888B64(qword_1023118B0, (uint64_t)v53);
        sub_1015EE304((PB::Base *)v53);
        return;
      }
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021789E8);
      v30 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEFAULT))
      {
        buf.n128_u16[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "[VehicleDetectionAlert] user said not in vehicle", (uint8_t *)&buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021789E8);
        LOWORD(v49) = 0;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FCB8, 0, "[VehicleDetectionAlert] user said not in vehicle", &v49, 2);
        v45 = (__n128 *)v44;
        sub_100512490("Generic", 1, 0, 2, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", v44);
        if (v45 != &buf)
          free(v45);
      }
      -[NSMutableString appendString:](v28, "appendString:", CFSTR("user_not_in_"));
      -[NSMutableString appendString:](v28, "appendString:", v27);
      v31 = v55;
      sub_1015A2E04(&buf, (char *)-[NSMutableString cStringUsingEncoding:](v28, "cStringUsingEncoding:", 1));
      sub_100AB85CC(v31, &buf);
    }
    if (v52 < 0)
      operator delete((void *)buf.n128_u64[0]);
    goto LABEL_56;
  }
  if (qword_10229FCB0 != -1)
    dispatch_once(&qword_10229FCB0, &stru_1021789E8);
  v20 = qword_10229FCB8;
  if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "[VehicleDetectionAlert] - Vehicle notification didn't have a timestamp", v53, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(v53, 0x65CuLL);
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021789E8);
    buf.n128_u16[0] = 0;
    _os_log_send_and_compose_impl(2, 0, v53, 1628, &_mh_execute_header, qword_10229FCB8, 16, "[VehicleDetectionAlert] - Vehicle notification didn't have a timestamp", &buf, 2);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "void VehicleDetectedDialogHandler(CFUserNotificationRef, CFOptionFlags, CMMotionContext::VehicleType)", "%s\n", v21);
    if (v22 != v53)
      free(v22);
  }
}

void sub_100BF4A50(_Unwind_Exception *a1)
{
  sub_1015EE304((PB::Base *)&STACK[0x690]);
  _Unwind_Resume(a1);
}

_QWORD *sub_100BF4AB8(_QWORD *a1, _QWORD *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *result;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  _OWORD *v11;
  _OWORD *v12;

  result = sub_100BF4B4C(a1, a2, a3, a4, a5);
  if (v8 != (_OWORD *)a4)
  {
    v9 = v8;
    v10 = result;
    while (1)
    {
      if ((_OWORD *)((char *)++v9 - *v10) == (_OWORD *)4096)
      {
        v11 = (_OWORD *)v10[1];
        ++v10;
        v9 = v11;
      }
      if (v9 == (_OWORD *)a4)
        break;
      if (*(_QWORD *)v9 != *a5)
      {
        *v8++ = *v9;
        if ((_OWORD *)((char *)v8 - *result) == (_OWORD *)4096)
        {
          v12 = (_OWORD *)result[1];
          ++result;
          v8 = v12;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_100BF4B4C(_QWORD *result, _QWORD *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;

  if (result == a3)
  {
    if (a2 != a4)
    {
      while (*a2 != *a5)
      {
        a2 += 2;
        if (a2 == a4)
        {
          a2 = a4;
          break;
        }
      }
    }
    if (result && (_QWORD *)(*result + 4096) == a2)
      ++result;
  }
  else
  {
    v5 = *result + 4096;
    if ((_QWORD *)v5 == a2)
      goto LABEL_14;
    while (*a2 != *a5)
    {
      a2 += 2;
      if (a2 == (_QWORD *)v5)
        goto LABEL_14;
    }
    if (a2 == (_QWORD *)v5)
    {
LABEL_14:
      v6 = result + 1;
      if (result + 1 == a3)
      {
        v8 = result;
      }
      else
      {
        do
        {
          v7 = 0;
          v8 = v6;
          v9 = *v6;
          do
          {
            if (*(_QWORD *)(v9 + v7) == *a5)
              return v8;
            v7 += 16;
          }
          while (v7 != 4096);
          v6 = v8 + 1;
        }
        while (v8 + 1 != a3);
      }
      if (*a3 == a4)
      {
        return a3;
      }
      else
      {
        v10 = *a3;
        while (*v10 != *a5)
        {
          v10 += 2;
          if (v10 == a4)
          {
            v10 = a4;
            break;
          }
        }
        result = a3;
        if (*a3 + 512 == v10)
          return v8 + 2;
      }
    }
  }
  return result;
}

void sub_100BF4C8C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x924924924924925)
      sub_100259694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 28;
    v6 = (char *)sub_100AAF154(v3, a2);
    v7 = &v6[28 * v5];
    v9 = &v6[28 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 28);
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        *(_OWORD *)(v12 - 28) = v13;
        v12 -= 28;
        v10 -= 28;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_100BF4D78()
{
  operator new();
}

void sub_100BF4EAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_100BF4EC8(id a1)
{
  qword_10229FD88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_100BF4EF4(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100BF4F20(uint64_t a1)
{
  nullsub_34(a1);
  operator delete();
}

void sub_100BF4F44(uint64_t a1, uint64_t a2)
{
  CFAbsoluteTime Current;
  uint64_t v5;
  __int16 v6;
  BOOL v7;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_WORD *)(a2 + 1);
  v7 = *(_BYTE *)(a2 + 3) != 0;
  *(CFAbsoluteTime *)(a1 + 8) = Current;
  *(_QWORD *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 26) = v7;
}

void sub_100BF4F8C()
{
  operator new();
}

void sub_100BF50C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *sub_100BF50DC(_QWORD *a1, char *a2, char *a3, unint64_t a4)
{
  char *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  float *v14;
  float *v15;
  int v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  int v21;
  char *v22;
  float *v23;
  int v24;
  uint64_t v25;
  float *v26;
  int v27;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      if (a2 == a3)
      {
        v25 = (uint64_t)result;
      }
      else
      {
        v25 = (uint64_t)&result[4 * (_QWORD)a3 + -4 * (_QWORD)a2];
        v26 = (float *)result;
        do
        {
          v27 = *v6++;
          *v26++ = (float)v27;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v25 - (_QWORD)result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6++;
          *(float *)result = (float)v21;
          result += 4;
          --v19;
        }
        while (v19);
      }
      v22 = v12;
      if (v20 != a3)
      {
        v23 = (float *)v12;
        do
        {
          v24 = *v20++;
          *v23++ = (float)v24;
          v22 += 4;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v22 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62)
      sub_100259694();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002720D4(a1, v11);
    v14 = (float *)a1[1];
    v13 = a1 + 1;
    v12 = (char *)v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = (float *)v12;
      do
      {
        v16 = *v6++;
        *v15++ = (float)v16;
      }
      while (v6 != a3);
    }
    v17 = (char *)((char *)v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

uint64_t sub_100BF5240(uint64_t result)
{
  if (!*(_QWORD *)(result + 24))
    operator new();
  return result;
}

uint64_t sub_100BF52A0(uint64_t result)
{
  if (!*(_QWORD *)(result + 40))
    operator new();
  return result;
}

void sub_100BF5300(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_102178DC0;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100BF543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF5464(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF5478(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF5494(uint64_t a1)
{
  sub_100BF5584(a1);
  operator delete();
}

__n128 sub_100BF54B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[8];
  unsigned int v14;

  v3 = *(_QWORD *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100BF55F8;
    v13[3] = &unk_1021579E0;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    objc_msgSend(v12, "async:", v13);
    operator new[]();
  }
  return result;
}

uint64_t sub_100BF5584(uint64_t a1)
{
  *(_QWORD *)a1 = off_102178DC0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_100BF55F8(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

_QWORD *sub_100BF5658(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102178E60;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100BF578C;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100BF57A0;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100BF5764(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF578C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF57A0(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF57BC(uint64_t a1)
{
  sub_100BF5B08(a1);
  operator delete();
}

id sub_100BF57E0(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  int v39;
  uint8_t buf[4];
  unint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  unint64_t v45;
  __int16 v46;
  int v47;
  _OWORD __dst[12];

  if (a4 >= 0xC0)
    v8 = 192;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0xC1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v41 = 0x8000000101C1D94ELL & 0x7FFFFFFFFFFFFFFFLL;
      v42 = 2048;
      v43 = 192;
      v44 = 2048;
      v45 = a4;
      v46 = 1024;
      v47 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v32 = 136315906;
      v33 = 0x8000000101C1D94ELL & 0x7FFFFFFFFFFFFFFFLL;
      v34 = 2048;
      v35 = 192;
      v36 = 2048;
      v37 = a4;
      v38 = 1024;
      v39 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v32, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLAccessoryMonitor::LogEvent>::dispatchData(int, const void *, size_t) [T = CLAccessoryMonitor::LogEvent]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100BF5B60;
  v18[3] = &unk_102178EA8;
  v18[4] = v12;
  v18[5] = v11;
  v27 = __dst[8];
  v28 = __dst[9];
  v29 = __dst[10];
  v30 = __dst[11];
  v23 = __dst[4];
  v24 = __dst[5];
  v25 = __dst[6];
  v26 = __dst[7];
  v19 = __dst[0];
  v20 = __dst[1];
  v21 = __dst[2];
  v22 = __dst[3];
  v31 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_100BF5B08(uint64_t a1)
{
  *(_QWORD *)a1 = off_102178E60;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100BF5B60(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 240));
  return result;
}

void sub_100BF5BA4(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_102178ED8;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100BF5CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF5D04(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF5D18(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF5D34(uint64_t a1)
{
  sub_100BF5E14(a1);
  operator delete();
}

__n128 sub_100BF5D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __n128 result;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[8];
  unsigned int v14;

  v3 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 32 * *(unsigned int *)(a1 + 64));
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  *v3 = *(_OWORD *)a3;
  v3[1] = v5;
  v6 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100BF5E88;
    v13[3] = &unk_1021579E0;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    objc_msgSend(v12, "async:", v13);
    operator new[]();
  }
  return result;
}

uint64_t sub_100BF5E14(uint64_t a1)
{
  *(_QWORD *)a1 = off_102178ED8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_100BF5E88(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100BF5EE8(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_102178F78;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100BF6024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF604C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF6060(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF607C(uint64_t a1)
{
  sub_100BF616C(a1);
  operator delete();
}

__n128 sub_100BF60A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[8];
  unsigned int v14;

  v3 = *(_QWORD *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100BF61E0;
    v13[3] = &unk_1021579E0;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    objc_msgSend(v12, "async:", v13);
    operator new[]();
  }
  return result;
}

uint64_t sub_100BF616C(uint64_t a1)
{
  *(_QWORD *)a1 = off_102178F78;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_100BF61E0(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100BF6240(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_102179018;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100BF6378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF63A0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF63B4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF63D0(uint64_t a1)
{
  sub_100BF64B0(a1);
  operator delete();
}

__n128 sub_100BF63F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __n128 result;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[8];
  unsigned int v14;

  v3 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 32 * *(unsigned int *)(a1 + 64));
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  *v3 = *(_OWORD *)a3;
  v3[1] = v5;
  v6 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100BF6524;
    v13[3] = &unk_1021579E0;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    objc_msgSend(v12, "async:", v13);
    operator new[]();
  }
  return result;
}

uint64_t sub_100BF64B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_102179018;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_100BF6524(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100BF6584(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_102179068;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100BF66C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF66E8(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF66FC(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF6718(uint64_t a1)
{
  sub_100BF6808(a1);
  operator delete();
}

__n128 sub_100BF673C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[8];
  unsigned int v14;

  v3 = *(_QWORD *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100BF687C;
    v13[3] = &unk_1021579E0;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    objc_msgSend(v12, "async:", v13);
    operator new[]();
  }
  return result;
}

uint64_t sub_100BF6808(uint64_t a1)
{
  *(_QWORD *)a1 = off_102179068;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_100BF687C(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100BF68DC(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_1021790B8;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_100BF6A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF6A40(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF6A54(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF6A70(uint64_t a1)
{
  sub_100BF6B60(a1);
  operator delete();
}

__n128 sub_100BF6A94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[8];
  unsigned int v14;

  v3 = *(_QWORD *)(a1 + 56) + 40 * *(unsigned int *)(a1 + 64);
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a3 + 32);
  *(__n128 *)v3 = result;
  *(_OWORD *)(v3 + 16) = v5;
  v6 = *(_DWORD *)(a1 + 68);
  v7 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v7;
  if (v7 >= v6)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = *(void **)(a1 + 16);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100BF6BD4;
    v13[3] = &unk_1021579E0;
    v13[4] = v10;
    v13[5] = v9;
    v14 = v7;
    v13[6] = v11;
    v13[7] = v8;
    objc_msgSend(v12, "async:", v13);
    operator new[]();
  }
  return result;
}

uint64_t sub_100BF6B60(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021790B8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_100BF6BD4(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_100BF6C38()
{
  operator delete();
}

_QWORD *sub_100BF6C4C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1021791C0;
  result[1] = v3;
  return result;
}

uint64_t sub_100BF6C80(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1021791C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100BF6CA0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BF6CDC()
{
}

_QWORD *sub_100BF6CE8(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102179240;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100BF6E1C;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100BF6E30;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100BF6DF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF6E1C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF6E30(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF6E4C(uint64_t a1)
{
  sub_100BF7118(a1);
  operator delete();
}

id sub_100BF6E70(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD v16[5];
  __int128 v17;
  _BYTE v18[23];
  _BYTE __dst[23];
  int v20;
  unint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  unint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  int v35;

  if (a4 >= 0x17)
    v8 = 23;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0x18)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v29 = 0x8000000101C1DDB1 & 0x7FFFFFFFFFFFFFFFLL;
      v30 = 2048;
      v31 = 23;
      v32 = 2048;
      v33 = a4;
      v34 = 1024;
      v35 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v20 = 136315906;
      v21 = 0x8000000101C1DDB1 & 0x7FFFFFFFFFFFFFFFLL;
      v22 = 2048;
      v23 = 23;
      v24 = 2048;
      v25 = a4;
      v26 = 1024;
      v27 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v20, 38, v15, LODWORD(v16[0]));
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardMotionData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardMotionData]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100BF7170;
  v16[3] = &unk_102179288;
  v16[4] = v10;
  *(_OWORD *)v18 = *(_OWORD *)__dst;
  *(_QWORD *)&v18[15] = *(_QWORD *)&__dst[15];
  v17 = *(_OWORD *)(a1 + 16);
  return objc_msgSend(v11, "async:", v16);
}

uint64_t sub_100BF7118(uint64_t a1)
{
  *(_QWORD *)a1 = off_102179240;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100BF7170(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 56, *(_QWORD *)(a1 + 48));
  return result;
}

_QWORD *sub_100BF71B0(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021792B8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100BF72E4;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100BF72F8;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100BF72BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF72E4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF72F8(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF7314(uint64_t a1)
{
  sub_100BF75D0(a1);
  operator delete();
}

id sub_100BF7338(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  void *v9;
  const char *v11;
  uint8_t *v12;
  void **v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  char __dst;
  int v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  int v36;

  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v30 = 0x8000000101C1DE3BLL & 0x7FFFFFFFFFFFFFFFLL;
      v31 = 2048;
      v32 = 1;
      v33 = 2048;
      v34 = a4;
      v35 = 1024;
      v36 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v21 = 136315906;
      v22 = 0x8000000101C1DE3BLL & 0x7FFFFFFFFFFFFFFFLL;
      v23 = 2048;
      v24 = 1;
      v25 = 2048;
      v26 = a4;
      v27 = 1024;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v21, 38, (size_t)v13, v14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardKeyPressData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardKeyPressData]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(void **)(a1 + 32);
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_100BF7628;
  v16 = &unk_102179300;
  v17 = v8;
  v19 = __dst;
  v18 = *(_OWORD *)(a1 + 16);
  return objc_msgSend(v9, "async:", &v13);
}

uint64_t sub_100BF75D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021792B8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100BF7628(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 56, *(_QWORD *)(a1 + 48));
  return result;
}

_QWORD *sub_100BF7668(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102179330;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100BF779C;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100BF77B0;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100BF7774(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF779C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF77B0(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF77CC(uint64_t a1)
{
  sub_100BF7A88(a1);
  operator delete();
}

id sub_100BF77F0(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  void *v9;
  const char *v11;
  uint8_t *v12;
  void **v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  char __dst;
  int v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  int v36;

  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v30 = 0x8000000101C1DEBFLL & 0x7FFFFFFFFFFFFFFFLL;
      v31 = 2048;
      v32 = 1;
      v33 = 2048;
      v34 = a4;
      v35 = 1024;
      v36 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v21 = 136315906;
      v22 = 0x8000000101C1DEBFLL & 0x7FFFFFFFFFFFFFFFLL;
      v23 = 2048;
      v24 = 1;
      v25 = 2048;
      v26 = a4;
      v27 = 1024;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v21, 38, (size_t)v13, v14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::TrackpadData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::TrackpadData]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(void **)(a1 + 32);
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_100BF7AE0;
  v16 = &unk_102179300;
  v17 = v8;
  v19 = __dst;
  v18 = *(_OWORD *)(a1 + 16);
  return objc_msgSend(v9, "async:", &v13);
}

uint64_t sub_100BF7A88(uint64_t a1)
{
  *(_QWORD *)a1 = off_102179330;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100BF7AE0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 56, *(_QWORD *)(a1 + 48));
  return result;
}

_QWORD *sub_100BF7B20(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102179380;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100BF7C54;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100BF7C68;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100BF7C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF7C54(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF7C68(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF7C84(uint64_t a1)
{
  sub_100BF7F40(a1);
  operator delete();
}

id sub_100BF7CA8(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  void *v9;
  const char *v11;
  uint8_t *v12;
  void **v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  char __dst;
  int v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  unint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  int v36;

  memcpy(&__dst, __src, a4 != 0);
  if (a4 >= 2)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v30 = 0x8000000101C1DF43 & 0x7FFFFFFFFFFFFFFFLL;
      v31 = 2048;
      v32 = 1;
      v33 = 2048;
      v34 = a4;
      v35 = 1024;
      v36 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v21 = 136315906;
      v22 = 0x8000000101C1DF43 & 0x7FFFFFFFFFFFFFFFLL;
      v23 = 2048;
      v24 = 1;
      v25 = 2048;
      v26 = a4;
      v27 = 1024;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v21, 38, (size_t)v13, v14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLKeyboardMotionNotifier::KeyboardAttachedData>::dispatchData(int, const void *, size_t) [T = CLKeyboardMotionNotifier::KeyboardAttachedData]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(void **)(a1 + 32);
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_100BF7F98;
  v16 = &unk_102179300;
  v17 = v8;
  v19 = __dst;
  v18 = *(_OWORD *)(a1 + 16);
  return objc_msgSend(v9, "async:", &v13);
}

uint64_t sub_100BF7F40(uint64_t a1)
{
  *(_QWORD *)a1 = off_102179380;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100BF7F98(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 56, *(_QWORD *)(a1 + 48));
  return result;
}

__n128 sub_100BF7FD8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_1021793D0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_100BF801C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_1021793D0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100BF8048(_QWORD *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD);
  _QWORD *v4;

  v2 = a1[2];
  v3 = (uint64_t (*)(_QWORD *, _QWORD))a1[1];
  v4 = (_QWORD *)(a1[3] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v3);
  return v3(v4, *a2);
}

uint64_t sub_100BF8068(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100BF80A4()
{
}

uint64_t sub_100BF80B0(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_100BF8118()
{
  operator delete();
}

_QWORD *sub_100BF812C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_102179468;
  result[1] = v3;
  return result;
}

uint64_t sub_100BF8160(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_102179468;
  a2[1] = v2;
  return result;
}

uint64_t sub_100BF8180(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100BF81BC()
{
}

_QWORD *sub_100BF81C8(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021794E8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_100BF82FC;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100BF8310;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_100BF82D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF82FC(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_100BF8310(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_100BF832C(uint64_t a1)
{
  sub_100BF8608(a1);
  operator delete();
}

id sub_100BF8350(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD __dst[5];
  int v26;
  unint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  unint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int16 v40;
  int v41;

  if (a4 >= 0x50)
    v8 = 80;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0x51)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021788E8);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v35 = 0x8000000101C2D5A4 & 0x7FFFFFFFFFFFFFFFLL;
      v36 = 2048;
      v37 = 80;
      v38 = 2048;
      v39 = a4;
      v40 = 1024;
      v41 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
      v26 = 136315906;
      v27 = 0x8000000101C2D5A4 & 0x7FFFFFFFFFFFFFFFLL;
      v28 = 2048;
      v29 = 80;
      v30 = 2048;
      v31 = a4;
      v32 = 1024;
      v33 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v26, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLMobility::SPUGaitMetrics>::dispatchData(int, const void *, size_t) [T = CLMobility::SPUGaitMetrics]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100BF8660;
  v18[3] = &unk_102179530;
  v18[4] = v12;
  v18[5] = v11;
  v21 = __dst[2];
  v22 = __dst[3];
  v23 = __dst[4];
  v20 = __dst[1];
  v19 = __dst[0];
  v24 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_100BF8608(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021794E8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_100BF8660(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 128));
  return result;
}

void sub_100BF86A4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100BF8740(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100BF8758()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100BF87E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100BF87FC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C1D3C0;
      v1[3] = unk_101C1D3D0;
      v1[4] = xmmword_101C1D3E0;
      v1[0] = xmmword_101C1D3A0;
      v1[1] = unk_101C1D3B0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100BF88D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF88E8()
{
  sub_1015A2E04(qword_1023071D0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023071D0, (void *)&_mh_execute_header);
  *(_OWORD *)&qword_1023071F0 = 0u;
  unk_102307200 = 0u;
  xmmword_102307210 = 0u;
  __cxa_atexit((void (*)(void *))sub_100BE4B4C, &qword_1023071F0, (void *)&_mh_execute_header);
  *(_OWORD *)&qword_102307220 = 0u;
  *(_OWORD *)algn_102307230 = 0u;
  xmmword_102307240 = 0u;
  return __cxa_atexit((void (*)(void *))sub_100BE5958, &qword_102307220, (void *)&_mh_execute_header);
}

_QWORD *sub_100BF8C98(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;

  sub_100270E34((uint64_t)v20, a3);
  sub_100270E34((uint64_t)v18, a4);
  sub_100270E34((uint64_t)v16, a5);
  sub_100D6C128((uint64_t)a1, a2, CFSTR("MotionCues"), 0, 1, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16);
  v9 = v17;
  if (v17 == v16)
  {
    v10 = 4;
    v9 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
    goto LABEL_15;
  }
  if (v21)
  {
    v14 = 5;
LABEL_15:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  *a1 = off_102179728;
  sub_100119F3C(a1 + 17);
  return a1;
}

void sub_100BF8DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100D6C25C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF8EB4(_QWORD *a1)
{
  *a1 = off_102179728;
  sub_10011A5A8(a1 + 17);
  return sub_100D6C25C((uint64_t)a1);
}

void sub_100BF8EE4(_QWORD *a1)
{
  *a1 = off_102179728;
  sub_10011A5A8(a1 + 17);
  sub_100D6C25C((uint64_t)a1);
  operator delete();
}

uint64_t sub_100BF8F28(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v5;
  id v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021797C8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    *(_DWORD *)buf = 136446210;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021797C8);
    v5 = qword_1022A02A8;
    v6 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v9 = 136446210;
    v10 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "#CLConfig,%{public}s,clearOutAssetData", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCuesConfigAsset::clearOutAssetData()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100119F3C(buf);
  sub_10052502C(a1 + 136, (uint64_t)buf);
  return sub_10011A5A8(buf);
}

void sub_100BF9100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100BF911C(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int v4;
  int v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  void *v11;
  unint64_t size;
  int v13;
  void *v14;
  uint64_t v15;
  id v16;
  int v17;
  int v18;
  const char *v19;
  std::string *v20;
  __int128 __dst;
  _BYTE v22[7];
  char v23;
  void *__p[2];
  unsigned __int8 v25;
  _DWORD v26[2];
  std::string v27;
  std::string buf[68];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021797C8);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v4 = sub_1007FA8FC(*(void **)(a1 + 128));
    v5 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationMotionCuesSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021797C8);
    v15 = qword_1022A02A8;
    v16 = objc_msgSend(*(id *)(a1 + 16), "UTF8String");
    v17 = sub_1007FA8FC(*(void **)(a1 + 128));
    v18 = sub_1007FA8C8(*(void **)(a1 + 128));
    LODWORD(v27.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(v27.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = v17;
    WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v27.__r_.__value_.__r.__words[2]) = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#CLConfig,%{public}s,sending kNotificationMotionCuesSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", &v27, 24);
    v20 = (std::string *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCuesConfigAsset::sendNotifications()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  sub_1015A2E04(&v27, "#CLConfig,");
  v6 = std::string::append(&v27, (const std::string::value_type *)objc_msgSend(*(id *)(a1 + 16), "UTF8String"));
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1015A2E04(__p, ",kNotificationMotionCuesSettings,");
  if ((v25 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v25 & 0x80u) == 0)
    v9 = v25;
  else
    v9 = (std::string::size_type)__p[1];
  v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  v11 = (void *)v10->__r_.__value_.__r.__words[0];
  size = v10->__r_.__value_.__l.__size_;
  v26[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v25 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v27.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(_QWORD *)&__dst = v11;
    *((_QWORD *)&__dst + 1) = size;
    *(_DWORD *)v22 = v26[0];
    *(_DWORD *)&v22[3] = *(_DWORD *)((char *)v26 + 3);
    v23 = v13;
    goto LABEL_21;
  }
  sub_100115CE4(&__dst, v11, size);
LABEL_21:
  v14 = (void *)sub_10011A5AC(a1 + 136);
  sub_1007FA930(&__dst, v14);
  if (v23 < 0)
    operator delete((void *)__dst);
  sub_100D6EF24(a1, 9, a1 + 136);
  if (v13 < 0)
    operator delete(v11);
}

void sub_100BF9474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100BF94F0(uint64_t a1)
{
  sub_100D6D640(a1, CFSTR("settings.plist"), a1 + 136);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
}

void sub_100BF9528(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

double sub_100BF9554(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

double sub_100BF955C(uint64_t a1)
{
  return *(double *)(a1 + 72);
}

double sub_100BF9564(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

void sub_100BF956C(uint64_t *a1, double *a2)
{
  sub_100BF9574((uint64_t)a1, a2, a1);
}

void sub_100BF9574(uint64_t a1, double *a2, uint64_t *a3)
{
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  int v13;
  double v14;

  v5 = operator new(0x20uLL);
  v5[1] = *(_OWORD *)a2;
  v6 = *a3;
  *(_QWORD *)v5 = *a3;
  *((_QWORD *)v5 + 1) = a3;
  *(_QWORD *)(v6 + 8) = v5;
  *a3 = (uint64_t)v5;
  v7 = a3[2];
  v8 = __CFADD__(v7, 1);
  v9 = v7 + 1;
  a3[2] = v9;
  if (!v8)
  {
    do
    {
      v10 = (double *)a3[1];
      if (vabdd_f64(v10[2], *a2) <= 3.0)
        break;
      v11 = *v10;
      *(double *)(*(_QWORD *)&v11 + 8) = v10[1];
      **((double **)v10 + 1) = v11;
      a3[2] = v9 - 1;
      operator delete(v10);
      v9 = a3[2];
    }
    while (v9);
  }
  v12 = a3[1];
  if ((uint64_t *)v12 != a3)
  {
    v13 = 0;
    v14 = 0.0;
    do
    {
      v14 = v14 + *(double *)(v12 + 24);
      ++v13;
      v12 = *(_QWORD *)(v12 + 8);
    }
    while ((uint64_t *)v12 != a3);
  }
}

void sub_100BF964C(uint64_t a1, double *a2)
{
  sub_100BF9574(a1, a2, (uint64_t *)(a1 + 48));
}

void sub_100BF9654(uint64_t a1, double *a2)
{
  sub_100BF9574(a1, a2, (uint64_t *)(a1 + 24));
}

double sub_100BF965C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  double v5;
  int v6;
  double result;
  double v8;
  int v9;
  char *v10;
  uint64_t v11;
  int v12;
  double v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  double v17;
  __int16 v18;
  int v19;

  sub_10012A33C(a2);
  HIDWORD(v11) = 0;
  if (sub_100208AC8((float *)&v11 + 1, *(double *)(a1 + 4), *(double *)(a1 + 12)))
  {
    *(_DWORD *)(a2 + 316) = HIDWORD(v11);
    *(_DWORD *)(a2 + 312) = 1;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021797E8);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(float *)(a2 + 316);
    v6 = *(_DWORD *)(a2 + 312);
    *(_DWORD *)buf = 134349312;
    v17 = v5;
    v18 = 1026;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Wifi,undulation,%{public}lf, model, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021797E8);
    v8 = *(float *)(a2 + 316);
    v9 = *(_DWORD *)(a2 + 312);
    v12 = 134349312;
    v13 = v8;
    v14 = 1026;
    v15 = v9;
    LODWORD(v11) = 18;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "Wifi,undulation,%{public}lf, model, %{public}d", &v12, v11);
    sub_100512490("Generic", 1, 0, 2, "CLDaemonLocationPrivate CL::Wifi1::Policies::LocationPrivateCalculation::populateLocationPrivate(const CL::Wifi1::Types::ComputedLocation &)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
  *(double *)(a2 + 32) = sub_100078B88();
  *(double *)(a2 + 344) = sub_1001FCBB4();
  *(_QWORD *)(a2 + 24) = 0;
  result = *(double *)(a1 + 168);
  *(double *)(a2 + 600) = result;
  *(_BYTE *)(a2 + 608) = *(_BYTE *)(a1 + 180);
  *(_DWORD *)(a2 + 620) = *(_DWORD *)(a1 + 176);
  return result;
}

void sub_100BF9894(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1 + 520);
  _Unwind_Resume(a1);
}

void sub_100BF98AC(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100BF98D8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100BF9974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100BF998C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100BF9A18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100BF9A30()
{
  uint64_t result;

  result = qword_1023113C0;
  if (qword_1023113C0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1023113C0 + 8))(qword_1023113C0);
  return result;
}

void sub_100BF9A4C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;

  if ((byte_102307260 & 1) == 0)
  {
    byte_102307260 = 1;
    v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionLogEntry.pb.cc", a4);
    sub_100B30E60(v4, v5, v6, v7);
    operator new();
  }
}

double sub_100BF9B04(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_102179818;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

void sub_100BF9B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _BYTE v14[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v14, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/CLPVisionLogEntry.pb.cc", 311);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v13, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v5) = *(_BYTE *)(a2 + 40);
  if ((_BYTE)v5)
  {
    if ((*(_BYTE *)(a2 + 40) & 1) != 0)
    {
      v6 = *(_DWORD *)(a2 + 32);
      if (!sub_100177AB4(v6))
        sub_101921B40();
      *(_DWORD *)(a1 + 40) |= 1u;
      *(_DWORD *)(a1 + 32) = v6;
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 2) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 2u;
      v7 = *(_QWORD *)(a1 + 8);
      if (!v7)
        operator new();
      v8 = *(_QWORD *)(a2 + 8);
      if (!v8)
        v8 = *(_QWORD *)(qword_1023113C0 + 8);
      sub_100B35128(v7, v8);
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 4) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 4u;
      v9 = *(_DWORD **)(a1 + 16);
      if (!v9)
        operator new();
      v10 = *(_QWORD *)(a2 + 16);
      if (!v10)
        v10 = *(_QWORD *)(qword_1023113C0 + 16);
      sub_100B3922C(v9, v10);
      v5 = *(_DWORD *)(a2 + 40);
    }
    if ((v5 & 8) != 0)
    {
      *(_DWORD *)(a1 + 40) |= 8u;
      v11 = *(_QWORD *)(a1 + 24);
      if (!v11)
        operator new();
      v12 = *(_QWORD *)(a2 + 24);
      if (!v12)
        v12 = *(_QWORD *)(qword_1023113C0 + 24);
      sub_100B3DA7C(v11, v12);
    }
  }
}

void sub_100BF9CDC()
{
  operator delete();
}

_QWORD *sub_100BF9D44(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if ((_QWORD *)qword_1023113C0 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    result = (_QWORD *)v1[3];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_100BF9DB4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102179818;
  sub_100BF9D44(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100BF9DE4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102179818;
  sub_100BF9D44(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100BF9E28(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = qword_1023113C0;
  if (!qword_1023113C0)
  {
    sub_100BF9A4C(0, a2, a3, a4);
    return qword_1023113C0;
  }
  return result;
}

void sub_100BF9E54()
{
  operator new();
}

uint64_t sub_100BF9E98(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = result;
  LOBYTE(v2) = *(_BYTE *)(result + 40);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(result + 32) = -1;
    if ((v2 & 2) != 0)
    {
      result = *(_QWORD *)(result + 8);
      if (result)
      {
        result = sub_100B357D0(result);
        v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 4) != 0)
    {
      result = *(_QWORD *)(v1 + 16);
      if (result)
      {
        result = sub_100B394D8(result);
        v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 8) != 0)
    {
      result = *(_QWORD *)(v1 + 24);
      if (result)
        result = sub_100B3DEB0(result);
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_100BF9F00(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t result;
  _BYTE *v11;
  uint64_t v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  _BYTE *v21;
  int *v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_17;
        v39 = 0;
        v8 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 < *((_QWORD *)this + 2) && (*v8 & 0x80000000) == 0)
        {
          v9 = *v8;
          *((_QWORD *)this + 1) = v8 + 1;
          goto LABEL_22;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
        if ((_DWORD)result)
        {
          v9 = v39;
LABEL_22:
          if (sub_100177AB4(v9))
          {
            if (!sub_100177AB4(v9))
              sub_101921B40();
            *(_DWORD *)(a1 + 40) |= 1u;
            *(_DWORD *)(a1 + 32) = v9;
          }
          v11 = (_BYTE *)*((_QWORD *)this + 1);
          if ((unint64_t)v11 < *((_QWORD *)this + 2) && *v11 == 18)
          {
            *((_QWORD *)this + 1) = v11 + 1;
            goto LABEL_28;
          }
          continue;
        }
        break;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
LABEL_28:
        *(_DWORD *)(a1 + 40) |= 2u;
        v12 = *(_QWORD *)(a1 + 8);
        if (!v12)
          operator new();
        v39 = 0;
        v13 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v13 >= *((_QWORD *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0;
        }
        else
        {
          v39 = *v13;
          *((_QWORD *)this + 1) = v13 + 1;
        }
        v14 = *((_DWORD *)this + 14);
        v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15)
          return 0;
        v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_100B35A00(v12, this, v17) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        v18 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v18, 1);
        v20 = v18 - 1;
        if (v20 < 0 == v19)
          *((_DWORD *)this + 14) = v20;
        v21 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v21 >= *((_QWORD *)this + 2) || *v21 != 26)
          continue;
        *((_QWORD *)this + 1) = v21 + 1;
LABEL_42:
        *(_DWORD *)(a1 + 40) |= 4u;
        v22 = *(int **)(a1 + 16);
        if (!v22)
          operator new();
        v39 = 0;
        v23 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v23 >= *((_QWORD *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0;
        }
        else
        {
          v39 = *v23;
          *((_QWORD *)this + 1) = v23 + 1;
        }
        v24 = *((_DWORD *)this + 14);
        v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25)
          return 0;
        v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_100B39544(v22, this, v27) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        v28 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v28, 1);
        v29 = v28 - 1;
        if (v29 < 0 == v19)
          *((_DWORD *)this + 14) = v29;
        v30 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v30 >= *((_QWORD *)this + 2) || *v30 != 34)
          continue;
        *((_QWORD *)this + 1) = v30 + 1;
LABEL_56:
        *(_DWORD *)(a1 + 40) |= 8u;
        v31 = *(_QWORD *)(a1 + 24);
        if (!v31)
          operator new();
        v39 = 0;
        v32 = (char *)*((_QWORD *)this + 1);
        if ((unint64_t)v32 >= *((_QWORD *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39))return 0;
        }
        else
        {
          v39 = *v32;
          *((_QWORD *)this + 1) = v32 + 1;
        }
        v33 = *((_DWORD *)this + 14);
        v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34)
          return 0;
        v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v39);
        if (!sub_100B3DFF8(v31, this, v36) || !*((_BYTE *)this + 36))
          return 0;
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        v37 = *((_DWORD *)this + 14);
        v19 = __OFSUB__(v37, 1);
        v38 = v37 - 1;
        if (v38 < 0 == v19)
          *((_DWORD *)this + 14) = v38;
        if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
          && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          result = 1;
          *((_BYTE *)this + 36) = 1;
          return result;
        }
        continue;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 2)
          goto LABEL_42;
        goto LABEL_17;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 != 2)
          goto LABEL_17;
        goto LABEL_56;
      default:
        v7 = TagFallback & 7;
LABEL_17:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
    return result;
  }
}

void sub_100BFA360()
{
  operator delete();
}

uint64_t sub_100BFA3B4(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v6 = *(_DWORD *)(result + 40);
  if ((v6 & 1) != 0)
  {
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(result + 32), (int)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v7 = *(_QWORD *)(v5 + 8);
  if (!v7)
    v7 = *(_QWORD *)(qword_1023113C0 + 8);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return result;
    goto LABEL_13;
  }
LABEL_10:
  v8 = *(_QWORD *)(v5 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_1023113C0 + 16);
  result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 8) != 0)
  {
LABEL_13:
    v9 = *(_QWORD *)(v5 + 24);
    if (!v9)
      v9 = *(_QWORD *)(qword_1023113C0 + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return result;
}

uint64_t sub_100BFA478(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  unsigned int v16;
  int v17;
  int v18;

  LOBYTE(v3) = *(_BYTE *)(a1 + 40);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 40);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 40) & 2) == 0)
      goto LABEL_19;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_1023113C0 + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B36580(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = (v4 + v8 + v9 + 1);
  v3 = *(_DWORD *)(a1 + 40);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_34;
    goto LABEL_28;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    v10 = *(_QWORD *)(qword_1023113C0 + 16);
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B39928(v10, a2);
  v12 = (int)v11;
  if (v11 >= 0x80)
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
  else
    v13 = 1;
  v4 = (v4 + v12 + v13 + 1);
  if ((*(_DWORD *)(a1 + 40) & 8) != 0)
  {
LABEL_28:
    v14 = *(_QWORD *)(a1 + 24);
    if (!v14)
      v14 = *(_QWORD *)(qword_1023113C0 + 24);
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100B3E798(v14, a2);
    v17 = (int)v15;
    if (v15 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, v16);
    else
      v18 = 1;
    v4 = (v4 + v17 + v18 + 1);
  }
LABEL_34:
  *(_DWORD *)(a1 + 36) = v4;
  return v4;
}

void sub_100BFA5D4(uint64_t a1, void *lpsrc)
{
  sub_100BF9B24(a1, (uint64_t)lpsrc);
}

uint64_t sub_100BFA620()
{
  return 1;
}

_QWORD *sub_100BFA628@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "CLP.LogEntry.Vision.LogEntry");
}

char *sub_100BFA63C(char *a1)
{
  char *v2;
  __CFNotificationCenter *DarwinNotifyCenter;

  *a1 = 0;
  v2 = a1 + 8;
  bzero(a1 + 8, 0x104A0uLL);
  *(_OWORD *)(a1 + 124) = 0u;
  *((_QWORD *)a1 + 2) = 0xBFF0000000000000;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 5) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_WORD *)a1 + 24) = 0;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)(a1 + 113) = 0;
  a1[121] = 1;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_OWORD *)(a1 + 156) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  *(_OWORD *)(a1 + 188) = 0u;
  *(_OWORD *)(a1 + 204) = 0u;
  *(_OWORD *)(a1 + 220) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_OWORD *)(a1 + 268) = 0u;
  *(_OWORD *)(a1 + 284) = 0u;
  *(_OWORD *)(a1 + 300) = 0u;
  *(_OWORD *)(a1 + 313) = 0u;
  *((_DWORD *)a1 + 83) = 2139095039;
  *((int32x2_t *)a1 + 42) = vdup_n_s32(0x7F7FFFFFu);
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *(_DWORD *)(v2 + 383) = 0;
  *(_OWORD *)(a1 + 396) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 428) = 0u;
  *(_DWORD *)(a1 + 443) = 0;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *(_QWORD *)(a1 + 511) = 0;
  *((_OWORD *)v2 + 32) = 0u;
  *((_OWORD *)v2 + 33) = 0u;
  *((_OWORD *)v2 + 34) = 0u;
  *((_OWORD *)v2 + 35) = 0u;
  *(_QWORD *)(v2 + 575) = 0;
  bzero(a1 + 592, 0x10003uLL);
  a1[66520] = 0;
  *(_OWORD *)(a1 + 66488) = 0u;
  *(_OWORD *)(a1 + 66504) = 0u;
  *(_OWORD *)(a1 + 66456) = 0u;
  *(_OWORD *)(a1 + 66472) = 0u;
  *(_OWORD *)(a1 + 66424) = 0u;
  *(_OWORD *)(a1 + 66440) = 0u;
  *(_OWORD *)(a1 + 66392) = 0u;
  *(_OWORD *)(a1 + 66408) = 0u;
  *(_OWORD *)(a1 + 66360) = 0u;
  *(_OWORD *)(a1 + 66376) = 0u;
  *(_OWORD *)(a1 + 66328) = 0u;
  *(_OWORD *)(a1 + 66344) = 0u;
  *(_OWORD *)(a1 + 66296) = 0u;
  *(_OWORD *)(a1 + 66312) = 0u;
  *(_OWORD *)(a1 + 66264) = 0u;
  *(_OWORD *)(a1 + 66280) = 0u;
  *(_OWORD *)(a1 + 66232) = 0u;
  *(_OWORD *)(a1 + 66248) = 0u;
  *(_OWORD *)(a1 + 66200) = 0u;
  *(_OWORD *)(a1 + 66216) = 0u;
  *(_OWORD *)(a1 + 66168) = 0u;
  *(_OWORD *)(a1 + 66184) = 0u;
  *(_OWORD *)(a1 + 66136) = 0u;
  *(_OWORD *)(a1 + 66152) = 0u;
  *((_DWORD *)a1 + 16680) = 0;
  *((_OWORD *)a1 + 4168) = 0u;
  *((_OWORD *)a1 + 4169) = 0u;
  *((_OWORD *)a1 + 4166) = 0u;
  *((_OWORD *)a1 + 4167) = 0u;
  *((_OWORD *)a1 + 4164) = 0u;
  *((_OWORD *)a1 + 4165) = 0u;
  *((_OWORD *)a1 + 4162) = 0u;
  *((_OWORD *)a1 + 4163) = 0u;
  *((_OWORD *)a1 + 4160) = 0u;
  *((_OWORD *)a1 + 4161) = 0u;
  *((_OWORD *)a1 + 4158) = 0u;
  *((_OWORD *)a1 + 4159) = 0u;
  *(_OWORD *)(a1 + 66728) = 0u;
  *(_OWORD *)(a1 + 66744) = 0u;
  *(_OWORD *)(a1 + 66760) = 0u;
  *(_OWORD *)(a1 + 66776) = 0u;
  *(_OWORD *)(a1 + 66792) = 0u;
  *(_OWORD *)(a1 + 66808) = 0u;
  sub_10055D44C(a1 + 66824, "CLFitnessTrackingAllDayAWD", 1, 1);
  if (&MCEffectiveSettingsChangedNotification)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_100BFA83C, MCEffectiveSettingsChangedNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  sub_100BFA844((uint64_t)a1);
  return a1;
}

void sub_100BFA818(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100BFCAAC(v1);
  _Unwind_Resume(a1);
}

void sub_100BFA83C(uint64_t a1, uint64_t a2)
{
  sub_100BFA844(a2);
}

void sub_100BFA844(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  __int16 v12;

  v10 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v12 = 256;
  if (objc_opt_class(MCProfileConnection, v2))
  {
    v3 = objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isWheelchairDataSubmissionAllowed");
    *(_BYTE *)a1 = v3;
    if (!v3)
      goto LABEL_5;
LABEL_11:
    if ((_BYTE)v12)
      pthread_mutex_unlock(v11);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    return;
  }
  if (*(_BYTE *)a1)
    goto LABEL_11;
LABEL_5:
  v4 = sub_100127B9C();
  sub_100081C10(v4, &v8);
  sub_1001E4874(v8, "EnableWheelchairAWDCollection", (BOOL *)a1);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (HIBYTE(v12))
    goto LABEL_11;
}

void sub_100BFA940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_10187E514((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100BFA96C()
{
  operator new();
}

void sub_100BFA9B0()
{
  operator delete();
}

uint64_t sub_100BFA9D4()
{
  if (qword_102307280 != -1)
    dispatch_once(&qword_102307280, &stru_102179898);
  return qword_1023113C8;
}

uint64_t sub_100BFAA18(uint64_t a1, int a2, double a3)
{
  double *v5;
  uint64_t v6;

  v5 = (double *)(a1 + 66736);
  v6 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  if (a2)
  {
    if (a2 == 2)
    {
      ++v5;
    }
    else if (a2 != 1)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    }
  }
  else
  {
    v5 += 2;
  }
  *v5 = *v5 + a3;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

uint64_t sub_100BFAAA8(uint64_t a1, int a2, uint64_t a3, float a4, float a5)
{
  float *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;

  v9 = (float *)(a1 + 66760);
  v10 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v12 = (_DWORD *)(a3 + 8);
  v11 = *(unsigned int *)(a3 + 8);
  if ((_DWORD)v11 == 90603)
  {
    *v9 = *v9 + a4;
  }
  else if (*(_BYTE *)(a3 + 208))
  {
    if ((CLMotionActivity::isTypePedestrian(v11) & 1) != 0 || (*v12 - 61) <= 1)
    {
      v9[1] = v9[1] + a4;
    }
    else if (CLMotionActivity::isTypeSwimming())
    {
      v9[2] = v9[2] + a4;
    }
    else if (CLMotionActivity::isTypeCycling(*v12))
    {
      v9[3] = v9[3] + a4;
    }
    else
    {
      v9[4] = v9[4] + a4;
    }
  }
  else if ((_DWORD)v11 == 7)
  {
    if (a5 <= 1.6)
    {
      v9[8] = v9[8] + a4;
    }
    else if (a2)
    {
      v9[7] = v9[7] + a4;
    }
    else
    {
      v9[6] = v9[6] + a4;
    }
  }
  else if ((_DWORD)v11 == 11805)
  {
    v9[5] = v9[5] + a4;
  }
  else if (CLMotionActivity::isStatic((CLMotionActivity *)(a3 + 8)))
  {
    v9[9] = v9[9] + a4;
  }
  else
  {
    v9[10] = v9[10] + a4;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
}

void sub_100BFAC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFAC68(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*(_DWORD *)(a1 + 104);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
}

uint64_t sub_100BFACBC(uint64_t a1, int a2)
{
  _DWORD *v3;
  uint64_t v4;

  v3 = (_DWORD *)(a1 + 66808);
  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  ++*v3;
  if (a2)
    ++v3[1];
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

uint64_t sub_100BFAD2C(uint64_t a1, float a2, float a3)
{
  float *v5;
  uint64_t v6;
  float v7;

  v5 = (float *)(a1 + 66816);
  v6 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v7 = v5[1] + a3;
  *v5 = *v5 + a2;
  v5[1] = v7;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

uint64_t sub_100BFAD94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  float *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  float *v24;
  uint64_t v25;
  char *v26;
  unsigned __int32 v27;
  unint64_t v28;
  float v29;
  float *v30;
  float *v31;
  float *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  float *v38;
  char *v39;
  unsigned __int32 v40;
  unint64_t v41;
  float v42;
  float *v43;
  float *v44;
  float *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  float *v51;
  char *v52;
  unsigned __int32 v53;

  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5.n128_u32[0] = *(_DWORD *)(a2 + 27);
  v6.n128_u32[0] = *(_DWORD *)(a2 + 31);
  v7 = *(float *)(a2 + 35);
  v8 = *(float *)(a2 + 39);
  v9 = *(float *)(a2 + 43);
  v10 = *(float *)(a2 + 47);
  ++*(_DWORD *)(a1 + 116);
  v11 = *(_QWORD *)(a1 + 184);
  v12 = *(float **)(a1 + 192);
  v13 = (uint64_t)v12 - v11;
  if ((unint64_t)v12 - v11 <= 0x18F)
  {
    v14 = v6.n128_f32[0] - v5.n128_f32[0];
    v15 = *(_QWORD *)(a1 + 200);
    if ((unint64_t)v12 >= v15)
    {
      v17 = v13 >> 2;
      v18 = v15 - v11;
      if (v18 >> 1 <= (unint64_t)((v13 >> 2) + 1))
        v19 = v17 + 1;
      else
        v19 = v18 >> 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      v21 = (char *)sub_100260634(a1 + 200, v20);
      v22 = *(char **)(a1 + 184);
      v23 = *(char **)(a1 + 192);
      v24 = (float *)&v21[4 * v17];
      v26 = &v21[4 * v25];
      *v24 = v14;
      v16 = v24 + 1;
      while (v23 != v22)
      {
        v27 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        v5.n128_u32[0] = v27;
        *((_DWORD *)v24-- - 1) = v27;
      }
      *(_QWORD *)(a1 + 184) = v24;
      *(_QWORD *)(a1 + 192) = v16;
      *(_QWORD *)(a1 + 200) = v26;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v12 = v14;
      v16 = v12 + 1;
    }
    v28 = *(_QWORD *)(a1 + 224);
    *(_QWORD *)(a1 + 192) = v16;
    v29 = v8 - v7;
    v30 = *(float **)(a1 + 216);
    if ((unint64_t)v30 >= v28)
    {
      v32 = *(float **)(a1 + 208);
      v33 = v30 - v32;
      if ((unint64_t)(v33 + 1) >> 62)
        sub_100259694();
      v34 = v28 - (_QWORD)v32;
      v35 = (uint64_t)(v28 - (_QWORD)v32) >> 1;
      if (v35 <= v33 + 1)
        v35 = v33 + 1;
      if (v34 >= 0x7FFFFFFFFFFFFFFCLL)
        v36 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v36 = v35;
      if (v36)
      {
        v37 = (char *)sub_100260634(a1 + 224, v36);
        v32 = *(float **)(a1 + 208);
        v30 = *(float **)(a1 + 216);
      }
      else
      {
        v37 = 0;
      }
      v38 = (float *)&v37[4 * v33];
      v39 = &v37[4 * v36];
      *v38 = v29;
      v31 = v38 + 1;
      while (v30 != v32)
      {
        v40 = *((_DWORD *)v30-- - 1);
        v5.n128_u32[0] = v40;
        *((_DWORD *)v38-- - 1) = v40;
      }
      *(_QWORD *)(a1 + 208) = v38;
      *(_QWORD *)(a1 + 216) = v31;
      *(_QWORD *)(a1 + 224) = v39;
      if (v32)
        operator delete(v32);
    }
    else
    {
      *v30 = v29;
      v31 = v30 + 1;
    }
    v41 = *(_QWORD *)(a1 + 248);
    *(_QWORD *)(a1 + 216) = v31;
    v42 = v10 - v9;
    v43 = *(float **)(a1 + 240);
    if ((unint64_t)v43 >= v41)
    {
      v45 = *(float **)(a1 + 232);
      v46 = v43 - v45;
      if ((unint64_t)(v46 + 1) >> 62)
        sub_100259694();
      v47 = v41 - (_QWORD)v45;
      v48 = (uint64_t)(v41 - (_QWORD)v45) >> 1;
      if (v48 <= v46 + 1)
        v48 = v46 + 1;
      if (v47 >= 0x7FFFFFFFFFFFFFFCLL)
        v49 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v49 = v48;
      if (v49)
      {
        v50 = (char *)sub_100260634(a1 + 248, v49);
        v45 = *(float **)(a1 + 232);
        v43 = *(float **)(a1 + 240);
      }
      else
      {
        v50 = 0;
      }
      v51 = (float *)&v50[4 * v46];
      v52 = &v50[4 * v49];
      *v51 = v42;
      v44 = v51 + 1;
      while (v43 != v45)
      {
        v53 = *((_DWORD *)v43-- - 1);
        v5.n128_u32[0] = v53;
        *((_DWORD *)v51-- - 1) = v53;
      }
      *(_QWORD *)(a1 + 232) = v51;
      *(_QWORD *)(a1 + 240) = v44;
      *(_QWORD *)(a1 + 248) = v52;
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v43 = v42;
      v44 = v43 + 1;
    }
    *(_QWORD *)(a1 + 240) = v44;
  }
  return (*(uint64_t (**)(uint64_t, __n128, __n128))(*(_QWORD *)v4 + 24))(v4, v5, v6);
}

void sub_100BFB04C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB06C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 121) = a2;
  *(_BYTE *)(result + 120) = 1;
  return result;
}

uint64_t sub_100BFB07C(_QWORD *a1, float a2)
{
  _QWORD *v4;
  unint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  char *v15;
  int v16;

  v4 = a1 + 8353;
  (*(void (**)(_QWORD *))(a1[8353] + 16))(a1 + 8353);
  v5 = a1[22];
  v6 = (float *)a1[21];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (float *)a1[20];
    v9 = v6 - v8;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_100259694();
    v10 = v5 - (_QWORD)v8;
    v11 = (uint64_t)(v5 - (_QWORD)v8) >> 1;
    if (v11 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
    {
      v13 = (char *)sub_100260634((uint64_t)(a1 + 22), v12);
      v8 = (float *)a1[20];
      v6 = (float *)a1[21];
    }
    else
    {
      v13 = 0;
    }
    v14 = (float *)&v13[4 * v9];
    v15 = &v13[4 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    while (v6 != v8)
    {
      v16 = *((_DWORD *)v6-- - 1);
      *((_DWORD *)v14-- - 1) = v16;
    }
    a1[20] = v14;
    a1[21] = v7;
    a1[22] = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = a2;
    v7 = v6 + 1;
  }
  a1[21] = v7;
  return (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
}

void sub_100BFB1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB1BC(uint64_t a1, float a2)
{
  uint64_t v3;
  uint64_t v4;
  float *v5;
  unint64_t v6;
  float *v7;
  float *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  float *v14;
  char *v15;
  int v16;

  v3 = a1 + 66688;
  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *(float **)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(float **)v3;
    v9 = ((uint64_t)v5 - *(_QWORD *)v3) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      sub_100259694();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_100260634(v3 + 16, v12);
      v8 = *(float **)v3;
      v5 = *(float **)(v3 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (float *)&v13[4 * v9];
    v15 = &v13[4 * v12];
    *v14 = a2;
    v7 = v14 + 1;
    while (v5 != v8)
    {
      v16 = *((_DWORD *)v5-- - 1);
      *((_DWORD *)v14-- - 1) = v16;
    }
    *(_QWORD *)v3 = v14;
    *(_QWORD *)(v3 + 8) = v7;
    *(_QWORD *)(v3 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 8) = v7;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 136) + 24))(v4);
}

void sub_100BFB2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  v3 = a1 + 66136;
  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *(_QWORD **)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD **)v3;
    v9 = ((uint64_t)v5 - *(_QWORD *)v3) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(v3 + 16, v12);
      v8 = *(_QWORD **)v3;
      v5 = *(_QWORD **)(v3 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v3 = v14;
    *(_QWORD *)(v3 + 8) = v7;
    *(_QWORD *)(v3 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 8) = v7;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021798B8);
  v17 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating impact cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021798B8);
    v21 = 134217984;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Updating impact cancelation reason 0x%llx", &v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateImpactCancelationReason(const uint64_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100BFB590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  v3 = a1 + 66824;
  v4 = a1 + 66160;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(v4 + 16, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021798B8);
  v17 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating outdoor cycling cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021798B8);
    v21 = 134217984;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Updating outdoor cycling cancelation reason 0x%llx", &v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOutdoorCyclingWorkoutImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_100BFB854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFB87C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  v3 = a1 + 66184;
  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *(_QWORD **)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD **)v3;
    v9 = ((uint64_t)v5 - *(_QWORD *)v3) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(v3 + 16, v12);
      v8 = *(_QWORD **)v3;
      v5 = *(_QWORD **)(v3 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v3 = v14;
    *(_QWORD *)(v3 + 8) = v7;
    *(_QWORD *)(v3 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 8) = v7;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021798B8);
  v17 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating outdoor walking cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021798B8);
    v21 = 134217984;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Updating outdoor walking cancelation reason 0x%llx", &v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOutdoorWalkingImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100BFBB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFBB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  v3 = a1 + 66824;
  v4 = a1 + 66208;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(v4 + 16, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021798B8);
  v17 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating outdoor running cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021798B8);
    v21 = 134217984;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Updating outdoor running cancelation reason 0x%llx", &v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOutdoorRunningImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_100BFBDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFBE00(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  v3 = a1 + 66232;
  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *(_QWORD **)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD **)v3;
    v9 = ((uint64_t)v5 - *(_QWORD *)v3) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(v3 + 16, v12);
      v8 = *(_QWORD **)v3;
      v5 = *(_QWORD **)(v3 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v3 = v14;
    *(_QWORD *)(v3 + 8) = v7;
    *(_QWORD *)(v3 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v3 + 8) = v7;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021798B8);
  v17 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating hiking cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021798B8);
    v21 = 134217984;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Updating hiking cancelation reason 0x%llx", &v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateHikingWorkoutImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

void sub_100BFC098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFC0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v19;
  uint8_t *v20;
  int v21;
  uint64_t v22;
  uint8_t buf[4];
  uint64_t v24;

  v3 = a1 + 66824;
  v4 = a1 + 66256;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0(v4 + 16, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021798B8);
  v17 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFitnessTrackingAllDayAWD: Updating other workout cancelation reason 0x%llx", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_1021798B8);
    v21 = 134217984;
    v22 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 2, "CLFitnessTrackingAllDayAWD: Updating other workout cancelation reason 0x%llx", &v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLFitnessTrackingAllDayAWD::updateOtherWorkoutImpactCancellationReason(const uint64_t)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
}

void sub_100BFC35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFC384(uint64_t a1, float a2)
{
  uint64_t v4;

  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  *(float *)(a1 + 332) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

float sub_100BFC3DC(uint64_t a1)
{
  uint64_t v2;
  float v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(float *)(a1 + 332);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100BFC434(uint64_t a1, float a2)
{
  uint64_t v4;

  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  *(float *)(a1 + 336) = a2;
  *(_BYTE *)(a1 + 328) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

float sub_100BFC494(uint64_t a1)
{
  uint64_t v2;
  float v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  if (*(_BYTE *)(a1 + 328))
    v3 = *(float *)(a1 + 336);
  else
    v3 = -1.0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100BFC4FC(uint64_t a1, float a2)
{
  uint64_t v4;

  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  *(float *)(a1 + 340) = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
}

float sub_100BFC554(uint64_t a1)
{
  uint64_t v2;
  float v3;

  v2 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v3 = *(float *)(a1 + 340);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

uint64_t sub_100BFC5AC(uint64_t a1, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v7;
  void **v8;
  _WORD *v9;
  uint64_t v10;
  unint64_t v11;
  _WORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int16 v23;
  unint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int16 v36;
  unint64_t v37;
  char *v38;
  _WORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int16 v49;

  v7 = a1 + 66824;
  v8 = (void **)(a1 + 66448);
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v9 = v8[1];
  v10 = (char *)v9 - (_BYTE *)*v8;
  if ((unint64_t)v10 <= 0xC7)
  {
    v11 = (unint64_t)v8[2];
    if ((unint64_t)v9 >= v11)
    {
      v13 = v10 >> 1;
      v14 = v11 - (_QWORD)*v8;
      if (v14 <= (v10 >> 1) + 1)
        v15 = v13 + 1;
      else
        v15 = v11 - (_QWORD)*v8;
      if (v14 >= 0x7FFFFFFFFFFFFFFELL)
        v16 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v17 = (char *)sub_100BFCCD8((uint64_t)(v8 + 2), v16);
      v18 = (char *)*v8;
      v19 = (char *)v8[1];
      v20 = &v17[2 * v13];
      v22 = &v17[2 * v21];
      *(_WORD *)v20 = a2;
      v12 = v20 + 2;
      while (v19 != v18)
      {
        v23 = *((_WORD *)v19 - 1);
        v19 -= 2;
        *((_WORD *)v20 - 1) = v23;
        v20 -= 2;
      }
      *v8 = v20;
      v8[1] = v12;
      v8[2] = v22;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = a2;
      v12 = v9 + 1;
    }
    v24 = (unint64_t)v8[5];
    v8[1] = v12;
    v25 = (char *)v8[4];
    if ((unint64_t)v25 >= v24)
    {
      v27 = (char *)v8[3];
      v28 = v25 - v27;
      if (v25 - v27 <= -3)
        sub_100259694();
      v29 = v28 >> 1;
      v30 = v24 - (_QWORD)v27;
      if (v30 <= (v28 >> 1) + 1)
        v31 = v29 + 1;
      else
        v31 = v30;
      if (v30 >= 0x7FFFFFFFFFFFFFFELL)
        v32 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      if (v32)
      {
        v33 = (char *)sub_100BFCCD8((uint64_t)(v8 + 5), v32);
        v27 = (char *)v8[3];
        v25 = (char *)v8[4];
      }
      else
      {
        v33 = 0;
      }
      v34 = &v33[2 * v29];
      v35 = &v33[2 * v32];
      *(_WORD *)v34 = a3;
      v26 = v34 + 2;
      while (v25 != v27)
      {
        v36 = *((_WORD *)v25 - 1);
        v25 -= 2;
        *((_WORD *)v34 - 1) = v36;
        v34 -= 2;
      }
      v8[3] = v34;
      v8[4] = v26;
      v8[5] = v35;
      if (v27)
        operator delete(v27);
    }
    else
    {
      *(_WORD *)v25 = a3;
      v26 = v25 + 2;
    }
    v37 = (unint64_t)v8[8];
    v8[4] = v26;
    v38 = (char *)v8[7];
    if ((unint64_t)v38 >= v37)
    {
      v40 = (char *)v8[6];
      v41 = v38 - v40;
      if (v38 - v40 <= -3)
        sub_100259694();
      v42 = v41 >> 1;
      v43 = v37 - (_QWORD)v40;
      if (v43 <= (v41 >> 1) + 1)
        v44 = v42 + 1;
      else
        v44 = v43;
      if (v43 >= 0x7FFFFFFFFFFFFFFELL)
        v45 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v45 = v44;
      if (v45)
      {
        v46 = (char *)sub_100BFCCD8((uint64_t)(v8 + 8), v45);
        v40 = (char *)v8[6];
        v38 = (char *)v8[7];
      }
      else
      {
        v46 = 0;
      }
      v47 = &v46[2 * v42];
      v48 = &v46[2 * v45];
      *(_WORD *)v47 = a4;
      v39 = v47 + 2;
      while (v38 != v40)
      {
        v49 = *((_WORD *)v38 - 1);
        v38 -= 2;
        *((_WORD *)v47 - 1) = v49;
        v47 -= 2;
      }
      v8[6] = v47;
      v8[7] = v39;
      v8[8] = v48;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_WORD *)v38 = a4;
      v39 = v38 + 2;
    }
    v8[7] = v39;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_100BFC824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFC844(uint64_t a1, int a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;
  float v22;
  float *v23;
  float *v24;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  float *v31;
  char *v32;
  int v33;

  v7 = a1 + 66824;
  v8 = a1 + 66528;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  v9 = *(_DWORD **)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16);
  if ((unint64_t)v9 >= v10)
  {
    v12 = *(_DWORD **)v8;
    v13 = ((uint64_t)v9 - *(_QWORD *)v8) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      sub_100259694();
    v15 = v10 - (_QWORD)v12;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)sub_100260634(v8 + 16, v16);
      v12 = *(_DWORD **)v8;
      v9 = *(_DWORD **)(v8 + 8);
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v19 = &v17[4 * v16];
    *(_DWORD *)v18 = a2;
    v11 = v18 + 4;
    while (v9 != v12)
    {
      v20 = *--v9;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    *(_QWORD *)v8 = v18;
    *(_QWORD *)(v8 + 8) = v11;
    *(_QWORD *)(v8 + 16) = v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *v9 = a2;
    v11 = v9 + 1;
  }
  v21 = *(_QWORD *)(v8 + 40);
  *(_QWORD *)(v8 + 8) = v11;
  v22 = a4 - a3;
  v23 = *(float **)(v8 + 32);
  if ((unint64_t)v23 >= v21)
  {
    v25 = *(float **)(v8 + 24);
    v26 = v23 - v25;
    if ((unint64_t)(v26 + 1) >> 62)
      sub_100259694();
    v27 = v21 - (_QWORD)v25;
    v28 = (uint64_t)(v21 - (_QWORD)v25) >> 1;
    if (v28 <= v26 + 1)
      v28 = v26 + 1;
    if (v27 >= 0x7FFFFFFFFFFFFFFCLL)
      v29 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
    {
      v30 = (char *)sub_100260634(v8 + 40, v29);
      v25 = *(float **)(v8 + 24);
      v23 = *(float **)(v8 + 32);
    }
    else
    {
      v30 = 0;
    }
    v31 = (float *)&v30[4 * v26];
    v32 = &v30[4 * v29];
    *v31 = v22;
    v24 = v31 + 1;
    while (v23 != v25)
    {
      v33 = *((_DWORD *)v23-- - 1);
      *((_DWORD *)v31-- - 1) = v33;
    }
    *(_QWORD *)(v8 + 24) = v31;
    *(_QWORD *)(v8 + 32) = v24;
    *(_QWORD *)(v8 + 40) = v32;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v23 = v22;
    v24 = v23 + 1;
  }
  *(_QWORD *)(v8 + 32) = v24;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
}

void sub_100BFCA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100BFCA54(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 66520;
  v4 = a1 + 66824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 66824) + 16))(a1 + 66824);
  *(_BYTE *)v3 = a2;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 304) + 24))(v4);
}

uint64_t sub_100BFCAAC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  v2 = a1 + 66440;
  v3 = *(void **)(a1 + 66680);
  if (v3)
  {
    *(_QWORD *)(v2 + 248) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v2 + 104);
  if (v4)
  {
    *(_QWORD *)(v2 + 112) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 + 80);
  if (v5)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(v2 + 48);
  if (v6)
  {
    *(_QWORD *)(v2 + 56) = v6;
    operator delete(v6);
  }
  v7 = (void **)(a1 + 66128);
  v8 = *(void **)(v2 + 24);
  if (v8)
  {
    *(_QWORD *)(v2 + 32) = v8;
    operator delete(v8);
  }
  v9 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 66248);
  if (v10)
  {
    *(_QWORD *)(a1 + 66256) = v10;
    operator delete(v10);
  }
  v11 = *(void **)(a1 + 66224);
  if (v11)
  {
    *(_QWORD *)(a1 + 66232) = v11;
    operator delete(v11);
  }
  v12 = *(void **)(a1 + 66200);
  if (v12)
  {
    *(_QWORD *)(a1 + 66208) = v12;
    operator delete(v12);
  }
  v13 = *(void **)(a1 + 66176);
  if (v13)
  {
    *(_QWORD *)(a1 + 66184) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 66152);
  if (v14)
  {
    *(_QWORD *)(a1 + 66160) = v14;
    operator delete(v14);
  }
  v15 = *v7;
  if (*v7)
  {
    *(_QWORD *)(a1 + 66136) = v15;
    operator delete(v15);
  }
  v16 = *(void **)(a1 + 296);
  if (v16)
  {
    *(_QWORD *)(a1 + 304) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 272);
  if (v17)
  {
    *(_QWORD *)(a1 + 280) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(a1 + 248);
  if (v18)
  {
    *(_QWORD *)(a1 + 256) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(a1 + 224);
  if (v19)
  {
    *(_QWORD *)(a1 + 232) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(a1 + 200);
  if (v20)
  {
    *(_QWORD *)(a1 + 208) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(a1 + 176);
  if (v21)
  {
    *(_QWORD *)(a1 + 184) = v21;
    operator delete(v21);
  }
  v22 = *(void **)(a1 + 152);
  if (v22)
  {
    *(_QWORD *)(a1 + 160) = v22;
    operator delete(v22);
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

_QWORD *sub_100BFCC24(_QWORD *result, const void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100BFCC9C(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100BFCC80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100BFCC9C(_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    sub_100259694();
  result = (char *)sub_100BFCCD8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *sub_100BFCCD8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_10025955C();
  return operator new(2 * a2);
}

void sub_100BFCD08(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_100BFCD34()
{
  sub_1015A2E04(qword_102307268, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307268, (void *)&_mh_execute_header);
}

void sub_100BFCE1C(id a1)
{
  qword_1023072A0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSimulationControllerSilo"));
}

void sub_100BFD0A8()
{
  operator delete();
}

void sub_100BFD218(uint64_t a1, int a2)
{
  char v2;

  v2 = a2;
  if (a2 && !*(_BYTE *)(a1 + 1745) && sub_1007629CC())
    sub_100BFD340(a1);
  *(_BYTE *)(a1 + 1745) = v2;
}

void sub_100BFD340(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v2 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 72);
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulation stop request received\", \"fSimulationRunning\":%{public}hhd}", (uint8_t *)v4, 0x18u);
  }
  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
    sub_100C01240(a1);
    objc_msgSend(*(id *)(a1 + 1680), "setNextFireDelay:", 1.79769313e308);
  }
}

void sub_100BFD534(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v2 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 72);
    v4 = *(unsigned __int8 *)(a1 + 1745);
    v5[0] = 68289538;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 1026;
    v9 = v3;
    v10 = 1026;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulation start request received\", \"fSimulationRunning\":%{public}hhd, \"fIsInEmergencyState\":%{public}hhd}", (uint8_t *)v5, 0x1Eu);
  }
  if (!*(_BYTE *)(a1 + 72) && (!*(_BYTE *)(a1 + 1745) || (sub_1007629CC() & 1) == 0))
  {
    *(_BYTE *)(a1 + 72) = 1;
    sub_100C01240(a1);
    sub_100C00DD4((id *)a1);
  }
}

void sub_100BFD66C(uint64_t a1, const void *a2)
{
  const void *v4;

  sub_100C00B08(a1, 1);
  v4 = *(const void **)(a1 + 1736);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 1736) = a2;
  if (a2)
  {
    CFRetain(a2);
    sub_100BFFA84(a1);
  }
}

void sub_100BFD8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1000F34E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100BFD93C(unsigned __int8 *result, unsigned int a2)
{
  uint64_t v3;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (result[1728] != a2)
  {
    v3 = (uint64_t)result;
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v4 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 68289282;
      v5[1] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2050;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationDeliveryBehavior\":%{public, location:CLSimulationLocationDeliveryBehavior}lld}", (uint8_t *)v5, 0x1Cu);
    }
    *(_BYTE *)(v3 + 1728) = a2;
    return (unsigned __int8 *)sub_100C01240(v3);
  }
  return result;
}

void sub_100BFDA5C(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2050;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationRepeatBehavior\":%{public, location:CLSimulationLocationRepeatBehavior}lld}", (uint8_t *)v5, 0x1Cu);
  }
  *(_BYTE *)(a1 + 1729) = a2;
}

double sub_100BFDB84(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  double result;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  double v11;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"intermediateLocationDistance\":\"%{public}f\"}", (uint8_t *)v7, 0x1Cu);
  }
  result = *a2;
  *(double *)(a1 + 1688) = *a2;
  return result;
}

double sub_100BFDCB0(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  double result;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  double v11;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationInterval_s\":\"%{public}.09f\"}", (uint8_t *)v7, 0x1Cu);
  }
  result = *a2;
  *(double *)(a1 + 1696) = *a2;
  return result;
}

double sub_100BFDDDC(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  double result;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  double v11;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Travelling speed changed\", \"travellingSpeed\":\"%{public}f\"}", (uint8_t *)v7, 0x1Cu);
  }
  result = *a2;
  *(double *)(a1 + 1704) = *a2;
  return result;
}

id sub_100BFDEEC(id *a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slv Simulating a visit event\"}", (uint8_t *)v6, 0x12u);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", CFSTR("CLSignificantVisitManager")), "simulateVisit:", a2);
}

id sub_100BFE000(id *a1, void *a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  id v10;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#slc Simulating an SLC event\", \"location\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", CFSTR("CLSignificantChangeManager")), "simulateSignificantLocationChange:", a2);
}

id sub_100BFE12C(id *a1, void *a2, uint64_t a3)
{
  NSObject *v6;
  id v7;
  _QWORD v9[5];
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  id v15;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v6 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2082;
    v15 = objc_msgSend(a2, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Returning fences for bundleID\", \"bundleID\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v7 = objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:forClient:", CFSTR("CLFenceManager"), CFSTR("CLSimulationController"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100C01290;
  v9[3] = &unk_102179900;
  v9[4] = a3;
  return objc_msgSend(v7, "getFencesForBundleID:withReply:", a2, v9);
}

id sub_100BFE29C(id *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  id v18;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v10 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289538;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = objc_msgSend(a2, "UTF8String");
    v17 = 2082;
    v18 = objc_msgSend(a3, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulating a fence entry/exit for fence\", \"bundleID\":%{public, location:escape_only}s, \"fenceID\":%{public, location:escape_only}s}", (uint8_t *)v12, 0x26u);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", CFSTR("CLFenceManager")), "simulateFenceWithBundleID:andFenceID:eventType:atLocation:", a2, a3, a4, a5);
}

id sub_100BFE408(id *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  _DWORD v12[2];
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v10 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 68289794;
    v12[1] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = objc_msgSend(a2, "UTF8String");
    v17 = 1026;
    v18 = a3;
    v19 = 1026;
    v20 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulating beacon region entry/exit.\", \"proximityUUID: \":%{public, location:escape_only}s, \"major: \":%{public}d, \"minor: \":%{public}d}", (uint8_t *)v12, 0x28u);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*a1, "vendor"), "proxyForService:", CFSTR("CLBTLEFenceManager")), "simulateBeaconWithProximityUUID:major:minor:eventType:", a2, a3, a4, a5);
}

uint64_t sub_100BFE888(uint64_t a1, void *a2)
{
  uint64_t v9;
  id v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  double v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  int v43;
  int v45;
  const char *v46;
  char *v47;
  __int128 v48;
  BOOL v49;
  _BYTE v50[96];
  _BYTE v51[60];
  _QWORD v52[5];
  uint64_t buf;
  __int128 v54;
  __int16 v55;
  _BYTE *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 48;
  *(_QWORD *)(a1 + 56) = a1 + 48;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 88) = 0xFFFF;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 108) = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 124) = _Q1;
  *(_OWORD *)(a1 + 140) = _Q1;
  *(_OWORD *)(a1 + 156) = _Q1;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 200) = 0;
  *(_DWORD *)(a1 + 244) = 0xFFFF;
  v9 = a1 + 244;
  *(_QWORD *)(a1 + 204) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 212) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 272) = xmmword_101BAFEE0;
  *(_OWORD *)(a1 + 288) = _Q1;
  *(_OWORD *)(a1 + 304) = _Q1;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  *(_QWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 332) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 368) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 396) = 0;
  *(_QWORD *)(a1 + 380) = 0;
  *(_QWORD *)(a1 + 388) = 0;
  *(_QWORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 400) = 0xFFFF;
  *(_QWORD *)(a1 + 404) = 0;
  *(_QWORD *)(a1 + 412) = 0;
  v48 = _Q1;
  *(_OWORD *)(a1 + 420) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 436) = _Q1;
  *(_OWORD *)(a1 + 452) = _Q1;
  *(_OWORD *)(a1 + 468) = _Q1;
  *(_DWORD *)(a1 + 484) = 0;
  *(_QWORD *)(a1 + 488) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 516) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  memcpy((void *)(a1 + 560), &unk_101BB5438, 0x230uLL);
  memcpy((void *)(v9 + 876), &unk_101BB5438, 0x230uLL);
  *(_QWORD *)(v9 + 1492) = 0;
  *(_WORD *)(v9 + 1500) = 0;
  objc_msgSend(a2, "silo");
  sub_100C00B08(a1, 1);
  v10 = objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "newTimer");
  *(_QWORD *)(a1 + 1680) = v10;
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_100BFF1C8;
  v52[3] = &unk_10212ECA0;
  v52[4] = a1;
  objc_msgSend(v10, "setHandler:", v52);
  *(_DWORD *)v50 = 0xFFFF;
  *(_OWORD *)&v50[4] = 0uLL;
  *(_OWORD *)&v50[36] = v48;
  *(_OWORD *)&v50[52] = v48;
  *(_QWORD *)&v50[68] = v48;
  *(_DWORD *)&v50[84] = 0;
  *(_OWORD *)&v51[4] = 0uLL;
  *(_QWORD *)&v51[20] = 0xBFF0000000000000;
  memset(&v51[40], 0, 17);
  *(_DWORD *)v51 = 1;
  *(_QWORD *)&v51[28] = 0x327FFFFFFFLL;
  *(_OWORD *)&v50[20] = xmmword_101C1E3E0;
  *(_QWORD *)&v50[76] = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)&v50[88] = 0xBFF0000000000000;
  *(_DWORD *)&v51[36] = 1;
  sub_1001E4804(&buf);
  if (sub_1001FD98C(buf, "SimulatedLocationLatitude", &v50[4]))
  {
    sub_1001E4804(&v57);
    v11 = sub_1001FD98C(v57, "SimulatedLocationLongitude", &v50[12]);
    v12 = v58;
    if (v58)
    {
      p_shared_owners = (unint64_t *)&v58->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v15 = (std::__shared_weak_count *)v54;
  if ((_QWORD)v54)
  {
    v16 = (unint64_t *)(v54 + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v11)
  {
    sub_1001E4804(&buf);
    sub_1001FD98C(buf, "SimulatedLocationAccuracy", &v50[20]);
    v18 = (std::__shared_weak_count *)v54;
    if ((_QWORD)v54)
    {
      v19 = (unint64_t *)(v54 + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    sub_1001E4804(&buf);
    sub_1001E4B84(buf, "SimulatedLocationType", v51);
    v21 = (std::__shared_weak_count *)v54;
    if ((_QWORD)v54)
    {
      v22 = (unint64_t *)(v54 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    sub_1001E4804(&buf);
    sub_1001FD98C(buf, "SimulatedLocationAltitude", &v50[28]);
    v24 = (std::__shared_weak_count *)v54;
    if ((_QWORD)v54)
    {
      v25 = (unint64_t *)(v54 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    sub_1001E4804(&buf);
    sub_1001FD98C(buf, "SimulatedLocationAltitudeAccuracy", &v50[36]);
    v27 = (std::__shared_weak_count *)v54;
    if ((_QWORD)v54)
    {
      v28 = (unint64_t *)(v54 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v30 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289539;
      LOWORD(v54) = 2082;
      *(_QWORD *)((char *)&v54 + 2) = "";
      WORD5(v54) = 1040;
      HIDWORD(v54) = 156;
      v55 = 2097;
      v56 = v50;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Using simulated location from defaults\", \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x22u);
    }
  }
  else
  {
    memset(v51, 0, 20);
    memset(&v51[32], 0, 25);
    *(_DWORD *)v50 = 0xFFFF;
    *(_QWORD *)&v50[4] = 0;
    *(_QWORD *)&v50[12] = 0;
    *(_OWORD *)&v50[20] = xmmword_101BAFC90;
    *(_OWORD *)&v50[36] = v48;
    *(_OWORD *)&v50[52] = v48;
    *(_OWORD *)&v50[68] = v48;
    *(_DWORD *)&v50[84] = 0;
    *(_QWORD *)&v50[88] = 0xBFF0000000000000;
    *(_QWORD *)&v51[20] = 0xBFF0000000000000;
    *(_DWORD *)&v51[28] = 0x7FFFFFFF;
  }
  v31 = *(double *)&v50[20];
  if (*(double *)&v50[20] > 0.0)
  {
    buf = (uint64_t)&buf;
    *(_QWORD *)&v54 = &buf;
    *((_QWORD *)&v54 + 1) = 0;
    v32 = operator new(0xB0uLL);
    v33 = *(_OWORD *)&v51[16];
    v32[7] = *(_OWORD *)v51;
    v32[8] = v33;
    v32[9] = *(_OWORD *)&v51[32];
    *(_OWORD *)((char *)v32 + 156) = *(_OWORD *)&v51[44];
    v34 = *(_OWORD *)&v50[48];
    v32[3] = *(_OWORD *)&v50[32];
    v32[4] = v34;
    v35 = *(_OWORD *)&v50[80];
    v32[5] = *(_OWORD *)&v50[64];
    v32[6] = v35;
    v36 = *(_OWORD *)&v50[16];
    v32[1] = *(_OWORD *)v50;
    v32[2] = v36;
    *(_QWORD *)v32 = &buf;
    *((_QWORD *)v32 + 1) = &buf;
    *(_QWORD *)&v54 = v32;
    buf = (uint64_t)v32;
    *((_QWORD *)&v54 + 1) = 1;
    sub_100C01200(a1);
    sub_100C00D74((uint64_t *)a1, (uint64_t)&buf);
    sub_100BFD93C((unsigned __int8 *)a1, 0);
    sub_100BFD534(a1);
    sub_1000F34E0(&buf);
  }
  *(_QWORD *)(a1 + 8) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor", v31), "proxyForService:", CFSTR("CLSimulatedLocationProvider"));
  *(_QWORD *)(a1 + 16) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLWifiLocationProvider"));
  *(_QWORD *)(a1 + 24) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLAccessoryLocationProvider"));
  *(_QWORD *)(a1 + 32) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLGnssProvider"));
  *(_QWORD *)(a1 + 40) = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLUnifiedCellLocationProvider"));
  v49 = 0;
  *(_BYTE *)(a1 + 1744) = 0;
  sub_1001E4804(&buf);
  v37 = sub_1001E4874(buf, "InterpretLifeSpanAsCourseAccuracyInSimulation", &v49);
  v38 = v37;
  v39 = (std::__shared_weak_count *)v54;
  if (!(_QWORD)v54)
    goto LABEL_45;
  v40 = (unint64_t *)(v54 + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_45:
    if (!v37)
      goto LABEL_47;
    goto LABEL_46;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  if (v38)
LABEL_46:
    *(_BYTE *)(a1 + 1744) = v49;
LABEL_47:
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_102179940);
  v42 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v43 = *(unsigned __int8 *)(a1 + 1744);
    LODWORD(buf) = 67240192;
    HIDWORD(buf) = v43;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "SimulationController,InterpretLifeSpanAsCourseAccuracyInSimulation,%{public}d", (uint8_t *)&buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_102179940);
    v45 = *(unsigned __int8 *)(a1 + 1744);
    LODWORD(v57) = 67240192;
    HIDWORD(v57) = v45;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "SimulationController,InterpretLifeSpanAsCourseAccuracyInSimulation,%{public}d", &v57, 8);
    v47 = (char *)v46;
    sub_100512490("Generic", 1, 0, 2, "CLSimulationController::CLSimulationController(id<CLIntersiloUniverse>)", "%s\n", v46);
    if (v47 != (char *)&buf)
      free(v47);
  }
  return a1;
}

void sub_100BFF148(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1000F34E0(v1);
  _Unwind_Resume(a1);
}

void sub_100BFF1C8(uint64_t a1)
{
  sub_100BFF1D0(*(_QWORD *)(a1 + 32));
}

void sub_100BFF1D0(uint64_t a1)
{
  double *v2;
  NSObject *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  NSObject *v20;
  uint64_t v21;
  double Current;
  NSObject *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  NSObject *v29;
  double v30;
  NSObject *v31;
  double v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  NSObject *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  NSObject *v45;
  double v46;
  CFAbsoluteTime v47[70];
  _OWORD v48[8];
  _OWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[2];
  _BYTE v59[32];
  _BYTE v60[64];
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  uint8_t v64[4];
  int v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  _BYTE v69[18];
  __int16 v70;
  double v71;
  __int16 v72;
  int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  uint8_t buf[568];

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = (double *)(a1 + 404);
    if (*(double *)(a1 + 420) >= 0.0)
      goto LABEL_8;
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v3 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Nowhere to go; not preparing next location\"}",
        buf,
        0x12u);
    }
    sub_100C01490(a1);
    if (v2[2] >= 0.0)
    {
LABEL_8:
      *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 384);
      v4 = *(_OWORD *)(a1 + 356);
      v5 = *(_OWORD *)(a1 + 372);
      v6 = *(_OWORD *)(a1 + 324);
      v61 = *(_OWORD *)(a1 + 340);
      v62 = v4;
      v63[0] = v5;
      v7 = *(_OWORD *)(a1 + 292);
      v8 = *(_OWORD *)(a1 + 308);
      v9 = *(_OWORD *)(a1 + 260);
      *(_OWORD *)v60 = *(_OWORD *)(a1 + 276);
      *(_OWORD *)&v60[16] = v7;
      v10 = (_OWORD *)(a1 + 400);
      *(_OWORD *)&v60[32] = v8;
      *(_OWORD *)&v60[48] = v6;
      *(_OWORD *)v59 = *(_OWORD *)(a1 + 244);
      *(_OWORD *)&v59[16] = v9;
      v11 = *(_OWORD *)(a1 + 200);
      v56 = *(_OWORD *)(a1 + 184);
      v57 = v11;
      v58[0] = *(_OWORD *)(a1 + 216);
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(a1 + 228);
      v12 = *(_OWORD *)(a1 + 136);
      v52 = *(_OWORD *)(a1 + 120);
      v53 = v12;
      v13 = *(_OWORD *)(a1 + 168);
      v54 = *(_OWORD *)(a1 + 152);
      v55 = v13;
      v14 = *(_OWORD *)(a1 + 104);
      v50 = *(_OWORD *)(a1 + 88);
      v51 = v14;
      memcpy(buf, (const void *)(a1 + 1120), 0x230uLL);
      memcpy((void *)(a1 + 560), (const void *)(a1 + 1120), 0x230uLL);
      v15 = *(double *)(a1 + 1696);
      if (v15 <= 0.0 && *(double *)(a1 + 1688) <= 0.0 && *(double *)(a1 + 1704) <= 0.0)
      {
        v16 = *(_OWORD *)(a1 + 512);
        v61 = *(_OWORD *)(a1 + 496);
        v62 = v16;
        v63[0] = *(_OWORD *)(a1 + 528);
        *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 540);
        v17 = *(_OWORD *)(a1 + 448);
        *(_OWORD *)v60 = *(_OWORD *)(a1 + 432);
        *(_OWORD *)&v60[16] = v17;
        v18 = *(_OWORD *)(a1 + 480);
        *(_OWORD *)&v60[32] = *(_OWORD *)(a1 + 464);
        *(_OWORD *)&v60[48] = v18;
        v19 = *(_OWORD *)(a1 + 416);
        *(_OWORD *)v59 = *v10;
        *(_OWORD *)&v59[16] = v19;
        if (*(double *)&v60[44] <= 0.0)
        {
          Current = CFAbsoluteTimeGetCurrent();
        }
        else
        {
          if (qword_1022A0240 != -1)
            dispatch_once(&qword_1022A0240, &stru_102179920);
          v20 = qword_1022A0248;
          if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
          {
            v21 = *(_QWORD *)(a1 + 80);
            *(_DWORD *)v64 = 68289538;
            v65 = 0;
            v66 = 2082;
            v67 = "";
            v68 = 2050;
            *(_QWORD *)v69 = *(_QWORD *)&v60[44];
            *(_WORD *)&v69[8] = 2050;
            *(_QWORD *)&v69[10] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Adjust next location timestamp\", \"originalTimestamp_s\":\"%{public}.09f\", \"delta_s\":\"%{public}.09f\"}", v64, 0x26u);
          }
          Current = *(double *)(a1 + 80) + *(double *)&v60[44];
        }
        *(double *)&v60[44] = Current;
        *(double *)&buf[24] = Current;
        if (*(double *)((char *)&v51 + 4) > 0.0
          && (*(_QWORD *)((_BYTE *)&v51 + 4) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          sub_100C017D4((uint64_t)&v50, (uint64_t)v59, (double *)(a1 + 560), (double *)buf);
        }
        sub_100C00F60(a1);
        v15 = *(double *)(a1 + 1696);
      }
      if (v15 > 0.0 || *(double *)(a1 + 1688) > 0.0 || *(double *)(a1 + 1704) > 0.0)
      {
        v24 = CFAbsoluteTimeGetCurrent();
        v25 = *(double *)(a1 + 1704);
        if (v25 <= 0.0)
        {
          if (*(double *)(a1 + 1712) <= 0.0)
            v25 = 10.0;
          else
            v25 = *(double *)(a1 + 1712);
        }
        v26 = *(double *)(a1 + 1720);
        v27 = sub_100124100(*v2, v2[1], *(double *)(a1 + 248), *(double *)(a1 + 256));
        if (qword_1022A0240 != -1)
          dispatch_once(&qword_1022A0240, &stru_102179920);
        v28 = v24 - v26;
        v29 = qword_1022A0248;
        if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v64 = 68290818;
          v65 = 0;
          v66 = 2082;
          v67 = "";
          v68 = 2050;
          *(double *)v69 = v25;
          *(_WORD *)&v69[8] = 2050;
          *(double *)&v69[10] = v28;
          v70 = 2050;
          v71 = v27;
          v72 = 1040;
          v73 = 156;
          v74 = 2098;
          v75 = a1 + 244;
          v76 = 1040;
          v77 = 156;
          v78 = 2098;
          v79 = a1 + 400;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"snl\", \"speed\":\"%{public}f\", \"timeElapsed_s\":\"%{public}.09f\", \"distance\":\"%{public}f\", \"currentLocation\":%{public, location:CLDaemonLocation}.*P, \"nextLocation\":%{public, location:CLDaemonLocation}.*P}", v64, 0x50u);
        }
        if (*(double *)(a1 + 264) < 0.0 || v28 * v25 > v27)
        {
          if (qword_1022A0240 != -1)
            dispatch_once(&qword_1022A0240, &stru_102179920);
          v31 = qword_1022A0248;
          if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
          {
            v32 = *v2;
            v33 = *((_QWORD *)v2 + 1);
            *(_DWORD *)v64 = 68289538;
            v65 = 0;
            v66 = 2082;
            v67 = "";
            v68 = 2050;
            *(double *)v69 = v32;
            *(_WORD *)&v69[8] = 2050;
            *(_QWORD *)&v69[10] = v33;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Reached location, preparing next\", \"reachedLat\":\"%{public}f\", \"reachedLon\":\"%{public}f\"}", v64, 0x26u);
          }
          v34 = *(_OWORD *)(a1 + 512);
          v61 = *(_OWORD *)(a1 + 496);
          v62 = v34;
          v63[0] = *(_OWORD *)(a1 + 528);
          *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)(a1 + 540);
          v35 = *(_OWORD *)(a1 + 448);
          *(_OWORD *)v60 = *(_OWORD *)(a1 + 432);
          *(_OWORD *)&v60[16] = v35;
          v36 = *(_OWORD *)(a1 + 480);
          *(_OWORD *)&v60[32] = *(_OWORD *)(a1 + 464);
          *(_OWORD *)&v60[48] = v36;
          v37 = *(_OWORD *)(a1 + 416);
          *(_OWORD *)v59 = *v10;
          *(_OWORD *)&v59[16] = v37;
          sub_100C00F60(a1);
          v30 = -1.0;
          if (v2[2] >= 0.0)
            v30 = sub_1005156D4(*v2, v2[1], *(double *)&v59[4], *(double *)&v59[12]);
        }
        else
        {
          v30 = sub_1005156D4(*v2, v2[1], *(double *)(a1 + 248), *(double *)(a1 + 256));
          sub_10051560C((double *)&v59[4], (double *)((unint64_t)v59 | 0xC), *(double *)(a1 + 248), *(double *)(a1 + 256), v28, v25, v30);
        }
        *(double *)&v60[12] = v25;
        *(double *)&v60[28] = v30;
        if (*(double *)((char *)&v51 + 4) > 0.0
          && (*(_QWORD *)((_BYTE *)&v51 + 4) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          sub_100C017D4((uint64_t)&v50, (uint64_t)v59, (double *)(a1 + 560), (double *)buf);
        }
      }
      if (qword_1022A0240 != -1)
        dispatch_once(&qword_1022A0240, &stru_102179920);
      v38 = qword_1022A0248;
      if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v64 = 68289539;
        v65 = 0;
        v66 = 2082;
        v67 = "";
        v68 = 1040;
        *(_DWORD *)v69 = 156;
        *(_WORD *)&v69[4] = 2097;
        *(_QWORD *)&v69[6] = v59;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Notify location is\", \"location\":%{private, location:CLClientLocation}.*P}", v64, 0x22u);
      }
      v39 = v62;
      *(_OWORD *)(a1 + 340) = v61;
      *(_OWORD *)(a1 + 356) = v39;
      *(_OWORD *)(a1 + 372) = v63[0];
      *(_OWORD *)(a1 + 384) = *(_OWORD *)((char *)v63 + 12);
      v40 = *(_OWORD *)&v60[16];
      *(_OWORD *)(a1 + 276) = *(_OWORD *)v60;
      *(_OWORD *)(a1 + 292) = v40;
      v41 = *(_OWORD *)&v60[48];
      *(_OWORD *)(a1 + 308) = *(_OWORD *)&v60[32];
      *(_OWORD *)(a1 + 324) = v41;
      v42 = *(_OWORD *)&v59[16];
      *(_OWORD *)(a1 + 244) = *(_OWORD *)v59;
      *(_OWORD *)(a1 + 260) = v42;
      memcpy((void *)(a1 + 1120), buf, 0x230uLL);
      v48[6] = v61;
      v48[7] = v62;
      v49[0] = v63[0];
      *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)((char *)v63 + 12);
      v48[2] = *(_OWORD *)v60;
      v48[3] = *(_OWORD *)&v60[16];
      v48[4] = *(_OWORD *)&v60[32];
      v48[5] = *(_OWORD *)&v60[48];
      v48[0] = *(_OWORD *)v59;
      v48[1] = *(_OWORD *)&v59[16];
      memcpy(v47, buf, sizeof(v47));
      sub_100C018EC(a1, (uint64_t)v48, v47);
      *(CFAbsoluteTime *)(a1 + 1720) = CFAbsoluteTimeGetCurrent();
      sub_100C013E8((double *)a1);
      v44 = v43;
      if (qword_1022A0240 != -1)
        dispatch_once(&qword_1022A0240, &stru_102179920);
      v45 = qword_1022A0248;
      if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v64 = 68289282;
        v65 = 0;
        v66 = 2082;
        v67 = "";
        v68 = 2050;
        *(double *)v69 = v44;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Notification delay\", \"notificationDelay_s\":\"%{public}.09f\"}", v64, 0x1Cu);
      }
      v46 = 1.79769313e308;
      if (v44 >= 0.0)
        v46 = v44;
      objc_msgSend(*(id *)(a1 + 1680), "setNextFireDelay:", v46);
    }
  }
  else
  {
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v23 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"SimulationController is trying to sendNextLocation, but simulation is not running\"}", buf, 0x12u);
    }
  }
}

uint64_t sub_100BFFA1C(uint64_t a1)
{

  objc_msgSend(*(id *)(a1 + 1680), "invalidate");
  *(_QWORD *)(a1 + 1680) = 0;
  sub_1000F34E0((_QWORD *)(a1 + 48));
  return a1;
}

void sub_100BFFA84(uint64_t a1)
{
  NSInputStream *v2;
  NSInputStream *v3;
  id v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const __CFDictionary *v14;
  const __CFDictionary *v15;
  CFTypeID v16;
  const void *Value;
  CFTypeID v18;
  CFTypeID v19;
  NSObject *v20;
  CFIndex Count;
  uint64_t v22;
  CFIndex v23;
  const void *ValueAtIndex;
  const void *v25;
  CFTypeID v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  NSObject *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  const char *v43;
  uint32_t v44;
  NSObject *v45;
  uint64_t v46;
  objc_class *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  objc_class *v52;
  const char *v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  CFTypeID v64;
  CFTypeID v65;
  NSObject *v66;
  CFTypeID v67;
  NSObject *v68;
  CFTypeID v69;
  NSObject *v70;
  CFTypeID v71;
  NSObject *v72;
  int v73;
  CFTypeRef cf;
  uint64_t v75;
  double v76;
  __int16 valuePtr;
  _QWORD v78[2];
  uint64_t v79;
  _BYTE v80[48];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[2];
  _BYTE buf[48];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _OWORD v93[56];

  if (*(_QWORD *)(a1 + 1736))
  {
    v2 = +[NSInputStream inputStreamWithURL:](NSInputStream, "inputStreamWithURL:");
    if (v2)
    {
      v3 = v2;
      -[NSInputStream open](v2, "open");
      v4 = +[NSMutableData data](NSMutableData, "data");
      if (-[NSInputStream hasBytesAvailable](v3, "hasBytesAvailable"))
      {
        do
        {
          v5 = -[NSInputStream read:maxLength:](v3, "read:maxLength:", buf, 1024);
          if (v5 >= 1)
            objc_msgSend(v4, "appendBytes:length:", buf, v5);
          v6 = -[NSInputStream hasBytesAvailable](v3, "hasBytesAvailable");
          if (v5 >= 0)
            v7 = v6;
          else
            v7 = 0;
        }
        while ((v7 & 1) != 0);
      }
      -[NSInputStream close](v3, "close");
    }
    else
    {
      if (qword_1022A0240 != -1)
        dispatch_once(&qword_1022A0240, &stru_102179920);
      v10 = qword_1022A0248;
      if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_FAULT))
      {
        v11 = *(_QWORD *)(a1 + 1736);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to read simulation from url\", \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A0240 != -1)
          dispatch_once(&qword_1022A0240, &stru_102179920);
      }
      v12 = qword_1022A0248;
      if (os_signpost_enabled((os_log_t)qword_1022A0248))
      {
        v13 = *(_QWORD *)(a1 + 1736);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v13;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Failed to read simulation from url", "{\"msg%{public}.0s\":\"Failed to read simulation from url\", \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      v4 = 0;
    }
    v14 = (const __CFDictionary *)CFPropertyListCreateWithData(kCFAllocatorDefault, (CFDataRef)v4, 0, 0, 0);
    v15 = v14;
    if (v14 && (v16 = CFGetTypeID(v14), v16 == CFDictionaryGetTypeID()))
    {
      Value = CFDictionaryGetValue(v15, CFSTR("Locations"));
      cf = CFDictionaryGetValue(v15, CFSTR("Options"));
      if (cf)
        CFRetain(cf);
      if (Value)
      {
        CFRetain(Value);
        CFRelease(v15);
        v18 = CFGetTypeID(Value);
        if (v18 == CFArrayGetTypeID())
        {
          if (!cf || (v19 = CFGetTypeID(cf), v19 == CFDictionaryGetTypeID()))
          {
            if (qword_1022A0240 != -1)
              dispatch_once(&qword_1022A0240, &stru_102179920);
            v20 = qword_1022A0248;
            if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
            {
              Count = CFArrayGetCount((CFArrayRef)Value);
              v22 = *(_QWORD *)(a1 + 1736);
              *(_DWORD *)buf = 68289538;
              *(_DWORD *)&buf[4] = 0;
              *(_WORD *)&buf[8] = 2082;
              *(_QWORD *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2050;
              *(_QWORD *)&buf[20] = Count;
              *(_WORD *)&buf[28] = 2114;
              *(_QWORD *)&buf[30] = v22;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Applying new simulation scenario\", \"locationCount\":%{public}ld, \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x26u);
            }
            v73 = *(unsigned __int8 *)(a1 + 72);
            if (*(_BYTE *)(a1 + 72))
              sub_100BFD340(a1);
            sub_100C00B08(a1, 0);
            v23 = 0;
            v78[0] = v78;
            v78[1] = v78;
            v79 = 0;
            while (1)
            {
              if (CFArrayGetCount((CFArrayRef)Value) <= v23)
              {
                CFRelease(Value);
                sub_100C00D74((uint64_t *)a1, (uint64_t)v78);
                valuePtr = 0;
                *(_QWORD *)v80 = 0;
                v75 = 0;
                v76 = 0.0;
                if (cf)
                {
                  v59 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocationDeliveryBehavior"));
                  v60 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocationRepeatBehavior"));
                  v61 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocationInterval"));
                  v62 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocationSpeed"));
                  v63 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("LocationIntermediateDistance"));
                  if (v59)
                  {
                    v64 = CFGetTypeID(v59);
                    if (v64 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v59, kCFNumberSInt8Type, (char *)&valuePtr + 1))
                        sub_100BFD93C((unsigned __int8 *)a1, HIBYTE(valuePtr));
                    }
                  }
                  if (v60)
                  {
                    v65 = CFGetTypeID(v60);
                    if (v65 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v60, kCFNumberSInt8Type, &valuePtr))
                      {
                        if (qword_1022A0240 != -1)
                          dispatch_once(&qword_1022A0240, &stru_102179920);
                        v66 = qword_1022A0248;
                        if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 68289282;
                          *(_DWORD *)&buf[4] = 0;
                          *(_WORD *)&buf[8] = 2082;
                          *(_QWORD *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(_QWORD *)&buf[20] = valuePtr;
                          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationRepeatBehavior\":%{public, location:CLSimulationLocationRepeatBehavior}lld}", buf, 0x1Cu);
                        }
                        sub_100BFDA5C(a1, valuePtr);
                      }
                    }
                  }
                  if (v61)
                  {
                    v67 = CFGetTypeID(v61);
                    if (v67 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v61, kCFNumberDoubleType, v80))
                      {
                        if (qword_1022A0240 != -1)
                          dispatch_once(&qword_1022A0240, &stru_102179920);
                        v68 = qword_1022A0248;
                        if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 68289282;
                          *(_DWORD *)&buf[4] = 0;
                          *(_WORD *)&buf[8] = 2082;
                          *(_QWORD *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(_QWORD *)&buf[20] = *(_QWORD *)v80;
                          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationInterval\":\"%{public}f\"}", buf, 0x1Cu);
                        }
                        sub_100BFDCB0(a1, (double *)v80);
                      }
                    }
                  }
                  if (v62)
                  {
                    v69 = CFGetTypeID(v62);
                    if (v69 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v62, kCFNumberDoubleType, &v76))
                      {
                        if (qword_1022A0240 != -1)
                          dispatch_once(&qword_1022A0240, &stru_102179920);
                        v70 = qword_1022A0248;
                        if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 68289282;
                          *(_DWORD *)&buf[4] = 0;
                          *(_WORD *)&buf[8] = 2082;
                          *(_QWORD *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(double *)&buf[20] = v76;
                          _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"locationTravellingSpeed\":\"%{public}f\"}", buf, 0x1Cu);
                        }
                        sub_100BFDDDC(a1, &v76);
                      }
                    }
                  }
                  if (v63)
                  {
                    v71 = CFGetTypeID(v63);
                    if (v71 == CFNumberGetTypeID())
                    {
                      if (CFNumberGetValue((CFNumberRef)v63, kCFNumberDoubleType, &v75))
                      {
                        if (qword_1022A0240 != -1)
                          dispatch_once(&qword_1022A0240, &stru_102179920);
                        v72 = qword_1022A0248;
                        if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)buf = 68289282;
                          *(_DWORD *)&buf[4] = 0;
                          *(_WORD *)&buf[8] = 2082;
                          *(_QWORD *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2050;
                          *(_QWORD *)&buf[20] = v75;
                          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting SimulationController property\", \"intermediateDistance\":\"%{public}f\"}", buf, 0x1Cu);
                        }
                        sub_100BFDB84(a1, (double *)&v75);
                      }
                    }
                  }
                  CFRelease(cf);
                }
                if (v73)
                  sub_100BFD534(a1);
                sub_1000F34E0(v78);
                return;
              }
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)Value, v23);
              v25 = ValueAtIndex;
              if (ValueAtIndex && (v26 = CFGetTypeID(ValueAtIndex), v26 == CFDataGetTypeID()))
              {
                v29 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(CLLocation, v27), v25, 0);
                if (v29
                  && (v30 = objc_opt_class(CLLocation, v28), (objc_opt_isKindOfClass(v29, v30) & 1) != 0))
                {
                  objc_msgSend(v29, "clientLocation");
                  v91 = v84;
                  v92 = v85;
                  v93[0] = v86[0];
                  *(_OWORD *)((char *)v93 + 12) = *(_OWORD *)((char *)v86 + 12);
                  *(_OWORD *)&buf[32] = *(_OWORD *)&v80[32];
                  v88 = v81;
                  v89 = v82;
                  v90 = v83;
                  *(_OWORD *)buf = *(_OWORD *)v80;
                  *(_OWORD *)&buf[16] = *(_OWORD *)&v80[16];
                  if (*(_BYTE *)(a1 + 1744))
                  {
                    *(_QWORD *)((char *)&v89 + 4) = *((_QWORD *)&v90 + 1);
                    *((_QWORD *)&v90 + 1) = 0x4014000000000000;
                  }
                  if (qword_1022A0240 != -1)
                    dispatch_once(&qword_1022A0240, &stru_102179920);
                  v31 = qword_1022A0248;
                  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)v80 = 68289539;
                    *(_DWORD *)&v80[4] = 0;
                    *(_WORD *)&v80[8] = 2082;
                    *(_QWORD *)&v80[10] = "";
                    *(_WORD *)&v80[18] = 1040;
                    *(_DWORD *)&v80[20] = 156;
                    *(_WORD *)&v80[24] = 2097;
                    *(_QWORD *)&v80[26] = buf;
                    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Appending location\", \"location\":%{private, location:CLClientLocation}.*P}", v80, 0x22u);
                  }
                  v32 = operator new(0xB0uLL);
                  v33 = v92;
                  v32[7] = v91;
                  v32[8] = v33;
                  v32[9] = v93[0];
                  *(_OWORD *)((char *)v32 + 156) = *(_OWORD *)((char *)v93 + 12);
                  v34 = v88;
                  v32[3] = *(_OWORD *)&buf[32];
                  v32[4] = v34;
                  v35 = v90;
                  v32[5] = v89;
                  v32[6] = v35;
                  v36 = *(_OWORD *)&buf[16];
                  v32[1] = *(_OWORD *)buf;
                  v32[2] = v36;
                  v37 = v78[0];
                  *(_QWORD *)v32 = v78[0];
                  *((_QWORD *)v32 + 1) = v78;
                  *(_QWORD *)(v37 + 8) = v32;
                  v78[0] = v32;
                  ++v79;
                }
                else
                {
                  if (qword_1022A0240 != -1)
                    dispatch_once(&qword_1022A0240, &stru_102179920);
                  v45 = qword_1022A0248;
                  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_FAULT))
                  {
                    v47 = (objc_class *)objc_opt_class(v29, v46);
                    v48 = -[NSString UTF8String](NSStringFromClass(v47), "UTF8String");
                    v49 = *(_QWORD *)(a1 + 1736);
                    *(_DWORD *)buf = 68289794;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v23;
                    *(_WORD *)&buf[24] = 2082;
                    *(_QWORD *)&buf[26] = v48;
                    *(_WORD *)&buf[34] = 2114;
                    *(_QWORD *)&buf[36] = v49;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{public}d, \"incorrectType\":%{public, location:escape_only}s, \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x2Cu);
                    if (qword_1022A0240 != -1)
                      dispatch_once(&qword_1022A0240, &stru_102179920);
                  }
                  v50 = qword_1022A0248;
                  if (os_signpost_enabled((os_log_t)qword_1022A0248))
                  {
                    v52 = (objc_class *)objc_opt_class(v29, v51);
                    v53 = -[NSString UTF8String](NSStringFromClass(v52), "UTF8String");
                    v54 = *(_QWORD *)(a1 + 1736);
                    *(_DWORD *)buf = 68289794;
                    *(_DWORD *)&buf[4] = 0;
                    *(_WORD *)&buf[8] = 2082;
                    *(_QWORD *)&buf[10] = "";
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = v23;
                    *(_WORD *)&buf[24] = 2082;
                    *(_QWORD *)&buf[26] = v53;
                    *(_WORD *)&buf[34] = 2114;
                    *(_QWORD *)&buf[36] = v54;
                    v42 = v50;
                    v43 = "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{pu"
                          "blic}d, \"incorrectType\":%{public, location:escape_only}s, \"scenarioURL\":%{public, location:escape_only}@}";
                    v44 = 44;
                    goto LABEL_67;
                  }
                }
              }
              else
              {
                if (qword_1022A0240 != -1)
                  dispatch_once(&qword_1022A0240, &stru_102179920);
                v38 = qword_1022A0248;
                if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_FAULT))
                {
                  v39 = *(_QWORD *)(a1 + 1736);
                  *(_DWORD *)buf = 68289538;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v23;
                  *(_WORD *)&buf[24] = 2114;
                  *(_QWORD *)&buf[26] = v39;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{public}d, \"scenarioURL\":%{public, location:escape_only}@}", buf, 0x22u);
                  if (qword_1022A0240 != -1)
                    dispatch_once(&qword_1022A0240, &stru_102179920);
                }
                v40 = qword_1022A0248;
                if (os_signpost_enabled((os_log_t)qword_1022A0248))
                {
                  v41 = *(_QWORD *)(a1 + 1736);
                  *(_DWORD *)buf = 68289538;
                  *(_DWORD *)&buf[4] = 0;
                  *(_WORD *)&buf[8] = 2082;
                  *(_QWORD *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 1026;
                  *(_DWORD *)&buf[20] = v23;
                  *(_WORD *)&buf[24] = 2114;
                  *(_QWORD *)&buf[26] = v41;
                  v42 = v40;
                  v43 = "{\"msg%{public}.0s\":\"location from scenario is of incorrect format\", \"locationIndex\":%{publ"
                        "ic}d, \"scenarioURL\":%{public, location:escape_only}@}";
                  v44 = 34;
LABEL_67:
                  _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "location from scenario is of incorrect format", v43, buf, v44);
                }
              }
              ++v23;
            }
          }
        }
      }
      else
      {
        CFRelease(v15);
      }
      if (qword_1022A0240 != -1)
        dispatch_once(&qword_1022A0240, &stru_102179920);
      v57 = qword_1022A0248;
      if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get locations array for simulation scenario\"}", buf, 0x12u);
        if (qword_1022A0240 != -1)
          dispatch_once(&qword_1022A0240, &stru_102179920);
      }
      v58 = qword_1022A0248;
      if (os_signpost_enabled((os_log_t)qword_1022A0248))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v58, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get locations array for simulation scenario", "{\"msg%{public}.0s\":\"Couldn't get locations array for simulation scenario\"}", buf, 0x12u);
      }
      if (Value)
        CFRelease(Value);
      if (cf)
        CFRelease(cf);
    }
    else
    {
      if (qword_1022A0240 != -1)
        dispatch_once(&qword_1022A0240, &stru_102179920);
      v55 = qword_1022A0248;
      if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't parse simulation scenario data\"}", buf, 0x12u);
        if (qword_1022A0240 != -1)
          dispatch_once(&qword_1022A0240, &stru_102179920);
      }
      v56 = qword_1022A0248;
      if (os_signpost_enabled((os_log_t)qword_1022A0248))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v56, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't parse simulation scenario data", "{\"msg%{public}.0s\":\"Couldn't parse simulation scenario data\"}", buf, 0x12u);
      }
      if (v15)
        CFRelease(v15);
    }
  }
  else
  {
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v8 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempt to start scenario, but no scenario is loaded!\"}", buf, 0x12u);
      if (qword_1022A0240 != -1)
        dispatch_once(&qword_1022A0240, &stru_102179920);
    }
    v9 = qword_1022A0248;
    if (os_signpost_enabled((os_log_t)qword_1022A0248))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempt to start scenario, but no scenario is loaded!", "{\"msg%{public}.0s\":\"Attempt to start scenario, but no scenario is loaded!\"}", buf, 0x12u);
    }
  }
}

void sub_100C00ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_1000F34E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100C00B08(uint64_t a1, int a2)
{
  NSObject *v4;
  const void *v10;
  __int128 v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v4 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Clearing all pending locations and settings\"}", buf, 0x12u);
  }
  sub_1000F34E0((_QWORD *)(a1 + 48));
  *(_DWORD *)(a1 + 88) = 0xFFFF;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 92) = 0;
  *(_OWORD *)(a1 + 108) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 140) = _Q0;
  *(_OWORD *)(a1 + 156) = _Q0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 204) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 212) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 244) = 0xFFFF;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 272) = xmmword_101BAFEE0;
  v11 = _Q0;
  *(_OWORD *)(a1 + 288) = _Q0;
  *(_OWORD *)(a1 + 304) = _Q0;
  *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 332) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 356) = 0;
  *(_QWORD *)(a1 + 340) = 0;
  *(_QWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 368) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 380) = 0;
  *(_QWORD *)(a1 + 388) = 0;
  *(_QWORD *)(a1 + 372) = 0;
  *(_BYTE *)(a1 + 396) = 0;
  memcpy((void *)(a1 + 1120), &unk_101BB5438, 0x230uLL);
  memcpy((void *)(a1 + 560), &unk_101BB5438, 0x230uLL);
  *(_DWORD *)(a1 + 400) = 0xFFFF;
  *(_QWORD *)(a1 + 404) = 0;
  *(_QWORD *)(a1 + 412) = 0;
  *(_OWORD *)(a1 + 420) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 436) = v11;
  *(_OWORD *)(a1 + 452) = v11;
  *(_OWORD *)(a1 + 468) = v11;
  *(_DWORD *)(a1 + 484) = 0;
  *(_QWORD *)(a1 + 488) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 516) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 1688) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 1696) = v11;
  *(_QWORD *)(a1 + 1720) = 0xBFF0000000000000;
  *(_WORD *)(a1 + 1728) = 256;
  if (a2)
  {
    v10 = *(const void **)(a1 + 1736);
    if (v10)
      CFRelease(v10);
    *(_QWORD *)(a1 + 1736) = 0;
  }
}

uint64_t *sub_100C00D74(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = result;
    result = sub_100C02074((uint64_t)(result + 6), result + 6, *(_QWORD *)(a2 + 8), a2);
    if (*((_BYTE *)v2 + 72))
    {
      if (*(double *)((char *)v2 + 420) < 0.0)
        return (uint64_t *)sub_100C00DD4((id *)v2);
    }
  }
  return result;
}

id *sub_100C00DD4(id *result)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  NSObject *v8;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;

  if (*((_BYTE *)result + 72))
  {
    v1 = (uint64_t)result;
    objc_msgSend(objc_msgSend(objc_msgSend(*result, "vendor"), "proxyForService:", CFSTR("CLLocationController")), "syncgetLocation:", result + 50);
    v2 = *(_OWORD *)(v1 + 496);
    v3 = *(_OWORD *)(v1 + 528);
    *(_OWORD *)(v1 + 356) = *(_OWORD *)(v1 + 512);
    *(_OWORD *)(v1 + 372) = v3;
    *(_OWORD *)(v1 + 384) = *(_OWORD *)(v1 + 540);
    v4 = *(_OWORD *)(v1 + 432);
    v5 = *(_OWORD *)(v1 + 464);
    v6 = *(_OWORD *)(v1 + 480);
    *(_OWORD *)(v1 + 292) = *(_OWORD *)(v1 + 448);
    *(_OWORD *)(v1 + 308) = v5;
    *(_OWORD *)(v1 + 324) = v6;
    *(_OWORD *)(v1 + 340) = v2;
    v7 = *(_OWORD *)(v1 + 416);
    *(_OWORD *)(v1 + 244) = *(_OWORD *)(v1 + 400);
    *(_OWORD *)(v1 + 260) = v7;
    *(_OWORD *)(v1 + 276) = v4;
    *(CFAbsoluteTime *)(v1 + 1720) = CFAbsoluteTimeGetCurrent();
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v8 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289539;
      v9[1] = 0;
      v10 = 2082;
      v11 = "";
      v12 = 1040;
      v13 = 156;
      v14 = 2097;
      v15 = v1 + 400;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"next location\", \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)v9, 0x22u);
    }
    *(_QWORD *)(v1 + 80) = 0;
    sub_100C00F60(v1);
    *(CFAbsoluteTime *)(v1 + 80) = CFAbsoluteTimeGetCurrent() - *(double *)(v1 + 476);
    return (id *)objc_msgSend(*(id *)(v1 + 1680), "setNextFireDelay:", 0.0);
  }
  return result;
}

void sub_100C00F60(uint64_t a1)
{
  NSObject *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  double v17;
  double v18;
  NSObject *v19;
  int v25;
  int v26;
  __int16 v27;
  const char *v28;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v2 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    v25 = 68289026;
    v26 = 0;
    v27 = 2082;
    v28 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Preparing next location\"}", (uint8_t *)&v25, 0x12u);
  }
  v3 = *(_OWORD *)(a1 + 512);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a1 + 496);
  *(_OWORD *)(a1 + 200) = v3;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a1 + 528);
  v4 = *(_OWORD *)(a1 + 448);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 432);
  *(_OWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)(a1 + 480);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a1 + 464);
  *(_OWORD *)(a1 + 168) = v5;
  v6 = *(_OWORD *)(a1 + 416);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 400);
  *(_OWORD *)(a1 + 104) = v6;
  *(_OWORD *)(a1 + 228) = *(_OWORD *)(a1 + 540);
  v7 = *(_QWORD *)(a1 + 64);
  if (v7)
  {
    v8 = *(_OWORD **)(a1 + 56);
    v9 = v8[2];
    *(_OWORD *)(a1 + 400) = v8[1];
    *(_OWORD *)(a1 + 416) = v9;
    v10 = v8[3];
    v11 = v8[4];
    v12 = v8[6];
    *(_OWORD *)(a1 + 464) = v8[5];
    *(_OWORD *)(a1 + 480) = v12;
    *(_OWORD *)(a1 + 432) = v10;
    *(_OWORD *)(a1 + 448) = v11;
    v13 = v8[7];
    v14 = v8[8];
    v15 = v8[9];
    *(_OWORD *)(a1 + 540) = *(_OWORD *)((char *)v8 + 156);
    *(_OWORD *)(a1 + 512) = v14;
    *(_OWORD *)(a1 + 528) = v15;
    *(_OWORD *)(a1 + 496) = v13;
    v16 = *(_QWORD *)v8;
    *(_QWORD *)(v16 + 8) = *((_QWORD *)v8 + 1);
    **((_QWORD **)v8 + 1) = v16;
    *(_QWORD *)(a1 + 64) = v7 - 1;
    operator delete(v8);
    v17 = sub_100124100(*(double *)(a1 + 92), *(double *)(a1 + 100), *(double *)(a1 + 404), *(double *)(a1 + 412));
    v18 = *(double *)(a1 + 476) - *(double *)(a1 + 164);
    if (v18 <= 0.0)
      *(_QWORD *)(a1 + 1712) = 0xBFF0000000000000;
    else
      *(double *)(a1 + 1712) = v17 / v18;
  }
  else
  {
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v19 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
    {
      v25 = 68289026;
      v26 = 0;
      v27 = 2082;
      v28 = "";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"No more pending locations\"}", (uint8_t *)&v25, 0x12u);
    }
    *(_DWORD *)(a1 + 400) = 0xFFFF;
    *(_QWORD *)(a1 + 412) = 0;
    *(_QWORD *)(a1 + 404) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 420) = xmmword_101BAFC90;
    *(_OWORD *)(a1 + 436) = _Q1;
    *(_OWORD *)(a1 + 452) = _Q1;
    *(_OWORD *)(a1 + 468) = _Q1;
    *(_DWORD *)(a1 + 484) = 0;
    *(_QWORD *)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 488) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 516) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 528) = 0;
    *(_QWORD *)(a1 + 544) = 0;
    *(_QWORD *)(a1 + 536) = 0;
    *(_BYTE *)(a1 + 552) = 0;
  }
}

void sub_100C01200(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 1736);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 1736) = 0;
    sub_100C00B08(a1, 1);
  }
}

id sub_100C01240(uint64_t a1)
{
  objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLLocationController")), "setSimulationEnabled:", *(unsigned __int8 *)(a1 + 72));
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLFenceManager")), "setIsSimulatingLocation:", *(unsigned __int8 *)(a1 + 72));
}

void sub_100C01290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];
  _BYTE v11[16];
  void **v12[2];
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(a2 + 16))(&v13, a2);
  sub_100119F3C(v12);
  sub_100119F3C(v11);
  if (v13 != v14)
  {
    v3 = v13 + 24;
    do
    {
      v4 = v3 - 24;
      sub_1009117B8(v3 - 24, (uint64_t)v10);
      v5 = (const char *)v3;
      if (*(char *)(v3 + 23) < 0)
        v5 = *(const char **)v3;
      v6 = sub_10011A5AC((uint64_t)v10);
      sub_10011B54C((uint64_t)v11, v5, v6);
      sub_10011A5A8(v10);
      v3 += 248;
    }
    while (v4 + 248 != v14);
  }
  v7 = sub_10011A5AC((uint64_t)v11);
  sub_10011B54C((uint64_t)v12, "kCLConnectionMessageCircularRegionKey", v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = sub_10011A5AC((uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v8, v9);
  sub_10011A5A8(v11);
  sub_10011A5A8(v12);
  v12[0] = (void **)&v13;
  sub_10091BBB0(v12);
}

void sub_100C01398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  sub_10011A5A8(&a14);
  a14 = (void **)&a16;
  sub_10091BBB0(&a14);
  _Unwind_Resume(a1);
}

void sub_100C013E8(double *a1)
{
  if (a1[212] <= 0.0 && a1[211] <= 0.0 && a1[213] <= 0.0 && *(double *)((char *)a1 + 420) >= 0.0)
    CFAbsoluteTimeGetCurrent();
}

CFAbsoluteTime sub_100C01490(uint64_t a1)
{
  NSObject *v2;
  CFAbsoluteTime result;
  uint64_t v4;
  int v5;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v17[5];
  _QWORD v18[5];
  uint64_t buf;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v2 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    v4 = *(unsigned __int8 *)(a1 + 1729);
    buf = 68289282;
    v20 = 2082;
    v21 = "";
    v22 = 2050;
    v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Dealing with no more locations\", \"repeatBehavior\":%{public, location:CLSimulationLocationRepeatBehavior}lld}", (uint8_t *)&buf, 0x1Cu);
  }
  v5 = *(unsigned __int8 *)(a1 + 1729);
  if (v5 == 2)
  {
    if (*(_QWORD *)(a1 + 1736))
    {
      v12 = objc_msgSend(*(id *)a1, "silo");
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100C017CC;
      v17[3] = &unk_10212ECA0;
      v17[4] = a1;
      objc_msgSend(v12, "async:", v17);
    }
  }
  else if (v5 == 1)
  {
    v13 = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 512) = v13;
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 540) = *(_OWORD *)(a1 + 228);
    v14 = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a1 + 448) = v14;
    v15 = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a1 + 480) = v15;
    v16 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a1 + 416) = v16;
    result = CFAbsoluteTimeGetCurrent() + 1.0;
    *(CFAbsoluteTime *)(a1 + 476) = result;
  }
  else if (!*(_BYTE *)(a1 + 1729))
  {
    *(_DWORD *)(a1 + 400) = 0xFFFF;
    *(_QWORD *)(a1 + 412) = 0;
    *(_QWORD *)(a1 + 404) = 0;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 420) = xmmword_101BAFC90;
    *(_OWORD *)(a1 + 436) = _Q1;
    *(_OWORD *)(a1 + 452) = _Q1;
    *(_OWORD *)(a1 + 468) = _Q1;
    *(_DWORD *)(a1 + 484) = 0;
    *(_QWORD *)(a1 + 496) = 0;
    *(_QWORD *)(a1 + 504) = 0;
    *(_QWORD *)(a1 + 488) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 512) = 0;
    *(_QWORD *)(a1 + 516) = 0xBFF0000000000000;
    *(_DWORD *)(a1 + 524) = 0x7FFFFFFF;
    *(_QWORD *)(a1 + 528) = 0;
    *(_QWORD *)(a1 + 544) = 0;
    *(_QWORD *)(a1 + 536) = 0;
    *(_BYTE *)(a1 + 552) = 0;
    v11 = objc_msgSend(*(id *)a1, "silo");
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100C016D4;
    v18[3] = &unk_10212ECA0;
    v18[4] = a1;
    objc_msgSend(v11, "afterInterval:async:", v18, 10.0);
  }
  return result;
}

void sub_100C016D4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0240 != -1)
    dispatch_once(&qword_1022A0240, &stru_102179920);
  v2 = qword_1022A0248;
  if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sending appropriate location unavailable notification\"}", (uint8_t *)v3, 0x12u);
  }
  if (*(double *)(v1 + 420) < 0.0 && !*(_BYTE *)(v1 + 1728))
    objc_msgSend(*(id *)(v1 + 8), "sendSimulatedLocationUnavailable");
}

void sub_100C017CC(uint64_t a1)
{
  sub_100BFFA84(*(_QWORD *)(a1 + 32));
}

double sub_100C017D4(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  double v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  __int128 v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;

  a4[1] = sub_100124100(*(double *)(a1 + 4), *(double *)(a1 + 12), *(double *)(a2 + 4), *(double *)(a2 + 12));
  v8 = *(double *)(a1 + 76);
  v28 = *(_OWORD *)(a1 + 4);
  v9 = *(double *)(a1 + 20);
  v27 = v8;
  v29 = v9;
  v10 = *(_QWORD *)(a1 + 60);
  v30 = *(_QWORD *)(a1 + 44);
  v31 = v10;
  v32 = *(_OWORD *)(a1 + 28);
  v11 = *(_QWORD *)(a1 + 68);
  v33 = *(_QWORD *)(a1 + 52);
  v34 = v11;
  v35 = v9 * (v9 * 2.99573227);
  v36 = v35;
  v37 = 0;
  v16 = *(double *)(a2 + 76);
  v17 = *(_OWORD *)(a2 + 4);
  v12 = *(_QWORD *)(a2 + 44);
  v18 = *(double *)(a2 + 20);
  v13 = *(_QWORD *)(a2 + 60);
  v19 = v12;
  v20 = v13;
  v21 = *(_OWORD *)(a2 + 28);
  v14 = *(_QWORD *)(a2 + 68);
  v22 = *(_QWORD *)(a2 + 52);
  v23 = v14;
  v24 = v18 * (v18 * 2.99573227);
  v25 = v24;
  v26 = 0;
  a4[2] = sub_100FF6DD8(&v27, &v16, v16 - v8);
  result = *a3 + a4[1];
  *a4 = result;
  return result;
}

id sub_100C018EC(uint64_t a1, uint64_t a2, CFAbsoluteTime *a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFAbsoluteTime v12;
  uint64_t v13;
  uint64_t v14;
  CFAbsoluteTime Current;
  double v16;
  double v17;
  double v18;
  const __CFString *v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  NSObject *v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  uint64_t v44;
  _BYTE __dst[560];
  _OWORD v46[8];
  _OWORD v47[2];
  int v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint8_t buf[4];
  _BYTE v65[18];
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  CFAbsoluteTime v75;
  __int16 v76;
  uint64_t v77;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102179960);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a2 + 4);
    v8 = *(_QWORD *)(a2 + 12);
    v9 = *(_QWORD *)(a2 + 20);
    v10 = *(_QWORD *)(a2 + 76);
    v12 = *a3;
    v11 = *((_QWORD *)a3 + 1);
    v13 = *((_QWORD *)a3 + 2);
    v14 = *((_QWORD *)a3 + 3);
    *(_DWORD *)buf = 134285313;
    *(_QWORD *)v65 = v7;
    *(_WORD *)&v65[8] = 2049;
    *(_QWORD *)&v65[10] = v8;
    v66 = 2050;
    v67 = v9;
    v68 = 2050;
    v69 = v10;
    v70 = 2050;
    v71 = v11;
    v72 = 2050;
    v73 = v13;
    v74 = 2050;
    v75 = v12;
    v76 = 2050;
    v77 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@ClxSimulated, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, time, %{public}.1f, deltaDistance, %{public}.1f, deltaDistanceAccuracy, %{public}.1f, odometer, %{public}.1f, timestampGps, %{public}.1f", buf, 0x52u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102179960);
    v30 = *(_QWORD *)(a2 + 4);
    v31 = *(_QWORD *)(a2 + 12);
    v32 = *(_QWORD *)(a2 + 20);
    v33 = *(_QWORD *)(a2 + 76);
    v35 = *(_QWORD *)a3;
    v34 = *((_QWORD *)a3 + 1);
    v36 = *((_QWORD *)a3 + 2);
    v37 = *((_QWORD *)a3 + 3);
    v48 = 134285313;
    v49 = v30;
    v50 = 2049;
    v51 = v31;
    v52 = 2050;
    v53 = v32;
    v54 = 2050;
    v55 = v33;
    v56 = 2050;
    v57 = v34;
    v58 = 2050;
    v59 = v36;
    v60 = 2050;
    v61 = v35;
    v62 = 2050;
    v63 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxSimulated, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0, time, %{public}.1f, deltaDistance, %{public}.1f, deltaDistanceAccuracy, %{public}.1f, odometer, %{public}.1f, timestampGps, %{public}.1f", &v48, 82);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  if (*(_BYTE *)(a1 + 1728) == 1)
  {
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v20 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Considering location type for location delivery", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0240 != -1)
        dispatch_once(&qword_1022A0240, &stru_102179920);
      LOWORD(v48) = 0;
      LODWORD(v44) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0248, 1, "Considering location type for location delivery", &v48, v44);
      v41 = (uint8_t *)v40;
      sub_100512490("Generic", 1, 0, 2, "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)", "%s\n", v40);
      if (v41 != buf)
        free(v41);
    }
    v19 = CFSTR("CLNmeaProvider");
    switch(*(_DWORD *)(a2 + 96))
    {
      case 1:
      case 9:
        if (qword_1022A0240 != -1)
          dispatch_once(&qword_1022A0240, &stru_102179920);
        v21 = qword_1022A0248;
        if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "CLGnssProvider will be use as location provider", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0240 != -1)
            dispatch_once(&qword_1022A0240, &stru_102179920);
          LOWORD(v48) = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0248, 1, "CLGnssProvider will be use as location provider", &v48, v44);
          v43 = (uint8_t *)v42;
          sub_100512490("Generic", 1, 0, 2, "void CLSimulationController::notifySimulatedLocation_nl(CLDaemonLocation, CLClientLocationPrivate)", "%s\n", v42);
          if (v43 != buf)
            free(v43);
        }
        v19 = CFSTR("CLGnssProvider");
        goto LABEL_29;
      case 2:
        goto LABEL_29;
      case 3:
        v19 = CFSTR("CLAccessoryLocationProvider");
        goto LABEL_29;
      case 4:
        v19 = CFSTR("CLWifiLocationProvider");
        goto LABEL_29;
      case 6:
      case 7:
      case 8:
        v19 = CFSTR("CLCellLocationProvider");
        goto LABEL_29;
      default:
        goto LABEL_30;
    }
  }
  if (*(_BYTE *)(a1 + 1728))
    goto LABEL_30;
  *(_DWORD *)(a2 + 84) = 100;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a2 + 76) = Current;
  a3[3] = Current;
  if (*(double *)(a1 + 1696) > 0.0 || *(double *)(a1 + 1688) > 0.0 || *(double *)(a1 + 1704) > 0.0)
  {
    v16 = *(double *)(a2 + 88);
    sub_100C013E8((double *)a1);
    if (v16 < v17)
    {
      sub_100C013E8((double *)a1);
      *(double *)(a2 + 88) = v18 + 1.0;
    }
  }
  v19 = CFSTR("CLSimulatedLocationProvider");
LABEL_29:
  v22 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", v19);
  if (!v22)
  {
LABEL_30:
    if (qword_1022A0240 != -1)
      dispatch_once(&qword_1022A0240, &stru_102179920);
    v23 = qword_1022A0248;
    if (os_log_type_enabled((os_log_t)qword_1022A0248, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v65 = 0;
      *(_WORD *)&v65[4] = 2082;
      *(_QWORD *)&v65[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"No location provider found. Defaulting to SimulatedLocationProvider\"}", buf, 0x12u);
    }
    v22 = objc_msgSend(objc_msgSend(*(id *)a1, "vendor"), "proxyForService:", CFSTR("CLSimulatedLocationProvider"));
  }
  *(_BYTE *)(a2 + 152) = 1;
  v24 = objc_alloc((Class)CLLocation);
  v25 = *(_OWORD *)(a2 + 112);
  v46[6] = *(_OWORD *)(a2 + 96);
  v46[7] = v25;
  v47[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v47 + 12) = *(_OWORD *)(a2 + 140);
  v26 = *(_OWORD *)(a2 + 48);
  v46[2] = *(_OWORD *)(a2 + 32);
  v46[3] = v26;
  v27 = *(_OWORD *)(a2 + 80);
  v46[4] = *(_OWORD *)(a2 + 64);
  v46[5] = v27;
  v28 = *(_OWORD *)(a2 + 16);
  v46[0] = *(_OWORD *)a2;
  v46[1] = v28;
  memcpy(__dst, a3, sizeof(__dst));
  return objc_msgSend(v22, "sendSimulatedLocation:", objc_msgSend(v24, "initWithClientLocation:clientLocationPrivate:", v46, __dst));
}

void sub_100C01FF0(id a1)
{
  qword_1022A0248 = (uint64_t)os_log_create("com.apple.locationd.Core", "Simulation");
}

void sub_100C0201C(id a1)
{
  qword_1022A00D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100C02048(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t *sub_100C02074(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 != a4)
  {
    v8 = (char *)operator new(0xB0uLL);
    v9 = v8;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    v10 = *(_OWORD *)(a3 + 112);
    v11 = *(_OWORD *)(a3 + 128);
    v12 = *(_OWORD *)(a3 + 144);
    *(_OWORD *)(v8 + 156) = *(_OWORD *)(a3 + 156);
    *((_OWORD *)v8 + 8) = v11;
    *((_OWORD *)v8 + 9) = v12;
    *((_OWORD *)v8 + 7) = v10;
    v13 = *(_OWORD *)(a3 + 48);
    v14 = *(_OWORD *)(a3 + 64);
    v15 = *(_OWORD *)(a3 + 96);
    *((_OWORD *)v8 + 5) = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v8 + 6) = v15;
    *((_OWORD *)v8 + 3) = v13;
    *((_OWORD *)v8 + 4) = v14;
    v16 = *(_OWORD *)(a3 + 32);
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v8 + 2) = v16;
    v17 = *(_QWORD *)(a3 + 8);
    v18 = 1;
    if (v17 != a4)
    {
      v19 = v8;
      do
      {
        v8 = (char *)operator new(0xB0uLL);
        *(_QWORD *)v8 = v19;
        *((_QWORD *)v8 + 1) = 0;
        v20 = *(_OWORD *)(v17 + 32);
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v17 + 16);
        *((_OWORD *)v8 + 2) = v20;
        v21 = *(_OWORD *)(v17 + 48);
        v22 = *(_OWORD *)(v17 + 64);
        v23 = *(_OWORD *)(v17 + 96);
        *((_OWORD *)v8 + 5) = *(_OWORD *)(v17 + 80);
        *((_OWORD *)v8 + 6) = v23;
        *((_OWORD *)v8 + 3) = v21;
        *((_OWORD *)v8 + 4) = v22;
        v24 = *(_OWORD *)(v17 + 112);
        v25 = *(_OWORD *)(v17 + 128);
        v26 = *(_OWORD *)(v17 + 144);
        *(_OWORD *)(v8 + 156) = *(_OWORD *)(v17 + 156);
        *((_OWORD *)v8 + 8) = v25;
        *((_OWORD *)v8 + 9) = v26;
        *((_OWORD *)v8 + 7) = v24;
        *((_QWORD *)v19 + 1) = v8;
        ++v18;
        v17 = *(_QWORD *)(v17 + 8);
        v19 = v8;
      }
      while (v17 != a4);
    }
    v27 = *a2;
    *(_QWORD *)(v27 + 8) = v9;
    *v9 = v27;
    *a2 = (uint64_t)v8;
    *((_QWORD *)v8 + 1) = a2;
    *(_QWORD *)(a1 + 16) += v18;
    return v9;
  }
  return a2;
}

void sub_100C02194(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_100C021B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_100C021C8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C1E410;
      v1[3] = unk_101C1E420;
      v1[4] = xmmword_101C1E430;
      v1[0] = xmmword_101C1E3F0;
      v1[1] = unk_101C1E400;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100C0229C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_100C022B4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100C02350(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100C02368()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100C023F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100C0240C()
{
  sub_1015A2E04(qword_102307288, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307288, (void *)&_mh_execute_header);
}

double sub_100C02450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_102179990;
  *(_QWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  return result;
}

void **sub_100C0247C(void **a1)
{
  void *v2;
  void **v3;
  NSObject *v4;
  void **v5;
  void *v6;
  id v7;
  _QWORD *v8;
  uint64_t v10;
  _BYTE *v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  _BYTE buf[12];
  __int16 v16;
  void *v17;
  char v18;
  int v19;
  _BYTE *v20;
  __int16 v21;
  _QWORD *v22;
  void *__p[2];
  char v24;

  *a1 = off_102179990;
  if (*((char *)a1 + 47) < 0)
    v2 = a1[4];
  else
    v2 = (void *)*((unsigned __int8 *)a1 + 47);
  v3 = a1 + 3;
  if (v2)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021799D0);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      (*((void (**)(void **__return_ptr, void **))*a1 + 3))(__p, a1);
      if (v24 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      v6 = a1 + 3;
      if (*((char *)a1 + 47) < 0)
        v6 = *v3;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v5;
      v16 = 2082;
      v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s", buf, 0x16u);
      if (v24 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021799D0);
      v10 = qword_1022A01C8;
      (*((void (**)(_BYTE *__return_ptr, void **))*a1 + 3))(buf, a1);
      if (v18 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v12 = a1 + 3;
      if (*((char *)a1 + 47) < 0)
        v12 = *v3;
      v19 = 136446466;
      v20 = v11;
      v21 = 2082;
      v22 = v12;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 0, "#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s", &v19, 22);
      v14 = v13;
      if (v18 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "virtual CLDaemonEmergencyEnablementAssertion::~CLDaemonEmergencyEnablementAssertion()", "%s\n", v14);
      if (v14 != (char *)__p)
        free(v14);
    }
    v7 = objc_msgSend(objc_msgSend(a1[2], "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    v8 = a1 + 6;
    if (*((char *)a1 + 71) < 0)
      v8 = (_QWORD *)*v8;
    objc_msgSend(v7, "markClientEmergencyEnablementTransition:shouldOverrideDeauthorization:forBeneficiary:", 0, *((unsigned __int8 *)a1 + 72) != 0, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
  }
  objc_msgSend(a1[10], "invalidate");

  a1[10] = 0;
  if (*((char *)a1 + 71) < 0)
    operator delete(a1[6]);
  if (*((char *)a1 + 47) < 0)
    operator delete(*v3);
  sub_10008ABA0(a1);
  return a1;
}

void sub_100C02790(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100C027A0(void **a1)
{
  sub_100C0247C(a1);
  operator delete();
}

void sub_100C027C4(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  CLConnectionMessage *v11;
  CLConnectionMessage *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  CLConnectionMessage *v17[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 49)
    {
LABEL_7:
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021799D0);
      v6 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = CLConnectionMessage::name(*a2);
        if (*(char *)(v7 + 23) >= 0)
          v8 = (const char *)v7;
        else
          v8 = *(const char **)v7;
        *(_DWORD *)buf = 68289282;
        v20 = 0;
        v21 = 2082;
        v22 = "";
        v23 = 2082;
        v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning unrecognized message\", \"MessageName\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      return;
    }
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 49)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "EmergencyEnablementAssertion/kCLConnectionMessage", 0x31uLL))
    goto LABEL_7;
  v9 = _os_activity_create((void *)&_mh_execute_header, "CL: EmergencyEnablementAssertion/kCLConnectionMessage", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v9, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021799D0);
  v10 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v20 = 0;
    v21 = 2082;
    v22 = "";
    v23 = 2082;
    v24 = "activity";
    v25 = 2050;
    v26 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"EmergencyEnablementAssertion/kCLConnectionMessage\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  v11 = *a2;
  v12 = a2[1];
  v17[0] = v11;
  v17[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)((char *)v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_100C02A6C(a1, v17);
  if (v12)
  {
    v15 = (unint64_t *)((char *)v12 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_100C02A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  sub_100261F44((uint64_t)&a9);
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100C02A6C(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  _BYTE *v5;
  char v6;
  char v7;
  void *Dictionary;
  id v9;
  id v10;
  id v11;
  void *v12;
  const std::string::value_type *v13;
  std::string::size_type *v14;
  NSObject *v15;
  _BYTE *v16;
  uint64_t v17;
  uint8_t *v18;
  char *v19;
  char *v20;
  NSObject *v21;
  _BYTE *v22;
  uint64_t v23;
  uint8_t *v24;
  char *v25;
  NSObject *v26;
  _BYTE *v27;
  uint64_t v28;
  uint8_t *v29;
  char *v30;
  void **v31;
  int v32;
  NSObject *v33;
  _BYTE *v34;
  std::string::size_type v35;
  id v36;
  NSObject *v37;
  std::string *v38;
  void **v39;
  std::string::size_type *v40;
  NSObject *v41;
  std::string *v42;
  NSObject *v43;
  std::string *v44;
  std::string::size_type *v45;
  NSObject *v46;
  std::string *v47;
  uint64_t v48;
  uint8_t *v49;
  char *v50;
  uint64_t v51;
  std::string *v52;
  char *v53;
  char *v54;
  int v55;
  std::string *v56;
  __int16 v57;
  std::string::size_type *v58;
  std::string v59;
  uint8_t buf[16];
  void *v61[2];
  __int128 v62;
  void *v63[2];
  void *v64[2];
  _BYTE v65[24];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69[5];
  _BYTE __p[28];
  __int16 v71;
  void **v72;
  __int16 v73;
  std::string::size_type *v74;
  unsigned __int8 v75;

  if (*(char *)(a1 + 47) < 0)
  {
    if (!*(_QWORD *)(a1 + 32))
      goto LABEL_5;
LABEL_6:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021799D0);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v5 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#warning EmergencyEnablementAssertion already taken by %{public}s", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(__p, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021799D0);
    v48 = qword_1022A01C8;
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(buf, a1);
    if (SHIBYTE(v61[0]) >= 0)
      v49 = buf;
    else
      v49 = *(uint8_t **)buf;
    LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v48, 0, "#warning EmergencyEnablementAssertion already taken by %{public}s", &v59, 12);
    v20 = v50;
    if (SHIBYTE(v61[0]) < 0)
      operator delete(*(void **)buf);
    goto LABEL_168;
  }
  if (*(_BYTE *)(a1 + 47))
    goto LABEL_6;
LABEL_5:
  if (*(_QWORD *)(a1 + 80))
    goto LABEL_6;
  sub_1015A2E04(__p, "com.apple.locationd.emergency_enabler");
  v6 = sub_100C03AE4((_QWORD *)a1, (uint64_t *)__p);
  v7 = v6;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((v7 & 1) != 0)
      goto LABEL_18;
LABEL_25:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021799D0);
    v15 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v16 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021799D0);
      v17 = qword_1022A01C8;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(buf, a1);
      if (SHIBYTE(v61[0]) >= 0)
        v18 = buf;
      else
        v18 = *(uint8_t **)buf;
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 0, "#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s", &v59, 12);
      v20 = v19;
      if (SHIBYTE(v61[0]) < 0)
        operator delete(*(void **)buf);
LABEL_168:
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
LABEL_169:
      if (v20 != __p)
        free(v20);
      return;
    }
    return;
  }
  if ((v6 & 1) == 0)
    goto LABEL_25;
LABEL_18:
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v9 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
  v10 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundleIdentifierKey"));
  v11 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundlePathKey"));
  if (v10 && (v12 = v11) != 0 && v9)
  {
    if (objc_msgSend(v9, "length"))
    {
      v13 = (const std::string::value_type *)objc_msgSend(v9, "UTF8String");
      v14 = (std::string::size_type *)(a1 + 24);
      std::string::assign((std::string *)(a1 + 24), v13);
      *(_BYTE *)(a1 + 72) = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageOverrideDeauthorizationKey")), "BOOLValue");
      *(_OWORD *)v64 = 0u;
      memset(v65, 0, 19);
      v62 = 0u;
      *(_OWORD *)v63 = 0u;
      *(_OWORD *)buf = 0u;
      *(_OWORD *)v61 = 0u;
      v66 = 0u;
      v67 = 0u;
      v68 = 0u;
      memset(v69, 0, 27);
      if (objc_msgSend(v10, "length"))
      {
        sub_1015A2E04(&v59, (char *)objc_msgSend(v10, "UTF8String"));
        sub_1001AE67C(&v59, (uint64_t)__p);
      }
      else
      {
        if (!objc_msgSend(v12, "length"))
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021799D0);
          v43 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1);
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v59;
            else
              v44 = (std::string *)v59.__r_.__value_.__r.__words[0];
            v45 = (std::string::size_type *)(a1 + 24);
            if (*(char *)(a1 + 47) < 0)
              v45 = (std::string::size_type *)*v14;
            *(_QWORD *)__p = 68289538;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(_QWORD *)&__p[20] = v44;
            v71 = 2082;
            v72 = (void **)v45;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring #CLEEA Assertion requested without explicit beneficiary\", \"RequestedBy\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x26u);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_1021799D0);
          }
          v46 = qword_1022A01C8;
          if (os_signpost_enabled((os_log_t)qword_1022A01C8))
          {
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1);
            if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v47 = &v59;
            else
              v47 = (std::string *)v59.__r_.__value_.__r.__words[0];
            if (*(char *)(a1 + 47) < 0)
              v14 = (std::string::size_type *)*v14;
            *(_QWORD *)__p = 68289538;
            *(_WORD *)&__p[8] = 2082;
            *(_QWORD *)&__p[10] = "";
            *(_WORD *)&__p[18] = 2082;
            *(_QWORD *)&__p[20] = v47;
            v71 = 2082;
            v72 = (void **)v14;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Ignoring #CLEEA Assertion requested without explicit beneficiary", "{\"msg%{public}.0s\":\"Ignoring #CLEEA Assertion requested without explicit beneficiary\", \"RequestedBy\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x26u);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
          }
          if (*(char *)(a1 + 47) < 0)
          {
            **(_BYTE **)(a1 + 24) = 0;
            *(_QWORD *)(a1 + 32) = 0;
          }
          else
          {
            *(_BYTE *)(a1 + 24) = 0;
            *(_BYTE *)(a1 + 47) = 0;
          }
          goto LABEL_100;
        }
        sub_1015A2E04(&v59, (char *)objc_msgSend(v12, "UTF8String"));
        sub_1001B8590(&v59, (uint64_t)__p);
      }
      sub_1001AEF2C((uint64_t)buf, (__int128 *)__p);
      sub_100010174((uint64_t)__p);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      CLConnection::getUserName(*(CLConnection **)(a1 + 8));
      sub_1001AE664((std::string *)buf, (const std::string *)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_1001A885C((uint64_t)buf, (uint64_t)__p);
      v31 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v31);
      *(_OWORD *)v31 = *(_OWORD *)__p;
      *(_QWORD *)(a1 + 64) = *(_QWORD *)&__p[16];
      if (*(_BYTE *)(a1 + 72)
        && (sub_100204320((std::string *)(a1 + 48), (uint64_t)__p), v32 = v75, sub_100010174((uint64_t)__p), !v32))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021799D0);
        v37 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v59;
          else
            v38 = (std::string *)v59.__r_.__value_.__r.__words[0];
          v39 = (void **)(a1 + 48);
          if (*(char *)(a1 + 71) < 0)
            v39 = (void **)*v31;
          v40 = (std::string::size_type *)(a1 + 24);
          if (*(char *)(a1 + 47) < 0)
            v40 = (std::string::size_type *)*v14;
          *(_QWORD *)__p = 68289794;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(_QWORD *)&__p[20] = v38;
          v71 = 2082;
          v72 = v39;
          v73 = 2082;
          v74 = v40;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLEPTO Assertion requested for a Non SystemService client, not supported\", \"RequestedBy\":%{public, location:escape_only}s, \"BeneficiaryClientKey\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x30u);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021799D0);
        }
        v41 = qword_1022A01C8;
        if (os_signpost_enabled((os_log_t)qword_1022A01C8))
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v42 = &v59;
          else
            v42 = (std::string *)v59.__r_.__value_.__r.__words[0];
          if (*(char *)(a1 + 71) < 0)
            v31 = (void **)*v31;
          if (*(char *)(a1 + 47) < 0)
            v14 = (std::string::size_type *)*v14;
          *(_QWORD *)__p = 68289794;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(_QWORD *)&__p[20] = v42;
          v71 = 2082;
          v72 = v31;
          v73 = 2082;
          v74 = v14;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v41, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLEPTO Assertion requested for a Non SystemService client, not supported", "{\"msg%{public}.0s\":\"#CLEPTO Assertion requested for a Non SystemService client, not supported\", \"RequestedBy\":%{public, location:escape_only}s, \"BeneficiaryClientKey\":%{public, location:escape_only}s, \"Reason\":%{public, location:escape_only}s}", __p, 0x30u);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *(_QWORD *)(a1 + 80) = -[CLStreamedLocationProviderAssertion initInUniverse:]([CLStreamedLocationProviderEmergencyEnablementAssertion alloc], "initInUniverse:", *(_QWORD *)(a1 + 16));
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_1021799D0);
        v33 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
          if (__p[23] >= 0)
            v34 = __p;
          else
            v34 = *(_BYTE **)__p;
          v35 = a1 + 24;
          if (*(char *)(a1 + 47) < 0)
            v35 = *v14;
          LODWORD(v59.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
          WORD2(v59.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = v35;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s", (uint8_t *)&v59, 0x16u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_1021799D0);
          v51 = qword_1022A01C8;
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v59, a1);
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v52 = &v59;
          else
            v52 = (std::string *)v59.__r_.__value_.__r.__words[0];
          if (*(char *)(a1 + 47) < 0)
            v14 = (std::string::size_type *)*v14;
          v55 = 136446466;
          v56 = v52;
          v57 = 2082;
          v58 = v14;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v51, 0, "#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s", &v55, 22);
          v54 = v53;
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v59.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v54);
          if (v54 != __p)
            free(v54);
        }
        v36 = objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
        if (*(char *)(a1 + 71) < 0)
          v31 = (void **)*v31;
        objc_msgSend(v36, "markClientEmergencyEnablementTransition:shouldOverrideDeauthorization:forBeneficiary:", 1, *(unsigned __int8 *)(a1 + 72) != 0, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31));
      }
LABEL_100:
      if (SHIBYTE(v69[2]) < 0)
        operator delete(v69[0]);
      if (SHIBYTE(v68) < 0)
        operator delete(*((void **)&v67 + 1));
      if (SBYTE7(v67) < 0)
        operator delete((void *)v66);
      if ((v65[15] & 0x80000000) != 0)
        operator delete(v64[1]);
      if (SHIBYTE(v64[0]) < 0)
        operator delete(v63[0]);
      if (SHIBYTE(v62) < 0)
        operator delete(v61[1]);
      if (SHIBYTE(v61[0]) < 0)
        operator delete(*(void **)buf);
      return;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021799D0);
    v26 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v27 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "#CLEEA Assertion requested with no reason... ignoring EmergencyEnablementAssertion taken by %{public}s", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021799D0);
      v28 = qword_1022A01C8;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(buf, a1);
      if (SHIBYTE(v61[0]) >= 0)
        v29 = buf;
      else
        v29 = *(uint8_t **)buf;
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v28, 17, "#CLEEA Assertion requested with no reason... ignoring EmergencyEnablementAssertion taken by %{public}s", &v59, 12);
      v20 = v30;
      if (SHIBYTE(v61[0]) < 0)
        operator delete(*(void **)buf);
LABEL_58:
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonEmergencyEnablementAssertion::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
      goto LABEL_169;
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021799D0);
    v21 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
      v22 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "#CLEEA EmergencyEnablementAssertion taken by %{public}s malformed: lacking required argument(s)", buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021799D0);
      v23 = qword_1022A01C8;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(buf, a1);
      if (SHIBYTE(v61[0]) >= 0)
        v24 = buf;
      else
        v24 = *(uint8_t **)buf;
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 17, "#CLEEA EmergencyEnablementAssertion taken by %{public}s malformed: lacking required argument(s)", &v59, 12);
      v20 = v25;
      if (SHIBYTE(v61[0]) < 0)
        operator delete(*(void **)buf);
      goto LABEL_58;
    }
  }
}

void sub_100C03A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  sub_100010174((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_100C03AE4(_QWORD *a1, uint64_t *a2)
{
  uint64_t isEntitled;
  NSObject *v5;
  _BYTE *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v10;
  void **v11;
  const char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  const char *v16;
  void *v17[2];
  char v18;
  _BYTE __p[12];
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t *v23;
  uint8_t buf[4];
  _BYTE *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  uint64_t *v29;

  isEntitled = CLConnection::isEntitled(a1[1], a2);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021799D0);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    v6 = *(_BYTE **)__p;
    v7 = "not entitled";
    if (v22 >= 0)
      v6 = __p;
    if ((_DWORD)isEntitled)
      v7 = "entitled";
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136315650;
    v25 = v6;
    v26 = 2080;
    v27 = v7;
    v28 = 2080;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s is %s for %s", buf, 0x20u);
    if (SHIBYTE(v22) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021799D0);
    v10 = qword_1022A01C8;
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(v17, a1);
    v11 = (void **)v17[0];
    v12 = "not entitled";
    if (v18 >= 0)
      v11 = v17;
    if ((_DWORD)isEntitled)
      v12 = "entitled";
    if (*((char *)a2 + 23) >= 0)
      v13 = a2;
    else
      v13 = (uint64_t *)*a2;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v11;
    v20 = 2080;
    v21 = v12;
    v22 = 2080;
    v23 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "%s is %s for %s", __p, 32, v16);
    v15 = v14;
    if (v18 < 0)
      operator delete(v17[0]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDaemonEmergencyEnablementAssertion::isEntitled(const std::string &)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  return isEntitled;
}

id sub_100C03D98(uint64_t a1)
{
  id v2;
  _QWORD *v3;
  _QWORD *v4;
  audit_token_t v6;

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v3 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v3 = (_QWORD *)*v3;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", -[CLClientKeyPath clientKey](+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3)), "clientKey"), CFSTR("ClientKeyPath"));
  CLConnection::getAuditToken(*(CLConnection **)(a1 + 8));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", -[CLClientKeyPath clientKey](sub_1001A4450(&v6), "clientKey"), CFSTR("NaturalConnectedIdentity"));
  v4 = (_QWORD *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v4 = (_QWORD *)*v4;
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4), CFSTR("Reason"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 72)), CFSTR("OverrideDeauthorization"));
  return v2;
}

void sub_100C03E9C(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100C03EC8(uint64_t a1)
{
  if (a1)
    sub_100C06E24(a1 - 128);
  else
    sub_100C06E24(0);
}

id sub_100C03ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 128;
  else
    v2 = 0;
  return sub_100C06FBC(v2, a2);
}

void sub_100C03EE8(uint64_t a1, float *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 128;
  else
    v2 = 0;
  sub_100C07340(v2, a2);
}

void sub_100C03EF8(uint64_t a1)
{
  uint64_t v1;

  if (a1)
    v1 = a1 - 128;
  else
    v1 = 0;
  if (*(_BYTE *)(v1 + 146))
    sub_100C05698(v1);
}

id sub_100C03F14(uint64_t a1)
{
  if (a1)
    return sub_100C07770(a1 - 128);
  else
    return sub_100C07770(0);
}

id sub_100C03F24(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 128;
  else
    v2 = 0;
  return sub_100C07998(v2, a2);
}

id sub_100C03F34(uint64_t a1)
{
  if (a1)
    return sub_100C07B38(a1 - 128);
  else
    return sub_100C07B38(0);
}

void sub_100C03F44(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  if (a1)
    v2 = a1 - 128;
  else
    v2 = 0;
  sub_100C07CD8(v2, a2);
}

void sub_100C03F54(uint64_t a1, void *a2)
{
  sub_1010BA278(a1, a2);
}

void sub_100C043C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v1[27];
  v1[27] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[26];
  v1[26] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v1[25];
  v1[25] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v2;
  *v2 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_1010BAD50((uint64_t)v1);
  _Unwind_Resume(a1);
}

void sub_100C0448C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_1010BB6C4(*(void **)(v1 + 168));
    *(_DWORD *)buf = 67109120;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Timer fired on companion,currentMotionCalsVersion,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v4 = qword_10229FDC8;
    v5 = sub_1010BB6C4(*(void **)(v1 + 168));
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 2, "Timer fired on companion,currentMotionCalsVersion,%d", v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_100C04650(v1);
}

void sub_100C04650(uint64_t a1)
{
  NSMutableDictionary *v2;
  NSMutableDictionary *v3;
  NSObject *v4;
  int v5;
  int v6;
  NSData *v7;
  id v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  _QWORD v19[5];
  _BYTE v20[14];
  char v21;
  int v22;
  _BYTE *v23;
  uint8_t buf[8];
  __int16 v25;
  int v26;
  char v27;

  if ((sub_1010BB6C4(*(void **)(a1 + 168)) & 0x80000000) == 0 && *(int *)(a1 + 148) >= 1)
  {
    v2 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", *(_QWORD *)(a1 + 168));
    v3 = v2;
    if (*(int *)(a1 + 148) <= 3)
    {
      if (-[NSMutableDictionary objectForKeyedSubscript:](v2, "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable")))
      {
        -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", +[CMPedometerTable convertToCMStrideCalibrationData:](CMPedometerTableRawSpeedToKValue, "convertToCMStrideCalibrationData:", -[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable"))), CFSTR("StrideCalibrationDataBins"));
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_102179C68);
        v4 = qword_10229FDC8;
        if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
        {
          v5 = *(_DWORD *)(a1 + 148);
          v6 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v5;
          v25 = 1024;
          v26 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Phone converted RawSpeedToKValueTable to StrideCalibrationBins to comply with Watch (Major:%d Minor:%d).", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FDC0 != -1)
            dispatch_once(&qword_10229FDC0, &stru_102179C68);
          v15 = *(_DWORD *)(a1 + 148);
          v16 = *(_DWORD *)(a1 + 152);
          *(_DWORD *)v20 = 67109376;
          *(_DWORD *)&v20[4] = v15;
          *(_WORD *)&v20[8] = 1024;
          *(_DWORD *)&v20[10] = v16;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "Phone converted RawSpeedToKValueTable to StrideCalibrationBins to comply with Watch (Major:%d Minor:%d).", v20, 14);
          v18 = (uint8_t *)v17;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()", "%s\n", v17);
          if (v18 != buf)
            free(v18);
        }
      }
      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", CFSTR("RawSpeedToKValueTable"));
      -[NSMutableDictionary removeObjectForKey:](v3, "removeObjectForKey:", CFSTR("StepCadenceToStrideLengthTable"));
    }
    v7 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithDictionary:](NSDictionary, "dictionaryWithDictionary:", v3), 1, 0);
    v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100C054B0;
    v19[3] = &unk_102155328;
    v19[4] = v7;
    objc_msgSend(v8, "doAsync:", v19);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v9 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      sub_1010BB124(v3, buf);
      v10 = v27 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v20 = 136315138;
      *(_QWORD *)&v20[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Companion sent calibrations to watch: %s", v20, 0xCu);
      if (v27 < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v11 = qword_10229FDC8;
      sub_1010BB124(v3, v20);
      if (v21 >= 0)
        v12 = v20;
      else
        v12 = *(_BYTE **)v20;
      v22 = 136315138;
      v23 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 1, "Companion sent calibrations to watch: %s", (const char *)&v22);
      v14 = v13;
      if (v21 < 0)
        operator delete(*(void **)v20);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
}

void sub_100C04AE4(uint64_t a1, int *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionSyncStoreCompanion::onPalUpdateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179C88);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreCompanion::onPalUpdateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179C88);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreCompanion::onPalUpdateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C04FA4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C04C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C04CBC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionSyncStoreCompanion::onCompanionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179C88);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionSyncStoreCompanion::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179C88);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionSyncStoreCompanion::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C0517C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C04E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C04E98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_102179B20;
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);

  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;

  *(_QWORD *)(a1 + 176) = 0;
  v4 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return sub_1010BAD50(a1);
}

void sub_100C04F80(uint64_t a1)
{
  sub_100C04E98(a1);
  operator delete();
}

uint64_t sub_100C04FA4(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  NSObject *v7;
  int v8;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[4];
  int v15;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v7 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67109120;
    v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v10 = *a3;
    v13[0] = 67109120;
    v13[1] = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "%d", v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::onPalUpdateNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_DWORD *)buf = *a4;
  return sub_10023195C(a1 + 128, 5, (uint64_t)buf);
}

void sub_100C0517C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  _DWORD v17[4];
  uint8_t buf[4];
  uint64_t v19;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v7 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    v8 = *a3;
    *(_DWORD *)buf = 67109120;
    LODWORD(v19) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "notification, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v14 = *a3;
    v17[0] = 67109120;
    v17[1] = v14;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "notification, %d", v17);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if (*a3 == 6)
  {
    if (*(_BYTE *)a4)
    {
      *(_DWORD *)buf = 0;
      buf[0] = sub_1010BB9CC(*(_DWORD *)(a4 + 4), *(_DWORD *)(a4 + 8));
      v19 = *(_QWORD *)(a4 + 4);
      v9 = a1 + 128;
      v10 = 2;
    }
    else
    {
      v9 = a1 + 128;
      v10 = 3;
    }
    sub_10023195C(v9, v10, (uint64_t)buf);
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v11 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Unhandled notification", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      LOWORD(v17[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Unhandled notification", v17, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

id sub_100C054B0(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(120.0, a2, 14, *(void **)(a1 + 32), 300, 0, 0, 0, 1, 0);
}

uint64_t sub_100C054F8(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Device is now unlocked.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Device is now unlocked.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreCompanion::deviceUnlocked()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_10023195C(a1 + 128, 1, (uint64_t)buf);
}

void sub_100C05698(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSArray *v10;
  id v11;
  uint64_t v12;
  void *i;
  const __CFString *v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint8_t *v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  char *v25;
  NSObject *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  int v34;
  int v35;
  const char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[14];
  char v42;
  int v43;
  _BYTE *v44;
  uint8_t v45[128];
  uint8_t buf[8];
  uint64_t v47;
  uint64_t v48;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    v3 = sub_1010BB6C4(*(void **)(a1 + 168));
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v3;
    LOWORD(v47) = 1024;
    *(_DWORD *)((char *)&v47 + 2) = sub_1010BAF0C(a1);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v29 = qword_10229FDC8;
    v30 = sub_1010BB6C4(*(void **)(a1 + 168));
    *(_DWORD *)v41 = 67109376;
    *(_DWORD *)&v41[4] = v30;
    *(_WORD *)&v41[8] = 1024;
    *(_DWORD *)&v41[10] = sub_1010BAF0C(a1);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d", v41, 14);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v4 = sub_1001FD94C();
  *(_DWORD *)buf = sub_1010BB6C4(*(void **)(a1 + 168));
  sub_10011B5B8(v4, CFSTR("CalibrationVersion"), buf);
  v5 = sub_1001FD94C();
  *(double *)buf = sub_1010BB768(*(void **)(a1 + 168));
  sub_10018A534(v5, CFSTR("CalibrationTimestamp"), buf);
  v6 = sub_1001FD94C();
  sub_1010BB710(*(void **)(a1 + 168), buf);
  sub_1005288FC(v6, CFSTR("CalibrationUDID"), (char *)buf);
  if (SHIBYTE(v48) < 0)
    operator delete(*(void **)buf);
  v7 = sub_1001FD94C();
  buf[0] = sub_1010BB984(*(void **)(a1 + 168));
  sub_10011B81C(v7, CFSTR("CalibrationResetRequested"), buf);
  v8 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 944))(v8);
  *(_BYTE *)(a1 + 146) = 1;
  if ((sub_1010BAF0C(a1) & 1) != 0)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v9 = CMNatalimeterSetUserVo2max;
    *(double *)buf = CMNatalimeterSetUserPal;
    v47 = CMNatalimeterSetUserVo2max;
    v48 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    v10 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 3);
    v11 = -[NSArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v38;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v38 != v12)
            objc_enumerationMutation(v10);
          v14 = *(const __CFString **)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v14))
          {
            v15 = *(_QWORD *)(a1 + 192);
            objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v14), "floatValue");
            *(double *)buf = v16;
            sub_10018A534(v15, v14, buf);
          }
        }
        v11 = -[NSArray countByEnumeratingWithState:objects:count:](v10, "countByEnumeratingWithState:objects:count:", &v37, v45, 16);
      }
      while (v11);
    }
    if (!objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v9))
      sub_1005254E4(*(_QWORD *)(a1 + 192));
    if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable")))
    {
      +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable")), 1, 0);
      sub_10023EC14(*(_QWORD *)(a1 + 192));
    }
    if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable")))
    {
      +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable")), 1, 0);
      sub_10023EC14(*(_QWORD *)(a1 + 192));
    }
    v17 = *(_QWORD *)(a1 + 192);
    *(_DWORD *)buf = sub_1010BB6C4(*(void **)(a1 + 168));
    sub_10011B5B8(v17, CFSTR("CalibrationVersion"), buf);
    v18 = *(_QWORD *)(a1 + 192);
    sub_1010BB710(*(void **)(a1 + 168), buf);
    sub_1005288FC(v18, CFSTR("CalibrationUDID"), (char *)buf);
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)buf);
    v19 = *(_QWORD *)(a1 + 192);
    *(double *)buf = sub_1010BB768(*(void **)(a1 + 168));
    sub_10018A534(v19, CFSTR("CalibrationTimestamp"), buf);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 944))(*(_QWORD *)(a1 + 192));
    *(_BYTE *)(a1 + 146) = 0;
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v20 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      sub_1010BB124(*(void **)(a1 + 168), buf);
      v21 = v48 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v41 = 136315138;
      *(_QWORD *)&v41[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Companion persisted calibrations to disk, fMotionCals = %s", v41, 0xCu);
      if (SHIBYTE(v48) < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v22 = qword_10229FDC8;
    sub_1010BB124(*(void **)(a1 + 168), v41);
    v23 = v42 >= 0 ? v41 : *(_BYTE **)v41;
    v43 = 136315138;
    v44 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 1, "Companion persisted calibrations to disk, fMotionCals = %s", (const char *)&v43);
    v25 = v24;
    if (v42 < 0)
      operator delete(*(void **)v41);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v25);
    if (v25 == (char *)buf)
      return;
LABEL_57:
    free(v25);
    return;
  }
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v26 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    v27 = sub_1010BB6C4(*(void **)(a1 + 168));
    v28 = sub_1010BAF0C(a1);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v27;
    LOWORD(v47) = 1024;
    *(_DWORD *)((char *)&v47 + 2) = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v33 = qword_10229FDC8;
    v34 = sub_1010BB6C4(*(void **)(a1 + 168));
    v35 = sub_1010BAF0C(a1);
    *(_DWORD *)v41 = 67109376;
    *(_DWORD *)&v41[4] = v34;
    *(_WORD *)&v41[8] = 1024;
    *(_DWORD *)&v41[10] = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 1, "Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d", v41, 14);
    v25 = (char *)v36;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::persistCachedValues()", "%s\n", v36);
    if (v25 != (char *)buf)
      goto LABEL_57;
  }
}

void sub_100C05EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C05F10(uint64_t a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  uint64_t v5;
  NSArray *v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  float v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  std::string::size_type v22;
  int v23;
  std::string *v24;
  NSObject *v25;
  void **v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  int v30;
  _BYTE *v31;
  std::string *v32;
  std::string *v33;
  void **v34;
  const char *v35;
  std::string *v36;
  const char *v37;
  std::string *v38;
  CFAbsoluteTime Current;
  BOOL v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  int64_t v50;
  _BYTE buf[12];
  __int16 v52;
  int v53;
  char v54;
  int v55;
  _BYTE *v56;
  __int16 v57;
  int v58;
  std::string v59;
  std::string v60;
  _BYTE v61[128];

  objc_msgSend(*(id *)(a1 + 168), "removeAllObjects");
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 936))(*(_QWORD *)(a1 + 192));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 200) + 936))(*(_QWORD *)(a1 + 200));
  sub_100585534(&v59);
  v2 = std::string::append(&v59, "user.plist");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v50 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v50 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if (sub_1000B78B0((const char *)v4))
  {
    v48 = 0;
    if (sub_100219F40(*(_QWORD *)(a1 + 192), (uint64_t)CFSTR("RawSpeedToKValueTable"), (CFTypeRef *)&v48))
      objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", sub_1010BAA8C(v48), CFSTR("RawSpeedToKValueTable"));
    v47 = 0;
    if (sub_100219F40(*(_QWORD *)(a1 + 192), (uint64_t)CFSTR("StepCadenceToStrideLengthTable"), (CFTypeRef *)&v47))objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", sub_1010BAA8C(v47), CFSTR("StepCadenceToStrideLengthTable"));
    v46 = 0x800000;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v5 = CMNatalimeterSetUserVo2max;
    v59.__r_.__value_.__r.__words[0] = CMNatalimeterSetUserPal;
    v59.__r_.__value_.__l.__size_ = CMNatalimeterSetUserVo2max;
    v59.__r_.__value_.__r.__words[2] = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    v6 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v59, 3);
    v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v42, v61, 16);
    if (v7)
    {
      v8 = *(_QWORD *)v43;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v43 != v8)
            objc_enumerationMutation(v6);
          v10 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i);
          *(float *)&v11 = sub_10052688C(*(_QWORD *)(a1 + 192), v10, (float *)&v46);
          if (v12)
          {
            LODWORD(v11) = v46;
            objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11), v10);
          }
        }
        v7 = -[NSArray countByEnumeratingWithState:objects:count:](v6, "countByEnumeratingWithState:objects:count:", &v42, v61, 16, v11);
      }
      while (v7);
    }
    v41 = 0;
    sub_1001C1194(*(_QWORD *)(a1 + 192), (uint64_t)CFSTR("CalibrationVersion"), &v41);
    v13 = sub_1001FD94C();
    sub_1001C1194(v13, (uint64_t)CFSTR("CalibrationVersion"), &v41);
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v41), CFSTR("CalibrationVersion"));
    sub_100197040();
    sub_10075AE6C((uint64_t)&v60);
    sub_1000BD5F0(*(_QWORD *)(a1 + 192), (uint64_t)CFSTR("CalibrationUDID"), &v60);
    v14 = sub_1001FD94C();
    sub_1000BD5F0(v14, (uint64_t)CFSTR("CalibrationUDID"), &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v60;
    else
      v15 = (std::string *)v60.__r_.__value_.__r.__words[0];
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15), CFSTR("CalibrationUDID"));
    v40 = 0;
    v16 = sub_1001FD94C();
    sub_1001E48E4(v16, (uint64_t)CFSTR("CalibrationResetRequested"), &v40);
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v40), CFSTR("CalibrationResetRequested"));
    if ((sub_1010BB984(*(void **)(a1 + 168)) & 1) == 0)
    {
      if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v5))
      {
        objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v5), "floatValue");
        if (v17 == 0.0)
        {
          if (qword_10229FDC0 != -1)
            dispatch_once(&qword_10229FDC0, &stru_102179C68);
          v18 = qword_10229FDC8;
          if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
          {
            LOWORD(v59.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Clearing a stale vo2max of 0 value.", (uint8_t *)&v59, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&v59, 0x65CuLL);
            if (qword_10229FDC0 != -1)
              dispatch_once(&qword_10229FDC0, &stru_102179C68);
            *(_WORD *)buf = 0;
            _os_log_send_and_compose_impl(2, 0, &v59, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Clearing a stale vo2max of 0 value.", buf, 2);
            v38 = (std::string *)v37;
            sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()", "%s\n", v37);
            if (v38 != &v59)
              free(v38);
          }
          objc_msgSend(*(id *)(a1 + 168), "removeObjectForKey:", v5);
          sub_1005254E4(*(_QWORD *)(a1 + 192));
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 192) + 944))(*(_QWORD *)(a1 + 192));
        }
      }
    }
    Current = CFAbsoluteTimeGetCurrent();
    sub_1001FD9FC(*(_QWORD *)(a1 + 192), (uint64_t)CFSTR("CalibrationTimestamp"), &Current);
    v19 = sub_1001FD94C();
    sub_1001FD9FC(v19, (uint64_t)CFSTR("CalibrationTimestamp"), &Current);
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current), CFSTR("CalibrationTimestamp"));
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v20 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      sub_1010BB124(*(void **)(a1 + 168), &v59);
      v21 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
      v22 = v59.__r_.__value_.__r.__words[0];
      v23 = sub_1010BB6C4(*(void **)(a1 + 168));
      v24 = &v59;
      if (v21 < 0)
        v24 = (std::string *)v22;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v24;
      v52 = 1024;
      v53 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Loaded Motion Cals from backup: fMotionCals, %s, current version, %d", buf, 0x12u);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v59, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v27 = qword_10229FDC8;
      sub_1010BB124(*(void **)(a1 + 168), buf);
      v28 = v54;
      v29 = *(_BYTE **)buf;
      v30 = sub_1010BB6C4(*(void **)(a1 + 168));
      v31 = buf;
      if (v28 < 0)
        v31 = v29;
      v55 = 136315394;
      v56 = v31;
      v57 = 1024;
      v58 = v30;
      _os_log_send_and_compose_impl(2, 0, &v59, 1628, &_mh_execute_header, v27, 1, "Loaded Motion Cals from backup: fMotionCals, %s, current version, %d", (const char *)&v55, 18);
      v33 = v32;
      if (v54 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()", "%s\n", (const char *)v33);
      if (v33 != &v59)
        free(v33);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v25 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      v26 = __p;
      if (v50 < 0)
        v26 = (void **)__p[0];
      LODWORD(v59.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "No motion cal backup file was found at path: %s. Restore PAL.", (uint8_t *)&v59, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v59, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v34 = __p;
      if (v50 < 0)
        v34 = (void **)__p[0];
      LODWORD(v60.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v60.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
      _os_log_send_and_compose_impl(2, 0, &v59, 1628, &_mh_execute_header, qword_10229FDC8, 1, "No motion cal backup file was found at path: %s. Restore PAL.", (const char *)&v60);
      v36 = (std::string *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupMotionCals()", "%s\n", v35);
      if (v36 != &v59)
        free(v36);
    }
    sub_100C06884(a1);
  }
  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
}

void sub_100C067D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 217) < 0)
    operator delete(*(void **)(v48 - 240));
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C06884(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  double v4;
  int v5;
  void **v6;
  NSObject *v7;
  int v8;
  uint8_t *v9;
  int v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  void *__p[2];
  char v22;
  int v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  char v27;
  int v28;
  _BYTE *v29;
  __int16 v30;
  int v31;
  uint8_t buf[8];
  char v33;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restore pal", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "restore pal", __p, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupPal()", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  v23 = 0x800000;
  v3 = CMNatalimeterSetUserPal;
  sub_10052688C(*(_QWORD *)(a1 + 200), CMNatalimeterSetUserPal, (float *)&v23);
  if (v5)
  {
    LODWORD(v4) = v23;
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v4), v3);
  }
  sub_1010BB7B4(*(void **)(a1 + 168), 1);
  sub_100197040();
  sub_10075AE6C((uint64_t)__p);
  if (v22 >= 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6), CFSTR("CalibrationUDID"));
  objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()), CFSTR("CalibrationTimestamp"));
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v7 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    sub_1010BB124(*(void **)(a1 + 168), buf);
    v8 = v33;
    v9 = *(uint8_t **)buf;
    v10 = sub_1010BB6C4(*(void **)(a1 + 168));
    v11 = buf;
    if (v8 < 0)
      v11 = v9;
    *(_DWORD *)v24 = 136315394;
    *(_QWORD *)&v24[4] = v11;
    v25 = 1024;
    v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.", v24, 0x12u);
    if (v33 < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v14 = qword_10229FDC8;
    sub_1010BB124(*(void **)(a1 + 168), v24);
    v15 = v27;
    v16 = *(_BYTE **)v24;
    v17 = sub_1010BB6C4(*(void **)(a1 + 168));
    v18 = v24;
    if (v15 < 0)
      v18 = v16;
    v28 = 136315394;
    v29 = v18;
    v30 = 1024;
    v31 = v17;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 1, "Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.", (const char *)&v28, 18);
    v20 = v19;
    if (v27 < 0)
      operator delete(*(void **)v24);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::restoreBackupPal()", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  sub_100C05698(a1);
  if (v22 < 0)
    operator delete(__p[0]);
}

void sub_100C06CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSArray *sub_100C06D18(uint64_t a1)
{
  NSArray *result;

  result = (NSArray *)objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable"));
  if (result)
    return +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("RawSpeedToKValueTable")));
  return result;
}

NSArray *sub_100C06D74(uint64_t a1)
{
  NSArray *result;

  result = (NSArray *)objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable"));
  if (result)
    return +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CFSTR("StepCadenceToStrideLengthTable")));
  return result;
}

NSDate *sub_100C06DD0(uint64_t a1)
{
  if (sub_1010BB768(*(void **)(a1 + 168)) >= 1.0)
    return +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", sub_1010BB768(*(void **)(a1 + 168)));
  else
    return 0;
}

void sub_100C06E24(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "restoring backup motion cals", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "restoring backup motion cals", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doRestoreBackupMotionCals(const EDeviceUnlocked *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_100C05F10(a1);
}

id sub_100C06FBC(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  *(_BYTE *)(a1 + 147) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a2 + 4);
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v3 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    v4 = *(unsigned __int8 *)(a1 + 147);
    *(_DWORD *)buf = 67109120;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "quickswitch protocol %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v6 = *(unsigned __int8 *)(a1 + 147);
    v9[0] = 67109120;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "quickswitch protocol %d", v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doConnected(const EWatchConnected *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*(_BYTE *)(a1 + 147))
    objc_msgSend(*(id *)(a1 + 184), "setFireInterval:", *(double *)(a1 + 160));
  return sub_100C07198(a1);
}

id sub_100C07198(uint64_t a1)
{
  id result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  result = sub_100C08DF0(a1);
  if ((_DWORD)result)
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v3 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Scheduled send to watch.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Scheduled send to watch.", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::scheduleFastSendToWatch()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return objc_msgSend(*(id *)(a1 + 184), "setNextFireDelay:", 2.56);
  }
  return result;
}

void sub_100C07340(uint64_t a1, float *a2)
{
  float v3;
  uint64_t v4;
  float v5;
  float v6;
  NSObject *v7;
  double v8;
  _BYTE *v9;
  void *v10;
  int v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  const char *v15;
  char *v16;
  double v17;
  int v18;
  double v19;
  __int16 v20;
  double v21;
  _BYTE buf[12];
  __int16 v23;
  double v24;
  char v25;

  v3 = *a2;
  v4 = CMNatalimeterSetUserPal;
  if (objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", CMNatalimeterSetUserPal))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 168), "objectForKeyedSubscript:", v4), "floatValue");
    v6 = v5;
  }
  else
  {
    v6 = 0.0;
  }
  if (vabds_f32(v6, v3) <= 0.5)
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v12 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PAL not loaded or changed.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      LOWORD(v18) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "PAL not loaded or changed.", &v18, 2);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doUpdatePAL(const EPalUpdated *)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v7 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&buf[4] = v6;
      v23 = 2048;
      v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "PAL is updated from %f to %f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v18 = 134218240;
      v19 = v6;
      v20 = 2048;
      v21 = v3;
      LODWORD(v17) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "PAL is updated from %f to %f", COERCE_DOUBLE(&v18), v17);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doUpdatePAL(const EPalUpdated *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *(float *)&v8 = v3;
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8), v4);
    sub_100197040();
    sub_10075AE6C((uint64_t)buf);
    if (v25 >= 0)
      v9 = buf;
    else
      v9 = *(_BYTE **)buf;
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), CFSTR("CalibrationUDID"));
    objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()), CFSTR("CalibrationTimestamp"));
    v10 = *(void **)(a1 + 168);
    v11 = sub_1010BB6C4(v10);
    sub_1010BB7B4(v10, (v11 + 1));
    sub_100C05698(a1);
    sub_100C07198(a1);
    if (v25 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_100C07748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100C07770(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Restore & Arbitrate", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "Restore & Arbitrate", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doRestoreBackupArbitrate(const EDeviceUnlocked *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_100C05F10(a1);
  sub_100C07918(a1);
  return sub_100C07198(a1);
}

void sub_100C07918(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = sub_100C08768(a1, *(void **)(a1 + 168), *(void **)(a1 + 176));
  v3 = v2;
  sub_100C08CD0(v2, *(void **)(a1 + 168), *(void **)(a1 + 176), v2);
  switch(v3)
  {
    case 2:
    case 4:
      sub_100C05698(a1);
      break;
    case 3:
      sub_100C05698(a1);
      goto LABEL_4;
    case 5:
LABEL_4:
      sub_100C07198(a1);
      break;
    default:
      return;
  }
}

id sub_100C07998(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "processing motion cals received from watch", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "processing motion cals received from watch", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doBufferMotionCalsFromWatch(const ECalibrationFromWatch *)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return objc_msgSend(*(id *)(a1 + 176), "addEntriesFromDictionary:", *a2);
}

id sub_100C07B38(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "disconnected", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "disconnected", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doDisconnected(const EWatchDisconnected *)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 184), "setNextFireDelay:", 1.79769313e308);
}

void sub_100C07CD8(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "arbitration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "arbitration", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::doArbitrateMotionCals(const ECalibrationFromWatch *)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  objc_msgSend(*(id *)(a1 + 176), "addEntriesFromDictionary:", *a2);
  sub_100C07918(a1);
}

uint64_t sub_100C07E80(uint64_t a1, void *a2)
{
  NSObject *v4;
  void **v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  _BYTE buf[12];
  char v12;
  int v13;
  _BYTE *v14;
  void *__p[2];
  char v16;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    sub_1010BB124(a2, __p);
    v5 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Companion received calibrations from watch: %s", buf, 0xCu);
    if (v16 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v7 = qword_10229FDC8;
    sub_1010BB124(a2, buf);
    if (v12 >= 0)
      v8 = buf;
    else
      v8 = *(_BYTE **)buf;
    v13 = 136315138;
    v14 = v8;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 1, "Companion received calibrations from watch: %s", (const char *)&v13);
    v10 = v9;
    if (v12 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionSyncStoreCompanion::receiveMotionCals(NSDictionary *)", "%s\n", v10);
    if (v10 != (char *)__p)
      free(v10);
  }
  __p[0] = a2;
  return sub_10023195C(a1 + 128, 4, (uint64_t)__p);
}

id sub_100C080B0(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSArray *v7;
  id v8;
  uint64_t v9;
  void *i;
  id v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  uint8_t *v15;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _WORD v28[8];
  uint8_t v29[128];
  uint8_t buf[8];
  uint64_t v31;
  uint64_t v32;

  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v2 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "clearing motion calibrations", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v28[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 1, "clearing motion calibrations", v28, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  v4 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLNatalimetryNotifier")), "syncgetUserProfileInternal");
  if (v4)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v5 = CMNatalimeterSetUserVo2max;
    *(_QWORD *)buf = CMNatalimeterSetUserPal;
    v31 = CMNatalimeterSetUserVo2max;
    v6 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    v32 = CMNatalimeterSetUserAdaptiveExerciseMinuteThreshold;
    v7 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", buf, 3);
    v8 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
    if (v8)
    {
      v9 = *(_QWORD *)v25;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v9)
            objc_enumerationMutation(v7);
          objc_msgSend(v3, "setObject:forKeyedSubscript:", objc_msgSend(v4, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i)), *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i));
        }
        v8 = -[NSArray countByEnumeratingWithState:objects:count:](v7, "countByEnumeratingWithState:objects:count:", &v24, v29, 16);
      }
      while (v8);
    }
    objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_102220BF8, v5);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", &off_102220C08, v6);
  }
  v11 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "syncgetRawSpeedToKValueDefaultBins");
  if (v11)
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v11, CFSTR("RawSpeedToKValueTable"));
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v12 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning Failed to retreive default raw speed to kValue bins.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v28[0] = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "#Warning Failed to retreive default raw speed to kValue bins.", v28, v23);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
  }
  v13 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "syncgetStepCadenceToStrideLengthDefaultBins");
  if (v13)
  {
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v13, CFSTR("StepCadenceToStrideLengthTable"));
  }
  else
  {
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    v14 = qword_10229FDC8;
    if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Failed to retreive default step cadence to stride length bins.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v28[0] = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "#Warning Failed to retreive default step cadence to stride length bins.", v28, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionSyncStoreCompanion::clearMotionCalibrations()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  objc_msgSend(*(id *)(a1 + 168), "addEntriesFromDictionary:", v3);
  sub_100197040();
  sub_10075AE6C((uint64_t)buf);
  if (v32 >= 0)
    v15 = buf;
  else
    v15 = *(uint8_t **)buf;
  objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15), CFSTR("CalibrationUDID"));
  if (SHIBYTE(v32) < 0)
    operator delete(*(void **)buf);
  objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()), CFSTR("CalibrationTimestamp"));
  return objc_msgSend(*(id *)(a1 + 168), "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("CalibrationResetRequested"));
}

void sub_100C08700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100C08724(uint64_t a1)
{
  void *v2;
  int v3;

  sub_100C080B0(a1);
  v2 = *(void **)(a1 + 168);
  v3 = sub_1010BB6C4(v2);
  sub_1010BB7B4(v2, (v3 + 1));
  sub_100C05698(a1);
  return sub_100C07198(a1);
}

uint64_t sub_100C08768(uint64_t a1, void *a2, void *a3)
{
  double v5;
  int v6;
  double v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  void **v15;
  unsigned int v16;
  unsigned int v17;
  NSObject *v18;
  void *p_s1;
  void *p_p;
  void *v22;
  void *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  void *__p;
  uint64_t v30;
  const char *v31;
  void *__s1;
  size_t __n;
  unsigned __int8 v34;
  _DWORD v35[2];
  __int16 v36;
  void *v37;
  __int16 v38;
  double v39;
  __int16 v40;
  int v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  double v45;
  __int16 v46;
  int v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  double v53;
  __int16 v54;
  int v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;

  if (objc_msgSend(a3, "count"))
  {
    sub_1010BB710(a3, &__s1);
    v5 = sub_1010BB768(a3);
    v6 = sub_1010BB6C4(a3);
    sub_1010BB710(a2, &__p);
    v7 = sub_1010BB768(a2);
    v8 = sub_1010BB6C4(a2);
    if (sub_1010BB9E8(a3))
    {
      if (objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("HasSavedInitialMotionCalsToDisk")), "BOOLValue"))v9 = 2;
      else
        v9 = 5;
LABEL_40:
      if (qword_10229FDC0 != -1)
        dispatch_once(&qword_10229FDC0, &stru_102179C68);
      v18 = qword_10229FDC8;
      if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEFAULT))
      {
        p_s1 = &__s1;
        if ((v34 & 0x80u) != 0)
          p_s1 = __s1;
        p_p = &__p;
        if (SHIBYTE(v31) < 0)
          p_p = __p;
        *(_DWORD *)buf = 67110658;
        v49 = v6;
        v50 = 2080;
        v51 = p_s1;
        v52 = 2048;
        v53 = v5;
        v54 = 1024;
        v55 = v8;
        v56 = 2080;
        v57 = p_p;
        v58 = 2048;
        v59 = v7;
        v60 = 1024;
        v61 = v9;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d", buf, 0x3Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FDC0 != -1)
          dispatch_once(&qword_10229FDC0, &stru_102179C68);
        v22 = &__s1;
        if ((v34 & 0x80u) != 0)
          v22 = __s1;
        v23 = &__p;
        if (SHIBYTE(v31) < 0)
          v23 = __p;
        v35[0] = 67110658;
        v35[1] = v6;
        v36 = 2080;
        v37 = v22;
        v38 = 2048;
        v39 = v5;
        v40 = 1024;
        v41 = v8;
        v42 = 2080;
        v43 = v23;
        v44 = 2048;
        v45 = v7;
        v46 = 1024;
        v47 = v9;
        LODWORD(v28) = 60;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 0, "Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d", v35, v28, *(double *)&__p, v30, v31, *(double *)&__s1, __n);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      if (SHIBYTE(v31) < 0)
        operator delete(__p);
      if ((char)v34 < 0)
        operator delete(__s1);
      return v9;
    }
    v11 = v34;
    if ((v34 & 0x80u) == 0)
      v12 = v34;
    else
      v12 = __n;
    v13 = HIBYTE(v31);
    if (SHIBYTE(v31) < 0)
      v13 = v30;
    if (v12 == v13)
    {
      if (SHIBYTE(v31) >= 0)
        v14 = (unsigned __int8 *)&__p;
      else
        v14 = (unsigned __int8 *)__p;
      if ((v34 & 0x80) == 0)
      {
        if (v34)
        {
          v15 = &__s1;
          while (*(unsigned __int8 *)v15 == *v14)
          {
            v15 = (void **)((char *)v15 + 1);
            ++v14;
            if (!--v11)
              goto LABEL_34;
          }
          goto LABEL_28;
        }
LABEL_34:
        if (v5 <= v7)
          v17 = 5;
        else
          v17 = 3;
        if (v5 == v7)
          v9 = 1;
        else
          v9 = v17;
        goto LABEL_40;
      }
      if (!memcmp(__s1, v14, __n))
        goto LABEL_34;
    }
LABEL_28:
    if (v6 == v8)
      v16 = 3;
    else
      v16 = 4;
    if (v6 >= v8)
      v9 = v16;
    else
      v9 = 5;
    goto LABEL_40;
  }
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_102179C68);
  v10 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "No buffered Motion Cals, no arbitration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDC0 != -1)
      dispatch_once(&qword_10229FDC0, &stru_102179C68);
    LOWORD(v35[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDC8, 2, "No buffered Motion Cals, no arbitration", v35, 2);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NSDictionary *) const", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  return 1;
}

void sub_100C08C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

id sub_100C08CD0(uint64_t a1, void *a2, void *a3, int a4)
{
  id v7;
  uint64_t v8;
  int v9;

  v7 = objc_msgSend(a3, "objectForKeyedSubscript:", CFSTR("CalibrationResetRequested"));
  sub_1010BBA34(a3);
  switch(a4)
  {
    case 4:
      objc_msgSend(a2, "setDictionary:", a3);
LABEL_10:
      objc_msgSend(a2, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("CalibrationResetRequested"));
      return objc_msgSend(a3, "removeAllObjects");
    case 3:
      objc_msgSend(a2, "setDictionary:", a3);
      objc_msgSend(a2, "setObject:forKeyedSubscript:", &__kCFBooleanFalse, CFSTR("CalibrationResetRequested"));
      v9 = sub_1010BB6C4(a2);
      sub_1010BB7B4(a2, (v9 + 1));
      return objc_msgSend(a3, "removeAllObjects");
    case 2:
      v8 = CMNatalimeterSetUserVo2max;
      if (objc_msgSend(a3, "objectForKeyedSubscript:", CMNatalimeterSetUserVo2max)
        && !objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", v8), "intValue"))
      {
        objc_msgSend(a3, "removeObjectForKey:", v8);
        objc_msgSend(a2, "removeObjectForKey:", v8);
      }
      objc_msgSend(a2, "addEntriesFromDictionary:", a3);
      if (v7)
        goto LABEL_10;
      break;
  }
  return objc_msgSend(a3, "removeAllObjects");
}

id sub_100C08DF0(uint64_t a1)
{
  objc_class *v2;
  id result;

  v2 = -[objc_class sharedInstance](off_1022F9E78(), "sharedInstance");
  result = objc_msgSend(-[objc_class getAllDevicesWithArchivedDevicesMatching:](v2, "getAllDevicesWithArchivedDevicesMatching:", -[objc_class activeDeviceSelectorBlock](off_1022F9E78(), "activeDeviceSelectorBlock")), "firstObject");
  if (result)
    return (id)(*(_BYTE *)(a1 + 147) != 0);
  return result;
}

void sub_100C08E54(id a1)
{
  qword_10229FDC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionSync");
}

void sub_100C08E80(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

Class sub_100C08EAC()
{
  Class result;

  if (qword_1023072D0 != -1)
    dispatch_once(&qword_1023072D0, &stru_102179CA8);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_1023072C8 = (uint64_t)result;
  off_1022F9E78 = sub_100C08F08;
  return result;
}

uint64_t sub_100C08F08()
{
  return qword_1023072C8;
}

void sub_100C08F14(id a1)
{
  qword_1023072D8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

uint64_t sub_100C08F3C()
{
  sub_1015A2E04(qword_1023072B0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023072B0, (void *)&_mh_execute_header);
}

void sub_100C09830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100C09D98(uint64_t a1)
{
  _QWORD v3[9];
  _QWORD v4[9];

  v3[0] = CFSTR("ageGroup");
  v4[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3[1] = CFSTR("distancePercentageErrorBin");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3[2] = CFSTR("gender");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[3] = CFSTR("speedBin");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v3[4] = CFSTR("userBmiBin");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v3[5] = CFSTR("userHeightBin");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v3[6] = CFSTR("countPerBin");
  v4[6] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 336 * *(int *)(a1 + 52) + 24 * *(int *)(a1 + 44) + 448));
  v3[7] = CFSTR("sumRatioGPStoRawDist");
  v4[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 336 * *(int *)(a1 + 52) + 24 * *(int *)(a1 + 44) + 456));
  v3[8] = CFSTR("sumRatioMobilitytoRawDist");
  v4[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 336 * *(int *)(a1 + 52) + 24 * *(int *)(a1 + 44) + 464));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 9);
}

void sub_100C09F84(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_100C09FB0()
{
  _OWORD *v0;
  _OWORD *v1;

  qword_1023072E0 = 0;
  qword_1023072E8 = 0;
  qword_1023072F0 = 0;
  v0 = operator new(0x38uLL);
  qword_1023072E8 = (uint64_t)v0 + 56;
  qword_1023072F0 = (uint64_t)v0 + 56;
  *v0 = xmmword_101C1E4C8;
  v0[1] = unk_101C1E4D8;
  v0[2] = xmmword_101C1E4E8;
  *((_QWORD *)v0 + 6) = 0x4003333333333333;
  qword_1023072E0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_1023072E0, (void *)&_mh_execute_header);
  qword_102307300 = 0;
  unk_102307308 = 0;
  qword_1023072F8 = 0;
  v1 = operator new(0x68uLL);
  qword_102307300 = (uint64_t)v1 + 104;
  unk_102307308 = (char *)v1 + 104;
  v1[4] = xmmword_101C1E540;
  v1[5] = unk_101C1E550;
  *((_QWORD *)v1 + 12) = 0x4049000000000000;
  *v1 = xmmword_101C1E500;
  v1[1] = unk_101C1E510;
  v1[2] = xmmword_101C1E520;
  v1[3] = unk_101C1E530;
  qword_1023072F8 = (uint64_t)v1;
  return __cxa_atexit((void (*)(void *))sub_1004093B0, &qword_1023072F8, (void *)&_mh_execute_header);
}

void sub_100C0A130(id a1)
{
  qword_102307310 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLBluetoothServiceSilo"));
}

uint64_t sub_100C0A1E4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100C0A8EC;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102307330 != -1)
    dispatch_once(&qword_102307330, block);
  return qword_1023113D0;
}

void sub_100C0A350(id a1)
{
  sub_100197040();
  if (sub_10075FEF4())
    byte_102307320 = 1;
}

BOOL sub_100C0A38C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];
  uint64_t v8;
  __int16 v9;

  v8 = -1;
  v9 = 0x7FFF;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102179F08);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Clearing AFH map.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Clearing AFH map.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBluetoothService::clearAFHSettings()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return sub_100C103F8(a1, (uint64_t)&v8);
}

BOOL sub_100C0A58C(uint64_t a1, int *a2, unsigned int a3)
{
  _BOOL8 result;
  _BYTE v5[10];

  result = sub_100C107BC((uint64_t)v5, a2, a3);
  if (result)
    return sub_100C103F8(a1, (uint64_t)v5);
  return result;
}

uint64_t sub_100C0A628(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BOOL4 v3;
  uint64_t result;
  const char *v5;
  NSObject *v6;
  _BOOL4 v7;
  uint8_t *v8;
  _QWORD v9[2];
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 112) && (v1 = *(_QWORD *)(a1 + 120)) != 0)
  {
    if (!BTDiscoveryAgentStartScan(v1, 0, 0xFFFFFFFFLL))
      return 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "BTDiscoveryAgentStartScan failed", buf, 2u);
    }
    v3 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BTDiscoveryAgentStartScan failed", v9, 2, v9[0]);
LABEL_22:
      v8 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLBluetoothService::scan()", "%s\n", v5);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "no session or agent available - cannot scan", buf, 2u);
    }
    v7 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v7)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "no session or agent available - cannot scan", v9, 2, v9[0]);
      goto LABEL_22;
    }
  }
  return result;
}

void sub_100C0A8EC()
{
  operator new();
}

void sub_100C0A934()
{
  operator delete();
}

id *sub_100C0A958(id *a1, void *a2)
{
  uint64_t v3;

  v3 = sub_100C0AA0C((uint64_t)a1, "CLBluetoothService", a2);
  *(_QWORD *)v3 = &off_102179D60;
  *(_BYTE *)(v3 + 109) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 136) = v3 + 144;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 160) = v3 + 168;
  *(_QWORD *)(v3 + 176) = 0;
  if (*(_QWORD *)(v3 + 40))
    sub_100C0AAA8(a1);
  return a1;
}

void sub_100C0A9E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_100C12538(v3, *(_QWORD **)(v1 + 168));
  sub_100C12538(v2, *(_QWORD **)(v1 + 144));
  sub_100C0ADC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C0AA0C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102179F38;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100C0AA8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100C0AAA8(id *a1)
{
  pid_t v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(void *, int, int, uint64_t);
  int v11;
  char *v12;
  uint8_t buf[4];
  char *v14;
  char __str[64];

  v10 = sub_100C0AECC;
  v2 = getpid();
  snprintf(__str, 0x40uLL, "com.apple.locationd-%d-%p\n", v2, a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102179F08);
  v3 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v14 = __str;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "attach to bluetooth server with session name %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v11 = 136315138;
    v12 = __str;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "attach to bluetooth server with session name %s", (const char *)&v11);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::attach()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (BTSessionAttachWithQueue(__str, &v10, a1, objc_msgSend(a1[5], "queue")))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not attach bluetooth session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      LOWORD(v11) = 0;
      LODWORD(v9) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not attach bluetooth session", &v11, v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::attach()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
}

uint64_t sub_100C0ADC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_102179F38;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100C0AE3C(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = &off_102179D60;
  *(_BYTE *)(a1 + 108) = 1;
  v2 = (_QWORD *)(a1 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    BTSessionDetachWithQueue(a1 + 112);
    *v2 = 0;
    v2[1] = 0;
  }
  sub_100C12538(a1 + 160, *(_QWORD **)(a1 + 168));
  sub_100C12538(a1 + 136, *(_QWORD **)(a1 + 144));
  return sub_100C0ADC8(a1);
}

void sub_100C0AEA8(uint64_t a1)
{
  sub_100C0AE3C(a1);
  operator delete();
}

void sub_100C0AECC(void *a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBluetoothService::onBluetoothSession");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothSession", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothSession\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C0BE30((const void ***)a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C0B094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C0B0B4(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(result + 112);
  v1 = *(_QWORD *)(result + 112);
  *(_BYTE *)(result + 108) = 1;
  if (v1)
  {
    result = BTSessionDetachWithQueue(result + 112);
    *v2 = 0;
    v2[1] = 0;
  }
  return result;
}

void sub_100C0B0EC(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  sub_100C0B154(a1, (uint64_t **)(a1 + 136), a1 + 160, a2, a3);
  sub_100C0B7C8(a1, a2, a3, a4);
}

void sub_100C0B154(uint64_t a1, uint64_t **a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t *v21;
  char v22;
  const void **v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  __int128 v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _BYTE v37[24];
  _BYTE buf[12];
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;

  if (*(_DWORD *)(a5 + 100) != -1 && *(_DWORD *)(a5 + 120) == 0)
  {
    switch(*a4)
    {
      case 4:
        *(_QWORD *)buf = a5 + 16;
        v21 = sub_100C137D8(a2, (const void **)(a5 + 16), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
        v21[7] = *(_QWORD *)(a5 + 8);
        std::string::operator=((std::string *)(v21 + 8), (const std::string *)(a5 + 16));
        std::string::operator=((std::string *)(v21 + 11), (const std::string *)(a5 + 40));
        std::string::operator=((std::string *)(v21 + 14), (const std::string *)(a5 + 64));
        v22 = *(_BYTE *)(a5 + 104);
        *(_OWORD *)(v21 + 17) = *(_OWORD *)(a5 + 88);
        *((_BYTE *)v21 + 152) = v22;
        break;
      case 5:
      case 0xB:
        sub_100C1392C(a2, (const void **)(a5 + 16));
        if (a3 + 8 != sub_10019C4C0(a3, (const void **)(a5 + 16)))
        {
          v8 = *(_DWORD *)(a5 + 116);
          *(_QWORD *)buf = a5 + 16;
          v9 = sub_100C137D8((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
          *((_DWORD *)v9 + 37) &= ~v8;
          *(_QWORD *)buf = a5 + 16;
          if (!*((_DWORD *)sub_100C137D8((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101B9EB60, (__int128 **)buf)+ 37))
          {
            sub_100C1392C((uint64_t **)a3, (const void **)(a5 + 16));
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102179F08);
            v10 = qword_1022A02D8;
            if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
            {
              v11 = *(_QWORD *)(a5 + 64);
              if (*(char *)(a5 + 63) >= 0)
                v12 = a5 + 40;
              else
                v12 = *(_QWORD *)(a5 + 40);
              if (*(char *)(a5 + 87) >= 0)
                v11 = a5 + 64;
              if (*(char *)(a5 + 39) >= 0)
                v13 = a5 + 16;
              else
                v13 = *(_QWORD *)(a5 + 16);
              v14 = *(_DWORD *)(a5 + 92);
              v15 = *(_QWORD *)(a3 + 16);
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = v12;
              v39 = 2080;
              v40 = v11;
              v41 = 2080;
              v42 = v13;
              v43 = 1024;
              v44 = v14;
              v45 = 2048;
              v46 = v15;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "disconnected from %s/%s @ %s of type %d - currently %lu connected device(s)", buf, 0x30u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102179F08);
              v18 = *(_QWORD *)(a5 + 64);
              v17 = a5 + 64;
              v16 = v18;
              if (*(char *)(v17 - 1) >= 0)
                v19 = v17 - 24;
              else
                v19 = *(_QWORD *)(v17 - 24);
              if (*(char *)(v17 + 23) >= 0)
                v16 = v17;
              *(_DWORD *)v37 = 136316162;
              *(_QWORD *)&v37[4] = v19;
              *(_WORD *)&v37[12] = 2080;
              *(_QWORD *)&v37[14] = v16;
              *(_WORD *)&v37[22] = 2080;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "disconnected from %s/%s @ %s of type %d - currently %lu connected device(s)", v37, 48, *(_OWORD *)v37, *(_QWORD *)&v37[16]);
              goto LABEL_56;
            }
          }
        }
        break;
      case 0xA:
        v23 = (const void **)(a5 + 16);
        if (a3 + 8 == sub_10019C4C0(a3, (const void **)(a5 + 16)))
        {
          *(_QWORD *)buf = a5 + 16;
          v26 = sub_100C137D8((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
          v26[7] = *(_QWORD *)(a5 + 8);
          std::string::operator=((std::string *)(v26 + 8), (const std::string *)(a5 + 16));
          std::string::operator=((std::string *)(v26 + 11), (const std::string *)(a5 + 40));
          std::string::operator=((std::string *)(v26 + 14), (const std::string *)(a5 + 64));
          v27 = *(_OWORD *)(a5 + 88);
          *((_BYTE *)v26 + 152) = *(_BYTE *)(a5 + 104);
          *(_OWORD *)(v26 + 17) = v27;
          LODWORD(v26) = *(_DWORD *)(a5 + 116);
          *(_QWORD *)buf = a5 + 16;
          *((_DWORD *)sub_100C137D8((uint64_t **)a3, (const void **)(a5 + 16), (uint64_t)&unk_101B9EB60, (__int128 **)buf)
          + 37) = (_DWORD)v26;
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          v28 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(a5 + 63) >= 0)
              v29 = a5 + 40;
            else
              v29 = *(_QWORD *)(a5 + 40);
            if (*(char *)(a5 + 87) >= 0)
              v30 = a5 + 64;
            else
              v30 = *(_QWORD *)(a5 + 64);
            if (*(char *)(a5 + 39) >= 0)
              v31 = a5 + 16;
            else
              v31 = *(_QWORD *)(a5 + 16);
            v32 = *(_DWORD *)(a5 + 92);
            v33 = *(_QWORD *)(a3 + 16);
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v29;
            v39 = 2080;
            v40 = v30;
            v41 = 2080;
            v42 = v31;
            v43 = 1024;
            v44 = v32;
            v45 = 2048;
            v46 = v33;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "connected to %s/%s @ %s of type %d - currently %lu connected device(s)", buf, 0x30u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102179F08);
            if (*(char *)(a5 + 63) >= 0)
              v34 = a5 + 40;
            else
              v34 = *(_QWORD *)(a5 + 40);
            if (*(char *)(a5 + 87) >= 0)
              v35 = a5 + 64;
            else
              v35 = *(_QWORD *)(a5 + 64);
            *(_DWORD *)v37 = 136316162;
            *(_QWORD *)&v37[4] = v34;
            *(_WORD *)&v37[12] = 2080;
            *(_QWORD *)&v37[14] = v35;
            *(_WORD *)&v37[22] = 2080;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "connected to %s/%s @ %s of type %d - currently %lu connected device(s)", v37, 48, *(_OWORD *)v37, *(_QWORD *)&v37[16]);
LABEL_56:
            v36 = (char *)v20;
            sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::updateStatusOfConnectedDevices(std::map<std::string, CLBluetoothService_Type::Device> &, std::map<std::string, CLBluetoothService_Type::Device> &, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)", "%s\n", v20);
            if (v36 != buf)
              free(v36);
          }
        }
        else
        {
          v24 = *(_DWORD *)(a5 + 116);
          *(_QWORD *)buf = v23;
          v25 = sub_100C137D8((uint64_t **)a3, v23, (uint64_t)&unk_101B9EB60, (__int128 **)buf);
          *((_DWORD *)v25 + 37) |= v24;
        }
        break;
      default:
        return;
    }
  }
}

void sub_100C0B7C8(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_100C12B64(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100C125E4();
    os_activity_scope_leave(&state);
  }
}

void sub_100C0BDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100C0BE30(const void ***a1, void *a2, int a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  __int128 v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  _DWORD v33[2];
  void *v34[2];
  __int128 v35;
  void *v36[2];
  void *__p[2];
  __int128 v38;
  __int128 v39;
  char v40;
  __int16 v41;
  int v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  void *v49;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102179F08);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240704;
    v45 = a3;
    v46 = 1026;
    v47 = a4;
    v48 = 2048;
    v49 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "bluetooth session event %{public}d result %{public}d session %p", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v33[0] = 67240704;
    v33[1] = a3;
    LOWORD(v34[0]) = 1026;
    *(_DWORD *)((char *)v34 + 2) = a4;
    HIWORD(v34[0]) = 2048;
    v34[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "bluetooth session event %{public}d result %{public}d session %p", v33, 24);
    v21 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v20);
    if (v21 != buf)
      free(v21);
  }
  v28 = *(_OWORD *)&off_102179E38;
  LOBYTE(v33[0]) = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)__p = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0;
  if ((a3 - 1) < 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v45 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning bluetooth session disconnected - event %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_12;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v29 = 67109120;
    v30 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning bluetooth session disconnected - event %d", &v29);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v22);
    if (v23 == buf)
      goto LABEL_12;
    goto LABEL_73;
  }
  if (a3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v45 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "bluetooth session event %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v29 = 67109120;
      v30 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "bluetooth session event %d", &v29);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v12);
      goto LABEL_49;
    }
  }
  else
  {
    if (a4)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v10 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v45 = a4;
        v46 = 1024;
        v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning bluetooth session attached with error %d - event %d", buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_12;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v29 = 67109376;
      v30 = a4;
      v31 = 1024;
      v32 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning bluetooth session attached with error %d - event %d", &v29, 14);
      v23 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v24);
      if (v23 == buf)
        goto LABEL_12;
LABEL_73:
      free(v23);
LABEL_12:
      a1[14] = 0;
      a1[15] = 0;
      LOBYTE(v33[0]) = 0;
      *(_DWORD *)buf = 0;
      ((void (*)(const void ***, uint8_t *, _DWORD *, uint64_t, uint64_t, _QWORD))(*a1)[19])(a1, buf, v33, 1, 0xFFFFFFFFLL, 0);
      sub_100C0AAA8(a1);
      goto LABEL_59;
    }
    a1[14] = (const void **)a2;
    if (BTDiscoveryAgentCreate(a2, &v28, a1, a1 + 15) || !a1[15])
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v14 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "could not create discovery agent", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v29) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not create discovery agent", &v29, v27, v28);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
    }
    if (!BTLocalDeviceGetDefault(a1[14], a1 + 16) && a1[16])
    {
      if (BTServiceAddCallbacks(a1[14], sub_100C0CCE8, a1))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v19 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "could not register for service event callbacks", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          LOWORD(v29) = 0;
          LODWORD(v27) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not register for service event callbacks", &v29, v27);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
      }
      sub_100C0CEE8(a1);
      LOBYTE(v33[0]) = 1;
      *(_DWORD *)buf = 0;
      ((void (*)(const void ***, uint8_t *, _DWORD *, uint64_t, uint64_t, _QWORD))(*a1)[19])(a1, buf, v33, 1, 0xFFFFFFFFLL, 0);
      goto LABEL_59;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      LOWORD(v29) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get local device", &v29, v27);
      v13 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::onBluetoothSession(BTSession, BTSessionEvent, BTResult)", "%s\n", v18);
LABEL_49:
      if (v13 != buf)
        free(v13);
    }
  }
LABEL_59:
  if (SHIBYTE(v38) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v36[0]);
  if (SHIBYTE(v35) < 0)
    operator delete(v34[1]);
}

void sub_100C0C8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100985540((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C0C92C(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  os_activity_scope_state_s state;
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;

  CLProfilingIdentify("CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  v8 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    v14 = 1;
    v11 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v11, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v12 = qword_1022A0228;
    v8 = os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG);
    if (v8)
    {
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "activity";
      v21 = 2050;
      v22 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v14 = 0;
  }
  sub_100C0E95C(v8, v9, a2, v10, a4);
  if (v14)
    os_activity_scope_leave(&state);
}

void sub_100C0CAE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C0CB00(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLBluetoothService::onBluetoothDiscoveryAgentDiscoveryEventCallback");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothDiscoveryAgentDiscoveryEventCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothDiscoveryAgentDiscoveryEventCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_100C0EB20(a5, v9, a2, a3, a4);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_100C0CCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C0CCE8(uint64_t a1, int a2, int a3, int a4, int a5, uint64_t a6)
{
  NSObject *v12;
  NSObject *v13;
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLBluetoothService::onBluetoothService");
  objc_msgSend(objc_msgSend(*(id *)(a6 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v12 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothService", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v12, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v13 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothService\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  sub_100C0D4E4(a6, a1, a2, a3, a4, a5);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100C0CEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C0CEE8(const void ***a1)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  void **v6;
  uint64_t v7;
  int v8;
  size_t v9;
  const void *v10;
  size_t v11;
  _BOOL4 v12;
  int v13;
  BOOL v14;
  __int128 *v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t i;
  int v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];
  char v25;
  __int16 v26;
  int v27;
  int v28;
  void *v29;
  char v30;
  void *v31[2];
  unsigned __int8 v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  __int128 v42;
  int v43;
  __int128 *v44;
  _QWORD *v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = 0;
  v47 = 0;
  v48 = 0;
  sub_100C0F2C4((uint64_t)a1, &v46);
  sub_100C13258((uint64_t *)&v44, a1 + 20);
  v2 = v44;
  if (v44 != (__int128 *)v45)
  {
    do
    {
      sub_100C124C4(&v37, v2 + 2);
      v4 = v46;
      v3 = v47;
      sub_100C124C4(&v29, &v37);
      if (v4 == v3)
      {
        v13 = 1;
      }
      else
      {
        if ((v32 & 0x80u) == 0)
          v5 = v32;
        else
          v5 = (size_t)v31[1];
        if ((v32 & 0x80u) == 0)
          v6 = v31;
        else
          v6 = (void **)v31[0];
        v7 = v4 + 104;
        do
        {
          v8 = *(char *)(v7 - 73);
          if (v8 >= 0)
            v9 = *(unsigned __int8 *)(v7 - 73);
          else
            v9 = *(_QWORD *)(v7 - 88);
          if (v8 >= 0)
            v10 = (const void *)(v7 - 96);
          else
            v10 = *(const void **)(v7 - 96);
          if (v9 >= v5)
            v11 = v5;
          else
            v11 = v9;
          v12 = memcmp(v6, v10, v11) != 0;
          v13 = v9 != v5 || v12;
          v14 = v13 != 1 || v7 == v3;
          v7 += 104;
        }
        while (!v14);
      }
      if (v36 < 0)
        operator delete(v35);
      if (v34 < 0)
        operator delete(v33);
      if ((char)v32 < 0)
        operator delete(v31[0]);
      if (v30 < 0)
      {
        operator delete(v29);
        if (v13)
        {
LABEL_39:
          LOBYTE(v20) = 0;
          *(_QWORD *)v21 = *((_QWORD *)&v38 + 1);
          if ((v39[23] & 0x80000000) != 0)
          {
            sub_100115CE4(&v21[8], *(void **)v39, *(unint64_t *)&v39[8]);
          }
          else
          {
            *(_OWORD *)&v21[8] = *(_OWORD *)v39;
            *(_QWORD *)v22 = *(_QWORD *)&v39[16];
          }
          if ((v40[23] & 0x80000000) != 0)
          {
            sub_100115CE4(&v22[8], *(void **)v40, *(unint64_t *)&v40[8]);
          }
          else
          {
            *(_OWORD *)&v22[8] = *(_OWORD *)v40;
            *(_QWORD *)v23 = *(_QWORD *)&v40[16];
          }
          if ((v41[23] & 0x80000000) != 0)
          {
            sub_100115CE4(&v23[8], *(void **)v41, *(unint64_t *)&v41[8]);
          }
          else
          {
            *(_OWORD *)&v23[8] = *(_OWORD *)v41;
            *(_QWORD *)v24 = *(_QWORD *)&v41[16];
          }
          *(_OWORD *)&v24[8] = v42;
          v25 = v43;
          v26 = 0;
          v27 = HIDWORD(v42);
          v28 = 0;
          v19 = 11;
          ((void (*)(const void ***, int *, uint64_t *, uint64_t, uint64_t, _QWORD))(*a1)[19])(a1, &v19, &v20, 1, 0xFFFFFFFFLL, 0);
          if ((v24[7] & 0x80000000) != 0)
            operator delete(*(void **)&v23[8]);
          if ((v23[7] & 0x80000000) != 0)
            operator delete(*(void **)&v22[8]);
          if ((v22[7] & 0x80000000) != 0)
            operator delete(*(void **)&v21[8]);
        }
      }
      else if (v13)
      {
        goto LABEL_39;
      }
      if ((v41[23] & 0x80000000) != 0)
        operator delete(*(void **)v41);
      if ((v40[23] & 0x80000000) != 0)
        operator delete(*(void **)v40);
      if ((v39[23] & 0x80000000) != 0)
        operator delete(*(void **)v39);
      if (SBYTE7(v38) < 0)
        operator delete((void *)v37);
      v15 = (__int128 *)*((_QWORD *)v2 + 1);
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = *(__int128 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (__int128 *)*((_QWORD *)v2 + 2);
          v14 = *(_QWORD *)v16 == (_QWORD)v2;
          v2 = v16;
        }
        while (!v14);
      }
      v2 = v16;
    }
    while (v16 != (__int128 *)v45);
  }
  v17 = v46;
  for (i = v47; v17 != i; v17 += 104)
  {
    sub_100985590((uint64_t)&v20, v17);
    LOBYTE(v37) = 0;
    *((_QWORD *)&v37 + 1) = v20;
    if ((v21[23] & 0x80000000) != 0)
    {
      sub_100115CE4(&v38, *(void **)v21, *(unint64_t *)&v21[8]);
    }
    else
    {
      v38 = *(_OWORD *)v21;
      *(_QWORD *)v39 = *(_QWORD *)&v21[16];
    }
    if ((v22[23] & 0x80000000) != 0)
    {
      sub_100115CE4(&v39[8], *(void **)v22, *(unint64_t *)&v22[8]);
    }
    else
    {
      *(_OWORD *)&v39[8] = *(_OWORD *)v22;
      *(_QWORD *)v40 = *(_QWORD *)&v22[16];
    }
    if ((v23[23] & 0x80000000) != 0)
    {
      sub_100115CE4(&v40[8], *(void **)v23, *(unint64_t *)&v23[8]);
    }
    else
    {
      *(_OWORD *)&v40[8] = *(_OWORD *)v23;
      *(_QWORD *)v41 = *(_QWORD *)&v23[16];
    }
    *(_OWORD *)&v41[8] = *(_OWORD *)v24;
    LOBYTE(v42) = v24[16];
    WORD4(v42) = 0;
    HIDWORD(v42) = *(_DWORD *)&v24[12];
    v43 = 0;
    v19 = 4;
    ((void (*)(const void ***, int *, __int128 *, uint64_t, uint64_t, _QWORD))(*a1)[19])(a1, &v19, &v37, 1, 0xFFFFFFFFLL, 0);
    v19 = 10;
    ((void (*)(const void ***, int *, __int128 *, uint64_t, uint64_t, _QWORD))(*a1)[19])(a1, &v19, &v37, 1, 0xFFFFFFFFLL, 0);
    if ((v41[7] & 0x80000000) != 0)
      operator delete(*(void **)&v40[8]);
    if ((v40[7] & 0x80000000) != 0)
      operator delete(*(void **)&v39[8]);
    if ((v39[7] & 0x80000000) != 0)
      operator delete((void *)v38);
    if ((v23[23] & 0x80000000) != 0)
      operator delete(*(void **)v23);
    if ((v22[23] & 0x80000000) != 0)
      operator delete(*(void **)v22);
    if ((v21[23] & 0x80000000) != 0)
      operator delete(*(void **)v21);
  }
  sub_100C0FC80((uint64_t)a1);
  sub_100C12538((uint64_t)&v44, v45[0]);
  *(_QWORD *)&v37 = &v46;
  sub_100C13180((void ***)&v37);
}

void sub_100C0D400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void **a52)
{
  uint64_t v52;
  uint64_t v53;

  sub_100C12538(v53 - 136, *(_QWORD **)(v52 + 264));
  *(_QWORD *)(v52 + 128) = v53 - 112;
  sub_100C13180(&a52);
  _Unwind_Resume(a1);
}

void sub_100C0D4E4(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  const char *v28;
  uint8_t *v29;
  int v30;
  int v31;
  _DWORD v32[2];
  void *v33[4];
  void *v34[2];
  void *__p[2];
  __int128 v36;
  __int128 v37;
  char v38;
  __int16 v39;
  int v40;
  int v41;
  uint8_t buf[4];
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102179F08);
  v12 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240960;
    v43 = a3;
    v44 = 1026;
    v45 = a4;
    v46 = 1026;
    v47 = a5;
    v48 = 1026;
    v49 = a6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "service mask 0x%{public}x event type %{public}d event %{public}d result %{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v32[0] = 67240960;
    v32[1] = a3;
    LOWORD(v33[0]) = 1026;
    *(_DWORD *)((char *)v33 + 2) = a4;
    HIWORD(v33[0]) = 1026;
    LODWORD(v33[1]) = a5;
    WORD2(v33[1]) = 1026;
    *(_DWORD *)((char *)&v33[1] + 6) = a6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "service mask 0x%{public}x event type %{public}d event %{public}d result %{public}d", v32, 26);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  LOBYTE(v32[0]) = 0;
  v39 = 0;
  memset(v33, 0, sizeof(v33));
  *(_OWORD *)v34 = 0u;
  *(_OWORD *)__p = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v40 = a3;
  v41 = a6;
  switch(a4)
  {
    case 2:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v15 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        v43 = a5;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v30 = 67109120;
        v31 = a5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d", &v30);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      switch(a5)
      {
        case 'e':
        case 'g':
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          v16 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v43 = a5;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_CONNECTED|START_VOICE_COMMAND", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102179F08);
            v30 = 67109120;
            v31 = a5;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_CONNECTED|START_VOICE_COMMAND", &v30);
            v27 = (uint8_t *)v26;
            sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v26);
            if (v27 != buf)
              free(v27);
          }
          if (sub_100C0DF70(a2, (uint64_t)v33))
          {
            *(_DWORD *)buf = 6;
            (*(void (**)(uint64_t, uint8_t *, _DWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v32, 0, 0xFFFFFFFFLL, 0);
          }
          break;
        case 'f':
        case 'h':
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          v17 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            v43 = a5;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_DISCONNECTED|END_VOICE_COMMAND", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102179F08);
            v30 = 67109120;
            v31 = a5;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "BT: BT_SERVICE_DEPENDENT_EVENT, event, %d, AUDIO_DISCONNECTED|END_VOICE_COMMAND", &v30);
            v29 = (uint8_t *)v28;
            sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          if (sub_100C0DF70(a2, (uint64_t)v33))
          {
            *(_DWORD *)buf = 7;
            (*(void (**)(uint64_t, uint8_t *, _DWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v32, 0, 0xFFFFFFFFLL, 0);
          }
          break;
        default:
          goto LABEL_48;
      }
      break;
    case 1:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v14 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        v43 = a5;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_DISCONNECT, event, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v30 = 67109120;
        v31 = a5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "BT: BT_SERVICE_DISCONNECT, event, %d", &v30);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      if (a5 == 12 && sub_100C0DF70(a2, (uint64_t)v33))
      {
        *(_DWORD *)buf = 5;
        (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, buf, v32, 1, 0xFFFFFFFFLL, 1);
      }
      break;
    case 0:
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v13 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        v43 = a5;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BT: BT_SERVICE_CONNECT, event, %d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v30 = 67109120;
        v31 = a5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "BT: BT_SERVICE_CONNECT, event, %d", &v30);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothService(BTDevice, BTServiceMask, BTServiceEventType, BTServiceSpecificEvent, BTResult)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      if (a5 == 11)
      {
        if (sub_100C0DF70(a2, (uint64_t)v33))
        {
          *(_DWORD *)buf = 10;
          (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v32, 1, 0xFFFFFFFFLL, 0);
        }
      }
      else if (a5 == 1 && sub_100C0DF70(a2, (uint64_t)v33))
      {
        *(_DWORD *)buf = 4;
        (*(void (**)(uint64_t, uint8_t *, _DWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, buf, v32, 1, 0xFFFFFFFFLL, 1);
      }
      break;
  }
LABEL_48:
  if (SHIBYTE(v36) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v33[3]) < 0)
    operator delete(v33[1]);
}

void sub_100C0DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100985540((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100C0DF70(uint64_t a1, uint64_t a2)
{
  int AddressString;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _WORD v28[8];
  _DWORD v29[4];
  _DWORD v30[4];
  uint8_t buf[1632];
  std::string::value_type __s[248];

  *(CFAbsoluteTime *)a2 = CFAbsoluteTimeGetCurrent();
  AddressString = BTDeviceGetAddressString(a1, __s, 248);
  if (AddressString)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "BTDeviceGetAddressString failed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      LOWORD(v30[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BTDeviceGetAddressString failed", v30, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    std::string::assign((std::string *)(a2 + 8), __s);
    if (BTDeviceGetDefaultName(a1, __s, 248))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v8 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetDefaultName failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v30[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning BTDeviceGetDefaultName failed", v30, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      if (*(char *)(a2 + 79) < 0)
      {
        **(_BYTE **)(a2 + 56) = 0;
        *(_QWORD *)(a2 + 64) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 79) = 0;
      }
    }
    else
    {
      std::string::assign((std::string *)(a2 + 56), __s);
    }
    if (BTDeviceGetName(a1, __s, 248))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetName failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v30[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning BTDeviceGetName failed", v30, v27);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      if (*(char *)(a2 + 55) < 0)
      {
        **(_BYTE **)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 40) = 0;
      }
      else
      {
        *(_BYTE *)(a2 + 32) = 0;
        *(_BYTE *)(a2 + 55) = 0;
      }
    }
    else
    {
      std::string::assign((std::string *)(a2 + 32), __s);
    }
    if (BTDeviceGetDeviceType(a1, a2 + 84))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v10 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetDeviceType failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v30[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning BTDeviceGetDeviceType failed", v30, v27);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      *(_DWORD *)(a2 + 84) = 0;
    }
    if (BTDeviceGetDeviceClass(a1, a2 + 80))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v11 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetDeviceClass failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v30[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning BTDeviceGetDeviceClass failed", v30, v27);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      *(_DWORD *)(a2 + 80) = 0;
    }
    v30[0] = 0;
    if (BTDeviceGetConnectedServices(a1, v30))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceGetConnectedServices failed.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v29[0]) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning BTDeviceGetConnectedServices failed.", v29, v27);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    *(_DWORD *)(a2 + 92) = v30[0];
    v29[0] = 0;
    if (BTDeviceIsAppleAudioDevice(a1, v29))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v13 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning BTDeviceIsAppleAudioDevice failed.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v28[0] = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning BTDeviceIsAppleAudioDevice failed.", v28, v27);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLBluetoothService::getBluetoothDevice(BTDevice, CLBluetoothService_Type::Device &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
    }
    *(_BYTE *)(a2 + 96) = v29[0] != 0;
    *(_DWORD *)(a2 + 88) = 0;
  }
  return AddressString == 0;
}

void sub_100C0E95C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102179F08);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v14 = a3;
    v15 = 1024;
    v16 = a5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "discovery status %d result %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v10[0] = 67109376;
    v10[1] = a3;
    v11 = 1024;
    v12 = a5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "discovery status %d result %d", v10, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::onBluetoothDiscoveryAgentStatusEventCallback(BTDiscoveryAgent, BTDiscoveryStatus, BTDevice, BTResult)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100C0EB20(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  int v7;
  _BYTE v8[8];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  char v15;
  __int16 v16;
  int v17;
  int v18;

  v8[0] = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0;
  if (a3 == 2)
  {
    if (sub_100C0DF70(a4, (uint64_t)v9))
    {
      DWORD2(v14) = a5;
      v7 = 2;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v7, v8, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else if (a3 == 1)
  {
    if (sub_100C0DF70(a4, (uint64_t)v9))
    {
      DWORD2(v14) = a5;
      v7 = 3;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v7, v8, 1, 0xFFFFFFFFLL, 0);
    }
  }
  else if (!a3 && sub_100C0DF70(a4, (uint64_t)v9))
  {
    DWORD2(v14) = a5;
    v7 = 1;
    (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v7, v8, 1, 0xFFFFFFFFLL, 0);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
}

void sub_100C0EC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100985540((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C0EC9C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  __int16 v18;
  void *v19[2];
  __int128 v20;
  void *v21[2];
  void *__p[2];
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  int v38;

  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_QWORD *)(a1 + 128);
    if (v2)
    {
      v30 = 0;
      if (BTLocalDeviceGetModulePower(v2, 1, &v30))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v3 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "could not get module power", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          v18 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get module power", &v18, 2);
          v5 = (uint8_t *)v4;
          sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::updatePowerState()", "%s\n", v4);
LABEL_28:
          if (v5 != buf)
            free(v5);
        }
      }
      else
      {
        v10 = v30 == -1;
        *(_BYTE *)(a1 + 109) = v30 == -1;
        LOBYTE(v18) = 0;
        v26 = 0;
        *(_OWORD *)v19 = 0u;
        v20 = 0u;
        *(_OWORD *)v21 = 0u;
        *(_OWORD *)__p = 0u;
        v23 = 0u;
        v24 = 0u;
        v25 = 0;
        v27 = v10;
        v28 = 0;
        v29 = 0;
        *(_DWORD *)buf = 9;
        (*(void (**)(uint64_t, uint8_t *, __int16 *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, buf, &v18, 1, 0xFFFFFFFFLL, 1);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v11 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
        {
          v12 = *(_QWORD *)(a1 + 112);
          v13 = *(unsigned __int8 *)(a1 + 109);
          *(_DWORD *)buf = 134218240;
          v36 = v12;
          v37 = 1024;
          v38 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BluetoothSession, %p, power, %d", buf, 0x12u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          v14 = *(_QWORD *)(a1 + 112);
          v15 = *(unsigned __int8 *)(a1 + 109);
          v31 = 134218240;
          v32 = v14;
          v33 = 1024;
          v34 = v15;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "BluetoothSession, %p, power, %d", &v31, 18);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::updatePowerState()", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
        if (SHIBYTE(v23) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(v21[0]);
        if (SHIBYTE(v20) < 0)
          operator delete(v19[1]);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v8 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v18 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get local device", &v18, 2);
        v5 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::updatePowerState()", "%s\n", v9);
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "no bluetooth session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v18 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "no bluetooth session", &v18, 2);
      v5 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::updatePowerState()", "%s\n", v7);
      goto LABEL_28;
    }
  }
}

void sub_100C0F2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100985540((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C0F2C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;
  NSObject *v22;
  int v23;
  _BYTE *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  int v28;
  _BYTE *v29;
  int v30;
  _BYTE *v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  _BYTE *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  _BYTE v45[56];
  __int128 __p;
  uint64_t v47;
  __int128 v48;
  char v49;
  _QWORD v50[10];
  uint8_t buf[4];
  _BYTE *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    do
    {
      v4 -= 104;
      sub_100C13204((uint64_t)(a2 + 2), v4);
    }
    while (v4 != v5);
  }
  a2[1] = v5;
  if (*(_QWORD *)(a1 + 112))
  {
    v6 = *(_QWORD *)(a1 + 128);
    if (v6)
    {
      memset(v50, 0, sizeof(v50));
      v38 = 0;
      if (BTLocalDeviceGetConnectedDevices(v6, v50, &v38, 10))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v7 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "BTLocalDeviceGetConnectedDevices failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          *(_WORD *)v45 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BTLocalDeviceGetConnectedDevices failed", v45, 2);
          v9 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)", "%s\n", v8);
LABEL_74:
          if (v9 != buf)
            free(v9);
        }
      }
      else
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v13 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          v52 = v38;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "received %{public}zu connected devices", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          *(_DWORD *)v45 = 134349056;
          *(_QWORD *)&v45[4] = v38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "received %{public}zu connected devices", v45, 12);
          v36 = (uint8_t *)v35;
          sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)", "%s\n", v35);
          if (v36 != buf)
            free(v36);
        }
        if ((int)v38 >= 1)
        {
          v14 = 0;
          do
          {
            v47 = 0;
            __p = 0u;
            memset(&v45[8], 0, 48);
            if (sub_100C0DF70(v50[v14], (uint64_t)v45))
            {
              v15 = a2[1];
              if (v15 >= a2[2])
              {
                v17 = sub_100C13470(a2, (uint64_t)v45);
              }
              else
              {
                *(_QWORD *)v15 = *(_QWORD *)v45;
                if ((v45[31] & 0x80000000) != 0)
                {
                  sub_100115CE4((_BYTE *)(v15 + 8), *(void **)&v45[8], *(unint64_t *)&v45[16]);
                }
                else
                {
                  v16 = *(_OWORD *)&v45[8];
                  *(_QWORD *)(v15 + 24) = *(_QWORD *)&v45[24];
                  *(_OWORD *)(v15 + 8) = v16;
                }
                if ((v45[55] & 0x80000000) != 0)
                {
                  sub_100115CE4((_BYTE *)(v15 + 32), *(void **)&v45[32], *(unint64_t *)&v45[40]);
                }
                else
                {
                  v18 = *(_OWORD *)&v45[32];
                  *(_QWORD *)(v15 + 48) = *(_QWORD *)&v45[48];
                  *(_OWORD *)(v15 + 32) = v18;
                }
                v19 = (_BYTE *)(v15 + 56);
                if (SHIBYTE(v47) < 0)
                {
                  sub_100115CE4(v19, (void *)__p, *((unint64_t *)&__p + 1));
                }
                else
                {
                  v20 = __p;
                  *(_QWORD *)(v15 + 72) = v47;
                  *(_OWORD *)v19 = v20;
                }
                v21 = v48;
                *(_BYTE *)(v15 + 96) = v49;
                *(_OWORD *)(v15 + 80) = v21;
                v17 = v15 + 104;
                a2[1] = v15 + 104;
              }
              a2[1] = v17;
              if (qword_1022A02D0 != -1)
                dispatch_once(&qword_1022A02D0, &stru_102179F08);
              v22 = qword_1022A02D8;
              if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
              {
                v23 = v45[31];
                v24 = *(_BYTE **)&v45[8];
                v25 = sub_100C0FFF0(&v45[8]);
                if (v23 >= 0)
                  v26 = &v45[8];
                else
                  v26 = v24;
                *(_DWORD *)buf = 136315650;
                v52 = v26;
                v53 = 1026;
                v54 = v25;
                v55 = 1026;
                v56 = HIDWORD(v48);
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "connected device,address,%s,oui,%{public}d,services,0x%{public}x", buf, 0x18u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A02D0 != -1)
                  dispatch_once(&qword_1022A02D0, &stru_102179F08);
                v27 = qword_1022A02D8;
                v28 = v45[31];
                v29 = *(_BYTE **)&v45[8];
                v30 = sub_100C0FFF0(&v45[8]);
                if (v28 >= 0)
                  v31 = &v45[8];
                else
                  v31 = v29;
                v39 = 136315650;
                v40 = v31;
                v41 = 1026;
                v42 = v30;
                v43 = 1026;
                v44 = HIDWORD(v48);
                LODWORD(v37) = 24;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 0, "connected device,address,%s,oui,%{public}d,services,0x%{public}x", &v39, v37);
                v33 = (uint8_t *)v32;
                sub_100512490("Generic", 1, 0, 2, "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)", "%s\n", v32);
                if (v33 != buf)
                  free(v33);
              }
            }
            if (SHIBYTE(v47) < 0)
              operator delete((void *)__p);
            if ((v45[55] & 0x80000000) != 0)
              operator delete(*(void **)&v45[32]);
            if ((v45[31] & 0x80000000) != 0)
              operator delete(*(void **)&v45[8]);
            ++v14;
          }
          while (v14 < (int)v38);
        }
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        *(_WORD *)v45 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get local device", v45, 2);
        v9 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)", "%s\n", v34);
        goto LABEL_74;
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "no session available - cannot get connected devices", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      *(_WORD *)v45 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "no session available - cannot get connected devices", v45, 2);
      v9 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::refreshConnectedDevices(std::vector<CLBluetoothService_Type::Device> &)", "%s\n", v11);
      goto LABEL_74;
    }
  }
}

void sub_100C0FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100C0FC30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C0FBD0(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100C0FC30(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_100C0FC80(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 112))
  {
    v2 = *(_QWORD *)(a1 + 128);
    if (v2)
    {
      v9 = off_102179E48;
      v10 = 0;
      if (!BTLocalDeviceAddCallbacks(v2, &v9, a1))
      {
        sub_100C0EC9C(a1);
        return;
      }
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v3 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "BTLocalDeviceAddCallbacks failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v8) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "BTLocalDeviceAddCallbacks failed", &v8, 2, v8);
LABEL_28:
        v7 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 0, "void CLBluetoothService::initializePowerState()", "%s\n", v4);
        if (v7 != buf)
          free(v7);
      }
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not get local device", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        LOWORD(v9) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get local device", &v9, 2, v8);
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "no session available - cannot get connected devices", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      LOWORD(v9) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "no session available - cannot get connected devices", &v9, 2, v8);
      goto LABEL_28;
    }
  }
}

uint64_t sub_100C0FFF0(const char *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t *v10;
  uint8_t buf[4];
  uint64_t *v12;
  _BYTE v13[24];

  v1 = (uint64_t *)a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (sscanf(a1, "%x:%x:%x:%x:%x:%x", v13, &v13[4], &v13[8], &v13[12], &v13[16], &v13[20]) == 6)
  {
    v2 = 0;
    LODWORD(result) = 0;
    do
    {
      result = v13[v2] | ((_DWORD)result << 8);
      v2 += 4;
    }
    while (v2 != 12);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v1 + 23) >= 0)
        v5 = v1;
      else
        v5 = (uint64_t *)*v1;
      *(_DWORD *)buf = 136315138;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Input BT MAC address %s is malformed.", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      if (*((char *)v1 + 23) >= 0)
        v6 = v1;
      else
        v6 = (uint64_t *)*v1;
      v9 = 136315138;
      v10 = v6;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Input BT MAC address %s is malformed.", (const char *)&v9);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "static uint32_t CLBluetoothService::getOuiFromBtMacAddress(const std::string &)", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  return result;
}

void sub_100C10224(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLBluetoothService::onBluetoothLocalDeviceStatusEvent");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  if (!os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 0;
    if (a2)
      goto LABEL_12;
    goto LABEL_11;
  }
  v9 = 1;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBluetoothService::onBluetoothLocalDeviceStatusEvent", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  v7 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2082;
    v15 = "activity";
    v16 = 2050;
    v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBluetoothService::onBluetoothLocalDeviceStatusEvent\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  if (!a2)
LABEL_11:
    sub_100C0EC9C(a4);
LABEL_12:
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_100C103D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_100C103F8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  NSObject *v5;
  std::string *v6;
  _BOOL8 v7;
  NSObject *v8;
  std::string *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  std::string v15;
  int v16;
  std::string *v17;
  __int16 v18;
  int v19;
  char __str[10];
  uint8_t buf[4];
  std::string *v22;
  __int16 v23;
  int v24;

  if (!*(_QWORD *)(a1 + 112))
    return 0;
  if (!*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning could not get local device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      LOWORD(v15.__r_.__value_.__l.__data_) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning could not get local device", &v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLBluetoothService::setAFHChannelAvoidance(uint8_t *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 0;
  }
  v3 = BTLocalDeviceSetAFHMap();
  v4 = 0;
  memset(&v15, 0, sizeof(v15));
  do
  {
    snprintf(__str, 0xAuLL, "%02x ", *(unsigned __int8 *)(a2 + v4));
    std::string::append(&v15, __str);
    ++v4;
  }
  while (v4 != 10);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102179F08);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    v22 = v6;
    v23 = 1024;
    v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Setting AFH map: %s - result: %d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v10 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    v16 = 136315394;
    v17 = v10;
    v18 = 1024;
    v19 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Setting AFH map: %s - result: %d", (const char *)&v16, 18);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBluetoothService::setAFHChannelAvoidance(uint8_t *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v7 = v3 != 202;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v7;
}

void sub_100C10790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100C107BC(uint64_t a1, int *a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  *(_QWORD *)a1 = -1;
  *(_WORD *)(a1 + 8) = 0x7FFF;
  if (a3 > 0xA)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102179F08);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240448;
      v23 = 10;
      v24 = 1026;
      v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Max AFH channels cannot exceed %{public}d - input %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102179F08);
      v18 = 67240448;
      v19 = 10;
      v20 = 1026;
      v21 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Max AFH channels cannot exceed %{public}d - input %{public}d", &v18, 14);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLBluetoothService::getAFHBitmapFromIntArray(uint8_t *, const unsigned int *, const unsigned int)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  else if (a3)
  {
    v6 = a3;
    do
    {
      v7 = *a2;
      if (v7 > 0x4E)
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102179F08);
        v8 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          v9 = *a2;
          *(_DWORD *)buf = 67240448;
          v23 = v9;
          v24 = 1026;
          v25 = 78;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "AFH channel %{public}d cannot exceed %{public}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102179F08);
          v10 = *a2;
          v18 = 67240448;
          v19 = v10;
          v20 = 1026;
          v21 = 78;
          LODWORD(v17) = 14;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "AFH channel %{public}d cannot exceed %{public}d", &v18, v17);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "static BOOL CLBluetoothService::getAFHBitmapFromIntArray(uint8_t *, const unsigned int *, const unsigned int)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
      else
      {
        *(_BYTE *)(a1 + (v7 >> 3)) &= ~(1 << (v7 & 7));
      }
      ++a2;
      --v6;
    }
    while (v6);
  }
  return a3 < 0xB;
}

_QWORD *sub_100C10B80@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100C10BF8()
{
  return 1;
}

uint64_t sub_100C10C00()
{
  return 1;
}

void sub_100C10C08()
{
  operator new();
}

void sub_100C10CB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_100C10CF0()
{
  operator new();
}

void sub_100C10DA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100C10DDC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_10217A088;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100C10EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102179EE8);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102179EE8);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::removeClient(int) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100C11124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022F9F40);
}

BOOL sub_100C11138(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[24];
  __int128 v45;
  void *v46[2];
  void *__p[2];
  __int128 v48;
  __int128 v49;
  char v50;
  __int16 v51;
  int v52;
  int v53;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        buf[0] = 0;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_OWORD *)&buf[8] = 0u;
        v45 = 0u;
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)__p = 0u;
        v48 = 0u;
        v49 = 0u;
        v50 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100C139E4();
        }
        if (SHIBYTE(v48) < 0)
          operator delete(__p[1]);
        if (SHIBYTE(__p[0]) < 0)
          operator delete(v46[0]);
        if (SHIBYTE(v45) < 0)
          operator delete(*(void **)&buf[16]);
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022F9F41;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100C115F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100985540((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100C11618(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102179EE8);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100C11898(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102179EE8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102179EE8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100C11C20(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  int v14;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v7 = *a2;
  v8 = v3;
  do
  {
    v9 = *(_DWORD *)(v4 + 32);
    v10 = v9 < v7;
    if (v9 >= v7)
      v11 = (uint64_t *)v4;
    else
      v11 = (uint64_t *)(v4 + 8);
    if (!v10)
      v8 = v4;
    v4 = *v11;
  }
  while (*v11);
  if (v8 == v3)
    return 0;
  if (v7 < *(_DWORD *)(v8 + 32))
    return 0;
  v12 = *(_QWORD *)(v8 + 64);
  if (!v12)
    return 0;
  *(_BYTE *)a3 = *(_BYTE *)v12;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(v12 + 8);
  std::string::operator=((std::string *)(a3 + 16), (const std::string *)(v12 + 16));
  std::string::operator=((std::string *)(a3 + 40), (const std::string *)(v12 + 40));
  std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v12 + 64));
  v13 = *(_OWORD *)(v12 + 88);
  *(_BYTE *)(a3 + 104) = *(_BYTE *)(v12 + 104);
  *(_OWORD *)(a3 + 88) = v13;
  v14 = *(_DWORD *)(v12 + 120);
  *(_QWORD *)(a3 + 112) = *(_QWORD *)(v12 + 112);
  *(_DWORD *)(a3 + 120) = v14;
  return 1;
}

uint64_t sub_100C11CE4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_100C12B64(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_100C11D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C11DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE v4[8];
  void *v5[2];
  __int128 v6;
  void *v7[2];
  void *__p[2];
  __int128 v9;
  __int128 v10;
  char v11;
  __int16 v12;
  int v13;
  int v14;

  v4[0] = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  *(_OWORD *)v5 = 0u;
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)__p = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[1]);
}

void sub_100C11E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100985540((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100C11E50(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102179EE8);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102179EE8);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102179EE8);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102179EE8);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102179EE8);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100C123FC(uint64_t a1)
{
  sub_100C13984(a1);
  operator delete();
}

id sub_100C12420(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100C12D5C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100C1246C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C12498(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

_QWORD *sub_100C124C4(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100985590((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100C1251C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100C12538(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100C12538(a1, *a2);
    sub_100C12538(a1, a2[1]);
    sub_100C12580((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100C12580(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_100C125E4()
{
  operator new();
}

void sub_100C12690()
{
  operator delete();
}

void sub_100C126B4(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100C12D5C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100C12A88(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102179EE8);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102179EE8);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100C12A88(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100C12D5C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100C12B64@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x98uLL);
  result = sub_100C12BBC((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100C12BA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C12BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10217A018;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)a2;
  sub_100985590(a1 + 32, a2 + 8);
  v4 = *(_QWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = v4;
  return a1;
}

void sub_100C12C14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100C12C28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217A018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C12C3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217A018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100C12C70(uint64_t a1)
{
  char v1;

  sub_100C12C98((uint64_t)&v1, a1 + 24);
}

void sub_100C12C98(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

uint64_t sub_100C12CEC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 87) < 0)
      operator delete(*(void **)(v1 + 64));
    if (*(char *)(v1 + 63) < 0)
      operator delete(*(void **)(v1 + 40));
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

id sub_100C12D5C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100C12DA8(a1);
  else
    return 0;
}

id sub_100C12DA8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217A058);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1E6B3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217A058);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217A058);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1E6B3 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217A058);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLBluetoothService_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100C13154(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100C13180(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_100C13204((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100C13204(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

uint64_t *sub_100C13258(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100C132AC(a1, *a2, a2 + 1);
  return a1;
}

void sub_100C13294(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100C12538(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100C132AC(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_100C13330(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100C13330(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = sub_1006754A0(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    sub_100C133C4((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100C1342C((uint64_t)v10, 0);
  }
  return v7;
}

_QWORD *sub_100C133C4@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0xA0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_100C124C4(v6 + 4, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100C13414(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100C1342C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100C1342C(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100C12580((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t sub_100C13470(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x276276276276276)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x4EC4EC4EC4EC4EC5 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x13B13B13B13B13BLL)
    v9 = 0x276276276276276;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100673A14(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[104 * v4];
  v16 = &v10[104 * v9];
  sub_100985590((uint64_t)v14, a2);
  v15 = v14 + 104;
  sub_100C1358C(a1, &v13);
  v11 = a1[1];
  sub_100C13764(&v13);
  return v11;
}

void sub_100C13578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C13764((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1358C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100C13600((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C13600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 104);
      a3 -= 104;
      *(_QWORD *)(v8 - 104) = v9;
      v8 -= 104;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v11 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(v8 + 32) = v11;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v12 = *(_OWORD *)(a3 + 56);
      *(_QWORD *)(v8 + 72) = *(_QWORD *)(a3 + 72);
      *(_OWORD *)(v8 + 56) = v12;
      *(_QWORD *)(a3 + 64) = 0;
      *(_QWORD *)(a3 + 72) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      v13 = *(_OWORD *)(a3 + 80);
      *(_BYTE *)(v8 + 96) = *(_BYTE *)(a3 + 96);
      *(_OWORD *)(v8 + 80) = v13;
      v7 -= 104;
    }
    while (a3 != a5);
    *((_QWORD *)&v19 + 1) = v8;
    v14 = v19;
  }
  v17 = 1;
  sub_100C136E0((uint64_t)v16);
  return v14;
}

uint64_t sub_100C136E0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100C13714((uint64_t *)a1);
  return a1;
}

void sub_100C13714(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_100C13204(v3, v1);
      v1 += 104;
    }
    while (v1 != v2);
  }
}

void **sub_100C13764(void **a1)
{
  sub_100C13794(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_100C13794(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    sub_100C13204(v4, i - 104);
  }
}

uint64_t *sub_100C137D8(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_100C13880((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000145B0(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_100C1342C((uint64_t)v10, 0);
  }
  return v7;
}

double sub_100C13880@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0xA0uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_100115CE4(v7, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)v7 = v9;
  }
  *((_QWORD *)v6 + 19) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100C13914(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100C1342C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1392C(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_10019C4C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_10008A9F0(a1, v3);
  sub_100C12580((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_100C13984(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10217A088;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100C139E4()
{
  operator new();
}

void sub_100C13A90()
{
  operator delete();
}

uint64_t sub_100C13AB4(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 87) < 0)
      operator delete(*(void **)(v1 + 64));
    if (*(char *)(v1 + 63) < 0)
      operator delete(*(void **)(v1 + 40));
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_100C13B24(uint64_t a1, void *a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_10217A0B0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  objc_msgSend(*(id *)(a1 + 8), "silo");
  objc_msgSend(*(id *)(a1 + 32), "registerDelegate:inSilo:", a3, objc_msgSend(*(id *)(a1 + 8), "silo"));
  objc_msgSend(*(id *)(a1 + 32), "setDelegateEntityName:", "CLSubHarvesterAppExternal");
  return a1;
}

void sub_100C13BB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C13BD8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_100C13BF8(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  sub_1001E4804(&v8);
  v3 = sub_1001E4B84(v8, "MaxHarvestApps", a2);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_100C13C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100C13C90()
{
  sub_1011482D0();
}

void sub_100C13D0C(uint64_t a1, unsigned int *a2, int *a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSubHarvesterAppExternal::onAppNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217A180);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAppExternal::onAppNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217A180);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAppExternal::onAppNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1012DA408(*(_QWORD *)(a4 + 24), a1, *a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C13ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100C13EF4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2, 0);
}

id sub_100C13F08(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

id sub_100C13F18(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  if (*((char *)a2 + 23) >= 0)
    v2 = a2;
  else
    v2 = (uint64_t *)*a2;
  return _objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLAppMonitor")), "syncgetAppType:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2));
}

BOOL sub_100C13F6C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) != 0;
}

id sub_100C13F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _QWORD v8[5];

  v5 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(a2 + 4), *(double *)(a2 + 12));
  v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100C1400C;
  v8[3] = &unk_10217A110;
  v8[4] = a3;
  return objc_msgSend(v6, "fetchRoutineModeFromLocation:withReply:", v5, v8);
}

uint64_t sub_100C1400C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100C14018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _QWORD v8[5];

  v5 = objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(a2 + 4), *(double *)(a2 + 12));
  v6 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100C140B0;
  v8[3] = &unk_10217A138;
  v8[4] = a3;
  return objc_msgSend(v6, "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:", v5, v8, 200.0);
}

uint64_t sub_100C140B0(uint64_t a1, void *a2)
{
  if (objc_msgSend(a2, "count"))
    objc_msgSend(objc_msgSend(a2, "firstObject"), "type");
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

_QWORD *sub_100C140FC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10217A0B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_100C14140(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10217A0B0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete();
}

void sub_100C14194(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C141C0(uint64_t a1, _QWORD *a2, uint64_t a3, double *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = off_10217A1B0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 9) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_OWORD *)(a1 + 184) = _Q0;
  *(_QWORD *)(a1 + 200) = 0xBFF0000000000000;
  v10 = (int)(0.100000001 / *a4);
  *(_QWORD *)(a1 + 208) = off_102138370;
  *(_QWORD *)(a1 + 216) = v10;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  v11 = (int)(0.100000001 / *a4);
  *(_QWORD *)(a1 + 280) = off_102138370;
  *(_QWORD *)(a1 + 288) = v11;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(_BYTE *)(a1 + 472) = a5;
  *(_QWORD *)(a1 + 480) = *a2;
  *(double *)(a1 + 488) = *a4;
  *(_DWORD *)(a1 + 496) = 4;
  *(_QWORD *)(a1 + 504) = 0x3FA0A3D70A3D70A4;
  *(_BYTE *)(a1 + 512) = 1;
  *(_QWORD *)(a1 + 520) = off_102138370;
  *(_QWORD *)(a1 + 528) = 100;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 592) = off_1021693C8;
  *(_QWORD *)(a1 + 600) = 20;
  *(_QWORD *)(a1 + 608) = off_1021693F8;
  *(_QWORD *)(a1 + 616) = 20;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_QWORD *)(a1 + 688) = off_1021693F8;
  *(_QWORD *)(a1 + 696) = 20;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_QWORD *)(a1 + 768) = off_1021693F8;
  *(_QWORD *)(a1 + 776) = 20;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 904) = 0;
  operator new[]();
}

void sub_100C1497C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_100ADB1A0(v1 + 74);
  v1[65] = v2 + 16;
  sub_100412390(v1 + 68);
  v1[35] = v2 + 16;
  sub_100412390(v1 + 38);
  v1[26] = v2 + 16;
  sub_100412390(v1 + 29);
  _Unwind_Resume(a1);
}

_QWORD *sub_100C149C8(_QWORD *a1)
{
  *a1 = off_10217A1B0;
  if (a1[16])
    operator delete[]();
  sub_100ADB1A0(a1 + 74);
  a1[65] = off_102138370;
  sub_100412390(a1 + 68);
  a1[35] = off_102138370;
  sub_100412390(a1 + 38);
  a1[26] = off_102138370;
  sub_100412390(a1 + 29);
  return a1;
}

void sub_100C14A4C(_QWORD *a1)
{
  sub_100C149C8(a1);
  operator delete();
}

uint64_t sub_100C14A70(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_100C14A78(uint64_t a1)
{
  uint64_t v2;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 11) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  v2 = *(_QWORD *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_101C07CF0, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_101C07D00, 0xCuLL);
  *(_BYTE *)(a1 + 12) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
  bzero((void *)(a1 + 352), 0xCuLL);
  bzero((void *)(a1 + 364), 0xCuLL);
  bzero((void *)(a1 + 376), 0x18uLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 448), 0x18uLL);
  bzero((void *)(a1 + 400), 0x18uLL);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  bzero((void *)(a1 + 848), 0xCuLL);
  bzero((void *)(a1 + 864), 0x18uLL);
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 904) = 0;
  sub_10023235C((_QWORD *)(a1 + 608));
  sub_10023235C((_QWORD *)(a1 + 688));
  sub_10023235C((_QWORD *)(a1 + 768));
  sub_10041250C((_QWORD *)(a1 + 520));
  sub_10041250C((_QWORD *)(a1 + 208));
  sub_10041250C((_QWORD *)(a1 + 280));
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_10217A278);
  v8 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a1 + 600);
    *(_DWORD *)buf = 134217984;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "fAccelBuffer,size,%zu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217A278);
    v10 = *(_QWORD *)(a1 + 600);
    v13 = 134217984;
    v14 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "fAccelBuffer,size,%zu", (size_t)&v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::reset()", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

BOOL sub_100C14D5C(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(unsigned __int8 *)(a1 + 9);
  if (*(_BYTE *)(a1 + 9))
  {
    *(float32x2_t *)a2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 376));
    v3 = *(double *)(a1 + 392);
    *(float *)(a2 + 8) = v3;
  }
  return v2 != 0;
}

void sub_100C14D94(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, _QWORD *a5)
{
  float v7;
  float64x2_t v8;
  float v9;
  float v10;
  NSObject *v11;
  float32x2_t v12;
  float v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  double v30;
  float64x2_t v31;
  double v32;
  float v33;
  int v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  uint64_t v53;
  float32x2_t v54;
  float v55;

  *(_QWORD *)(a1 + 168) = *a5;
  ++*(_DWORD *)(a1 + 152);
  v7 = *a4;
  v8 = *(float64x2_t *)(a1 + 88);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))), v8));
  v54 = *(float32x2_t *)&v8.f64[0];
  v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  v55 = v9;
  *(float *)(a1 + 164) = v9;
  *(float32x2_t *)(a1 + 156) = v54;
  v10 = *((float *)v8.f64 + 1);
  v31 = v8;
  v33 = sqrtf(vmlas_n_f32(vmuls_lane_f32(*((float *)v8.f64 + 1), *(float32x2_t *)&v8.f64[0], 1), *(float *)v8.f64, *(float *)v8.f64)+ (float)(v9 * v9));
  sub_10007D084(a1 + 520, &v33);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217A278);
    v11 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218752;
      v45 = (float)(v33 / 0.017453);
      v46 = 2048;
      v47 = (float)(*(float *)v31.f64 / 0.017453);
      v48 = 2048;
      v49 = (float)(v10 / 0.017453);
      v50 = 2048;
      v51 = (float)(v9 / 0.017453);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "omegaMag9, %.3f, omega, %.3f, %.3f, %.3f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v34 = 134218752;
      v35 = (float)(v33 / 0.017453);
      v36 = 2048;
      v37 = (float)(*(float *)v31.f64 / 0.017453);
      v38 = 2048;
      v39 = (float)(v10 / 0.017453);
      v40 = 2048;
      v41 = (float)(v9 / 0.017453);
      LODWORD(v30) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "omegaMag9, %.3f, omega, %.3f, %.3f, %.3f", COERCE_DOUBLE(&v34), v30, v31.f64[0], v31.f64[1]);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  sub_100C152A8(a1 + 16, &v54, (double *)(a1 + 480));
  v12 = vadd_f32(*(float32x2_t *)(a1 + 136), *(float32x2_t *)&v31.f64[0]);
  *(float32x2_t *)(a1 + 136) = v12;
  v13 = *(float *)(a1 + 144) + v9;
  *(float *)(a1 + 144) = v13;
  ++*(_DWORD *)(a1 + 148);
  v14 = *(double *)(a1 + 480)
      * (*(double *)(a1 + 480)
       * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v12, v12).i32[1]), v12.f32[0], v12.f32[0]) + (float)(v13 * v13)));
  if (v14 > 0.122500002)
    sub_100C15340(a1, v14, (int32x2_t)0x3FBF5C2900000000);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v15 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(double *)(a1 + 16);
      v17 = *(double *)(a1 + 24);
      v18 = *(double *)(a1 + 32);
      v19 = *(double *)(a1 + 40);
      v20 = *a5;
      *(_DWORD *)buf = 134219008;
      v45 = v16;
      v46 = 2048;
      v47 = v17;
      v48 = 2048;
      v49 = v18;
      v50 = 2048;
      v51 = v19;
      v52 = 2048;
      v53 = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v23 = *(double *)(a1 + 16);
      v24 = *(double *)(a1 + 24);
      v25 = *(double *)(a1 + 32);
      v26 = *(double *)(a1 + 40);
      v27 = *a5;
      v34 = 134219008;
      v35 = v23;
      v36 = 2048;
      v37 = v24;
      v38 = 2048;
      v39 = v25;
      v40 = 2048;
      v41 = v26;
      v42 = 2048;
      v43 = v27;
      LODWORD(v30) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f", COERCE_DOUBLE(&v34), v30, v31.f64[0], v31.f64[1], v32);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
}

double sub_100C152A8(uint64_t a1, float32x2_t *a2, double *a3)
{
  double v4;
  double result;
  __int128 v6;
  _OWORD v7[2];
  double v8[4];
  float64x2_t v9;
  double v10;

  v4 = *a3;
  v9 = vmulq_n_f64(vcvtq_f64_f32(*a2), *a3);
  v10 = v4 * a2[1].f32[0];
  sub_100C158C4(v8, v9.f64);
  sub_100A002C4((double *)v7, v8, (double *)a1);
  result = *(double *)v7;
  v6 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v6;
  return result;
}

uint64_t sub_100C15340(uint64_t result, double a2, int32x2_t a3)
{
  int v3;
  uint64_t v4;
  void *v5;
  float v6;
  double v7;
  float32x2_t v8;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v19;
  double v20;
  float32x2_t v21;
  int32x2_t v22;
  double v23;
  double v24;
  void *v25[2];
  double v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31[144];
  float v32[36];
  float v33[2];
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  _DWORD v41[2];
  float32x2_t v42;
  int v43;
  float v44;
  __int32 v45;
  float v46;
  int v47;

  v3 = *(_DWORD *)(result + 148);
  if (v3)
  {
    v4 = result;
    v5 = (void *)(result + 136);
    *(float *)a3.i32 = (float)v3;
    v22 = a3;
    v6 = *(float *)(result + 136) / (float)v3;
    v26 = *(double *)(result + 480) * (double)v3;
    v7 = v26;
    *(_DWORD *)(result + 148) = 0;
    v20 = exp(v7 / -5000.0);
    v21 = vdiv_f32(*(float32x2_t *)(v4 + 140), (float32x2_t)vdup_lane_s32(v22, 0));
    bzero(v5, 0xCuLL);
    v8 = v21;
    *(float64x2_t *)(v4 + 88) = vmulq_n_f64(*(float64x2_t *)(v4 + 88), v20);
    *(double *)(v4 + 104) = v20 * *(double *)(v4 + 104);
    v41[0] = 0;
    v41[1] = v21.i32[1];
    _S9 = v21.i32[1];
    v42 = vneg_f32(v21);
    v43 = 0;
    v44 = v6;
    v45 = v21.i32[0];
    v46 = -v6;
    v47 = 0;
    v10 = vmul_f32(v8, v8).f32[0];
    v11 = vmuls_lane_f32(v21.f32[1], v21, 1);
    v33[0] = -(float)(v10 + v11);
    v33[1] = v6 * v21.f32[0];
    v34 = vmuls_lane_f32(v6, v21, 1);
    v35 = v6 * v21.f32[0];
    v36 = -(float)((float)(v6 * v6) + v11);
    v37 = vmuls_lane_f32(v8.f32[0], v8, 1);
    v38 = v34;
    v39 = v37;
    v40 = -(float)((float)(v6 * v6) + v10);
    sub_100AD85B4((uint64_t)v32, &v26, (uint64_t)v41, (uint64_t)v33);
    v12 = *(_QWORD *)(v4 + 112);
    v4 += 112;
    sub_100AD87B4(v32, v12, 6);
    v25[0] = &v30;
    v25[1] = &v29;
    _V1.S[1] = v21.i32[1];
    __asm { FMLA            S0, S9, V1.S[1] }
    v23 = (float)(*(float *)v22.i32 * 0.00000021323) * 0.5;
    v24 = 2.76135698e-10 / (7.0 / (exp((0.11 - sqrtf(_S0)) / 0.012) + 1.0) + 1.0);
    sub_100AD8848(v31, &v26, (uint64_t)v41, &v23, &v24);
    sub_100AD8A88(v25, (uint64_t)v31, 6);
    result = sub_100AD8C1C((uint64_t)&v27, (uint64_t *)v4, (uint64_t)v32, (uint64_t *)v25, 6);
    v19 = *(_QWORD *)(v4 + 8);
    *(_OWORD *)v19 = v27;
    *(_QWORD *)(v19 + 16) = v28;
  }
  return result;
}

double sub_100C15590(uint64_t a1, float32x2_t *a2, float *a3)
{
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  double result;
  float v15;
  int v16;
  int v17;
  float v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  char *v26;
  double v27;
  _BYTE v28[12];
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  _BYTE buf[12];
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;

  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v6 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v7 = a2->f32[0];
      v8 = a2->f32[1];
      v9 = a2[1].f32[0];
      v10 = *a3;
      v11 = a3[1];
      v12 = a3[2];
      *(_DWORD *)buf = 134219264;
      *(double *)&buf[4] = v7;
      v40 = 2048;
      v41 = v8;
      v42 = 2048;
      v43 = v9;
      v44 = 2048;
      v45 = v10;
      v46 = 2048;
      v47 = v11;
      v48 = 2048;
      v49 = v12;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v19 = a2->f32[0];
      v20 = a2->f32[1];
      v21 = a2[1].f32[0];
      v22 = *a3;
      v23 = a3[1];
      v24 = a3[2];
      *(_DWORD *)v28 = 134219264;
      *(double *)&v28[4] = v19;
      v29 = 2048;
      v30 = v20;
      v31 = 2048;
      v32 = v21;
      v33 = 2048;
      v34 = v22;
      v35 = 2048;
      v36 = v23;
      v37 = 2048;
      v38 = v24;
      LODWORD(v27) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", COERCE_DOUBLE(v28), v27);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  if (*(_BYTE *)(a1 + 12))
  {
    v13 = 0;
    result = *(double *)a3;
    *(_QWORD *)buf = *(_QWORD *)a3;
    *(float *)&buf[8] = a3[2];
    LODWORD(result) = 897988541;
    do
    {
      v15 = *(float *)&buf[v13];
      if (v15 < 0.000001)
        v15 = 0.000001;
      *(float *)&buf[v13] = v15;
      v13 += 4;
    }
    while (v13 != 12);
    v16 = *(_DWORD *)(a1 + 152);
    if (v16 >= 1)
    {
      if (v16 >= 50)
        v17 = 50;
      else
        v17 = *(_DWORD *)(a1 + 152);
      do
      {
        *(float32x2_t *)v28 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        v18 = a2[1].f32[0] - *(double *)(a1 + 104);
        *(float *)&v28[8] = v18;
        result = sub_100AD7E80(a1, (uint64_t)v28, (uint64_t *)buf);
        --v17;
      }
      while (v17);
    }
    *(_DWORD *)(a1 + 152) = 0;
  }
  else
  {
    *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(*a2);
    result = a2[1].f32[0];
    *(double *)(a1 + 104) = result;
    *(_BYTE *)(a1 + 12) = 1;
  }
  return result;
}

void sub_100C158C4(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double cosval;
  __double2 v13;

  v4 = *a2;
  v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    v13 = __sincos_stret(v5 * 0.5);
    cosval = v13.__cosval;
    *a1 = v4 * (v13.__sinval / v5);
    a1[1] = v13.__sinval / v5 * a2[1];
    v11 = v13.__sinval / v5 * a2[2];
  }
  else
  {
    *a1 = v4 * 0.5;
    v6 = a2[1] * 0.5;
    a1[1] = v6;
    v7 = a2[2] * 0.5;
    v8 = v5 * v5 * 0.125;
    v9 = 1.0 - v8;
    v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    v11 = v7 / v10;
    cosval = v9 / v10;
  }
  a1[2] = v11;
  a1[3] = cosval;
}

double sub_100C15998(double *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v17;
  _BYTE v18[36];
  uint64_t v19;
  double v20[3];

  sub_100C15A90(a1 + 2, a1 + 47, v20);
  v2 = a1[5];
  v3 = a1[4] + a1[4];
  v4 = a1[2];
  v5 = a1[3];
  v6 = v2 * (v5 + v5) - v4 * v3;
  v7 = -(v2 * (v4 + v4)) - v5 * v3;
  v8 = -1.0;
  v9 = v4 * (v4 + v4) + -1.0 + v5 * (v5 + v5);
  v19 = 0x3F8000003F800000;
  v17.i64[0] = 0;
  v17.i64[1] = 0x3F80000000000000;
  *(float *)&v3 = v20[0];
  *(float *)&v2 = v20[1];
  *(float *)&v4 = v20[2];
  *(float *)&v5 = v6;
  v10 = v7;
  *(float *)&v6 = v9;
  if (sub_100B62074((float *)&v19, &v17, (uint64_t)v18, *(float *)&v3, *(float *)&v2, *(float *)&v4, *(float *)&v5, v10, *(float *)&v6, v9, v7, v11, v12, v13, v14, v15, 0x3F800000uLL, 0.0))
  {
    return sub_100B631D4(v17.f32);
  }
  return v8;
}

double sub_100C15A90(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double result;

  v4 = a1[2];
  v3 = a1[3];
  v5 = v3 + v3;
  v6 = a1[1];
  v7 = *a1 + *a1;
  v8 = v6 + v6;
  v9 = v3 * (v3 + v3);
  v10 = (v6 + v6) * v6 + -1.0;
  v11 = (v4 + v4) * v4 + -1.0;
  v12 = v7 * v6;
  v13 = v7 * v4;
  v14 = v3 * v7;
  v15 = v8 * v4;
  v16 = v3 * v8;
  v17 = v5 * v4;
  *a3 = (v12 + v17) * a2[1] + (v9 + (*a1 + *a1) * *a1 + -1.0) * *a2 + (v13 - v16) * a2[2];
  a3[1] = (v9 + v10) * a2[1] + (v12 - v17) * *a2 + (v14 + v15) * a2[2];
  result = (v15 - v14) * a2[1] + (v13 + v16) * *a2 + (v9 + v11) * a2[2];
  a3[2] = result;
  return result;
}

void sub_100C15B44(uint64_t a1, double *a2, double *a3, double *a4, _QWORD *a5)
{
  float64x2_t v10;
  float v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x2_t v19;
  float v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  NSObject *v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  float v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  double v39;
  int v40;
  NSObject *v41;
  double v42;
  int v43;
  BOOL v44;
  int v45;
  NSObject *v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  const char *v62;
  char *v63;
  float v64;
  float v65;
  float v66;
  unint64_t v67;
  float v68;
  float v69;
  NSObject *v70;
  const char *v71;
  char *v72;
  double v73;
  uint64_t v74;
  float v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  NSObject *v88;
  NSObject *v89;
  unint64_t v90;
  float v91;
  NSObject *v92;
  const char *v93;
  char *v94;
  double v95;
  double v96;
  double v97;
  double v98;
  const char *v99;
  char *v100;
  double v101;
  double v102;
  double v103;
  unint64_t v104;
  float v105;
  BOOL v106;
  double v107;
  float v108;
  NSObject *v109;
  const char *v110;
  const char *v111;
  char *v112;
  const char *v113;
  char *v114;
  const char *v115;
  char *v116;
  int v117;
  int *v118;
  double v119;
  NSObject *v120;
  NSObject *v121;
  const char *v122;
  unint64_t v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  const char *v128;
  char *v129;
  const char *v130;
  char *v131;
  const char *v132;
  char *v133;
  const char *v134;
  char *v135;
  const char *v136;
  char *v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  float v146;
  float v147;
  float v148;
  double v149;
  double v150;
  double v151;
  double v152;
  _BYTE v153[24];
  double v154;
  __int16 v155;
  double v156;
  __int16 v157;
  double v158;
  __int16 v159;
  double v160;
  __int16 v161;
  uint64_t v162;
  __int128 v163;
  double v164;
  _BYTE buf[24];
  double v166;
  __int16 v167;
  double v168;
  __int16 v169;
  double v170;
  __int16 v171;
  double v172;
  __int16 v173;
  uint64_t v174;

  v10.f64[0] = *a2;
  v11 = *a2;
  *(float *)(a1 + 352) = v11;
  v12 = *a3;
  v13 = *a3;
  *(float *)(a1 + 356) = v13;
  v14 = *a4;
  v15 = *a4;
  *(float *)(a1 + 360) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_100A001DC(a1 + 16, a2, a3, a4);
    *(_QWORD *)(a1 + 176) = *a5;
    v16 = *a2;
    *(float *)(a1 + 848) = v16;
    v17 = *a3;
    *(float *)(a1 + 852) = v17;
    v18 = *a4;
    *(float *)(a1 + 856) = v18;
    *(_DWORD *)(a1 + 888) = 0;
    sub_100AD855C((double *)(a1 + 864), (double *)(a1 + 16));
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  v10.f64[1] = v12;
  v19 = vcvt_f32_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 848)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), v10));
  *(float32x2_t *)(a1 + 848) = v19;
  v20 = *(float *)(a1 + 856) * 0.1 + v14 * 0.9;
  *(float *)(a1 + 856) = v20;
  *(double *)buf = v19.f32[0];
  *(double *)v153 = v19.f32[1];
  v149 = v20;
  sub_100ADB200(a1 + 608, (double *)buf);
  sub_100ADB200(a1 + 688, (double *)v153);
  sub_100ADB200(a1 + 768, &v149);
  *(_QWORD *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148))
    return;
  v21 = *(double *)a5;
  v22 = *(double *)(a1 + 168);
  if (*(double *)a5 < v22)
    return;
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v23 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a2;
      v25 = *a3;
      v26 = *a4;
      v27 = *(double *)a5;
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      v166 = v26;
      v167 = 2048;
      v168 = v27;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v95 = *a2;
      v96 = *a3;
      v97 = *a4;
      v98 = *(double *)a5;
      *(_DWORD *)v153 = 134218752;
      *(double *)&v153[4] = v95;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v96;
      *(_WORD *)&v153[22] = 2048;
      v154 = v97;
      v155 = 2048;
      v156 = v98;
      LODWORD(v138) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf", COERCE_DOUBLE(v153), v138, v139, v140);
      v100 = (char *)v99;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v99);
      if (v100 != buf)
        free(v100);
    }
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v28 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(float *)(a1 + 156);
      v30 = *(float *)(a1 + 160);
      v31 = *(float *)(a1 + 164);
      v32 = *(_QWORD *)(a1 + 584);
      if (v32)
        v33 = *(float *)(a1 + 536) / (float)v32;
      else
        v33 = 0.0;
      *(_DWORD *)buf = 134218752;
      *(double *)&buf[4] = v29;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2048;
      v166 = v31;
      v167 = 2048;
      v168 = v33;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[RotationRate9] %.3f, %.3f, %.3f, %.3f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v101 = *(float *)(a1 + 156);
      v102 = *(float *)(a1 + 160);
      v103 = *(float *)(a1 + 164);
      v104 = *(_QWORD *)(a1 + 584);
      if (v104)
        v105 = *(float *)(a1 + 536) / (float)v104;
      else
        v105 = 0.0;
      *(_DWORD *)v153 = 134218752;
      *(double *)&v153[4] = v101;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v102;
      *(_WORD *)&v153[22] = 2048;
      v154 = v103;
      v155 = 2048;
      v156 = v105;
      LODWORD(v138) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[RotationRate9] %.3f, %.3f, %.3f, %.3f", COERCE_DOUBLE(v153), v138, v139, v140);
      v116 = (char *)v115;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v115);
      if (v116 != buf)
        free(v116);
    }
  }
  v35 = *a3;
  *(double *)&v163 = *a2;
  v34 = *(double *)&v163;
  *((double *)&v163 + 1) = v35;
  v164 = *a4;
  v36 = v164;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  v147 = *(float *)(a1 + 140);
  v148 = *(float *)&v22;
  LODWORD(v21) = *(_DWORD *)(a1 + 144);
  v37 = *(_DWORD *)(a1 + 148);
  v146 = *(float *)&v21;
  sub_100C15340(a1, v21, *(int32x2_t *)&v22);
  v38 = sqrt(v35 * v35 + v34 * v34 + v36 * v36);
  v39 = fabs(v38 + -1.0) / v38;
  if (v39 > 0.1)
    return;
  if (!*(_BYTE *)(a1 + 512) || *(_DWORD *)(a1 + 904))
    goto LABEL_22;
  v64 = fabsf(*(float *)(a1 + 156));
  if (v64 > 10.0)
    goto LABEL_82;
  v65 = fabsf(*(float *)(a1 + 160));
  if (v65 > 10.0)
    goto LABEL_82;
  v66 = fabsf(*(float *)(a1 + 164));
  if (v66 > 10.0)
    goto LABEL_82;
  v67 = *(_QWORD *)(a1 + 584);
  if (v67)
  {
    if ((float)(*(float *)(a1 + 536) / (float)v67) > 10.0)
      goto LABEL_82;
  }
  if (v64 > 3.14159265
    || v65 > 3.14159265
    || v66 > 3.14159265
    || (!v67 ? (v68 = 0.0) : (v68 = *(float *)(a1 + 536) / (float)v67), v68 > 3.14159265))
  {
    if (v67 < 2
      || (v69 = (float)((float)v67 * *(float *)(a1 + 540)) - (float)(*(float *)(a1 + 536) * *(float *)(a1 + 536)),
          v69 < 0.0)
      || (float)(v69 / (float)((v67 - 1) * v67)) < 1.25)
    {
      sub_100AD855C((double *)(a1 + 864), (double *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 472))
      {
        *(_DWORD *)(a1 + 888) = 0;
        goto LABEL_28;
      }
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v70 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        *(_WORD *)v153 = 0;
        LODWORD(v138) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "rotating and going through.", v153, *(_QWORD *)&v138);
        v72 = (char *)v71;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v71);
        if (v72 != buf)
          free(v72);
      }
LABEL_22:
      v40 = *(unsigned __int8 *)(a1 + 472);
      *(_DWORD *)(a1 + 888) = 0;
      if (v40)
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v41 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v34;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2048;
          v166 = v36;
          v167 = 2048;
          v168 = v38;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "accM, (%.4f, %.4f, %.4f), mag, %.3f", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_10217A278);
          *(_DWORD *)v153 = 134218752;
          *(double *)&v153[4] = v34;
          *(_WORD *)&v153[12] = 2048;
          *(double *)&v153[14] = v35;
          *(_WORD *)&v153[22] = 2048;
          v154 = v36;
          v155 = 2048;
          v156 = v38;
          LODWORD(v138) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "accM, (%.4f, %.4f, %.4f), mag, %.3f", COERCE_DOUBLE(v153), v138, v139, v140);
          v114 = (char *)v113;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v113);
          if (v114 != buf)
            free(v114);
        }
      }
LABEL_28:
      v42 = v39
          * (0.015
           / (exp((0.9- sqrtf((float)((float)((float)(v147 / (float)v37) * (float)(v147 / (float)v37))+ (float)((float)(v148 / (float)v37) * (float)(v148 / (float)v37)))+ (float)((float)(v146 / (float)v37) * (float)(v146 / (float)v37))))/ 0.08)+ 1.0))+ 0.00000900000032;
      if (*(_BYTE *)(a1 + 512) && !*(_DWORD *)(a1 + 904))
        v42 = v42 * 0.85;
      *(double *)&v163 = v34 / v38;
      *((double *)&v163 + 1) = v35 / v38;
      v164 = v36 / v38;
      sub_100C177F0(a1, (double *)&v163, v42);
      if (*(_BYTE *)(a1 + 512))
        sub_100AD855C((double *)(a1 + 864), (double *)(a1 + 16));
      *(_QWORD *)(a1 + 896) = *a5;
      v43 = *(_DWORD *)(a1 + 904);
      v44 = __OFSUB__(v43, 1);
      v45 = v43 - 1;
      if (v45 < 0 == v44)
      {
        *(_DWORD *)(a1 + 904) = v45;
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v46 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "Doing some crude updates to catch up.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_10217A278);
          *(_WORD *)v153 = 0;
          LODWORD(v138) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Doing some crude updates to catch up.", v153, *(_QWORD *)&v138);
          v112 = (char *)v111;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v111);
          if (v112 != buf)
            free(v112);
        }
      }
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_10217A2B8);
        v47 = qword_10229FD38;
        if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
        {
          v48 = *(_QWORD *)(a1 + 64);
          v49 = *(_QWORD *)(a1 + 72);
          v50 = *(double *)(a1 + 80);
          v51 = *(double *)(a1 + 88);
          v52 = *(double *)(a1 + 96);
          v53 = *(double *)(a1 + 104);
          v54 = *a5;
          *(_DWORD *)buf = 134219520;
          *(_QWORD *)&buf[4] = v48;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v49;
          *(_WORD *)&buf[22] = 2048;
          v166 = v50;
          v167 = 2048;
          v168 = v51;
          v169 = 2048;
          v170 = v52;
          v171 = 2048;
          v172 = v53;
          v173 = 2048;
          v174 = v54;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD30 != -1)
            dispatch_once(&qword_10229FD30, &stru_10217A2B8);
          v55 = *(_QWORD *)(a1 + 64);
          v56 = *(_QWORD *)(a1 + 72);
          v57 = *(double *)(a1 + 80);
          v58 = *(double *)(a1 + 88);
          v59 = *(double *)(a1 + 96);
          v60 = *(double *)(a1 + 104);
          v61 = *a5;
          *(_DWORD *)v153 = 134219520;
          *(_QWORD *)&v153[4] = v55;
          *(_WORD *)&v153[12] = 2048;
          *(_QWORD *)&v153[14] = v56;
          *(_WORD *)&v153[22] = 2048;
          v154 = v57;
          v155 = 2048;
          v156 = v58;
          v157 = 2048;
          v158 = v59;
          v159 = 2048;
          v160 = v60;
          v161 = 2048;
          v162 = v61;
          LODWORD(v138) = 72;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f", COERCE_DOUBLE(v153), v138, v139, v140, v141, v142, v143);
          v63 = (char *)v62;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v62);
LABEL_48:
          if (v63 != buf)
            free(v63);
          return;
        }
      }
      return;
    }
  }
  sub_100ADABF0(a1 + 592, (uint64_t)&v149);
  v145 = sqrt(v151 * v151 + v150 * v150 + v152 * v152);
  v73 = *(double *)(a1 + 896);
  if (v73 > 0.0 && *(double *)(a1 + 176) - v73 > 15.0 && v145 < 0.3)
  {
    sub_100ADACC4(a1 + 592, (uint64_t)buf);
    if (fabs(sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v166 * v166)+ -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 904) = 10;
      if (!*(_BYTE *)(a1 + 472))
        goto LABEL_181;
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v92 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_181;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      *(_WORD *)v153 = 0;
      LODWORD(v138) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "it's been too long. go through.", v153, *(_QWORD *)&v138);
      v94 = (char *)v93;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v93);
LABEL_117:
      if (v94 != buf)
        free(v94);
      goto LABEL_181;
    }
  }
  if (*(_DWORD *)(a1 + 680) <= (int)((double)*(unint64_t *)(a1 + 600) * 0.5))
  {
LABEL_82:
    sub_100AD855C((double *)(a1 + 864), (double *)(a1 + 16));
    return;
  }
  v74 = *(_QWORD *)(a1 + 584);
  if (v74)
    v75 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 552)
                               + (((unint64_t)(v74 + *(_QWORD *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v74 + *(_QWORD *)(a1 + 576) - 1) & 0x3FF));
  else
    v75 = 0.0;
  if (v75 > 0.2)
  {
    sub_100AD855C((double *)(a1 + 864), (double *)(a1 + 16));
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v76 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        v77 = *(_QWORD *)(a1 + 864);
        v78 = *(_QWORD *)(a1 + 872);
        v79 = *(double *)(a1 + 880);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v77;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v78;
        *(_WORD *)&buf[22] = 2048;
        v166 = v79;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "grabing gravity, %.4f, %.4f, %.4f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v125 = *(_QWORD *)(a1 + 864);
        v126 = *(_QWORD *)(a1 + 872);
        v127 = *(double *)(a1 + 880);
        *(_DWORD *)v153 = 134218496;
        *(_QWORD *)&v153[4] = v125;
        *(_WORD *)&v153[12] = 2048;
        *(_QWORD *)&v153[14] = v126;
        *(_WORD *)&v153[22] = 2048;
        v154 = v127;
        LODWORD(v138) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "grabing gravity, %.4f, %.4f, %.4f", COERCE_DOUBLE(v153), v138, v139);
        v129 = (char *)v128;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v128);
        if (v129 != buf)
          free(v129);
      }
    }
  }
  if (v145 <= *(double *)(a1 + 504) * 0.75)
    goto LABEL_181;
  v80 = *(double *)(a1 + 864);
  v81 = *(double *)(a1 + 872);
  v82 = *(double *)(a1 + 880);
  v83 = fabs(v151 * v81 + v150 * v80 + v152 * v82);
  v144 = v145 - v83;
  v84 = *(double *)(a1 + 624);
  v85 = *(double *)(a1 + 704);
  v86 = *(double *)(a1 + 784);
  v87 = v81 * v85 + v84 * v80 + v86 * v82;
  v139 = v84 - v87 * v80;
  v140 = v85 - v87 * v81;
  v141 = v86 - v87 * v82;
  v142 = v87;
  v143 = fabs(v141) + fabs(v139) + fabs(v140);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217A278);
    v88 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219264;
      *(double *)&buf[4] = v150;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v151;
      *(_WORD *)&buf[22] = 2048;
      v166 = v152;
      v167 = 2048;
      v168 = v145;
      v169 = 2048;
      v170 = v83;
      v171 = 2048;
      v172 = v145 - v83;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      *(_DWORD *)v153 = 134219264;
      *(double *)&v153[4] = v150;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v151;
      *(_WORD *)&v153[22] = 2048;
      v154 = v152;
      v155 = 2048;
      v156 = v145;
      v157 = 2048;
      v158 = v83;
      v159 = 2048;
      v160 = v145 - v83;
      LODWORD(v138) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", COERCE_DOUBLE(v153), v138, v139, v140, v141, v142);
      v131 = (char *)v130;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v130);
      if (v131 != buf)
        free(v131);
    }
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217A278);
    v89 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v139;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v140;
      *(_WORD *)&buf[22] = 2048;
      v166 = v141;
      v167 = 2048;
      v168 = v142;
      v169 = 2048;
      v170 = v143;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEBUG, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      *(_DWORD *)v153 = 134219008;
      *(double *)&v153[4] = v139;
      *(_WORD *)&v153[12] = 2048;
      *(double *)&v153[14] = v140;
      *(_WORD *)&v153[22] = 2048;
      v154 = v141;
      v155 = 2048;
      v156 = v142;
      v157 = 2048;
      v158 = v143;
      LODWORD(v138) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", COERCE_DOUBLE(v153), v138, v139, v140, v141);
      v133 = (char *)v132;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v132);
      if (v133 != buf)
        free(v133);
    }
  }
  if (v144 > *(double *)(a1 + 504))
    goto LABEL_131;
  v90 = *(_QWORD *)(a1 + 584);
  if (v90)
    v91 = *(float *)(a1 + 536) / (float)v90;
  else
    v91 = 0.0;
  v106 = v91 <= 1.57079633;
  v107 = 0.0;
  if (!v106)
    v107 = 1.0;
  if (v143 > (v107 * 0.5 + 1.0) * 6.0)
  {
LABEL_131:
    *(_DWORD *)(a1 + 888) = 0;
    return;
  }
  if (v144 >= 0.01 || v143 >= 0.6)
  {
    v117 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v117;
    if (!v90)
      goto LABEL_171;
    v118 = (int *)(a1 + 888);
    v108 = *(float *)(a1 + 536) / (float)v90;
  }
  else
  {
    if (!v90)
    {
      v117 = *(_DWORD *)(a1 + 888) + 1;
      *(_DWORD *)(a1 + 888) = v117;
      goto LABEL_171;
    }
    v108 = *(float *)(a1 + 536) / (float)v90;
    if (v108 > 0.5)
    {
      if (!*(_BYTE *)(a1 + 472))
        goto LABEL_181;
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v109 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_181;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      *(_WORD *)v153 = 0;
      LODWORD(v138) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "===========Skip ahead.", v153, *(_QWORD *)&v138);
      v94 = (char *)v110;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v110);
      goto LABEL_117;
    }
    v118 = (int *)(a1 + 888);
    v117 = *(_DWORD *)(a1 + 888) + 1;
    *(_DWORD *)(a1 + 888) = v117;
  }
  if (v108 > 1.0
    && *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 552) + (((v90 + *(_QWORD *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                + 4 * ((v90 + *(_QWORD *)(a1 + 576) - 1) & 0x3FF)) < 0.2)
  {
    sub_100ADACC4(a1 + 592, (uint64_t)buf);
    v119 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v166 * v166);
    if (fabs(v119 + -1.0) / v119 >= 0.025)
    {
      v117 = *v118;
    }
    else
    {
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v120 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_10217A278);
          *(_WORD *)v153 = 0;
          LODWORD(v138) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Skip ahead------.", v153, *(_QWORD *)&v138);
          v137 = (char *)v136;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v136);
          if (v137 != buf)
            free(v137);
        }
      }
      v117 = *v118 + 2;
      *v118 = v117;
    }
  }
LABEL_171:
  if (v117 >= *(_DWORD *)(a1 + 496))
  {
LABEL_181:
    if (*(_BYTE *)(a1 + 512))
    {
      if (v145 > 0.2)
      {
        v123 = *(_QWORD *)(a1 + 584);
        if (!v123
          || *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 552)
                                  + (((v123 + *(_QWORD *)(a1 + 576) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v123 + *(_QWORD *)(a1 + 576) - 1) & 0x3FF)) < 0.75
          && (float)(*(float *)(a1 + 536) / (float)v123) < 1.0)
        {
          sub_100ADACC4(a1 + 592, (uint64_t)v153);
          v35 = *(double *)&v153[16];
          v34 = *(double *)&v153[8];
          v36 = v154;
          v163 = *(_OWORD *)&v153[8];
          v164 = v154;
          if (*(_BYTE *)(a1 + 472))
          {
            if (qword_10229FD20 != -1)
              dispatch_once(&qword_10229FD20, &stru_10217A278);
            v124 = qword_10229FD28;
            if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEBUG, "using mean accel", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD20 != -1)
                dispatch_once(&qword_10229FD20, &stru_10217A278);
              LOWORD(v149) = 0;
              LODWORD(v138) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "using mean accel", &v149, *(_QWORD *)&v138);
              v135 = (char *)v134;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v134);
              if (v135 != buf)
                free(v135);
            }
          }
          v38 = sqrt(v35 * v35 + v34 * v34 + v36 * v36);
          v39 = fabs(v38 + -1.0) / v38;
        }
      }
    }
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217A278);
    v121 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "Taking another look.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      *(_WORD *)v153 = 0;
      LODWORD(v138) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Taking another look.", v153, *(_QWORD *)&v138);
      v63 = (char *)v122;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "%s\n", v122);
      goto LABEL_48;
    }
  }
}

void sub_100C177F0(uint64_t a1, double *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t i;
  float v16;
  float v17;
  float v18;
  float v19;
  double v20;
  double v21;
  double v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  int v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint8_t buf[4];
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  _BYTE v64[48];
  double v65;
  double v66;
  double v67;
  _DWORD v68[3];
  _DWORD v69[3];
  _BYTE v70[36];
  uint64_t v71;
  _DWORD v72[9];

  v6 = 0;
  v7 = 0;
  v8 = *(double *)(a1 + 40);
  v9 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  v10 = *(double *)(a1 + 16);
  v11 = *(double *)(a1 + 24);
  v12 = v8 * (v11 + v11) - v10 * v9;
  v13 = -(v8 * (v10 + v10)) - v11 * v9;
  v14 = v10 * (v10 + v10) + -1.0 + v11 * (v11 + v11);
  *(float *)&v9 = v13;
  *(float *)&v8 = v14;
  v72[0] = 0;
  v72[1] = LODWORD(v8);
  *(float *)&v72[2] = -*(float *)&v9;
  *(float *)&v10 = v12;
  *(float *)&v72[3] = -*(float *)&v8;
  v72[4] = 0;
  v72[5] = LODWORD(v10);
  v72[6] = LODWORD(v9);
  *(float *)&v72[7] = -*(float *)&v10;
  v72[8] = 0;
  do
  {
    for (i = 0; i != 9; i += 3)
      *(_DWORD *)&v70[v6 * 4 + i * 4] = v72[v6 + i];
    ++v7;
    ++v6;
  }
  while (v7 != 3);
  bzero(&v71, 0x24uLL);
  v16 = a3;
  *(float *)v69 = v16;
  *(float *)&v69[1] = v16;
  *(float *)&v69[2] = v16;
  v17 = *a2 - v12;
  v18 = a2[1] - v13;
  *(float *)v68 = v17;
  *(float *)&v68[1] = v18;
  v19 = a2[2] - v14;
  *(float *)&v68[2] = v19;
  sub_100AD7F9C(&v65, (uint64_t *)(a1 + 112), (uint64_t)v70, (uint64_t)v69, (uint64_t)v68, 6, 3, (uint64_t)v64);
  v20 = v13 * v66 + v65 * v12 + v67 * v14;
  v21 = v65 - v20 * v12;
  v22 = v66 - v20 * v13;
  v65 = v21;
  v66 = v22;
  v23 = v67 - v20 * v14;
  v67 = v23;
  sub_100C17B88(a1, &v65);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v24 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v25 = *(_QWORD *)(a1 + 88);
      v26 = *(_QWORD *)(a1 + 96);
      v27 = *(_QWORD *)(a1 + 104);
      v28 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 134219520;
      v51 = v21;
      v52 = 2048;
      v53 = v22;
      v54 = 2048;
      v55 = v23;
      v56 = 2048;
      v57 = v25;
      v58 = 2048;
      v59 = v26;
      v60 = 2048;
      v61 = v27;
      v62 = 2048;
      v63 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v29 = *(_QWORD *)(a1 + 88);
      v30 = *(_QWORD *)(a1 + 96);
      v31 = *(_QWORD *)(a1 + 104);
      v32 = *(_QWORD *)(a1 + 176);
      v36 = 134219520;
      v37 = v21;
      v38 = 2048;
      v39 = v22;
      v40 = 2048;
      v41 = v23;
      v42 = 2048;
      v43 = v29;
      v44 = 2048;
      v45 = v30;
      v46 = 2048;
      v47 = v31;
      v48 = 2048;
      v49 = v32;
      LODWORD(v35) = 72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f", COERCE_DOUBLE(&v36), v35);
      v34 = (uint8_t *)v33;
      sub_100512490("Generic", 1, 0, 2, "void CLSensorFusion9AxisMekf::doAccelerometerMeasurementUpdate(double *, double)", "%s\n", v33);
      if (v34 != buf)
        free(v34);
    }
  }
}

double sub_100C17B88(uint64_t a1, double *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  double result;
  _OWORD v8[2];
  double v9[4];

  sub_100C158C4(v9, a2);
  sub_100A002C4((double *)v8, v9, (double *)(a1 + 16));
  v4 = 0;
  v5 = v8[1];
  *(_OWORD *)(a1 + 16) = v8[0];
  *(_OWORD *)(a1 + 32) = v5;
  v6 = a1 + 88;
  do
  {
    result = a2[v4 + 3] + *(double *)(v6 + v4 * 8);
    *(double *)(v6 + v4 * 8) = result;
    ++v4;
  }
  while (v4 != 3);
  return result;
}

void sub_100C17BF8(uint64_t a1)
{
  sub_10041250C((_QWORD *)(a1 + 208));
  sub_10041250C((_QWORD *)(a1 + 280));
  *(_WORD *)(a1 + 440) = 256;
  *(_DWORD *)(a1 + 436) = 0;
}

BOOL sub_100C17C30(uint64_t a1, uint64_t *a2, _BYTE *a3, _BYTE *a4, double *a5)
{
  int v10;
  NSObject *v11;
  double v12;
  int v13;
  int v14;
  _BOOL8 v15;
  NSObject *v16;
  double v17;
  NSObject *v18;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  float v27;
  NSObject *v28;
  double v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  NSObject *v35;
  float32x2_t *v36;
  NSObject *v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  NSObject *v42;
  NSObject *v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  uint64_t v56;
  double v57;
  double v58;
  float v59;
  unint64_t v60;
  float v61;
  float v62;
  unint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  uint64_t v70;
  float v71;
  float v72;
  NSObject *v73;
  _BOOL4 v74;
  int v78;
  NSObject *v79;
  double v80;
  double v81;
  double v82;
  double v83;
  NSObject *v84;
  double v85;
  uint64_t v86;
  double v87;
  float v88;
  float v89;
  float v90;
  NSObject *v91;
  double v92;
  uint64_t v93;
  double v94;
  NSObject *v95;
  NSObject *v96;
  uint64_t v97;
  const char *v98;
  NSObject *v99;
  int v100;
  int v101;
  NSObject *v102;
  uint64_t v103;
  double v104;
  int v105;
  int v106;
  const char *v107;
  uint8_t *v108;
  uint64_t v109;
  const char *v110;
  uint8_t *v111;
  const char *v112;
  uint8_t *v113;
  double v114;
  const char *v115;
  uint8_t *v116;
  const char *v117;
  uint8_t *v118;
  const char *v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  double v124;
  const char *v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint8_t *v131;
  const char *v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint8_t *v138;
  double v139;
  double v140;
  double v141;
  double v142;
  const char *v143;
  uint8_t *v144;
  const char *v145;
  uint8_t *v146;
  const char *v147;
  uint8_t *v148;
  _BYTE *v149;
  double v150;
  double v151;
  double v152[2];
  uint64_t v153;
  int v154;
  float v155[3];
  _BYTE v156[24];
  double v157;
  __int16 v158;
  _BYTE v159[14];
  _BYTE v160[24];
  uint64_t v161;
  float64x2_t v162;
  double v163;
  _BYTE v164[24];
  uint64_t v165;
  double v166[3];
  uint8_t buf[4];
  double v168;
  __int16 v169;
  _BYTE v170[10];
  double v171;
  __int16 v172;
  _BYTE v173[14];

  *(_BYTE *)(a1 + 9) = 0;
  v10 = *((_DWORD *)a2 + 9);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v11 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a5;
      v13 = *a3;
      v14 = *a4;
      *(_DWORD *)buf = 134218752;
      v168 = v12;
      v169 = 1024;
      *(_DWORD *)v170 = v10;
      *(_WORD *)&v170[4] = 1024;
      *(_DWORD *)&v170[6] = v13;
      LOWORD(v171) = 1024;
      *(_DWORD *)((char *)&v171 + 2) = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v104 = *a5;
      v105 = *a3;
      v106 = *a4;
      *(_DWORD *)v156 = 134218752;
      *(double *)&v156[4] = v104;
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = v10;
      *(_WORD *)&v156[18] = 1024;
      *(_DWORD *)&v156[20] = v105;
      LOWORD(v157) = 1024;
      *(_DWORD *)((char *)&v157 + 2) = v106;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d", COERCE_DOUBLE(v156), 30, LODWORD(v151), LODWORD(v152[0]));
      v108 = (uint8_t *)v107;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v107);
      if (v108 != buf)
        free(v108);
    }
  }
  if (v10 <= 2)
  {
    if (v10 <= 0)
    {
      v15 = 0;
      *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
      *(_BYTE *)(a1 + 441) = 1;
      *(_BYTE *)(a1 + 11) = 0;
      return v15;
    }
    return 0;
  }
  if (*a4 && !*(_BYTE *)(a1 + 11) || *(double *)(a1 + 184) < 0.0)
    *(_BYTE *)(a1 + 441) = 1;
  if (*(double *)(a1 + 176) < 0.0)
  {
    if (!*(_BYTE *)(a1 + 472))
      return 0;
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v16 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(double *)(a1 + 176);
      *(_DWORD *)buf = 134217984;
      v168 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] fLastAccelTime,%f", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v97 = qword_10229FD38;
    v109 = *(_QWORD *)(a1 + 176);
    *(_DWORD *)v156 = 134217984;
    *(_QWORD *)&v156[4] = v109;
    LODWORD(v150) = 12;
    v149 = v156;
    v98 = "[CompassIntoKF] fLastAccelTime,%f";
    goto LABEL_176;
  }
  if (*a3)
  {
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v18 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] magneticFieldAdjusted!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_10217A2B8);
        *(_WORD *)v156 = 0;
        LODWORD(v150) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[CompassIntoKF] magneticFieldAdjusted!", v156, *(_QWORD *)&v150);
        v113 = (uint8_t *)v112;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v112);
        if (v113 != buf)
          free(v113);
      }
    }
    v15 = 0;
    *(_WORD *)(a1 + 440) = 1;
    *(_DWORD *)(a1 + 432) = 0;
    return v15;
  }
  v20 = *(double *)(a1 + 16);
  v21 = *(double *)(a1 + 24);
  v22 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  v23 = *(double *)(a1 + 40);
  v24 = v23 * (v21 + v21) - v20 * v22;
  v25 = -(v23 * (v20 + v20)) - v21 * v22;
  v166[0] = v24;
  v166[1] = v25;
  v26 = v20 * (v20 + v20) + -1.0 + v21 * (v21 + v21);
  v166[2] = v26;
  v27 = v25 * *(float *)(a1 + 160) + *(float *)(a1 + 156) * v24 + *(float *)(a1 + 164) * v26;
  *(float *)&v20 = *(float *)(a1 + 436) + (float)(v27 * 57.296) * *(double *)(a1 + 488);
  *(_DWORD *)(a1 + 436) = LODWORD(v20);
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217A278);
    v28 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      v29 = *(float *)(a1 + 436);
      *(_DWORD *)buf = 134218240;
      v168 = v27;
      v169 = 2048;
      *(double *)v170 = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "rotAroundGrav, %.3f, sum, %.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v114 = *(float *)(a1 + 436);
      *(_DWORD *)v156 = 134218240;
      *(double *)&v156[4] = v27;
      *(_WORD *)&v156[12] = 2048;
      *(double *)&v156[14] = v114;
      LODWORD(v150) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "rotAroundGrav, %.3f, sum, %.3f", COERCE_DOUBLE(v156), v150);
      v116 = (uint8_t *)v115;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v115);
      if (v116 != buf)
        free(v116);
    }
  }
  v30 = *(_QWORD *)(a1 + 584);
  v31 = 0.0;
  if (v30)
  {
    v32 = *(float *)(a1 + 536);
    v33 = v32 / (float)v30;
    if (v30 != 1)
    {
      v34 = (float)((float)v30 * *(float *)(a1 + 540)) - (float)(v32 * v32);
      if (v34 >= 0.0)
        v31 = v34 / (float)((v30 - 1) * v30);
    }
  }
  else
  {
    v33 = 0.0;
  }
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v35 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218240;
      v168 = v33;
      v169 = 2048;
      *(double *)v170 = v31;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      *(_DWORD *)v156 = 134218240;
      *(double *)&v156[4] = v33;
      *(_WORD *)&v156[12] = 2048;
      *(double *)&v156[14] = v31;
      LODWORD(v150) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f", COERCE_DOUBLE(v156), v150);
      v118 = (uint8_t *)v117;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v117);
      if (v118 != buf)
        free(v118);
    }
  }
  *(_DWORD *)(a1 + 364) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 368) = *((_DWORD *)a2 + 1);
  *(_DWORD *)(a1 + 372) = *((_DWORD *)a2 + 2);
  if (!*a4 && *(_BYTE *)(a1 + 440))
  {
    v15 = 0;
    if (v31 >= 2.25 || fabsf(*(float *)(a1 + 436)) <= 90.0 || v33 >= 1.57079633)
      return v15;
    sub_10007D084(a1 + 208, (float *)a2 + 11);
    sub_10007D084(a1 + 280, (float *)a2 + 12);
    v60 = *(_QWORD *)(a1 + 272);
    if (v60 < *(_QWORD *)(a1 + 216))
      return 0;
    v61 = 0.0;
    v62 = 0.0;
    if (v60)
      v62 = *(float *)(a1 + 224) / (float)v60;
    v63 = *(_QWORD *)(a1 + 344);
    if (v63)
      v61 = *(float *)(a1 + 296) / (float)v63;
    v64 = *(float *)(a1 + 424);
    v65 = 0.0;
    v66 = 0.0;
    if (v60 >= 2)
    {
      v67 = (float)((float)v60 * *(float *)(a1 + 228)) - (float)(*(float *)(a1 + 224) * *(float *)(a1 + 224));
      if (v67 >= 0.0)
        v66 = v67 / (float)((v60 - 1) * v60);
    }
    v68 = vabds_f32(v62, v64);
    if (v63 >= 2)
    {
      v69 = (float)((float)v63 * *(float *)(a1 + 300)) - (float)(*(float *)(a1 + 296) * *(float *)(a1 + 296));
      v70 = (v63 - 1) * v63;
      if (v69 >= 0.0)
        v65 = v69 / (float)(unint64_t)v70;
      else
        v65 = 0.0;
    }
    v71 = vabds_f32(v61, *(float *)(a1 + 428));
    v72 = v68 / v64;
    if (*(_BYTE *)(a1 + 472))
    {
      *(float *)v152 = v71;
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v73 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        v168 = v72;
        v169 = 2048;
        *(double *)v170 = *(float *)v152;
        *(_WORD *)&v170[8] = 2048;
        v171 = v66;
        v172 = 2048;
        *(double *)v173 = v65;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "FieldDiff, %.3f, %.3f, %.3f, %.3f", buf, 0x2Au);
      }
      v74 = sub_1001BFF7C(115, 2);
      v71 = *(float *)v152;
      if (v74)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        *(_DWORD *)v156 = 134218752;
        *(double *)&v156[4] = v72;
        *(_WORD *)&v156[12] = 2048;
        *(double *)&v156[14] = *(float *)v152;
        *(_WORD *)&v156[22] = 2048;
        v157 = v66;
        v158 = 2048;
        *(double *)v159 = v65;
        LODWORD(v150) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "FieldDiff, %.3f, %.3f, %.3f, %.3f", COERCE_DOUBLE(v156), v150, v151, v152[0]);
        v146 = (uint8_t *)v145;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v145);
        if (v146 != buf)
          free(v146);
        v71 = *(float *)v152;
      }
    }
    if (v72 < 0.07 && v71 < 4.0 && v66 < 2.25 && v65 < 4.0)
    {
      *(_DWORD *)(a1 + 432) = 0;
    }
    else
    {
      v78 = *(_DWORD *)(a1 + 432);
      *(_DWORD *)(a1 + 432) = v78 + 1;
      if (v78 < 2)
      {
        sub_10041250C((_QWORD *)(a1 + 208));
        sub_10041250C((_QWORD *)(a1 + 280));
        if (!*(_BYTE *)(a1 + 472))
          return 0;
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v99 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          v100 = *(_DWORD *)(a1 + 432);
          *(_DWORD *)buf = 67109120;
          LODWORD(v168) = v100;
          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "Checking again for magField. checkcount, %d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v97 = qword_10229FD28;
        v101 = *(_DWORD *)(a1 + 432);
        *(_DWORD *)v156 = 67109120;
        *(_DWORD *)&v156[4] = v101;
        LODWORD(v150) = 8;
        v149 = v156;
        v98 = "Checking again for magField. checkcount, %d";
LABEL_176:
        v103 = 2;
LABEL_177:
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v97, v103, v98, v149, *(_QWORD *)&v150);
        v111 = (uint8_t *)v110;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v110);
        if (v111 != buf)
          free(v111);
        return 0;
      }
      if (*(_BYTE *)(a1 + 472))
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v79 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "Aborted yawUpdate.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_10217A278);
          *(_WORD *)v156 = 0;
          LODWORD(v150) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Aborted yawUpdate.", v156, *(_QWORD *)&v150);
          v148 = (uint8_t *)v147;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v147);
          if (v148 != buf)
            free(v148);
        }
      }
      sub_100C17BF8(a1);
    }
  }
  v36 = (float32x2_t *)(a1 + 364);
  if (*(_BYTE *)(a1 + 441))
  {
    if (!*a4)
    {
      *(_QWORD *)(a1 + 424) = *(uint64_t *)((char *)a2 + 44);
      *(float64x2_t *)v160 = vcvtq_f64_f32(*v36);
      *(double *)&v160[16] = *(float *)(a1 + 372);
      sub_100A002A8((uint64_t)v156, a1 + 16);
      sub_100C15A90((double *)v156, (double *)v160, (double *)(a1 + 400));
      v81 = *(double *)(a1 + 400);
      v80 = *(double *)(a1 + 408);
      v82 = *(double *)(a1 + 416);
      v83 = sqrt(v80 * v80 + v81 * v81 + v82 * v82);
      if (v83 <= 0.0)
      {
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v95 = qword_10229FD28;
        if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "Warning: Compass outputs field magnitude 0.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD20 != -1)
            dispatch_once(&qword_10229FD20, &stru_10217A278);
          *(_WORD *)v164 = 0;
          LODWORD(v150) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Warning: Compass outputs field magnitude 0.", v164, *(_QWORD *)&v150);
          v133 = (uint8_t *)v132;
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v132);
          if (v133 != buf)
            free(v133);
        }
        *(_QWORD *)(a1 + 184) = 0xBFF0000000000000;
      }
      else
      {
        *(double *)(a1 + 448) = v81 / v83;
        *(double *)(a1 + 456) = v80 / v83;
        *(double *)(a1 + 464) = v82 / v83;
        if (*(_BYTE *)(a1 + 472))
        {
          if (qword_10229FD30 != -1)
            dispatch_once(&qword_10229FD30, &stru_10217A2B8);
          v84 = qword_10229FD38;
          if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
          {
            v85 = *(double *)(a1 + 448);
            v86 = *(_QWORD *)(a1 + 456);
            v87 = *(double *)(a1 + 464);
            *(_DWORD *)buf = 134218496;
            v168 = v85;
            v169 = 2048;
            *(_QWORD *)v170 = v86;
            *(_WORD *)&v170[8] = 2048;
            v171 = v87;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEBUG, "[!!!CompassInertialReference] x,%f,y,%f,z,%f", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD30 != -1)
              dispatch_once(&qword_10229FD30, &stru_10217A2B8);
            v134 = *(_QWORD *)(a1 + 448);
            v135 = *(_QWORD *)(a1 + 456);
            v136 = *(_QWORD *)(a1 + 464);
            *(_DWORD *)v164 = 134218496;
            *(_QWORD *)&v164[4] = v134;
            *(_WORD *)&v164[12] = 2048;
            *(_QWORD *)&v164[14] = v135;
            *(_WORD *)&v164[22] = 2048;
            v165 = v136;
            LODWORD(v150) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[!!!CompassInertialReference] x,%f,y,%f,z,%f", COERCE_DOUBLE(v164), v150, v151);
            v138 = (uint8_t *)v137;
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v137);
            if (v138 != buf)
              free(v138);
          }
        }
        *(double *)(a1 + 184) = *a5;
        *(double *)(a1 + 200) = *a5;
      }
      return 0;
    }
    if (!*(_BYTE *)(a1 + 11))
    {
      v88 = sub_100A00188((double *)(a1 + 16));
      v155[0] = -v88;
      v89 = sub_100A001A4((double *)(a1 + 16));
      v155[1] = -v89;
      v90 = sub_100A001C0((double *)(a1 + 16));
      v155[2] = -v90;
      sub_100A00380(v155);
      v153 = *a2;
      v154 = *((_DWORD *)a2 + 2);
      sub_100A00340((float *)v152 + 1, v155, (float *)&v153);
      sub_100A00380((float *)v152 + 1);
      sub_100A00340((float *)&v153, (float *)v152 + 1, v155);
      sub_100A004C0((double *)v156, (float *)&v153, (float *)v152 + 1, v155);
      sub_100A000C8(a1 + 16, (uint64_t *)v156);
      *(_BYTE *)(a1 + 11) = 1;
      *(double *)(a1 + 184) = *a5;
      *(_BYTE *)(a1 + 441) = 0;
      sub_100A002A8((uint64_t)v164, a1 + 16);
      v162 = vcvtq_f64_f32(*v36);
      v163 = *(float *)(a1 + 372);
      sub_100C15A90((double *)v164, v162.f64, (double *)(a1 + 376));
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v91 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
      {
        v92 = *(double *)(a1 + 376);
        v93 = *(_QWORD *)(a1 + 384);
        v94 = *(double *)(a1 + 392);
        *(_DWORD *)buf = 134218496;
        v168 = v92;
        v169 = 2048;
        *(_QWORD *)v170 = v93;
        *(_WORD *)&v170[8] = 2048;
        v171 = v94;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEBUG, "fCorrected, %.3f, %.3f, %.3f", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10217A278);
        v127 = *(_QWORD *)(a1 + 376);
        v128 = *(_QWORD *)(a1 + 384);
        v129 = *(_QWORD *)(a1 + 392);
        *(_DWORD *)v160 = 134218496;
        *(_QWORD *)&v160[4] = v127;
        *(_WORD *)&v160[12] = 2048;
        *(_QWORD *)&v160[14] = v128;
        *(_WORD *)&v160[22] = 2048;
        v161 = v129;
        LODWORD(v150) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "fCorrected, %.3f, %.3f, %.3f", COERCE_DOUBLE(v160), v150, v151);
        v131 = (uint8_t *)v130;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v130);
        if (v131 != buf)
          free(v131);
      }
      v15 = 1;
      *(_BYTE *)(a1 + 9) = 1;
      *(_QWORD *)(a1 + 456) = 0;
      *(_QWORD *)(a1 + 464) = 0;
      *(_QWORD *)(a1 + 448) = 0x3FF0000000000000;
      *(double *)(a1 + 200) = *a5;
      return v15;
    }
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v37 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
      {
        v38 = *(double *)(a1 + 448);
        v39 = *(_QWORD *)(a1 + 456);
        v40 = *(double *)(a1 + 464);
        v41 = *a5;
        *(_DWORD *)buf = 134219008;
        v168 = v38;
        v169 = 2048;
        *(_QWORD *)v170 = v39;
        *(_WORD *)&v170[8] = 2048;
        v171 = v40;
        v172 = 1024;
        *(_DWORD *)v173 = v10;
        *(_WORD *)&v173[4] = 2048;
        *(double *)&v173[6] = v41;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_10217A2B8);
        v121 = *(_QWORD *)(a1 + 448);
        v122 = *(_QWORD *)(a1 + 456);
        v123 = *(double *)(a1 + 464);
        v124 = *a5;
        *(_DWORD *)v156 = 134219008;
        *(_QWORD *)&v156[4] = v121;
        *(_WORD *)&v156[12] = 2048;
        *(_QWORD *)&v156[14] = v122;
        *(_WORD *)&v156[22] = 2048;
        v157 = v123;
        v158 = 1024;
        *(_DWORD *)v159 = v10;
        *(_WORD *)&v159[4] = 2048;
        *(double *)&v159[6] = v124;
        LODWORD(v150) = 48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf", COERCE_DOUBLE(v156), v150, v151, LODWORD(v152[0]), v152[1]);
        v126 = (uint8_t *)v125;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v125);
        if (v126 != buf)
          free(v126);
      }
    }
  }
  if (!*(_BYTE *)(a1 + 440))
    return 0;
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10217A278);
    v42 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "UpdatingYaw!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      *(_WORD *)v156 = 0;
      LODWORD(v150) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "UpdatingYaw!", v156, *(_QWORD *)&v150);
      v120 = (uint8_t *)v119;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v119);
      if (v120 != buf)
        free(v120);
    }
  }
  v15 = 0;
  if (v33 <= 5.0 && v31 <= 8.0)
  {
    if (*a5 < *(double *)(a1 + 168))
      return 0;
    *(double *)(a1 + 184) = *a5;
    if (*(_BYTE *)(a1 + 472))
    {
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v43 = qword_10229FD38;
      if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
      {
        v44 = *(float *)(a1 + 364);
        v45 = *(float *)(a1 + 368);
        v46 = *(float *)(a1 + 372);
        v47 = *a5;
        *(_DWORD *)buf = 134218752;
        v168 = v44;
        v169 = 2048;
        *(double *)v170 = v45;
        *(_WORD *)&v170[8] = 2048;
        v171 = v46;
        v172 = 2048;
        *(double *)v173 = v47;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD30 != -1)
          dispatch_once(&qword_10229FD30, &stru_10217A2B8);
        v139 = *(float *)(a1 + 364);
        v140 = *(float *)(a1 + 368);
        v141 = *(float *)(a1 + 372);
        v142 = *a5;
        *(_DWORD *)v156 = 134218752;
        *(double *)&v156[4] = v139;
        *(_WORD *)&v156[12] = 2048;
        *(double *)&v156[14] = v140;
        *(_WORD *)&v156[22] = 2048;
        v157 = v141;
        v158 = 2048;
        *(double *)v159 = v142;
        LODWORD(v150) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf", COERCE_DOUBLE(v156), v150, v151, v152[0]);
        v144 = (uint8_t *)v143;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const BOOL &, const BOOL &, const CFTimeInterval &)", "%s\n", v143);
        if (v144 != buf)
          free(v144);
      }
    }
    v48 = *(float *)(a1 + 364);
    v49 = *(float *)(a1 + 368);
    v50 = *(float *)(a1 + 372);
    v51 = sqrt(v49 * v49 + v48 * v48 + v50 * v50);
    if (v51 <= 0.0)
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v96 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_INFO, "Warning: Hey! Compass outputs field magnitude 0.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v97 = qword_10229FD28;
      *(_WORD *)v156 = 0;
      LODWORD(v150) = 2;
      v149 = v156;
      v98 = "Warning: Hey! Compass outputs field magnitude 0.";
    }
    else
    {
      v52 = v48 / v51;
      v53 = v49 / v51;
      *(double *)v156 = v52;
      *(double *)&v156[8] = v53;
      v54 = v50 / v51;
      *(double *)&v156[16] = v54;
      v55 = *a4;
      if (!*a4)
        goto LABEL_80;
      v56 = 0;
      v57 = -(v53 * v25 + v52 * v24 + v54 * v26);
      do
      {
        *(double *)&v156[v56 * 8] = *(double *)&v156[v56 * 8] + v57 * v166[v56];
        ++v56;
      }
      while (v56 != 3);
      v58 = sqrt(*(double *)&v156[8] * *(double *)&v156[8]+ *(double *)v156 * *(double *)v156+ *(double *)&v156[16] * *(double *)&v156[16]);
      if (v58 > 0.001)
      {
        *(double *)v156 = *(double *)v156 / v58;
        *(double *)&v156[8] = *(double *)&v156[8] / v58;
        *(double *)&v156[16] = *(double *)&v156[16] / v58;
LABEL_80:
        v59 = sub_100C198C0(a1, (double *)v156, v10, v55 != 0, 0.00000399999999);
        sub_100A002A8((uint64_t)buf, a1 + 16);
        *(float64x2_t *)v164 = vcvtq_f64_f32(*v36);
        *(double *)&v164[16] = *(float *)(a1 + 372);
        sub_100C15A90((double *)buf, (double *)v164, (double *)(a1 + 376));
        v15 = v59 >= 0.1;
        if (v59 < 0.1)
        {
          sub_100C17BF8(a1);
          *(_BYTE *)(a1 + 440) = 0;
        }
        return v15;
      }
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v102 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "Warning: Hey! Compass outputs field magnitude 0.", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 0;
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10217A278);
      v97 = qword_10229FD28;
      *(_WORD *)v164 = 0;
      LODWORD(v150) = 2;
      v149 = v164;
      v98 = "Warning: Hey! Compass outputs field magnitude 0.";
    }
    v103 = 1;
    goto LABEL_177;
  }
  return v15;
}

float sub_100C198C0(uint64_t a1, double *a2, int a3, int a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;
  unsigned int v22;
  double v23;
  float v24;
  uint64_t i;
  double v26;
  double v27;
  float v28;
  float v29;
  float v30;
  float v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  float v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  double v48;
  double v49;
  double v50;
  uint64_t v52;
  const char *v53;
  uint8_t *v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  const char *v59;
  uint8_t *v60;
  uint64_t v61;
  const char *v62;
  uint8_t *v63;
  double v64;
  double v65;
  const char *v66;
  uint8_t *v67;
  double v68;
  double v69;
  double v70;
  int v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  _BYTE v78[18];
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  uint8_t buf[4];
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  _BYTE v96[18];
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  _BYTE v107[48];
  double v108;
  double v109;
  double v110;
  _DWORD v111[3];
  _DWORD v112[3];
  _BYTE v113[36];
  uint64_t v114;
  _DWORD v115[9];
  double v116;
  double v117;
  double v118;

  *(_BYTE *)(a1 + 9) = 1;
  sub_100C15A90((double *)(a1 + 16), (double *)(a1 + 448), &v116);
  v10 = 0;
  v11 = 0;
  v12 = *(double *)(a1 + 40);
  v13 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
  v15 = *(double *)(a1 + 16);
  v14 = *(double *)(a1 + 24);
  v16 = v12 * (v14 + v14) - v15 * v13;
  v17 = -(v12 * (v15 + v15));
  v18 = v15 * (v15 + v15) + -1.0;
  v19 = v116;
  v20 = v117;
  *(float *)&v21 = v116;
  *(float *)&v22 = v117;
  v23 = v118;
  v24 = v118;
  v115[0] = 0;
  *(float *)&v115[1] = v24;
  *(float *)&v115[2] = -*(float *)&v22;
  *(float *)&v69 = -*(float *)&v22;
  *((float *)&v68 + 1) = -v24;
  *(float *)&v115[3] = -v24;
  v115[4] = 0;
  v115[5] = v21;
  v115[6] = v22;
  v70 = COERCE_DOUBLE(__PAIR64__(v22, v21));
  *((float *)&v69 + 1) = -*(float *)&v21;
  *(float *)&v115[7] = -*(float *)&v21;
  v115[8] = 0;
  do
  {
    for (i = 0; i != 9; i += 3)
      *(_DWORD *)&v113[v10 * 4 + i * 4] = v115[v10 + i];
    ++v11;
    ++v10;
  }
  while (v11 != 3);
  v26 = v17 - v14 * v13;
  v27 = v18 + v14 * (v14 + v14);
  bzero(&v114, 0x24uLL);
  v28 = a5;
  *(float *)v112 = v28;
  *(float *)&v112[1] = v28;
  *(float *)&v112[2] = v28;
  v29 = *a2 - v19;
  v30 = a2[1] - v20;
  *(float *)v111 = v29;
  *(float *)&v111[1] = v30;
  v31 = a2[2] - v23;
  *(float *)&v111[2] = v31;
  sub_100AD7F9C(&v108, (uint64_t *)(a1 + 112), (uint64_t)v113, (uint64_t)v112, (uint64_t)v111, 6, 3, (uint64_t)v107);
  v32 = v26 * v109 + v108 * v16 + v110 * v27;
  v33 = v26 * v32;
  v34 = v16 * v32;
  v108 = v34;
  v109 = v33;
  v35 = v27 * v32;
  v36 = v33;
  v110 = v35;
  v37 = sqrt(v33 * v33 + v34 * v34 + v35 * v35) * 57.2957802;
  if (*(_BYTE *)(a1 + 472))
  {
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v38 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v39 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134218752;
      v90 = v19;
      v91 = 2048;
      v92 = v20;
      v93 = 2048;
      v94 = v23;
      v95 = 2048;
      *(_QWORD *)v96 = v39;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "[ExpectedCompass] %f,%f,%f,%f", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v52 = *(_QWORD *)(a1 + 184);
      v71 = 134218752;
      v72 = v19;
      v73 = 2048;
      v74 = v20;
      v75 = 2048;
      v76 = v23;
      v77 = 2048;
      *(_QWORD *)v78 = v52;
      LODWORD(v68) = 42;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[ExpectedCompass] %f,%f,%f,%f", COERCE_DOUBLE(&v71), v68, v69, v70);
      v54 = (uint8_t *)v53;
      sub_100512490("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v53);
      if (v54 != buf)
        free(v54);
    }
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v40 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v41 = *a2;
      v42 = a2[1];
      v43 = a2[2];
      v44 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134219008;
      v90 = v41;
      v91 = 2048;
      v92 = v42;
      v93 = 2048;
      v94 = v43;
      v95 = 1024;
      *(_DWORD *)v96 = a3;
      *(_WORD *)&v96[4] = 2048;
      *(_QWORD *)&v96[6] = v44;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "[TrueCompass] %f,%f,%f,%d,%f", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v55 = *a2;
      v56 = a2[1];
      v57 = a2[2];
      v58 = *(_QWORD *)(a1 + 184);
      v71 = 134219008;
      v72 = v55;
      v73 = 2048;
      v74 = v56;
      v75 = 2048;
      v76 = v57;
      v77 = 1024;
      *(_DWORD *)v78 = a3;
      *(_WORD *)&v78[4] = 2048;
      *(_QWORD *)&v78[6] = v58;
      LODWORD(v68) = 48;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[TrueCompass] %f,%f,%f,%d,%f", COERCE_DOUBLE(&v71), v68, v69, LODWORD(v70));
      v60 = (uint8_t *)v59;
      sub_100512490("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v59);
      if (v60 != buf)
        free(v60);
    }
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v45 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v46 = *(_QWORD *)(a1 + 184);
      *(_DWORD *)buf = 134220288;
      v90 = 0.0;
      v91 = 2048;
      v92 = v24;
      v93 = 2048;
      v94 = *(float *)&v69;
      v95 = 2048;
      *(double *)v96 = *((float *)&v68 + 1);
      *(_WORD *)&v96[8] = 2048;
      *(_QWORD *)&v96[10] = 0;
      v97 = 2048;
      v98 = *(float *)&v70;
      v99 = 2048;
      v100 = *((float *)&v70 + 1);
      v101 = 2048;
      v102 = *((float *)&v69 + 1);
      v103 = 2048;
      v104 = 0;
      v105 = 2048;
      v106 = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f", buf, 0x66u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v61 = *(_QWORD *)(a1 + 184);
      v71 = 134220288;
      v72 = 0.0;
      v73 = 2048;
      v74 = v24;
      v75 = 2048;
      v76 = *(float *)&v69;
      v77 = 2048;
      *(double *)v78 = *((float *)&v68 + 1);
      *(_WORD *)&v78[8] = 2048;
      *(_QWORD *)&v78[10] = 0;
      v79 = 2048;
      v80 = *(float *)&v70;
      v81 = 2048;
      v82 = *((float *)&v70 + 1);
      v83 = 2048;
      v84 = *((float *)&v69 + 1);
      v85 = 2048;
      v86 = 0;
      v87 = 2048;
      v88 = v61;
      LODWORD(v68) = 102;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f", COERCE_DOUBLE(&v71), v68, v69, v70);
      v63 = (uint8_t *)v62;
      sub_100512490("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v62);
      if (v63 != buf)
        free(v63);
    }
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_10217A2B8);
    v47 = qword_10229FD38;
    if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_DEBUG))
    {
      v48 = fabsf(*(float *)(a1 + 436));
      v49 = *(double *)(a1 + 184);
      *(_DWORD *)buf = 134219264;
      v90 = v34;
      v91 = 2048;
      v92 = v36;
      v93 = 2048;
      v94 = v35;
      v95 = 2048;
      *(double *)v96 = v37;
      *(_WORD *)&v96[8] = 2048;
      *(double *)&v96[10] = v48;
      v97 = 2048;
      v98 = v49;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_10217A2B8);
      v64 = fabsf(*(float *)(a1 + 436));
      v65 = *(double *)(a1 + 184);
      v71 = 134219264;
      v72 = v34;
      v73 = 2048;
      v74 = v36;
      v75 = 2048;
      v76 = v35;
      v77 = 2048;
      *(double *)v78 = v37;
      *(_WORD *)&v78[8] = 2048;
      *(double *)&v78[10] = v64;
      v79 = 2048;
      v80 = v65;
      LODWORD(v68) = 62;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 2, "[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f", COERCE_DOUBLE(&v71), v68, v69, v70);
      v67 = (uint8_t *)v66;
      sub_100512490("Generic", 1, 0, 2, "float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, BOOL)", "%s\n", v66);
      if (v67 != buf)
        free(v67);
    }
  }
  if (a4 && v37 > 3.0)
  {
    v50 = (float)(sqrtf(v37) / v37);
    v108 = v34 * v50;
    v109 = v36 * v50;
    v110 = v35 * v50;
  }
  sub_100C17B88(a1, &v108);
  return v37;
}

BOOL sub_100C1A264(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  _BOOL8 result;

  v2 = *(double *)(a1 + 176);
  if (v2 <= 0.0)
  {
    *(_QWORD *)a2 = 0;
    v10 = 0.0;
  }
  else
  {
    v3 = *(double *)(a1 + 40);
    v4 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
    v5 = *(double *)(a1 + 16);
    v6 = *(double *)(a1 + 24);
    v7 = v3 * (v6 + v6) - v5 * v4;
    v8 = -(v3 * (v5 + v5)) - v6 * v4;
    v9 = v5 * (v5 + v5) + -1.0 + v6 * (v6 + v6);
    *(float *)&v5 = *(float *)(a1 + 352) - v7;
    *(_DWORD *)a2 = LODWORD(v5);
    *(float *)&v8 = *(float *)(a1 + 356) - v8;
    *(_DWORD *)(a2 + 4) = LODWORD(v8);
    v10 = *(float *)(a1 + 360) - v9;
  }
  result = v2 > 0.0;
  *(float *)(a2 + 8) = v10;
  return result;
}

uint64_t sub_100C1A2F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 10);
}

void sub_100C1A2FC(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100C1A328(id a1)
{
  qword_10229FD38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

void sub_100C1C710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  sub_100261F44((uint64_t)&a24);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

id sub_100C1C754(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  id result;
  uint64_t (*v9)(void);
  NSObject *v10;
  int v11;
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  id v16;

  if (a3)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = objc_msgSend(objc_msgSend(a3, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,read error\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    }
    v6 = qword_1022A0088;
    if (os_signpost_enabled((os_log_t)qword_1022A0088))
    {
      v7 = objc_msgSend(objc_msgSend(a3, "description"), "UTF8String");
      v11 = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#nilr,#supl,#udp,read error", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,read error\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v11, 0x1Cu);
    }
    result = objc_msgSend(*(id *)(a1 + 32), "statusHandler");
    if (result)
    {
      v9 = (uint64_t (*)(void))*((_QWORD *)objc_msgSend(*(id *)(a1 + 32), "statusHandler") + 2);
      return (id)v9();
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    v10 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,received udp packet\"}", (uint8_t *)&v11, 0x12u);
    }
    result = objc_msgSend(*(id *)(a1 + 32), "readHandler");
    if (result)
    {
      v9 = (uint64_t (*)(void))*((_QWORD *)objc_msgSend(*(id *)(a1 + 32), "readHandler") + 2);
      return (id)v9();
    }
  }
  return result;
}

uint64_t sub_100C1CA54(uint64_t a1, int a2, int a3)
{
  NSObject *v4;
  int v5;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 76) = a2;
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  v4 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 76);
    *(_DWORD *)buf = 67109120;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,#udp,instance,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    v7 = *(_DWORD *)(a1 + 76);
    v10[0] = 67109120;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#nilr,#supl,#udp,instance,%d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "CLUdpListener::CLUdpListener(SimInstance, int)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return a1;
}

void sub_100C1CC18(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_QWORD *)v1[8];
  if (v3 == v1 + 5)
  {
    v4 = 4;
    v3 = v1 + 5;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)v1[4];
  if (v5 == v1 + 1)
  {
    v6 = 4;
    v5 = v1 + 1;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100C1CC8C(uint64_t a1, uint64_t a2)
{
  return sub_100C1CC94((_QWORD *)(a1 + 8), a2);
}

_QWORD *sub_100C1CC94(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  sub_100270E34((uint64_t)v6, a2);
  sub_100C1D944(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_100C1CD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  CLUDPListenerHelper *v6;
  CLUDPListenerHelper *v7;
  void *v8;
  void *__p[2];
  uint64_t v10;
  _QWORD v11[5];
  _QWORD v12[5];
  uint64_t buf;
  __int16 v14;
  const char *v15;

  if (*(int *)(a1 + 72) <= 0)
  {
    sub_101922C2C();
    goto LABEL_17;
  }
  if (*(_QWORD *)a1)
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289026;
      v14 = 2082;
      v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,udp helper already instantiated\"}", (uint8_t *)&buf, 0x12u);
    }
    return;
  }
  v6 = -[CLUDPListenerHelper initWith:conformanceMode:]([CLUDPListenerHelper alloc], "initWith:conformanceMode:", *(unsigned int *)(a1 + 72), a2);
  *(_QWORD *)a1 = v6;
  if (!v6)
  {
    sub_101922D98();
LABEL_17:
    __break(1u);
  }
  v7 = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100C1CF40;
  v12[3] = &unk_10217A2D8;
  v12[4] = a1;
  -[CLUDPListenerHelper setReadHandler:](v6, "setReadHandler:", v12);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100C1D32C;
  v11[3] = &unk_102130FC8;
  v11[4] = a1;
  -[CLUDPListenerHelper setStatusHandler:](v7, "setStatusHandler:", v11);
  v8 = *(void **)a1;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v10 = *(_QWORD *)(a3 + 16);
  }
  objc_msgSend(v8, "start:", __p);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  objc_msgSend(*(id *)a1, "startUDPListner", __p[0], __p[1], v10);
}

void sub_100C1CF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C1CF40(uint64_t a1, void *a2)
{
  uint64_t v2;
  size_t v4;
  id v5;
  uint64_t v6;
  void *i;
  NSObject *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  void *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *__p;
  void *__dst;
  uint64_t v29;
  _BYTE v30[128];
  uint64_t buf;
  __int16 v32;
  const char *v33;
  __int16 v34;
  id v35;
  __int16 v36;
  size_t v37;
  _BYTE v38[128];

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v2 + 32))
  {
    __p = 0;
    __dst = 0;
    v29 = 0;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v4 = 0;
    v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v6)
            objc_enumerationMutation(a2);
          v4 += (size_t)objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i), "length");
        }
        v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v23, v38, 16);
      }
      while (v5);
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      v9 = objc_msgSend(a2, "count");
      buf = 68289538;
      v32 = 2082;
      v33 = "";
      v34 = 2050;
      v35 = v9;
      v36 = 2050;
      v37 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,datagrams\", \"datagrams\":%{public}lu, \"bytes\":%{public}lu}", (uint8_t *)&buf, 0x26u);
    }
    sub_100054CE0((unint64_t *)&__p, v4);
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v19, v30, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v20;
      do
      {
        for (j = 0; j != v10; j = (char *)j + 1)
        {
          if (*(_QWORD *)v20 != v11)
            objc_enumerationMutation(a2);
          v13 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)j);
          v14 = (char *)objc_msgSend(v13, "bytes");
          v15 = (char *)objc_msgSend(v13, "length");
          sub_100C1DAB8((uint64_t)&__p, (char *)__dst, v14, &v15[(_QWORD)v14], (int64_t)v15);
        }
        v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v19, v30, 16);
      }
      while (v10);
    }
    v16 = *(_QWORD *)(v2 + 32);
    if (!v16)
      sub_10025FD1C();
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 48))(v16, &__p);
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    v17 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      buf = 68289026;
      v32 = 2082;
      v33 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,no read handler registered\"}", (uint8_t *)&buf, 0x12u);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    }
    v18 = qword_1022A0088;
    if (os_signpost_enabled((os_log_t)qword_1022A0088))
    {
      buf = 68289026;
      v32 = 2082;
      v33 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#nilr,#supl,#udp,no read handler registered", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,no read handler registered\"}", (uint8_t *)&buf, 0x12u);
    }
  }
}

void sub_100C1D2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C1D32C(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[4];
  uint8_t buf[4];
  unsigned int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  id v26;

  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
    v4 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,statusNotNull\"}", buf, 0x12u);
    }
    if (objc_msgSend(a2, "code"))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217A2F8);
      v5 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
      {
        v6 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
        *(_DWORD *)buf = 68289282;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2082;
        v26 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,#udp,status\", \"badStatus\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10217A2F8);
      }
      v7 = qword_1022A0088;
      if (!os_signpost_enabled((os_log_t)qword_1022A0088))
        goto LABEL_16;
      v8 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
      *(_DWORD *)buf = 68289282;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#nilr,#supl,#udp,status", "{\"msg%{public}.0s\":\"#Warning,#nilr,#supl,#udp,status\", \"badStatus\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
LABEL_16:
    v9 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v10 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
      *(_DWORD *)buf = 68289282;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,status\", \"goodStatus\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    if (*(_QWORD *)(v3 + 64))
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217A2F8);
      v11 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        v12 = objc_msgSend(a2, "code");
        *(_DWORD *)buf = 67109120;
        v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#nilr,#supl,#udp,statusCode,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10217A2F8);
        v17 = qword_1022A0088;
        v20[0] = 67109120;
        v20[1] = objc_msgSend(a2, "code");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "#nilr,#supl,#udp,statusCode,%d", v20);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLUdpListener::start(BOOL, std::string)_block_invoke", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      *(_DWORD *)buf = objc_msgSend(a2, "code") != 0;
      v16 = *(_QWORD *)(v3 + 64);
      if (!v16)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 48))(v16, buf);
    }
    else
    {
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217A2F8);
      v15 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,no event handler registered\"}", buf, 0x12u);
      }
    }
    return;
  }
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  v13 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 68289026;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,statusNull\"}", buf, 0x12u);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  }
  v14 = qword_1022A0088;
  if (os_signpost_enabled((os_log_t)qword_1022A0088))
  {
    *(_DWORD *)buf = 68289026;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#nilr,#supl,#udp,statusNull", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,statusNull\"}", buf, 0x12u);
  }
}

void sub_100C1D918(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

_QWORD *sub_100C1D944(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[3];

  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100C1DAAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

char *sub_100C1DAB8(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_100259694();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

BOOL sub_100C1DCA0()
{
  return os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_FAULT);
}

BOOL sub_100C1DCB4()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 136), OS_LOG_TYPE_INFO);
}

BOOL sub_100C1DCC4()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 136));
}

BOOL sub_100C1DCF8()
{
  return (sub_1001B7910() & 3) != 0;
}

void sub_100C1DD14()
{
  NSObject *v0;
  char *v1;
  _WORD v2[8];
  uint8_t buf[1640];

  if ((sub_1001B7910() & 2) != 0)
  {
    qword_1023113D8 = sub_1000A652C(0);
  }
  else if ((sub_1001B7910() & 3) != 0)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217A8F8);
    v0 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "CLMotionCoprocessorInterface supported but not created.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217A8F8);
      v2[0] = 0;
      v1 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "CLMotionCoprocessorInterface supported but not created.", v2, 2);
      sub_100512490("Generic", 1, 0, 0, "static void CLMotionCoprocessorInterface::create(BOOL)", "%s\n", v1);
      if (v1 != (char *)buf)
        free(v1);
    }
  }
}

void sub_100C1DEBC()
{
  if (!qword_1023113D8)
    sub_100C1DD14();
}

void sub_100C1DED4(uint64_t a1, uint64_t a2, int a3)
{
  sub_1009BAC4C(a1, a2, a3);
}

void sub_100C1DFC8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C1DFD0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_100C1DFFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD *i;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  int v35;
  _BYTE v36[25];
  __int16 v37;
  char v38;
  _QWORD v39[4];
  int v40;
  _QWORD v41[2];
  __int16 v42;
  char v43;
  _OWORD v44[2];
  __int128 v45;
  int v46;
  __int128 v47;
  _BYTE v48[808];
  uint64_t v49;
  uint64_t v50;
  _DWORD v51[202];
  uint64_t v52;
  uint64_t v53;

  sub_100130B94(v51, a1);
  if (*(_BYTE *)(a1 + 6448) && (*(int *)(a1 + 6472) > 0 || *(int *)(a1 + 6476) > 0 || *(int *)(a1 + 6480) > 0))
  {
    v4 = *(_DWORD *)(a1 + 3352);
    v47 = *(_OWORD *)(a1 + 3356);
    v5 = *(_QWORD *)(a1 + 3372);
    v6 = *(_QWORD *)(a1 + 3380);
    v7 = *(_QWORD *)(a1 + 3388);
    v8 = *(_QWORD *)(a1 + 3396);
    v9 = *(_QWORD *)(a1 + 3404);
    v10 = *(_QWORD *)(a1 + 3412);
    v11 = *(_QWORD *)(a1 + 3420);
    v12 = *(_QWORD *)(a1 + 3428);
    v13 = *(_DWORD *)(a1 + 3436);
    v14 = *(_QWORD *)(a1 + 3440);
    v45 = *(_OWORD *)(a1 + 3448);
    v46 = *(_DWORD *)(a1 + 3464);
    v18 = *(_QWORD *)(a1 + 3468);
    v19 = v14;
    v15 = *(_DWORD *)(a1 + 3476);
    v44[0] = *(_OWORD *)(a1 + 3480);
    *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)(a1 + 3489);
    v42 = *(_WORD *)(a1 + 3505);
    v43 = *(_BYTE *)(a1 + 3507);
    v41[0] = sub_100223460(a1 + 3248);
    v41[1] = v16;
    memset(v39, 0, sizeof(v39));
    v40 = 1065353216;
    for (i = *(_QWORD **)(a1 + 1120); i; i = (_QWORD *)*i)
      sub_1000AF824((uint64_t)v39, i + 2, i + 2);
    v20 = v4;
    v21 = v47;
    v22 = v5;
    v23 = v6;
    v24 = v7;
    v25 = v8;
    v26 = v9;
    v27 = v10;
    v28 = v11;
    v29 = v12;
    v30 = v13;
    v31 = v19;
    v32 = v45;
    v33 = v46;
    v34 = v18;
    v35 = v15;
    *(_OWORD *)&v36[9] = *(_OWORD *)((char *)v44 + 9);
    *(_OWORD *)v36 = v44[0];
    v38 = v43;
    v37 = v42;
    sub_1000491C8(a1, v39, (uint64_t)v41, (uint64_t)&v20, 0, 1, (uint64_t)v48);
    sub_1002234B8((_QWORD *)(a1 + 1144), (uint64_t)v48, a2);
    sub_100126B34((uint64_t)&v50);
    sub_100126A1C((uint64_t)&v49);
    sub_100126D5C((uint64_t)v48);
    sub_100067AC4((uint64_t)v39);
  }
  else
  {
    sub_100130C4C(a2, (uint64_t)v51);
  }
  sub_100126B34((uint64_t)&v53);
  sub_100126A1C((uint64_t)&v52);
  sub_100126D5C((uint64_t)v51);
}

void sub_100C1E28C(_Unwind_Exception *a1)
{
  sub_10055829C((uint64_t)&STACK[0x1AD8]);
  _Unwind_Resume(a1);
}

void sub_100C1E2D4(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  int v28;
  _BYTE v29[25];
  __int16 v30;
  char v31;
  __int16 v32;
  char v33;
  __int16 v34;
  char v35;
  _OWORD v36[2];
  __int128 v37;
  int v38;
  __int128 v39;
  uint8_t buf[1640];
  _DWORD v41[202];
  uint64_t v42;
  uint64_t v43;

  sub_100130B94(v41, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    v6 = *(_DWORD *)(a1 + 3352);
    v39 = *(_OWORD *)(a1 + 3356);
    v15 = *(_OWORD *)(a1 + 3388);
    v16 = *(_OWORD *)(a1 + 3372);
    v13 = *(_OWORD *)(a1 + 3420);
    v14 = *(_OWORD *)(a1 + 3404);
    v7 = *(_DWORD *)(a1 + 3436);
    v8 = *(_QWORD *)(a1 + 3440);
    v37 = *(_OWORD *)(a1 + 3448);
    v38 = *(_DWORD *)(a1 + 3464);
    v9 = *(_QWORD *)(a1 + 3468);
    v10 = *(_DWORD *)(a1 + 3476);
    v36[0] = *(_OWORD *)(a1 + 3480);
    *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(a1 + 3489);
    v34 = *(_WORD *)(a1 + 3505);
    v35 = *(_BYTE *)(a1 + 3507);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217A918);
    v11 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling WSB event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217A918);
      v32 = 0;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling WSB event", &v32, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::operator()(const Events::Wifi::Wsb &) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    sub_1009AE30C(a2, (uint64_t)buf);
    LOBYTE(v32) = 0;
    v33 = 0;
    v17 = v6;
    v18 = v39;
    v19 = v16;
    v20 = v15;
    v21 = v14;
    v22 = v13;
    v23 = v7;
    v24 = v8;
    v25 = v37;
    v26 = v38;
    v27 = v9;
    v28 = v10;
    *(_OWORD *)v29 = v36[0];
    *(_OWORD *)&v29[9] = *(_OWORD *)((char *)v36 + 9);
    v30 = v34;
    v31 = v35;
    sub_1000491C8(a1, buf, (uint64_t)&v32, (uint64_t)&v17, 0, 0, a3);
    sub_100067AC4((uint64_t)buf);
  }
  else
  {
    sub_100130C4C(a3, (uint64_t)v41);
  }
  sub_100126B34((uint64_t)&v43);
  sub_100126A1C((uint64_t)&v42);
  sub_100126D5C((uint64_t)v41);
}

void sub_100C1E5F8(_Unwind_Exception *a1)
{
  sub_10055829C((uint64_t)&STACK[0x7C8]);
  _Unwind_Resume(a1);
}

void sub_100C1E630(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD v30[4];
  int v31;
  _QWORD v32[2];
  _BYTE v33[808];
  uint64_t v34;
  uint64_t v35;
  _DWORD v36[202];
  uint64_t v37;
  uint64_t v38;

  sub_100130B94(v36, a1);
  if ((*a2 | 2) == 2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 6544) + 32))(*(_QWORD *)(a1 + 6544));
    sub_100130C4C(a3, (uint64_t)v36);
  }
  else
  {
    v32[0] = sub_100223460(a1 + 3248);
    v32[1] = v6;
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    v12 = 0xFFFF;
    v13 = 0;
    v14 = 0;
    v15 = xmmword_101BAFC90;
    __asm { FMOV            V0.2D, #-1.0 }
    v16 = _Q0;
    v17 = _Q0;
    v18 = _Q0;
    v19 = 0;
    v22 = 0;
    v20 = 0xBFF0000000000000;
    v21 = 0;
    v23 = 0;
    v24 = 0xBFF0000000000000;
    v25 = 0x7FFFFFFF;
    v27 = 0;
    v26 = 0;
    v29 = 0;
    v28 = 0;
    sub_1000491C8(a1, v30, (uint64_t)v32, (uint64_t)&v12, 1, 1, (uint64_t)v33);
    sub_1002234B8((_QWORD *)(a1 + 1144), (uint64_t)v33, a3);
    sub_100126B34((uint64_t)&v35);
    sub_100126A1C((uint64_t)&v34);
    sub_100126D5C((uint64_t)v33);
    sub_100067AC4((uint64_t)v30);
  }
  sub_100126B34((uint64_t)&v38);
  sub_100126A1C((uint64_t)&v37);
  sub_100126D5C((uint64_t)v36);
}

void sub_100C1E7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_10055829C((uint64_t)&a36);
  sub_100067AC4((uint64_t)&a29);
  sub_10055829C((uint64_t)&STACK[0x1A68]);
  _Unwind_Resume(a1);
}

void sub_100C1E824(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  int v30;
  _BYTE v31[25];
  __int16 v32;
  char v33;
  _WORD v34[8];
  _QWORD v35[4];
  int v36;
  __int16 v37;
  char v38;
  _OWORD v39[2];
  __int128 v40;
  int v41;
  __int128 v42;
  uint8_t buf[1640];
  _DWORD v44[202];
  uint64_t v45;
  uint64_t v46;

  sub_100130B94(v44, a1);
  v4 = *(_QWORD *)(a1 + 6352);
  v5 = *(_QWORD *)(a1 + 6360);
  if (v4 == v5)
  {
    sub_100130C4C(a2, (uint64_t)v44);
  }
  else
  {
    v18 = *(_DWORD *)(a1 + 3352);
    v42 = *(_OWORD *)(a1 + 3356);
    v16 = *(_OWORD *)(a1 + 3388);
    v17 = *(_OWORD *)(a1 + 3372);
    v14 = *(_OWORD *)(a1 + 3420);
    v15 = *(_OWORD *)(a1 + 3404);
    v6 = *(_DWORD *)(a1 + 3436);
    v7 = *(_QWORD *)(a1 + 3440);
    v40 = *(_OWORD *)(a1 + 3448);
    v41 = *(_DWORD *)(a1 + 3464);
    v8 = *(_QWORD *)(a1 + 3468);
    v9 = *(_DWORD *)(a1 + 3476);
    v39[0] = *(_OWORD *)(a1 + 3480);
    *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)(a1 + 3489);
    v37 = *(_WORD *)(a1 + 3505);
    v38 = *(_BYTE *)(a1 + 3507);
    memset(v35, 0, sizeof(v35));
    v36 = 1065353216;
    do
    {
      v11 = *(_QWORD **)v4;
      v10 = *(_QWORD **)(v4 + 8);
      while (v11 != v10)
      {
        *(_QWORD *)buf = *v11;
        sub_1000AF824((uint64_t)v35, buf, buf);
        v11 += 11;
      }
      v4 += 24;
    }
    while (v4 != v5);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217A918);
    v12 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling ReprocessWifiScanBuffer event", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217A918);
      v34[0] = 0;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "MovingApDetector, will skip cross-checking centroids with GPS/Cell in handling ReprocessWifiScanBuffer event", v34, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::operator()(const Events::ReprocessWifiScanBuffer &) const", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
    }
    buf[0] = 0;
    buf[8] = 0;
    v19 = v18;
    v20 = v42;
    v21 = v17;
    v22 = v16;
    v23 = v15;
    v24 = v14;
    v25 = v6;
    v26 = v7;
    v27 = v40;
    v28 = v41;
    v29 = v8;
    v30 = v9;
    *(_OWORD *)v31 = v39[0];
    *(_OWORD *)&v31[9] = *(_OWORD *)((char *)v39 + 9);
    v32 = v37;
    v33 = v38;
    sub_1000491C8(a1, v35, (uint64_t)buf, (uint64_t)&v19, 0, 0, a2);
    sub_100067AC4((uint64_t)v35);
  }
  sub_100126B34((uint64_t)&v46);
  sub_100126A1C((uint64_t)&v45);
  sub_100126D5C((uint64_t)v44);
}

void sub_100C1EB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_100067AC4((uint64_t)&a41);
  sub_10055829C((uint64_t)&STACK[0x7E8]);
  _Unwind_Resume(a1);
}

NSDictionary *sub_100C1EBD0(uint64_t a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("sources");
  v4[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v3[1] = CFSTR("scanApsBin");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 40));
  v3[2] = CFSTR("als");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3[3] = CFSTR("tiles");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[4] = CFSTR("invalid");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v3[5] = CFSTR("unknown");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

void sub_100C1ECE8(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100C1ED14()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100C1EDB0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100C1EDC8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100C1EE54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1EE70(uint64_t a1, uint64_t a2, void *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 64) = objc_alloc_init((Class)NSMutableDictionary);
  *(_QWORD *)(a1 + 72) = a3;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  return a1;
}

void sub_100C1EEF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  sub_1002A1C94(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_100C1EF14(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *i;
  std::__shared_weak_count *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(void **)(a1 + 64);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)i)), "invalidate");
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_100C1F9F0(a1 + 120);
  sub_100C1F9F0(a1 + 80);
  sub_1002A1C94(a1 + 16);
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_100C1F040(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100C1F05C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  sub_1007208BC(&v18, a1);
  *(_OWORD *)v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  sub_1001FA510(a6, &v18, (__int128 *)v16, (__int128 *)__p, a4, a5);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_100C1F150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018F11A0((uint64_t)&a16);
  sub_100261F44((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100C1F194(_QWORD *a1, void *a2, int a3)
{
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  const char *v9;
  void **v10;
  std::string __p;
  void *__dst[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  uint64_t buf;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void **v20;
  __int16 v21;
  int v22;

  if (a2)
  {
    objc_msgSend(a2, "cppClientKey");
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = v14;
    if (v15 < 0)
      v6 = (void **)v14[0];
    buf = 68289538;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    v20 = v6;
    v21 = 1026;
    v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLIUA LiveActivity update\", \"ClientKey\":%{public, location:escape_only}s, \"coming\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
  }
  if (a3)
  {
    if (sub_1001987C8(a1 + 15, (unsigned __int8 *)v14))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v8 = v14;
        if (v15 < 0)
          v8 = (void **)v14[0];
        buf = 68289282;
        v17 = 2082;
        v18 = "";
        v19 = 2082;
        v20 = v8;
        v9 = "{\"msg%{public}.0s\":\"skip taking #CLIUA for LiveActivity. Already exists\", \"ClientKey\":%{public, locat"
             "ion:escape_only}s}";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      if (SHIBYTE(v15) < 0)
      {
        sub_100115CE4(__dst, v14[0], (unint64_t)v14[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v14;
        v13 = v15;
      }
      sub_1015A2E04(&__p, "LiveActivity");
      sub_1001FA3D8(&__p, a1, (uint64_t)__dst, 4, &buf);
      sub_1001F7668((uint64_t)(a1 + 15), (unsigned __int8 *)v14, (__int128 *)v14, (__int128 *)&buf);
      sub_1001FA090((uint64_t)&buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13) < 0)
        operator delete(__dst[0]);
    }
  }
  else
  {
    if (sub_1001987C8(a1 + 15, (unsigned __int8 *)v14))
    {
      sub_100C1FB5C(a1 + 15, (unsigned __int8 *)v14);
      goto LABEL_34;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217A980);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v14;
      if (v15 < 0)
        v10 = (void **)v14[0];
      buf = 68289282;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = v10;
      v9 = "{\"msg%{public}.0s\":\"skip erasing #CLIUA for LiveActivity. Does not exists\", \"ClientKey\":%{public, locat"
           "ion:escape_only}s}";
      goto LABEL_28;
    }
  }
LABEL_34:
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_100C1F4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100C1F534(uint64_t a1)
{
  id v2;
  uint64_t *i;
  void **v4;
  NSString *v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[6];
  _QWORD v14[2];
  _QWORD v15[2];

  v2 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  for (i = *(uint64_t **)(a1 + 32); i; i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      sub_100115CE4(__p, (void *)i[2], i[3]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)i + 1);
      v10 = i[4];
    }
    v11 = *(_OWORD *)(i + 5);
    v12 = i[7];
    if (v10 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4, __p[0], __p[1], v10);
    v14[0] = CFSTR("ActiveAssertionLevel");
    v6 = &dword_100000014;
    while (v6 != -4)
    {
      v7 = *(unsigned int *)((char *)&unk_101C1E920 + v6);
      if (v7 >= 6)
        sub_100263950("array::at");
      v6 -= 4;
      if (*((_DWORD *)&v11 + v7))
        goto LABEL_14;
    }
    v7 = 0;
LABEL_14:
    v15[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v7);
    v14[1] = CFSTR("AssertionCounts");
    v13[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v11);
    v13[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD1(v11));
    v13[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", DWORD2(v11));
    v13[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v11));
    v13[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v12);
    v13[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", HIDWORD(v12));
    v15[1] = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v13, 6);
    objc_msgSend(v2, "setObject:forKeyedSubscript:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v15, v14, 2), v5);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
  return v2;
}

void sub_100C1F748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_100C1F770(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t *v14;
  __int16 v15;
  uint64_t *v16;

  v2 = *(_QWORD *)(a1 + 56);
  objc_msgSend(*(id *)(a1 + 32), "invalidate");
  if (objc_msgSend(*(id *)(v2 + 64), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)) == *(id *)(a1 + 32))
  {
    objc_msgSend(*(id *)(v2 + 64), "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217A980);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v4 = *(uint64_t **)(a1 + 64);
      if (*((char *)v4 + 23) < 0)
        v4 = (uint64_t *)*v4;
      v5 = *(uint64_t **)(a1 + 72);
      if (*((char *)v5 + 23) < 0)
        v5 = (uint64_t *)*v5;
      v9 = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = v4;
      v15 = 2082;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Inconsistent state detected.  An unknown decay timer fired!\", \"clientKey\":%{public, location:escape_only}s, \"originalReason\":%{public, location:escape_only}s}", (uint8_t *)&v9, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v6 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v7 = *(uint64_t **)(a1 + 64);
      if (*((char *)v7 + 23) < 0)
        v7 = (uint64_t *)*v7;
      v8 = *(uint64_t **)(a1 + 72);
      if (*((char *)v8 + 23) < 0)
        v8 = (uint64_t *)*v8;
      v9 = 68289538;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = v7;
      v15 = 2082;
      v16 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Inconsistent state detected.  An unknown decay timer fired!", "{\"msg%{public}.0s\":\"#CLIUA Inconsistent state detected.  An unknown decay timer fired!\", \"clientKey\":%{public, location:escape_only}s, \"originalReason\":%{public, location:escape_only}s}", (uint8_t *)&v9, 0x26u);
    }
  }
}

BOOL sub_100C1F99C(const std::string *a1)
{
  return std::string::compare(a1 + 1, "Location in use on paired watch by 3rd party app") == 0;
}

void sub_100C1F9C4(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100C1F9F0(uint64_t a1)
{
  void *v2;

  sub_100C1FA28(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100C1FA28(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100C1FA64((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100C1FA64(uint64_t a1)
{
  sub_1001FA090(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *sub_100C1FAA0(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_1001FA140(__dst + 24, a3);
  return __dst;
}

void sub_100C1FAFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100C1FB18(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_100C1FA64((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *sub_100C1FB5C(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = sub_1001987C8(a1, a2);
  if (result)
  {
    sub_1000592D8(a1, result, (uint64_t)v4);
    sub_100C1FB18((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void sub_100C1FBE0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x30u);
}

void sub_100C1FBE8(id a1)
{
  qword_10229FC88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

uint64_t sub_100C1FCFC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 20 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100C1FFD8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x14)) + 200 * (v7 % 0x14);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 16) = v9;
  *(_OWORD *)(v8 + 32) = v10;
  v12 = *(_OWORD *)(a2 + 80);
  v13 = *(_OWORD *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v8 + 128) = v14;
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 96) = v13;
  v15 = *(_OWORD *)(a2 + 144);
  v16 = *(_OWORD *)(a2 + 160);
  v17 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(v8 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(v8 + 160) = v16;
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 144) = v15;
  v18 = a1[4];
  v19 = a1[5] + 1;
  a1[5] = v19;
  v20 = v18 + v19;
  v21 = a1[1];
  v22 = (_QWORD *)(v21 + 8 * (v20 / 0x14));
  v23 = *v22 + 200 * (v20 % 0x14);
  if (a1[2] == v21)
    v23 = 0;
  if (v23 == *v22)
    v23 = *(v22 - 1) + 4000;
  return v23 - 200;
}

uint64_t sub_100C1FF7C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x14)
    a2 = 1;
  if (v2 < 0x28)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 20;
  }
  return v4 ^ 1u;
}

void sub_100C1FFD8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x14;
  v4 = v2 - 20;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFA0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFA0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFA0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100C202A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100C20394(uint64_t a1, void *a2)
{
  id v4;
  id v5;

  *(_QWORD *)a1 = off_10217A9D0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 96) = objc_alloc_init((Class)SPFinderStateManager);
  *(_QWORD *)(a1 + 72) = -[CLSubHarvesterAvengerExternalAdapter initWithHarvesterExternal:]([CLSubHarvesterAvengerExternalAdapter alloc], "initWithHarvesterExternal:", a1);
  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLAvengerScanner"));
    *(_QWORD *)(a1 + 64) = v4;
    objc_msgSend(v4, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 72), objc_msgSend(*(id *)(a1 + 8), "silo"));
  }
  v5 = objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  *(_QWORD *)(a1 + 112) = v5;
  objc_msgSend(v5, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 72), objc_msgSend(*(id *)(a1 + 8), "silo"));
  objc_msgSend(*(id *)(a1 + 112), "setDelegateEntityName:", "CLSubHarvesterAvengerExternal");
  return a1;
}

void sub_100C204D4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;

  v7 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_101923460(v5, v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C20510(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_10217A9D0;

  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {

    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  else
  {

  }
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_100C20610(uint64_t a1)
{
  sub_100C20510(a1);
  operator delete();
}

void sub_100C20634(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;

  v4 = *(void **)(a1 + 80);
  if (v4)
  {
    if (objc_msgSend(v4, "getOptedIn") == (_DWORD)a2)
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217AB18);
      v6 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v7 = 68289026;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal scanner does not need to be updated\"}", (uint8_t *)&v7, 0x12u);
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217AB18);
      v5 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 68289026;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal updating scanner\"}", (uint8_t *)&v7, 0x12u);
      }
      objc_msgSend(*(id *)(a1 + 80), "setOptedIn:", a2);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = -[CLSubHarvesterAvengerExternalAdapter initWithHarvesterExternal:]([CLSubHarvesterAvengerExternalAdapter alloc], "initWithHarvesterExternal:", a1);
    *(_QWORD *)(a1 + 80) = -[CLAvengerScannerClient initWithDelegate:queue:optedIn:]([CLAvengerScannerClient alloc], "initWithDelegate:queue:optedIn:", *(_QWORD *)(a1 + 88), objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"), a2);
  }
}

uint64_t sub_100C20810(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
}

id sub_100C20820(uint64_t a1)
{
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "syncgetLocationClientKeys");
}

void sub_100C20844(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[8];

  *(_QWORD *)(a1 + 56) = a2;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217AB18);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLSubHarvesterAvengerExternal::setupClients", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217AB18);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "CLSubHarvesterAvengerExternal::setupClients", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterAvengerExternal::setupClients(CLAvengerHarvestInterface::Receiver *)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_1006AA544();
}

void sub_100C20BAC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSubHarvesterAvengerExternal::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217AB38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AB38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  if (*a2 == 22)
    (*(void (**)(_QWORD, uint64_t, _DWORD *, uint64_t))(**(_QWORD **)(a4 + 56) + 72))(*(_QWORD *)(a4 + 56), a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C20D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C20DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSubHarvesterAvengerExternal::onWifiServiceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217AB38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AB38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a4 + 56) + 24))(*(_QWORD *)(a4 + 56), a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C20F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C20F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSubHarvesterAvengerExternal::onAppMonitorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217AB38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onAppMonitorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AB38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onAppMonitorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a4 + 56) + 88))(*(_QWORD *)(a4 + 56), a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C21168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C21188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSubHarvesterAvengerExternal::onStepCountNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217AB38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AB38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a4 + 56) + 16))(*(_QWORD *)(a4 + 56), a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C21358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100C21378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSubHarvesterAvengerExternal::onSignalEnvironmentProviderNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217AB38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterAvengerExternal::onSignalEnvironmentProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AB38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterAvengerExternal::onSignalEnvironmentProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a4 + 56) + 56))(*(_QWORD *)(a4 + 56), a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C21548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C21568(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = a1[5];
  a1[5] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

id sub_100C215EC(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *a2, 0);
}

id sub_100C21600(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), *a2);
}

void sub_100C21610()
{
  sub_10061DCC4();
}

id sub_100C21644(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *a2, 0);
}

id sub_100C21658(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), *a2);
}

id sub_100C21668(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *a2, 0);
}

id sub_100C2167C(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), *a2);
}

id sub_100C2168C(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *a2, 0);
}

id sub_100C216A0(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *a2);
}

id sub_100C216B0(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *a2, 0);
}

id sub_100C216C4(uint64_t a1, unsigned int *a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), *a2);
}

void sub_100C216D4(uint64_t a1)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
    sub_100C20634(a1, 0);
  else
    objc_msgSend(*(id *)(a1 + 64), "startMonitoringAvengerAdvertisementsForClient:clientName:", CLISP_ME_TOKEN, CFSTR("CLSubHarvesterAvengerExternal"));
}

void sub_100C21734(uint64_t a1, uint64_t a2)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
    sub_100C20634(a1, a2);
  else
    _objc_msgSend(*(id *)(a1 + 64), "startMonitoringAvengerAdvertisementsForClient:optedIn:clientName:", CLISP_ME_TOKEN, a2, CFSTR("CLSubHarvesterAvengerExternal"));
}

void sub_100C2179C(id *a1)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {

    a1[11] = 0;
    a1[10] = 0;
  }
  else
  {
    objc_msgSend(a1[8], "stopMonitoringAvengerAdvertisementsForClient:", CLISP_ME_TOKEN);
  }
}

uint64_t sub_100C21804(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_100C21814(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
}

uint64_t sub_100C21824(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56));
}

id sub_100C21834(uint64_t a1)
{
  void *v2;
  void *v4;

  if (_os_feature_enabled_impl("BluetoothFeatures", "SentinelNewLocationFeatures"))
  {
    v2 = *(void **)(a1 + 80);
    if (v2)
      return objc_msgSend(v2, "isScanning");
  }
  else
  {
    v4 = *(void **)(a1 + 64);
    if (v4)
      return _objc_msgSend(v4, "syncgetIsScanning");
  }
  return 0;
}

void sub_100C21894(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = objc_msgSend(objc_msgSend(*(id *)(v3 + 8), "silo"), "queue");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100C21900;
  v5[3] = &unk_102131360;
  v5[4] = a2;
  v5[5] = v3;
  dispatch_async(v4, v5);
}

uint64_t sub_100C21900(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 56) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56), *(_QWORD *)(a1 + 32));
}

uint64_t sub_100C21914(uint64_t result)
{
  int *v1;
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  _QWORD handler[5];

  v1 = (int *)(result + 104);
  if (*(_DWORD *)(result + 104) == -1)
  {
    v2 = result;
    v3 = (const char *)GEOCountryConfigurationCountryCodeChangedDarwinNotification;
    v4 = objc_msgSend(objc_msgSend(*(id *)(result + 8), "silo"), "queue");
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100C219AC;
    handler[3] = &unk_102145848;
    handler[4] = v2;
    return notify_register_dispatch(v3, v1, v4, handler);
  }
  return result;
}

uint64_t sub_100C219AC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, id))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 56) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56), objc_msgSend(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"), "countryCode"));
}

uint64_t sub_100C219E8(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 104);
  if ((_DWORD)result != -1)
    return notify_cancel(result);
  return result;
}

id sub_100C219FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  id v8;
  _QWORD v9[6];
  _QWORD v10[5];

  v6 = *(void **)(a1 + 112);
  if (v6)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100C21AC0;
    v9[3] = &unk_10217AAD0;
    v9[4] = a4;
    v9[5] = a1;
    return objc_msgSend(v6, "fetchEstimatedLocationAtDate:options:withReply:", a2, a3, v9);
  }
  else
  {
    v8 = objc_msgSend(*(id *)(a1 + 8), "silo");
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100C21AB0;
    v10[3] = &unk_102162918;
    v10[4] = a4;
    return objc_msgSend(v8, "async:", v10);
  }
}

uint64_t sub_100C21AB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_100C21AC0(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _QWORD v7[6];

  v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 8), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100C21B30;
  v7[3] = &unk_1021629E0;
  v5 = *(_QWORD *)(a1 + 32);
  v7[4] = a2;
  v7[5] = v5;
  return objc_msgSend(v4, "async:", v7);
}

uint64_t sub_100C21B30(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100C21B40(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100C21B6C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100C21B98(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_100C21BA4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100C21C40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100C21C58()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100C21CE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_100C21CFC()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C1E96C;
      v1[3] = unk_101C1E97C;
      v1[4] = xmmword_101C1E98C;
      v1[0] = xmmword_101C1E94C;
      v1[1] = unk_101C1E95C;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100C21DD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_100C21DE8()
{
  sub_1015A2E04(qword_102307338, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102307338, (void *)&_mh_execute_header);
}

void sub_100C21ED0(id a1)
{
  qword_102307350 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLOnBodyNotifierSilo"));
}

uint64_t sub_100C21F84(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100C22148;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102307370 != -1)
    dispatch_once(&qword_102307370, block);
  return qword_1023113E0;
}

void sub_100C22124(id a1)
{
  if ((sub_1001B7910() & 0x800) != 0)
    byte_102307360 = 1;
}

void sub_100C22148()
{
  uint64_t v0;
  char v1;
  char v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  __int16 v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  v9 = 0;
  v0 = sub_100127B9C();
  sub_100081C10(v0, &v7);
  v1 = sub_1001E4874(v7, "ForceAPOnBodyDetection", &v9);
  v2 = v1;
  v3 = v8;
  if (!v8)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((v2 & 1) != 0)
    {
LABEL_7:
      v6 = sub_1001B7910();
      if (!v9 && (v6 & 0x1000) != 0)
        operator new();
      operator new();
    }
  }
  else
  {
LABEL_5:
    if ((v1 & 1) != 0)
      goto LABEL_7;
  }
  v9 = 0;
  goto LABEL_7;
}

void sub_100C2224C()
{
  operator delete();
}

uint64_t sub_100C2229C(uint64_t a1, void *a2)
{
  uint64_t v3;
  BOOL *v4;
  uint64_t v5;
  char v6;
  char v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v3 = sub_100C22384(a1, "CLOnBodyNotifier", a2);
  *(_QWORD *)v3 = off_10217ABA8;
  *(_BYTE *)(v3 + 109) = 0;
  v4 = (BOOL *)(v3 + 109);
  v5 = sub_100127B9C();
  sub_100081C10(v5, &v12);
  v6 = sub_1001E4874(v12, "LogOnBody", v4);
  v7 = v6;
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((v7 & 1) != 0)
        return a1;
      goto LABEL_6;
    }
  }
  if ((v6 & 1) == 0)
LABEL_6:
    *v4 = 0;
  return a1;
}

void sub_100C22360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100261F44((uint64_t)&a9);
  sub_100C22420(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100C22384(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10217AD48;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100C22404(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C22420(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217AD48;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100C224A0(_BYTE *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 224))(a1);
  a1[108] = 1;
  return result;
}

_QWORD *sub_100C224D0@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100C22548(uint64_t a1)
{
  int v3;

  v3 = 0;
  if (sub_1001B7864(a1, &v3, 1))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  return 1;
}

uint64_t sub_100C22594(uint64_t a1)
{
  int v3;

  v3 = 0;
  if (!sub_1001B7864(a1, &v3, 1))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  return 1;
}

uint64_t sub_100C225E0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_10217AE28;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100C226B4()
{
  operator new();
}

void sub_100C22760(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

id sub_100C2279C(uint64_t a1)
{
  return objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLOnBodyNotifier")), "syncgetDoSync:", a1);
}

void sub_100C227D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217AD18);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10217AD18);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100C22A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FA068);
}

uint64_t sub_100C22A5C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[1638];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100C24300();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FA069;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217AD18);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AD18);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100C22EB8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AD18);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217AD18);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100C23138(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217AD18);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217AD18);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100C234C0(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = (char *)operator new(0x28uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_10217AE70;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 24) = *a3;
  *(_QWORD *)&v13 = v6 + 24;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_100C23594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C235A8(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AD18);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x28uLL);
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_10217AE70;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 24) = *a3;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100C24CFC();
    os_activity_scope_leave(&state);
  }
}

void sub_100C23BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100C23C2C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AD18);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217AD18);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217AD18);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217AD18);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217AD18);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217AD18);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100C241D8(uint64_t a1)
{
  sub_100C24274(a1);
  operator delete();
}

id sub_100C241FC(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_100C2448C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_100C24248(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_100C24274(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_10217AE28;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100C242D4(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100C24300()
{
  operator new();
}

_BYTE *sub_100C24390(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100C2448C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_100C2446C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100C2448C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100C24504(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100C2488C(a1);
  else
    return 0;
}

id sub_100C24504(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100C24C38((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C1EADALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101C1EADALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOnBodyNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100C2488C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1EADALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1EADALL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217AE40);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOnBodyNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_100C24C38(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221BDE0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)16)
      sub_10192366C();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100C24CAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217AE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C24CC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217AE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100C24CFC()
{
  operator new();
}

void sub_100C24D8C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100C2448C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100C24390(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217AD18);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217AD18);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

uint64_t sub_100C25160(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

uint64_t sub_100C25180(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217AEC0;
  sub_100C26918(a1 + 8);
  sub_100C26918(a1 + 880);
  sub_1002433B8(a1 + 1752);
  *(_BYTE *)(a1 + 832) = 1;
  return a1;
}

void sub_100C251C8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  v1[110] = off_10217AF20;
  sub_1000F345C(v1 + 111);
  v1[1] = off_10217AF20;
  sub_1000F345C(v1 + 2);
  _Unwind_Resume(a1);
}

_QWORD *sub_100C25204(_QWORD *a1)
{
  *a1 = off_10217AF20;
  sub_1000F345C(a1 + 1);
  return a1;
}

_QWORD *sub_100C25238(_QWORD *a1)
{
  *a1 = off_10217AEC0;
  a1[110] = off_10217AF20;
  sub_1000F345C(a1 + 111);
  a1[1] = off_10217AF20;
  sub_1000F345C(a1 + 2);
  return a1;
}

void sub_100C25284(_QWORD *a1)
{
  *a1 = off_10217AEC0;
  a1[110] = off_10217AF20;
  sub_1000F345C(a1 + 111);
  a1[1] = off_10217AF20;
  sub_1000F345C(a1 + 2);
  operator delete();
}

void sub_100C252E0(uint64_t a1)
{
  sub_100C25308(a1 + 8);
  sub_100C25308(a1 + 880);
}

void sub_100C25308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  sub_100C25CCC(a1);
  *(_DWORD *)(v1 + 420) = 0xFFFF;
  *(_QWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 432) = 0;
  *(_QWORD *)(v1 + 440) = 0xBFF0000000000000;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v1 + 448) = xmmword_101BAFEE0;
  *(_OWORD *)(v1 + 464) = _Q1;
  *(_OWORD *)(v1 + 480) = _Q1;
  *(_QWORD *)(v1 + 496) = 0xBFF0000000000000;
  *(_DWORD *)(v1 + 504) = 0;
  *(_QWORD *)(v1 + 516) = 0;
  *(_QWORD *)(v1 + 524) = 0;
  *(_QWORD *)(v1 + 508) = 0xBFF0000000000000;
  *(_DWORD *)(v1 + 532) = 0;
  *(_QWORD *)(v1 + 536) = 0xBFF0000000000000;
  *(_DWORD *)(v1 + 544) = 0x7FFFFFFF;
  *(_QWORD *)(v1 + 556) = 0;
  *(_QWORD *)(v1 + 564) = 0;
  *(_QWORD *)(v1 + 548) = 0;
  *(_BYTE *)(v1 + 572) = 0;
  v7 = *(_QWORD *)(v1 + 112);
  v1 += 112;
  *(_QWORD *)(v1 + 8) = v7;
  v8 = 0;
  sub_1002F4200(v1, 4uLL, &v8);
  *(_DWORD *)(v1 + 472) = 0;
}

uint64_t sub_100C253A8(uint64_t a1, double *a2, int *a3, int *a4)
{
  int v8;

  v8 = sub_100C25404(a1 + 8, a2, a3, a4);
  return v8 & sub_100C25404(a1 + 880, a2, a3, a4);
}

uint64_t sub_100C25404(uint64_t a1, double *a2, int *a3, int *a4)
{
  double v8;
  uint64_t result;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  _BOOL4 v15;
  const char *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint8_t *v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  NSObject *v28;
  NSObject *v29;
  _BOOL4 v30;
  NSObject *v31;
  _BOOL4 v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  _BYTE v37[12];
  uint8_t buf[4];
  uint64_t v39;

  if (!*(_BYTE *)(a1 + 824)
    || !*(_BYTE *)(a1 + 249)
    || *(_BYTE *)(a1 + 825)
    || (v8 = *(double *)(a1 + 340), *a2 - v8 <= 60.0))
  {
    sub_100C26AB0(a1, *a2);
    *(_DWORD *)(a1 + 624) = *(_DWORD *)(a1 + 628);
    *(_DWORD *)(a1 + 628) = *a3;
    if (*(_BYTE *)(a1 + 249))
    {
      if ((sub_1000F3890((double *)(a1 + 832), (double *)(a1 + 208), (double *)(a1 + 200), **(double **)(a1 + 112) * 57.2957795, *(float *)(a1 + 584)) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v14 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
        }
        v15 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v15)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          *(_WORD *)v37 = 0;
          v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:calc_dNdE failed", v37, 2, v34);
          goto LABEL_36;
        }
        return result;
      }
      if ((sub_1000E4CD4(a1, a2) & 1) == 0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v17 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "KF:Prediction failed", buf, 2u);
        }
        v18 = sub_1001BFF7C(115, 0);
        result = 0;
        if (v18)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217AF90);
          *(_WORD *)v37 = 0;
          v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:Prediction failed", v37, 2, v34);
          goto LABEL_36;
        }
        return result;
      }
      sub_1000EC42C(a1, (uint64_t)"propagation for motion", -1.0);
      *(_BYTE *)(a1 + 248) = 0;
      switch(*a3)
      {
        case 1:
        case 10:
          goto LABEL_14;
        case 2:
        case 11:
          if (*a4 < 1)
            goto LABEL_50;
LABEL_14:
          *(_BYTE *)(a1 + 248) = 1;
          if ((sub_100C26BD8(a1) & 1) == 0)
          {
            sub_100C25CCC(a1);
            *(_BYTE *)(a1 + 248) = 0;
            *(_QWORD *)(a1 + 624) = 0;
          }
          v11 = *(_OWORD *)(a1 + 656);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 640);
          *(_OWORD *)(a1 + 40) = v11;
          v12 = *(_QWORD *)(a1 + 672);
LABEL_49:
          *(_QWORD *)(a1 + 56) = v12;
LABEL_50:
          if (*(_BYTE *)(a1 + 249)
            && sqrt(**(double **)(a1 + 88) + *(double *)(*(_QWORD *)(a1 + 88) + 40)) > 900000.0)
          {
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217AF90);
            v28 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134349056;
              v39 = 0x412B774000000000;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "KF:re-init,uncertainty growth>%{public}.0lf", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_10217AF90);
              *(_DWORD *)v37 = 134349056;
              *(_QWORD *)&v37[4] = 0x412B774000000000;
              v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:re-init,uncertainty growth>%{public}.0lf", v37, 12);
              sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotionActivity::Confidence &)", "%s\n", v33);
              if (v33 != (char *)buf)
                free(v33);
            }
            sub_100C25CCC(a1);
          }
          sub_1000EC42C(a1, (uint64_t)"motion update", -1.0);
          break;
        case 4:
          v26 = *(_OWORD *)(a1 + 704);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 688);
          *(_OWORD *)(a1 + 40) = v26;
          v12 = *(_QWORD *)(a1 + 720);
          goto LABEL_49;
        case 8:
          v27 = *(_OWORD *)(a1 + 752);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 736);
          *(_OWORD *)(a1 + 40) = v27;
          v12 = *(_QWORD *)(a1 + 768);
          goto LABEL_49;
        default:
          v24 = *(_OWORD *)(a1 + 800);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
          *(_OWORD *)(a1 + 40) = v24;
          v12 = *(_QWORD *)(a1 + 816);
          goto LABEL_49;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 248) = 0;
      v13 = *a3;
      if (*a3 <= 40)
      {
        switch(v13)
        {
          case 1:
          case 10:
            result = 1;
            goto LABEL_42;
          case 2:
          case 11:
            result = 1;
            if (*a4 >= 1)
            {
LABEL_42:
              *(_BYTE *)(a1 + 248) = 1;
              v22 = *(_OWORD *)(a1 + 656);
              *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 640);
              *(_OWORD *)(a1 + 40) = v22;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 672);
            }
            break;
          case 4:
            goto LABEL_43;
          case 8:
            v25 = *(_OWORD *)(a1 + 752);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 736);
            *(_OWORD *)(a1 + 40) = v25;
            v21 = *(_QWORD *)(a1 + 768);
            goto LABEL_46;
          default:
            goto LABEL_40;
        }
        return result;
      }
      if (v13 == 41)
      {
LABEL_43:
        v23 = *(_OWORD *)(a1 + 704);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 688);
        *(_OWORD *)(a1 + 40) = v23;
        v21 = *(_QWORD *)(a1 + 720);
      }
      else
      {
LABEL_40:
        v20 = *(_OWORD *)(a1 + 800);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a1 + 784);
        *(_OWORD *)(a1 + 40) = v20;
        v21 = *(_QWORD *)(a1 + 816);
      }
LABEL_46:
      *(_QWORD *)(a1 + 56) = v21;
    }
    return 1;
  }
  result = 1;
  if (*(_BYTE *)(a1 + 577))
    return result;
  *(double *)v37 = v8 + 60.0;
  *(_BYTE *)(a1 + 825) = 1;
  v10 = *a3;
  v35 = *a4;
  v36 = v10;
  if ((sub_100C25404(a1, v37, &v36, &v35) & 1) != 0)
  {
    v35 = 2;
    v36 = 2;
    if ((sub_100C25404(a1, v37, &v36, &v35) & 1) != 0)
    {
      *(_BYTE *)(a1 + 825) = 0;
      result = 1;
      *(_BYTE *)(a1 + 577) = 1;
      return result;
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v31 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
    }
    v32 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v32)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
        goto LABEL_67;
      goto LABEL_79;
    }
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v29 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "KF:updateMotion failed unexpectedly", buf, 2u);
    }
    v30 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v30)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 == -1)
      {
LABEL_67:
        LOWORD(v34) = 0;
        v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:updateMotion failed unexpectedly", &v34, 2, v34);
LABEL_36:
        v19 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotionActivity::Confidence &)", "%s\n", v16);
        if (v19 != buf)
          free(v19);
        return 0;
      }
LABEL_79:
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
      goto LABEL_67;
    }
  }
  return result;
}

_QWORD *sub_100C25CCC(uint64_t a1)
{
  *(_BYTE *)(a1 + 249) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 264) = 0xFFFF;
  *(_QWORD *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 284) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 300) = _Q1;
  *(_OWORD *)(a1 + 316) = _Q1;
  *(_OWORD *)(a1 + 332) = _Q1;
  *(_DWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 352) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 380) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 388) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  *(_BYTE *)(a1 + 592) = 0;
  *(_DWORD *)(a1 + 588) = -1082130432;
  return sub_1000F34E0((_QWORD *)(a1 + 600));
}

uint64_t sub_100C25D4C(uint64_t a1, double *a2)
{
  uint64_t result;

  sub_100C26AB0(a1 + 8, *a2);
  *(_BYTE *)(a1 + 584) = 0;
  result = sub_100C26AB0(a1 + 880, *a2);
  *(_BYTE *)(a1 + 1456) = 0;
  return result;
}

uint64_t sub_100C25D8C(uint64_t a1, double *a2, uint64_t a3)
{
  return sub_100C25D94(a1 + 880, a2, a3);
}

uint64_t sub_100C25D94(uint64_t a1, double *a2, uint64_t a3)
{
  double v3;
  const void *v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  _BOOL8 v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double *v31;
  double v32;
  double v33;
  double v35;
  double v36;
  NSObject *v37;
  const char *v38;
  uint8_t *v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  const char *v52;
  const char *v53;
  _WORD v54[8];
  void *__p[3];
  unint64_t v56;
  char v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint8_t buf[8];

  v3 = *a2 - *(double *)(a1 + 184);
  v64 = v3;
  v62 = 0.0;
  v63 = 0.0;
  v60 = 0.0;
  v61 = 0.0;
  v58 = 0.0;
  v59 = 0.0;
  v57 = 0;
  v56 = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_DWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_DWORD *)a3 = 0xFFFF;
  *(_QWORD *)(a3 + 12) = 0;
  *(_QWORD *)(a3 + 4) = 0;
  *(_OWORD *)(a3 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 36) = _Q0;
  *(_OWORD *)(a3 + 52) = _Q0;
  *(_OWORD *)(a3 + 68) = _Q0;
  *(_DWORD *)(a3 + 84) = 0;
  *(_QWORD *)(a3 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a3 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
  if (!*(_BYTE *)(a1 + 249))
    return 0;
  v11 = *(const void **)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  if (v12 - (_QWORD)v11 != 128)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v13 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = 16;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning,KF:fKalman.P.size() != %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v65 = (void *)0x1004020100;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:fKalman.P.size() != %{public}d", &v65, 8);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v14);
LABEL_84:
    if (v15 != buf)
      free(v15);
    return 0;
  }
  if (*(_QWORD *)(a1 + 120) - *(_QWORD *)(a1 + 112) != 32)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v16 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = 4;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning,KF:fKalman.x.size() != %{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v65 = (void *)0x404020100;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,KF:fKalman.x.size() != %{public}d", &v65, 8);
    v15 = (uint8_t *)v52;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v52);
    goto LABEL_84;
  }
  if (*(double *)(a1 + 184) <= 0.0)
    return 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  sub_10025EA00(&v65, v11, v12, 0x10uLL);
  sub_1000ECE2C(__p, 0x10uLL);
  if (v3 >= 0.0)
  {
    if (!*(_BYTE *)(a1 + 248) && v3 > 600.0 && !*(_BYTE *)(a1 + 824))
      v57 = 1;
  }
  else
  {
    v64 = 0.0;
  }
  if ((sub_1000E5264(a1, &v64, &v57, (uint64_t *)__p, (double **)&v65, a1 + 16, &v59, &v58) & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v37 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_FAULT, "KF:calcTPTQ failed", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_67;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v54[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:calcTPTQ failed", v54, 2);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v38);
    goto LABEL_89;
  }
  v19 = sub_1000F3890((double *)(a1 + 832), &v61, &v60, **(double **)(a1 + 112) * 57.2957795, *(float *)(a1 + 584));
  if ((v19 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v40 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "KF:calc_dNdE failed", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_67;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v54[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:calc_dNdE failed", v54, 2);
    v39 = (uint8_t *)v41;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v41);
    goto LABEL_89;
  }
  v20 = *(double **)(a1 + 112);
  v21 = v58;
  v22 = v20[2];
  v23 = v20[3];
  v24 = *v20 + v59 * v22 / v61;
  v62 = v20[1] + v59 * v23 / v60;
  v63 = v24;
  v25 = sub_1000EDBE8(v19, &v63);
  if (!v25)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v42 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "KF:boundLatitude failed", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_67;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v54[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:boundLatitude failed", v54, 2);
    v39 = (uint8_t *)v43;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v43);
    goto LABEL_89;
  }
  v26 = sub_1000ED990(v25, &v62);
  if ((v26 & 1) != 0)
  {
    v27 = v22 * v21;
    v28 = v23 * v21;
    v29 = v63 * 57.2957795;
    v30 = v62 * 57.2957795;
    v31 = (double *)v65;
    v32 = sqrt(*(double *)v65 + *((double *)v65 + 5));
    v33 = sqrt(*((double *)v65 + 10) + *((double *)v65 + 15));
    if (v33 >= 0.001 || v33 < 0.0)
      v35 = v33;
    else
      v35 = 0.001;
    if (v35 > 30.0)
    {
      v56 = 0xBFF0000000000000;
      v36 = -1.0;
LABEL_77:
      *(_DWORD *)(a3 + 96) = *(_DWORD *)(a1 + 360);
      *(double *)(a3 + 76) = *a2;
      *(_DWORD *)a3 = *(_DWORD *)(a1 + 264);
      *(_DWORD *)(a3 + 84) = *(_DWORD *)(a1 + 348);
      *(_QWORD *)(a3 + 88) = *(_QWORD *)(a1 + 352);
      v47 = v31[15];
      v48 = v31[10];
      v49 = v31[11];
      *(_QWORD *)buf = 0xBFF0000000000000;
      sub_1000EC348(v27, v28, v48, v47, v49, v26, (double *)&v56, (double *)buf);
      *(_QWORD *)(a3 + 60) = v56;
      *(_QWORD *)(a3 + 68) = *(_QWORD *)buf;
      *(double *)(a3 + 4) = v29;
      *(double *)(a3 + 12) = v30;
      *(_DWORD *)(a3 + 132) = *(_DWORD *)(a1 + 396);
      *(double *)(a3 + 20) = v32;
      *(double *)(a3 + 44) = v36;
      *(double *)(a3 + 52) = v35;
      v50 = *(double *)(a1 + 300);
      if (v50 <= 0.0)
      {
        v51 = 0;
        v50 = -1.0;
      }
      else
      {
        v51 = *(_QWORD *)(a1 + 292);
      }
      *(double *)(a3 + 36) = v50;
      *(_QWORD *)(a3 + 28) = v51;
      v17 = 1;
      goto LABEL_68;
    }
    v36 = sqrt(v28 * v28 + v27 * v27);
    if (fabs(v27) + fabs(v28) >= 0.3)
    {
      v46 = atan2(v28, v27) * 57.2957795;
      v56 = *(_QWORD *)&v46;
      if (v46 >= 0.0)
        goto LABEL_77;
      v45 = v46 + 360.0;
    }
    else
    {
      v45 = *(double *)(a1 + 240);
    }
    v56 = *(_QWORD *)&v45;
    goto LABEL_77;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v44 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "KF:boundLongitude failed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v54[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:boundLongitude failed", v54, 2);
    v39 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::predict(const CFAbsoluteTime &, CLDaemonLocation &)", "%s\n", v53);
LABEL_89:
    if (v39 != buf)
      free(v39);
  }
LABEL_67:
  v17 = 0;
LABEL_68:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  return v17;
}

void sub_100C2688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_100C268DC()
{
  operator delete();
}

void sub_100C268F4(_QWORD *a1)
{
  sub_1000F345C(a1);
  operator delete();
}

uint64_t sub_100C26918(uint64_t a1)
{
  float v2;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a1 = off_10217AF20;
  sub_1000F3540(a1 + 8);
  *(_QWORD *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 632) = off_10217AEE0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_BYTE *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 676) = 1115684864;
  *(_QWORD *)(a1 + 680) = off_10217AEE0;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_BYTE *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 724) = 1115684864;
  *(_QWORD *)(a1 + 728) = off_10217AEE0;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_BYTE *)(a1 + 768) = 0;
  *(_DWORD *)(a1 + 772) = 1115684864;
  *(_QWORD *)(a1 + 776) = off_10217AEE0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_BYTE *)(a1 + 816) = 0;
  *(_DWORD *)(a1 + 820) = 1115684864;
  *(_WORD *)(a1 + 824) = 0;
  sub_1002433B8(a1 + 832);
  v2 = 0.0001;
  if (*(float *)(a1 + 676) <= 0.0)
    v2 = 64.0;
  *(float *)(a1 + 676) = v2;
  *(_OWORD *)(a1 + 640) = xmmword_101C1EBC0;
  *(_OWORD *)(a1 + 656) = xmmword_101C1EBD0;
  *(_BYTE *)(a1 + 672) = 1;
  *(_DWORD *)(a1 + 724) = 1115684864;
  *(_OWORD *)(a1 + 688) = xmmword_101C1EBE0;
  *(_OWORD *)(a1 + 704) = xmmword_101C1EBF0;
  *(_BYTE *)(a1 + 720) = 1;
  *(_DWORD *)(a1 + 772) = 1115684864;
  *(_OWORD *)(a1 + 736) = xmmword_101C1EC00;
  *(_OWORD *)(a1 + 752) = xmmword_101C1EC10;
  *(_BYTE *)(a1 + 768) = 1;
  *(_DWORD *)(a1 + 820) = 1115684864;
  *(_OWORD *)(a1 + 784) = xmmword_101C1EBA0;
  *(_OWORD *)(a1 + 800) = xmmword_101C1EBB0;
  *(_BYTE *)(a1 + 816) = 1;
  v3 = *(_OWORD *)(a1 + 784);
  v4 = *(_OWORD *)(a1 + 800);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 816);
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  return a1;
}

void sub_100C26A5C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1000F345C(v1);
  _Unwind_Resume(a1);
}

void sub_100C26A70(_QWORD *a1)
{
  *a1 = off_10217AF20;
  sub_1000F345C(a1 + 1);
  operator delete();
}

uint64_t sub_100C26AB0(uint64_t result, double a2)
{
  double *v2;
  double v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  _OWORD v13[4];
  _BYTE v14[32];
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  _BYTE v18[159];
  char v19;

  v2 = (double *)(result + 284);
  v3 = *(double *)(result + 284);
  if (v3 > 0.0)
  {
    v4 = result;
    if (*(_DWORD *)(result + 360) == 6
      && *(_BYTE *)(result + 576)
      && !*(_BYTE *)(result + 824)
      && a2 - *(double *)(result + 340) > 30.0)
    {
      v5 = *(_OWORD *)(result + 376);
      v15 = *(_OWORD *)(result + 360);
      v16 = v5;
      v17[0] = *(_OWORD *)(result + 392);
      *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(result + 404);
      v6 = *(_OWORD *)(result + 312);
      v13[2] = *(_OWORD *)(result + 296);
      v13[3] = v6;
      v7 = *(_OWORD *)(result + 344);
      *(_OWORD *)v14 = *(_OWORD *)(result + 328);
      *(_OWORD *)&v14[16] = v7;
      v8 = *(_OWORD *)(result + 280);
      v13[0] = *(_OWORD *)(result + 264);
      v13[1] = v8;
      v9 = v3 * v3;
      *(double *)&v14[12] = a2;
      sub_1000E5C70(result, v13, v18, &v19, 1);
      v10 = *(_QWORD *)(v4 + 88);
      if (*(double *)v10 + *(double *)(v10 + 40) < v9)
      {
        v11 = fmax(*v2, 1.0);
        v12 = v11 * v11 * 0.5;
        *(double *)v10 = v12;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(double *)(v10 + 40) = v12;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_QWORD *)(v10 + 96) = 0;
        *(_QWORD *)(v10 + 104) = 0;
      }
      return sub_1000EC42C(v4, (uint64_t)"activeCellUpdate complete", -1.0);
    }
  }
  return result;
}

uint64_t sub_100C26BD8(uint64_t a1)
{
  uint64_t *v2;
  double **v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  double *v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double *v13;
  double *v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  NSObject *v18;
  _BOOL4 v19;
  const char *v20;
  NSObject *v21;
  _BOOL4 v22;
  NSObject *v23;
  _BOOL4 v24;
  NSObject *v25;
  _BOOL4 v26;
  NSObject *v27;
  _BOOL4 v28;
  NSObject *v29;
  _BOOL4 v30;
  NSObject *v31;
  _BOOL4 v32;
  NSObject *v33;
  _BOOL4 v34;
  uint8_t *v35;
  _QWORD v36[2];
  double v37;
  double v38;
  uint8_t buf[1640];

  v38 = 0.0;
  v2 = (uint64_t *)(a1 + 88);
  v3 = (double **)(a1 + 160);
  v4 = sub_1000ECEA0(a1, (uint64_t *)(a1 + 88), &dword_101C1EC90, (_QWORD *)(a1 + 160), &v38);
  if ((v4 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }
    v19 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v19)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    LOWORD(v37) = 0;
    v20 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:ZUPT failed", &v37, 2, v36[0]);
LABEL_68:
    v35 = (uint8_t *)v20;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::zupt()", "%s\n", v20);
    if (v35 != buf)
      free(v35);
    return 0;
  }
  v5 = v38 + 0.0001;
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(double **)(a1 + 160);
  v8 = *(double **)(a1 + 136);
  *v8 = *v7 / (v38 + 0.0001);
  v8[1] = v7[1] / v5;
  v8[2] = v7[2] / v5;
  v8[3] = v7[3] / v5;
  v37 = 0.0 - *(double *)(v6 + 16);
  v9 = sub_1000ED2D4(v4, &v37, (_QWORD *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), (double **)(a1 + 112));
  if ((v9 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v21 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "KF:ZUPT innovation update failed", buf, 2u);
    }
    v22 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v22)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 == -1)
      goto LABEL_24;
LABEL_71:
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
LABEL_24:
    LOWORD(v36[0]) = 0;
    v20 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:ZUPT innovation update failed", v36, 2, v36[0]);
    goto LABEL_68;
  }
  if (!sub_1000EC93C(v9, v2, (double **)(a1 + 136), &dword_101C1EC90))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
    }
    v24 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v24)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 == -1)
      goto LABEL_31;
LABEL_72:
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
LABEL_31:
    LOWORD(v36[0]) = 0;
    v20 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:updateP failed", v36, 2, v36[0]);
    goto LABEL_68;
  }
  sub_1000EC42C(a1, (uint64_t)"zupt, vn update", -1.0);
  sub_1000EDE04(a1);
  if ((v10 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v25 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }
    v26 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v26)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 == -1)
      goto LABEL_67;
    goto LABEL_73;
  }
  v11 = sub_1000ECEA0(v10, v2, &dword_101C1EC94, v3, &v38);
  if ((v11 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v27 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
    }
    v28 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v28)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 == -1)
      goto LABEL_67;
    goto LABEL_73;
  }
  v12 = v38 + 0.0001;
  v13 = *v3;
  v14 = *(double **)(a1 + 136);
  *v14 = **v3 / (v38 + 0.0001);
  v14[1] = v13[1] / v12;
  v14[2] = v13[2] / v12;
  v14[3] = v13[3] / v12;
  v37 = 0.0 - *(double *)(*(_QWORD *)(a1 + 112) + 24);
  v15 = sub_1000ED2D4(v11, &v37, (_QWORD *)(a1 + 136), (double *)(a1 + 208), (double *)(a1 + 200), (double **)(a1 + 112));
  if ((v15 & 1) == 0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v29 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "KF:ZUPT innovation update failed", buf, 2u);
    }
    v30 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v30)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 == -1)
      goto LABEL_24;
    goto LABEL_71;
  }
  if (!sub_1000EC93C(v15, v2, (double **)(a1 + 136), &dword_101C1EC94))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v31 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "KF:updateP failed", buf, 2u);
    }
    v32 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v32)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 == -1)
      goto LABEL_31;
    goto LABEL_72;
  }
  sub_1000EC42C(a1, (uint64_t)"ZUPT, ve update", -1.0);
  sub_1000EDE04(a1);
  if ((v16 & 1) != 0)
    return 1;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v33 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "KF:ZUPT failed", buf, 2u);
  }
  v34 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v34)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 == -1)
    {
LABEL_67:
      LOWORD(v36[0]) = 0;
      v20 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:ZUPT failed", v36, 2, v36[0]);
      goto LABEL_68;
    }
LABEL_73:
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
    goto LABEL_67;
  }
  return result;
}

uint64_t sub_100C2753C(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unsigned __int128 v6;
  double v7;
  uint64_t v9;
  double v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t result;
  char *v14;
  uint64_t *v15;
  double *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float64x2_t *v22;
  double v23;
  double v24;
  double v25;
  __double2 v26;
  NSObject *v27;
  const char *v28;
  double v29;
  float v30;
  float v31;
  int v32;
  BOOL v33;
  NSObject *v34;
  __int128 v35;
  uint8_t *v36;
  float64x2_t v37;
  _WORD v38[8];
  double v39[2];
  _BYTE v40[32];
  _BYTE v41[48];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _OWORD v45[2];
  uint8_t buf[1640];

  v2 = (_OWORD *)(a1 + 420);
  v3 = *(_OWORD *)(a1 + 532);
  v43 = *(_OWORD *)(a1 + 516);
  v44 = v3;
  v45[0] = *(_OWORD *)(a1 + 548);
  *(_OWORD *)((char *)v45 + 12) = *(_OWORD *)(a1 + 560);
  v4 = *(_OWORD *)(a1 + 468);
  *(_OWORD *)v41 = *(_OWORD *)(a1 + 452);
  *(_OWORD *)&v41[16] = v4;
  v5 = *(_OWORD *)(a1 + 500);
  *(_OWORD *)&v41[32] = *(_OWORD *)(a1 + 484);
  v42 = v5;
  v6 = *(_OWORD *)(a1 + 436);
  *(_OWORD *)v40 = *(_OWORD *)(a1 + 420);
  *(_OWORD *)&v40[16] = v6;
  v7 = COERCE_DOUBLE(v6 >> 32);
  if (v7 > 0.0)
  {
    v9 = a1;
    v37 = *(float64x2_t *)&v40[4];
    v10 = *(double *)&v41[28];
    v39[0] = fmax(v7, 1.0);
    if (*(double *)&v41[20] <= 0.0)
    {
      v15 = (uint64_t *)(a1 + 88);
      if (*(_BYTE *)(a1 + 248))
        v16 = (double *)&unk_101C1ECA0;
      else
        v16 = (double *)&unk_101C1ECA8;
LABEL_27:
      if ((sub_100C28188(a1, v15, v39, v16) & 1) != 0)
      {
        v18 = v2[7];
        *(_OWORD *)(v9 + 360) = v2[6];
        *(_OWORD *)(v9 + 376) = v18;
        *(_OWORD *)(v9 + 392) = v2[8];
        v19 = v2[3];
        *(_OWORD *)(v9 + 296) = v2[2];
        *(_OWORD *)(v9 + 312) = v19;
        v20 = v2[5];
        *(_OWORD *)(v9 + 328) = v2[4];
        *(_OWORD *)(v9 + 344) = v20;
        v21 = v2[1];
        *(_OWORD *)(v9 + 264) = *v2;
        *(_OWORD *)(v9 + 280) = v21;
        *(_OWORD *)(v9 + 404) = *(_OWORD *)((char *)v2 + 140);
        *(_QWORD *)(v9 + 184) = *(_QWORD *)(v9 + 496);
        v22 = *(float64x2_t **)(v9 + 112);
        *v22 = vmulq_f64(v37, (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
        v23 = *(double *)&v41[12];
        v24 = 0.0;
        if (*(double *)&v41[12] < 0.0)
        {
          v25 = 0.0;
        }
        else
        {
          v25 = 0.0;
          if (v10 >= 0.0)
          {
            v26 = __sincos_stret(v10 * 0.0174532925);
            v24 = v26.__cosval * v23;
            v25 = v26.__sinval * v23;
          }
        }
        v22[1].f64[0] = v24;
        v22[1].f64[1] = v25;
        v29 = *(double *)(v9 + 456);
        if (v29 > 0.0)
        {
          v30 = *(double *)(v9 + 448);
          *(float *)(v9 + 584) = v30;
          v31 = v29 * v29;
          *(float *)(v9 + 588) = v31;
          if (v31 < 1.0)
            *(_DWORD *)(v9 + 588) = 1065353216;
        }
        *(_BYTE *)(v9 + 249) = 1;
        *(_QWORD *)(v9 + 256) = 0;
        v32 = *(_DWORD *)(v9 + 516);
        if (v32 == 6)
          *(_BYTE *)(v9 + 576) = 1;
        v33 = (sub_1000EBF88(v32) & 1) != 0 || *(_DWORD *)(v9 + 516) == 4 && *(int *)(v9 + 504) > 72;
        *(_BYTE *)(v9 + 592) = v33;
        sub_1000F34E0((_QWORD *)(v9 + 600));
        if ((sub_1000EBA50(v9, a2, 0) & 1) != 0)
        {
          sub_1000EC42C(v9, (uint64_t)"init", -1.0);
          return 1;
        }
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v34 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "KF:getResult failed", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_57;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v38[0] = 0;
        v28 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:getResult failed", v38, 2);
      }
      else
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v27 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "KF:init P failed", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_57;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v38[0] = 0;
        v28 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:init P failed", v38, 2);
      }
      v36 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::seedTheFilter(CLDaemonLocation &)", "%s\n", v28);
      if (v36 != buf)
        free(v36);
LABEL_57:
      sub_100C25CCC(v9);
      result = 0;
      v35 = *(_OWORD *)(v9 + 800);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 784);
      *(_OWORD *)(v9 + 40) = v35;
      *(_QWORD *)(v9 + 56) = *(_QWORD *)(v9 + 816);
      *(_BYTE *)(v9 + 248) = 0;
      *(_QWORD *)(v9 + 624) = 0;
      return result;
    }
    if (*(double *)&v41[12] < 0.0)
    {
LABEL_26:
      v15 = (uint64_t *)(v9 + 88);
      v16 = (double *)&v41[20];
      goto LABEL_27;
    }
    if (*(double *)&v41[12] > 1.5 && *(_BYTE *)(a1 + 248))
    {
      *(_BYTE *)(a1 + 248) = 0;
    }
    else
    {
      a1 = sub_1000EBF88(v43);
      if (*(double *)&v41[20] >= 5.0 || *(double *)&v41[12] <= 10.0 || !(_DWORD)a1)
      {
LABEL_24:
        if (v10 >= 0.0)
          *(double *)(v9 + 240) = v10;
        goto LABEL_26;
      }
    }
    v17 = *(_OWORD *)(v9 + 800);
    *(_OWORD *)(v9 + 24) = *(_OWORD *)(v9 + 784);
    *(_OWORD *)(v9 + 40) = v17;
    *(_QWORD *)(v9 + 56) = *(_QWORD *)(v9 + 816);
    goto LABEL_24;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "KF:seedTheFilter,hunc<=0", buf, 2u);
  }
  v12 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v12)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    LOWORD(v39[0]) = 0;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:seedTheFilter,hunc<=0", v39, 2);
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::seedTheFilter(CLDaemonLocation &)", "%s\n", v14);
    if (v14 != (char *)buf)
      free(v14);
    return 0;
  }
  return result;
}

uint64_t sub_100C27B90(uint64_t a1)
{
  uint64_t v7;
  int v8;
  int *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  NSObject *v18;
  char *v19;
  double v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  double v25;
  NSObject *v26;
  _WORD v28[6];
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint8_t buf[1640];

  if (*(_QWORD *)(a1 + 616) < 2uLL)
    return 0;
  v66 = 0;
  v67 = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  v68 = xmmword_101BAFC90;
  v69 = _Q1;
  v70 = _Q1;
  v71 = _Q1;
  v65 = 0xFFFF;
  v72 = 0;
  v73 = 0xBFF0000000000000;
  v74 = 0;
  v75 = 0;
  v77 = 0xBFF0000000000000;
  v76 = 0;
  v78 = 0x7FFFFFFF;
  v80 = 0;
  v81 = 0;
  v79 = 0;
  v82 = 0;
  v48 = 0;
  v49 = 0;
  v50 = xmmword_101BAFC90;
  v51 = _Q1;
  v52 = _Q1;
  v53 = _Q1;
  v47 = 0xFFFF;
  v54 = 0;
  v56 = 0;
  v57 = 0;
  v55 = 0xBFF0000000000000;
  v59 = 0xBFF0000000000000;
  v58 = 0;
  v60 = 0x7FFFFFFF;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v64 = 0;
  v29 = 0xFFFF;
  v30 = 0;
  v31 = 0;
  v32 = xmmword_101BAFC90;
  v33 = _Q1;
  v34 = _Q1;
  v35 = _Q1;
  v36 = 0;
  v39 = 0;
  v37 = 0xBFF0000000000000;
  v38 = 0;
  v41 = 0xBFF0000000000000;
  v40 = 0;
  v42 = 0x7FFFFFFF;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v46 = 0;
  v7 = *(_QWORD *)(a1 + 608);
  if (v7 == a1 + 600)
    return 0;
  do
  {
    v8 = *(_DWORD *)(v7 + 112);
    switch(v8)
    {
      case 9:
        v9 = &v29;
        break;
      case 6:
        v9 = &v65;
        break;
      case 4:
        v9 = &v47;
        break;
      default:
        goto LABEL_10;
    }
    v10 = *(_OWORD *)(v7 + 128);
    *((_OWORD *)v9 + 6) = *(_OWORD *)(v7 + 112);
    *((_OWORD *)v9 + 7) = v10;
    *((_OWORD *)v9 + 8) = *(_OWORD *)(v7 + 144);
    *(_OWORD *)(v9 + 35) = *(_OWORD *)(v7 + 156);
    v11 = *(_OWORD *)(v7 + 64);
    *((_OWORD *)v9 + 2) = *(_OWORD *)(v7 + 48);
    *((_OWORD *)v9 + 3) = v11;
    v12 = *(_OWORD *)(v7 + 96);
    *((_OWORD *)v9 + 4) = *(_OWORD *)(v7 + 80);
    *((_OWORD *)v9 + 5) = v12;
    v13 = *(_OWORD *)(v7 + 32);
    *(_OWORD *)v9 = *(_OWORD *)(v7 + 16);
    *((_OWORD *)v9 + 1) = v13;
LABEL_10:
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7 != a1 + 600);
  v14 = *(double *)&v68;
  v15 = *(double *)&v50;
  if (*(double *)&v68 <= 0.0
    || *(double *)&v50 <= 0.0
    || ((sub_10011E258((double *)(a1 + 832), (uint64_t)&v47, (uint64_t)&v65),
         v14 = *(double *)&v68,
         v15 = *(double *)&v50,
         *(double *)&v50 <= *(double *)&v68)
      ? (v17 = *(double *)&v68)
      : (v17 = *(double *)&v50),
        v16 >= v17 * 3.0))
  {
    v20 = *(double *)&v32;
    if (v14 > 0.0 && *(double *)&v32 > 0.0)
    {
      sub_10011E258((double *)(a1 + 832), (uint64_t)&v29, (uint64_t)&v65);
      v22 = *(double *)&v68;
      v20 = *(double *)&v32;
      if (*(double *)&v32 > *(double *)&v68)
        v22 = *(double *)&v32;
      if (v21 < v22 * 3.0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v23 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "KF:rejected cell and coarse-gps locations are consistent,filter should reset", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v28[0] = 0;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:rejected cell and coarse-gps locations are consistent,filter should reset", v28, 2);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()", "%s\n", v19);
        goto LABEL_54;
      }
      v15 = *(double *)&v50;
    }
    if (v15 > 0.0 && v20 > 0.0)
    {
      sub_10011E258((double *)(a1 + 832), (uint64_t)&v47, (uint64_t)&v29);
      v25 = *(double *)&v50;
      if (*(double *)&v32 > *(double *)&v50)
        v25 = *(double *)&v32;
      if (v24 < v25 * 3.0)
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v26 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "KF:rejected wifi and coarse-gps locations are consistent,filter should reset", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          return 1;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        v28[0] = 0;
        v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:rejected wifi and coarse-gps locations are consistent,filter should reset", v28, 2);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()", "%s\n", v19);
LABEL_54:
        if (v19 != (char *)buf)
          free(v19);
        return 1;
      }
    }
    return 0;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v18 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "KF:rejected cell and wifi locations are consistent,filter should reset", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v28[0] = 0;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "KF:rejected cell and wifi locations are consistent,filter should reset", v28, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()", "%s\n", v19);
    goto LABEL_54;
  }
  return 1;
}

uint64_t sub_100C28188(uint64_t a1, uint64_t *a2, double *a3, double *a4)
{
  NSObject *v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  NSObject *v12;
  _BOOL4 v13;
  const char *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint8_t *v17;
  char *v18;
  _QWORD v19[2];
  uint8_t buf[1640];

  if (*a3 <= 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    v12 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "KF:initP,hunc <= 0", buf, 2u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v13)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    LOWORD(v19[0]) = 0;
    v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:initP,hunc <= 0", v19, 2, v19[0]);
LABEL_27:
    v17 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)", "%s\n", v14);
    if (v17 != buf)
      free(v17);
    return 0;
  }
  if (*a4 > 0.0)
  {
    if (a2[1] - *a2 != 128)
    {
      sub_1000F3860((uint64_t)a2, 0x10uLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217AF90);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,P was not dimensioned", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217AF90);
        LOWORD(v19[0]) = 0;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#Warning,P was not dimensioned", v19, 2);
        sub_100512490("Generic", 1, 0, 2, "BOOL CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)", "%s\n", v18);
        if (v18 != (char *)buf)
          free(v18);
      }
    }
    v8 = *a3 * *a3 * 0.5;
    v9 = *a2;
    v10 = *a4 * *a4 * 0.5;
    *(double *)v9 = v8;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(double *)(v9 + 40) = v8;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(double *)(v9 + 80) = v10;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(double *)(v9 + 120) = v10;
    return 1;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217AF90);
  v15 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "KF:initP,speedUnc <= 0", buf, 2u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217AF90);
    LOWORD(v19[0]) = 0;
    v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "KF:initP,speedUnc <= 0", v19, 2, v19[0]);
    goto LABEL_27;
  }
  return result;
}

void sub_100C285C4(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t *sub_100C285F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  for (i = a1[1]; a2 != a3 && (uint64_t *)i != a1; i = *(_QWORD *)(i + 8))
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(i + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(i + 32) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    v8 = *(_OWORD *)(a2 + 64);
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(i + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(i + 96) = v9;
    *(_OWORD *)(i + 48) = v7;
    *(_OWORD *)(i + 64) = v8;
    v10 = *(_OWORD *)(a2 + 112);
    v11 = *(_OWORD *)(a2 + 128);
    v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(i + 156) = *(_OWORD *)(a2 + 156);
    *(_OWORD *)(i + 128) = v11;
    *(_OWORD *)(i + 144) = v12;
    *(_OWORD *)(i + 112) = v10;
    a2 = *(_QWORD *)(a2 + 8);
  }
  if ((uint64_t *)i == a1)
    return sub_100C02074((uint64_t)a1, a1, a2, a3);
  else
    return sub_1005E98AC((uint64_t)a1, (uint64_t *)i, a1);
}

uint64_t sub_100C287EC(uint64_t a1, void *a2, uint64_t a3)
{
  CLAmbientLightDecisionTreeHelper *v5;

  *(_DWORD *)a1 = 0;
  sub_100270E34(a1 + 8, a3);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  v5 = [CLAmbientLightDecisionTreeHelper alloc];
  *(_QWORD *)(a1 + 40) = v5;
  -[CLAmbientLightDecisionTreeHelper initWithQueue:decisionTreeObj:](v5, "initWithQueue:decisionTreeObj:", objc_msgSend(objc_msgSend(*(id *)(a1 + 48), "silo"), "queue"), a1);
  return a1;
}

void sub_100C28868(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 + 32);
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = *(_QWORD **)(v2 + 32);
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C288A8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  objc_msgSend(*(id *)(a1 + 40), "shutdown");

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(_QWORD **)(a1 + 32);
  if (v2 == (_QWORD *)(a1 + 8))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_100C28920(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_100C2894C(uint64_t a1, uint64_t a2, double a3)
{
  int v6;
  std::logic_error *exception;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_10025EA00((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_DWORD *)(a1 + 24) = (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 48) = a3;
  if (!sub_100C28A60(a1))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Hour bin edges must be strictly increasing, [0.0, 24.0), and there must be at least one edge");
  }
  sub_100C28B08(a1, a3);
  v6 = sub_100C28EEC(a1, *(double *)(a1 + 48));
  if (v6 != *(_DWORD *)(a1 + 40))
    *(_DWORD *)(a1 + 40) = v6;
  return a1;
}

void sub_100C28A34(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100C28A60(uint64_t a1)
{
  double *v1;
  unint64_t v2;
  double v3;
  _BOOL8 result;
  double v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  BOOL v13;

  v1 = *(double **)a1;
  v2 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((int)(v2 >> 3) < 1)
    return 0;
  v3 = *v1;
  if (*v1 < 0.0 || v3 >= 24.0)
    return 0;
  if ((v2 >> 3) < 2)
    return 1;
  result = 0;
  v6 = v1[1];
  if (v6 < 24.0 && v6 >= 0.0 && v6 > v3)
  {
    v8 = (int)((uint64_t)v2 >> 3);
    v9 = (v2 >> 3);
    v10 = 2;
    do
    {
      v11 = v10;
      if (v9 == v10)
        break;
      v12 = v1[v10];
      if (v12 >= 24.0)
        break;
      ++v10;
      v13 = v12 >= 0.0 && v12 > v6;
      v6 = v1[v11];
    }
    while (v13);
    return v11 >= v8;
  }
  return result;
}

BOOL sub_100C28B08(uint64_t a1, double a2)
{
  double v3;
  double v4;

  v3 = (double)-[NSTimeZone secondsFromGMTForDate:](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMTForDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2));
  v4 = *(double *)(a1 + 32);
  if (v4 != v3)
    *(double *)(a1 + 32) = v3;
  return v4 != v3;
}

double sub_100C28B7C(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v2 = *(double *)(*(_QWORD *)a1 + 8 * *(int *)(a1 + 40)) * 3600.0;
  v3 = *(double *)(a1 + 48);
  v4 = -[NSTimeZone secondsFromGMTForDate:](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMTForDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v3));
  v5 = *(double *)(a1 + 32);
  v6 = floor((*(double *)(a1 + 48) + v5) / 86400.0) * 86400.0;
  if (v2 <= (v3 + (double)v4 + floor((v3 + (double)v4) / 86400.0) * -86400.0) / 3600.0 * 3600.0)
    v7 = v6;
  else
    v7 = v6 + -86400.0;
  return v2 + v7 - v5;
}

double sub_100C28C84(double a1)
{
  uint64_t v2;

  v2 = -[NSTimeZone secondsFromGMTForDate:](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMTForDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a1));
  return ((double)v2 + a1 - floor(((double)v2 + a1) / 86400.0) * 86400.0) / 3600.0;
}

uint64_t sub_100C28D00(uint64_t a1, unsigned int a2, double a3)
{
  int v3;
  int v4;
  double *v5;
  double v6;
  double v7;
  NSObject *v8;
  _BOOL4 v9;
  uint64_t result;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint8_t buf[1640];

  if ((a2 & 0x80000000) == 0)
  {
    v3 = *(_DWORD *)(a1 + 24);
    if (v3 > (int)a2)
    {
      v4 = v3 - 1;
      v5 = *(double **)a1;
      v6 = *(double *)(*(_QWORD *)a1 + 8 * a2);
      if (v4 == a2)
      {
        if (v6 <= a3)
          return 1;
        v7 = *v5;
        return v7 > a3;
      }
      if (v6 <= a3)
      {
        v7 = v5[a2 + 1];
        return v7 > a3;
      }
      return 0;
    }
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10217AFF8);
  v8 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "WallClockHourBinTracker, bin index out of bounds", buf, 2u);
  }
  v9 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v9)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217AFF8);
    v13[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "WallClockHourBinTracker, bin index out of bounds", v13, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLWallClockHourBinTracker::isHourInBin(double, int) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
    return 0;
  }
  return result;
}

uint64_t sub_100C28EEC(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;
  char v6;
  uint64_t v7;
  int v8;
  int i;
  int v10;
  char v11;

  v4 = -[NSTimeZone secondsFromGMTForDate:](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMTForDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2));
  v5 = ((double)v4 + a2 - floor(((double)v4 + a2) / 86400.0) * 86400.0) / 3600.0;
  v6 = sub_100C28D00(a1, *(_DWORD *)(a1 + 40), v5);
  v7 = *(unsigned int *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    v8 = *(_DWORD *)(a1 + 24) + v7;
    for (i = v7 + 1; i < v8; ++i)
    {
      v10 = *(_DWORD *)(a1 + 24);
      v7 = (i % v10);
      v11 = sub_100C28D00(a1, i % v10, v5);
      if ((v11 & 1) != 0)
        return v7;
    }
    return *(unsigned int *)(a1 + 40);
  }
  return v7;
}

BOOL sub_100C28FD0(uint64_t a1, double a2)
{
  NSObject *v2;
  _BOOL4 v3;
  _BOOL8 result;
  const char *v5;
  uint8_t *v6;
  _BOOL4 v8;
  int v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  _WORD v14[8];
  uint8_t buf[1640];

  if (*(double *)(a1 + 48) <= a2)
  {
    *(double *)(a1 + 48) = a2;
    v8 = sub_100C28B08(a1, a2);
    v9 = sub_100C28EEC(a1, *(double *)(a1 + 48));
    v10 = *(_DWORD *)(a1 + 40);
    result = v9 != v10;
    if (v9 != v10)
      *(_DWORD *)(a1 + 40) = v9;
    if (v8)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217AFF8);
      v11 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WallClockHourBinTracker, time zone change", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10217AFF8);
        v14[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "WallClockHourBinTracker, time zone change", v14, 2);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLWallClockHourBinTracker::update(CFAbsoluteTime)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      return 1;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217AFF8);
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "WallClockHourBinTracker, unexpected time rollback", buf, 2u);
    }
    v3 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217AFF8);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "WallClockHourBinTracker, unexpected time rollback", v14, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLWallClockHourBinTracker::update(CFAbsoluteTime)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return 0;
    }
  }
  return result;
}

void sub_100C292D8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100C29304(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a3[1];
  *(_QWORD *)(a1 + 16) = *a3;
  *(_QWORD *)(a1 + 24) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = a4[1];
  *(_QWORD *)(a1 + 32) = *a4;
  *(_QWORD *)(a1 + 40) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(std::__shared_weak_count **)(a1 + 8);
  v29 = *(_QWORD *)a1;
  v30 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  sub_100C2FD3C(a1 + 48, &v29);
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 8);
  v27 = *(_QWORD *)a1;
  v28 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  sub_100C2FDEC(a1 + 216, &v27);
  v23 = v28;
  if (v28)
  {
    v24 = (unint64_t *)&v28->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *(_BYTE *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 564) = xmmword_101C1ED90;
  *(_OWORD *)(a1 + 580) = unk_101C1EDA0;
  *(_OWORD *)(a1 + 596) = xmmword_101C1EDB0;
  *(_OWORD *)(a1 + 608) = *(__int128 *)((char *)&xmmword_101C1EDB0 + 12);
  *(_QWORD *)(a1 + 624) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 656) = 0;
  return a1;
}

void sub_100C294B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_100261F44((uint64_t)&a9);
  sub_100C294F4(v12);
  sub_100261F44(v11);
  sub_100261F44(v10);
  sub_100261F44(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100C294F4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return sub_100261F44(a1);
}

void sub_100C29528(uint64_t a1, uint64_t a2)
{
  sub_1000D5200(a1 + 48, 0, *(double *)(a2 + 8));
  sub_100C29560(a1 + 216, (__int128 *)a2);
}

void sub_100C29560(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  _BYTE *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  NSObject *v20;
  double v21;
  NSObject *v22;
  double v23;
  double v24;
  NSObject *v25;
  _BYTE *v26;
  _BOOL4 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  NSObject *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  _BYTE *v72;
  _BOOL4 v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE *v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  _BYTE buf[62];
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  _BYTE __dst[24];
  _BYTE __p[62];
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;

  if (*(double *)(a1 + 176) == 0.0)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v4 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__p, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__p[16] = *(_QWORD *)(a1 + 56);
      }
      v5 = __p;
      if (__p[23] < 0)
        v5 = *(_BYTE **)__p;
      v6 = *((_QWORD *)a2 + 1);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v5;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutDetector (%{public}s): Initializing StepCountEntry %{public}.2f", buf, 0x16u);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v65 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
      }
      v67 = buf;
      if (buf[23] < 0)
        v67 = *(_BYTE **)buf;
      v68 = *((_QWORD *)a2 + 1);
      *(_DWORD *)__dst = 136446466;
      *(_QWORD *)&__dst[4] = v67;
      *(_WORD *)&__dst[12] = 2050;
      *(_QWORD *)&__dst[14] = v68;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v65, 2, "BoutDetector (%{public}s): Initializing StepCountEntry %{public}.2f", __dst, 22);
      v70 = v69;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v70);
      if (v70 != __p)
        free(v70);
    }
    v7 = *a2;
    v8 = a2[1];
    *(_OWORD *)(a1 + 200) = a2[2];
    *(_OWORD *)(a1 + 184) = v8;
    *(_OWORD *)(a1 + 168) = v7;
    v9 = a2[3];
    v10 = a2[4];
    v11 = a2[5];
    *(_OWORD *)(a1 + 264) = a2[6];
    *(_OWORD *)(a1 + 248) = v11;
    *(_OWORD *)(a1 + 232) = v10;
    *(_OWORD *)(a1 + 216) = v9;
    v12 = a2[7];
    v13 = a2[8];
    v14 = a2[10];
    *(_OWORD *)(a1 + 312) = a2[9];
    *(_OWORD *)(a1 + 328) = v14;
    *(_OWORD *)(a1 + 280) = v12;
    *(_OWORD *)(a1 + 296) = v13;
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v15 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    v16 = *((_QWORD *)a2 + 1);
    v17 = *((_DWORD *)a2 + 6) - *(_DWORD *)(a1 + 192);
    *(_DWORD *)__p = 134218240;
    *(_QWORD *)&__p[4] = v16;
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BoutExtractor: Received StepCountEntry -- startTime,%.2f,deltaSteps,%d", __p, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v61 = *((_QWORD *)a2 + 1);
    v62 = *((_DWORD *)a2 + 6) - *(_DWORD *)(a1 + 192);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v61;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v62;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: Received StepCountEntry -- startTime,%.2f,deltaSteps,%d", COERCE_DOUBLE(buf), 18);
    v64 = (char *)v63;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v63);
    if (v64 != __p)
      free(v64);
  }
  if (!*(_DWORD *)(a1 + 148))
  {
    v18 = *((_DWORD *)a2 + 6);
    v19 = *(_DWORD *)(a1 + 192);
    if (v18 < v19)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v20 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
        }
        v26 = buf;
        if (buf[23] < 0)
          v26 = *(_BYTE **)buf;
        v27 = *(double *)(a1 + 80) != 0.0;
        v28 = *((_DWORD *)a2 + 6);
        v29 = *(_DWORD *)(a1 + 192);
        v30 = *((_QWORD *)a2 + 1);
        v31 = *(_QWORD *)(a1 + 176);
        *(_DWORD *)__p = 136447491;
        *(_QWORD *)&__p[4] = v26;
        *(_WORD *)&__p[12] = 1026;
        *(_DWORD *)&__p[14] = v27;
        *(_WORD *)&__p[18] = 1025;
        *(_DWORD *)&__p[20] = v28;
        *(_WORD *)&__p[24] = 1025;
        *(_DWORD *)&__p[26] = v29;
        *(_WORD *)&__p[30] = 2050;
        *(_QWORD *)&__p[32] = v30;
        *(_WORD *)&__p[40] = 2050;
        *(_QWORD *)&__p[42] = v31;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Step count rolled back. boutInProgress, %{public}d, curStepCount, %{private}u, prevStepCount, %{private}u, curStepTime, %{public}.2f, prevStepTime, %{public}.2f", __p, 0x32u);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_45;
      bzero(__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v66 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 56);
      }
      v72 = __dst;
      if (__dst[23] < 0)
        v72 = *(_BYTE **)__dst;
      v73 = *(double *)(a1 + 80) != 0.0;
      v74 = *((_DWORD *)a2 + 6);
      v75 = *(_DWORD *)(a1 + 192);
      v76 = *((_QWORD *)a2 + 1);
      v77 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 136447491;
      *(_QWORD *)&buf[4] = v72;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v73;
      *(_WORD *)&buf[18] = 1025;
      *(_DWORD *)&buf[20] = v74;
      *(_WORD *)&buf[24] = 1025;
      *(_DWORD *)&buf[26] = v75;
      *(_WORD *)&buf[30] = 2050;
      *(_QWORD *)&buf[32] = v76;
      *(_WORD *)&buf[40] = 2050;
      *(_QWORD *)&buf[42] = v77;
      LODWORD(v104) = 50;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v66, 16, "BoutDetector (%{public}s): Step count rolled back. boutInProgress, %{public}d, curStepCount, %{private}u, prevStepCount, %{private}u, curStepTime, %{public}.2f, prevStepTime, %{public}.2f", buf, v104);
      v79 = v78;
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v79);
      if (v79 == __p)
        goto LABEL_45;
      goto LABEL_107;
    }
    v21 = *((double *)a2 + 11) - *(double *)(a1 + 256);
    if (v21 < 0.0)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v22 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
        }
        v32 = buf;
        if (buf[23] < 0)
          v32 = *(_BYTE **)buf;
        v33 = *(double *)(a1 + 80) != 0.0;
        v34 = *((_QWORD *)a2 + 11);
        v35 = *(_QWORD *)(a1 + 256);
        v36 = *((_QWORD *)a2 + 1);
        v37 = *(_QWORD *)(a1 + 176);
        *(_DWORD *)__p = 136447491;
        *(_QWORD *)&__p[4] = v32;
        *(_WORD *)&__p[12] = 1026;
        *(_DWORD *)&__p[14] = v33;
        *(_WORD *)&__p[18] = 2049;
        *(_QWORD *)&__p[20] = v34;
        *(_WORD *)&__p[28] = 2049;
        *(_QWORD *)&__p[30] = v35;
        *(_WORD *)&__p[38] = 2050;
        *(_QWORD *)&__p[40] = v36;
        *(_WORD *)&__p[48] = 2050;
        *(_QWORD *)&__p[50] = v37;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "BoutDetector (%{public}s): Active time rolled back. boutInProgress, %{public}d, curActiveTime, %{private}.2f, prevActiveTime, %{private}.2f, curStepTime, %{public}.2f, prevStepTime, %{public}.2f", __p, 0x3Au);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_45;
      bzero(__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v71 = qword_10229FE98;
      if (*(char *)(a1 + 63) < 0)
      {
        sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 56);
      }
      v82 = __dst;
      if (__dst[23] < 0)
        v82 = *(_BYTE **)__dst;
      v83 = *(double *)(a1 + 80) != 0.0;
      v84 = *((_QWORD *)a2 + 11);
      v85 = *(_QWORD *)(a1 + 256);
      v86 = *((_QWORD *)a2 + 1);
      v87 = *(_QWORD *)(a1 + 176);
      *(_DWORD *)buf = 136447491;
      *(_QWORD *)&buf[4] = v82;
      *(_WORD *)&buf[12] = 1026;
      *(_DWORD *)&buf[14] = v83;
      *(_WORD *)&buf[18] = 2049;
      *(_QWORD *)&buf[20] = v84;
      *(_WORD *)&buf[28] = 2049;
      *(_QWORD *)&buf[30] = v85;
      *(_WORD *)&buf[38] = 2050;
      *(_QWORD *)&buf[40] = v86;
      *(_WORD *)&buf[48] = 2050;
      *(_QWORD *)&buf[50] = v87;
      LODWORD(v104) = 58;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v71, 16, "BoutDetector (%{public}s): Active time rolled back. boutInProgress, %{public}d, curActiveTime, %{private}.2f, prevActiveTime, %{private}.2f, curStepTime, %{public}.2f, prevStepTime, %{public}.2f", buf, v104);
      v79 = v88;
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      sub_100512490("Generic", 1, 0, 0, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v79);
      if (v79 == __p)
        goto LABEL_45;
LABEL_107:
      free(v79);
LABEL_45:
      sub_100B6B5A4(a1, 5);
LABEL_76:
      v53 = *a2;
      v54 = a2[2];
      *(_OWORD *)(a1 + 184) = a2[1];
      *(_OWORD *)(a1 + 200) = v54;
      *(_OWORD *)(a1 + 168) = v53;
      v55 = a2[3];
      v56 = a2[4];
      v57 = a2[6];
      *(_OWORD *)(a1 + 248) = a2[5];
      *(_OWORD *)(a1 + 264) = v57;
      *(_OWORD *)(a1 + 216) = v55;
      *(_OWORD *)(a1 + 232) = v56;
      v58 = a2[7];
      v59 = a2[8];
      v60 = a2[10];
      *(_OWORD *)(a1 + 312) = a2[9];
      *(_OWORD *)(a1 + 328) = v60;
      *(_OWORD *)(a1 + 280) = v58;
      *(_OWORD *)(a1 + 296) = v59;
      return;
    }
    v23 = *((double *)a2 + 2);
    if (v23 <= 0.0)
    {
      v24 = *((double *)a2 + 1);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v25 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
        }
        v38 = buf;
        if (buf[23] < 0)
          v38 = *(_BYTE **)buf;
        v40 = *((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        v41 = *(_QWORD *)a2;
        *(_DWORD *)__p = 136446978;
        *(_QWORD *)&__p[4] = v38;
        *(_WORD *)&__p[12] = 2050;
        *(_QWORD *)&__p[14] = v39;
        *(_WORD *)&__p[22] = 2050;
        *(_QWORD *)&__p[24] = v40;
        *(_WORD *)&__p[32] = 2050;
        *(_QWORD *)&__p[34] = v41;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "BoutDetector(%{public}s): #warning, invalid firstStepTime (%{public}.2f)) at start of bout (%{public}.2f)). timestamp=%{public}.2f", __p, 0x2Au);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      v23 = v24 + -2.56;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v80 = qword_10229FE98;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 56);
        }
        v89 = __dst;
        if (__dst[23] < 0)
          v89 = *(_BYTE **)__dst;
        v91 = *((_QWORD *)a2 + 1);
        v90 = *((_QWORD *)a2 + 2);
        v92 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = v89;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v90;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v91;
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = v92;
        LODWORD(v104) = 42;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v80, 0, "BoutDetector(%{public}s): #warning, invalid firstStepTime (%{public}.2f)) at start of bout (%{public}.2f)). timestamp=%{public}.2f", buf, v104);
        v94 = v93;
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v94);
        if (v94 != __p)
          free(v94);
      }
    }
    else
    {
      v24 = v21 + v23;
    }
    v42 = *((double *)a2 + 1);
    if (v24 > v42)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v43 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(buf, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 56);
        }
        v44 = buf;
        if (buf[23] < 0)
          v44 = *(_BYTE **)buf;
        v46 = *(_QWORD *)a2;
        v45 = *((_QWORD *)a2 + 1);
        v47 = *((_QWORD *)a2 + 11);
        v49 = *(_QWORD *)(a1 + 168);
        v48 = *(_QWORD *)(a1 + 176);
        v50 = *(_QWORD *)(a1 + 256);
        *(_DWORD *)__p = 136448002;
        *(_QWORD *)&__p[4] = v44;
        *(_WORD *)&__p[12] = 2050;
        *(double *)&__p[14] = v24;
        *(_WORD *)&__p[22] = 2050;
        *(_QWORD *)&__p[24] = v45;
        *(_WORD *)&__p[32] = 2050;
        *(_QWORD *)&__p[34] = v46;
        *(_WORD *)&__p[42] = 2050;
        *(_QWORD *)&__p[44] = v47;
        *(_WORD *)&__p[52] = 2050;
        *(_QWORD *)&__p[54] = v48;
        v112 = 2050;
        v113 = v49;
        v114 = 2050;
        v115 = v50;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "BoutDetector(%{public}s): #warning, lastStepTime (%{public}.2f) exceeds startTime (%{public}.2f)). {timestamp=%{public}.2f, activeTime=%{public}.2f, prevStartTime=%{public}.2f}, prevTimestamp=%{public}.2f}, prevActiveTime=%{public}.2f}", __p, 0x52u);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v81 = qword_10229FE98;
        if (*(char *)(a1 + 63) < 0)
        {
          sub_100115CE4(__dst, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 40);
          *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 56);
        }
        v95 = __dst;
        if (__dst[23] < 0)
          v95 = *(_BYTE **)__dst;
        v97 = *(_QWORD *)a2;
        v96 = *((_QWORD *)a2 + 1);
        v98 = *((_QWORD *)a2 + 11);
        v100 = *(_QWORD *)(a1 + 168);
        v99 = *(_QWORD *)(a1 + 176);
        v101 = *(_QWORD *)(a1 + 256);
        *(_DWORD *)buf = 136448002;
        *(_QWORD *)&buf[4] = v95;
        *(_WORD *)&buf[12] = 2050;
        *(double *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2050;
        *(_QWORD *)&buf[24] = v96;
        *(_WORD *)&buf[32] = 2050;
        *(_QWORD *)&buf[34] = v97;
        *(_WORD *)&buf[42] = 2050;
        *(_QWORD *)&buf[44] = v98;
        *(_WORD *)&buf[52] = 2050;
        *(_QWORD *)&buf[54] = v99;
        v106 = 2050;
        v107 = v100;
        v108 = 2050;
        v109 = v101;
        LODWORD(v104) = 82;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v81, 0, "BoutDetector(%{public}s): #warning, lastStepTime (%{public}.2f) exceeds startTime (%{public}.2f)). {timestamp=%{public}.2f, activeTime=%{public}.2f, prevStartTime=%{public}.2f}, prevTimestamp=%{public}.2f}, prevActiveTime=%{public}.2f}", buf, v104);
        v103 = v102;
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        sub_100512490("Generic", 1, 0, 2, "void CLMobility::StepBoutDetector::handleStepCountNotification(const CLStepCountEntry &)", "%s\n", v103);
        if (v103 != __p)
          free(v103);
      }
      v42 = *((double *)a2 + 1);
      v24 = v42;
    }
    sub_100B6C9AC(a1, v42);
    v51 = v23 + -0.2;
    sub_1000D5200(a1, 0, v51);
    v52 = v24 + -0.2;
    sub_100B6CC54(a1, v52);
    if (v18 != v19)
    {
      if (*(double *)(a1 + 80) == 0.0)
        sub_100B6C094(a1, v51);
      sub_100B6C530(a1, v52);
      goto LABEL_76;
    }
  }
}

void sub_100C2A484(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  const char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  const char *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    if (*(_BYTE *)(a1 + 560))
      v5 = "update";
    else
      v5 = "init";
    *(_DWORD *)buf = 136315138;
    v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutExtractor: Received user info (%s)", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    if (*(_BYTE *)(a1 + 560))
      v9 = "update";
    else
      v9 = "init";
    v12 = 136315138;
    v13 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: Received user info (%s)", (const char *)&v12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  *(_OWORD *)(a1 + 608) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 580) = v7;
  *(_OWORD *)(a1 + 596) = v8;
  *(_OWORD *)(a1 + 564) = v6;
  *(_BYTE *)(a1 + 560) = 1;
  sub_100B6B2BC(a1 + 48, a2);
  sub_100B6B2BC(a1 + 216, a2);
}

void sub_100C2A6A4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  char v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  float v24;
  float v25;
  unsigned __int8 v26;
  float v27;
  unsigned __int8 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  _BYTE v38[10];
  double v39;
  _BYTE v40[10];
  __int16 v41;
  _BYTE v42[20];
  _BYTE v43[21];
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  _BYTE v57[10];
  double v58;
  _BYTE v59[10];
  __int16 v60;
  _BYTE v61[20];
  _BYTE v62[21];
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;

  sub_100C2AC64(a1, a2, (uint64_t)v10);
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v3 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134352385;
    v55 = v11;
    v56 = 2050;
    *(_QWORD *)v57 = v12;
    *(_WORD *)&v57[8] = 2049;
    v58 = v13;
    *(_WORD *)v59 = 2049;
    *(double *)&v59[2] = v14;
    v60 = 2049;
    *(double *)v61 = v15;
    *(_WORD *)&v61[8] = 2049;
    *(double *)&v61[10] = v16;
    *(_WORD *)&v61[18] = 257;
    v62[0] = v17;
    *(_WORD *)&v62[1] = 2049;
    *(double *)&v62[3] = v24;
    *(_WORD *)&v62[11] = 2049;
    *(double *)&v62[13] = v29;
    v63 = 2049;
    v64 = v30;
    v65 = 2049;
    v66 = v31;
    v67 = 2049;
    v68 = v32;
    v69 = 2049;
    v70 = v33;
    v71 = 2049;
    v72 = v34;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GaitMetrics,startTime,%{public}.2f,timestamp,%{public}llu,walkingSpeed,%{private}.3f,doubleSupportPercentage,%{private}.3f,stepLength,%{private}.3f,asymmetryProbability,%{private}.3f,deviceSide,%{private}hhu,cycleTime,%{private}.3f,stepIndexOfHarmonicityAP,%{private}.3f,stepIndexOfHarmonicityML,%{private}.3f,stepIndexOfHarmonicityVT,%{private}.3f,swingIndexOfHarmonicityAP,%{private}.3f,swingIndexOfHarmonicityML,%{private}.3f,swingIndexOfHarmonicityVT,%{private}.3f", buf, 0x87u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v35 = 134352385;
    v36 = v11;
    v37 = 2050;
    *(_QWORD *)v38 = v12;
    *(_WORD *)&v38[8] = 2049;
    v39 = v13;
    *(_WORD *)v40 = 2049;
    *(double *)&v40[2] = v14;
    v41 = 2049;
    *(double *)v42 = v15;
    *(_WORD *)&v42[8] = 2049;
    *(double *)&v42[10] = v16;
    *(_WORD *)&v42[18] = 257;
    v43[0] = v17;
    *(_WORD *)&v43[1] = 2049;
    *(double *)&v43[3] = v24;
    *(_WORD *)&v43[11] = 2049;
    *(double *)&v43[13] = v29;
    v44 = 2049;
    v45 = v30;
    v46 = 2049;
    v47 = v31;
    v48 = 2049;
    v49 = v32;
    v50 = 2049;
    v51 = v33;
    v52 = 2049;
    v53 = v34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "GaitMetrics,startTime,%{public}.2f,timestamp,%{public}llu,walkingSpeed,%{private}.3f,doubleSupportPercentage,%{private}.3f,stepLength,%{private}.3f,asymmetryProbability,%{private}.3f,deviceSide,%{private}hhu,cycleTime,%{private}.3f,stepIndexOfHarmonicityAP,%{private}.3f,stepIndexOfHarmonicityML,%{private}.3f,stepIndexOfHarmonicityVT,%{private}.3f,swingIndexOfHarmonicityAP,%{private}.3f,swingIndexOfHarmonicityML,%{private}.3f,swingIndexOfHarmonicityVT,%{private}.3f", &v35, 135);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleSPUGaitMetrics(const SPUGaitMetrics &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134351617;
    v55 = v11;
    v56 = 1025;
    *(_DWORD *)v57 = v18;
    *(_WORD *)&v57[4] = 1025;
    *(_DWORD *)&v57[6] = v19;
    LOWORD(v58) = 1025;
    *(_DWORD *)((char *)&v58 + 2) = v20;
    HIWORD(v58) = 1025;
    *(_DWORD *)v59 = v21;
    *(_WORD *)&v59[4] = 1025;
    *(_DWORD *)&v59[6] = v22;
    v60 = 1025;
    *(_DWORD *)v61 = v23;
    *(_WORD *)&v61[4] = 2049;
    *(double *)&v61[6] = v25;
    *(_WORD *)&v61[14] = 1026;
    *(_DWORD *)&v61[16] = v26;
    *(_WORD *)v62 = 2049;
    *(double *)&v62[2] = v27;
    *(_WORD *)&v62[10] = 1026;
    *(_DWORD *)&v62[12] = v28;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GaitMetrics::segmentsRejected,startTime,%{public}.2f,isSwingStanceCycle,%{private}hhu,isNotRunning,%{private}hhu,isFeasibleWalkingSpeed,%{private}hhu,isPendular,%{private}hhu,isSufficientVerticalTwist,%{private}hhu,isCadenceConcordant,%{private}hhu,userHeight,%{private}.2f,isHeightSet,%{public}d,userWeight,%{private}.2f,isWeightSet,%{public}d,", buf, 0x50u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v35 = 134351617;
    v36 = v11;
    v37 = 1025;
    *(_DWORD *)v38 = v18;
    *(_WORD *)&v38[4] = 1025;
    *(_DWORD *)&v38[6] = v19;
    LOWORD(v39) = 1025;
    *(_DWORD *)((char *)&v39 + 2) = v20;
    HIWORD(v39) = 1025;
    *(_DWORD *)v40 = v21;
    *(_WORD *)&v40[4] = 1025;
    *(_DWORD *)&v40[6] = v22;
    v41 = 1025;
    *(_DWORD *)v42 = v23;
    *(_WORD *)&v42[4] = 2049;
    *(double *)&v42[6] = v25;
    *(_WORD *)&v42[14] = 1026;
    *(_DWORD *)&v42[16] = v26;
    *(_WORD *)v43 = 2049;
    *(double *)&v43[2] = v27;
    *(_WORD *)&v43[10] = 1026;
    *(_DWORD *)&v43[12] = v28;
    LODWORD(v9) = 80;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "GaitMetrics::segmentsRejected,startTime,%{public}.2f,isSwingStanceCycle,%{private}hhu,isNotRunning,%{private}hhu,isFeasibleWalkingSpeed,%{private}hhu,isPendular,%{private}hhu,isSufficientVerticalTwist,%{private}hhu,isCadenceConcordant,%{private}hhu,userHeight,%{private}.2f,isHeightSet,%{public}d,userWeight,%{private}.2f,isWeightSet,%{public}d,", &v35, v9);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleSPUGaitMetrics(const SPUGaitMetrics &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v10);
  sub_100C2ACD0(a1 + 48, (uint64_t)v10);
}

double sub_100C2AC64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  double result;

  *(_DWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a2 + 24);
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a2 + 1);
  *(_BYTE *)(a3 + 44) = *(_BYTE *)(a2 + 5);
  *(_WORD *)(a3 + 45) = *(_WORD *)(a2 + 6);
  v3 = *(_DWORD *)(a1 + 572);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a3 + 52) = v3;
  *(_BYTE *)(a3 + 56) = *(_BYTE *)(a1 + 621);
  *(_DWORD *)(a3 + 60) = *(_DWORD *)(a1 + 576);
  *(_BYTE *)(a3 + 64) = *(_BYTE *)(a1 + 622);
  *(_OWORD *)(a3 + 68) = *(_OWORD *)(a2 + 44);
  result = *(double *)(a2 + 60);
  *(double *)(a3 + 84) = result;
  return result;
}

void sub_100C2ACD0(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 148))
  {
    sub_100B6C9AC(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
    sub_1000D5200(a1, 2u, *(double *)(a2 + 8));
    sub_100B6CC54(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
    if (*(double *)(a1 + 80) == 0.0)
      sub_100B6C094(a1, *(double *)(a2 + 8));
    sub_100B6C530(a1, *(double *)(a2 + 8) + *(float *)(a2 + 48));
  }
}

__n128 sub_100C2AD6C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  __n128 result;
  __int128 v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v4 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BoutExtractor: Received workout override", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: Received workout override", v9, 2);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLMobility::WalkingBoutExtractor::handleWorkoutSessionOverride(const CLWorkoutUpdate &)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 656) = *(_DWORD *)(a2 + 32);
  *(__n128 *)(a1 + 624) = result;
  *(_OWORD *)(a1 + 640) = v6;
  return result;
}

BOOL sub_100C2AF10(_QWORD *a1, double *a2, double *a3)
{
  NSObject *v6;
  _BOOL8 result;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  int v11;
  int v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  NSObject *v18;
  uint8_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  double v30;
  double v31;
  int v32;
  _BYTE v33[10];
  double v34[2];
  uint8_t buf[4];
  _BYTE v36[10];
  double v37[203];

  v30 = 0.0;
  v31 = 0.0;
  if (((*(uint64_t (**)(_QWORD, double *, double *))(*(_QWORD *)*a1 + 40))(*a1, &v31, &v30) & 1) != 0)
  {
    if (v31 == v30)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v6 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "BoutExtractor: No bouts in db", buf, 2u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        LOWORD(v32) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: No bouts in db", &v32, 2);
LABEL_46:
        v19 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v8);
        if (v19 != buf)
          free(v19);
        return 0;
      }
    }
    else
    {
      if (*((_DWORD *)a1 + 158) || *((_DWORD *)a1 + 159))
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v10 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
        {
          v11 = *((_DWORD *)a1 + 159);
          v12 = *((_DWORD *)a1 + 158);
          v13 = a1[78];
          *(_DWORD *)buf = 67240704;
          *(_DWORD *)v36 = v11;
          *(_WORD *)&v36[4] = 1026;
          *(_DWORD *)&v36[6] = v12;
          LOWORD(v37[0]) = 2050;
          *(_QWORD *)((char *)v37 + 2) = v13;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Currently in workout predictedType %{public}u activityType %{public}u since (%{public}.2f)", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          v20 = *((_DWORD *)a1 + 159);
          v21 = *((_DWORD *)a1 + 158);
          v22 = a1[78];
          v32 = 67240704;
          *(_DWORD *)v33 = v20;
          *(_WORD *)&v33[4] = 1026;
          *(_DWORD *)&v33[6] = v21;
          LOWORD(v34[0]) = 2050;
          *(_QWORD *)((char *)v34 + 2) = v22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "Currently in workout predictedType %{public}u activityType %{public}u since (%{public}.2f)", &v32, 24);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        v14 = *((double *)a1 + 78);
      }
      else
      {
        v14 = CFAbsoluteTimeGetCurrent() + -30.0;
      }
      *a2 = v31;
      if (v30 < v14)
        v14 = v30;
      *a3 = v14;
      if (*a2 >= v14)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v18 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "BoutExtractor: All bouts deferred", buf, 2u);
        }
        result = sub_1001BFF7C(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          LOWORD(v32) = 0;
          LODWORD(v29) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: All bouts deferred", &v32, v29);
          goto LABEL_46;
        }
      }
      else
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v15 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
        {
          v16 = *a2;
          v17 = *a3;
          *(_DWORD *)buf = 134349312;
          *(double *)v36 = v16;
          *(_WORD *)&v36[8] = 2050;
          v37[0] = v17;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BoutExtractor: Returned time range to process (%{public}.2f) to (%{public}.2f)", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          v25 = *a2;
          v26 = *a3;
          v32 = 134349312;
          *(double *)v33 = v25;
          *(_WORD *)&v33[8] = 2050;
          v34[0] = v26;
          LODWORD(v29) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: Returned time range to process (%{public}.2f) to (%{public}.2f)", &v32, v29);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMobility::WalkingBoutExtractor::getTimeRangeToProcess(CFAbsoluteTime &, CFAbsoluteTime &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        return 1;
      }
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v9 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BoutExtractor: Unable to get time range to process", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      LOWORD(v32) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: Unable to get time range to process", &v32, 2);
      goto LABEL_46;
    }
  }
  return result;
}

uint64_t sub_100C2B5D0(_QWORD *a1, uint64_t *a2, void **a3, double a4, double a5)
{
  __objc2_class *v10;
  __objc2_class *v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  double v21;
  double v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  NSObject *cache;
  __objc2_class *v30;
  __objc2_class *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float v39;
  float v40;
  NSObject *v41;
  int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  std::string *p_p;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int16 v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int16 v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  const char *v78;
  uint8_t *v79;
  void *v80;
  const char *v81;
  uint8_t *v82;
  void *v83;
  int v84;
  _BOOL4 v85;
  _BOOL4 v86;
  _BOOL4 v87;
  _BOOL4 v88;
  std::string *v89;
  char *v90;
  char *v91;
  NSObject *v92;
  const char *v93;
  uint8_t *v94;
  NSObject *v95;
  const char *v97;
  uint8_t *v98;
  const char *v99;
  uint8_t *v100;
  uint64_t v101;
  int v102;
  int v103;
  uint64_t v104;
  __int128 v105;
  std::string::size_type v106;
  int v107;
  std::string::size_type v108;
  int v109;
  uint64_t v110;
  int v111;
  double v112;
  uint64_t v113;
  double v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  std::string v122;
  __int16 v123;
  char v124;
  __int16 v125;
  char v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int16 v130;
  char v131;
  void *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  void *v141;
  _BYTE *v142;
  uint64_t v143;
  std::string __p;
  int v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  _BOOL4 v149;
  __int16 v150;
  double v151;
  __int16 v152;
  _BOOL4 v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  _BOOL4 v157;
  __int16 v158;
  double v159;
  __int16 v160;
  _BOOL4 v161;
  __int16 v162;
  uint64_t v163;
  __int16 v164;
  int v165;
  __int16 v166;
  std::string *v167;
  __int16 v168;
  double v169;
  __int16 v170;
  int v171;
  __int16 v172;
  double v173;
  __int16 v174;
  int v175;
  uint8_t buf[4];
  _BYTE v177[20];
  int v178;
  _BYTE v179[12];
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  double v185;
  uint64_t v186;
  double v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  int v191;
  int v192;
  int v193;
  int v194;
  float v195;
  unsigned __int8 v196;
  __int16 v197;
  char v198;
  float v199;
  unsigned __int8 v200;

  v10 = DefaultObserver;
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v11 = DefaultObserver;
  v12 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)v177 = a4;
    *(_WORD *)&v177[8] = 2050;
    *(double *)&v177[10] = a5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "BoutExtractor: Checking for bouts from %{public}.2f to %{public}.2f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = a4;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = a5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 0, "BoutExtractor: Checking for bouts from %{public}.2f to %{public}.2f", &__p, 22);
    v98 = (uint8_t *)v97;
    sub_100512490("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v97);
    if (v98 != buf)
      free(v98);
  }
  v141 = 0;
  v142 = 0;
  v143 = 0;
  v13 = (*(uint64_t (**)(_QWORD, void **, double, double))(*(_QWORD *)*a1 + 48))(*a1, &v141, a4 + -0.0001, a5 + 0.0001);
  if ((_DWORD)v13 == 100)
  {
    if (v142 == v141)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v95 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "BoutExtractor: No bouts found.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        LODWORD(v101) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: No bouts found.", &__p, v101);
        v100 = (uint8_t *)v99;
        sub_100512490("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v99);
        if (v100 != buf)
          free(v100);
      }
LABEL_99:
      v13 = 100;
    }
    else
    {
      sub_100C2FF0C((uint64_t)v141, (unint64_t)v142, 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v142 - (_BYTE *)v141) >> 3)), 1);
      v14 = a2[1];
      v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *a2) >> 3));
      if (v14 == *a2)
        v16 = 0;
      else
        v16 = v15;
      sub_100C30CE0(*a2, v14, v16, 1);
      sub_100C2C770(v17, &v141, a2);
      v18 = v141;
      v19 = v142;
      if (v141 == v142)
      {
        v13 = 100;
        if (!v141)
          return v13;
        goto LABEL_101;
      }
      while (1)
      {
        v20 = v18[1];
        v138 = *v18;
        v139 = v20;
        v140 = *((_QWORD *)v18 + 4);
        v135 = 0;
        v136 = 0;
        v137 = 0;
        v21 = *((double *)&v138 + 1);
        v22 = *(double *)&v20;
        v23 = (*(uint64_t (**)(_QWORD, void **, double, double))(*(_QWORD *)a1[2] + 24))(a1[2], &v135, *((double *)&v138 + 1), *(double *)&v20);
        if ((_DWORD)v23 == 100)
        {
          v26 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v136 - (_BYTE *)v135) >> 5));
          v27 = v136 == v135 ? 0 : v26;
          sub_100C31A7C((uint64_t)v135, v136, v27, 1);
          v28 = v22 + 0.2;
          v132 = 0;
          v133 = 0;
          v134 = 0;
          if ((*(unsigned int (**)(_QWORD, void **, double, double))(*(_QWORD *)a1[4] + 16))(a1[4], &v132, v21 + 0.2, v28) == 109)
          {
            if (v10[93].superclass != (__objc2_class *)-1)
              dispatch_once(&qword_10229FE90, &stru_10217B038);
            cache = v11[93].cache;
            if (os_log_type_enabled(cache, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)v177 = v21;
              _os_log_impl((void *)&_mh_execute_header, cache, OS_LOG_TYPE_ERROR, "BoutExtractor: Defering processing bout (%{public}.2f). Pedometer unavailable.", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (v10[93].superclass != (__objc2_class *)-1)
                dispatch_once(&qword_10229FE90, &stru_10217B038);
              v80 = v11[93].cache;
              LODWORD(__p.__r_.__value_.__l.__data_) = 134349056;
              *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v21;
              LODWORD(v101) = 12;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v80, 16, "BoutExtractor: Defering processing bout (%{public}.2f). Pedometer unavailable.", &__p, v101);
              v82 = (uint8_t *)v81;
              sub_100512490("Generic", 1, 0, 0, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v81);
              if (v82 != buf)
                free(v82);
            }
            v13 = 109;
            v25 = 1;
          }
          else
          {
            v30 = v10;
            v31 = v11;
            DWORD2(v139) = (*(uint64_t (**)(_QWORD, double, double))(*(_QWORD *)a1[4] + 24))(a1[4], v21 + 0.2, v28);
            v32 = *((_DWORD *)a1 + 146);
            v33 = *((_DWORD *)a1 + 142);
            v34 = *((_DWORD *)a1 + 150);
            v35 = v138;
            sub_100C2CABC(a1, (uint64_t)&v138, &v135, (uint64_t *)&v132, (uint64_t)buf);
            v102 = *(_DWORD *)buf;
            v103 = *(_DWORD *)v177;
            v106 = *(_QWORD *)&v177[4];
            v108 = *(_QWORD *)&v177[12];
            v104 = *(_QWORD *)v179;
            v107 = v178;
            v109 = *(_DWORD *)&v179[8];
            v110 = v180;
            v121 = BYTE8(v180);
            v130 = *(_WORD *)((char *)&v180 + 9);
            v131 = BYTE11(v180);
            v111 = HIDWORD(v180);
            v36 = v181;
            v37 = v182;
            v105 = v183;
            v38 = v184;
            v112 = v185;
            v113 = v186;
            v114 = v187;
            v128 = v189;
            v129 = v190;
            v127 = v188;
            v115 = v191;
            v116 = v192;
            v117 = v193;
            v118 = v194;
            v39 = v195;
            v126 = v198;
            v125 = v197;
            v40 = v199;
            v119 = v196;
            v120 = v200;
            if (v30[93].superclass != (__objc2_class *)-1)
              dispatch_once(&qword_10229FE90, &stru_10217B038);
            v41 = v31[93].cache;
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              sub_101081C98(v121, &__p);
              if (v111)
                v42 = 42;
              else
                v42 = -1;
              v43 = (v118 & v42) == 0;
              *(_DWORD *)buf = 134353411;
              v44 = (v117 & v42) == 0;
              *(_QWORD *)v177 = v106;
              v45 = (v116 & v42) == 0;
              *(_WORD *)&v177[8] = 2050;
              v46 = (v115 & v42) == 0;
              *(_QWORD *)&v177[10] = v108;
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_WORD *)&v177[18] = 1026;
              v178 = v107;
              *(_WORD *)v179 = 2049;
              *(_QWORD *)&v179[2] = *((_QWORD *)&v38 + 1);
              *(_WORD *)&v179[10] = 1026;
              LODWORD(v180) = v46;
              WORD2(v180) = 2049;
              *(double *)((char *)&v180 + 6) = v112;
              HIWORD(v180) = 1026;
              LODWORD(v181) = v45;
              WORD2(v181) = 2049;
              *(_QWORD *)((char *)&v181 + 6) = v113;
              HIWORD(v181) = 1026;
              LODWORD(v182) = v44;
              WORD2(v182) = 2049;
              *(double *)((char *)&v182 + 6) = v114;
              HIWORD(v182) = 1026;
              LODWORD(v183) = v43;
              WORD2(v183) = 2050;
              *(_QWORD *)((char *)&v183 + 6) = v110;
              HIWORD(v183) = 1026;
              LODWORD(v184) = v109;
              WORD2(v184) = 2081;
              *(_QWORD *)((char *)&v184 + 6) = p_p;
              HIWORD(v184) = 2049;
              v185 = v39;
              LOWORD(v186) = 1025;
              *(_DWORD *)((char *)&v186 + 2) = v119;
              HIWORD(v186) = 2049;
              v187 = v40;
              LOWORD(v188) = 1025;
              *(_DWORD *)((char *)&v188 + 2) = v120;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMobility::BoutMetrics,startTime,%{public}.2f,endTime,%{public}.2f,stepCount,%{public}u,walkingSpeed,%{private}.2f,walkingSpeedIsValid,%{public}d,doubleSupportPercentage,%{private}.1f,doubleSupportPercentageIsValid,%{public}d,stepLength,%{private}.2f,stepLengthIsValid,%{public}d,asymmetryProbabilityPercentage,%{private}.0f,asymmetryProbabilityPercentageIsValid,%{public}d,invalidGradePct,%{public}.2f,numGaitMetrics,%{public}d,deviceSide,%{private}s,userHeight,%{private}.2f,isHeightSet,%{private}d,userWeight,%{private}.2f,isWeightSet,%{private}d", buf, 0x96u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v30[93].superclass != (__objc2_class *)-1)
                dispatch_once(&qword_10229FE90, &stru_10217B038);
              v83 = v31[93].cache;
              sub_101081C98(v121, &v122);
              if (v111)
                v84 = 42;
              else
                v84 = -1;
              v85 = (v118 & v84) == 0;
              LODWORD(__p.__r_.__value_.__l.__data_) = 134353411;
              v86 = (v117 & v84) == 0;
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v106;
              v87 = (v116 & v84) == 0;
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
              v88 = (v115 & v84) == 0;
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v108;
              v89 = &v122;
              if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v89 = (std::string *)v122.__r_.__value_.__r.__words[0];
              HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
              v145 = v107;
              v146 = 2049;
              v147 = *((_QWORD *)&v38 + 1);
              v148 = 1026;
              v149 = v88;
              v150 = 2049;
              v151 = v112;
              v152 = 1026;
              v153 = v87;
              v154 = 2049;
              v155 = v113;
              v156 = 1026;
              v157 = v86;
              v158 = 2049;
              v159 = v114;
              v160 = 1026;
              v161 = v85;
              v162 = 2050;
              v163 = v110;
              v164 = 1026;
              v165 = v109;
              v166 = 2081;
              v167 = v89;
              v168 = 2049;
              v169 = v39;
              v170 = 1025;
              v171 = v119;
              v172 = 2049;
              v173 = v40;
              v174 = 1025;
              v175 = v120;
              LODWORD(v101) = 150;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 2, "CLMobility::BoutMetrics,startTime,%{public}.2f,endTime,%{public}.2f,stepCount,%{public}u,walkingSpeed,%{private}.2f,walkingSpeedIsValid,%{public}d,doubleSupportPercentage,%{private}.1f,doubleSupportPercentageIsValid,%{public}d,stepLength,%{private}.2f,stepLengthIsValid,%{public}d,asymmetryProbabilityPercentage,%{private}.0f,asymmetryProbabilityPercentageIsValid,%{public}d,invalidGradePct,%{public}.2f,numGaitMetrics,%{public}d,deviceSide,%{private}s,userHeight,%{private}.2f,isHeightSet,%{private}d,userWeight,%{private}.2f,isWeightSet,%{private}d", &__p, v101);
              v91 = v90;
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v122.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v91);
              if (v91 != (char *)buf)
                free(v91);
            }
            v48 = (char *)a3[1];
            v49 = (char *)a3[2];
            if (v48 >= v49)
            {
              v54 = 0xEEEEEEEEEEEEEEEFLL * ((v48 - (_BYTE *)*a3) >> 4);
              v55 = v54 + 1;
              if (v54 + 1 > 0x111111111111111)
                sub_100259694();
              v56 = 0xEEEEEEEEEEEEEEEFLL * ((v49 - (_BYTE *)*a3) >> 4);
              if (2 * v56 > v55)
                v55 = 2 * v56;
              if (v56 >= 0x88888888888888)
                v57 = 0x111111111111111;
              else
                v57 = v55;
              if (v57)
                v58 = (char *)sub_100273E28((uint64_t)(a3 + 2), v57);
              else
                v58 = 0;
              v59 = &v58[240 * v54];
              *(_DWORD *)v59 = v35;
              *((_DWORD *)v59 + 1) = v32;
              *((_DWORD *)v59 + 2) = v33;
              *((_DWORD *)v59 + 3) = v34;
              *((_DWORD *)v59 + 4) = v102;
              *((_DWORD *)v59 + 5) = v103;
              *((_QWORD *)v59 + 3) = v106;
              *((_QWORD *)v59 + 4) = v108;
              *((_DWORD *)v59 + 10) = v107;
              *(_QWORD *)(v59 + 44) = v104;
              *((_DWORD *)v59 + 13) = v109;
              *((_QWORD *)v59 + 7) = v110;
              v59[64] = v121;
              *(_WORD *)(v59 + 65) = v130;
              v59[67] = v131;
              *((_DWORD *)v59 + 17) = v111;
              *(_OWORD *)(v59 + 72) = v36;
              *(_OWORD *)(v59 + 88) = v37;
              *(_OWORD *)(v59 + 104) = v105;
              *(_OWORD *)(v59 + 120) = v38;
              *((double *)v59 + 17) = v112;
              *((_QWORD *)v59 + 18) = v113;
              *((double *)v59 + 19) = v114;
              v60 = v129;
              v61 = v127;
              *((_OWORD *)v59 + 11) = v128;
              *((_OWORD *)v59 + 12) = v60;
              *((_OWORD *)v59 + 10) = v61;
              *((_DWORD *)v59 + 52) = v115;
              *((_DWORD *)v59 + 53) = v116;
              *((_DWORD *)v59 + 54) = v117;
              *((_DWORD *)v59 + 55) = v118;
              *((float *)v59 + 56) = v39;
              v59[228] = v119;
              v59[231] = v126;
              *(_WORD *)(v59 + 229) = v125;
              *((float *)v59 + 58) = v40;
              v59[236] = v120;
              v62 = v123;
              v59[239] = v124;
              *(_WORD *)(v59 + 237) = v62;
              v64 = (char *)*a3;
              v63 = (char *)a3[1];
              v65 = v59;
              v11 = v31;
              if (v63 != *a3)
              {
                do
                {
                  v66 = *((_OWORD *)v63 - 15);
                  v67 = *((_OWORD *)v63 - 13);
                  *((_OWORD *)v65 - 14) = *((_OWORD *)v63 - 14);
                  *((_OWORD *)v65 - 13) = v67;
                  *((_OWORD *)v65 - 15) = v66;
                  v68 = *((_OWORD *)v63 - 12);
                  v69 = *((_OWORD *)v63 - 11);
                  v70 = *((_OWORD *)v63 - 9);
                  *((_OWORD *)v65 - 10) = *((_OWORD *)v63 - 10);
                  *((_OWORD *)v65 - 9) = v70;
                  *((_OWORD *)v65 - 12) = v68;
                  *((_OWORD *)v65 - 11) = v69;
                  v71 = *((_OWORD *)v63 - 8);
                  v72 = *((_OWORD *)v63 - 7);
                  v73 = *((_OWORD *)v63 - 5);
                  *((_OWORD *)v65 - 6) = *((_OWORD *)v63 - 6);
                  *((_OWORD *)v65 - 5) = v73;
                  *((_OWORD *)v65 - 8) = v71;
                  *((_OWORD *)v65 - 7) = v72;
                  v74 = *((_OWORD *)v63 - 4);
                  v75 = *((_OWORD *)v63 - 3);
                  v76 = *((_OWORD *)v63 - 1);
                  *((_OWORD *)v65 - 2) = *((_OWORD *)v63 - 2);
                  *((_OWORD *)v65 - 1) = v76;
                  *((_OWORD *)v65 - 4) = v74;
                  *((_OWORD *)v65 - 3) = v75;
                  v65 -= 240;
                  v63 -= 240;
                }
                while (v63 != v64);
                v63 = (char *)*a3;
              }
              v10 = v30;
              v53 = v59 + 240;
              *a3 = v65;
              a3[1] = v59 + 240;
              a3[2] = &v58[240 * v57];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *(_DWORD *)v48 = v35;
              *((_DWORD *)v48 + 1) = v32;
              *((_DWORD *)v48 + 2) = v33;
              *((_DWORD *)v48 + 3) = v34;
              *((_DWORD *)v48 + 4) = v102;
              *((_DWORD *)v48 + 5) = v103;
              *((_QWORD *)v48 + 3) = v106;
              *((_QWORD *)v48 + 4) = v108;
              *((_DWORD *)v48 + 10) = v107;
              *(_QWORD *)(v48 + 44) = v104;
              *((_DWORD *)v48 + 13) = v109;
              *((_QWORD *)v48 + 7) = v110;
              v48[64] = v121;
              *(_WORD *)(v48 + 65) = v130;
              v48[67] = v131;
              *((_DWORD *)v48 + 17) = v111;
              *(_OWORD *)(v48 + 72) = v36;
              *(_OWORD *)(v48 + 88) = v37;
              *(_OWORD *)(v48 + 104) = v105;
              *(_OWORD *)(v48 + 120) = v38;
              *((double *)v48 + 17) = v112;
              *((_QWORD *)v48 + 18) = v113;
              *((double *)v48 + 19) = v114;
              v50 = v129;
              v51 = v127;
              *((_OWORD *)v48 + 11) = v128;
              *((_OWORD *)v48 + 12) = v50;
              *((_OWORD *)v48 + 10) = v51;
              *((_DWORD *)v48 + 52) = v115;
              *((_DWORD *)v48 + 53) = v116;
              *((_DWORD *)v48 + 54) = v117;
              *((_DWORD *)v48 + 55) = v118;
              *((float *)v48 + 56) = v39;
              v48[228] = v119;
              v48[231] = v126;
              *(_WORD *)(v48 + 229) = v125;
              *((float *)v48 + 58) = v40;
              v48[236] = v120;
              v52 = v123;
              v48[239] = v124;
              v53 = v48 + 240;
              *(_WORD *)(v48 + 237) = v52;
              v11 = v31;
              v10 = v30;
            }
            v25 = 0;
            a3[1] = v53;
          }
          if (v132)
          {
            v133 = v132;
            operator delete(v132);
          }
        }
        else if ((_DWORD)v23 == 109)
        {
          if (v10[93].superclass != (__objc2_class *)-1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          v24 = v11[93].cache;
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "BoutExtractor: Defering bout processing. Gait Metrics unavailable, likely because device is locked.", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v10[93].superclass != (__objc2_class *)-1)
              dispatch_once(&qword_10229FE90, &stru_10217B038);
            v77 = v11[93].cache;
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            LODWORD(v101) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 2, "BoutExtractor: Defering bout processing. Gait Metrics unavailable, likely because device is locked.", &__p, v101);
            v79 = (uint8_t *)v78;
            sub_100512490("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v78);
            if (v79 != buf)
              free(v79);
          }
          v13 = 109;
          v25 = 1;
        }
        else
        {
          v25 = 1;
          v13 = v23;
        }
        if (v135)
        {
          v136 = (char *)v135;
          operator delete(v135);
        }
        if (v25)
          break;
        v18 = (_OWORD *)((char *)v18 + 40);
        if (v18 == v19)
          goto LABEL_99;
      }
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v92 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "BoutExtractor: Deferring bout processing. Bouts unavailable.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      LODWORD(v101) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: Deferring bout processing. Bouts unavailable.", &__p, v101);
      v94 = (uint8_t *)v93;
      sub_100512490("Generic", 1, 0, 2, "CMError CLMobility::WalkingBoutExtractor::processBouts(CFAbsoluteTime, CFAbsoluteTime, std::vector<HealthKitWorkout>, std::vector<ProcessedBoutResult> &)", "%s\n", v93);
      if (v94 != buf)
        free(v94);
    }
  }
  v18 = v141;
  if (v141)
  {
LABEL_101:
    v142 = v18;
    operator delete(v18);
  }
  return v13;
}

void sub_100C2C6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100C2C770(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  NSObject *v9;
  const char *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint8_t *v24;
  _QWORD v25[2];
  uint8_t buf[1640];

  v5 = a2[1];
  if (*a2 != v5)
  {
    v6 = *a2 + 40;
    while (v6 != v5)
    {
      v7 = *(double *)(v6 + 8);
      v8 = *(double *)(v6 - 32);
      v6 += 40;
      if (v7 < v8)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v9 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "BoutExtractor: Error, unsorted bouts.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          LOWORD(v25[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 17, "BoutExtractor: Error, unsorted bouts.", v25, 2, v25[0]);
LABEL_36:
          v24 = (uint8_t *)v10;
          sub_100512490("Generic", 1, 0, 0, "void CLMobility::WalkingBoutExtractor::updateBoundariesWithWorkouts(std::vector<BoutBoundary> &, const std::vector<HealthKitWorkout> &) const", "%s\n", v10);
          if (v24 != buf)
            free(v24);
        }
        goto LABEL_22;
      }
    }
  }
  v11 = (double *)a3[1];
  if ((double *)*a3 != v11)
  {
    v12 = (double *)(*a3 + 24);
    while (v12 != v11)
    {
      v13 = *v12;
      v14 = *(v12 - 3);
      v12 += 3;
      if (v13 < v14)
      {
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v15 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "BoutExtractor: Error, unsorted workouts.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          LOWORD(v25[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 17, "BoutExtractor: Error, unsorted workouts.", v25, 2, v25[0]);
          goto LABEL_36;
        }
        break;
      }
    }
  }
LABEL_22:
  v16 = *a3;
  v17 = a3[1];
  if (*a3 != v17)
  {
    v18 = 0;
    v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
    v20 = *a2 + 16;
    do
    {
      if (v18 < v19)
      {
        v21 = *(double *)v16;
        v22 = v20 + 40 * v18;
        do
        {
          v23 = (*(double *)(v22 - 8) + *(double *)v22) * 0.5;
          if (v23 >= v21)
          {
            if (v23 > *(double *)(v16 + 8))
              goto LABEL_31;
            *(_DWORD *)(v22 + 12) = *(_DWORD *)(v16 + 16);
          }
          ++v18;
          v22 += 40;
        }
        while (v19 != v18);
        v18 = v19;
      }
LABEL_31:
      v16 += 24;
    }
    while (v16 != v17);
  }
}

_QWORD *sub_100C2CABC@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  double v38;
  double v39;
  int v40;
  double v41;
  double v42;
  _QWORD *v43;
  double v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  size_t v51;
  _BYTE *v52;
  float v53;
  char *v54;
  void *v55;
  int64_t v56;
  unint64_t v57;
  int64_t v58;
  unint64_t v59;
  char *v60;
  float *v61;
  int v62;
  float *v63;
  float *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  float *v72;
  float *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  float *v81;
  float *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  int v89;
  float *v90;
  float *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  float *v99;
  float *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  int v107;
  float *v108;
  float *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  float v117;
  float *v118;
  float *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  float *v125;
  int v126;
  float v127;
  float *v129;
  float *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  float *v136;
  int v137;
  float v138;
  float *v139;
  float *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  float *v146;
  int v147;
  float v148;
  float *v149;
  float *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  float *v156;
  int v157;
  _BYTE *v158;
  _BYTE *v159;
  uint64_t v160;
  size_t v161;
  _BYTE *v162;
  _BYTE *v163;
  _BYTE *v164;
  char v165;
  double v166;
  uint16x4_t v167;
  int v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint8_t *v173;
  int v174;
  float *v175;
  float v176;
  float v177;
  float v178;
  float *v179;
  float v180;
  float v181;
  float *v182;
  float v183;
  float v184;
  float v185;
  float *v186;
  float v187;
  float v188;
  float *v189;
  float v190;
  float v191;
  float v192;
  float *v193;
  float v194;
  float v195;
  float *v196;
  float v197;
  float v198;
  float v199;
  int v200;
  int v201;
  int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  NSObject *v211;
  uint64_t v212;
  int v213;
  double v214;
  double v215;
  unint64_t v216;
  uint64_t v217;
  const char *v218;
  uint8_t *v219;
  const char *v220;
  uint8_t *v221;
  uint64_t v222;
  double v223;
  double v224;
  double v225;
  double v226;
  const char *v227;
  uint8_t *v228;
  double v229;
  int v230;
  const char *v231;
  uint8_t *v232;
  void *v233;
  int v234;
  const char *v235;
  uint8_t *v236;
  void *v237;
  void *v238;
  const char *v239;
  uint8_t *v240;
  uint64_t v241;
  int v243;
  _QWORD *v244;
  uint64_t v246;
  float *v247;
  float *v248;
  float *v249;
  void *v250;
  float *v251;
  float *v252;
  void *v253;
  float *v254;
  float *v255;
  void *v256;
  float *v257;
  float *v258;
  void *v259;
  float *v260;
  float *v261;
  void *v262;
  float *v263;
  float *v264;
  void *v265;
  float *v266;
  float *v267;
  void *v268;
  _BYTE *v269;
  size_t v270;
  void *v271;
  float *v272;
  float *v273;
  void *v274;
  float *v275;
  float *v276;
  void *v277;
  float *v278;
  float *v279;
  int v280;
  uint64_t v281;
  void *__p[4];
  double v283;
  int v284;
  double v285;
  __int16 v286;
  double v287;
  __int16 v288;
  double v289;
  __int16 v290;
  double v291;
  uint8_t buf[32];
  __int128 v293;
  __int128 v294;

  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v8 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 5);
    v12 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 4);
    *(_DWORD *)buf = 134349824;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v10;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v11;
    LOWORD(v293) = 2050;
    *(_QWORD *)((char *)&v293 + 2) = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BoutExtractor: Evaluating Bout -- startTime,%{public}.2f,endTime,%{public}.2f,numberOfGaitMetrics,%{public}lu,numberOfStepCountEntries,%{public}lu", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v214 = *(double *)(a2 + 8);
    v215 = *(double *)(a2 + 16);
    v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 5);
    v217 = 0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 4);
    v284 = 134349824;
    v285 = v214;
    v286 = 2050;
    v287 = v215;
    v288 = 2050;
    v289 = *(double *)&v216;
    v290 = 2050;
    v291 = *(double *)&v217;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "BoutExtractor: Evaluating Bout -- startTime,%{public}.2f,endTime,%{public}.2f,numberOfGaitMetrics,%{public}lu,numberOfStepCountEntries,%{public}lu", &v284, 42);
    v219 = (uint8_t *)v218;
    sub_100512490("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v218);
    if (v219 != buf)
      free(v219);
  }
  *(_DWORD *)a5 = 0;
  *(_DWORD *)(a5 + 52) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_BYTE *)(a5 + 48) = 0;
  *(_OWORD *)(a5 + 56) = xmmword_101C158B0;
  v13 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)(a5 + 72) = v13;
  *(int64x2_t *)(a5 + 88) = v13;
  *(_QWORD *)(a5 + 104) = 0xFFF0000000000000;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_DWORD *)(a5 + 208) = 1071225242;
  *(_BYTE *)(a5 + 212) = 0;
  *(_DWORD *)(a5 + 216) = 1116213084;
  *(_BYTE *)(a5 + 220) = 0;
  *(_OWORD *)(a5 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a5 + 24) = *(_DWORD *)(a2 + 24);
  v14 = *a3;
  v15 = a3[1];
  v16 = v15 == *a3;
  *(_DWORD *)(a5 + 36) = -1431655765 * ((unint64_t)(v15 - *a3) >> 5);
  if (!v16)
  {
    *(_DWORD *)(a5 + 208) = *(_DWORD *)(v15 - 44);
    v17 = *(unsigned __int8 *)(v15 - 40);
    *(_BYTE *)(a5 + 212) = v17;
    *(_DWORD *)(a5 + 216) = *(_DWORD *)(v15 - 36);
    v18 = *(unsigned __int8 *)(v15 - 32);
    *(_BYTE *)(a5 + 220) = v18;
    if (*(unsigned __int8 *)(v14 + 56) != v17 || *(unsigned __int8 *)(v14 + 64) != v18)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v19 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "User setting changed mid bout... very weird", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        LOWORD(v284) = 0;
        LODWORD(v241) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "User setting changed mid bout... very weird", &v284, v241);
        v221 = (uint8_t *)v220;
        sub_100512490("Generic", 1, 0, 0, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v220);
        if (v221 != buf)
          free(v221);
      }
    }
  }
  v20 = *a3;
  v21 = a3[1];
  if (v21 != *a3)
  {
    *(_DWORD *)(a5 + 208) = *(_DWORD *)(v21 - 44);
    v22 = *(unsigned __int8 *)(v21 - 40);
    *(_BYTE *)(a5 + 212) = v22;
    *(_DWORD *)(a5 + 216) = *(_DWORD *)(v21 - 36);
    v23 = *(unsigned __int8 *)(v21 - 32);
    *(_BYTE *)(a5 + 220) = v23;
    if (*(unsigned __int8 *)(v20 + 56) != v22 || *(unsigned __int8 *)(v20 + 64) != v23)
    {
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v24 = qword_10229FE98;
      if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_ERROR))
      {
        v25 = a3[1];
        v26 = *(float *)(*a3 + 52);
        v27 = *(float *)(*a3 + 60);
        v28 = *(float *)(v25 - 44);
        v29 = *(float *)(v25 - 36);
        *(_DWORD *)buf = 134284289;
        *(double *)&buf[4] = v26;
        *(_WORD *)&buf[12] = 2049;
        *(double *)&buf[14] = v27;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v28;
        LOWORD(v293) = 2049;
        *(double *)((char *)&v293 + 2) = v29;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "User body metric setting changed mid bout from userHeight,%{private}.2f, userWeight,%{private}.2f to userHeight,%{private}.2f, userWeight,%{private}.2f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v222 = a3[1];
        v223 = *(float *)(*a3 + 52);
        v224 = *(float *)(*a3 + 60);
        v225 = *(float *)(v222 - 44);
        v226 = *(float *)(v222 - 36);
        v284 = 134284289;
        v285 = v223;
        v286 = 2049;
        v287 = v224;
        v288 = 2049;
        v289 = v225;
        v290 = 2049;
        v291 = v226;
        LODWORD(v241) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 16, "User body metric setting changed mid bout from userHeight,%{private}.2f, userWeight,%{private}.2f to userHeight,%{private}.2f, userWeight,%{private}.2f", &v284, v241);
        v228 = (uint8_t *)v227;
        sub_100512490("Generic", 1, 0, 0, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v227);
        if (v228 != buf)
          free(v228);
      }
    }
  }
  if (*(_DWORD *)(a5 + 24))
  {
    v243 = 0;
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v30 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
    {
      v31 = *(_QWORD *)(a2 + 8);
      v32 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding bout (%{public}.2f) due to insufficient steps: %u", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v229 = *(double *)(a2 + 8);
      v230 = *(_DWORD *)(a2 + 24);
      v284 = 134349312;
      v285 = v229;
      v286 = 1024;
      LODWORD(v287) = v230;
      LODWORD(v241) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "BoutExtractor: Discarding bout (%{public}.2f) due to insufficient steps: %u", &v284, v241);
      v232 = (uint8_t *)v231;
      sub_100512490("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v231);
      if (v232 != buf)
        free(v232);
    }
    v243 = 1;
  }
  v33 = sub_1006D3520((uint64_t)&v284);
  v244 = a3;
  v34 = *a4;
  v35 = a4[1];
  if (*a4 == v35)
    goto LABEL_47;
  v36 = 0;
  v37 = 0;
  do
  {
    v293 = 0u;
    v294 = 0u;
    memset(buf, 0, sizeof(buf));
    DWORD2(v293) = 1000;
    LODWORD(v294) = -1082130432;
    *(_QWORD *)&buf[8] = *(_QWORD *)(v34 + 8);
    *(_QWORD *)&buf[16] = *(_QWORD *)(v34 + 156);
    DWORD2(v293) = 0;
    v33 = sub_1000BE7C4((uint64_t)&v284, (__int128 *)buf, (uint64_t)__p);
    if ((_DWORD)v33)
    {
      if (fabs(v283) > 0.0001)
      {
        v38 = *(double *)(v34 + 72);
        if (fabs(v38) > 0.0001)
        {
          ++v37;
          v39 = v283 * v38 * 100.0;
          v40 = v39 < -5.0;
          if (v39 > 5.0)
            v40 = 1;
          v36 += v40;
        }
      }
    }
    v34 += 176;
  }
  while (v34 != v35);
  if (v37 <= 0)
  {
LABEL_47:
    *(_QWORD *)(a5 + 40) = 0;
    goto LABEL_48;
  }
  v41 = (double)v36 / (double)v37 * 100.0;
  *(double *)(a5 + 40) = v41;
  if (v41 <= 50.0)
  {
LABEL_48:
    v43 = v244;
    goto LABEL_49;
  }
  v42 = (double)v37 / (double)(unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a4[1] - *a4) >> 4));
  v43 = v244;
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v44 = v42 * 100.0;
  v45 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
  {
    v46 = *(_QWORD *)(a2 + 8);
    v47 = *(_QWORD *)(a5 + 40);
    *(_DWORD *)buf = 134349568;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v47;
    *(_WORD *)&buf[22] = 2050;
    *(double *)&buf[24] = v44;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "BoutExtractor: Discarding bout (%{public}.2f) due to too much invalid grade. invalidGradePct,%{public}.2f%%,gradeAvailability,%{public}.2f%%", buf, 0x20u);
  }
  v33 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v33)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v237 = *(void **)(a2 + 8);
    v238 = *(void **)(a5 + 40);
    LODWORD(__p[0]) = 134349568;
    *(void **)((char *)__p + 4) = v237;
    WORD2(__p[1]) = 2050;
    *(void **)((char *)&__p[1] + 6) = v238;
    HIWORD(__p[2]) = 2050;
    __p[3] = *(void **)&v44;
    LODWORD(v241) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 0, "BoutExtractor: Discarding bout (%{public}.2f) due to too much invalid grade. invalidGradePct,%{public}.2f%%,gradeAvailability,%{public}.2f%%", __p, v241);
    v240 = (uint8_t *)v239;
    v33 = sub_100512490("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v239);
    if (v240 != buf)
      free(v240);
    v43 = v244;
  }
  v243 |= 4u;
LABEL_49:
  v48 = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a5 + 28) = v48;
  if (v48 > 0x34 || ((1 << v48) & 0x10002001000001) == 0)
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v211 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
    {
      v212 = *(_QWORD *)(a2 + 8);
      v213 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v212;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v213;
      _os_log_impl((void *)&_mh_execute_header, v211, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding bout (%{public}.2f) due to ineligible workout type: %u", buf, 0x12u);
    }
    v33 = sub_1001BFF7C(115, 2);
    if ((_DWORD)v33)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v233 = *(void **)(a2 + 8);
      v234 = *(_DWORD *)(a2 + 28);
      LODWORD(__p[0]) = 134349312;
      *(void **)((char *)__p + 4) = v233;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = v234;
      LODWORD(v241) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 1, "BoutExtractor: Discarding bout (%{public}.2f) due to ineligible workout type: %u", __p, v241);
      v236 = (uint8_t *)v235;
      v33 = sub_100512490("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v235);
      if (v236 != buf)
        free(v236);
      v43 = v244;
    }
    v243 |= 8u;
  }
  memset(__p, 0, 24);
  v277 = 0;
  v278 = 0;
  v279 = 0;
  v274 = 0;
  v275 = 0;
  v276 = 0;
  v271 = 0;
  v272 = 0;
  v273 = 0;
  v268 = 0;
  v269 = 0;
  v270 = 0;
  v265 = 0;
  v266 = 0;
  v267 = 0;
  v262 = 0;
  v263 = 0;
  v264 = 0;
  v259 = 0;
  v260 = 0;
  v261 = 0;
  v256 = 0;
  v257 = 0;
  v258 = 0;
  v253 = 0;
  v254 = 0;
  v255 = 0;
  v250 = 0;
  v251 = 0;
  v252 = 0;
  v247 = 0;
  v248 = 0;
  v249 = 0;
  v49 = *v43;
  v246 = v43[1];
  if (*v43 != v246)
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    do
    {
      v53 = *(float *)(v49 + 24);
      if (v53 > 0.0)
      {
        v54 = (char *)__p[1];
        if (__p[1] >= __p[2])
        {
          v33 = (uint64_t)__p[0];
          v56 = ((char *)__p[1] - (char *)__p[0]) >> 2;
          v57 = v56 + 1;
          if ((unint64_t)(v56 + 1) >> 62)
            goto LABEL_366;
          v58 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 1 > v57)
            v57 = v58 >> 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
            v59 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v60 = (char *)sub_100260634((uint64_t)&__p[2], v59);
            v33 = (uint64_t)__p[0];
            v54 = (char *)__p[1];
            v53 = *(float *)(v49 + 24);
          }
          else
          {
            v60 = 0;
          }
          v61 = (float *)&v60[4 * v56];
          *v61 = v53;
          v55 = v61 + 1;
          while (v54 != (char *)v33)
          {
            v62 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *((_DWORD *)v61-- - 1) = v62;
          }
          __p[0] = v61;
          __p[1] = v55;
          __p[2] = &v60[4 * v59];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *(float *)__p[1] = v53;
          v55 = v54 + 4;
        }
        __p[1] = v55;
        v63 = v263;
        if (v263 >= v264)
        {
          v33 = (uint64_t)v262;
          v65 = ((char *)v263 - (_BYTE *)v262) >> 2;
          v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 62)
            goto LABEL_366;
          v67 = (char *)v264 - (_BYTE *)v262;
          if (((char *)v264 - (_BYTE *)v262) >> 1 > v66)
            v66 = v67 >> 1;
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
            v68 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v68 = v66;
          if (v68)
          {
            v69 = (char *)sub_100260634((uint64_t)&v264, v68);
            v33 = (uint64_t)v262;
            v63 = v263;
          }
          else
          {
            v69 = 0;
          }
          v70 = &v69[4 * v65];
          *(_DWORD *)v70 = *(_DWORD *)(v49 + 68);
          v64 = (float *)(v70 + 4);
          while (v63 != (float *)v33)
          {
            v71 = *((_DWORD *)v63-- - 1);
            *((_DWORD *)v70 - 1) = v71;
            v70 -= 4;
          }
          v262 = v70;
          v263 = v64;
          v264 = (float *)&v69[4 * v68];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v263 = *(float *)(v49 + 68);
          v64 = v63 + 1;
        }
        v263 = v64;
        v72 = v260;
        if (v260 >= v261)
        {
          v33 = (uint64_t)v259;
          v74 = ((char *)v260 - (_BYTE *)v259) >> 2;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            goto LABEL_366;
          v76 = (char *)v261 - (_BYTE *)v259;
          if (((char *)v261 - (_BYTE *)v259) >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v77 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v77 = v75;
          if (v77)
          {
            v78 = (char *)sub_100260634((uint64_t)&v261, v77);
            v33 = (uint64_t)v259;
            v72 = v260;
          }
          else
          {
            v78 = 0;
          }
          v79 = &v78[4 * v74];
          *(_DWORD *)v79 = *(_DWORD *)(v49 + 72);
          v73 = (float *)(v79 + 4);
          while (v72 != (float *)v33)
          {
            v80 = *((_DWORD *)v72-- - 1);
            *((_DWORD *)v79 - 1) = v80;
            v79 -= 4;
          }
          v259 = v79;
          v260 = v73;
          v261 = (float *)&v78[4 * v77];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v260 = *(float *)(v49 + 72);
          v73 = v72 + 1;
        }
        v260 = v73;
        v81 = v257;
        if (v257 >= v258)
        {
          v33 = (uint64_t)v256;
          v83 = ((char *)v257 - (_BYTE *)v256) >> 2;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 62)
            goto LABEL_366;
          v85 = (char *)v258 - (_BYTE *)v256;
          if (((char *)v258 - (_BYTE *)v256) >> 1 > v84)
            v84 = v85 >> 1;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
            v86 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          if (v86)
          {
            v87 = (char *)sub_100260634((uint64_t)&v258, v86);
            v33 = (uint64_t)v256;
            v81 = v257;
          }
          else
          {
            v87 = 0;
          }
          v88 = &v87[4 * v83];
          *(_DWORD *)v88 = *(_DWORD *)(v49 + 76);
          v82 = (float *)(v88 + 4);
          while (v81 != (float *)v33)
          {
            v89 = *((_DWORD *)v81-- - 1);
            *((_DWORD *)v88 - 1) = v89;
            v88 -= 4;
          }
          v256 = v88;
          v257 = v82;
          v258 = (float *)&v87[4 * v86];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v257 = *(float *)(v49 + 76);
          v82 = v81 + 1;
        }
        v257 = v82;
        v90 = v254;
        if (v254 >= v255)
        {
          v33 = (uint64_t)v253;
          v92 = ((char *)v254 - (_BYTE *)v253) >> 2;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            goto LABEL_366;
          v94 = (char *)v255 - (_BYTE *)v253;
          if (((char *)v255 - (_BYTE *)v253) >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v95 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          if (v95)
          {
            v96 = (char *)sub_100260634((uint64_t)&v255, v95);
            v33 = (uint64_t)v253;
            v90 = v254;
          }
          else
          {
            v96 = 0;
          }
          v97 = &v96[4 * v92];
          *(_DWORD *)v97 = *(_DWORD *)(v49 + 80);
          v91 = (float *)(v97 + 4);
          while (v90 != (float *)v33)
          {
            v98 = *((_DWORD *)v90-- - 1);
            *((_DWORD *)v97 - 1) = v98;
            v97 -= 4;
          }
          v253 = v97;
          v254 = v91;
          v255 = (float *)&v96[4 * v95];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v254 = *(float *)(v49 + 80);
          v91 = v90 + 1;
        }
        v254 = v91;
        v99 = v251;
        if (v251 >= v252)
        {
          v33 = (uint64_t)v250;
          v101 = ((char *)v251 - (_BYTE *)v250) >> 2;
          v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 62)
            goto LABEL_366;
          v103 = (char *)v252 - (_BYTE *)v250;
          if (((char *)v252 - (_BYTE *)v250) >> 1 > v102)
            v102 = v103 >> 1;
          if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
            v104 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v104 = v102;
          if (v104)
          {
            v105 = (char *)sub_100260634((uint64_t)&v252, v104);
            v33 = (uint64_t)v250;
            v99 = v251;
          }
          else
          {
            v105 = 0;
          }
          v106 = &v105[4 * v101];
          *(_DWORD *)v106 = *(_DWORD *)(v49 + 84);
          v100 = (float *)(v106 + 4);
          while (v99 != (float *)v33)
          {
            v107 = *((_DWORD *)v99-- - 1);
            *((_DWORD *)v106 - 1) = v107;
            v106 -= 4;
          }
          v250 = v106;
          v251 = v100;
          v252 = (float *)&v105[4 * v104];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v251 = *(float *)(v49 + 84);
          v100 = v99 + 1;
        }
        v251 = v100;
        v108 = v248;
        if (v248 >= v249)
        {
          v33 = (uint64_t)v247;
          v110 = v248 - v247;
          v111 = v110 + 1;
          if ((unint64_t)(v110 + 1) >> 62)
            goto LABEL_366;
          v112 = (char *)v249 - (char *)v247;
          if (((char *)v249 - (char *)v247) >> 1 > v111)
            v111 = v112 >> 1;
          if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
            v113 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v113 = v111;
          if (v113)
          {
            v114 = (char *)sub_100260634((uint64_t)&v249, v113);
            v33 = (uint64_t)v247;
            v108 = v248;
          }
          else
          {
            v114 = 0;
          }
          v115 = &v114[4 * v110];
          *(_DWORD *)v115 = *(_DWORD *)(v49 + 88);
          v109 = (float *)(v115 + 4);
          while (v108 != (float *)v33)
          {
            v116 = *((_DWORD *)v108-- - 1);
            *((_DWORD *)v115 - 1) = v116;
            v115 -= 4;
          }
          v247 = (float *)v115;
          v249 = (float *)&v114[4 * v113];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v248 = *(float *)(v49 + 88);
          v109 = v248 + 1;
        }
        v248 = v109;
        v117 = *(float *)(v49 + 48);
        if (v117 > 0.0)
        {
          v118 = v266;
          if (v266 >= v267)
          {
            v33 = (uint64_t)v265;
            v120 = ((char *)v266 - (_BYTE *)v265) >> 2;
            v121 = v120 + 1;
            if ((unint64_t)(v120 + 1) >> 62)
              goto LABEL_366;
            v122 = (char *)v267 - (_BYTE *)v265;
            if (((char *)v267 - (_BYTE *)v265) >> 1 > v121)
              v121 = v122 >> 1;
            if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL)
              v123 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v123 = v121;
            if (v123)
            {
              v124 = (char *)sub_100260634((uint64_t)&v267, v123);
              v33 = (uint64_t)v265;
              v118 = v266;
              v117 = *(float *)(v49 + 48);
            }
            else
            {
              v124 = 0;
            }
            v125 = (float *)&v124[4 * v120];
            *v125 = v117;
            v119 = v125 + 1;
            while (v118 != (float *)v33)
            {
              v126 = *((_DWORD *)v118-- - 1);
              *((_DWORD *)v125-- - 1) = v126;
            }
            v265 = v125;
            v266 = v119;
            v267 = (float *)&v124[4 * v123];
            if (v33)
              operator delete((void *)v33);
          }
          else
          {
            *v266 = v117;
            v119 = v118 + 1;
          }
          v266 = v119;
        }
      }
      v127 = *(float *)(v49 + 28);
      if (v127 > 0.0 && *(float *)(v49 + 36) <= 0.75)
      {
        v129 = v278;
        if (v278 >= v279)
        {
          v33 = (uint64_t)v277;
          v131 = ((char *)v278 - (_BYTE *)v277) >> 2;
          v132 = v131 + 1;
          if ((unint64_t)(v131 + 1) >> 62)
            goto LABEL_366;
          v133 = (char *)v279 - (_BYTE *)v277;
          if (((char *)v279 - (_BYTE *)v277) >> 1 > v132)
            v132 = v133 >> 1;
          if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
            v134 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v134 = v132;
          if (v134)
          {
            v135 = (char *)sub_100260634((uint64_t)&v279, v134);
            v33 = (uint64_t)v277;
            v129 = v278;
            v127 = *(float *)(v49 + 28);
          }
          else
          {
            v135 = 0;
          }
          v136 = (float *)&v135[4 * v131];
          *v136 = v127;
          v130 = v136 + 1;
          while (v129 != (float *)v33)
          {
            v137 = *((_DWORD *)v129-- - 1);
            *((_DWORD *)v136-- - 1) = v137;
          }
          v277 = v136;
          v278 = v130;
          v279 = (float *)&v135[4 * v134];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v278 = v127;
          v130 = v129 + 1;
        }
        v278 = v130;
      }
      v138 = *(float *)(v49 + 32);
      if (v138 > 0.0)
      {
        v139 = v275;
        if (v275 >= v276)
        {
          v33 = (uint64_t)v274;
          v141 = ((char *)v275 - (_BYTE *)v274) >> 2;
          v142 = v141 + 1;
          if ((unint64_t)(v141 + 1) >> 62)
            goto LABEL_366;
          v143 = (char *)v276 - (_BYTE *)v274;
          if (((char *)v276 - (_BYTE *)v274) >> 1 > v142)
            v142 = v143 >> 1;
          if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFFCLL)
            v144 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v144 = v142;
          if (v144)
          {
            v145 = (char *)sub_100260634((uint64_t)&v276, v144);
            v33 = (uint64_t)v274;
            v139 = v275;
            v138 = *(float *)(v49 + 32);
          }
          else
          {
            v145 = 0;
          }
          v146 = (float *)&v145[4 * v141];
          *v146 = v138;
          v140 = v146 + 1;
          while (v139 != (float *)v33)
          {
            v147 = *((_DWORD *)v139-- - 1);
            *((_DWORD *)v146-- - 1) = v147;
          }
          v274 = v146;
          v275 = v140;
          v276 = (float *)&v145[4 * v144];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v275 = v138;
          v140 = v139 + 1;
        }
        v275 = v140;
      }
      v148 = *(float *)(v49 + 36);
      if (v148 > 0.0)
      {
        v149 = v272;
        if (v272 >= v273)
        {
          v33 = (uint64_t)v271;
          v151 = ((char *)v272 - (_BYTE *)v271) >> 2;
          v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62)
LABEL_366:
            sub_100259694();
          v153 = (char *)v273 - (_BYTE *)v271;
          if (((char *)v273 - (_BYTE *)v271) >> 1 > v152)
            v152 = v153 >> 1;
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
            v154 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v154 = v152;
          if (v154)
          {
            v155 = (char *)sub_100260634((uint64_t)&v273, v154);
            v33 = (uint64_t)v271;
            v149 = v272;
            v148 = *(float *)(v49 + 36);
          }
          else
          {
            v155 = 0;
          }
          v156 = (float *)&v155[4 * v151];
          *v156 = v148;
          v150 = v156 + 1;
          while (v149 != (float *)v33)
          {
            v157 = *((_DWORD *)v149-- - 1);
            *((_DWORD *)v156-- - 1) = v157;
          }
          v271 = v156;
          v272 = v150;
          v273 = (float *)&v155[4 * v154];
          if (v33)
            operator delete((void *)v33);
        }
        else
        {
          *v272 = v148;
          v150 = v149 + 1;
        }
        v272 = v150;
        if ((unint64_t)v52 >= v51)
        {
          v159 = &v52[-v50];
          v160 = (uint64_t)&v52[-v50 + 1];
          if (v160 < 0)
            sub_100259694();
          if (2 * (v51 - v50) > v160)
            v160 = 2 * (v51 - v50);
          if (v51 - v50 >= 0x3FFFFFFFFFFFFFFFLL)
            v161 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v161 = v160;
          if (v161)
            v33 = (uint64_t)operator new(v161);
          else
            v33 = 0;
          v162 = &v159[v33];
          v163 = &v159[v33];
          *v163 = *(_BYTE *)(v49 + 40);
          v158 = v163 + 1;
          if (v52 != (_BYTE *)v50)
          {
            v164 = &v52[~v50];
            do
            {
              v165 = *--v52;
              (v164--)[v33] = v165;
            }
            while (v52 != (_BYTE *)v50);
            v162 = (_BYTE *)v33;
          }
          v51 = v33 + v161;
          v268 = v162;
          v269 = v158;
          v270 = v33 + v161;
          if (v50)
            operator delete((void *)v50);
          v50 = (unint64_t)v162;
          v43 = v244;
        }
        else
        {
          *v52 = *(_BYTE *)(v49 + 40);
          v158 = v52 + 1;
        }
        v269 = v158;
        v52 = v158;
      }
      v166 = *(double *)(v49 + 8);
      if (v166 != *(double *)(*v43 + 8))
      {
        LODWORD(v166) = *(_DWORD *)(v49 + 41);
        v167 = (uint16x4_t)vmovl_u8(*(uint8x8_t *)&v166).u64[0];
        *(uint32x4_t *)(a5 + 168) = vaddw_u16(*(uint32x4_t *)(a5 + 168), v167);
        v168 = *(_DWORD *)(a5 + 188);
        *(_DWORD *)(a5 + 184) += *(unsigned __int8 *)(v49 + 45);
        *(_DWORD *)(a5 + 188) = v168 + *(unsigned __int8 *)(v49 + 46);
        if (v167.i8[4] == -1
          || *(unsigned __int8 *)(v49 + 44) == 255
          || *(unsigned __int8 *)(v49 + 42) == 255
          || *(unsigned __int8 *)(v49 + 41) == 255
          || *(unsigned __int8 *)(v49 + 45) == 255
          || *(unsigned __int8 *)(v49 + 46) == 255)
        {
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          v169 = qword_10229FE98;
          if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEFAULT))
          {
            v170 = *(_QWORD *)(a2 + 8);
            *(_DWORD *)buf = 134349056;
            *(_QWORD *)&buf[4] = v170;
            _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "#warning One or more of GaitMetrics rejection counters hit capacity, Bout (%{public}.2f) segment rejection will undercount", buf, 0xCu);
          }
          v33 = sub_1001BFF7C(115, 2);
          if ((_DWORD)v33)
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE90 != -1)
              dispatch_once(&qword_10229FE90, &stru_10217B038);
            v171 = *(_QWORD *)(a2 + 8);
            v280 = 134349056;
            v281 = v171;
            LODWORD(v241) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE98, 0, "#warning One or more of GaitMetrics rejection counters hit capacity, Bout (%{public}.2f) segment rejection will undercount", &v280, v241);
            v173 = (uint8_t *)v172;
            v33 = sub_100512490("Generic", 1, 0, 2, "BoutMetrics CLMobility::WalkingBoutExtractor::evaluateBout(const BoutBoundary &, const std::vector<GaitMetrics> &, const std::vector<CLStepCountEntry> &)", "%s\n", v172);
            if (v173 != buf)
              free(v173);
          }
        }
      }
      v49 += 96;
    }
    while (v49 != v246);
  }
  v174 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a5 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a5 + 52) = v174;
  *(_BYTE *)(a5 + 48) = sub_100C2E760(v33, &v268);
  v175 = (float *)v265;
  v176 = 0.0;
  v177 = 0.0;
  if (v266 != v265)
  {
    do
    {
      v178 = *v175++;
      v177 = v177 + v178;
    }
    while (v175 != v266);
    v177 = v177 / (float)(unint64_t)(((char *)v266 - (_BYTE *)v265) >> 2);
  }
  *(double *)(a5 + 56) = v177;
  v179 = (float *)v262;
  if (v263 != v262)
  {
    v180 = 0.0;
    do
    {
      v181 = *v179++;
      v180 = v180 + v181;
    }
    while (v179 != v263);
    v176 = v180 / (float)(unint64_t)(((char *)v263 - (_BYTE *)v262) >> 2);
  }
  *(float *)(a5 + 144) = v176;
  v182 = (float *)v259;
  v183 = 0.0;
  v184 = 0.0;
  if (v260 != v259)
  {
    do
    {
      v185 = *v182++;
      v184 = v184 + v185;
    }
    while (v182 != v260);
    v184 = v184 / (float)(unint64_t)(((char *)v260 - (_BYTE *)v259) >> 2);
  }
  *(float *)(a5 + 148) = v184;
  v186 = (float *)v256;
  if (v257 != v256)
  {
    v187 = 0.0;
    do
    {
      v188 = *v186++;
      v187 = v187 + v188;
    }
    while (v186 != v257);
    v183 = v187 / (float)(unint64_t)(((char *)v257 - (_BYTE *)v256) >> 2);
  }
  *(float *)(a5 + 152) = v183;
  v189 = (float *)v253;
  v190 = 0.0;
  v191 = 0.0;
  if (v254 != v253)
  {
    do
    {
      v192 = *v189++;
      v191 = v191 + v192;
    }
    while (v189 != v254);
    v191 = v191 / (float)(unint64_t)(((char *)v254 - (_BYTE *)v253) >> 2);
  }
  *(float *)(a5 + 156) = v191;
  v193 = (float *)v250;
  if (v251 != v250)
  {
    v194 = 0.0;
    do
    {
      v195 = *v193++;
      v194 = v194 + v195;
    }
    while (v193 != v251);
    v190 = v194 / (float)(unint64_t)(((char *)v251 - (_BYTE *)v250) >> 2);
  }
  *(float *)(a5 + 160) = v190;
  v196 = v247;
  if (v248 == v247)
  {
    v199 = 0.0;
  }
  else
  {
    v197 = 0.0;
    do
    {
      v198 = *v196++;
      v197 = v197 + v198;
    }
    while (v196 != v248);
    v199 = v197 / (float)(unint64_t)(v248 - v247);
  }
  *(float *)(a5 + 164) = v199;
  *(_QWORD *)(a5 + 112) = sub_100C2EA08(a1, 0, (float **)__p, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 192) = v243 | v200;
  *(_QWORD *)(a5 + 120) = sub_100C2EA08(a1, 1u, (float **)&v277, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 196) = v243 | v201;
  *(_QWORD *)(a5 + 128) = sub_100C2EA08(a1, 2u, (float **)&v274, *(_DWORD *)(a5 + 24));
  *(_DWORD *)(a5 + 200) = v243 | v202;
  v203 = sub_100C2EA08(a1, 3u, (float **)&v271, *(_DWORD *)(a5 + 24));
  *(_QWORD *)(a5 + 136) = v203;
  *(_DWORD *)(a5 + 204) = v243 | v204;
  *(double *)(a5 + 72) = sub_100C2F2FC(v203, (float **)&v274);
  *(_QWORD *)(a5 + 80) = v205;
  *(double *)(a5 + 96) = sub_100C2F2FC(v206, (float **)&v265);
  *(_QWORD *)(a5 + 104) = v207;
  *(double *)(a5 + 64) = sub_100C2F770(0.025, v208, (uint64_t *)&v274);
  *(double *)(a5 + 88) = sub_100C2F770(0.05, v209, (uint64_t *)&v265);
  if (v247)
    operator delete(v247);
  if (v250)
  {
    v251 = (float *)v250;
    operator delete(v250);
  }
  if (v253)
  {
    v254 = (float *)v253;
    operator delete(v253);
  }
  if (v256)
  {
    v257 = (float *)v256;
    operator delete(v256);
  }
  if (v259)
  {
    v260 = (float *)v259;
    operator delete(v259);
  }
  if (v262)
  {
    v263 = (float *)v262;
    operator delete(v262);
  }
  if (v265)
  {
    v266 = (float *)v265;
    operator delete(v265);
  }
  if (v268)
    operator delete(v268);
  if (v271)
  {
    v272 = (float *)v271;
    operator delete(v271);
  }
  if (v274)
  {
    v275 = (float *)v274;
    operator delete(v274);
  }
  if (v277)
  {
    v278 = (float *)v277;
    operator delete(v277);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return sub_1006D0BAC(&v284);
}

void sub_100C2E640(_Unwind_Exception *a1)
{
  sub_1006D0BAC(&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_100C2E760(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  double v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  char *v17;
  char *v18;
  double v20;
  double v21;
  std::string v22;
  std::string __p;
  double v24;
  uint8_t buf[4];
  std::string *v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;

  v3 = (unsigned __int8 *)*a2;
  v2 = (unsigned __int8 *)a2[1];
  v4 = (unint64_t)&v2[-*a2];
  if (v2 == (unsigned __int8 *)*a2)
    return 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v8 = *v3++;
    v7 = v8;
    if (v8 == 1)
      v9 = v5 + 1;
    else
      v9 = v5;
    if (v7 == 2)
      ++v6;
    else
      v5 = v9;
  }
  while (v3 != v2);
  v10 = (double)v5 / (double)v4;
  v11 = (double)v6 / (double)v4;
  if (v10 >= 0.666666667)
    v12 = 1;
  else
    v12 = 2 * (v11 >= 0.666666667);
  if (qword_10229FE90 != -1)
    dispatch_once(&qword_10229FE90, &stru_10217B038);
  v13 = qword_10229FE98;
  if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
  {
    sub_101081C98(v12, &__p);
    v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    v26 = v14;
    v27 = 2048;
    v28 = v10;
    v29 = 2048;
    v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Bout DeviceSide: %s (left=%.4f, right=%.4f)", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v15 = qword_10229FE98;
    sub_101081C98(v12, &v22);
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v22;
    else
      v16 = (std::string *)v22.__r_.__value_.__r.__words[0];
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
    *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v10;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2048;
    v24 = v11;
    LODWORD(v20) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 2, "Bout DeviceSide: %s (left=%.4f, right=%.4f)", (const char *)&__p, v20, v21);
    v18 = v17;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "DeviceSide CLMobility::WalkingBoutExtractor::calculateBoutSidedness(const std::vector<DeviceSide> &) const", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  return v12;
}

uint64_t sub_100C2EA08(_OWORD *a1, unsigned int a2, float **a3, int a4)
{
  float *v5;
  float *v6;
  uint64_t v7;
  float v11;
  float v12;
  NSObject *v13;
  std::string *v14;
  double v15;
  NSObject *v16;
  const char *v17;
  std::string *v18;
  float v19;
  float v20;
  double v21;
  double v22;
  float v23;
  int v24;
  uint64_t v25;
  float v26;
  NSObject *v27;
  std::string *v28;
  uint64_t v29;
  double v30;
  NSObject *v31;
  std::string *v32;
  __int128 v33;
  uint64_t v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  std::string *v40;
  uint64_t v41;
  std::string *v42;
  std::string *v43;
  uint64_t v44;
  std::string *p_buf;
  std::string *v46;
  std::string *v47;
  uint64_t v48;
  _OWORD v49[2];
  _BYTE v50[28];
  std::string v51;
  std::string buf;
  int v53;
  std::string __p;
  int v55;

  v6 = *a3;
  v5 = a3[1];
  v7 = v5 - *a3;
  if ((_DWORD)v7)
  {
    switch(a2)
    {
      case 0u:
        v11 = 0.0;
        if (v5 == v6)
          goto LABEL_32;
        do
        {
          v12 = *v6++;
          v11 = v11 + v12;
        }
        while (v6 != v5);
        goto LABEL_31;
      case 1u:
        v19 = 0.0;
        if (v5 != v6)
        {
          do
          {
            v20 = *v6++;
            v19 = v19 + v20;
          }
          while (v6 != v5);
          v19 = v19 / (float)(unint64_t)v7;
        }
        v21 = v19;
        v22 = 0.1;
        goto LABEL_33;
      case 2u:
        v11 = 0.0;
        if (v5 != v6)
        {
          do
          {
            v23 = *v6++;
            v11 = v11 + v23;
          }
          while (v6 != v5);
LABEL_31:
          v11 = v11 / (float)(unint64_t)v7;
        }
LABEL_32:
        v21 = v11;
        v22 = 0.01;
LABEL_33:
        v15 = sub_100C5CFAC(v21, v22);
        goto LABEL_34;
      case 3u:
        if (v6 == v5)
        {
          v25 = 0;
        }
        else
        {
          v25 = 0;
          do
          {
            v26 = *v6++;
            if (v26 > 0.65)
              ++v25;
          }
          while (v6 != v5);
        }
        v15 = sub_100C5CFAC((float)((float)((float)v25 / (float)(unint64_t)v7) * 100.0), 1.0);
        v24 = 10;
        goto LABEL_43;
      default:
        if (qword_10229FE90 != -1)
          dispatch_once(&qword_10229FE90, &stru_10217B038);
        v16 = qword_10229FE98;
        if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_FAULT))
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__p.__r_.__value_.__r.__words[0]) = a2;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Unexpected CLMobility::QuantityTypeIdentifier %d", (uint8_t *)&__p, 8u);
        }
        v15 = 0.0;
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
          _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_10229FE98, 17, "Unexpected CLMobility::QuantityTypeIdentifier %d", &buf);
          v18 = (std::string *)v17;
          sub_100512490("Generic", 1, 0, 0, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", v17);
          if (v18 != &__p)
            free(v18);
        }
LABEL_34:
        v24 = 2;
LABEL_43:
        if (v24 > (int)v7)
        {
          if (qword_10229FE90 != -1)
            dispatch_once(&qword_10229FE90, &stru_10217B038);
          v27 = qword_10229FE98;
          if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
          {
            sub_101081C30(a2, &buf);
            v28 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &buf
                : (std::string *)buf.__r_.__value_.__r.__words[0];
            v29 = a3[1] - *a3;
            LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v29;
            HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
            v55 = v24;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding %s due to insufficient gait metrics (%{public}lu/%{public}d)", (uint8_t *)&__p, 0x1Cu);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_10229FE90 != -1)
              dispatch_once(&qword_10229FE90, &stru_10217B038);
            v39 = qword_10229FE98;
            sub_101081C30(a2, &v51);
            if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v40 = &v51;
            else
              v40 = (std::string *)v51.__r_.__value_.__r.__words[0];
            v41 = a3[1] - *a3;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v41;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
            v53 = v24;
            _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v39, 1, "BoutExtractor: Discarding %s due to insufficient gait metrics (%{public}lu/%{public}d)", &buf, 28);
            v43 = v42;
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v51.__r_.__value_.__l.__data_);
            sub_100512490("Generic", 1, 0, 2, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", (const char *)v43);
            if (v43 != &__p)
              free(v43);
          }
        }
        if (a4 >= 1)
        {
          v30 = ((double)(int)v7 + (double)(int)v7) / (double)a4;
          if (v30 < 0.5)
          {
            if (qword_10229FE90 != -1)
              dispatch_once(&qword_10229FE90, &stru_10217B038);
            v31 = qword_10229FE98;
            if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
            {
              sub_101081C30(a2, &__p);
              v32 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
              *(double *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v30;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding (%{public}s) due to insufficient gait metrics yield: %{public}.4f", (uint8_t *)&buf, 0x16u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_10229FE90 != -1)
                dispatch_once(&qword_10229FE90, &stru_10217B038);
              v44 = qword_10229FE98;
              sub_101081C30(a2, &buf);
              if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_buf = &buf;
              else
                p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
              LODWORD(v51.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
              WORD2(v51.__r_.__value_.__r.__words[1]) = 2050;
              *(double *)((char *)&v51.__r_.__value_.__r.__words[1] + 6) = v30;
              LODWORD(v48) = 22;
              _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v44, 1, "BoutExtractor: Discarding (%{public}s) due to insufficient gait metrics yield: %{public}.4f", &v51, v48);
              v47 = v46;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf.__r_.__value_.__l.__data_);
              sub_100512490("Generic", 1, 0, 2, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", (const char *)v47);
              if (v47 != &__p)
                free(v47);
            }
          }
        }
        *(_OWORD *)&v50[12] = a1[38];
        v33 = *(_OWORD *)((char *)a1 + 580);
        v49[0] = *(_OWORD *)((char *)a1 + 564);
        v49[1] = v33;
        *(_OWORD *)v50 = *(_OWORD *)((char *)a1 + 596);
        sub_1010820F4((uint64_t)v49, a2, v15);
        break;
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v13 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_INFO))
    {
      sub_101081C30(a2, &__p);
      v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BoutExtractor: Discarding %s due to no gait metrics", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v15 = 0.0;
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v35 = qword_10229FE98;
      sub_101081C30(a2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &buf;
      else
        v36 = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v51.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v35, 1, "BoutExtractor: Discarding %s due to no gait metrics", (const char *)&v51);
      v38 = v37;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "WalkingBoutExtractor::MetricAndStatus CLMobility::WalkingBoutExtractor::calculateBoutMetric(QuantityTypeIdentifier, const std::vector<float> &, int) const", "%s\n", (const char *)v38);
      if (v38 != &__p)
        free(v38);
    }
  }
  return *(_QWORD *)&v15;
}

double sub_100C2F2FC(uint64_t a1, float **a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  double v6;
  float *v7;
  unint64_t v8;
  double v9;
  double v10;
  double v11;
  char *v12;
  double *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  double v22;
  char *v23;
  double *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;
  uint64_t v34;
  const char *v35;
  char *v36;
  __int128 __p;
  char *v38;
  __int128 buf;
  char *v40;

  v3 = (char *)a2[1] - (char *)*a2;
  if ((unint64_t)v3 > 0x53)
  {
    buf = 0uLL;
    v40 = 0;
    __p = 0uLL;
    v38 = 0;
    sub_100407BF8((void **)&buf, v3 >> 2);
    sub_100407BF8((void **)&__p, a2[1] - *a2);
    v7 = *a2;
    if ((char *)a2[1] - (char *)*a2 != 4)
    {
      v8 = 0;
      v9 = *v7 * 0.707106781;
      do
      {
        v10 = v9;
        v9 = v7[++v8] * 0.707106781;
        v11 = v10 - v9;
        v12 = (char *)*((_QWORD *)&buf + 1);
        if (*((_QWORD *)&buf + 1) >= (unint64_t)v40)
        {
          v14 = (char *)buf;
          v15 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 3;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61)
            sub_100259694();
          v17 = (uint64_t)&v40[-buf];
          if ((uint64_t)&v40[-buf] >> 2 > v16)
            v16 = v17 >> 2;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)sub_10025E6A0((uint64_t)&v40, v18);
            v12 = (char *)*((_QWORD *)&buf + 1);
            v14 = (char *)buf;
          }
          else
          {
            v19 = 0;
          }
          v20 = (double *)&v19[8 * v15];
          *v20 = v11;
          v13 = v20 + 1;
          while (v12 != v14)
          {
            v21 = *((_QWORD *)v12 - 1);
            v12 -= 8;
            *((_QWORD *)v20-- - 1) = v21;
          }
          *(_QWORD *)&buf = v20;
          *((_QWORD *)&buf + 1) = v13;
          v40 = &v19[8 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          **((double **)&buf + 1) = v11;
          v13 = (double *)(v12 + 8);
        }
        *((_QWORD *)&buf + 1) = v13;
        v22 = v10 + v9;
        v23 = (char *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) >= (unint64_t)v38)
        {
          v25 = (char *)__p;
          v26 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 3;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
            sub_100259694();
          v28 = (uint64_t)&v38[-__p];
          if ((uint64_t)&v38[-__p] >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)sub_10025E6A0((uint64_t)&v38, v29);
            v23 = (char *)*((_QWORD *)&__p + 1);
            v25 = (char *)__p;
          }
          else
          {
            v30 = 0;
          }
          v31 = (double *)&v30[8 * v26];
          *v31 = v22;
          v24 = v31 + 1;
          while (v23 != v25)
          {
            v32 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *((_QWORD *)v31-- - 1) = v32;
          }
          *(_QWORD *)&__p = v31;
          *((_QWORD *)&__p + 1) = v24;
          v38 = &v30[8 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          **((double **)&__p + 1) = v22;
          v24 = (double *)(v23 + 8);
        }
        *((_QWORD *)&__p + 1) = v24;
        v7 = *a2;
      }
      while (a2[1] - *a2 - 1 > v8);
    }
    v6 = sub_101081D90((double **)&buf);
    sub_101081D90((double **)&__p);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    if ((_QWORD)buf)
    {
      *((_QWORD *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v4 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      v5 = a2[1] - *a2;
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Does not meet minimum number of samples criteria for Poincare, size: %lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v34 = a2[1] - *a2;
      LODWORD(__p) = 134217984;
      *(_QWORD *)((char *)&__p + 4) = v34;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "Does not meet minimum number of samples criteria for Poincare, size: %lu", &__p);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "WalkingBoutExtractor::PoincareMetrics CLMobility::WalkingBoutExtractor::computePoincareMetrics(const std::vector<float> &) const", "%s\n", v35);
      if (v36 != (char *)&buf)
        free(v36);
    }
    return -INFINITY;
  }
  return v6;
}

void sub_100C2F728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

double sub_100C2F770(float a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v4;
  uint64_t v5;
  double v6;
  unint64_t i;
  uint64_t v9;
  double v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  unint64_t v20;
  float v21;
  char *v22;
  float *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  float *v30;
  int v31;
  unint64_t v32;
  float *v33;
  float v34;
  float v35;
  char *v36;
  float *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  float *v44;
  int v45;
  void *v46;
  float v47;
  uint64_t v49;
  const char *v50;
  char *v51;
  void *__p;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  __int128 buf;
  char *v61;

  if ((unint64_t)(a3[1] - *a3) > 0x53)
  {
    buf = 0uLL;
    v61 = 0;
    for (i = 2; i != 4; ++i)
    {
      v58 = 0uLL;
      v59 = 0;
      v9 = *a3;
      v10 = 0.0;
      if (((a3[1] - *a3) >> 2) - i == -1)
      {
        v32 = 0;
      }
      else
      {
        v11 = 0;
        do
        {
          v55 = 0;
          v56 = 0;
          v57 = 0;
          sub_10027205C(&v55, (const void *)(v9 + 4 * v11), v9 + 4 * v11 + 4 * i, i);
          v12 = *a3;
          v13 = (a3[1] - *a3) >> 2;
          if (v13 - i == -1)
          {
            v20 = 0;
            v15 = 0.0;
          }
          else
          {
            v14 = 0;
            v15 = 0.0;
            do
            {
              if (v13 < v14 + i)
                goto LABEL_25;
              __p = 0;
              v53 = 0;
              v54 = 0;
              sub_10027205C(&__p, (const void *)(v12 + 4 * v14), v12 + 4 * v14 + 4 * i, i);
              v16 = 0;
              v17 = 0;
              do
              {
                if (vabds_f32(*((float *)v55 + v16), *((float *)__p + v16)) > a1 && v17 == 0)
                  v17 = 1;
                ++v16;
              }
              while (i != v16);
              v53 = __p;
              operator delete(__p);
              if (!v17)
LABEL_25:
                v15 = v15 + 1.0;
              ++v14;
              v12 = *a3;
              v13 = (a3[1] - *a3) >> 2;
              v20 = v13 - i + 1;
            }
            while (v20 > v14);
          }
          v21 = v15 / (float)v20;
          v22 = (char *)*((_QWORD *)&v58 + 1);
          if (*((_QWORD *)&v58 + 1) >= (unint64_t)v59)
          {
            v24 = (char *)v58;
            v25 = (uint64_t)(*((_QWORD *)&v58 + 1) - v58) >> 2;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62)
              sub_100259694();
            v27 = (uint64_t)&v59[-v58];
            if ((uint64_t)&v59[-v58] >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)sub_100260634((uint64_t)&v59, v28);
              v22 = (char *)*((_QWORD *)&v58 + 1);
              v24 = (char *)v58;
            }
            else
            {
              v29 = 0;
            }
            v30 = (float *)&v29[4 * v25];
            *v30 = v21;
            v23 = v30 + 1;
            while (v22 != v24)
            {
              v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30-- - 1) = v31;
            }
            *(_QWORD *)&v58 = v30;
            *((_QWORD *)&v58 + 1) = v23;
            v59 = &v29[4 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            **((float **)&v58 + 1) = v21;
            v23 = (float *)(v22 + 4);
          }
          *((_QWORD *)&v58 + 1) = v23;
          if (v55)
          {
            v56 = v55;
            operator delete(v55);
          }
          ++v11;
          v9 = *a3;
          v32 = ((a3[1] - *a3) >> 2) - i + 1;
        }
        while (v32 > v11);
        v33 = (float *)v58;
        if ((_QWORD)v58 != *((_QWORD *)&v58 + 1))
        {
          v10 = 0.0;
          do
          {
            v34 = *v33++;
            v10 = v10 + v34;
          }
          while (v33 != *((float **)&v58 + 1));
        }
      }
      v35 = v10 / (double)v32;
      v36 = (char *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1) >= (unint64_t)v61)
      {
        v38 = (char *)buf;
        v39 = (uint64_t)(*((_QWORD *)&buf + 1) - buf) >> 2;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 62)
          sub_100259694();
        v41 = (uint64_t)&v61[-buf];
        if ((uint64_t)&v61[-buf] >> 1 > v40)
          v40 = v41 >> 1;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        if (v42)
        {
          v43 = (char *)sub_100260634((uint64_t)&v61, v42);
          v36 = (char *)*((_QWORD *)&buf + 1);
          v38 = (char *)buf;
        }
        else
        {
          v43 = 0;
        }
        v44 = (float *)&v43[4 * v39];
        *v44 = v35;
        v37 = v44 + 1;
        while (v36 != v38)
        {
          v45 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v44-- - 1) = v45;
        }
        *(_QWORD *)&buf = v44;
        *((_QWORD *)&buf + 1) = v37;
        v61 = &v43[4 * v42];
        if (v38)
          operator delete(v38);
      }
      else
      {
        **((float **)&buf + 1) = v35;
        v37 = (float *)(v36 + 4);
      }
      *((_QWORD *)&buf + 1) = v37;
      if ((_QWORD)v58)
      {
        *((_QWORD *)&v58 + 1) = v58;
        operator delete((void *)v58);
      }
    }
    v46 = (void *)buf;
    if (*((_QWORD *)&buf + 1) - (_QWORD)buf == 8)
    {
      v47 = *(float *)(buf + 4);
      if (v47 == 0.0)
        v6 = -INFINITY;
      else
        v6 = logf(*(float *)buf / v47);
    }
    else
    {
      v6 = -INFINITY;
      if (!(_QWORD)buf)
        return v6;
    }
    *((_QWORD *)&buf + 1) = v46;
    operator delete(v46);
  }
  else
  {
    if (qword_10229FE90 != -1)
      dispatch_once(&qword_10229FE90, &stru_10217B038);
    v4 = qword_10229FE98;
    if (os_log_type_enabled((os_log_t)qword_10229FE98, OS_LOG_TYPE_DEBUG))
    {
      v5 = (a3[1] - *a3) >> 2;
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Does not meet minimum number of samples criteria for Entropy, size: %lu", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FE90 != -1)
        dispatch_once(&qword_10229FE90, &stru_10217B038);
      v49 = (a3[1] - *a3) >> 2;
      LODWORD(v58) = 134217984;
      *(_QWORD *)((char *)&v58 + 4) = v49;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FE98, 2, "Does not meet minimum number of samples criteria for Entropy, size: %lu", &v58);
      v51 = (char *)v50;
      sub_100512490("Generic", 1, 0, 2, "double CLMobility::WalkingBoutExtractor::computeEntropy(const std::vector<float> &, const float) const", "%s\n", v50);
      if (v51 != (char *)&buf)
        free(v51);
    }
    return -INFINITY;
  }
  return v6;
}

void sub_100C2FCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C2FD2C(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
}

uint64_t sub_100C2FD3C(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_100B6B21C(a1, &v10, 0, 300.0, 10.0);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_100C2FDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100C2FDEC(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_100B6B21C(a1, &v10, 1, 86400.0, 10.0);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_QWORD *)(a1 + 272) = 0;
  *(_WORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 324) = 0;
  *(_DWORD *)(a1 + 331) = 0;
  return a1;
}

void sub_100C2FECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100C2FEE0(id a1)
{
  qword_10229FE98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_100C2FF0C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  __int128 v33;
  __int128 v34;
  BOOL v35;
  double v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  double v43;
  __int128 v44;
  __int128 v45;
  double v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unint64_t v68;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  unint64_t v84;
  double v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  double v106;
  uint64_t v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v112;
  double v113;
  uint64_t v114;
  __int128 v115;
  double v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

__int128 *sub_100C30878(__int128 *result, double *a2, double *a3)
{
  double v3;
  double v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 >= *((double *)result + 1))
  {
    if (v4 < v3)
    {
      v10 = *(_OWORD *)a2;
      v11 = *((_OWORD *)a2 + 1);
      v12 = *((_QWORD *)a2 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((_QWORD *)a2 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      if (a2[1] < *((double *)result + 1))
      {
        v15 = *result;
        v16 = result[1];
        v17 = *((_QWORD *)result + 4);
        v18 = *((_QWORD *)a2 + 4);
        v19 = *((_OWORD *)a2 + 1);
        *result = *(_OWORD *)a2;
        result[1] = v19;
        *((_QWORD *)result + 4) = v18;
        *((_QWORD *)a2 + 4) = v17;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v20 = *result;
      v21 = result[1];
      v22 = *((_QWORD *)result + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = *((_OWORD *)a2 + 1);
      *result = *(_OWORD *)a2;
      result[1] = v24;
      *((_QWORD *)result + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      if (a3[1] >= a2[1])
        return result;
      v5 = *(_OWORD *)a2;
      v6 = *((_OWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 4);
      v25 = *((_QWORD *)a3 + 4);
      v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((_QWORD *)a2 + 4) = v25;
    }
    else
    {
      v5 = *result;
      v6 = result[1];
      v7 = *((_QWORD *)result + 4);
      v8 = *((_QWORD *)a3 + 4);
      v9 = *((_OWORD *)a3 + 1);
      *result = *(_OWORD *)a3;
      result[1] = v9;
      *((_QWORD *)result + 4) = v8;
    }
    *((_QWORD *)a3 + 4) = v7;
    *(_OWORD *)a3 = v5;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_100C30968(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 32) < *(double *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        v7 = *(_OWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a1 + 32);
        v9 = *(_QWORD *)(a2 - 8);
        v10 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 40);
        *(_OWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_OWORD *)(a2 - 40) = v6;
      }
      return result;
    case 3uLL:
      sub_100C30878((__int128 *)a1, (double *)(a1 + 40), (double *)(a2 - 40));
      return 1;
    case 4uLL:
      sub_100C30C14(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      v21 = (__int128 *)(a1 + 40);
      v22 = (__int128 *)(a1 + 80);
      v23 = (__int128 *)(a1 + 120);
      sub_100C30C14(a1, a1 + 40, a1 + 80, a1 + 120);
      if (*(double *)(a2 - 32) >= *(double *)(a1 + 128))
        return 1;
      v24 = *v23;
      v25 = *(_OWORD *)(a1 + 136);
      v26 = *(_QWORD *)(a1 + 152);
      v27 = *(_QWORD *)(a2 - 8);
      v28 = *(_OWORD *)(a2 - 24);
      *v23 = *(_OWORD *)(a2 - 40);
      *(_OWORD *)(a1 + 136) = v28;
      *(_QWORD *)(a1 + 152) = v27;
      *(_QWORD *)(a2 - 8) = v26;
      *(_OWORD *)(a2 - 24) = v25;
      *(_OWORD *)(a2 - 40) = v24;
      if (*(double *)(a1 + 128) >= *(double *)(a1 + 88))
        return 1;
      v29 = *(_QWORD *)(a1 + 112);
      v31 = *v22;
      v30 = *(_OWORD *)(a1 + 96);
      v32 = *(_OWORD *)(a1 + 136);
      *v22 = *v23;
      *(_OWORD *)(a1 + 96) = v32;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 152);
      *v23 = v31;
      *(_OWORD *)(a1 + 136) = v30;
      *(_QWORD *)(a1 + 152) = v29;
      if (*(double *)(a1 + 88) >= *(double *)(a1 + 48))
        return 1;
      v33 = *(_QWORD *)(a1 + 72);
      v35 = *v21;
      v34 = *(_OWORD *)(a1 + 56);
      v36 = *(_OWORD *)(a1 + 96);
      *v21 = *v22;
      *(_OWORD *)(a1 + 56) = v36;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v22 = v35;
      *(_OWORD *)(a1 + 96) = v34;
      *(_QWORD *)(a1 + 112) = v33;
      if (*(double *)(a1 + 48) >= *(double *)(a1 + 8))
        return 1;
      v37 = *(_QWORD *)(a1 + 32);
      v39 = *(_OWORD *)a1;
      v38 = *(_OWORD *)(a1 + 16);
      v40 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v40;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v21 = v39;
      *(_OWORD *)(a1 + 56) = v38;
      result = 1;
      *(_QWORD *)(a1 + 72) = v37;
      return result;
    default:
      v11 = a1 + 80;
      sub_100C30878((__int128 *)a1, (double *)(a1 + 40), (double *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(double *)(v12 + 8);
    if (v15 < *(double *)(v11 + 8))
    {
      v16 = *(_QWORD *)v12;
      v41 = *(_OWORD *)(v12 + 16);
      v42 = *(_QWORD *)(v12 + 32);
      v17 = v13;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_QWORD *)(v18 + 152) = *(_QWORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        if (v15 >= *(double *)(v18 + 48))
        {
          v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(_QWORD *)v20 = v16;
      *(double *)(v20 + 8) = v15;
      *(_OWORD *)(v20 + 16) = v41;
      *(_QWORD *)(v20 + 32) = v42;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

__n128 sub_100C30C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  sub_100C30878((__int128 *)a1, (double *)a2, (double *)a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    v9 = *(_OWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 32);
    v11 = *(_QWORD *)(a4 + 32);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 32) = v11;
    *(_QWORD *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      v13 = *(_OWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 32);
      v15 = *(_QWORD *)(a3 + 32);
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 32) = v15;
      *(_QWORD *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        v17 = *(_OWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a2 + 32);
        v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_QWORD *)(a1 + 32) = v19;
        *(_QWORD *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

void sub_100C30CE0(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  __int128 v25;
  double v26;
  double v27;
  __int128 v28;
  BOOL v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  unint64_t v38;
  double v39;
  __int128 v40;
  _OWORD *v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;
  double v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  BOOL v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  double v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  double v82;
  unint64_t v83;
  __int128 v84;
  uint64_t v86;
  double v87;
  unint64_t v88;
  double v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[29];
  _BYTE v94[29];
  _BYTE v95[29];
  _BYTE v96[29];
  _BYTE v97[24];
  _BYTE v98[24];
  _BYTE v99[24];
  _BYTE v100[29];
  __int128 v101;
  __int128 v102;
  _BYTE v103[24];
  __int128 v104;

__int128 *sub_100C315A8(__int128 *result, __int128 *a2, __int128 *a3)
{
  double v3;
  double v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  v3 = *(double *)a2;
  v4 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v4 < v3)
    {
      *(_OWORD *)v15 = *a2;
      v7 = *a2;
      *(_QWORD *)&v15[16] = *((_QWORD *)a2 + 2);
      v8 = *(_QWORD *)((char *)a3 + 13);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 13) = v8;
      *a3 = v7;
      *(_QWORD *)((char *)a3 + 13) = *(_QWORD *)&v15[13];
      if (*(double *)a2 < *(double *)result)
      {
        *(_OWORD *)v16 = *result;
        v9 = *result;
        *(_QWORD *)&v16[16] = *((_QWORD *)result + 2);
        v10 = *(_QWORD *)((char *)a2 + 13);
        *result = *a2;
        *(_QWORD *)((char *)result + 13) = v10;
        *a2 = v9;
        *(_QWORD *)((char *)a2 + 13) = *(_QWORD *)&v16[13];
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      *(_OWORD *)v17 = *result;
      v11 = *result;
      *(_QWORD *)&v17[16] = *((_QWORD *)result + 2);
      v12 = *(_QWORD *)((char *)a2 + 13);
      *result = *a2;
      *(_QWORD *)((char *)result + 13) = v12;
      *a2 = v11;
      *(_QWORD *)((char *)a2 + 13) = *(_QWORD *)&v17[13];
      if (*(double *)a3 >= *(double *)a2)
        return result;
      v5 = *a2;
      *(_OWORD *)v14 = *a2;
      *(_QWORD *)&v14[16] = *((_QWORD *)a2 + 2);
      v13 = *(_QWORD *)((char *)a3 + 13);
      *a2 = *a3;
      *(_QWORD *)((char *)a2 + 13) = v13;
    }
    else
    {
      v5 = *result;
      *(_OWORD *)v14 = *result;
      *(_QWORD *)&v14[16] = *((_QWORD *)result + 2);
      v6 = *(_QWORD *)((char *)a3 + 13);
      *result = *a3;
      *(_QWORD *)((char *)result + 13) = v6;
    }
    *a3 = v5;
    *(_QWORD *)((char *)a3 + 13) = *(_QWORD *)&v14[13];
  }
  return result;
}

BOOL sub_100C316D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  double v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[24];
  __int128 v28;
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        *(_OWORD *)v27 = *(_OWORD *)a1;
        v7 = *(_OWORD *)a1;
        *(_QWORD *)&v27[16] = *(_QWORD *)(a1 + 16);
        v8 = *(_QWORD *)(a2 - 11);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 13) = v8;
        *v6 = v7;
        *(_QWORD *)(a2 - 11) = *(_QWORD *)&v27[13];
      }
      return result;
    case 3uLL:
      sub_100C315A8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_100C3198C(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      v17 = (__int128 *)(a1 + 24);
      v18 = (__int128 *)(a1 + 48);
      v19 = (__int128 *)(a1 + 72);
      sub_100C3198C(a1, a1 + 24, a1 + 48, (unint64_t *)(a1 + 72));
      v21 = *(double *)(a2 - 24);
      v20 = a2 - 24;
      if (v21 < *(double *)(a1 + 72))
      {
        *(_OWORD *)v29 = *v19;
        v22 = *v19;
        *(_QWORD *)&v29[16] = *(_QWORD *)(a1 + 88);
        v23 = *(_QWORD *)(v20 + 13);
        *v19 = *(_OWORD *)v20;
        *(_QWORD *)(a1 + 85) = v23;
        *(_OWORD *)v20 = v22;
        *(_QWORD *)(v20 + 13) = *(_QWORD *)&v29[13];
        if (*(double *)v19 < *(double *)v18)
        {
          *(_OWORD *)v30 = *v18;
          v24 = *v18;
          *(_QWORD *)&v30[16] = *(_QWORD *)(a1 + 64);
          *v18 = *v19;
          *(_QWORD *)(a1 + 61) = *(_QWORD *)(a1 + 85);
          *v19 = v24;
          *(_QWORD *)(a1 + 85) = *(_QWORD *)&v30[13];
          if (*(double *)v18 < *(double *)v17)
          {
            *(_OWORD *)v31 = *v17;
            v25 = *v17;
            *(_QWORD *)&v31[16] = *(_QWORD *)(a1 + 40);
            *v17 = *v18;
            *(_QWORD *)(a1 + 37) = *(_QWORD *)(a1 + 61);
            *v18 = v25;
            *(_QWORD *)(a1 + 61) = *(_QWORD *)&v31[13];
            if (*(double *)(a1 + 24) < *(double *)a1)
            {
              *(_OWORD *)v32 = *(_OWORD *)a1;
              v26 = *(_OWORD *)a1;
              *(_QWORD *)&v32[16] = *(_QWORD *)(a1 + 16);
              *(_OWORD *)a1 = *v17;
              *(_QWORD *)(a1 + 13) = *(_QWORD *)(a1 + 37);
              *v17 = v26;
              *(_QWORD *)(a1 + 37) = *(_QWORD *)&v32[13];
            }
          }
        }
      }
      return 1;
    default:
      v9 = (double *)(a1 + 48);
      sub_100C315A8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(double *)v10;
    if (*(double *)v10 < *v9)
    {
      v28 = *(_OWORD *)(v10 + 8);
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_QWORD *)(v15 + 85) = *(_QWORD *)(a1 + v14 + 61);
        if (v14 == -48)
          break;
        v14 -= 24;
        if (v13 >= *(double *)(v15 + 24))
        {
          v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(double *)v16 = v13;
      *(_QWORD *)(v16 + 8) = v28;
      *(_QWORD *)(v16 + 13) = *(_QWORD *)((char *)&v28 + 5);
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = (double *)v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

__n128 sub_100C3198C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];

  sub_100C315A8((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    *(_OWORD *)v12 = *(_OWORD *)a3;
    result = *(__n128 *)a3;
    *(_QWORD *)&v12[16] = *(_QWORD *)(a3 + 16);
    v9 = *(unint64_t *)((char *)a4 + 13);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 13) = v9;
    *(__n128 *)a4 = result;
    *(unint64_t *)((char *)a4 + 13) = *(_QWORD *)&v12[13];
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      *(_OWORD *)v13 = *(_OWORD *)a2;
      result = *(__n128 *)a2;
      *(_QWORD *)&v13[16] = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a3 + 13);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 13) = v10;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 13) = *(_QWORD *)&v13[13];
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        *(_OWORD *)v14 = *(_OWORD *)a1;
        result = *(__n128 *)a1;
        *(_QWORD *)&v14[16] = *(_QWORD *)(a1 + 16);
        v11 = *(_QWORD *)(a2 + 13);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 13) = v11;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 13) = *(_QWORD *)&v14[13];
      }
    }
  }
  return result;
}

void sub_100C31A7C(uint64_t a1, _OWORD *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  double *v25;
  double *v26;
  double v27;
  double *v28;
  double v29;
  double *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  unint64_t v45;
  double v46;
  double *v47;
  double *v48;
  double v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  double v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 *v64;
  __int128 *v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  BOOL v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD *v79;
  BOOL v81;
  uint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  double v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _OWORD *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int64_t v94;
  int64_t v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  double v99;
  unint64_t v100;
  uint64_t v101;
  _OWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  unint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  unint64_t v125;
  double v126;
  uint64_t v127;
  _OWORD *v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v138;
  double v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  double v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[32];
  _BYTE v154[32];
  _BYTE v155[32];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  _BYTE v199[32];
  _BYTE v200[32];
  __int128 v201;
  _BYTE v202[32];
  _BYTE v203[32];
  _BYTE v204[32];
  _BYTE v205[32];
  _BYTE v206[32];
  _BYTE v207[32];
  _BYTE v208[32];
  _BYTE v209[32];
  _BYTE v210[32];
  _BYTE v211[32];

__n128 sub_100C32654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  double v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[32];
  _BYTE v42[32];
  _BYTE v43[32];
  _BYTE v44[32];

  result.n128_u64[0] = *(_QWORD *)(a2 + 8);
  v4 = *(double *)(a3 + 8);
  if (result.n128_f64[0] >= *(double *)(a1 + 8))
  {
    if (v4 < result.n128_f64[0])
    {
      v34 = *(_OWORD *)(a2 + 32);
      v38 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v42 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v42[16] = *(_OWORD *)(a2 + 80);
      v26 = *(__n128 *)a2;
      v30 = *(_OWORD *)(a2 + 16);
      v9 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v9;
      v11 = *(_OWORD *)(a3 + 48);
      v10 = *(_OWORD *)(a3 + 64);
      v12 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 48) = v11;
      *(_OWORD *)(a2 + 64) = v10;
      *(_OWORD *)(a2 + 32) = v12;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v42;
      *(_OWORD *)(a3 + 76) = *(_OWORD *)&v42[12];
      *(_OWORD *)(a3 + 32) = v34;
      *(_OWORD *)(a3 + 48) = v38;
      result.n128_u64[1] = v26.n128_u64[1];
      *(__n128 *)a3 = v26;
      *(_OWORD *)(a3 + 16) = v30;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v35 = *(_OWORD *)(a1 + 32);
        v39 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v43 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v43[16] = *(_OWORD *)(a1 + 80);
        v27 = *(__n128 *)a1;
        v31 = *(_OWORD *)(a1 + 16);
        v13 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v13;
        v15 = *(_OWORD *)(a2 + 48);
        v14 = *(_OWORD *)(a2 + 64);
        v16 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
        *(_OWORD *)(a1 + 48) = v15;
        *(_OWORD *)(a1 + 64) = v14;
        *(_OWORD *)(a1 + 32) = v16;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v43;
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v43[12];
        *(_OWORD *)(a2 + 32) = v35;
        *(_OWORD *)(a2 + 48) = v39;
        result = v27;
        *(__n128 *)a2 = v27;
        *(_OWORD *)(a2 + 16) = v31;
      }
    }
  }
  else
  {
    if (v4 >= result.n128_f64[0])
    {
      v36 = *(_OWORD *)(a1 + 32);
      v40 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v44 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v44[16] = *(_OWORD *)(a1 + 80);
      v28 = *(__n128 *)a1;
      v32 = *(_OWORD *)(a1 + 16);
      v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
      v19 = *(_OWORD *)(a2 + 48);
      v18 = *(_OWORD *)(a2 + 64);
      v20 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
      *(_OWORD *)(a1 + 48) = v19;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 32) = v20;
      *(_OWORD *)(a2 + 64) = *(_OWORD *)v44;
      *(_OWORD *)(a2 + 76) = *(_OWORD *)&v44[12];
      *(_OWORD *)(a2 + 32) = v36;
      *(_OWORD *)(a2 + 48) = v40;
      result.n128_u64[1] = v28.n128_u64[1];
      *(__n128 *)a2 = v28;
      *(_OWORD *)(a2 + 16) = v32;
      result.n128_u64[0] = *(_QWORD *)(a3 + 8);
      if (result.n128_f64[0] >= *(double *)(a2 + 8))
        return result;
      v33 = *(_OWORD *)(a2 + 32);
      v37 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v41 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a2 + 80);
      v25 = *(__n128 *)a2;
      v29 = *(_OWORD *)(a2 + 16);
      v21 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v21;
      v23 = *(_OWORD *)(a3 + 48);
      v22 = *(_OWORD *)(a3 + 64);
      v24 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 48) = v23;
      *(_OWORD *)(a2 + 64) = v22;
      *(_OWORD *)(a2 + 32) = v24;
    }
    else
    {
      v33 = *(_OWORD *)(a1 + 32);
      v37 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v41 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v41[16] = *(_OWORD *)(a1 + 80);
      v25 = *(__n128 *)a1;
      v29 = *(_OWORD *)(a1 + 16);
      v5 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v5;
      v7 = *(_OWORD *)(a3 + 48);
      v6 = *(_OWORD *)(a3 + 64);
      v8 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v6;
      *(_OWORD *)(a1 + 32) = v8;
    }
    *(_OWORD *)(a3 + 64) = *(_OWORD *)v41;
    *(_OWORD *)(a3 + 76) = *(_OWORD *)&v41[12];
    *(_OWORD *)(a3 + 32) = v33;
    *(_OWORD *)(a3 + 48) = v37;
    result = v25;
    *(__n128 *)a3 = v25;
    *(_OWORD *)(a3 + 16) = v29;
  }
  return result;
}

BOOL sub_100C32844(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[32];
  _BYTE v60[32];
  _BYTE v61[32];
  _BYTE v62[32];
  _BYTE v63[32];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 5);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) < *(double *)(a1 + 8))
      {
        v47 = *(_OWORD *)(a1 + 32);
        v53 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v59 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v59[16] = *(_OWORD *)(a1 + 80);
        v35 = *(_OWORD *)a1;
        v41 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        v8 = *(_OWORD *)(a2 - 48);
        v7 = *(_OWORD *)(a2 - 32);
        v9 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 64) = v47;
        *(_OWORD *)(a2 - 48) = v53;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v59;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v59[12];
        *(_OWORD *)(a2 - 96) = v35;
        *(_OWORD *)(a2 - 80) = v41;
      }
      return result;
    case 3uLL:
      sub_100C32654(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100C32C1C(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      v21 = (__int128 *)(a1 + 96);
      v22 = (__int128 *)(a1 + 192);
      v23 = (__int128 *)(a1 + 288);
      sub_100C32C1C(a1, a1 + 96, a1 + 192, a1 + 288);
      if (*(double *)(a2 - 88) >= *(double *)(a1 + 296))
        return 1;
      v49 = *(_OWORD *)(a1 + 320);
      v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)v60 = *(_OWORD *)(a1 + 352);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 368);
      v37 = *v23;
      v43 = *(_OWORD *)(a1 + 304);
      v24 = *(_OWORD *)(a2 - 80);
      *v23 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      v26 = *(_OWORD *)(a2 - 48);
      v25 = *(_OWORD *)(a2 - 32);
      v27 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a1 + 352) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a2 - 64) = v49;
      *(_OWORD *)(a2 - 48) = v55;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v60;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v60[12];
      *(_OWORD *)(a2 - 96) = v37;
      *(_OWORD *)(a2 - 80) = v43;
      if (*(double *)(a1 + 296) >= *(double *)(a1 + 200))
        return 1;
      v50 = *(_OWORD *)(a1 + 224);
      v56 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)v61 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 272);
      v38 = *v22;
      v44 = *(_OWORD *)(a1 + 208);
      v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 268) = *(_OWORD *)(a1 + 364);
      v29 = *(_OWORD *)(a1 + 304);
      *v22 = *v23;
      *(_OWORD *)(a1 + 208) = v29;
      *v23 = v38;
      *(_OWORD *)(a1 + 304) = v44;
      *(_OWORD *)(a1 + 364) = *(_OWORD *)&v61[12];
      v30 = *(double *)(a1 + 200) < *(double *)(a1 + 104);
      *(_OWORD *)(a1 + 336) = v56;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)v61;
      *(_OWORD *)(a1 + 320) = v50;
      if (!v30)
        return 1;
      v51 = *(_OWORD *)(a1 + 128);
      v57 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)v62 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 176);
      v39 = *v21;
      v45 = *(_OWORD *)(a1 + 112);
      v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)(a1 + 268);
      v32 = *(_OWORD *)(a1 + 208);
      *v21 = *v22;
      *(_OWORD *)(a1 + 112) = v32;
      *v22 = v39;
      *(_OWORD *)(a1 + 208) = v45;
      *(_OWORD *)(a1 + 268) = *(_OWORD *)&v62[12];
      v30 = *(double *)(a1 + 104) < *(double *)(a1 + 8);
      *(_OWORD *)(a1 + 240) = v57;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)v62;
      *(_OWORD *)(a1 + 224) = v51;
      if (!v30)
        return 1;
      v52 = *(_OWORD *)(a1 + 32);
      v58 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v63 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
      v40 = *(_OWORD *)a1;
      v46 = *(_OWORD *)(a1 + 16);
      v33 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v33;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 172);
      v34 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v34;
      *v21 = v40;
      *(_OWORD *)(a1 + 112) = v46;
      *(_OWORD *)(a1 + 172) = *(_OWORD *)&v63[12];
      result = 1;
      *(_OWORD *)(a1 + 144) = v58;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v63;
      *(_OWORD *)(a1 + 128) = v52;
      return result;
    default:
      v10 = a1 + 192;
      sub_100C32654(a1, a1 + 96, a1 + 192);
      v11 = a1 + 288;
      if (a1 + 288 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(double *)(v11 + 8);
    if (v14 < *(double *)(v10 + 8))
    {
      v15 = *(_QWORD *)v11;
      v48 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)v54 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)&v54[16] = *(_OWORD *)(v11 + 80);
      v16 = v12;
      v36 = *(_OWORD *)(v11 + 16);
      v42 = *(_OWORD *)(v11 + 32);
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 240);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(a1 + v16 + 224);
        *(_OWORD *)(v17 + 336) = v18;
        *(_OWORD *)(v17 + 352) = *(_OWORD *)(a1 + v16 + 256);
        v19 = *(_OWORD *)(a1 + v16 + 208);
        *(_OWORD *)(v17 + 288) = *(_OWORD *)(a1 + v16 + 192);
        *(_OWORD *)(v17 + 304) = v19;
        *(_OWORD *)(a1 + v16 + 364) = *(_OWORD *)(a1 + v16 + 268);
        if (v16 == -192)
          break;
        v16 -= 96;
        if (v14 >= *(double *)(v17 + 104))
        {
          v20 = a1 + v16 + 288;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(_QWORD *)v20 = v15;
      *(double *)(v20 + 8) = v14;
      *(_OWORD *)(v20 + 48) = v48;
      *(_OWORD *)(v20 + 64) = *(_OWORD *)v54;
      *(_OWORD *)(v20 + 76) = *(_OWORD *)&v54[12];
      ++v13;
      *(_OWORD *)(v20 + 16) = v36;
      *(_OWORD *)(v20 + 32) = v42;
      if (v13 == 8)
        return v11 + 96 == a2;
    }
    v10 = v11;
    v12 += 96;
    v11 += 96;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_100C32C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[32];
  _BYTE v34[32];
  _BYTE v35[32];

  sub_100C32654(a1, a2, a3);
  result.n128_u64[0] = *(_QWORD *)(a4 + 8);
  if (result.n128_f64[0] < *(double *)(a3 + 8))
  {
    v27 = *(_OWORD *)(a3 + 32);
    v30 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)v33 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)&v33[16] = *(_OWORD *)(a3 + 80);
    v21 = *(_OWORD *)a3;
    v24 = *(_OWORD *)(a3 + 16);
    v9 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v9;
    v11 = *(_OWORD *)(a4 + 48);
    v10 = *(_OWORD *)(a4 + 64);
    v12 = *(_OWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 76) = *(_OWORD *)(a4 + 76);
    *(_OWORD *)(a3 + 48) = v11;
    *(_OWORD *)(a3 + 64) = v10;
    *(_OWORD *)(a3 + 32) = v12;
    *(_OWORD *)(a4 + 64) = *(_OWORD *)v33;
    *(_OWORD *)(a4 + 76) = *(_OWORD *)&v33[12];
    *(_OWORD *)(a4 + 32) = v27;
    *(_OWORD *)(a4 + 48) = v30;
    result.n128_u64[1] = *((_QWORD *)&v21 + 1);
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v24;
    result.n128_u64[0] = *(_QWORD *)(a3 + 8);
    if (result.n128_f64[0] < *(double *)(a2 + 8))
    {
      v28 = *(_OWORD *)(a2 + 32);
      v31 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)v34 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)&v34[16] = *(_OWORD *)(a2 + 80);
      v22 = *(_OWORD *)a2;
      v25 = *(_OWORD *)(a2 + 16);
      v13 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v13;
      v15 = *(_OWORD *)(a3 + 48);
      v14 = *(_OWORD *)(a3 + 64);
      v16 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 76) = *(_OWORD *)(a3 + 76);
      *(_OWORD *)(a2 + 48) = v15;
      *(_OWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 32) = v16;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)v34;
      *(_OWORD *)(a3 + 76) = *(_OWORD *)&v34[12];
      *(_OWORD *)(a3 + 32) = v28;
      *(_OWORD *)(a3 + 48) = v31;
      result.n128_u64[1] = *((_QWORD *)&v22 + 1);
      *(_OWORD *)a3 = v22;
      *(_OWORD *)(a3 + 16) = v25;
      result.n128_u64[0] = *(_QWORD *)(a2 + 8);
      if (result.n128_f64[0] < *(double *)(a1 + 8))
      {
        v29 = *(_OWORD *)(a1 + 32);
        v32 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v35 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v35[16] = *(_OWORD *)(a1 + 80);
        v23 = *(__n128 *)a1;
        v26 = *(_OWORD *)(a1 + 16);
        v17 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v17;
        v19 = *(_OWORD *)(a2 + 48);
        v18 = *(_OWORD *)(a2 + 64);
        v20 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
        *(_OWORD *)(a1 + 48) = v19;
        *(_OWORD *)(a1 + 64) = v18;
        *(_OWORD *)(a1 + 32) = v20;
        *(_OWORD *)(a2 + 64) = *(_OWORD *)v35;
        *(_OWORD *)(a2 + 76) = *(_OWORD *)&v35[12];
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)(a2 + 48) = v32;
        result = v23;
        *(__n128 *)a2 = v23;
        *(_OWORD *)(a2 + 16) = v26;
      }
    }
  }
  return result;
}

int8x16_t sub_100C32D90@<Q0>(uint64_t a1@<X0>, int8x16_t *a2@<X8>)
{
  uint64x2_t v2;
  int8x16_t v3;
  __int8 v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t result;

  v2.i64[0] = *(_QWORD *)a1 & 0x1111111111111111 | ((*(_QWORD *)a1 & 0x5555555555555555uLL) >> 1) & 0x3333333333333333;
  v2.i64[1] = (*(_QWORD *)a1 >> 1) & 0x4444444444444444 | *(_QWORD *)a1 & 0x2222222222222222;
  v3 = (int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_101C1EDF0);
  v2.i64[1] = (unint64_t)v2.i64[1] >> 1;
  v4 = *(_BYTE *)(a1 + 8);
  v5 = vorrq_s8(v3, (int8x16_t)v2);
  v3.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v3.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v6 = vandq_s8(v5, v3);
  v3.i64[0] = 0xFF00FF00FF00FFLL;
  v3.i64[1] = 0xFF00FF00FF00FFLL;
  v7 = vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v6, 4uLL), v6), v3);
  v8 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v7, 8uLL), v7);
  v9.i64[0] = 4294901760;
  v9.i64[1] = 4294901760;
  v10 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x10uLL), v9);
  v9.i64[0] = 0xFFFFLL;
  v9.i64[1] = 0xFFFFLL;
  result = vorrq_s8(v10, vandq_s8(v8, v9));
  *a2 = result;
  a2[1].i8[0] = v4;
  return result;
}

int8x16_t sub_100C32E18@<Q0>(double *a1@<X0>, double *a2@<X1>, __int8 *a3@<X2>, int8x16_t *a4@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  __int8 v12;
  unint64_t v13;
  float64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t result;
  float64_t v18;

  v6 = fmax(*a2, -180.0);
  v7 = fmax(*a1, -85.0511288);
  if (v6 >= 180.0)
    v8 = 1.0;
  else
    v8 = (v6 + 180.0) / 360.0;
  v18 = v8;
  v9 = v7 * 3.14159265 / 180.0;
  if (v7 >= 85.0511288)
    v9 = 1.48442223;
  v10 = sin(v9);
  v11 = log((v10 + 1.0) / (1.0 - v10));
  v12 = *a3;
  v13 = 1 << *a3;
  v14.f64[0] = v18;
  v14.f64[1] = v11 / -12.5663706 + 0.5;
  v15 = (int8x16_t)vcvtq_u64_f64(vrndmq_f64(vmulq_n_f64(v14, (double)v13)));
  v16 = (int8x16_t)vdupq_n_s64(v13 - 1);
  result = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v15, (uint64x2_t)v16), v16, v15);
  *a4 = result;
  a4[1].i8[0] = v12;
  return result;
}

double sub_100C32F20(uint64_t a1, uint64_t a2)
{
  int64x2_t v2;
  int8x16_t v3;
  int8x16_t v4;
  int64x2_t v5;
  unsigned __int128 v6;
  unsigned __int128 v7;
  int8x16_t v8;
  int8x16_t v9;
  int64x2_t v10;
  double result;

  v2.i64[0] = a2;
  v2.i64[1] = a1;
  v3.i64[0] = 0xFFFFFFFFLL;
  v3.i64[1] = 0xFFFFFFFFLL;
  v4 = vorrq_s8((int8x16_t)vshlq_n_s64(v2, 0x10uLL), vandq_s8((int8x16_t)v2, v3));
  v3.i64[0] = 0xFFFF0000FFFFLL;
  v3.i64[1] = 0xFFFF0000FFFFLL;
  v5 = (int64x2_t)vandq_s8(v4, v3);
  v6 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64(v5, 8uLL), (int8x16_t)v5) & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL);
  v7 = *(_OWORD *)&vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v6, 4uLL), (int8x16_t)v6) & __PAIR128__(0xFF0FFF0FFF0FFF0FLL, 0xFF0FFF0FFF0FFF0FLL);
  v3.i64[0] = 0x3333333333333333;
  v3.i64[1] = 0x3333333333333333;
  v8 = vandq_s8(vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v7, 2uLL), (int8x16_t)v7), v3);
  v9 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)xmmword_101C1EE00);
  v8.i64[0] *= 2;
  v10 = (int64x2_t)vandq_s8(vorrq_s8(v9, v8), (int8x16_t)xmmword_101C1EE10);
  *(_QWORD *)&result = vorrq_s8((int8x16_t)v10, (int8x16_t)vdupq_laneq_s64(v10, 1)).u64[0];
  return result;
}

double sub_100C32FA0(double *a1, double *a2, __int8 *a3)
{
  int8x16_t v4;

  sub_100C32E18(a1, a2, a3, &v4);
  return sub_100C32F20(v4.i64[0], v4.i64[1]);
}

uint64_t sub_100C32FCC(uint64_t a1)
{
  return *(_QWORD *)a1 | qword_101C1EE20[*(unsigned __int8 *)(a1 + 8)];
}

void sub_100C32FE8(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  int8x16_t v20;

  sub_100C32D90(a1, &v20);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v6 = ldexp(1.0, *(unsigned __int8 *)(a1 + 8));
  v7 = v20.i64[0] - a2;
  v8 = v20.i64[0] + a2;
  if (v7 <= v8)
  {
    v9 = (uint64_t)v6;
    v10 = a2;
    v11 = (v20.i64[1] - a2) & ~((v20.i64[1] - a2) >> 63);
    v12 = v20.i64[1] + v10;
    if ((uint64_t)v6 - 1 >= v12)
      v13 = v12;
    else
      v13 = (uint64_t)v6 - 1;
    do
    {
      v14 = v11;
      if (v11 <= v13)
      {
        do
        {
          v15 = v7;
          if (v7 < 0)
            v15 = v7 % v9 + v9;
          v16 = *(unsigned __int8 *)(a1 + 8);
          sub_100C32F20(v15, v14 % v9);
          *(_QWORD *)&v19 = v17;
          *((_QWORD *)&v19 + 1) = v16;
          sub_1000B9578((uint64_t **)a3, (unint64_t *)&v19, &v19);
          ++v14;
        }
        while (v13 + 1 != v14);
      }
    }
    while (v7++ != v8);
  }
}

void sub_100C330F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100C3310C(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  BOOL v20;
  NSObject *v21;
  _QWORD v22[5];
  _QWORD v23[6];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  void *v29;
  uint64_t v30;
  CFAbsoluteTime Current;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v24 = 0;
  v25 = &v24;
  v26 = 0xA812000000;
  v27 = sub_1002070FC;
  v28 = sub_100207C20;
  v29 = &unk_102080316;
  v30 = 1;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  Current = -1.0;
  Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)&v32, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)(v25 + 17), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(v25 + 14), (const std::string *)(a1 + 8));
  v6 = *(_BYTE *)(a1 + 36);
  v7 = v25;
  *((_BYTE *)v25 + 161) = (v6 & 4) != 0;
  *((_BYTE *)v7 + 160) = (v6 & 2) != 0;
  v8 = a2[23];
  if ((v8 & 0x80u) == 0)
    v9 = a2[23];
  else
    v9 = *((_QWORD *)a2 + 1);
  v10 = *(unsigned __int8 *)(a1 + 63);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 48);
  if (v9 == v10)
  {
    if (v11 >= 0)
      v12 = (unsigned __int8 *)(a1 + 40);
    else
      v12 = *(unsigned __int8 **)(a1 + 40);
    if ((v8 & 0x80) != 0)
    {
      v20 = memcmp(*(const void **)a2, v12, *((_QWORD *)a2 + 1)) == 0;
    }
    else if (a2[23])
    {
      v13 = v8 - 1;
      do
      {
        v15 = *a2++;
        v14 = v15;
        v17 = *v12++;
        v16 = v17;
        v19 = v13-- != 0;
        v20 = v14 == v16;
      }
      while (v20 && v19);
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  *((_BYTE *)v7 + 162) = v20;
  v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100C33414;
  v23[3] = &unk_10217B060;
  v23[4] = v21;
  v23[5] = &v24;
  objc_msgSend(objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:forClient:", CFSTR("CLBeaconFenceAuthorizationManager"), CFSTR("CLBTLEFenceManager")), "fetchAllFencesCountWithReply:", v23);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100C33428;
  v22[3] = &unk_102149BF8;
  v22[4] = &v24;
  dispatch_group_notify(v21, (dispatch_queue_t)objc_msgSend(objc_msgSend(a3, "silo"), "queue"), v22);
  dispatch_release(v21);
  _Block_object_dispose(&v24, 8);
  if (SHIBYTE(v37) < 0)
    operator delete(*((void **)&v36 + 1));
  if (SBYTE7(v36) < 0)
    operator delete((void *)v35);
  if (SHIBYTE(v34) < 0)
    operator delete(*((void **)&v33 + 1));
  if (SBYTE7(v33) < 0)
    operator delete((void *)v32);
}

void sub_100C3338C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  sub_100C333B4(v12 + 48);
  _Unwind_Resume(a1);
}

uint64_t sub_100C333B4(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_100C33414(uint64_t a1, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 164) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100C33428(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10073C788();
  return sub_10073E43C(v2, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

void sub_100C33454(uint64_t a1, void *a2)
{
  NSObject *v4;
  _QWORD v5[5];
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  CFAbsoluteTime Current;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v7 = 0;
  v8 = &v7;
  v9 = 0xA812000000;
  v10 = sub_100C33644;
  v11 = sub_100C336B8;
  v12 = &unk_102080316;
  v13 = 1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0;
  Current = -1.0;
  Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)&v15, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)(v8 + 17), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(v8 + 14), (const std::string *)(a1 + 8));
  v4 = dispatch_group_create();
  dispatch_group_enter(v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100C3371C;
  v6[3] = &unk_10217B060;
  v6[4] = v4;
  v6[5] = &v7;
  objc_msgSend(objc_msgSend(objc_msgSend(a2, "vendor"), "proxyForService:forClient:", CFSTR("CLBeaconFenceAuthorizationManager"), CFSTR("CLBTLEFenceManager")), "fetchAllFencesCountWithReply:", v6);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100C33730;
  v5[3] = &unk_102149BF8;
  v5[4] = &v7;
  dispatch_group_notify(v4, (dispatch_queue_t)objc_msgSend(objc_msgSend(a2, "silo"), "queue"), v5);
  dispatch_release(v4);
  _Block_object_dispose(&v7, 8);
  if (SHIBYTE(v20) < 0)
    operator delete(*((void **)&v19 + 1));
  if (SBYTE7(v19) < 0)
    operator delete((void *)v18);
  if (SHIBYTE(v17) < 0)
    operator delete(*((void **)&v16 + 1));
  if (SBYTE7(v16) < 0)
    operator delete((void *)v15);
}

void sub_100C3361C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  sub_100C333B4(v12 + 48);
  _Unwind_Resume(a1);
}

__n128 sub_100C33644(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v2 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v3 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v4 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v4;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  result = *(__n128 *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  return result;
}

void sub_100C336B8(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0)
    operator delete(*(void **)(a1 + 136));
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
}

void sub_100C3371C(uint64_t a1, __int16 a2)
{
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 160) = a2;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100C33730(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10073C788();
  return sub_10073E83C(v2, (unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48));
}

void sub_100C3375C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[2];
  void *v19[2];
  void *v20[2];
  __int128 v21;
  void *v22[2];
  void *__p[2];
  __int128 v24;
  __int128 v25;

  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v18[0] = 1;
  *(_OWORD *)v19 = 0u;
  LODWORD(v25) = 0;
  v18[1] = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)v19, (const std::string *)(a1 + 40));
  std::string::operator=((std::string *)&__p[1], (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)v22, (const std::string *)(a1 + 8));
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = *(unsigned __int8 *)(a1 + 63);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 48);
  if (v5 == v6)
  {
    if (v7 >= 0)
      v8 = (unsigned __int8 *)(a1 + 40);
    else
      v8 = *(unsigned __int8 **)(a1 + 40);
    if ((v4 & 0x80) != 0)
    {
      v16 = memcmp(*(const void **)a2, v8, *((_QWORD *)a2 + 1)) == 0;
    }
    else if (a2[23])
    {
      v9 = v4 - 1;
      do
      {
        v11 = *a2++;
        v10 = v11;
        v13 = *v8++;
        v12 = v13;
        v15 = v9-- != 0;
        v16 = v10 == v12;
      }
      while (v16 && v15);
    }
    else
    {
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
  }
  BYTE4(v25) = v16;
  HIDWORD(v25) = *(_DWORD *)(a1 + 168);
  v17 = sub_10073C788();
  sub_10073EB8C(v17, (unsigned __int8 *)v18);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[1]);
  if (SHIBYTE(v20[0]) < 0)
    operator delete(v19[0]);
}

void sub_100C338D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100C333B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100C338E4(uint64_t a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t i;
  size_t v9;
  void **v10;
  const void *v11;
  void **v12;
  std::string::size_type v13;
  unint64_t v14;
  char v15;
  std::string::size_type size;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  std::string *p_str;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v27;
  BOOL v28;
  void *__p[2];
  unsigned __int8 v30;
  std::string v31;
  std::string __str;

  sub_1015A2E04(&__str, "unknown-client-bundleID");
  if (a2 && objc_msgSend(a2, "UTF8String"))
    std::string::assign(&__str, (const std::string::value_type *)objc_msgSend(a2, "UTF8String"));
  *(_BYTE *)a1 = 1;
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)(a1 + 16), &__str);
  memset(&v31, 0, sizeof(v31));
  for (i = *(_QWORD *)(a4 + 8); i != a4; i = *(_QWORD *)(i + 8))
  {
    if (*(char *)(i + 47) >= 0)
      v9 = *(unsigned __int8 *)(i + 47);
    else
      v9 = *(_QWORD *)(i + 32);
    sub_100259584((uint64_t)__p, v9 + 2);
    if ((v30 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if (v9)
    {
      if (*(char *)(i + 47) >= 0)
        v11 = (const void *)(i + 24);
      else
        v11 = *(const void **)(i + 24);
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, ", ");
    if ((v30 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v13 = v30;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(&v31, (const std::string::value_type *)v12, v13);
    if ((char)v30 < 0)
      operator delete(__p[0]);
  }
  std::string::operator=((std::string *)(a1 + 40), &v31);
  *(double *)(a1 + 88) = sub_1001FCBB4();
  v14 = *(_QWORD *)(a4 + 16);
  if (v14 >= 0xFF)
    LOBYTE(v14) = -1;
  *(_BYTE *)(a1 + 80) = v14;
  v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v17 = a3[23];
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *((_QWORD *)a3 + 1);
  if (size == v17)
  {
    if (v18 >= 0)
      v19 = a3;
    else
      v19 = *(unsigned __int8 **)a3;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v28 = memcmp(__str.__r_.__value_.__l.__data_, v19, __str.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
      p_str = &__str;
      do
      {
        v23 = p_str->__r_.__value_.__s.__data_[0];
        p_str = (std::string *)((char *)p_str + 1);
        v22 = v23;
        v25 = *v19++;
        v24 = v25;
        v27 = v20-- != 0;
        v28 = v22 == v24;
      }
      while (v28 && v27);
    }
    else
    {
      v28 = 1;
    }
  }
  else
  {
    v28 = 0;
  }
  *(_BYTE *)(a1 + 81) = v28;
  if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v15 & 0x80) == 0)
      return;
LABEL_53:
    operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v31.__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_53;
}

void sub_100C33B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C33B6C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64) + *(unsigned int *)(result + 64);
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v4) = -1;
  *(_DWORD *)(result + 64) = v4;
  if (*(_DWORD *)(a2 + 40))
  {
    result = sub_100C33D6C(*(_QWORD *)(result + 96), *(_QWORD *)(result + 104), a2);
    if (result == *(_QWORD *)(v3 + 104))
    {
      v5 = result;
      v6 = (uint64_t *)(v3 + 96);
      if (v5 >= *(_QWORD *)(v3 + 112))
      {
        result = sub_100C33EE4(v6, a2);
      }
      else
      {
        sub_100C33E64((uint64_t)v6, a2);
        result = v5 + 40;
      }
      *(_QWORD *)(v3 + 104) = result;
    }
  }
  v7 = *(_DWORD *)(a2 + 40);
  if (v7 != *(_DWORD *)(v3 + 120))
  {
    ++*(_DWORD *)(v3 + 84);
    *(_DWORD *)(v3 + 120) = v7;
  }
  return result;
}

uint64_t sub_100C33C30(uint64_t a1)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(a1 + 88);
  *(double *)(a1 + 72) = sub_1001FCBB4() - v2;
  v3 = sub_10073C788();
  return sub_10073EF00(v3, (unsigned __int8 *)a1);
}

void sub_100C33C6C(void *a1, int a2)
{
  uint64_t v4;
  std::string __str;
  uint64_t v6;
  CFAbsoluteTime Current;
  void *v8[2];
  void *__p[2];
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v6 = 0;
  *(_OWORD *)v8 = 0u;
  Current = -1.0;
  sub_1015A2E04(&__str, "unknown-client-bundleID");
  if (a1 && objc_msgSend(a1, "UTF8String"))
    std::string::assign(&__str, (const std::string::value_type *)objc_msgSend(a1, "UTF8String"));
  LOBYTE(v6) = 1;
  Current = CFAbsoluteTimeGetCurrent();
  std::string::operator=((std::string *)v8, &__str);
  LODWORD(v11) = a2;
  v4 = sub_10073C788();
  sub_10073F324(v4, (unsigned __int8 *)&v6);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v8[0]);
}

void sub_100C33D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_10058D200((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100C33D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  v3 = a1;
  if (a1 != a2 && a1 != a3)
  {
    v6 = a1 + 40;
    while (1)
    {
      if (*(_DWORD *)(v6 - 4) == *(_DWORD *)(a3 + 36))
      {
        v3 = v6 - 40;
        if ((sub_100C33DF0(v6 - 40, a3) & 1) != 0)
          break;
      }
      v7 = v6 + 40;
      if (v6 != a2)
      {
        v8 = v6 == a3;
        v6 += 40;
        if (!v8)
          continue;
      }
      return v7 - 40;
    }
  }
  return v3;
}

uint64_t sub_100C33DF0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = *(_DWORD *)(a1 + 36);
  if ((v4 & 1) != 0)
  {
    result = sub_101271B48((char *)(a1 + 8), (char *)(a2 + 8));
    if (!(_DWORD)result)
      return result;
    v4 = *(_DWORD *)(a1 + 36);
  }
  if ((v4 & 2) != 0 && *(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32))
    return 0;
  if ((v4 & 4) != 0)
    return *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34);
  return 1;
}

_BYTE *sub_100C33E64(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *result;
  __int128 v6;

  v4 = *(_QWORD **)(a1 + 8);
  *v4 = off_10213F058;
  result = v4 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    result = sub_100115CE4(result, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 8);
    v4[3] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)result = v6;
  }
  v4[4] = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 8) = v4 + 5;
  return result;
}

void sub_100C33EDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100C33EE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = sub_100357184(v7, v9);
  else
    v10 = 0;
  v11 = &v10[5 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = (char *)&v10[5 * v9];
  *v11 = off_10213F058;
  v12 = v11 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4(v12, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
    v11 = v17;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 8);
    v11[3] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v12 = v13;
  }
  v10[5 * v4 + 4] = *(_QWORD *)(a2 + 32);
  v17 = v11 + 5;
  sub_100C3402C(a1, v16);
  v14 = a1[1];
  sub_100C34180((uint64_t)v16);
  return v14;
}

void sub_100C34018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100C34180((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3402C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100C340A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C340A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  _BYTE *v12;
  void **v13;
  __int128 v14;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      *(_QWORD *)(a7 + v11 - 40) = off_10213F058;
      v12 = (_BYTE *)(a7 + v11 - 32);
      v13 = (void **)(a3 + v11 - 32);
      if (*(char *)(a3 + v11 - 9) < 0)
      {
        sub_100115CE4(v12, *v13, *(_QWORD *)(a3 + v11 - 24));
      }
      else
      {
        v14 = *(_OWORD *)v13;
        *(_QWORD *)(a7 + v11 - 16) = *(_QWORD *)(a3 + v11 - 16);
        *(_OWORD *)v12 = v14;
      }
      *(_QWORD *)(a7 + v11 - 8) = *(_QWORD *)(a3 + v11 - 8);
      v11 -= 40;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_100C34158(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 40)
    (**(void (***)(uint64_t))(v1 + v2))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C34180(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100C34DC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100C34ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100C34EE4(uint64_t a1, void *a2, uint64_t a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;

  v6 = objc_autoreleasePoolPush();
  v7 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_QWORD *)(v8 + 24);
  v11 = objc_msgSend(a2, "description");
  v12 = *(void **)(a1 + 32);
  objc_msgSend(a2, "center");
  objc_msgSend(v12, "valueOutForValueIn:");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = objc_msgSend(v7, "stringByAppendingFormat:", CFSTR("ValueInName,%@,ValueOutName,%@,Bin,%02lu,%@,RetrievedValueOut,%f\n"), v9, v10, a3, v11, v13);
  objc_autoreleasePoolPop(v6);
}

void sub_100C35484(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100C35540(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = *(void **)(a1 + 32);
  v4 = objc_alloc((Class)CMPedometerBin);
  objc_msgSend(a2, "kValue");
  v6 = v5;
  objc_msgSend(a2, "begin");
  v8 = v7;
  objc_msgSend(a2, "end");
  return objc_msgSend(v3, "addObject:", objc_msgSend(v4, "initWithValueOut:begin:end:state:", objc_msgSend(a2, "state"), v6, v8, v9));
}

id sub_100C35668(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  id v9;
  double v10;

  v3 = *(void **)(a1 + 32);
  v4 = objc_alloc((Class)CMStrideCalibrationData);
  objc_msgSend(a2, "begin");
  v6 = v5;
  objc_msgSend(a2, "end");
  v8 = v7;
  v9 = objc_msgSend(a2, "state");
  objc_msgSend(a2, "valueOut");
  return objc_msgSend(v3, "addObject:", objc_msgSend(v4, "initWithBegin:end:state:kValue:", v9, v6, v8, v10));
}

void sub_100C35768(id a1)
{
  qword_10229FCD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

_QWORD *sub_100C35794(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    sub_100C357F4(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *sub_100C357F4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *(_QWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_QWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_100259694();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)sub_10025E6A0((uint64_t)v6, v12);
      v8 = *(_QWORD **)v4;
      v5 = *(_QWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t sub_100C358E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  NSObject *v37;
  _BYTE *v38;
  uint64_t v39;
  double v40;
  int v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  double v46;
  int v47;
  char *v48;
  char *v49;
  double v50;
  void *v51;
  char v52;
  __int128 v53[3];
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE __p[12];
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  double v64;
  __int16 v65;
  int v66;
  uint8_t buf[4];
  _BYTE *v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  int v74;

  v10 = (std::__shared_weak_count *)a4[1];
  v58 = *a4;
  v59 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a5[1];
  v56 = *a5;
  v57 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  v54 = *a6;
  v55 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v53[0] = xmmword_102307380;
  v53[1] = *(_OWORD *)algn_102307390;
  v53[2] = xmmword_1023073A0;
  sub_100D04860(a1, a2, 6, &v58, &v56, &v54, a8, a7, v53);
  v19 = v55;
  if (v55)
  {
    v20 = (unint64_t *)&v55->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v57;
  if (v57)
  {
    v23 = (unint64_t *)&v57->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v59;
  if (v59)
  {
    v26 = (unint64_t *)&v59->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = off_10217B128;
  v28 = *a3;
  *(_QWORD *)(a1 + 360) = *a3;
  v29 = a3[1];
  *(_QWORD *)(a1 + 368) = v29;
  if (v29)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v28 = *(_QWORD *)(a1 + 360);
  }
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0xFFFF00000096;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 416) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 432) = _Q1;
  *(_OWORD *)(a1 + 448) = _Q1;
  *(_OWORD *)(a1 + 464) = _Q1;
  *(_DWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 500) = 0;
  *(_QWORD *)(a1 + 484) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 512) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 540) = 0;
  *(_QWORD *)(a1 + 524) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, a1 + 392) & 1) == 0)
    *(_DWORD *)(a1 + 392) = 150;
  *(_QWORD *)(a1 + 352) = objc_alloc_init((Class)NSMutableDictionary);
  *(_QWORD *)(a1 + 376) = objc_msgSend(*(id *)(a1 + 72), "classifyingStoreForHarvester:", 6);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217B250);
  v37 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    sub_100D04BD0(a1);
    v38 = v63 >= 0 ? __p : *(_BYTE **)__p;
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v40 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
        - *(double *)(a1 + 96);
    v41 = *(_DWORD *)(a1 + 392);
    *(_DWORD *)buf = 136315906;
    v68 = v38;
    v69 = 2048;
    v70 = v39;
    v71 = 2048;
    v72 = v40;
    v73 = 1024;
    v74 = v41;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "%s: %zu passes (last uploaded %.3fs ago), max %d passes", buf, 0x26u);
    if (SHIBYTE(v63) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v43 = qword_1022A0208;
    sub_100D04BD0(a1);
    if (v52 >= 0)
      v44 = &v51;
    else
      v44 = v51;
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
    v46 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
        - *(double *)(a1 + 96);
    v47 = *(_DWORD *)(a1 + 392);
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = v44;
    v61 = 2048;
    v62 = v45;
    v63 = 2048;
    v64 = v46;
    v65 = 1024;
    v66 = v47;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 1, "%s: %zu passes (last uploaded %.3fs ago), max %d passes", __p, 38, v50, (_DWORD)v51);
    v49 = v48;
    if (v52 < 0)
      operator delete(v51);
    sub_100512490("Generic", 1, 0, 2, "CLSubHarvesterPass::CLSubHarvesterPass(id<CLIntersiloUniverse>, std::shared_ptr<CLPassHarvestInterface::External>, std::shared_ptr<CLHarvestSystemInterface::Configuration>, std::shared_ptr<CLHarvestSystemInterface::StatusMonitor>, std::shared_ptr<CLHarvestSystemInterface::Controller>, CLHNetworkController *, CLHRequestStore *)", "%s\n", v49);
    if (v49 != (char *)buf)
      free(v49);
  }
  return a1;
}

void sub_100C35DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  sub_100261F44(v36);
  sub_100429668(v35);
  _Unwind_Resume(a1);
}

id sub_100C35E48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 376), "count");
}

id sub_100C35E50(uint64_t a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 376), "pruneSecondaryDataOlderThan:", v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1));
}

id sub_100C35EA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 72), "clearDataForHarvester:", 6);
}

uint64_t sub_100C35EAC(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  NSObject *v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v11;
  int v12;
  void **v13;
  void **v14;
  _BYTE *v15;
  char *v16;
  char *v17;
  void *__p[2];
  char v19;
  _QWORD v20[2];
  _BYTE buf[12];
  __int16 v22;
  void **v23;
  char v24;
  int v25;
  void **v26;
  __int16 v27;
  _BYTE *v28;
  void *v29[2];
  char v30;

  sub_100119F3C(v20);
  v4 = *(_OWORD *)algn_102307390;
  *(_OWORD *)(a1 + 280) = xmmword_102307380;
  *(_OWORD *)(a1 + 296) = v4;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)&algn_102307390[9];
  if (sub_100006BB4(a2, "Pass", v20))
    sub_1011E7A6C(a1 + 280, (uint64_t)v20);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217B250);
  v5 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    sub_100D04BD0(a1);
    v6 = v30;
    v7 = (void **)v29[0];
    sub_1011E7898((double *)(a1 + 280), __p);
    v8 = v29;
    if (v6 < 0)
      v8 = v7;
    if (v19 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%s %s", buf, 0x16u);
    if (v19 < 0)
      operator delete(__p[0]);
    if (v30 < 0)
      operator delete(v29[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v29, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v11 = qword_1022A0208;
    sub_100D04BD0(a1);
    v12 = v19;
    v13 = (void **)__p[0];
    sub_1011E7898((double *)(a1 + 280), buf);
    v14 = __p;
    if (v12 < 0)
      v14 = v13;
    if (v24 >= 0)
      v15 = buf;
    else
      v15 = *(_BYTE **)buf;
    v25 = 136315394;
    v26 = v14;
    v27 = 2080;
    v28 = v15;
    _os_log_send_and_compose_impl(2, 0, v29, 1628, &_mh_execute_header, v11, 1, "%s %s", (const char *)&v25, 22);
    v17 = v16;
    if (v24 < 0)
      operator delete(*(void **)buf);
    if (v19 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterPass::applyHarvestRules(const CLNameValuePair &)", "%s\n", v17);
    if (v17 != (char *)v29)
      free(v17);
  }
  return sub_10011A5A8(v20);
}

void sub_100C36198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_10011A5A8(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_100C361EC()
{
  sub_100197040();
  if ((sub_1001B796C() & 2) != 0)
    return 1;
  sub_100197040();
  return (sub_1001B796C() >> 3) & 1;
}

id sub_100C3621C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id result;
  void *v13;
  id v14;
  id v15;
  void *v16;
  _QWORD v17[7];
  _QWORD v18[7];
  _QWORD v19[7];

  v2 = objc_msgSend(*(id *)(a1 + 376), "homeArchive");
  if (v2)
  {
    v3 = v2;
    v4 = objc_alloc_init((Class)CLPPassCollectionRequest);
    objc_msgSend(v4, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
    v5 = sub_100887630(objc_msgSend(v3, "mappedSecondaryDataByDestructivelyCombiningAllSecondaryData"));
    v6 = *(void **)(a1 + 384);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100C363C0;
    v19[3] = &unk_10217B1F8;
    v19[5] = v3;
    v19[6] = a1;
    v19[4] = v4;
    objc_msgSend(v6, "signData:withCompletion:", v5, v19);
  }
  v7 = objc_msgSend(*(id *)(a1 + 376), "workArchive");
  if (v7)
  {
    v8 = v7;
    v9 = objc_alloc_init((Class)CLPPassCollectionRequest);
    objc_msgSend(v9, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
    v10 = sub_100887630(objc_msgSend(v8, "mappedSecondaryDataByDestructivelyCombiningAllSecondaryData"));
    v11 = *(void **)(a1 + 384);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100C36444;
    v18[3] = &unk_10217B1F8;
    v18[5] = v8;
    v18[6] = a1;
    v18[4] = v9;
    objc_msgSend(v11, "signData:withCompletion:", v10, v18);
  }
  result = objc_msgSend(*(id *)(a1 + 376), "mainArchive");
  if (result)
  {
    v13 = result;
    v14 = objc_alloc_init((Class)CLPPassCollectionRequest);
    objc_msgSend(v14, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
    v15 = sub_100887630(objc_msgSend(v13, "mappedSecondaryDataByDestructivelyCombiningAllSecondaryData"));
    v16 = *(void **)(a1 + 384);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100C364C8;
    v17[3] = &unk_10217B1F8;
    v17[5] = v13;
    v17[6] = a1;
    v17[4] = v14;
    return objc_msgSend(v16, "signData:withCompletion:", v15, v17);
  }
  return result;
}

void sub_100C363C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CLHUploadRequest *v4;

  v3 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "setSignature:", a2);
  objc_msgSend(*(id *)(a1 + 40), "overwritePrimaryObject:", *(_QWORD *)(a1 + 32));

  v4 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(a1 + 40));
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v3 + 80), "endpointSelector"), "passEndpoint"));
  objc_msgSend(*(id *)(v3 + 80), "submitRequest:", v4);

}

void sub_100C36444(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CLHUploadRequest *v4;

  v3 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "setSignature:", a2);
  objc_msgSend(*(id *)(a1 + 40), "overwritePrimaryObject:", *(_QWORD *)(a1 + 32));

  v4 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(a1 + 40));
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v3 + 80), "endpointSelector"), "passEndpoint"));
  objc_msgSend(*(id *)(v3 + 80), "submitRequest:", v4);

}

void sub_100C364C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  CLHUploadRequest *v4;

  v3 = *(_QWORD *)(a1 + 48);
  objc_msgSend(*(id *)(a1 + 32), "setSignature:", a2);
  objc_msgSend(*(id *)(a1 + 40), "overwritePrimaryObject:", *(_QWORD *)(a1 + 32));

  v4 = -[CLHUploadRequest initWithArchive:]([CLHUploadRequest alloc], "initWithArchive:", *(_QWORD *)(a1 + 40));
  -[CLHUploadRequest setEndpoint:](v4, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v3 + 80), "endpointSelector"), "passEndpoint"));
  objc_msgSend(*(id *)(v3 + 80), "submitRequest:", v4);

}

uint64_t sub_100C3654C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 6);
  return 1;
}

id sub_100C365B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 1);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 6);
  *(_DWORD *)(a1 + 396) = 0xFFFF;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 416) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 432) = _Q1;
  *(_OWORD *)(a1 + 448) = _Q1;
  *(_OWORD *)(a1 + 464) = _Q1;
  *(_DWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 500) = 0;
  *(_QWORD *)(a1 + 484) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 508) = 0;
  *(_QWORD *)(a1 + 512) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 520) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 532) = 0;
  *(_QWORD *)(a1 + 540) = 0;
  *(_QWORD *)(a1 + 524) = 0;
  *(_BYTE *)(a1 + 548) = 0;
  return objc_msgSend(*(id *)(a1 + 352), "removeAllObjects");
}

BOOL sub_100C36664(uint64_t a1, uint64_t a2)
{
  NSObject *v5;
  double v6;
  int v7;
  _BOOL8 result;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint8_t *v12;
  _DWORD v13[3];
  uint8_t buf[4];
  double v15;
  __int16 v16;
  int v17;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)) & 1) != 0)
  {
    if (*(double *)(a2 + 20) >= 0.0
      && (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) - *(double *)(a2 + 76) <= 900.0
      && *(_DWORD *)(a2 + 132) == 1)
    {
      return 1;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56))
         - *(double *)(a2 + 76);
      v7 = *(_DWORD *)(a2 + 132);
      *(_DWORD *)buf = 134218240;
      v15 = v6;
      v16 = 1024;
      v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GeniusForPass: invalid/stale location (age %.3fs, ref %d)", buf, 0x12u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217B250);
      v9 = qword_1022A0208;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "GeniusForPass: invalid/stale location (age %.3fs, ref %d)", v13);
LABEL_23:
      v12 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLSubHarvesterPass::isPassHarvestingEligible(const CLDaemonLocation &)", "%s\n", v10);
      if (v12 != buf)
        free(v12);
      return 0;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v11 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GeniusForPass harvesting not allowed", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217B250);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "GeniusForPass harvesting not allowed");
      goto LABEL_23;
    }
  }
  return result;
}

void sub_100C369A4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  void *v4;
  _QWORD v5[5];
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (objc_msgSend(*(id *)(a1 + 352), "count"))
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)) & 1) != 0)
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 200))(*(_QWORD *)(a1 + 56)))
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217B250);
        v2 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          v7 = 0;
          v8 = 2082;
          v9 = "";
          v10 = 2050;
          v11 = 6;
          v3 = "{\"msg%{public}.0s\":\"Pass Genius not authorized, not harvesting\", \"subHarvester\":%{public, location:"
               "CLSubHarvesterIdentifier}lld}";
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 0x1Cu);
        }
      }
      else
      {
        if (sub_100C36664(a1, a1 + 396))
        {
          v4 = *(void **)(a1 + 352);
          v5[0] = _NSConcreteStackBlock;
          v5[1] = 3221225472;
          v5[2] = sub_100C36CD8;
          v5[3] = &unk_10217B218;
          v5[4] = a1;
          objc_msgSend(v4, "enumerateKeysAndObjectsUsingBlock:", v5);
          objc_msgSend(*(id *)(a1 + 352), "removeAllObjects");
          sub_100D05194(a1);
          return;
        }
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217B250);
        v2 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 68289282;
          v7 = 0;
          v8 = 2082;
          v9 = "";
          v10 = 2050;
          v11 = 6;
          v3 = "{\"msg%{public}.0s\":\"leeched postion is invalid or too old, not harvesting\", \"subHarvester\":%{public"
               ", location:CLSubHarvesterIdentifier}lld}";
          goto LABEL_16;
        }
      }
    }
    else
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10217B250);
      v2 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        v7 = 0;
        v8 = 2082;
        v9 = "";
        v10 = 2050;
        v11 = 6;
        v3 = "{\"msg%{public}.0s\":\"Harvesting is not allowed, not harvesting\", \"subHarvester\":%{public, location:CLS"
             "ubHarvesterIdentifier}lld}";
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 2050;
      v11 = 6;
      v3 = "{\"msg%{public}.0s\":\"tried to harvest an empty pass cache\", \"subHarvester\":%{public, location:CLSubHarve"
           "sterIdentifier}lld}";
      goto LABEL_16;
    }
  }
}

void sub_100C36CD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  const char *v9;
  id v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  id v15;
  NSObject *v16;
  _OWORD v17[8];
  _OWORD v18[2];
  uint64_t buf;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  void *v25;

  v4 = *(_QWORD *)(a1 + 32);
  objc_msgSend(a2, "doubleValue");
  v6 = v5;
  v7 = *(double *)(v4 + 472);
  if (vabdd_f64(v6, v7) > 900.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v8 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289282;
      v20 = 2082;
      v21 = "";
      v22 = 2050;
      v23 = 6;
      v9 = "{\"msg%{public}.0s\":\"pass event over too old, skipping\", \"subHarvester\":%{public, location:CLSubHarveste"
           "rIdentifier}lld}";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&buf, 0x1Cu);
      return;
    }
    return;
  }
  if ((*(_DWORD *)(v4 + 392) & 0x80000000) != 0)
  {
LABEL_9:
    objc_msgSend(a3, "setAge:", v7 - v6);
    v10 = objc_alloc((Class)CLPLocation);
    v11 = *(_OWORD *)(v4 + 508);
    v17[6] = *(_OWORD *)(v4 + 492);
    v17[7] = v11;
    v18[0] = *(_OWORD *)(v4 + 524);
    *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(v4 + 536);
    v12 = *(_OWORD *)(v4 + 444);
    v17[2] = *(_OWORD *)(v4 + 428);
    v17[3] = v12;
    v13 = *(_OWORD *)(v4 + 476);
    v17[4] = *(_OWORD *)(v4 + 460);
    v17[5] = v13;
    v14 = *(_OWORD *)(v4 + 412);
    v17[0] = *(_OWORD *)(v4 + 396);
    v17[1] = v14;
    v15 = objc_msgSend(v10, "initWithDaemonLocation:", v17);
    objc_msgSend(a3, "setLocation:", v15);

    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v16 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289539;
      v20 = 2082;
      v21 = "";
      v22 = 2050;
      v23 = 6;
      v24 = 2113;
      v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Harvest-Collect\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestPoint\":%{private, location:escape_only}@}", (uint8_t *)&buf, 0x26u);
    }
    objc_msgSend(*(id *)(v4 + 376), "writeSecondaryObject:collectedAt:toField:", a3, objc_msgSend(a3, "location"), 2);
    ++*(_DWORD *)(v4 + 208);
    *(double *)(v4 + 552) = (*(double (**)(_QWORD))(**(_QWORD **)(v4 + 56) + 64))(*(_QWORD *)(v4 + 56));
    return;
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 160))(v4) < (unint64_t)*(int *)(v4 + 392))
  {
    v7 = *(double *)(v4 + 472);
    goto LABEL_9;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217B250);
  v8 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289282;
    v20 = 2082;
    v21 = "";
    v22 = 2050;
    v23 = 6;
    v9 = "{\"msg%{public}.0s\":\"max passes exceeded, skipping\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    goto LABEL_18;
  }
}

uint64_t sub_100C37004(uint64_t a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11;
  double v12;
  BOOL v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  _BYTE *v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  void **v32;
  double v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  double v42;
  double v43;
  void *v44[2];
  double v45;
  _BYTE __p[12];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  uint8_t buf[4];
  _BYTE *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;

  v4 = *(double *)(a2 + 20);
  if (v4 > 10000.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v5 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      sub_100D04BD0(a1);
      v6 = v49 >= 0 ? __p : *(_BYTE **)__p;
      v7 = *(_QWORD *)(a2 + 4);
      v8 = *(_QWORD *)(a2 + 12);
      v9 = *(_QWORD *)(a2 + 20);
      *(_DWORD *)buf = 136315906;
      v60 = v6;
      v61 = 2048;
      v62 = v7;
      v63 = 2048;
      v64 = v8;
      v65 = 2048;
      v66 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Harvester: %s ignoring <%+.8f,%+.8f> since accuracy is too large (%.2fm)", buf, 0x2Au);
      if (SHIBYTE(v49) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v36 = qword_1022A0208;
    sub_100D04BD0(a1);
    if (v45 >= 0.0)
      v37 = v44;
    else
      v37 = (void **)v44[0];
    v38 = *(_QWORD *)(a2 + 4);
    v39 = *(_QWORD *)(a2 + 12);
    v40 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)__p = 136315906;
    *(_QWORD *)&__p[4] = v37;
    v47 = 2048;
    v48 = v38;
    v49 = 2048;
    v50 = v39;
    v51 = 2048;
    v52 = v40;
    LODWORD(v42) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "Harvester: %s ignoring <%+.8f,%+.8f> since accuracy is too large (%.2fm)", __p, v42, v43, *(double *)v44);
    v35 = v41;
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
LABEL_40:
    sub_100512490("Generic", 1, 0, 2, "BOOL CLSubHarvesterPass::shouldIgnoreLocation(const CLDaemonLocation &)", "%s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
    return 1;
  }
  v11 = *(double *)(a1 + 416);
  v12 = v4 * 0.5;
  v13 = v11 < 0.0 || v11 > v12;
  if (!v13
    && (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) - *(double *)(a1 + 472) < 7000.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v14 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      sub_100D04BD0(a1);
      v15 = *(_QWORD *)(a2 + 4);
      v16 = *(_QWORD *)(a2 + 12);
      v18 = *(_QWORD *)(a1 + 400);
      v17 = *(_QWORD *)(a1 + 408);
      v19 = *(double *)(a1 + 416);
      v20 = *(double *)(a2 + 20);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      v22 = __p;
      if (v49 < 0)
        v22 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136316674;
      v23 = v21 - *(double *)(a1 + 472);
      v60 = v22;
      v61 = 2048;
      v62 = v15;
      v63 = 2048;
      v64 = v16;
      v65 = 2048;
      v66 = v18;
      v67 = 2048;
      v68 = v17;
      v69 = 2048;
      v70 = v19 - v20;
      v71 = 2048;
      v72 = v23;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Harvester: %s ignoring <%+.8f,%+.8f> since previous <%+.8f,%+.8f> is more accurate (%+.2fm) and fresh enough (%.2fs)", buf, 0x48u);
      if (SHIBYTE(v49) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B250);
    v24 = qword_1022A0208;
    sub_100D04BD0(a1);
    v25 = *(_QWORD *)(a2 + 4);
    v26 = *(_QWORD *)(a2 + 12);
    v28 = *(_QWORD *)(a1 + 400);
    v27 = *(_QWORD *)(a1 + 408);
    v29 = *(double *)(a1 + 416);
    v30 = *(double *)(a2 + 20);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
    v32 = v44;
    if (v45 < 0.0)
      v32 = (void **)v44[0];
    *(_DWORD *)__p = 136316674;
    v33 = v31 - *(double *)(a1 + 472);
    *(_QWORD *)&__p[4] = v32;
    v47 = 2048;
    v48 = v25;
    v49 = 2048;
    v50 = v26;
    v51 = 2048;
    v52 = v28;
    v53 = 2048;
    v54 = v27;
    v55 = 2048;
    v56 = v29 - v30;
    v57 = 2048;
    v58 = v33;
    LODWORD(v42) = 72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "Harvester: %s ignoring <%+.8f,%+.8f> since previous <%+.8f,%+.8f> is more accurate (%+.2fm) and fresh enough (%.2fs)", __p, v42, v43, *(double *)v44, *(double *)&v44[1], v45);
    v35 = v34;
    if (SHIBYTE(v45) < 0)
      operator delete(v44[0]);
    goto LABEL_40;
  }
  return 0;
}

void sub_100C37548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C37580(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];

  v5 = a4[7];
  v19 = a4[6];
  v20 = v5;
  v21[0] = a4[8];
  *(_OWORD *)((char *)v21 + 12) = *(__int128 *)((char *)a4 + 140);
  v6 = a4[3];
  v15 = a4[2];
  v16 = v6;
  v7 = a4[5];
  v17 = a4[4];
  v18 = v7;
  v8 = a4[1];
  v13 = *a4;
  v14 = v8;
  if ((a3 == 5 || !a3) && (sub_100C37004(a1, (uint64_t)&v13) & 1) == 0)
  {
    v9 = v20;
    *(_OWORD *)(a1 + 492) = v19;
    *(_OWORD *)(a1 + 508) = v9;
    *(_OWORD *)(a1 + 524) = v21[0];
    *(_OWORD *)(a1 + 536) = *(_OWORD *)((char *)v21 + 12);
    v10 = v16;
    *(_OWORD *)(a1 + 428) = v15;
    *(_OWORD *)(a1 + 444) = v10;
    v11 = v18;
    *(_OWORD *)(a1 + 460) = v17;
    *(_OWORD *)(a1 + 476) = v11;
    v12 = v14;
    *(_OWORD *)(a1 + 396) = v13;
    *(_OWORD *)(a1 + 412) = v12;
    sub_100C369A4(a1);
  }
}

void sub_100C3763C(uint64_t a1, int a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  NSObject *v8;
  double v9;
  double v10;
  const char *v11;
  char *v12;
  std::__shared_weak_count *v13;
  char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id v17;
  _BYTE *v18;
  id v19;
  _OWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _OWORD *v23;
  BOOL v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  _OWORD v29[2];
  _BYTE buf[18];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  id v34;

  if (a2 == 1)
  {
    ++*(_DWORD *)(a1 + 204);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56)))
    {
      v5 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
      v6 = v5 - *(double *)(a1 + 552);
      sub_100204BE4(a1 + 280);
      if (v6 >= v7)
      {
        v14 = *(char **)a3;
        v13 = *(std::__shared_weak_count **)(a3 + 8);
        v28 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        v17 = objc_alloc_init((Class)CLPPassLocation);
        sub_100792D70(v14, (uint64_t)buf);
        if ((v32 & 0x80000000) == 0)
          v18 = buf;
        else
          v18 = *(_BYTE **)buf;
        objc_msgSend(v17, "setPassTypeId:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v18));
        if (SBYTE3(v32) < 0)
          operator delete(*(void **)buf);
        objc_msgSend(v17, "setPassSource:", sub_1002E6070((uint64_t)v14));
        sub_100792D98((uint64_t)v14, (uint64_t *)v29);
        v19 = objc_alloc_init((Class)NSMutableArray);
        v20 = *(_OWORD **)&v29[0];
        if (*(_OWORD **)&v29[0] != (_OWORD *)((char *)v29 + 8))
        {
          do
          {
            v21 = v20 + 2;
            if (*((char *)v20 + 55) < 0)
              v21 = (_QWORD *)*v21;
            objc_msgSend(v19, "addObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21));
            v22 = (_QWORD *)*((_QWORD *)v20 + 1);
            if (v22)
            {
              do
              {
                v23 = v22;
                v22 = (_QWORD *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                v23 = (_OWORD *)*((_QWORD *)v20 + 2);
                v24 = *(_QWORD *)v23 == (_QWORD)v20;
                v20 = v23;
              }
              while (!v24);
            }
            v20 = v23;
          }
          while (v23 != (_OWORD *)((char *)v29 + 8));
        }
        objc_msgSend(v17, "setAssociatedStoreIds:", v19);

        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217B250);
        v25 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          v31 = 2050;
          v32 = 6;
          v33 = 2113;
          v34 = v17;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"caching pass\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"harvestPoint\":%{private, location:escape_only}@}", buf, 0x26u);
        }
        if ((unint64_t)objc_msgSend(*(id *)(a1 + 352), "count") >= 0x32)
          objc_msgSend(*(id *)(a1 + 352), "removeObjectForKey:", objc_msgSend(objc_msgSend(*(id *)(a1 + 352), "allKeys"), "firstObject"));
        objc_msgSend(*(id *)(a1 + 352), "setObject:forKey:", v17, +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5));

        sub_100C369A4(a1);
        sub_100090AE4((uint64_t)v29, *((char **)&v29[0] + 1));
        if (v28)
        {
          v26 = (unint64_t *)&v28->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10217B250);
        v8 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v9 = v5 - *(double *)(a1 + 552);
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "GeniusForPass: last harvested pass %.3fs ago, not harvesting pass status", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10217B250);
          v10 = v5 - *(double *)(a1 + 552);
          LODWORD(v29[0]) = 134217984;
          *(double *)((char *)v29 + 4) = v10;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 2, "GeniusForPass: last harvested pass %.3fs ago, not harvesting pass status", COERCE_DOUBLE(v29));
          v12 = (char *)v11;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLSubHarvesterPass::onPassKitHarvestNotification(CLHarvestPassKitNotificationType, std::shared_ptr<CLHarvestPassKitNotification>)", "%s\n", v11);
          if (v12 != buf)
            free(v12);
        }
      }
    }
  }
}

void sub_100C37ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

id sub_100C37B20(uint64_t a1, void *a2)
{
  id result;

  result = a2;
  *(_QWORD *)(a1 + 384) = result;
  return result;
}

uint64_t sub_100C37B50(_QWORD *a1)
{
  *a1 = off_10217B128;
  sub_100261F44((uint64_t)(a1 + 45));
  return sub_100429668((uint64_t)a1);
}

void sub_100C37B84(_QWORD *a1)
{
  *a1 = off_10217B128;
  sub_100261F44((uint64_t)(a1 + 45));
  sub_100429668((uint64_t)a1);
  operator delete();
}

void sub_100C37BCC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_100C37BF8()
{
  return sub_1011E780C((uint64_t)&xmmword_102307380, 0, 2, 2, 1, 0.0, 43200.0, 43200.0);
}

void sub_100C38278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_100C392BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0)
    operator delete(__p);
  sub_100010174((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_100C39348(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1001A8D50(a1);
  if (*(char *)(a1 + 127) < 0)
  {
    sub_100115CE4((_BYTE *)a2, *(void **)(a1 + 104), *(_QWORD *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 120);
  }
}

NSURL *sub_100C3939C(uint64_t a1)
{
  NSURL *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  NSURL *v13;

  v1 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", a1, 1);
  v7 = 0;
  -[NSURL setResourceValue:forKey:error:](v1, "setResourceValue:forKey:error:", NSURLFileProtectionCompleteUntilFirstUserAuthentication, NSFileProtectionKey, &v7);
  if (v7)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217B2D8);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor #Warning unable to set file protection\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217B2D8);
    }
    v3 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor #Warning unable to set file protection", "{\"msg%{public}.0s\":\"#monitor #Warning unable to set file protection\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  -[NSURL setResourceValue:forKey:error:](v1, "setResourceValue:forKey:error:", &__kCFBooleanTrue, NSURLIsExcludedFromBackupKey, &v7);
  if (v7)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217B2D8);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor #Warning unable to exclude path from backup\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217B2D8);
    }
    v5 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor #Warning unable to exclude path from backup", "{\"msg%{public}.0s\":\"#monitor #Warning unable to exclude path from backup\", \"path\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return v1;
}

NSString *sub_100C396B4(uint64_t a1)
{
  _QWORD *v2;
  void **v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;

  v2 = (_QWORD *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_7;
    v2 = (_QWORD *)*v2;
    return -[NSURL lastPathComponent](+[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2)), "lastPathComponent");
  }
  if (*(_BYTE *)(a1 + 71))
    return -[NSURL lastPathComponent](+[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2)), "lastPathComponent");
LABEL_7:
  sub_100C39348(a1, (uint64_t)__p);
  if (v13 < 0)
  {
    v6 = __p[1];
    operator delete(__p[0]);
    if (v6)
      goto LABEL_9;
LABEL_15:
    sub_1001A8D50(a1);
    v7 = *(unsigned __int8 *)(a1 + 127);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a1 + 112);
    if (!v7)
      return 0;
    sub_1001A8D50(a1);
    v10 = *(_QWORD *)(a1 + 104);
    v9 = a1 + 104;
    v8 = v10;
    if (*(char *)(v9 + 23) >= 0)
      v11 = v9;
    else
      v11 = v8;
    return +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11);
  }
  if (!v13)
    goto LABEL_15;
LABEL_9:
  sub_100C39348(a1, (uint64_t)__p);
  if (v13 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  if (v13 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_100C397F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C39FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  sub_100131740(&a37);
  _Unwind_Resume(a1);
}

id sub_100C3A1C0(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(objc_msgSend(a3, "daemonCondition"), "setCallbackHandler:", objc_msgSend(*(id *)(a1 + 32), "callbackHandler"));
}

void sub_100C3A214(id a1, NSString *a2, CLDaemonMonitoringRecord *a3, BOOL *a4)
{
  -[CLDaemonMonitoringRecord resetDaemonPartOfCondition](a3, "resetDaemonPartOfCondition");
}

void sub_100C3B484(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_100C3B4B0(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100C3B4DC(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, log, OS_LOG_TYPE_INFO, a4, a5, 0x30u);
}

void sub_100C3B504(float a1, uint64_t a2, uint64_t a3)
{
  *(float *)a3 = a1;
  *(_DWORD *)(a3 + 4) = 0;
  *(_WORD *)(a3 + 8) = 2082;
}

void sub_100C3B518(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v2;
  uint64_t v3;

  *(_QWORD *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 18) = v2;
  *(_QWORD *)(a1 + 20) = a2;
  *(_WORD *)(a1 + 28) = v2;
}

char *sub_100C3B52C(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  __int128 __dst;
  uint64_t v15;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a2;
    v15 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(v12, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(v10, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 16);
  }
  sub_1015A2E04(__p, "");
  sub_100115A48(a1, &__dst, (__int128 *)v12, (__int128 *)v10, -1, (__int128 *)__p, 0, 0, 1.79769313e308, 1.79769313e308, -1.0, -1.0);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_100C3B668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(exception_object);
}

char *sub_100C3B6D0(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, void *a8, char a9)
{
  void *__p[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  __int128 __dsta;
  uint64_t v23;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_100115CE4(&__dsta, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    __dsta = *(_OWORD *)a2;
    v23 = *(_QWORD *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_100115CE4(v20, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v20 = *(_OWORD *)a3;
    v21 = *(_QWORD *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_100115CE4(v18, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)a4;
    v19 = *(_QWORD *)(a4 + 16);
  }
  if (*(char *)(a7 + 23) < 0)
  {
    sub_100115CE4(__p, *(void **)a7, *(_QWORD *)(a7 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a7;
    v17 = *(_QWORD *)(a7 + 16);
  }
  sub_100115A48(__dst, &__dsta, (__int128 *)v20, (__int128 *)v18, -1, (__int128 *)__p, a8, a9, 1.79769313e308, 1.79769313e308, -1.0, -1.0);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dsta);
  if (__dst + 224 != (char *)a5)
    sub_1002F3538(__dst + 224, *(char **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 4);
  return __dst;
}

void sub_100C3B854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  _Unwind_Resume(exception_object);
}

BOOL sub_100C3B8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  double *v7;
  double *i;

  v2 = *(_QWORD *)(a1 + 224);
  v3 = *(_QWORD *)(a1 + 232) - v2;
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 224);
    v5 = *(_QWORD *)(a2 + 232) - v4;
    if (v5)
    {
      v6 = v3 >> 4;
      if (v6 == v5 >> 4 && *(_DWORD *)(a1 + 180) == *(_DWORD *)(a2 + 180))
      {
        if (v6 <= 1)
          v6 = 1;
        v7 = (double *)(v2 + 8);
        for (i = (double *)(v4 + 8); *(v7 - 1) == *(i - 1) && *v7 == *i; i += 2)
        {
          v7 += 2;
          if (!--v6)
            return 1;
        }
      }
    }
    return 0;
  }
  if (*(_QWORD *)(a2 + 232) != *(_QWORD *)(a2 + 224)
    || *(double *)(a1 + 72) != *(double *)(a2 + 72)
    || *(double *)(a1 + 80) != *(double *)(a2 + 80)
    || *(double *)(a1 + 88) != *(double *)(a2 + 88)
    || *(double *)(a1 + 96) != *(double *)(a2 + 96)
    || *(_QWORD *)(a1 + 160) != *(_QWORD *)(a2 + 160))
  {
    return 0;
  }
  return *(_DWORD *)(a1 + 180) == *(_DWORD *)(a2 + 180);
}

uint64_t sub_100C3B9BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  char v39;
  char v40;
  int v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  _QWORD *v48;
  _QWORD *v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD v57[2];
  uint64_t v58;
  _QWORD v59[10];
  char v60;
  uint64_t v61;
  char v62;

  sub_100263E50((uint64_t)v57);
  sub_100263F7C(&v58, (uint64_t)"Fence, ", 7);
  v4 = sub_100263F7C(&v58, (uint64_t)"[", 1);
  v5 = *(char *)(a1 + 71);
  if (v5 >= 0)
    v6 = a1 + 48;
  else
    v6 = *(_QWORD *)(a1 + 48);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 71);
  else
    v7 = *(_QWORD *)(a1 + 56);
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)"]/", 2);
  v10 = *(char *)(a1 + 23);
  if (v10 >= 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 23);
  else
    v12 = *(_QWORD *)(a1 + 8);
  v13 = sub_100263F7C(v9, v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)"/", 1);
  v15 = *(char *)(a1 + 47);
  if (v15 >= 0)
    v16 = a1 + 24;
  else
    v16 = *(_QWORD *)(a1 + 24);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 47);
  else
    v17 = *(_QWORD *)(a1 + 32);
  sub_100263F7C(v14, v16, v17);
  if (*(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224))
  {
    if (*(double *)(a1 + 72) == 1.79769313e308 && *(double *)(a1 + 80) == 1.79769313e308)
    {
      v20 = sub_100263F7C(&v58, (uint64_t)", latitude, ", 12);
      sub_100263F7C(v20, (uint64_t)"DBL_MAX", 7);
      v21 = sub_100263F7C(&v58, (uint64_t)", longitude, ", 13);
      sub_100263F7C(v21, (uint64_t)"DBL_MAX", 7);
    }
    else
    {
      v22 = sub_100263F7C(&v58, (uint64_t)", latitude, ", 12);
      v23 = *v22;
      *(uint64_t *)((char *)v22 + *(_QWORD *)(*v22 - 24) + 24) = 13;
      *(uint64_t *)((char *)v22 + *(_QWORD *)(v23 - 24) + 16) = 8;
      *(_DWORD *)((char *)v22 + *(_QWORD *)(v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v22 + *(_QWORD *)(v23 - 24) + 8) & 0xFFFFFEFB | 4;
      std::ostream::operator<<(v22, *(double *)(a1 + 72));
      v24 = sub_100263F7C(&v58, (uint64_t)", longitude, ", 13);
      v25 = *v24;
      *(uint64_t *)((char *)v24 + *(_QWORD *)(*v24 - 24) + 24) = 13;
      *(uint64_t *)((char *)v24 + *(_QWORD *)(v25 - 24) + 16) = 8;
      *(_DWORD *)((char *)v24 + *(_QWORD *)(v25 - 24) + 8) = *(_DWORD *)((_BYTE *)v24 + *(_QWORD *)(v25 - 24) + 8) & 0xFFFFFEFB | 4;
      std::ostream::operator<<(v24, *(double *)(a1 + 80));
    }
  }
  else
  {
    v18 = sub_100263F7C(&v58, (uint64_t)", latitude, ", 12);
    std::ostream::operator<<(v18, -1.0);
    v19 = sub_100263F7C(&v58, (uint64_t)", longitude, ", 13);
    std::ostream::operator<<(v19, -1.0);
  }
  v26 = sub_100263F7C(&v58, (uint64_t)", refFrame, ", 12);
  std::ostream::operator<<(v26, *(unsigned int *)(a1 + 180));
  v27 = sub_100263F7C(&v58, (uint64_t)", distance, ", 12);
  v28 = *v27;
  *(uint64_t *)((char *)v27 + *(_QWORD *)(*v27 - 24) + 16) = 1;
  *(_DWORD *)((char *)v27 + *(_QWORD *)(v28 - 24) + 8) = *(_DWORD *)((_BYTE *)v27 + *(_QWORD *)(v28 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v27, *(double *)(a1 + 88));
  v29 = sub_100263F7C(&v58, (uint64_t)", eFistance, ", 13);
  v30 = *v29;
  *(uint64_t *)((char *)v29 + *(_QWORD *)(*v29 - 24) + 16) = 1;
  *(_DWORD *)((char *)v29 + *(_QWORD *)(v30 - 24) + 8) = *(_DWORD *)((_BYTE *)v29 + *(_QWORD *)(v30 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v29, *(double *)(a1 + 96));
  v31 = sub_100263F7C(&v58, (uint64_t)", lDown, ", 9);
  v32 = *v31;
  *(uint64_t *)((char *)v31 + *(_QWORD *)(*v31 - 24) + 16) = 1;
  *(_DWORD *)((char *)v31 + *(_QWORD *)(v32 - 24) + 8) = *(_DWORD *)((_BYTE *)v31 + *(_QWORD *)(v32 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v31, *(double *)(a1 + 112));
  v33 = sub_100263F7C(&v58, (uint64_t)", time, ", 8);
  v34 = *v33;
  *(uint64_t *)((char *)v33 + *(_QWORD *)(*v33 - 24) + 16) = 1;
  *(_DWORD *)((char *)v33 + *(_QWORD *)(v34 - 24) + 8) = *(_DWORD *)((_BYTE *)v33 + *(_QWORD *)(v34 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v33, *(double *)(a1 + 120));
  v35 = sub_100263F7C(&v58, (uint64_t)", ctime, ", 9);
  v36 = *v35;
  *(uint64_t *)((char *)v35 + *(_QWORD *)(*v35 - 24) + 16) = 1;
  *(_DWORD *)((char *)v35 + *(_QWORD *)(v36 - 24) + 8) = *(_DWORD *)((_BYTE *)v35 + *(_QWORD *)(v36 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v35, *(double *)(a1 + 128));
  v37 = sub_100263F7C(&v58, (uint64_t)", flags, ", 9);
  if ((*(_QWORD *)(a1 + 160) & 1) != 0)
    v38 = 69;
  else
    v38 = 45;
  v62 = v38;
  sub_100263F7C(v37, (uint64_t)&v62, 1);
  if ((*(_QWORD *)(a1 + 160) & 2) != 0)
    v39 = 88;
  else
    v39 = 45;
  v62 = v39;
  sub_100263F7C(&v58, (uint64_t)&v62, 1);
  if ((~*(_DWORD *)(a1 + 160) & 5) != 0)
    v40 = 45;
  else
    v40 = 67;
  v62 = v40;
  sub_100263F7C(&v58, (uint64_t)&v62, 1);
  v41 = _os_feature_enabled_impl("CoreLocation", "cl_fence_handoff");
  v42 = 45;
  if (v41)
  {
    if ((*(_QWORD *)(a1 + 160) & 0x40) != 0)
      v42 = 72;
    else
      v42 = 45;
  }
  v62 = v42;
  sub_100263F7C(&v58, (uint64_t)&v62, 1);
  if ((*(_QWORD *)(a1 + 160) & 0x10) != 0)
    v43 = 77;
  else
    v43 = 45;
  v62 = v43;
  sub_100263F7C(&v58, (uint64_t)&v62, 1);
  if (*(_QWORD *)(a1 + 232) != *(_QWORD *)(a1 + 224))
  {
    v44 = 8;
    goto LABEL_46;
  }
  if ((_os_feature_enabled_impl("CoreLocation", "cl_fence_handoff") & 1) == 0)
  {
    v44 = 64;
LABEL_46:
    if ((*(_QWORD *)(a1 + 160) & v44) != 0)
      v45 = 78;
    else
      v45 = 45;
    goto LABEL_49;
  }
  v45 = 45;
LABEL_49:
  v62 = v45;
  sub_100263F7C(&v58, (uint64_t)&v62, 1);
  if ((*(_QWORD *)(a1 + 160) & 0x20) != 0)
    v46 = 76;
  else
    v46 = 45;
  v62 = v46;
  sub_100263F7C(&v58, (uint64_t)&v62, 1);
  if ((*(_QWORD *)(a1 + 160) & 0x80) != 0)
    v47 = 83;
  else
    v47 = 45;
  v62 = v47;
  sub_100263F7C(&v58, (uint64_t)&v62, 1);
  v48 = sub_100263F7C(&v58, (uint64_t)", key, ", 7);
  std::ostream::operator<<(v48, *(unsigned int *)(a1 + 184));
  v49 = sub_100263F7C(&v58, (uint64_t)", throttled, ", 13);
  if (*(_BYTE *)(a1 + 188))
    v50 = 89;
  else
    v50 = 78;
  v62 = v50;
  sub_100263F7C(v49, (uint64_t)&v62, 1);
  v51 = sub_100263F7C(&v58, (uint64_t)", polygon, ", 11);
  if (*(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224))
    v52 = 0;
  else
    v52 = (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 4;
  std::ostream::operator<<(v51, v52);
  v53 = sub_100263F7C(&v58, (uint64_t)", envType, ", 11);
  std::ostream::operator<<(v53, *(unsigned int *)(a1 + 168));
  v54 = sub_100263F7C(&v58, (uint64_t)", locType, ", 11);
  std::ostream::operator<<(v54, *(unsigned int *)(a1 + 172));
  std::stringbuf::str(a2, v59);
  *(_QWORD *)((char *)v57
  v58 = v55;
  if (v60 < 0)
    operator delete((void *)v59[8]);
  std::streambuf::~streambuf(v59);
  return std::ios::~ios(&v61);
}

void sub_100C3C05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1018B38B4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3C08C@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  sub_100263E50((uint64_t)v25);
  sub_100263F7C(&v26, (uint64_t)"{ \"vertices\": [ ", 16);
  if (*(_QWORD *)(a1 + 232) != *(_QWORD *)(a1 + 224))
  {
    v8 = sub_100263F7C(&v26, (uint64_t)"{\"latitude\": ", 13);
    v9 = *v8;
    *(uint64_t *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 16) = 8;
    *(_DWORD *)((char *)v8 + *(_QWORD *)(v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
    v10 = (_QWORD *)std::ostream::operator<<(v8, *(double *)(*(_QWORD *)(a1 + 224) + 16 * a2));
    v11 = sub_100263F7C(v10, (uint64_t)", \"longitude\": ", 15);
    v12 = *v11;
    *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 16) = 8;
    *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
    v13 = (_QWORD *)std::ostream::operator<<(v11, *(double *)(*(_QWORD *)(a1 + 224) + 16 * a2 + 8));
    sub_100263F7C(v13, (uint64_t)"}", 1);
    if (a3 <= a2)
      v14 = a2;
    else
      v14 = a3;
    v15 = v14 - (uint64_t)a2 + 1;
    for (i = 16 * a2; --v15; i += 16)
    {
      v17 = sub_100263F7C(&v26, (uint64_t)", {\"latitude\":", 14);
      v18 = *v17;
      *(uint64_t *)((char *)v17 + *(_QWORD *)(*v17 - 24) + 16) = 8;
      *(_DWORD *)((char *)v17 + *(_QWORD *)(v18 - 24) + 8) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
      v19 = (_QWORD *)std::ostream::operator<<(v17, *(double *)(*(_QWORD *)(a1 + 224) + i + 16));
      v20 = sub_100263F7C(v19, (uint64_t)",\"longitude\":", 13);
      v21 = *v20;
      *(uint64_t *)((char *)v20 + *(_QWORD *)(*v20 - 24) + 16) = 8;
      *(_DWORD *)((char *)v20 + *(_QWORD *)(v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v20 + *(_QWORD *)(v21 - 24) + 8) & 0xFFFFFEFB | 4;
      v22 = (_QWORD *)std::ostream::operator<<(v20, *(double *)(*(_QWORD *)(a1 + 224) + i + 24));
      sub_100263F7C(v22, (uint64_t)"}", 1);
    }
  }
  sub_100263F7C(&v26, (uint64_t)" ] }", 4);
  std::stringbuf::str(a4, v27);
  *(_QWORD *)((char *)v25
  v26 = v23;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf(v27);
  return std::ios::~ios(&v29);
}

void sub_100C3C31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3C344(uint64_t a1)
{
  signed int v1;
  signed int v2;

  v1 = llround(*(double *)(a1 + 72) * 10000.0);
  v2 = llround(*(double *)(a1 + 80) * 10000.0);
  return 1540483477
       * ((1540483477 * ((((0xC6A4A7935BD1E995 * v2) >> 32) >> 15) ^ (1540483477 * v2))) ^ (678072505 * ((((0xC6A4A7935BD1E995 * v1) >> 32) >> 15) ^ (1540483477 * v1)) - 430675100))
       - 430675100;
}

unint64_t sub_100C3C3BC(uint64_t a1)
{
  double *v2;
  double *v3;
  uint64_t v4;
  double v5;
  double v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  const std::string::value_type *v12;
  uint64_t v13;
  const std::string::value_type *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string v24;
  std::string v25;
  std::string v26;
  __int128 v27;
  std::string::size_type v28;

  v2 = (double *)(a1 + 72);
  v3 = (double *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 224);
  if (*(_QWORD *)(a1 + 232) != v4)
  {
    v2 = *(double **)(a1 + 224);
    v3 = (double *)(v4 + 8);
  }
  v5 = *v3;
  v6 = *v2;
  sub_10078A2A0((const void **)(a1 + 48), 47, (uint64_t)&v24);
  v7 = *(char *)(a1 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a1;
  else
    v8 = *(const std::string::value_type **)a1;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  v10 = std::string::append(&v24, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v25, 47);
  v26 = v25;
  memset(&v25, 0, sizeof(v25));
  v14 = *(const std::string::value_type **)(a1 + 24);
  v13 = a1 + 24;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  v18 = std::string::append(&v26, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v28 = v18->__r_.__value_.__r.__words[2];
  v27 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  v20 = sub_100115F1C((uint64_t)&v26, (char *)&v27);
  if (SHIBYTE(v28) < 0)
    operator delete((void *)v27);
  v21 = llround(v6 * 1000000.0);
  v22 = llround(v5 * 1000000.0);
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v20) ^ ((0xC6A4A7935BD1E995 * v20) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v22) ^ ((0xC6A4A7935BD1E995 * v22) >> 47)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47))))
       + 3864292196u;
}

void sub_100C3C578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C3C5D8(uint64_t result, int a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = a3;
  *(double *)(result + 8) = a9;
  *(double *)(result + 16) = a10;
  *(double *)(result + 24) = a11;
  *(double *)(result + 32) = a12;
  *(double *)(result + 40) = a13;
  *(double *)(result + 48) = a14;
  *(double *)(result + 56) = a15;
  *(double *)(result + 64) = a16;
  *(_QWORD *)(result + 72) = a4;
  *(_DWORD *)(result + 80) = a5;
  *(_QWORD *)(result + 88) = a6;
  *(_DWORD *)(result + 96) = a7;
  *(_QWORD *)(result + 104) = a17;
  *(_QWORD *)(result + 112) = a18;
  *(_DWORD *)(result + 120) = a8;
  *(_QWORD *)(result + 124) = a19;
  *(_QWORD *)(result + 132) = a20;
  return result;
}

uint64_t sub_100C3C618(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4);
}

double sub_100C3C620(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

double sub_100C3C628(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

uint64_t sub_100C3C630(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_100C3C638(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

double sub_100C3C640(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

double sub_100C3C648(uint64_t a1)
{
  return *(double *)(a1 + 112);
}

BOOL sub_100C3C650(uint64_t *a1)
{
  _BOOL8 v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char v8;
  int v9;

  v9 = 0;
  sub_1000C1928((uint64_t)&v4, &v9);
  v5 = *a1;
  v6 = -1;
  v2 = sub_1001C8DA8(&v4);
  if (v8 < 0)
    operator delete(__p);
  return v2;
}

void sub_100C3C6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C3C6D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 124);
}

_DWORD *sub_100C3C6E0(_DWORD *result, int a2, int a3, int a4, int a5)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

uint64_t sub_100C3C6EC(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 648))
    sub_1001B7C9C();
  return a1 + 648;
}

void sub_100C3C770(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPlaceInferenceSubscription::onLocationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217B568);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPlaceInferenceSubscription::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217B568);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPlaceInferenceSubscription::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C48880(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C3C928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C3C948(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 656))
    sub_1001B7BB8();
  return a1 + 656;
}

uint64_t sub_100C3C9CC(uint64_t a1)
{
  if (!*(_QWORD *)(a1 + 664))
    sub_1001B7DEC();
  return a1 + 664;
}

void sub_100C3CA50(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLPlaceInferenceSubscription::onWifiServiceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217B568);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPlaceInferenceSubscription::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217B568);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPlaceInferenceSubscription::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C48AF0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C3CC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C3CCEC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v14;
  void *v15;
  _QWORD v17[7];

  v6 = sub_1001B5A2C(a1, a2, a3, a4, a5);
  *(_QWORD *)v6 = off_10217B328;
  *(_DWORD *)(v6 + 41) = 0x10000;
  *(_BYTE *)(v6 + 45) = 0;
  *(_QWORD *)(v6 + 48) = 0xBFF0000000000000;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(a1 + 64) = objc_alloc_init(CLPlaceInferenceSubscriptionAdapter);
  *(_QWORD *)(a1 + 80) = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "newTimer");
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = objc_alloc_init((Class)NSMutableArray);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v7 = objc_alloc_init((Class)NSMutableArray);
  *(_QWORD *)(a1 + 160) = off_102141E98;
  *(_QWORD *)(a1 + 152) = v7;
  v8 = operator new(0x20uLL);
  v8[2] = 0;
  *v8 = off_102141ED0;
  v8[1] = 0;
  *((_DWORD *)v8 + 6) = 31337;
  *(_QWORD *)(a1 + 168) = v8 + 3;
  *(_QWORD *)(a1 + 176) = v8;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 240) = 0;
  *(_WORD *)(a1 + 244) = 257;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 296) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 304) = _Q1;
  *(_OWORD *)(a1 + 320) = xmmword_101BDBEE0;
  *(_DWORD *)(a1 + 336) = -1;
  *(_QWORD *)(a1 + 344) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 352) = -1;
  *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 368) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 456) = xmmword_101BDBEE0;
  *(_DWORD *)(a1 + 472) = -1;
  *(_QWORD *)(a1 + 480) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 488) = -1;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_DWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 544) = -1;
  *(_QWORD *)(a1 + 552) = -1082130432;
  *(_QWORD *)(a1 + 560) = 0xBF800000FFFFFFFFLL;
  *(_QWORD *)(a1 + 568) = 3212836864;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = objc_alloc_init((Class)NSMutableArray);
  *(_QWORD *)(a1 + 592) = objc_alloc_init((Class)NSMutableArray);
  *(_QWORD *)(a1 + 600) = objc_alloc_init((Class)NSDictionary);
  sub_1002433B8(a1 + 608);
  *(_DWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_QWORD *)(a1 + 680) = &off_102220060;
  *(_QWORD *)(a1 + 688) = 0;
  v14 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  *(_QWORD *)(a1 + 56) = v14;
  objc_msgSend(v14, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 64), objc_msgSend(*(id *)(a1 + 8), "silo"));
  v15 = *(void **)(a1 + 80);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100C3D014;
  v17[3] = &unk_10212ECA0;
  v17[4] = a1;
  objc_msgSend(v15, "setHandler:", v17);
  *(_QWORD *)(a1 + 688) = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLAnalyticsLogger"));
  return a1;
}

void sub_100C3CF88(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  if (*(char *)(v1 + 423) < 0)
    operator delete(*(void **)(v1 + 400));
  if (*(char *)(v1 + 287) < 0)
    operator delete(*(void **)(v1 + 264));
  sub_100090A0C(v2);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3D014(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(v1 + 24);
    *(_DWORD *)buf = 138543362;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#dsa client '%{public}@' starts receiving CLPlaceInferenceSubscription updates", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v5 = *(_QWORD *)(v1 + 24);
    v8 = 138543362;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "#dsa client '%{public}@' starts receiving CLPlaceInferenceSubscription updates", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLPlaceInferenceSubscription::CLPlaceInferenceSubscription(Delegate *, id<CLIntersiloUniverse>, CLClientManagerAuthorizationContext *, CLClientKeyPath *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_100C3D1D4(v1);
  return sub_100C3D944(v1);
}

void sub_100C3D1D4(uint64_t a1)
{
  id v2;
  id v3;
  _BYTE *v4;
  _BYTE *v5;
  id v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  NSObject *v11;
  double Current;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  id v20;
  const char *v21;
  char *v22;
  const char *v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  _QWORD v27[8];
  std::__shared_weak_count *v28;
  double v29;
  int v30;
  id v31;
  __int16 v32;
  id v33;
  __int16 v34;
  _BYTE *v35;
  _BYTE buf[22];
  __int16 v37;
  _BYTE *v38;

  v2 = objc_msgSend(*(id *)(a1 + 120), "copy");
  v3 = v2;
  if (*(_QWORD *)(a1 + 104) == 5 && *(_QWORD *)(a1 + 136))
  {
    v4 = objc_msgSend(v2, "count");
    v3 = sub_1006FA1EC(v3, *(_QWORD *)(a1 + 136));
    v5 = objc_msgSend(v3, "count");
    v6 = objc_alloc_init((Class)NSDateFormatter);
    objc_msgSend(v6, "setDateStyle:", 1);
    objc_msgSend(v6, "setTimeStyle:", 4);
    objc_msgSend(v6, "setFormatterBehavior:", 1040);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v8 = objc_msgSend(v6, "stringFromDate:", *(_QWORD *)(a1 + 136));
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v4 - v5;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v8;
      v37 = 2048;
      v38 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#placeInfer filtered out %lu locations predating request date (%@), %lu locations remaining", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v19 = qword_1022A01C8;
      v20 = objc_msgSend(v6, "stringFromDate:", *(_QWORD *)(a1 + 136));
      v30 = 134218498;
      v31 = (id)(v4 - v5);
      v32 = 2112;
      v33 = v20;
      v34 = 2048;
      v35 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 1, "#placeInfer filtered out %lu locations predating request date (%@), %lu locations remaining", &v30, 32);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  if (*(_BYTE *)(a1 + 44))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v9 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#placeInfer client authorized for coarse locations only, sending fallback message", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_14;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    LOWORD(v30) = 0;
    LODWORD(v26) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer client authorized for coarse locations only, sending fallback message", &v30, v26);
    v18 = (char *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v17);
    if (v18 == buf)
      goto LABEL_14;
    goto LABEL_38;
  }
  if (!*(_QWORD *)(a1 + 56))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v16 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#placeInfer no valid RoutineMonitor configured, sending fallback message", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_14;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    LOWORD(v30) = 0;
    LODWORD(v26) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer no valid RoutineMonitor configured, sending fallback message", &v30, v26);
    v18 = (char *)v25;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v25);
    if (v18 == buf)
      goto LABEL_14;
LABEL_38:
    free(v18);
LABEL_14:
    sub_100C3E648(a1, v3);
    return;
  }
  v10 = objc_msgSend(objc_alloc((Class)RTPlaceInferenceOptions), "initWithFidelityPolicy:locations:accessPoints:clientIdentifier:", *(_QWORD *)(a1 + 96), v3, objc_msgSend(*(id *)(a1 + 152), "copy"), objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"));
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v11 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#placeInfer running fetchPlaceInferencesWithOptions: %@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v30 = 138412290;
    v31 = v10;
    LODWORD(v26) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer running fetchPlaceInferencesWithOptions: %@", &v30, v26);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  sub_10052D218(a1 + 160, buf);
  Current = CFAbsoluteTimeGetCurrent();
  v13 = *(void **)(a1 + 56);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3321888768;
  v27[2] = sub_100C3E998;
  v27[3] = &unk_10217B428;
  v27[6] = a1;
  v27[7] = *(_QWORD *)buf;
  v28 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 16);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v29 = Current;
  v27[4] = v10;
  v27[5] = v3;
  objc_msgSend(v13, "fetchPlaceInferencesWithOptions:withReply:", v10, v27);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (*(_QWORD *)&buf[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
}

void sub_100C3D910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  if (a26)
    std::__shared_weak_count::__release_weak(a26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C3D944(uint64_t a1)
{
  uint64_t v2;

  objc_msgSend(*(id *)(a1 + 152), "removeAllObjects");
  objc_msgSend(*(id *)(a1 + 120), "removeAllObjects");
  sub_100C3E604(a1);
  if (*(_BYTE *)(a1 + 43))
  {
    v2 = sub_100C3C9CC(a1);
    objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v2 + 8), 3);
  }
  objc_msgSend(*(id *)(a1 + 80), "setNextFireDelay:", 1.79769313e308);
  *(_BYTE *)(a1 + 42) = 0;
  return sub_100FFB234(a1);
}

uint64_t sub_100C3D9B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_10217B328;
  objc_msgSend(*(id *)(a1 + 64), "invalidate");

  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  objc_msgSend(*(id *)(a1 + 80), "invalidate");

  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 120) = 0;

  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;

  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;

  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;

  *(_QWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  v2 = *(_QWORD *)(a1 + 664);
  *(_QWORD *)(a1 + 664) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 656);
  *(_QWORD *)(a1 + 656) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 648) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (*(char *)(a1 + 423) < 0)
    operator delete(*(void **)(a1 + 400));
  if (*(char *)(a1 + 287) < 0)
    operator delete(*(void **)(a1 + 264));
  sub_100090A0C((_QWORD *)(a1 + 160));
  return sub_10002FA68(a1);
}

void sub_100C3DAF8(uint64_t a1)
{
  sub_100C3D9B4(a1);
  operator delete();
}

void sub_100C3DB1C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  char *v6;
  double Current;
  double v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  _BYTE v32[12];
  _BYTE buf[18];
  __int16 v34;
  uint64_t v35;

  objc_msgSend(*(id *)(a1 + 8), "silo");
  if ((objc_msgSend(*(id *)(a1 + 16), "isAuthorizedForServiceType:", 12) & 1) != 0)
  {
    switch(*(_QWORD *)(a1 + 104))
    {
      case 0:
        *(_DWORD *)(a1 + 72) = 1;
        *(_QWORD *)(a1 + 88) = 0x3FB999999999999ALL;
        *(_QWORD *)(a1 + 96) = 0;
        goto LABEL_45;
      case 1:
        *(_DWORD *)(a1 + 72) = 1;
        *(_QWORD *)(a1 + 88) = 0x3FB999999999999ALL;
        *(_QWORD *)(a1 + 96) = 4;
        goto LABEL_45;
      case 2:
        *(_DWORD *)(a1 + 72) = 1;
        *(_QWORD *)(a1 + 88) = 0x3FF8000000000000;
        *(_QWORD *)(a1 + 96) = 5;
        goto LABEL_21;
      case 3:
        *(_DWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 88) = 0x4014000000000000;
        *(_QWORD *)(a1 + 96) = 7;
LABEL_21:
        *(_BYTE *)(a1 + 43) = 1;
        goto LABEL_46;
      case 4:
        *(_DWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 88) = 0x4014000000000000;
        *(_QWORD *)(a1 + 96) = 7;
        *(_BYTE *)(a1 + 43) = 1;
        *(_BYTE *)(a1 + 45) = 1;
        return;
      case 5:
        Current = CFAbsoluteTimeGetCurrent();
        sub_1001E4804(buf);
        *(_QWORD *)v32 = 0;
        if (sub_1001FD98C(*(uint64_t *)buf, "PlaceInferenceTimestampOfLastBestLocationRequestForFidelityLowWithPreciseLocation", v32))v8 = *(double *)v32;
        else
          v8 = -1.0;
        v9 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10217B588);
        v12 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
        {
          v13 = *(_QWORD *)(a1 + 112);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#placeInfer fFidelityLowWithPreciseLocationQueriesCount = %lu", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          v21 = *(_QWORD *)(a1 + 112);
          *(_DWORD *)v32 = 134217984;
          *(_QWORD *)&v32[4] = v21;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer fFidelityLowWithPreciseLocationQueriesCount = %lu", v32);
          v23 = (char *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        v14 = *(_QWORD *)(a1 + 112);
        if (v14 == 2)
        {
          if (Current - v8 <= 43200.0)
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v20 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#placeInfer no GPS budget remaining, configuring a cached location request", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10217B588);
              *(_WORD *)v32 = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer no GPS budget remaining, configuring a cached location request", v32, 2);
              v31 = (char *)v30;
              sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v30);
              if (v31 != buf)
                free(v31);
            }
            *(_DWORD *)(a1 + 72) = 1;
            *(_QWORD *)(a1 + 88) = 0x4008000000000000;
            *(_QWORD *)(a1 + 96) = 24;
            *(_BYTE *)(a1 + 43) = 0;
            *(_BYTE *)(a1 + 45) = 0;
            v16 = 3;
            goto LABEL_68;
          }
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          v17 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#placeInfer GPS budget is still available, configuring a smoothed GPS query", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            *(_WORD *)v32 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer GPS budget is still available, configuring a smoothed GPS query", v32, 2);
            v29 = (char *)v28;
            sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          *(_DWORD *)(a1 + 72) = 0;
          v18 = 0x4044000000000000;
        }
        else
        {
          if (v14 == 1)
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v15 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#placeInfer configuring a high accuracy LOI query", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10217B588);
              *(_WORD *)v32 = 0;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer configuring a high accuracy LOI query", v32, 2);
              v25 = (char *)v24;
              sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v24);
              if (v25 != buf)
                free(v25);
            }
            v16 = 1;
            *(_DWORD *)(a1 + 72) = 1;
            *(_QWORD *)(a1 + 88) = 0x4008000000000000;
            *(_QWORD *)(a1 + 96) = 8;
            *(_BYTE *)(a1 + 43) = 0;
            *(_BYTE *)(a1 + 45) = 0;
LABEL_68:
            *(_QWORD *)(a1 + 224) = v16;
            return;
          }
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          v19 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "#placeInfer configuring an extra GPS request", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            *(_WORD *)v32 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer configuring an extra GPS request", v32, 2);
            v27 = (char *)v26;
            sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v26);
            if (v27 != buf)
              free(v27);
          }
          *(_DWORD *)(a1 + 72) = 0;
          v18 = 0x4034000000000000;
        }
        *(_QWORD *)(a1 + 88) = v18;
        *(_QWORD *)(a1 + 96) = 26;
        *(_BYTE *)(a1 + 43) = 0;
        *(_BYTE *)(a1 + 45) = 0;
        v16 = 2;
        goto LABEL_68;
      case 6:
        *(_DWORD *)(a1 + 72) = 1;
        *(_QWORD *)(a1 + 88) = 0;
        *(_QWORD *)(a1 + 96) = 0;
LABEL_45:
        *(_BYTE *)(a1 + 43) = 0;
        goto LABEL_46;
      default:
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10217B588);
        v4 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#dsa Please update initializePlaceInferencesOptions", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          *(_WORD *)v32 = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "#dsa Please update initializePlaceInferencesOptions", v32, 2);
          v6 = (char *)v5;
          sub_100512490("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::initializePlaceInferencesOptions()", "%s\n", v5);
          if (v6 != buf)
            free(v6);
        }
        return;
    }
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    v34 = 2114;
    v35 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa client is authorized only for coarse\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  *(_DWORD *)(a1 + 72) = 2;
  *(_QWORD *)(a1 + 88) = 0x3FB999999999999ALL;
  *(_QWORD *)(a1 + 96) = 4;
  *(_WORD *)(a1 + 43) = 256;
LABEL_46:
  *(_BYTE *)(a1 + 45) = 0;
}

void sub_100C3E554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100C3E58C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 44))
  {
    v2 = sub_100C3C6EC(a1);
    objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v2 + 8), *(unsigned int *)(a1 + 72));
    v3 = sub_100C3C948(a1);
  }
  else
  {
    v4 = sub_100C3C948(a1);
    objc_msgSend(*(id *)(*(_QWORD *)v4 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v4 + 8), *(unsigned int *)(a1 + 72));
    v3 = sub_100C3C6EC(a1);
  }
  return objc_msgSend(*(id *)(*(_QWORD *)v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v3 + 8), *(unsigned int *)(a1 + 72), 0);
}

id sub_100C3E604(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 44))
    v2 = sub_100C3C948(a1);
  else
    v2 = sub_100C3C6EC(a1);
  return objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v2 + 8), *(unsigned int *)(a1 + 72));
}

void sub_100C3E648(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  id v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  id v37;

  if (objc_msgSend(a2, "count"))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      v6 = v5;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      v8 = v7;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "horizontalAccuracy");
      *(_DWORD *)buf = 134284547;
      v29 = v6;
      v30 = 2049;
      v31 = v8;
      v32 = 2050;
      v33 = v9;
      v34 = 2082;
      v35 = sub_10014D1E0(objc_msgSend(objc_msgSend(a2, "lastObject"), "type"));
      v36 = 2112;
      v37 = objc_msgSend(objc_msgSend(a2, "lastObject"), "timestamp");
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#placeInfer fallback result message location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{public}s, timestamp, %@", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v10 = qword_1022A01C8;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      v12 = v11;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "coordinate");
      v14 = v13;
      objc_msgSend(objc_msgSend(a2, "lastObject"), "horizontalAccuracy");
      v18 = 134284547;
      v19 = v12;
      v20 = 2049;
      v21 = v14;
      v22 = 2050;
      v23 = v15;
      v24 = 2082;
      v25 = sub_10014D1E0(objc_msgSend(objc_msgSend(a2, "lastObject"), "type"));
      v26 = 2112;
      v27 = objc_msgSend(objc_msgSend(a2, "lastObject"), "timestamp");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "#placeInfer fallback result message location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{public}s, timestamp, %@", &v18, 52);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendFallBackResultMessage(const NSArray<CLLocation *> *)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    sub_100C42B84(a1, 0, (uint64_t)objc_msgSend(a2, "lastObject"));
  }
  else
  {
    sub_100C40258(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, 0));
  }
}

void sub_100C3E998(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[11];
  std::__shared_weak_count *v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_100C3EA78;
  v8[3] = &unk_10217B3F0;
  v8[9] = a1[9];
  v8[4] = a1[4];
  v8[5] = a2;
  v3 = a1[7];
  v8[8] = a1[6];
  v8[6] = a3;
  v4 = (std::__shared_weak_count *)a1[8];
  v8[10] = v3;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = a1[8];
    v8[7] = a1[5];
    if (!v7 || *(_QWORD *)(v7 + 8) == -1 || (sub_100C3EA78((uint64_t)v8), (v4 = v9) != 0))
      std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100C3EA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  _Unwind_Resume(exception_object);
}

void sub_100C3EA78(uint64_t a1)
{
  uint64_t v2;
  double Current;
  NSObject *v4;
  double v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  id v28;
  id v29;
  NSObject *v30;
  NSObject *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  const char *v40;
  uint8_t *v41;
  const char *v42;
  uint8_t *v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  _QWORD v49[8];
  std::__shared_weak_count *v50;
  _QWORD block[6];
  std::__shared_weak_count *v52;
  int v53;
  double v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  id v58;
  __int16 v59;
  id v60;
  __int16 v61;
  uint64_t v62;
  uint8_t buf[4];
  _BYTE v64[18];
  __int16 v65;
  id v66;
  __int16 v67;
  id v68;
  __int16 v69;
  uint64_t v70;

  v2 = *(_QWORD *)(a1 + 64);
  Current = CFAbsoluteTimeGetCurrent();
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v5 = (Current - *(double *)(a1 + 72)) * 1000.0;
    v6 = *(_QWORD *)(a1 + 32);
    v7 = objc_msgSend(*(id *)(a1 + 40), "count");
    v8 = objc_msgSend(*(id *)(a1 + 40), "firstObject");
    v9 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 134219010;
    *(double *)v64 = v5;
    *(_WORD *)&v64[8] = 2112;
    *(_QWORD *)&v64[10] = v6;
    v65 = 2050;
    v66 = v7;
    v67 = 2112;
    v68 = v8;
    v69 = 2114;
    v70 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#placeInfer RECEIVED RESPONSE to fetchPlaceInferencesWithOptions in %f s with options, %@, %{public}lu placeInferences, placeInferences[0], %@, error, %{public}@", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v34 = qword_1022A01C8;
    v35 = *(double *)(a1 + 72);
    v36 = *(_QWORD *)(a1 + 32);
    v37 = objc_msgSend(*(id *)(a1 + 40), "count");
    v38 = objc_msgSend(*(id *)(a1 + 40), "firstObject");
    v39 = *(_QWORD *)(a1 + 48);
    v53 = 134219010;
    v54 = (Current - v35) * 1000.0;
    v55 = 2112;
    v56 = v36;
    v57 = 2050;
    v58 = v37;
    v59 = 2112;
    v60 = v38;
    v61 = 2114;
    v62 = v39;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 1, "#placeInfer RECEIVED RESPONSE to fetchPlaceInferencesWithOptions in %f s with options, %@, %{public}lu placeInferences, placeInferences[0], %@, error, %{public}@", &v53, 52);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
  if (objc_msgSend(*(id *)(a1 + 48), "code") == (id)2)
  {
    *(_DWORD *)(v2 + 520) = 6;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v10 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#era CA result - kDSAResultErrorLSOff", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v53) = 0;
      LODWORD(v48) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#era CA result - kDSAResultErrorLSOff", &v53, v48);
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    *(_QWORD *)(v2 + 324) = 0x600000002;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorLSOff", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v53) = 0;
      LODWORD(v48) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa AWD result - kDSAResultErrorLSOff", &v53, v48);
      v45 = (uint8_t *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    *(_BYTE *)(v2 + 244) = 0;
  }
  if ((*(_QWORD *)(a1 + 48) || !objc_msgSend(*(id *)(a1 + 40), "count")) && *(_QWORD *)(v2 + 104) == 5)
  {
    v12 = objc_msgSend(objc_msgSend(*(id *)(v2 + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_100C3F584;
    block[3] = &unk_10217B348;
    v14 = *(_QWORD *)(a1 + 80);
    v13 = *(std::__shared_weak_count **)(a1 + 88);
    block[4] = v2;
    block[5] = v14;
    v52 = v13;
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
    }
    dispatch_async(v12, block);
    v17 = v52;
    if (!v52)
      return;
LABEL_41:
    std::__shared_weak_count::__release_weak(v17);
    return;
  }
  if (!objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    if (*(_QWORD *)(a1 + 48))
    {
      sub_100197040();
      if (sub_10011E0F0()
        && (v28 = objc_msgSend(*(id *)(a1 + 48), "domain"),
            objc_msgSend(v28, "isEqualToString:", RTErrorDomain))
        && objc_msgSend(*(id *)(a1 + 48), "code") == (id)8)
      {
        sub_100C3E648(v2, *(void **)(a1 + 56));
      }
      else
      {
        sub_100C40258(v2, *(_QWORD *)(a1 + 48));
      }
    }
    else
    {
      sub_100C40258(v2, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, 0));
    }
    return;
  }
  sub_100197040();
  if (sub_10011E0F0())
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v18 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v64 = 0;
      *(_WORD *)&v64[4] = 2082;
      *(_QWORD *)&v64[6] = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
    }
    v19 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v64 = 0;
      *(_WORD *)&v64[4] = 2082;
      *(_QWORD *)&v64[6] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!", "{\"msg%{public}.0s\":\"Woah!  Place inference results are available on macOS?!  Time to remove that fallback logic!\"}", buf, 0x12u);
    }
  }
  +[NSMutableArray array](NSMutableArray, "array");
  v20 = *(void **)(a1 + 40);
  if (!*(_BYTE *)(v2 + 45))
  {
    v29 = sub_100C43850((uint64_t)v20, *(void **)(a1 + 40));
    sub_100C42B84(v2, v29, 0);
    return;
  }
  *(_DWORD *)(v2 + 548) = objc_msgSend(v20, "count");
  *(_DWORD *)(v2 + 544) = (int)((Current - *(double *)(a1 + 72)) * 1000.0);
  *(_DWORD *)(v2 + 336) = objc_msgSend(*(id *)(a1 + 40), "count");
  *(_DWORD *)(v2 + 332) = (int)((Current - *(double *)(a1 + 72)) * 1000.0);
  v21 = sub_100C40434(v2, *(void **)(a1 + 40), *(void **)(a1 + 56));
  if (objc_msgSend(v21, "count"))
  {
    v22 = objc_msgSend(v21, "objectAtIndexedSubscript:", 0);
    v23 = *(void **)(v2 + 56);
    v49[0] = _NSConcreteStackBlock;
    v49[1] = 3321888768;
    v49[2] = sub_100C42EE4;
    v49[3] = &unk_10217B3B8;
    v25 = *(_QWORD *)(a1 + 80);
    v24 = *(std::__shared_weak_count **)(a1 + 88);
    v49[6] = v2;
    v49[7] = v25;
    v50 = v24;
    if (v24)
    {
      v26 = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    v49[4] = *(_QWORD *)(a1 + 56);
    v49[5] = v22;
    objc_msgSend(v23, "fetchFormattedPostalAddressesFromMeCardWithReply:", v49);
    v17 = v50;
    if (!v50)
      return;
    goto LABEL_41;
  }
  sub_100C42B84(v2, v21, 0);
  if (!*(_DWORD *)(v2 + 328))
  {
    *(_DWORD *)(v2 + 328) = 7;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v30 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v53) = 0;
      LODWORD(v48) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable", &v53, v48);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
  }
  if (!*(_DWORD *)(v2 + 520))
  {
    *(_DWORD *)(v2 + 520) = 7;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v31 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorPlacemarkUnavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v53) = 0;
      LODWORD(v48) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#era CA result - kERAResultErrorPlacemarkUnavailable", &v53, v48);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
  }
}

void sub_100C3F564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19)
    std::__shared_weak_count::__release_weak(a19);
  _Unwind_Resume(exception_object);
}

void sub_100C3F584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100C3F5EC;
  v3[3] = &unk_10212ECA0;
  v3[4] = v1;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8) != -1)
      sub_100C3F5EC((uint64_t)v3);
  }
}

void sub_100C3F5EC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(v1 + 112);
    *(_DWORD *)buf = 134349056;
    v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#placeInfer FidelityPolicyLowWithPreciseLocation query attempt #%{public}lu failed", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v9 = *(_QWORD *)(v1 + 112);
    v15 = 134349056;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#placeInfer FidelityPolicyLowWithPreciseLocation query attempt #%{public}lu failed", &v15, 12);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  v4 = *(_QWORD *)(v1 + 112);
  if (v4 == 2)
  {
    if (!sub_100C3FB80(v1))
    {
LABEL_18:
      ++*(_QWORD *)(v1 + 112);
      sub_100C3DB1C(v1);
      sub_100C3FA68(v1);
    }
  }
  else
  {
    if (v4 == 1)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v5 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#placeInfer high accuracy LOI not available", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10217B588);
        LOWORD(v15) = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#placeInfer high accuracy LOI not available", &v15, v14);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      goto LABEL_18;
    }
    if (!sub_100C3FB80(v1))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v8 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#placeInfer failed to determine current placeInference, return no result", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10217B588);
        LOWORD(v15) = 0;
        LODWORD(v14) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#placeInfer failed to determine current placeInference, return no result", &v15, v14);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      *(_BYTE *)(v1 + 245) = 0;
      sub_100C40258(v1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, 0));
    }
  }
}

uint64_t sub_100C3FA68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CFAbsoluteTime Current;
  uint64_t v9;
  std::__shared_weak_count *v10;

  sub_100C3E58C(a1);
  if (*(_BYTE *)(a1 + 43))
  {
    v2 = sub_100C3C9CC(a1);
    objc_msgSend(*(id *)(*(_QWORD *)v2 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)v2 + 8), 3, 0);
    objc_msgSend(*(id *)(*(_QWORD *)sub_100C3C9CC(a1) + 16), "syncgetStartScanWithType:lowPriority:passive:requester:", 10, 0, 0, "placeinference");
  }
  objc_msgSend(*(id *)(a1 + 80), "setNextFireDelay:", *(double *)(a1 + 88));
  *(_BYTE *)(a1 + 42) = 1;
  if (*(double *)(a1 + 88) == 40.0)
  {
    sub_1001E4804(&v9);
    v3 = v9;
    Current = CFAbsoluteTimeGetCurrent();
    sub_10018A4CC(v3, "PlaceInferenceTimestampOfLastBestLocationRequestForFidelityLowWithPreciseLocation", &Current);
    v4 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return sub_100FFB234(a1);
}

void sub_100C3FB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100C3FB80(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  id v10;
  id v11;
  NSObject *v12;
  _BOOL8 result;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  id v28;
  const char *v29;
  uint8_t *v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  id v38;
  int v39;
  id v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  id v48;
  uint8_t buf[4];
  id v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  const char *v56;
  __int16 v57;
  id v58;

  if (!*(_QWORD *)(a1 + 128))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "#placeInfer attempted to send the last available location, but none found", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    LOWORD(v39) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer attempted to send the last available location, but none found", &v39, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v15);
    if (v16 == buf)
      return 0;
LABEL_22:
    free(v16);
    return 0;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(*(id *)(a1 + 128), "coordinate");
    v4 = v3;
    objc_msgSend(*(id *)(a1 + 128), "coordinate");
    v6 = v5;
    objc_msgSend(*(id *)(a1 + 128), "horizontalAccuracy");
    v8 = v7;
    v9 = sub_10014D1E0(objc_msgSend(*(id *)(a1 + 128), "type"));
    v10 = objc_msgSend(*(id *)(a1 + 128), "timestamp");
    *(_DWORD *)buf = 134284547;
    v50 = v4;
    v51 = 2049;
    v52 = v6;
    v53 = 2050;
    v54 = v8;
    v55 = 2082;
    v56 = v9;
    v57 = 2112;
    v58 = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#placeInfer last available location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{public}s, timestamp, %@", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v20 = qword_1022A01C8;
    objc_msgSend(*(id *)(a1 + 128), "coordinate");
    v22 = v21;
    objc_msgSend(*(id *)(a1 + 128), "coordinate");
    v24 = v23;
    objc_msgSend(*(id *)(a1 + 128), "horizontalAccuracy");
    v26 = v25;
    v27 = sub_10014D1E0(objc_msgSend(*(id *)(a1 + 128), "type"));
    v28 = objc_msgSend(*(id *)(a1 + 128), "timestamp");
    v39 = 134284547;
    v40 = v22;
    v41 = 2049;
    v42 = v24;
    v43 = 2050;
    v44 = v26;
    v45 = 2082;
    v46 = v27;
    v47 = 2112;
    v48 = v28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "#placeInfer last available location, lat, %{private}.8lf, lon, %{private}.8lf, horAcc, %{public}.1lf, type, %{public}s, timestamp, %@", &v39, 52);
    v30 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v29);
    if (v30 != buf)
      free(v30);
  }
  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "timestamp"), "compare:", *(_QWORD *)(a1 + 136)) != (id)-1)
  {
    v11 = objc_msgSend(objc_alloc((Class)_CLPlaceInference), "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:", 0, 2, 0, *(_QWORD *)(a1 + 128), 0, 0, 0.0);
    *(_QWORD *)(a1 + 224) = 4;
    v38 = v11;
    sub_100C42B84(a1, +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v38, 1), 0);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v12 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#placeInfer last available location sent!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v39) = 0;
      LODWORD(v37) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "#placeInfer last available location sent!", &v39, v37);
      v32 = (uint8_t *)v31;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v31);
      if (v32 != buf)
        free(v32);
    }
    return 1;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v17 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v18 = objc_msgSend(*(id *)(a1 + 128), "timestamp");
    v19 = *(_QWORD *)(a1 + 136);
    *(_DWORD *)buf = 138412546;
    v50 = v18;
    v51 = 2112;
    v52 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#placeInfer attempted to send the last available location, but it was stale - last location timestamp, %@, placeInference request timestamp, %@", buf, 0x16u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v33 = qword_1022A01C8;
    v34 = objc_msgSend(*(id *)(a1 + 128), "timestamp");
    v35 = *(_QWORD *)(a1 + 136);
    v39 = 138412546;
    v40 = v34;
    v41 = 2112;
    v42 = v35;
    LODWORD(v37) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 1, "#placeInfer attempted to send the last available location, but it was stale - last location timestamp, %@, placeInference request timestamp, %@", &v39, v37);
    v16 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLPlaceInferenceSubscription::sendLastLocation()", "%s\n", v36);
    if (v16 == buf)
      return 0;
    goto LABEL_22;
  }
  return result;
}

void sub_100C40258(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  const __CFString *v6;
  uint64_t v7;
  uint8_t buf[8];
  __int16 v9;
  const char *v10;

  if (*(_BYTE *)(a1 + 41))
  {
    v6 = CFSTR("kCLConnectionMessageError");
    v7 = a2;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v7, &v6, 1);
    sub_100C46A60(a1, buf);
    *(_BYTE *)(a1 + 41) = 0;
    objc_msgSend(*(id *)(a1 + 144), "horizontalAccuracy");
    *(_QWORD *)(a1 + 216) = v3;
    *(_DWORD *)(a1 + 240) = objc_msgSend(*(id *)(a1 + 144), "signalEnvironmentType");
    sub_100C46B00(a1);

    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
    }
    v5 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      v9 = 2082;
      v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Trying to send a result while the request is stopped", "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", buf, 0x12u);
    }
  }
}

id sub_100C40434(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t *v6;
  double v7;
  double v8;
  double v9;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  const __CFString *v22;
  double v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  id v30;
  int v31;
  unint64_t v32;
  double v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  NSObject *v38;
  id v39;
  int v40;
  double v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  NSObject *v46;
  id v47;
  int v48;
  char *v49;
  int v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  const char *v54;
  NSObject *v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  id v60;
  id v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  id v71;
  int v72;
  NSObject *v73;
  unsigned int v74;
  double v75;
  int v76;
  int v77;
  double v78;
  char *v79;
  int v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  char *v84;
  int v85;
  uint64_t v86;
  NSObject *v87;
  char *v88;
  int v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  id v108;
  id v109;
  id v110;
  id v111;
  NSObject *v112;
  uint64_t v113;
  double v114;
  NSObject *v115;
  id v116;
  int v117;
  id v118;
  double v119;
  double v120;
  const __CFDate *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  CFAbsoluteTime AbsoluteTime;
  id v128;
  id v129;
  double v130;
  double v131;
  id v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  id v144;
  id v145;
  id v146;
  id v147;
  id v148;
  double v149;
  id v150;
  uint64_t v151;
  char *v152;
  int v153;
  uint64_t v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  double v159;
  const char *v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  const char *v165;
  uint8_t *v166;
  uint64_t v167;
  const char *v168;
  uint8_t *v169;
  uint64_t v170;
  uint64_t v171;
  double v172;
  const char *v173;
  uint8_t *v174;
  uint64_t v175;
  const char *v176;
  uint8_t *v177;
  uint64_t v178;
  uint8_t *v179;
  uint64_t v180;
  double v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  double v185;
  double v186;
  double v187;
  double v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint8_t *v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  uint8_t *v199;
  uint64_t v200;
  const char *v201;
  uint8_t *v202;
  uint64_t v203;
  double v204;
  double v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  double v209;
  double v210;
  double v211;
  uint64_t v212;
  const char *v213;
  uint8_t *v214;
  id v215;
  NSObject *v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  double v220;
  NSObject *v221;
  id v222;
  int v223;
  char *v224;
  int v225;
  uint64_t v226;
  NSObject *v227;
  uint64_t v229;
  uint64_t v230;
  double v231;
  const char *v232;
  uint8_t *v233;
  const char *v234;
  uint8_t *v235;
  const char *v236;
  uint8_t *v237;
  uint64_t v238;
  double v239;
  double v240;
  __int128 v241;
  id v242;
  id v243;
  id v244;
  id v245;
  id v246;
  id v247;
  id v248;
  id v249;
  id v250;
  id v251;
  id v252;
  id v253;
  id v254;
  uint64_t v255;
  id v256;
  id v257;
  uint64_t v258;
  id v259;
  id v260;
  id v261;
  void *v262;
  id obj;
  uint64_t v265;
  id v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  int v271;
  double v272;
  __int16 v273;
  uint64_t v274;
  __int16 v275;
  double v276;
  __int16 v277;
  double v278;
  __int16 v279;
  _BYTE v280[10];
  _BYTE v281[10];
  double v282;
  __int16 v283;
  uint64_t v284;
  __int16 v285;
  double v286;
  uint8_t buf[4];
  _BYTE v288[140];
  uint64_t v289;
  char v290;
  _BYTE v291[128];

  *(_QWORD *)(a1 + 48) = 0xBFF0000000000000;
  v242 = +[NSMutableArray array](NSMutableArray, "array");
  v267 = 0u;
  v268 = 0u;
  v269 = 0u;
  v270 = 0u;
  obj = a2;
  v266 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v267, v291, 16);
  if (!v266)
    return v242;
  v265 = *(_QWORD *)v268;
  v5 = 2;
  v6 = &qword_1022A0000;
  v7 = 65.0;
  v8 = 0.85;
  v9 = 20.0;
  __asm { FMOV            V0.2D, #-1.0 }
  v241 = _Q0;
  while (2)
  {
    v15 = 0;
    do
    {
      if (*(_QWORD *)v268 != v265)
        objc_enumerationMutation(obj);
      v16 = *(void **)(*((_QWORD *)&v267 + 1) + 8 * (_QWORD)v15);
      v17 = sub_100C46424((unint64_t)objc_msgSend(v16, "userType"));
      v18 = sub_100C465B4((unint64_t)objc_msgSend(v16, "placeType"));
      v19 = objc_msgSend(v16, "userTypeSource");
      v20 = +[NSMutableArray array](NSMutableArray, "array");
      v21 = v20;
      if (!v19)
      {
        v22 = CFSTR("Unknown");
LABEL_14:
        objc_msgSend(v21, "addObject:", v22);
        goto LABEL_15;
      }
      if ((v19 & 1) != 0)
        objc_msgSend(v20, "addObject:", CFSTR("Inferred"));
      if ((v19 & 2) != 0)
        objc_msgSend(v21, "addObject:", CFSTR("MeCard"));
      v22 = CFSTR("User");
      if ((v19 & 4) != 0)
        goto LABEL_14;
LABEL_15:
      if (objc_msgSend(v21, "count", v22))
        v23 = COERCE_DOUBLE(objc_msgSend(v21, "componentsJoinedByString:", CFSTR(", ")));
      else
        v23 = 0.0;
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217B5A8);
      v24 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)v288 = 0;
        *(_WORD *)&v288[4] = 2082;
        *(_QWORD *)&v288[6] = "";
        *(_WORD *)&v288[14] = 1026;
        *(_DWORD *)&v288[16] = v17;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa userType\", \"userType\":%{public}d}", buf, 0x18u);
      }
      *(_QWORD *)(a1 + 324) = v5;
      *(_DWORD *)(a1 + 520) = 0;
      LOBYTE(v25) = 0;
      if ((objc_msgSend(v16, "userTypeSource") & 1) != 0
        && (v32 = (unint64_t)objc_msgSend(v16, "userTypeSource"), v25 = (v32 >> 1) & 1, v17)
        && (v32 & 2) != 0)
      {
        objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
        if (v33 <= v7)
        {
          objc_msgSend(v16, "confidence");
          if (v41 >= v8)
          {
            objc_msgSend(v16, "confidence");
            v58 = fabs((v57 - *(double *)(a1 + 48)) * 100.0);
            if (v58 <= v9)
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_10217B5A8);
              v216 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend(v16, "confidence");
                v217 = *(_QWORD *)(a1 + 48);
                *(_DWORD *)buf = 134350082;
                *(_QWORD *)v288 = v218;
                *(_WORD *)&v288[8] = 2050;
                *(_QWORD *)&v288[10] = v217;
                *(_WORD *)&v288[18] = 2050;
                *(double *)&v288[20] = v58;
                *(_WORD *)&v288[28] = 2114;
                *(double *)&v288[30] = v23;
                *(_WORD *)&v288[38] = 1024;
                *(_DWORD *)&v288[40] = v17;
                _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "#dsa zone of confusion,dropping dsa,current confidence,%{public}.2f,last confidence,%{public}.2f,confidenceinpercent,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x30u);
              }
              v219 = v242;
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                v229 = qword_1022A0088;
                objc_msgSend(v16, "confidence");
                v230 = *(_QWORD *)(a1 + 48);
                v271 = 134350082;
                v272 = v231;
                v273 = 2050;
                v274 = v230;
                v275 = 2050;
                v276 = v58;
                v277 = 2114;
                v278 = v23;
                v279 = 1024;
                *(_DWORD *)v280 = v17;
                LODWORD(v238) = 48;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v229, 0, "#dsa zone of confusion,dropping dsa,current confidence,%{public}.2f,last confidence,%{public}.2f,confidenceinpercent,%{public}.2f,loisource,%{public}@,userType,%d", &v271, v238);
                v233 = (uint8_t *)v232;
                sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v232);
                if (v233 != buf)
                  free(v233);
                v219 = v242;
              }
              if (!*(_DWORD *)(a1 + 520))
              {
                *(_QWORD *)(a1 + 528) = objc_msgSend(v16, "userTypeSource");
                *(_QWORD *)(a1 + 536) = objc_msgSend(v16, "userType");
                objc_msgSend(v16, "confidence");
                *(float *)&v220 = v220;
                *(_DWORD *)(a1 + 552) = LODWORD(v220);
                *(_DWORD *)(a1 + 520) = 7;
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10217B588);
                v221 = v6[57];
                if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v221, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorPlacemarkUnavailable", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_10217B588);
                  v6 = &qword_1022A0000;
                  LOWORD(v271) = 0;
                  LODWORD(v238) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#era CA result - kERAResultErrorPlacemarkUnavailable", &v271, v238);
                  v235 = (uint8_t *)v234;
                  sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v234);
                  if (v235 != buf)
                    free(v235);
                  v219 = v242;
                }
              }
              if (!*(_DWORD *)(a1 + 328))
              {
                v222 = objc_msgSend(v16, "userTypeSource");
                if (v222)
                {
                  if ((v222 & 2) != 0)
                  {
                    v223 = 2;
                  }
                  else if ((v222 & 1) != 0)
                  {
                    v223 = 3;
                  }
                  else if ((v222 & 4) != 0)
                  {
                    v223 = 6;
                  }
                  else
                  {
                    v223 = 0;
                  }
                }
                else
                {
                  v223 = 0;
                }
                *(_DWORD *)(a1 + 292) = v223;
                v224 = (char *)objc_msgSend(v16, "userType");
                if ((unint64_t)(v224 - 1) < 4)
                  v225 = (int)v224;
                else
                  v225 = 0;
                *(_DWORD *)(a1 + 296) = v225;
                objc_msgSend(v16, "confidence");
                *(_QWORD *)(a1 + 344) = v226;
                *(_DWORD *)(a1 + 328) = 7;
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10217B588);
                v227 = v6[57];
                if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v227, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_10217B588);
                  LOWORD(v271) = 0;
                  LODWORD(v238) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa AWD result - kDSAResultErrorPlacemarkUnavailable", &v271, v238);
                  v237 = (uint8_t *)v236;
                  sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v236);
                  if (v237 != buf)
                    free(v237);
                  v219 = v242;
                }
              }
              objc_msgSend(v219, "removeAllObjects");
              return v242;
            }
            objc_msgSend(v16, "confidence");
            if (v59 <= *(double *)(a1 + 48))
            {
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_10217B5A8);
              v73 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
              {
                v74 = objc_msgSend(v16, "userType");
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                v76 = (int)v75;
                objc_msgSend(v16, "confidence");
                v77 = (int)*(double *)(a1 + 48);
                *(_DWORD *)buf = 68290306;
                *(_DWORD *)v288 = 0;
                *(_WORD *)&v288[4] = 2082;
                *(_QWORD *)&v288[6] = "";
                *(_WORD *)&v288[14] = 1026;
                *(_DWORD *)&v288[16] = v74;
                *(_WORD *)&v288[20] = 2114;
                *(double *)&v288[22] = v23;
                *(_WORD *)&v288[30] = 1026;
                *(_DWORD *)&v288[32] = v76;
                *(_WORD *)&v288[36] = 1026;
                *(_DWORD *)&v288[38] = (int)v78;
                *(_WORD *)&v288[42] = 1026;
                *(_DWORD *)&v288[44] = v77;
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa confidence do not meet the emergency case requirement\", \"userType\":%{public}d, \"userTypeSource\":%{public, location:escape_only}@, \"hunc\":%{public}d, \"confidence\":%{public}d, \"lastconfidence\":%{public}d}", buf, 0x34u);
              }
            }
            else
            {
              v60 = sub_100C46754(objc_msgSend(objc_msgSend(v16, "mapItem"), "location"));
              v261 = sub_100C46754(objc_msgSend(v16, "referenceLocation"));
              v61 = sub_100C4683C(objc_msgSend(v16, "mapItem"), (uint64_t)v60);
              objc_msgSend(objc_msgSend(v61, "location"), "coordinate");
              v63 = v62;
              v262 = v61;
              objc_msgSend(objc_msgSend(v61, "location"), "coordinate");
              v65 = v64;
              objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
              v67 = v66;
              objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
              v69 = sub_10011E634((double *)(a1 + 608), v63, v65, v67, v68, 0.0);
              *(_QWORD *)(a1 + 528) = objc_msgSend(v16, "userTypeSource");
              *(_QWORD *)(a1 + 536) = objc_msgSend(v16, "userType");
              objc_msgSend(v16, "confidence");
              *(float *)&v70 = v70;
              *(_DWORD *)(a1 + 552) = LODWORD(v70);
              *(_DWORD *)(a1 + 560) = (int)v69;
              v71 = objc_msgSend(v16, "userTypeSource");
              if (v71)
              {
                if ((v71 & 2) != 0)
                {
                  v72 = 2;
                }
                else if ((v71 & 1) != 0)
                {
                  v72 = 3;
                }
                else if ((v71 & 4) != 0)
                {
                  v72 = 6;
                }
                else
                {
                  v72 = 0;
                }
              }
              else
              {
                v72 = 0;
              }
              *(_DWORD *)(a1 + 292) = v72;
              v88 = (char *)objc_msgSend(v16, "userType");
              if ((unint64_t)(v88 - 1) < 4)
                v89 = (int)v88;
              else
                v89 = 0;
              *(_DWORD *)(a1 + 296) = v89;
              objc_msgSend(v16, "confidence");
              *(_QWORD *)(a1 + 344) = v90;
              *(_DWORD *)(a1 + 356) = (int)v69;
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_10217B5A8);
              v91 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
              {
                objc_msgSend(objc_msgSend(v262, "location"), "coordinate");
                v258 = v92;
                objc_msgSend(objc_msgSend(v262, "location"), "coordinate");
                v255 = v93;
                objc_msgSend(objc_msgSend(v262, "location"), "horizontalAccuracy");
                v95 = v94;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                v97 = v96;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                v98 = v69;
                v99 = v7;
                v101 = v100;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                v102 = v5;
                v103 = v8;
                v105 = v104;
                objc_msgSend(v16, "confidence");
                *(_DWORD *)buf = 134285571;
                *(_QWORD *)v288 = v258;
                *(_WORD *)&v288[8] = 2049;
                *(_QWORD *)&v288[10] = v255;
                *(_WORD *)&v288[18] = 2050;
                *(_QWORD *)&v288[20] = v95;
                *(_WORD *)&v288[28] = 2049;
                *(_QWORD *)&v288[30] = v97;
                v9 = 20.0;
                *(_WORD *)&v288[38] = 2049;
                *(_QWORD *)&v288[40] = v101;
                v7 = v99;
                v69 = v98;
                *(_WORD *)&v288[48] = 2050;
                *(_QWORD *)&v288[50] = v105;
                v8 = v103;
                v5 = v102;
                *(_WORD *)&v288[58] = 2050;
                *(double *)&v288[60] = v98;
                *(_WORD *)&v288[68] = 2050;
                *(_QWORD *)&v288[70] = v106;
                *(_WORD *)&v288[78] = 2114;
                *(double *)&v288[80] = v23;
                _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#dsa mapitem's geodetic location ,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f, currentlat,%{private}.7f,currentlon,%{private}.7f,currentacc,%{public}.2f,dist,%{public}.2f, currconf,%{public}.2f,loisource,%{public}@", buf, 0x5Cu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                v239 = v8;
                v240 = v7;
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                v180 = qword_1022A0088;
                objc_msgSend(objc_msgSend(v262, "location"), "coordinate");
                v182 = v181;
                objc_msgSend(objc_msgSend(v262, "location"), "coordinate");
                v184 = v183;
                objc_msgSend(objc_msgSend(v262, "location"), "horizontalAccuracy");
                v186 = v185;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                v188 = v187;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
                v190 = v189;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                v192 = v191;
                objc_msgSend(v16, "confidence");
                v271 = 134285571;
                v272 = v182;
                v273 = 2049;
                v274 = v184;
                v275 = 2050;
                v276 = v186;
                v277 = 2049;
                v278 = v188;
                v279 = 2049;
                *(_QWORD *)v280 = v190;
                *(_WORD *)&v280[8] = 2050;
                *(_QWORD *)v281 = v192;
                *(_WORD *)&v281[8] = 2050;
                v282 = v69;
                v283 = 2050;
                v284 = v193;
                v285 = 2114;
                v286 = v23;
                LODWORD(v238) = 92;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v180, 0, "#dsa mapitem's geodetic location ,lat,%{private}.7f,lon,%{private}.7f,acc,%{public}.2f, currentlat,%{private}.7f,currentlon,%{private}.7f,currentacc,%{public}.2f,dist,%{public}.2f, currconf,%{public}.2f,loisource,%{public}@", &v271, v238);
                v195 = (uint8_t *)v194;
                sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v194);
                if (v195 != buf)
                  free(v195);
                v8 = v239;
                v7 = v240;
                v9 = 20.0;
              }
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_10217B5A8);
              v107 = qword_1022A0088;
              if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
              {
                v259 = objc_msgSend(objc_msgSend(v262, "name"), "UTF8String");
                v256 = objc_msgSend(objc_msgSend(v262, "thoroughfare"), "UTF8String");
                v253 = objc_msgSend(objc_msgSend(v262, "subThoroughfare"), "UTF8String");
                v251 = objc_msgSend(objc_msgSend(v262, "locality"), "UTF8String");
                v249 = objc_msgSend(objc_msgSend(v262, "subLocality"), "UTF8String");
                v247 = objc_msgSend(objc_msgSend(v262, "administrativeArea"), "UTF8String");
                v245 = objc_msgSend(objc_msgSend(v262, "subAdministrativeArea"), "UTF8String");
                v243 = objc_msgSend(objc_msgSend(v262, "postalCode"), "UTF8String");
                v108 = objc_msgSend(objc_msgSend(v262, "ISOcountryCode"), "UTF8String");
                v109 = objc_msgSend(objc_msgSend(v262, "country"), "UTF8String");
                v110 = objc_msgSend(objc_msgSend(v262, "inlandWater"), "UTF8String");
                v111 = objc_msgSend(objc_msgSend(v262, "ocean"), "UTF8String");
                *(_DWORD *)buf = 68292099;
                *(_DWORD *)v288 = 0;
                *(_WORD *)&v288[4] = 2082;
                *(_QWORD *)&v288[6] = "";
                *(_WORD *)&v288[14] = 2081;
                *(_QWORD *)&v288[16] = v259;
                *(_WORD *)&v288[24] = 2081;
                *(_QWORD *)&v288[26] = v256;
                *(_WORD *)&v288[34] = 2081;
                *(_QWORD *)&v288[36] = v253;
                *(_WORD *)&v288[44] = 2081;
                *(_QWORD *)&v288[46] = v251;
                *(_WORD *)&v288[54] = 2081;
                *(_QWORD *)&v288[56] = v249;
                *(_WORD *)&v288[64] = 2081;
                *(_QWORD *)&v288[66] = v247;
                *(_WORD *)&v288[74] = 2081;
                *(_QWORD *)&v288[76] = v245;
                *(_WORD *)&v288[84] = 2081;
                *(_QWORD *)&v288[86] = v243;
                *(_WORD *)&v288[94] = 2081;
                *(_QWORD *)&v288[96] = v108;
                *(_WORD *)&v288[104] = 2081;
                *(_QWORD *)&v288[106] = v109;
                *(_WORD *)&v288[114] = 2081;
                *(_QWORD *)&v288[116] = v110;
                v6 = &qword_1022A0000;
                *(_WORD *)&v288[124] = 2081;
                *(_QWORD *)&v288[126] = v111;
                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,received infered place address from coreroutine\", \"name\":%{private, location:escape_only}s, \"thoroughfare\":%{private, location:escape_only}s, \"subThoroughfare\":%{private, location:escape_only}s, \"locality\":%{private, location:escape_only}s, \"subLocality\":%{private, location:escape_only}s, \"administrativeArea\":%{private, location:escape_only}s, \"subAdministrativeArea\":%{private, location:escape_only}s, \"postalCode\":%{private, location:escape_only}s, \"ISOcountryCode\":%{private, location:escape_only}s, \"country\":%{private, location:escape_only}s, \"inlandWater\":%{private, location:escape_only}s, \"ocean\":%{private, location:escape_only}s}", buf, 0x8Au);
              }
              if (v69 <= 50.0)
              {
                objc_msgSend(v16, "mapItem");
                v118 = objc_msgSend(objc_msgSend(v16, "mapItem"), "location");
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                v120 = v119;
                v121 = (const __CFDate *)objc_msgSend(objc_msgSend(a3, "lastObject"), "timestamp");
                memset(&v288[92], 0, 20);
                *(_QWORD *)&v288[132] = 0;
                v289 = 0;
                v290 = 0;
                objc_msgSend(v118, "latitude");
                v123 = v122;
                objc_msgSend(v118, "longitude");
                v125 = v124;
                v126 = v69 + v120;
                AbsoluteTime = CFDateGetAbsoluteTime(v121);
                LODWORD(v118) = objc_msgSend(v118, "referenceFrame");
                v128 = objc_alloc((Class)CLLocation);
                *(_QWORD *)v288 = v123;
                *(_QWORD *)&v288[8] = v125;
                *(double *)&v288[16] = v126;
                *(_OWORD *)&v288[24] = xmmword_101BAFEE0;
                *(_OWORD *)&v288[40] = v241;
                *(_OWORD *)&v288[56] = v241;
                *(CFAbsoluteTime *)&v288[72] = AbsoluteTime;
                *(_DWORD *)buf = 0xFFFF;
                *(_DWORD *)&v288[80] = 0;
                *(_QWORD *)&v288[84] = 0xBFF0000000000000;
                *(_QWORD *)&v288[112] = 0xBFF0000000000000;
                *(_QWORD *)&v288[120] = 0x7FFFFFFFLL;
                *(_DWORD *)&v288[128] = (_DWORD)v118;
                v129 = objc_msgSend(v128, "initWithClientLocation:", buf);
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                *(double *)(a1 + 360) = v69 + v130;
                objc_msgSend(objc_msgSend(a3, "lastObject"), "horizontalAccuracy");
                *(float *)&v131 = v69 + v131;
                *(_DWORD *)(a1 + 564) = LODWORD(v131);
                v132 = sub_100C4683C(objc_msgSend(v16, "mapItem"), (uint64_t)v129);
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                v9 = 20.0;
                v133 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend(objc_msgSend(v132, "location"), "coordinate");
                  v135 = v134;
                  objc_msgSend(objc_msgSend(v132, "location"), "coordinate");
                  v137 = v136;
                  objc_msgSend(objc_msgSend(v132, "location"), "horizontalAccuracy");
                  v139 = v138;
                  objc_msgSend(objc_msgSend(v262, "location"), "horizontalAccuracy");
                  v141 = v140;
                  objc_msgSend(v16, "confidence");
                  *(_DWORD *)buf = 134285057;
                  *(_QWORD *)v288 = v135;
                  *(_WORD *)&v288[8] = 2049;
                  *(_QWORD *)&v288[10] = v137;
                  *(_WORD *)&v288[18] = 2050;
                  *(_QWORD *)&v288[20] = v139;
                  *(_WORD *)&v288[28] = 2050;
                  *(_QWORD *)&v288[30] = v141;
                  *(_WORD *)&v288[38] = 1026;
                  *(_DWORD *)&v288[40] = v17;
                  *(_WORD *)&v288[44] = 1026;
                  *(_DWORD *)&v288[46] = v18;
                  *(_WORD *)&v288[50] = 2050;
                  *(_QWORD *)&v288[52] = v142;
                  _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "#dsa updated mapItem after cross-check ,maplat,%{private}.7f,maplon,%{private}.7f,updatedacc,%{public}.2f,origacc,%{public}.2f, usertype,%{public}d, placeType,%{public}d,inferredconf,%{public}.2f", buf, 0x40u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0080 != -1)
                    dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                  v203 = qword_1022A0088;
                  objc_msgSend(objc_msgSend(v132, "location"), "coordinate");
                  v205 = v204;
                  objc_msgSend(objc_msgSend(v132, "location"), "coordinate");
                  v207 = v206;
                  objc_msgSend(objc_msgSend(v132, "location"), "horizontalAccuracy");
                  v209 = v208;
                  objc_msgSend(objc_msgSend(v262, "location"), "horizontalAccuracy");
                  v211 = v210;
                  objc_msgSend(v16, "confidence");
                  v271 = 134285057;
                  v272 = v205;
                  v273 = 2049;
                  v274 = v207;
                  v275 = 2050;
                  v276 = v209;
                  v277 = 2050;
                  v278 = v211;
                  v279 = 1026;
                  *(_DWORD *)v280 = v17;
                  *(_WORD *)&v280[4] = 1026;
                  *(_DWORD *)&v280[6] = v18;
                  *(_WORD *)v281 = 2050;
                  *(_QWORD *)&v281[2] = v212;
                  LODWORD(v238) = 64;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v203, 0, "#dsa updated mapItem after cross-check ,maplat,%{private}.7f,maplon,%{private}.7f,updatedacc,%{public}.2f,origacc,%{public}.2f, usertype,%{public}d, placeType,%{public}d,inferredconf,%{public}.2f", &v271, v238);
                  v214 = (uint8_t *)v213;
                  sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v213);
                  if (v214 != buf)
                    free(v214);
                }
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                v143 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  v260 = objc_msgSend(objc_msgSend(v132, "name"), "UTF8String");
                  v257 = objc_msgSend(objc_msgSend(v132, "thoroughfare"), "UTF8String");
                  v254 = objc_msgSend(objc_msgSend(v132, "subThoroughfare"), "UTF8String");
                  v252 = objc_msgSend(objc_msgSend(v132, "locality"), "UTF8String");
                  v250 = objc_msgSend(objc_msgSend(v132, "subLocality"), "UTF8String");
                  v248 = objc_msgSend(objc_msgSend(v132, "administrativeArea"), "UTF8String");
                  v246 = objc_msgSend(objc_msgSend(v132, "subAdministrativeArea"), "UTF8String");
                  v244 = objc_msgSend(objc_msgSend(v132, "postalCode"), "UTF8String");
                  v144 = objc_msgSend(objc_msgSend(v132, "ISOcountryCode"), "UTF8String");
                  v145 = objc_msgSend(objc_msgSend(v132, "country"), "UTF8String");
                  v146 = objc_msgSend(objc_msgSend(v262, "inlandWater"), "UTF8String");
                  v147 = objc_msgSend(objc_msgSend(v132, "ocean"), "UTF8String");
                  *(_DWORD *)buf = 68292099;
                  *(_DWORD *)v288 = 0;
                  *(_WORD *)&v288[4] = 2082;
                  *(_QWORD *)&v288[6] = "";
                  *(_WORD *)&v288[14] = 2081;
                  *(_QWORD *)&v288[16] = v260;
                  *(_WORD *)&v288[24] = 2081;
                  *(_QWORD *)&v288[26] = v257;
                  *(_WORD *)&v288[34] = 2081;
                  *(_QWORD *)&v288[36] = v254;
                  *(_WORD *)&v288[44] = 2081;
                  *(_QWORD *)&v288[46] = v252;
                  *(_WORD *)&v288[54] = 2081;
                  *(_QWORD *)&v288[56] = v250;
                  *(_WORD *)&v288[64] = 2081;
                  *(_QWORD *)&v288[66] = v248;
                  *(_WORD *)&v288[74] = 2081;
                  *(_QWORD *)&v288[76] = v246;
                  *(_WORD *)&v288[84] = 2081;
                  *(_QWORD *)&v288[86] = v244;
                  *(_WORD *)&v288[94] = 2081;
                  *(_QWORD *)&v288[96] = v144;
                  *(_WORD *)&v288[104] = 2081;
                  *(_QWORD *)&v288[106] = v145;
                  *(_WORD *)&v288[114] = 2081;
                  *(_QWORD *)&v288[116] = v146;
                  v6 = &qword_1022A0000;
                  *(_WORD *)&v288[124] = 2081;
                  *(_QWORD *)&v288[126] = v147;
                  _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,sending infered place address to client\", \"name\":%{private, location:escape_only}s, \"thoroughfare\":%{private, location:escape_only}s, \"subThoroughfare\":%{private, location:escape_only}s, \"locality\":%{private, location:escape_only}s, \"subLocality\":%{private, location:escape_only}s, \"administrativeArea\":%{private, location:escape_only}s, \"subAdministrativeArea\":%{private, location:escape_only}s, \"postalCode\":%{private, location:escape_only}s, \"ISOcountryCode\":%{private, location:escape_only}s, \"country\":%{private, location:escape_only}s, \"inlandWater\":%{private, location:escape_only}s, \"ocean\":%{private, location:escape_only}s}", buf, 0x8Au);
                }
                v148 = objc_alloc((Class)_CLPlaceInference);
                objc_msgSend(v16, "confidence");
                v150 = objc_msgSend(v148, "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:", v17, v18, v132, v261, objc_msgSend(v16, "preferredName"), objc_msgSend(v16, "loiIdentifier"), v149);
                if (objc_msgSend(v242, "count"))
                  objc_msgSend(v242, "removeAllObjects");
                objc_msgSend(v16, "confidence");
                *(_QWORD *)(a1 + 48) = v151;
                objc_msgSend(v242, "addObject:", v150);
              }
              else
              {
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                v112 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  objc_msgSend(v16, "confidence");
                  *(_DWORD *)buf = 134349312;
                  *(double *)v288 = v69;
                  *(_WORD *)&v288[8] = 2050;
                  *(_QWORD *)&v288[10] = v113;
                  _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "#dsa did not meet the emergecy confidence and distance requirement,distance,%{public}.2f,confidence,%{public}.2f", buf, 0x16u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0080 != -1)
                    dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                  v196 = qword_1022A0088;
                  objc_msgSend(v16, "confidence");
                  v271 = 134349312;
                  v272 = v69;
                  v273 = 2050;
                  v274 = v197;
                  LODWORD(v238) = 22;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v196, 0, "#dsa did not meet the emergecy confidence and distance requirement,distance,%{public}.2f,confidence,%{public}.2f", &v271, v238);
                  v199 = (uint8_t *)v198;
                  sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v198);
                  if (v199 != buf)
                    free(v199);
                }
                *(_QWORD *)(a1 + 528) = objc_msgSend(v16, "userTypeSource");
                *(_QWORD *)(a1 + 536) = objc_msgSend(v16, "userType");
                objc_msgSend(v16, "confidence");
                *(float *)&v114 = v114;
                *(_DWORD *)(a1 + 552) = LODWORD(v114);
                *(_DWORD *)(a1 + 520) = 4;
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10217B588);
                v115 = v6[57];
                if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorDistanceCheck", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_10217B588);
                  v200 = v6[57];
                  LOWORD(v271) = 0;
                  LODWORD(v238) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v200, 0, "#era CA result - kERAResultErrorDistanceCheck", &v271, v238);
                  v202 = (uint8_t *)v201;
                  sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v201);
                  if (v202 != buf)
                    free(v202);
                }
                v116 = objc_msgSend(v16, "userTypeSource");
                if (v116)
                {
                  if ((v116 & 2) != 0)
                  {
                    v117 = 2;
                  }
                  else if ((v116 & 1) != 0)
                  {
                    v117 = 3;
                  }
                  else if ((v116 & 4) != 0)
                  {
                    v117 = 6;
                  }
                  else
                  {
                    v117 = 0;
                  }
                }
                else
                {
                  v117 = 0;
                }
                *(_DWORD *)(a1 + 292) = v117;
                v152 = (char *)objc_msgSend(v16, "userType");
                if ((unint64_t)(v152 - 1) < 4)
                  v153 = (int)v152;
                else
                  v153 = 0;
                *(_DWORD *)(a1 + 296) = v153;
                objc_msgSend(v16, "confidence");
                *(_QWORD *)(a1 + 344) = v154;
                *(_DWORD *)(a1 + 328) = 4;
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10217B588);
                v155 = v6[57];
                if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorDistanceCheck", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_10217B588);
                  v156 = v6[57];
                  LOWORD(v271) = 0;
                  LODWORD(v238) = 2;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v156, 0, "#dsa AWD result - kDSAResultErrorDistanceCheck", &v271, v238);
                  goto LABEL_214;
                }
              }
            }
          }
          else
          {
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10217B5A8);
            v42 = qword_1022A0088;
            if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
            {
              objc_msgSend(v16, "confidence");
              v43 = *(_QWORD *)(a1 + 48);
              *(_DWORD *)buf = 134349826;
              *(_QWORD *)v288 = v44;
              *(_WORD *)&v288[8] = 2050;
              *(_QWORD *)&v288[10] = v43;
              *(_WORD *)&v288[18] = 2114;
              *(double *)&v288[20] = v23;
              *(_WORD *)&v288[28] = 1024;
              *(_DWORD *)&v288[30] = v17;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#dsa invalid confidence, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x26u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0080 != -1)
                dispatch_once(&qword_1022A0080, &stru_10217B5A8);
              v170 = qword_1022A0088;
              objc_msgSend(v16, "confidence");
              v171 = *(_QWORD *)(a1 + 48);
              v271 = 134349826;
              v272 = v172;
              v273 = 2050;
              v274 = v171;
              v275 = 2114;
              v276 = v23;
              v277 = 1024;
              LODWORD(v278) = v17;
              LODWORD(v238) = 38;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v170, 0, "#dsa invalid confidence, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", &v271, v238);
              v174 = (uint8_t *)v173;
              sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v173);
              if (v174 != buf)
                free(v174);
            }
            *(_QWORD *)(a1 + 528) = objc_msgSend(v16, "userTypeSource");
            *(_QWORD *)(a1 + 536) = objc_msgSend(v16, "userType");
            objc_msgSend(v16, "confidence");
            *(float *)&v45 = v45;
            *(_DWORD *)(a1 + 552) = LODWORD(v45);
            *(_DWORD *)(a1 + 520) = 2;
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v46 = v6[57];
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#era CA result - invalid hunc kERAResultErrorConfidenceCheck", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10217B588);
              v175 = v6[57];
              LOWORD(v271) = 0;
              LODWORD(v238) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v175, 0, "#era CA result - invalid hunc kERAResultErrorConfidenceCheck", &v271, v238);
              v177 = (uint8_t *)v176;
              sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v176);
              if (v177 != buf)
                free(v177);
            }
            v47 = objc_msgSend(v16, "userTypeSource");
            if (v47)
            {
              if ((v47 & 2) != 0)
              {
                v48 = 2;
              }
              else if ((v47 & 1) != 0)
              {
                v48 = 3;
              }
              else if ((v47 & 4) != 0)
              {
                v48 = 6;
              }
              else
              {
                v48 = 0;
              }
            }
            else
            {
              v48 = 0;
            }
            *(_DWORD *)(a1 + 292) = v48;
            v84 = (char *)objc_msgSend(v16, "userType");
            if ((unint64_t)(v84 - 1) < 4)
              v85 = (int)v84;
            else
              v85 = 0;
            *(_DWORD *)(a1 + 296) = v85;
            objc_msgSend(v16, "confidence");
            *(_QWORD *)(a1 + 344) = v86;
            *(_DWORD *)(a1 + 328) = 2;
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v87 = v6[57];
            if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorConfidenceCheck", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10217B588);
              v178 = v6[57];
              LOWORD(v271) = 0;
              LODWORD(v238) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v178, 0, "#dsa AWD result - kDSAResultErrorConfidenceCheck", &v271, v238);
              goto LABEL_214;
            }
          }
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10217B5A8);
          v34 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v16, "confidence");
            v35 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 134349826;
            *(_QWORD *)v288 = v36;
            *(_WORD *)&v288[8] = 2050;
            *(_QWORD *)&v288[10] = v35;
            *(_WORD *)&v288[18] = 2114;
            *(double *)&v288[20] = v23;
            *(_WORD *)&v288[28] = 1024;
            *(_DWORD *)&v288[30] = v17;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#dsa invalid hunc, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x26u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10217B5A8);
            v162 = qword_1022A0088;
            objc_msgSend(v16, "confidence");
            v163 = *(_QWORD *)(a1 + 48);
            v271 = 134349826;
            v272 = v164;
            v273 = 2050;
            v274 = v163;
            v275 = 2114;
            v276 = v23;
            v277 = 1024;
            LODWORD(v278) = v17;
            LODWORD(v238) = 38;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v162, 0, "#dsa invalid hunc, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", &v271, v238);
            v166 = (uint8_t *)v165;
            sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v165);
            if (v166 != buf)
              free(v166);
          }
          *(_QWORD *)(a1 + 528) = objc_msgSend(v16, "userTypeSource");
          *(_QWORD *)(a1 + 536) = objc_msgSend(v16, "userType");
          objc_msgSend(v16, "confidence");
          *(float *)&v37 = v37;
          *(_DWORD *)(a1 + 552) = LODWORD(v37);
          *(_DWORD *)(a1 + 520) = 7;
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          v38 = v6[57];
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#era CA result - invalid hunc KERAResultErrorPlacemarkUnavailable", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v167 = v6[57];
            LOWORD(v271) = 0;
            LODWORD(v238) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v167, 0, "#era CA result - invalid hunc KERAResultErrorPlacemarkUnavailable", &v271, v238);
            v169 = (uint8_t *)v168;
            sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v168);
            if (v169 != buf)
              free(v169);
          }
          v39 = objc_msgSend(v16, "userTypeSource");
          if (v39)
          {
            if ((v39 & 2) != 0)
            {
              v40 = 2;
            }
            else if ((v39 & 1) != 0)
            {
              v40 = 3;
            }
            else if ((v39 & 4) != 0)
            {
              v40 = 6;
            }
            else
            {
              v40 = 0;
            }
          }
          else
          {
            v40 = 0;
          }
          *(_DWORD *)(a1 + 292) = v40;
          v79 = (char *)objc_msgSend(v16, "userType");
          if ((unint64_t)(v79 - 1) < 4)
            v80 = (int)v79;
          else
            v80 = 0;
          *(_DWORD *)(a1 + 296) = v80;
          objc_msgSend(v16, "confidence");
          *(_QWORD *)(a1 + 344) = v81;
          *(_DWORD *)(a1 + 328) = 7;
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          v82 = v6[57];
          if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - invalid hunc kDSAResultErrorPlacemarkUnavailable", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v83 = v6[57];
            LOWORD(v271) = 0;
            LODWORD(v238) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 0, "#dsa AWD result - invalid hunc kDSAResultErrorPlacemarkUnavailable", &v271, v238);
LABEL_214:
            v179 = (uint8_t *)v54;
            sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v54);
            if (v179 != buf)
              free(v179);
          }
        }
      }
      else
      {
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10217B5A8);
        v26 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v16, "confidence");
          v27 = *(_QWORD *)(a1 + 48);
          *(_DWORD *)buf = 134349826;
          *(_QWORD *)v288 = v28;
          *(_WORD *)&v288[8] = 2050;
          *(_QWORD *)&v288[10] = v27;
          *(_WORD *)&v288[18] = 2114;
          *(double *)&v288[20] = v23;
          *(_WORD *)&v288[28] = 1024;
          *(_DWORD *)&v288[30] = v17;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#dsa invalid usertype and sourcetype, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10217B5A8);
          v157 = qword_1022A0088;
          objc_msgSend(v16, "confidence");
          v158 = *(_QWORD *)(a1 + 48);
          v271 = 134349826;
          v272 = v159;
          v273 = 2050;
          v274 = v158;
          v275 = 2114;
          v276 = v23;
          v277 = 1024;
          LODWORD(v278) = v17;
          LODWORD(v238) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v157, 0, "#dsa invalid usertype and sourcetype, confidence,%{public}.2f,last confidence,%{public}.2f,loisource,%{public}@,userType,%d", &v271, v238);
          v161 = (uint8_t *)v160;
          sub_100512490("Generic", 1, 0, 2, "NSMutableArray<_CLPlaceInference *> *CLPlaceInferenceSubscription::processRoutineResponseForEmergency(NSArray<RTPlaceInference *> *, NSArray<CLLocation *> *)", "%s\n", v160);
          if (v161 != buf)
            free(v161);
        }
        *(_QWORD *)(a1 + 528) = objc_msgSend(v16, "userTypeSource");
        *(_QWORD *)(a1 + 536) = objc_msgSend(v16, "userType");
        objc_msgSend(v16, "confidence");
        *(float *)&v29 = v29;
        *(_DWORD *)(a1 + 552) = LODWORD(v29);
        v30 = objc_msgSend(v16, "userTypeSource");
        if (v30)
        {
          if ((v30 & 2) != 0)
          {
            v31 = 2;
          }
          else if ((v30 & 1) != 0)
          {
            v31 = 3;
          }
          else if ((v30 & 4) != 0)
          {
            v31 = 6;
          }
          else
          {
            v31 = 0;
          }
        }
        else
        {
          v31 = 0;
        }
        *(_DWORD *)(a1 + 292) = v31;
        v49 = (char *)objc_msgSend(v16, "userType");
        if ((unint64_t)(v49 - 1) < 4)
          v50 = (int)v49;
        else
          v50 = 0;
        *(_DWORD *)(a1 + 296) = v50;
        objc_msgSend(v16, "confidence");
        *(_QWORD *)(a1 + 344) = v51;
        if (v17 - 1 >= 4)
        {
          *(_DWORD *)(a1 + 328) = 3;
          *(_DWORD *)(a1 + 520) = 3;
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          v55 = v6[57];
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorCategoryCheck", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v56 = v6[57];
            LOWORD(v271) = 0;
            LODWORD(v238) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 0, "#dsa AWD result - kDSAResultErrorCategoryCheck", &v271, v238);
            goto LABEL_214;
          }
        }
        else if ((v25 & 1) == 0)
        {
          *(_DWORD *)(a1 + 328) = 5;
          *(_DWORD *)(a1 + 520) = 5;
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10217B588);
          v52 = v6[57];
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorSourceCheck", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v53 = v6[57];
            LOWORD(v271) = 0;
            LODWORD(v238) = 2;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v53, 0, "#dsa AWD result - kDSAResultErrorSourceCheck", &v271, v238);
            goto LABEL_214;
          }
        }
      }
      v15 = (char *)v15 + 1;
    }
    while (v266 != v15);
    v215 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v267, v291, 16);
    v266 = v215;
    if (v215)
      continue;
    return v242;
  }
}

void sub_100C42B84(uint64_t a1, void *a2, uint64_t a3)
{
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;

  if (*(_BYTE *)(a1 + 41))
  {
    v6 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v6, "setObject:forKeyedSubscript:", a2, CFSTR("kCLConnectionMessagePlaceInferencePlaceInferenceKey"), v6);
    objc_msgSend(v6, "setObject:forKeyedSubscript:", a3, CFSTR("kCLConnectionMessagePlaceInferencePlaceInferenceFallbackLocationKey"));
    sub_100C46D28(a1, &v23);
    *(_BYTE *)(a1 + 41) = 0;
    if (objc_msgSend(a2, "count")
      && (objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate"), v8 = v7, objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate"), v9 >= -180.0)&& v8 <= 90.0&& v8 >= -90.0&& v9 <= 180.0&& (fabs(v8) >= 0.0000001 || fabs(v9) >= 0.0000001)&& (objc_msgSend(*(id *)(a1 + 144), "coordinate"), v11 = v10, objc_msgSend(*(id *)(a1 + 144), "coordinate"), v12 >= -180.0)&& v11 <= 90.0&& v11 >= -90.0&& v12 <= 180.0&& (fabs(v11) >= 0.0000001 || fabs(v12) >= 0.0000001))
    {
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate");
      v17 = v16;
      objc_msgSend(objc_msgSend(objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "referenceLocation"), "coordinate");
      v19 = v18;
      objc_msgSend(*(id *)(a1 + 144), "coordinate");
      v21 = v20;
      objc_msgSend(*(id *)(a1 + 144), "coordinate");
      *(long double *)(a1 + 232) = sub_10011E634((double *)(a1 + 608), v17, v19, v21, v22, 0.0);
    }
    else
    {
      *(_BYTE *)(a1 + 245) = 0;
    }
    objc_msgSend(*(id *)(a1 + 144), "horizontalAccuracy");
    *(_QWORD *)(a1 + 216) = v13;
    *(_DWORD *)(a1 + 240) = objc_msgSend(*(id *)(a1 + 144), "signalEnvironmentType");
    sub_100C46B00(a1);

    *(_QWORD *)(a1 + 144) = 0;
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v14 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v23 = 68289026;
      v24 = 2082;
      v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", (uint8_t *)&v23, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
    }
    v15 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v23 = 68289026;
      v24 = 2082;
      v25 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Trying to send a result while the request is stopped", "{\"msg%{public}.0s\":\"#dsa Trying to send a result while the request is stopped\"}", (uint8_t *)&v23, 0x12u);
    }
  }
}

void sub_100C42EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[6];
  __int128 v9;
  __int128 v10;
  std::__shared_weak_count *v11;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_100C42FB8;
  v8[3] = &unk_10217B380;
  v8[4] = a3;
  v10 = *(_OWORD *)(a1 + 48);
  v4 = *(std::__shared_weak_count **)(a1 + 64);
  v11 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    v7 = *(_QWORD *)(a1 + 64);
    v8[5] = a2;
    v9 = *(_OWORD *)(a1 + 32);
    if (!v7 || *(_QWORD *)(v7 + 8) == -1 || (sub_100C42FB8((uint64_t)v8), (v4 = v11) != 0))
      std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100C42FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  _Unwind_Resume(exception_object);
}

void sub_100C42FB8(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD block[4];
  int8x16_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  int v27;
  uint64_t v28;
  uint8_t buf[4];
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 32))
  {
    sub_100C40258(v2, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, 0));
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217B5A8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v30 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#dsa mecard returned error %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217B5A8);
      v15 = *(_QWORD *)(a1 + 32);
      v27 = 138412290;
      v28 = v15;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#dsa mecard returned error %@", &v27, 12);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    *(_DWORD *)(v2 + 328) = 8;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v27) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa AWD result - kDSAResultErrorMeCardFetchFailed", &v27, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    *(_DWORD *)(v2 + 520) = 8;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v27) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#era CA result - kERAResultErrorMeCardFetchFailed", &v27, v20);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::startFetchingRTPlaceInferencesWithOptions()_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v9 = objc_msgSend(objc_msgSend(*(id *)(v2 + 8), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_100C43488;
    block[3] = &unk_10217B380;
    v11 = *(_QWORD *)(a1 + 72);
    v10 = *(std::__shared_weak_count **)(a1 + 80);
    v24 = v2;
    v25 = v11;
    v26 = v10;
    if (v10)
    {
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }
    v14 = *(_OWORD *)(a1 + 48);
    v22 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
    v23 = v14;
    dispatch_async(v9, block);
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
  }
}

void sub_100C43488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::__shared_weak_count *v13;

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3321888768;
  v9[2] = sub_100C4355C;
  v9[3] = &unk_10217B380;
  v4 = *(_OWORD *)(a1 + 64);
  v10 = *(_OWORD *)(a1 + 32);
  v12 = v4;
  v5 = *(std::__shared_weak_count **)(a1 + 80);
  v13 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v8 = *(_QWORD *)(a1 + 80);
    v11 = *(_OWORD *)(a1 + 48);
    if (!v8 || *(_QWORD *)(v8 + 8) == -1 || (sub_100C4355C((uint64_t)v9, a2, a3), (v5 = v13) != 0))
      std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_100C43544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  _Unwind_Resume(exception_object);
}

void sub_100C4355C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9[2];

  v4 = *(void **)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  v9[0] = *(_QWORD *)(a1 + 72);
  v9[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  sub_100C435E4(v5, v4, a3, v9, *(void **)(a1 + 48), *(void **)(a1 + 56));
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void sub_100C435CC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void sub_100C435E4(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, void *a5, void *a6)
{
  _QWORD *v11;
  unint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  id v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD v27[8];
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31[3];
  std::__shared_weak_count *v32;

  v11 = operator new(0x20uLL);
  v11[1] = 0;
  v12 = v11 + 1;
  v11[2] = 0;
  *v11 = off_102141ED0;
  *((_DWORD *)v11 + 6) = 0;
  v31[2] = (uint64_t)(v11 + 3);
  v32 = (std::__shared_weak_count *)v11;
  if (objc_msgSend(*(id *)(a1 + 600), "isEqualToDictionary:", a2))
  {
    v13 = (std::__shared_weak_count *)a4[1];
    v31[0] = *a4;
    v31[1] = (uint64_t)v13;
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
    }
    sub_100C43A48(a1, a5, v31, a6);
    if (!v13)
      goto LABEL_20;
LABEL_19:
    std::__shared_weak_count::__release_weak(v13);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 600) = a2;
  v16 = a2;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3321888768;
  v27[2] = sub_100C44C6C;
  v27[3] = &unk_10217B4D0;
  v27[6] = a1;
  v27[7] = v11 + 3;
  v28 = (std::__shared_weak_count *)v11;
  do
    v17 = __ldxr(v12);
  while (__stxr(v17 + 1, v12));
  v19 = *a4;
  v18 = (std::__shared_weak_count *)a4[1];
  v27[4] = a5;
  v29 = v19;
  v30 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v27[5] = a6;
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v27);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  v13 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      goto LABEL_19;
    }
  }
LABEL_20:
  v24 = v32;
  if (v32)
  {
    v25 = (unint64_t *)&v32->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_100C437D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  uint64_t v20;
  uint64_t v21;

  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  sub_100261F44(v20);
  sub_100261F44(v21 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_100C4381C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(result + 80) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100C43840(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 80);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

id sub_100C43850(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  double v13;
  id v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v16 = +[NSMutableArray array](NSMutableArray, "array");
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v18;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v18 != v4)
          objc_enumerationMutation(a2);
        v6 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
        v7 = sub_100C46424((unint64_t)objc_msgSend(v6, "userType"));
        v8 = sub_100C465B4((unint64_t)objc_msgSend(v6, "placeType"));
        v9 = sub_100C46754(objc_msgSend(objc_msgSend(v6, "mapItem"), "location"));
        v10 = sub_100C46754(objc_msgSend(v6, "referenceLocation"));
        v11 = sub_100C4683C(objc_msgSend(v6, "mapItem"), (uint64_t)v9);
        v12 = objc_alloc((Class)_CLPlaceInference);
        objc_msgSend(v6, "confidence");
        objc_msgSend(v16, "addObject:", objc_msgSend(v12, "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:", v7, v8, v11, v10, objc_msgSend(v6, "preferredName"), objc_msgSend(v6, "loiIdentifier"), v13));
      }
      v3 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v3);
  }
  return v16;
}

uint64_t sub_100C43A14(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(result + 88) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100C43A38(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 88);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void sub_100C43A48(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  NSObject *v12;
  id v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  const char *v22;
  uint8_t *v23;
  id v24;
  id v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  id v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  id v44;
  uint64_t v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  id v51;
  __int16 v52;
  double v53;
  uint8_t buf[4];
  id v55;
  __int16 v56;
  double v57;
  _BYTE v58[128];

  v44 = +[NSMutableArray array](NSMutableArray, "array");
  objc_msgSend(*(id *)(a1 + 592), "removeAllObjects");
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v6 = *(void **)(a1 + 584);
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v47;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v47 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v9);
        v11 = sub_100C442F8(a1, objc_msgSend(v10, "meCardMapItem"), a2);
        if (v11 >= 50.0)
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10217B5A8);
          v14 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v15 = objc_msgSend(v10, "meCardString");
            *(_DWORD *)buf = 138478083;
            v55 = v15;
            v56 = 2050;
            v57 = v11;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#dsa %{private}@ address is %{public}.2f away from current location ", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10217B5A8);
            v20 = qword_1022A0088;
            v21 = objc_msgSend(v10, "meCardString");
            v50 = 138478083;
            v51 = v21;
            v52 = 2050;
            v53 = v11;
            LODWORD(v41) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 0, "#dsa %{private}@ address is %{public}.2f away from current location ", &v50, v41);
            v23 = (uint8_t *)v22;
            sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v22);
            if (v23 != buf)
              free(v23);
          }
        }
        else
        {
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10217B5A8);
          v12 = qword_1022A0088;
          if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
          {
            v13 = objc_msgSend(v10, "meCardString");
            *(_DWORD *)buf = 138478083;
            v55 = v13;
            v56 = 2050;
            v57 = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#dsa adding mecard address %{private}@,deviation,%{public}.2f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0080 != -1)
              dispatch_once(&qword_1022A0080, &stru_10217B5A8);
            v16 = qword_1022A0088;
            v17 = objc_msgSend(v10, "meCardString");
            v50 = 138478083;
            v51 = v17;
            v52 = 2050;
            v53 = v11;
            LODWORD(v41) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#dsa adding mecard address %{private}@,deviation,%{public}.2f", &v50, v41);
            v19 = (uint8_t *)v18;
            sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v18);
            if (v19 != buf)
              free(v19);
          }
          objc_msgSend(*(id *)(a1 + 592), "addObject:", objc_msgSend(v10, "meCardString"));
        }
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v24 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v46, v58, 16);
      v7 = v24;
    }
    while (v24);
  }
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 592), "count") <= 1 && objc_msgSend(*(id *)(a1 + 592), "count"))
  {
    v25 = objc_msgSend(*(id *)(a1 + 592), "lastObject");
    v26 = (std::__shared_weak_count *)a3[1];
    v45[0] = *a3;
    v45[1] = (uint64_t)v26;
    if (v26)
    {
      p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
    }
    sub_100C446AC(a1, a4, (uint64_t)v25, v45);
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217B5A8);
    v29 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
    {
      v30 = objc_msgSend(*(id *)(a1 + 592), "count");
      *(_DWORD *)buf = 134217984;
      v55 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#dsa no valid address in contacts.skip sending dsa %lu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217B5A8);
      v33 = qword_1022A0088;
      v34 = objc_msgSend(*(id *)(a1 + 592), "count");
      v50 = 134217984;
      v51 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "#dsa no valid address in contacts.skip sending dsa %lu", &v50);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    objc_msgSend(v44, "removeAllObjects");
    sub_100C42B84(a1, v44, 0);
    *(_DWORD *)(a1 + 328) = 8;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v31 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v50) = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa AWD result - kDSAResultErrorMeCardFetchFailed", &v50, v41);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    *(_DWORD *)(a1 + 520) = 8;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v32 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorMeCardFetchFailed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      LOWORD(v50) = 0;
      LODWORD(v41) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#era CA result - kERAResultErrorMeCardFetchFailed", &v50, v41);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::getMeCardAddressFromCachedContacts(NSArray<CLLocation *> *, CLCallbackDropper, _CLPlaceInference *)", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
  }
}

void sub_100C442D8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

double sub_100C442F8(uint64_t a1, void *a2, void *a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint8_t *v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  double v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  double v58;

  objc_msgSend(a2, "coordinate");
  v7 = v6;
  objc_msgSend(a2, "coordinate");
  v9 = -1.0;
  if (v8 >= -180.0 && v7 <= 90.0 && v7 >= -90.0 && v8 <= 180.0 && (fabs(v7) >= 0.0000001 || fabs(v8) >= 0.0000001))
  {
    objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
    v11 = v10;
    objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
    if (v12 >= -180.0
      && v11 <= 90.0
      && v11 >= -90.0
      && v12 <= 180.0
      && (fabs(v11) >= 0.0000001 || fabs(v12) >= 0.0000001))
    {
      objc_msgSend(a2, "coordinate");
      v14 = v13;
      objc_msgSend(a2, "coordinate");
      v16 = v15;
      objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
      v18 = v17;
      objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
      v9 = sub_10011E634((double *)(a1 + 608), v14, v16, v18, v19, 0.0);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217B5A8);
      v20 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(a2, "coordinate");
        v22 = v21;
        objc_msgSend(a2, "coordinate");
        v24 = v23;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        v26 = v25;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        *(_DWORD *)buf = 134284545;
        v50 = v22;
        v51 = 2049;
        v52 = v24;
        v53 = 2049;
        v54 = v26;
        v55 = 2049;
        v56 = v27;
        v57 = 2050;
        v58 = v9;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#dsa mecard geodetic location,lat,%{private}.7f,lon,%{private}.7f,currentlat,%{private}.7f,currentlon,%{private}.7f,distance,%{public}.2f", buf, 0x34u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10217B5A8);
        v29 = qword_1022A0088;
        objc_msgSend(a2, "coordinate");
        v31 = v30;
        objc_msgSend(a2, "coordinate");
        v33 = v32;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        v35 = v34;
        objc_msgSend(objc_msgSend(a3, "lastObject"), "coordinate");
        v39 = 134284545;
        v40 = v31;
        v41 = 2049;
        v42 = v33;
        v43 = 2049;
        v44 = v35;
        v45 = 2049;
        v46 = v36;
        v47 = 2050;
        v48 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "#dsa mecard geodetic location,lat,%{private}.7f,lon,%{private}.7f,currentlat,%{private}.7f,currentlon,%{private}.7f,distance,%{public}.2f", &v39, 52);
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 2, "double CLPlaceInferenceSubscription::calculateDistanceBetweenLocations(CLLocation *, NSArray<CLLocation *> *)", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
    }
  }
  return v9;
}

void sub_100C446AC(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  _QWORD v8[8];
  std::__shared_weak_count *v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_100C454CC;
  v8[3] = &unk_10217B508;
  v5 = *a4;
  v4 = (std::__shared_weak_count *)a4[1];
  v8[6] = a1;
  v8[7] = v5;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8[4] = a2;
  v8[5] = a3;
  objc_msgSend(objc_msgSend(a2, "placemark"), "fetchFormattedAddress:queue:", v8, objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "silo"), "queue"));
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void sub_100C44758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  _Unwind_Resume(exception_object);
}

id sub_100C44770(uint64_t a1, void *a2)
{
  id v4;
  id result;
  uint64_t v6;
  uint64_t v7;
  NSArray *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  unsigned int v20;
  NSObject *v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  id v28;
  int v29;
  uint64_t v30;
  id obj;
  uint64_t v32;
  id v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  id v44;
  uint8_t buf[4];
  id v46;
  _BYTE v47[128];
  _BYTE v48[128];

  v4 = objc_msgSend(*(id *)(a1 + 680), "allKeys");
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  obj = v4;
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
  v33 = result;
  if (result)
  {
    v32 = *(_QWORD *)v40;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v40 != v32)
          objc_enumerationMutation(obj);
        v34 = v6;
        v7 = *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * v6);
        v8 = -[NSRegularExpression matchesInString:options:range:](+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", v7, 1, 0), "matchesInString:options:range:", a2, 0, 0, objc_msgSend(a2, "length"));
        v35 = 0u;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v9 = -[NSArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v36;
          do
          {
            v12 = 0;
            do
            {
              if (*(_QWORD *)v36 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * (_QWORD)v12);
              v14 = objc_autoreleasePoolPush();
              v15 = objc_msgSend(v13, "range");
              v17 = objc_msgSend(a2, "substringWithRange:", v15, v16);
              if (v17)
              {
                v18 = v17;
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                v19 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v46 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#dsa substringForMatch matched %@", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0080 != -1)
                    dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                  v43 = 138412290;
                  v44 = v18;
                  LODWORD(v30) = 12;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#dsa substringForMatch matched %@", &v43, v30);
                  v24 = (uint8_t *)v23;
                  sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::enumerateSubPremisesForAddressString(NSString *)", "%s\n", v23);
                  if (v24 != buf)
                    free(v24);
                }
                if (objc_msgSend(*(id *)(a1 + 680), "objectForKey:", v7))
                {
                  v20 = objc_msgSend(objc_msgSend(*(id *)(a1 + 680), "objectForKey:", v7), "integerValue");
                  if (v20 - 1 <= 0x3F && ((1 << (v20 - 1)) & 0x800000008000808BLL) != 0)
                    *(_DWORD *)(a1 + 672) |= v20;
                }
                if (qword_1022A0080 != -1)
                  dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                v21 = qword_1022A0088;
                if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
                {
                  v22 = *(_DWORD *)(a1 + 672);
                  *(_DWORD *)buf = 67109120;
                  LODWORD(v46) = v22;
                  _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#dsa sub-premise type is, %u", buf, 8u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0080 != -1)
                    dispatch_once(&qword_1022A0080, &stru_10217B5A8);
                  v25 = *(_DWORD *)(a1 + 672);
                  v43 = 67109120;
                  LODWORD(v44) = v25;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#dsa sub-premise type is, %u", &v43);
                  v27 = (uint8_t *)v26;
                  sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::enumerateSubPremisesForAddressString(NSString *)", "%s\n", v26);
                  if (v27 != buf)
                    free(v27);
                }
              }
              objc_autoreleasePoolPop(v14);
              v12 = (char *)v12 + 1;
            }
            while (v10 != v12);
            v28 = -[NSArray countByEnumeratingWithState:objects:count:](v8, "countByEnumeratingWithState:objects:count:", &v35, v47, 16);
            v10 = v28;
          }
          while (v28);
        }
        v6 = v34 + 1;
      }
      while ((id)(v34 + 1) != v33);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v39, v48, 16);
      v33 = result;
    }
    while (result);
  }
  v29 = *(_DWORD *)(a1 + 672);
  *(_DWORD *)(a1 + 376) = v29;
  *(_DWORD *)(a1 + 572) = v29;
  return result;
}

id sub_100C44C6C(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  id result;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD v30[6];
  std::__shared_weak_count *v31;
  _QWORD v32[9];
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  void *v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  void *v51;
  _BYTE v52[128];

  v5 = a1[6];
  objc_msgSend(*(id *)(v5 + 584), "removeAllObjects");
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v36, v52, 16);
  v7 = result;
  if (result)
  {
    v8 = *(_QWORD *)v37;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v37 != v8)
          objc_enumerationMutation(a3);
        v10 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v9);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10217B5A8);
        v11 = qword_1022A0088;
        if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412803;
          v47 = a2;
          v48 = 2113;
          v49 = a3;
          v50 = 2112;
          v51 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#dsa address type in mecard is %@, %{private}@, %@{private}", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0080 != -1)
            dispatch_once(&qword_1022A0080, &stru_10217B5A8);
          v40 = 138412803;
          v41 = a2;
          v42 = 2113;
          v43 = a3;
          v44 = 2112;
          v45 = v10;
          LODWORD(v28) = 32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#dsa address type in mecard is %@, %{private}@, %@{private}", &v40, v28);
          v27 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::enumerateOverAddressDictionaryAndSendInferredResults(NSDictionary<NSNumber *,NSArray<NSString *> *> *, NSError *, CLCallbackDropper, NSArray<CLLocation *> *, _CLPlaceInference *)_block_invoke", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
        v12 = objc_alloc_init((Class)CLGeocoder);
        objc_msgSend(v12, "_setResponseSilo:", objc_msgSend(*(id *)(v5 + 8), "silo"));
        sub_100C44770(v5, v10);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3321888768;
        v32[2] = sub_100C450BC;
        v32[3] = &unk_10217B460;
        v32[4] = v10;
        v14 = a1[7];
        v13 = (std::__shared_weak_count *)a1[8];
        v32[7] = v5;
        v32[8] = v14;
        v33 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        v17 = a1[9];
        v18 = (std::__shared_weak_count *)a1[10];
        v32[5] = a1[4];
        v34 = v17;
        v35 = v18;
        if (v18)
        {
          p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
          do
            v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
          v17 = a1[9];
          v18 = (std::__shared_weak_count *)a1[10];
        }
        v32[6] = a1[5];
        ++*(_DWORD *)a1[7];
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3321888768;
        v30[2] = sub_100C45438;
        v30[3] = &unk_10217B498;
        v30[5] = v17;
        v31 = v18;
        if (v18)
        {
          v21 = (unint64_t *)&v18->__shared_weak_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v30[4] = v32;
        objc_msgSend(v12, "geocodeAddressString:completionHandler:", v10, v30);
        if (v31)
          std::__shared_weak_count::__release_weak(v31);
        if (v35)
          std::__shared_weak_count::__release_weak(v35);
        v23 = v33;
        if (v33)
        {
          v24 = (unint64_t *)&v33->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v9 = (char *)v9 + 1;
      }
      while (v9 != v7);
      result = objc_msgSend(a3, "countByEnumeratingWithState:objects:count:", &v36, v52, 16);
      v7 = result;
    }
    while (result);
  }
  return result;
}

void sub_100C45088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a22)
    std::__shared_weak_count::__release_weak(a22);
  if (a34)
    std::__shared_weak_count::__release_weak(a34);
  sub_100261F44(a12);
  _Unwind_Resume(a1);
}

void sub_100C450BC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  CLMeCardEntry *v14;
  void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  _BYTE v28[128];

  v4 = *(_QWORD *)(a1 + 56);
  if (a3)
  {
    --**(_DWORD **)(a1 + 64);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217B5A8);
    v6 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v27 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#dsa geocode returned error %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217B5A8);
      v24 = 138412290;
      v25 = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#dsa geocode returned error %@", &v24, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::enumerateOverAddressDictionaryAndSendInferredResults(NSDictionary<NSNumber *,NSArray<NSString *> *> *, NSError *, CLCallbackDropper, NSArray<CLLocation *> *, _CLPlaceInference *)_block_invoke", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
    if (v10)
    {
      v11 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v21 != v11)
            objc_enumerationMutation(a2);
          v13 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
          v14 = objc_alloc_init(CLMeCardEntry);
          -[CLMeCardEntry setMeCardString:](v14, "setMeCardString:", *(_QWORD *)(a1 + 32));
          -[CLMeCardEntry setMeCardMapItem:](v14, "setMeCardMapItem:", objc_msgSend(v13, "location"));
          objc_msgSend(*(id *)(v4 + 584), "addObject:", v14);
        }
        v10 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v20, v28, 16);
      }
      while (v10);
    }
    --**(_DWORD **)(a1 + 64);
  }
  if (!**(_DWORD **)(a1 + 64))
  {
    v15 = *(void **)(a1 + 40);
    v16 = *(std::__shared_weak_count **)(a1 + 88);
    v19[0] = *(_QWORD *)(a1 + 80);
    v19[1] = (uint64_t)v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }
    sub_100C43A48(v4, v15, v19, *(void **)(a1 + 48));
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
  }
}

void sub_100C453A8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100C453C8(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[9];
  result[8] = a2[8];
  result[9] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[11];
  result[10] = a2[10];
  result[11] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t sub_100C4540C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return sub_100261F44(a1 + 64);
}

uint64_t sub_100C45438(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 48);
  if (v1)
  {
    result = *(_QWORD *)(result + 32);
    if (*(_QWORD *)(v1 + 8) != -1)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

_QWORD *sub_100C4545C(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[8];
  result[7] = a2[7];
  result[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[10];
  result[9] = a2[9];
  result[10] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

uint64_t sub_100C454A0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return sub_100261F44(a1 + 56);
}

void sub_100C454CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[7];
  __int128 v6;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100C45540;
  v5[3] = &unk_1021681D8;
  v3 = *(_QWORD *)(a1 + 32);
  v5[4] = a3;
  v5[5] = v3;
  v5[6] = a2;
  v6 = *(_OWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8) != -1)
      sub_100C45540((uint64_t)v5);
  }
}

void sub_100C45540(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217B5A8);
    v3 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_ERROR))
    {
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#dsa fetchformattedaddress returned error %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10217B5A8);
      v5 = *(_QWORD *)(a1 + 32);
      v8 = 138412290;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 16, "#dsa fetchformattedaddress returned error %@", &v8, 12);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLPlaceInferenceSubscription::fetchFormattedAddressAndSendResults(_CLPlaceInference *, NSString *, CLCallbackDropper)_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    sub_100C40258(v2, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 6, 0));
  }
  else
  {
    sub_100C45764(*(_QWORD *)(a1 + 64), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
  }
}

void sub_100C45764(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v8;
  NSObject *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  double v18;
  id v19;
  NSObject *v20;
  id v21;
  id v22;
  NSObject *v23;
  __int128 v24;
  __int128 v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  const char *v34;
  uint8_t *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  void *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  id v44;
  uint8_t buf[4];
  void *v46;
  __int16 v47;
  id v48;
  __int16 v49;
  id v50;

  v8 = +[NSMutableArray array](NSMutableArray, "array");
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10217B5A8);
  v9 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v46 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#dsa meCardAddress  %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217B5A8);
    v39 = 138477827;
    v40 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#dsa meCardAddress  %{private}@", &v39, 12);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  v10 = objc_msgSend(a4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("\n"), CFSTR(","));
  v11 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "name"), CFSTR("Name"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "thoroughfare"), CFSTR("Thoroughfare"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "subThoroughfare"), CFSTR("SubThoroughfare"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "locality"), CFSTR("City"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "subLocality"), CFSTR("SubLocality"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "administrativeArea"), CFSTR("State"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "subAdministrativeArea"), CFSTR("SubAdministrativeArea"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "postalCode"), CFSTR("ZIP"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "ISOcountryCode"), CFSTR("CountryCode"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "country"), CFSTR("Country"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "inlandWater"), CFSTR("InlandWater"));
  objc_msgSend(v11, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a2, "placemark"), "ocean"), CFSTR("Ocean"));
  v12 = a3;
  objc_msgSend(v11, "setObject:forKeyedSubscript:", a3, CFSTR("FormattedAddressLines"));
  v13 = objc_msgSend(objc_alloc((Class)CLPlacemark), "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:meCardAddress:", objc_msgSend(objc_msgSend(a2, "placemark"), "location"), v11, 0, objc_msgSend(objc_msgSend(a2, "placemark"), "areasOfInterest"), 0, 0, v10);
  v14 = objc_alloc((Class)_CLPlaceInference);
  v15 = objc_msgSend(a2, "userType");
  v16 = objc_msgSend(a2, "placeType");
  v17 = objc_msgSend(a2, "referenceLocation");
  objc_msgSend(a2, "confidence");
  v19 = objc_msgSend(v14, "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:", v15, v16, v13, v17, objc_msgSend(a2, "preferredName"), objc_msgSend(a2, "_loiIdentifier"), v18);
  objc_msgSend(v8, "addObject:", v19);
  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10217B5A8);
  v20 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    v21 = objc_msgSend(objc_msgSend(v19, "placemark"), "formattedAddressLines");
    v22 = objc_msgSend(objc_msgSend(v19, "placemark"), "mecardAddress");
    *(_DWORD *)buf = 138478339;
    v46 = v12;
    v47 = 2113;
    v48 = v21;
    v49 = 2113;
    v50 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#dsa fetchformattedaddress received %{private}@, updated address in placemark  %{private}@, address in mecard %{private}@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10217B5A8);
    v29 = qword_1022A0088;
    v30 = objc_msgSend(objc_msgSend(v19, "placemark"), "formattedAddressLines");
    v31 = objc_msgSend(objc_msgSend(v19, "placemark"), "mecardAddress");
    v39 = 138478339;
    v40 = v12;
    v41 = 2113;
    v42 = v30;
    v43 = 2113;
    v44 = v31;
    LODWORD(v38) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "#dsa fetchformattedaddress received %{private}@, updated address in placemark  %{private}@, address in mecard %{private}@", &v39, v38);
    v33 = (uint8_t *)v32;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v32);
    if (v33 != buf)
      free(v33);
  }
  *(_DWORD *)(a1 + 328) = 1;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v23 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultSuccess, caching it", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    LOWORD(v39) = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa AWD result - kDSAResultSuccess, caching it", &v39, v38);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 248);
  std::string::operator=((std::string *)(a1 + 400), (const std::string *)(a1 + 264));
  v24 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(a1 + 472) = v24;
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a1 + 352);
  *(_OWORD *)(a1 + 500) = *(_OWORD *)(a1 + 364);
  v25 = *(_OWORD *)(a1 + 304);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a1 + 440) = v25;
  *(_DWORD *)(a1 + 520) = 1;
  sub_100C46068(a1);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v26 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultSuccess, caching it in CLAnalyticsLogger", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    LOWORD(v39) = 0;
    LODWORD(v38) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#era CA result - kERAResultSuccess, caching it in CLAnalyticsLogger", &v39, v38);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::sendUpdatedEmergencyPlaceInference(_CLPlaceInference *, NSArray<NSString *> *, NSString *)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  sub_100C42B84(a1, v8, 0);
}

void sub_100C46068(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t i;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  uint64_t v20[3];
  char *v21;
  _BYTE *v22;
  _QWORD v23[2];
  char v24;
  uint8_t buf[8];
  _DWORD v26[108];
  uint64_t v27;

  v2 = *(_DWORD *)(a1 + 520);
  *(_DWORD *)buf = 173;
  v26[0] = v2;
  v3 = *(_DWORD *)(a1 + 544);
  v26[6] = 0;
  v26[8] = 174;
  v26[10] = v3;
  v26[16] = 0;
  v4 = *(_DWORD *)(a1 + 548);
  v26[18] = 175;
  v26[20] = v4;
  v5 = *(float *)(a1 + 552) * 100.0;
  v26[26] = 0;
  v26[28] = 176;
  *(float *)&v26[30] = v5;
  v6 = *(_QWORD *)(a1 + 536);
  v26[36] = 4;
  v26[38] = 177;
  v26[40] = v6;
  v26[46] = 0;
  v7 = *(_QWORD *)(a1 + 528);
  v26[48] = 178;
  v26[50] = v7;
  LODWORD(v7) = *(_DWORD *)(a1 + 556);
  v26[56] = 0;
  v26[58] = 179;
  v26[60] = v7;
  v26[66] = 0;
  LODWORD(v7) = *(_DWORD *)(a1 + 560);
  v26[68] = 180;
  v26[70] = v7;
  v26[76] = 0;
  v8 = *(_DWORD *)(a1 + 564);
  v26[78] = 181;
  v26[80] = v8;
  v26[86] = 4;
  v9 = *(_DWORD *)(a1 + 568);
  v26[88] = 182;
  v26[90] = v9;
  v26[96] = 4;
  v10 = *(_DWORD *)(a1 + 572);
  v26[98] = 183;
  v26[100] = v10;
  v26[106] = 0;
  v22 = 0;
  v23[0] = 0;
  v21 = 0;
  v23[1] = &v21;
  v24 = 0;
  v21 = (char *)operator new(0x1B8uLL);
  v22 = v21;
  v23[0] = v21 + 440;
  v22 = (_BYTE *)sub_1006AB40C((uint64_t)v23, (uint64_t)buf, (uint64_t)&v27, (uint64_t)v21);
  for (i = 408; i != -32; i -= 40)
    sub_1001F8644((uint64_t)&buf[i]);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v12 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v26[0]) = 2082;
    *(_QWORD *)((char *)v26 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#era, setMeasurements for ERA event\"}", buf, 0x12u);
  }
  v13 = *(void **)(a1 + 688);
  memset(v20, 0, sizeof(v20));
  sub_1006AB68C(v20, (uint64_t)v21, (uint64_t)v22, 0xCCCCCCCCCCCCCCCDLL * ((v22 - v21) >> 3));
  objc_msgSend(v13, "setMeasurements:", sub_1006A7590(v20));
  *(_QWORD *)buf = v20;
  sub_1006AB5A0((void ***)buf);
  *(_BYTE *)(a1 + 576) = 1;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v14 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    LOWORD(v26[0]) = 2082;
    *(_QWORD *)((char *)v26 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#era, reset ERA metrics\"}", buf, 0x12u);
  }
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 544) = -1;
  *(_DWORD *)(a1 + 552) = -1082130432;
  __asm { FMOV            V1.2S, #-1.0 }
  *(_QWORD *)(a1 + 556) = -1;
  *(_QWORD *)(a1 + 564) = _D1;
  *(_DWORD *)(a1 + 572) = 0;
  *(_QWORD *)buf = &v21;
  sub_1006AB5A0((void ***)buf);
}

void sub_100C463BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_1006AB5A0(&a17);
  _Unwind_Resume(a1);
}

unint64_t sub_100C46424(unint64_t result)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (result >= 5)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v1 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "#dsa Please update userSpecificPlaceTypeFromRTUserType", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v4[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "#dsa Please update userSpecificPlaceTypeFromRTUserType", v4, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 0, "_CLPlaceInferenceUserSpecificPlaceType userSpecificPlaceTypeFromRTUserType(RTPlaceInferenceUserSpecificPlaceType)", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100C465B4(unint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (a1 < 5)
    return qword_101C1F200[a1];
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "#dsa Please update placeInferencePlaceTypeFromRTPlaceType", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "#dsa Please update placeInferencePlaceTypeFromRTPlaceType", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 0, "_CLPlaceInferencePlaceType placeInferencePlaceTypeFromRTPlaceType(RTPlaceInferencePlaceType)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return 2;
}

id sub_100C46754(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v1 = a1;
  v28 = 0;
  v27 = 0;
  v29 = 0;
  v34 = 0;
  v33 = 0;
  v35 = 0;
  objc_msgSend(a1, "latitude");
  v3 = v2;
  objc_msgSend(v1, "longitude");
  v5 = v4;
  objc_msgSend(v1, "horizontalUncertainty");
  v7 = v6;
  objc_msgSend(objc_msgSend(v1, "date"), "timeIntervalSinceReferenceDate");
  v9 = v8;
  LODWORD(v1) = objc_msgSend(v1, "referenceFrame");
  v10 = objc_alloc((Class)CLLocation);
  v17 = 0xFFFF;
  v18 = v3;
  v19 = v5;
  v20 = v7;
  __asm { FMOV            V0.2D, #-1.0 }
  v21 = xmmword_101BAFEE0;
  v22 = _Q0;
  v23 = _Q0;
  v24 = v9;
  v25 = 0;
  v26 = 0xBFF0000000000000;
  v30 = 0xBFF0000000000000;
  v31 = 0x7FFFFFFFLL;
  v32 = (int)v1;
  return objc_msgSend(v10, "initWithClientLocation:", &v17);
}

id sub_100C4683C(void *a1, uint64_t a2)
{
  id v4;

  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(a1, "name"), CFSTR("Name"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "thoroughfare"), CFSTR("Thoroughfare"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "subThoroughfare"), CFSTR("SubThoroughfare"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "locality"), CFSTR("City"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "subLocality"), CFSTR("SubLocality"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "administrativeArea"), CFSTR("State"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "subAdministrativeArea"), CFSTR("SubAdministrativeArea"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "postalCode"), CFSTR("ZIP"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "countryCode"), CFSTR("CountryCode"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "country"), CFSTR("Country"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "inlandWater"), CFSTR("InlandWater"));
  objc_msgSend(v4, "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(a1, "address"), "ocean"), CFSTR("Ocean"));
  return objc_msgSend(objc_alloc((Class)CLPlacemark), "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:category:meCardAddress:", a2, v4, 0, objc_msgSend(objc_msgSend(a1, "address"), "areasOfInterest"), 0, objc_msgSend(a1, "geoMapItemHandle"), objc_msgSend(a1, "category"), &stru_1021D8FB8);
}

void sub_100C46A60(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_1004E6BA4(off_10217B5C8, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 24))(v2, &v6, 0);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100C46AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C46B00(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[12];
  _QWORD v4[12];

  v1 = result + 184;
  if (*(_QWORD *)(result + 184) == 5)
  {
    v2 = result;
    v3[0] = CFSTR("fidelityPolicy");
    v4[0] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", 5);
    v3[1] = CFSTR("collectedLocationCountTotal");
    v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 192));
    v3[2] = CFSTR("collectedLocationCountGPS");
    v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 196));
    v3[3] = CFSTR("collectedLocationCountWiFi");
    v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 200));
    v3[4] = CFSTR("collectedLocationCountCell");
    v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 204));
    v3[5] = CFSTR("collectedLocationCountOthers");
    v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v2 + 208));
    v3[6] = CFSTR("collectedLocationBestHorizontalAccuracy");
    v4[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)fmin(*(double *)(v2 + 216), 2000.0));
    v3[7] = CFSTR("outputLocationSource");
    v4[7] = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(v2 + 224));
    v3[8] = CFSTR("distanceBetweenOutputLocationAndCollectedLocationWithBestHorizontalAccuracy");
    v4[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)fmin(*(double *)(v2 + 232), 500.0));
    v3[9] = CFSTR("signalEnvironmentType");
    v4[9] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v2 + 240));
    v3[10] = CFSTR("routineEnabled");
    v4[10] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 244));
    v3[11] = CFSTR("hasResult");
    v4[11] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(v2 + 245));
    result = AnalyticsSendEvent(CFSTR("com.apple.locationd.CLPlaceInferenceSubscription"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 12));
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_DWORD *)(v1 + 24) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v2 + 216) = 0xBFF0000000000000;
    *(_QWORD *)(v2 + 224) = 0;
    *(_QWORD *)(v2 + 232) = 0xBFF0000000000000;
    *(_DWORD *)(v2 + 240) = 0;
    *(_WORD *)(v2 + 244) = 257;
  }
  return result;
}

void sub_100C46D28(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(_QWORD *)(a1 + 32);
  sub_10060FC7C(&off_10217B5D0, a2, &v6);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v2 + 24))(v2, &v6, 32);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100C46DB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C46DC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (*(_BYTE *)(result + 42))
  {
    v3 = result;
    result = sub_101163ECC(*(_DWORD *)(result + 72));
    if (!v4)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v5 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        v6 = *(int *)(v3 + 72);
        v9 = 68289282;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        v13 = 2050;
        v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Couldn't convert location notification to accuracy\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)&v9, 0x1Cu);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10217B588);
      }
      v7 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v8 = *(int *)(v3 + 72);
        v9 = 68289282;
        v10 = 0;
        v11 = 2082;
        v12 = "";
        v13 = 2050;
        v14 = v8;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Couldn't convert location notification to accuracy", "{\"msg%{public}.0s\":\"#dsa Couldn't convert location notification to accuracy\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld}", (uint8_t *)&v9, 0x1Cu);
      }
      result = 0xBFF0000000000000;
    }
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = result;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 23) = 0;
    *(_BYTE *)(a2 + 32) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

void sub_100C46F9C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];
  uint64_t buf;
  __int16 v27;
  const char *v28;
  __int16 v29;
  uint64_t v30;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_QWORD *)(a1 + 24);
    buf = 68289282;
    v27 = 2082;
    v28 = "";
    v29 = 2114;
    v30 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa client stopped PlaceInference Request\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  if (*(_BYTE *)(a1 + 45))
  {
    if (*(_DWORD *)(a1 + 328) == 1 || *(_DWORD *)(a1 + 464) != 1)
    {
      if (*(_DWORD *)(a1 + 324) != 2)
        goto LABEL_24;
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v7 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa DSA AWD - Submitting latest metrics\"}", (uint8_t *)&buf, 0x12u);
      }
      v10 = *(_OWORD *)(a1 + 248);
      v6 = (void **)&v11;
      if (*(char *)(a1 + 287) < 0)
      {
        sub_100115CE4(&v11, *(void **)(a1 + 264), *(_QWORD *)(a1 + 272));
      }
      else
      {
        v11 = *(_OWORD *)(a1 + 264);
        v12 = *(_QWORD *)(a1 + 280);
      }
      v8 = *(_OWORD *)(a1 + 336);
      v15 = *(_OWORD *)(a1 + 320);
      v16 = v8;
      v17[0] = *(_OWORD *)(a1 + 352);
      v9 = *(_OWORD *)(a1 + 304);
      v13 = *(_OWORD *)(a1 + 288);
      v14 = v9;
      *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)(a1 + 364);
      sub_100C47354(a1, (uint64_t)&v10);
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_24;
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v5 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289026;
        v27 = 2082;
        v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa DSA AWD - Submitting cached metrics\"}", (uint8_t *)&buf, 0x12u);
      }
      v18 = *(_OWORD *)(a1 + 384);
      v6 = (void **)&v19;
      if (*(char *)(a1 + 423) < 0)
      {
        sub_100115CE4(&v19, *(void **)(a1 + 400), *(_QWORD *)(a1 + 408));
      }
      else
      {
        v19 = *(_OWORD *)(a1 + 400);
        v20 = *(_QWORD *)(a1 + 416);
      }
      v23 = *(_OWORD *)(a1 + 456);
      v24 = *(_OWORD *)(a1 + 472);
      v25[0] = *(_OWORD *)(a1 + 488);
      *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(a1 + 500);
      v21 = *(_OWORD *)(a1 + 424);
      v22 = *(_OWORD *)(a1 + 440);
      sub_100C47354(a1, (uint64_t)&v18);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_24;
    }
    operator delete(*v6);
LABEL_24:
    sub_100C475A4(a1);
    *(_BYTE *)(a1 + 45) = 0;
  }

}

void sub_100C47300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;

  if (a37 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100C47354(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void **v6;
  __int128 v7;
  __int128 v13;
  void **v14;
  __int128 v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,submitting LocationEmergencyPOIStatistics metric\"}", buf, 0x12u);
  }
  *(_BYTE *)a2 = 1;
  *(CFAbsoluteTime *)(a2 + 8) = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)(a2 + 16), "com.apple.locationd");
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa,reset AWD metrics\"}", buf, 0x12u);
  }
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0xBFF0000000000000;
  v6 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    operator delete(*v6);
  *v6 = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  v7 = xmmword_101BB0C00;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 288) = xmmword_101BB0C00;
  *(_OWORD *)(a1 + 304) = _Q1;
  v13 = xmmword_101BDBEE0;
  *(_OWORD *)(a1 + 320) = xmmword_101BDBEE0;
  *(_QWORD *)(a1 + 336) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 344) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 352) = -1;
  *(_QWORD *)(a1 + 360) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 368) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0xBFF0000000000000;
  v14 = (void **)(a1 + 400);
  if (*(char *)(a1 + 423) < 0)
  {
    v15 = _Q1;
    operator delete(*v14);
    v13 = xmmword_101BDBEE0;
    v7 = xmmword_101BB0C00;
    _Q1 = v15;
  }
  *v14 = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 424) = v7;
  *(_QWORD *)(a1 + 440) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 448) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 456) = v13;
  *(_QWORD *)(a1 + 472) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 480) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 488) = -1;
  *(_OWORD *)(a1 + 496) = _Q1;
  *(_DWORD *)(a1 + 512) = 0;
}

void sub_100C475A4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *__p[2];
  uint64_t v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;

  if (!*(_BYTE *)(a1 + 576))
    sub_100C46068(a1);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    v7 = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#era, submitEvent for ERA event\"}", buf, 0x12u);
  }
  v3 = *(void **)(a1 + 688);
  if (byte_10231123F < 0)
  {
    sub_100115CE4(__p, (void *)xmmword_102311228, *((unint64_t *)&xmmword_102311228 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_102311228;
    v5 = unk_102311238;
  }
  objc_msgSend(v3, "submitEvent:", sub_1007FE6A8((__int128 *)__p));
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
  *(_BYTE *)(a1 + 576) = 0;
}

void sub_100C476E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void sub_100C4770C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  const char *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  _QWORD v35[5];
  _BYTE buf[18];
  __int16 v37;
  uint64_t v38;
  _BYTE v39[12];
  char v40;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  objc_msgSend(*(id *)(a1 + 8), "silo");
  if (*(_BYTE *)(a1 + 41))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v5 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dsa #warning Already running a place inference request, but asked to start again\"}", buf, 0x12u);
    }
    goto LABEL_65;
  }
  *(_BYTE *)(a1 + 41) = 1;
  sub_1015A2E04(buf, "com.apple.locationd.place_inference");
  if ((sub_1002255E0(a1) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    sub_1015A2E04(v39, "com.apple.locationd.emergencyplace_inference");
    v6 = sub_1002255E0(a1) ^ 1;
    if (v40 < 0)
      operator delete(*(void **)v39);
  }
  if (SBYTE3(v38) < 0)
  {
    operator delete(*(void **)buf);
    if (v6)
      goto LABEL_12;
  }
  else if (v6)
  {
LABEL_12:
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v37 = 2114;
      v38 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Client does not have appropriate entitlement to get place inference\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
    }
    v9 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v10 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v37 = 2114;
      v38 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Client does not have appropriate entitlement to get place inference", "{\"msg%{public}.0s\":\"#dsa Client does not have appropriate entitlement to get place inference\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
LABEL_19:
    sub_100C40258(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, 0));
    goto LABEL_65;
  }
  v11 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePlaceInferenceFidelityPolicyKey"));
  if (v11)
  {
    if ((sub_100FFB2C8(a1, 4) & 1) != 0)
    {
      v12 = objc_msgSend(v11, "unsignedIntValue");
      v13 = v12;
      switch(v12)
      {
        case 6u:
          v25 = *(void **)(a1 + 56);
          v35[0] = _NSConcreteStackBlock;
          v35[1] = 3221225472;
          v35[2] = sub_100C4822C;
          v35[3] = &unk_10214C458;
          v35[4] = a1;
          objc_msgSend(v25, "fetchCachedPlaceInferencesWithReply:", v35);
          goto LABEL_65;
        case 5u:
          *(_QWORD *)(a1 + 112) = 1;
          break;
        case 4u:
          sub_1015A2E04(buf, "com.apple.locationd.emergencyplace_inference");
          v14 = sub_1002255E0(a1);
          if (SBYTE3(v38) < 0)
            operator delete(*(void **)buf);
          if ((v14 & 1) == 0)
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10217B588);
            v15 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
            {
              v16 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)buf = 138543362;
              *(_QWORD *)&buf[4] = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#dsa client '%{public}@' not authorized for Emergency Fidelity policy", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10217B588);
              v31 = *(_QWORD *)(a1 + 24);
              *(_DWORD *)v39 = 138543362;
              *(_QWORD *)&v39[4] = v31;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa client '%{public}@' not authorized for Emergency Fidelity policy", v39, 12);
              v33 = (char *)v32;
              sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v32);
              if (v33 != buf)
                free(v33);
            }
            goto LABEL_19;
          }
          break;
      }
      *(_QWORD *)(a1 + 136) = objc_alloc_init((Class)NSDate);
      *(_QWORD *)(a1 + 104) = v13;
      *(_QWORD *)(a1 + 184) = v13;
      sub_100C3DB1C(a1);
      sub_100C3FA68(a1);
      goto LABEL_65;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v19 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)&buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#dsa client '%{public}@' not authorized for location; not starting yet in handleRequestPlaceInference",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v26 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)v39 = 138543362;
      *(_QWORD *)&v39[4] = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa client '%{public}@' not authorized for location; not starting yet in handleRequestPlaceInference",
        v39,
        12);
      v28 = (char *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    sub_100C40258(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, 0));
    *(_DWORD *)(a1 + 520) = 6;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v21 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#era CA result - kERAResultErrorLSOff", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      *(_WORD *)v39 = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#era CA result - kERAResultErrorLSOff", v39, v34);
      v30 = (char *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    *(_DWORD *)(a1 + 328) = 6;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v22 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#dsa AWD result - kDSAResultErrorLSOff", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      *(_WORD *)v39 = 0;
      LODWORD(v34) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa AWD result - kDSAResultErrorLSOff", v39, v34);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::handleRequestPlaceInference(std::shared_ptr<CLConnectionMessage>)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v17 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dsa Place inference request is missing required field: fidelityPolicy\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
    }
    v18 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dsa Place inference request is missing required field: fidelityPolicy", "{\"msg%{public}.0s\":\"#dsa Place inference request is missing required field: fidelityPolicy\"}", buf, 0x12u);
    }
    sub_100C40258(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomainPrivate, 5, 0));
  }
LABEL_65:

}

void sub_100C481A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void sub_100C4822C(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = sub_100C43850(a1, a2);
  sub_100C42B84(v2, v3, 0);
}

_QWORD *sub_100C48258@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[32];

  v11[0] = off_10217B5E8;
  v11[1] = sub_100C4770C;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v13, "kCLConnectionMessagePlaceInference");
  sub_100BB4D68((uint64_t)&v14, (uint64_t)v11);
  v9[0] = off_10217B5E8;
  v9[1] = sub_100C46F9C;
  v9[2] = 0;
  v10 = v9;
  sub_1015A2E04(v15, "kCLConnectionMessagePlaceInferenceStop");
  sub_100BB4D68((uint64_t)v16, (uint64_t)v9);
  sub_100C49124(a1, (unsigned __int8 *)v13, 2);
  for (i = 0; i != -14; i -= 7)
  {
    v3 = *(_BYTE **)&v16[i * 8 + 24];
    if (&v16[i * 8] == v3)
    {
      v3 = &v16[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v10)
  {
    v6 = 5;
    goto LABEL_14;
  }
  result = v12;
  if (v12 == v11)
  {
    v8 = 4;
    result = v11;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  else if (v12)
  {
    v8 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
  }
  return result;
}

void sub_100C483F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  uint64_t i;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  for (i = 56; i != -56; i -= 56)
    sub_1004E21A4(v17 + i);
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_8:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_13;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_13:
  _Unwind_Resume(a1);
}

uint64_t sub_100C484C0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138543618;
    v15 = v5;
    v16 = 2082;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#dsa client '%{public}@ %{public}s'; stopping place inference location and wifi scans",
      buf,
      0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v7 = *(_QWORD *)(a1 + 24);
    v10 = 138543618;
    v11 = v7;
    v12 = 2082;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#dsa client '%{public}@ %{public}s'; stopping place inference location and wifi scans",
      &v10,
      22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::shutDownCurrentSessionWithReason(const char *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100090A50(a1 + 160);
  return sub_100C3D944(a1);
}

void sub_100C4869C(uint64_t a1)
{
  const char *v2;

  if (*(_BYTE *)(a1 + 41))
  {
    if (sub_100FFB2C8(a1, 4))
    {
      if ((sub_100FFB2C8(a1, 12) & 1) != 0 || *(_BYTE *)(a1 + 44))
        return;
      v2 = "lost precise location authorization";
    }
    else
    {
      v2 = "authorization status changed for location";
    }
    sub_100C484C0(a1, (uint64_t)v2);
    sub_100C40258(a1, (uint64_t)+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, 0));
  }
}

id sub_100C48734(uint64_t a1, void *a2)
{
  void *v4;
  double v5;
  double v6;
  double v7;
  void *v8;
  id result;
  double v10;

  objc_msgSend(*(id *)(a1 + 120), "addObject:", a2);
  if (objc_msgSend(a2, "type") == 1)
  {
    ++*(_DWORD *)(a1 + 196);
  }
  else if (objc_msgSend(a2, "type") == 4)
  {
    ++*(_DWORD *)(a1 + 200);
  }
  else if (objc_msgSend(a2, "type") == 6)
  {
    ++*(_DWORD *)(a1 + 204);
  }
  else
  {
    ++*(_DWORD *)(a1 + 208);
  }
  ++*(_DWORD *)(a1 + 192);
  v4 = *(void **)(a1 + 144);
  if (!v4)
  {
    v8 = 0;
    goto LABEL_12;
  }
  objc_msgSend(v4, "horizontalAccuracy");
  v6 = v5;
  objc_msgSend(a2, "horizontalAccuracy");
  if (v6 > v7)
  {
    v8 = *(void **)(a1 + 144);
LABEL_12:

    *(_QWORD *)(a1 + 144) = a2;
  }
  result = objc_msgSend(a2, "horizontalAccuracy");
  if (v10 < 200.0)
  {
    if (objc_msgSend(a2, "type") == 1
      || objc_msgSend(a2, "type") == 4
      || objc_msgSend(a2, "type") == 11
      || (result = objc_msgSend(a2, "type"), (_DWORD)result == 13))
    {

      result = a2;
      *(_QWORD *)(a1 + 128) = result;
    }
  }
  return result;
}

void sub_100C48880(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  id v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  _OWORD v23[8];
  _OWORD v24[2];
  _OWORD v25[8];
  _OWORD v26[2];
  _DWORD v27[4];
  uint8_t buf[4];
  int v29;

  if (*a3 < 2)
  {
    v6 = objc_alloc((Class)CLLocation);
    v7 = *(_OWORD *)(a4 + 112);
    v25[6] = *(_OWORD *)(a4 + 96);
    v25[7] = v7;
    v26[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v26 + 12) = *(_OWORD *)(a4 + 140);
    v8 = *(_OWORD *)(a4 + 48);
    v25[2] = *(_OWORD *)(a4 + 32);
    v25[3] = v8;
    v9 = *(_OWORD *)(a4 + 80);
    v25[4] = *(_OWORD *)(a4 + 64);
    v25[5] = v9;
    v10 = *(_OWORD *)(a4 + 16);
    v25[0] = *(_OWORD *)a4;
    v25[1] = v10;
    v11 = objc_msgSend(v6, "initWithClientLocation:", v25);
LABEL_5:
    sub_100C48734(a1, v11);
    return;
  }
  if (*a3 == 2)
  {
    v12 = objc_alloc((Class)CLLocation);
    v13 = *(_OWORD *)(a4 + 112);
    v23[6] = *(_OWORD *)(a4 + 96);
    v23[7] = v13;
    v24[0] = *(_OWORD *)(a4 + 128);
    *(_OWORD *)((char *)v24 + 12) = *(_OWORD *)(a4 + 140);
    v14 = *(_OWORD *)(a4 + 48);
    v23[2] = *(_OWORD *)(a4 + 32);
    v23[3] = v14;
    v15 = *(_OWORD *)(a4 + 80);
    v23[4] = *(_OWORD *)(a4 + 64);
    v23[5] = v15;
    v16 = *(_OWORD *)(a4 + 16);
    v23[0] = *(_OWORD *)a4;
    v23[1] = v16;
    v11 = objc_msgSend(v12, "initWithClientLocation:coarseMetaData:", v23, *(_QWORD *)(a4 + 1320));
    goto LABEL_5;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10217B588);
  v18 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    v19 = *a3;
    *(_DWORD *)buf = 67240192;
    v29 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#dsa received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d In onLocationNotification", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v20 = *a3;
    v27[0] = 67240192;
    v27[1] = v20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "#dsa received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d In onLocationNotification", v27, 8);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
    if (v22 != buf)
      free(v22);
  }
}

void sub_100C48AF0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  id v8;
  std::string *v9;
  id v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  std::string *v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  _BYTE v21[12];
  std::string __p[68];

  if (*a3 == 3)
  {
    v6 = *(_QWORD *)(a4 + 112);
    v5 = *(_QWORD *)(a4 + 120);
    if (v5 != v6)
    {
      do
      {
        v8 = objc_alloc((Class)RTWiFiAccessPoint);
        *(_QWORD *)v21 = *(_QWORD *)v6;
        sub_1000C2254(v21, __p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = __p;
        else
          v9 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        v10 = objc_msgSend(v8, "initWithMac:rssi:channel:age:date:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9), *(int *)(v6 + 32), *(int *)(v6 + 40), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)(v6 + 56)), *(double *)(v6 + 48));
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        objc_msgSend(*(id *)(a1 + 152), "addObject:", v10);
        v6 += 88;
      }
      while (v6 != v5);
      return;
    }
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v16 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v17 = sub_100CF2150(*a3);
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#dsa empty accessPoints, %{pubic}s", (uint8_t *)__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v18 = qword_1022A01C8;
      v19 = sub_100CF2150(*a3);
      *(_DWORD *)v21 = 136315138;
      *(_QWORD *)&v21[4] = v19;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 2, "#dsa empty accessPoints, %{pubic}s", v21, 12);
      v15 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v20);
      if (v15 != __p)
LABEL_28:
        free(v15);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10217B588);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a3;
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#dsa received unhandled notification %{public, CLWifiService_Type::Notification}d In onWifiServiceNotification", (uint8_t *)__p, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10217B588);
      v13 = *a3;
      *(_DWORD *)v21 = 67240192;
      *(_DWORD *)&v21[4] = v13;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01C8, 2, "#dsa received unhandled notification %{public, CLWifiService_Type::Notification}d In onWifiServiceNotification", v21, 8);
      v15 = (std::string *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLPlaceInferenceSubscription::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v14);
      if (v15 != __p)
        goto LABEL_28;
    }
  }
}

void sub_100C48EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(exception_object);
}

void sub_100C48F00(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C48F2C(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_100C48F58(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

__n128 sub_100C48F84(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10217B5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100C48FC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10217B5E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C48FE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100C49034(a1 + 8, a2, a3);
}

uint64_t sub_100C48FEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C49028()
{
}

void sub_100C49034(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_100C49108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100C49124(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_100C4919C(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_100C49188(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100C4919C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_100C4941C(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_100C49404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100C4941C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_100C49490(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_100C49478(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_100C49490(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100C494E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100C49504()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101C1EF80;
      v1[3] = unk_101C1EF90;
      v1[4] = xmmword_101C1EFA0;
      v1[0] = xmmword_101C1EF60;
      v1[1] = unk_101C1EF70;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_100C495D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

double sub_100C495F0(double a1)
{
  double v1;

  v1 = -1.0;
  if (a1 >= 0.0)
  {
    v1 = 1.0;
    if (a1 > 0.0)
    {
      v1 = 0.0;
      if (a1 <= 5.0)
        return dbl_1022FA078[(int)(a1 / 0.02)];
    }
  }
  return v1;
}

void sub_100C497F0(id a1)
{
  qword_1023073B0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPeopleDensitySilo"));
}

void sub_100C498B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C49B58(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  if (qword_1022A0270 != -1)
    dispatch_once(&qword_1022A0270, &stru_10217B6D8);
  v2 = qword_1022A0278;
  if (os_log_type_enabled((os_log_t)qword_1022A0278, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
    *(_DWORD *)buf = 67174657;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "ScanAllowanceRefreshHandler: before,%{private}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0270 != -1)
      dispatch_once(&qword_1022A0270, &stru_10217B6D8);
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
    v7[0] = 67174657;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0278, 2, "ScanAllowanceRefreshHandler: before,%{private}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLPeopleDensity beginService]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16) = 10;
}

id sub_100C4A784(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "terminateScanSessionFor:", 0);
}

void sub_100C4B868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_100C4BCB8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "bluetoothState");
  if ((_DWORD)result != 5)
    return objc_msgSend(*(id *)(a1 + 32), "terminateScanSessionFor:", 1);
  return result;
}

id sub_100C4BD04(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onBTLEAdvertisement:", a2);
}

id sub_100C4BD10(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onBTLEAdvertisement:", a2);
}

id sub_100C4BD1C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onBTLEInvalidated");
}

void sub_100C4C040(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _BYTE v7[8];
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  uint64_t v15;
  int v16;

  v6 = *a2;
  v7[0] = *(_BYTE *)a3;
  sub_100985590((uint64_t)&v8, a3 + 8);
  v15 = *(_QWORD *)(a3 + 112);
  v16 = *(_DWORD *)(a3 + 120);
  objc_msgSend(a4, "onBluetoothServiceNotification:data:", v6, v7);
  if (v14 < 0)
    operator delete(__p);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
}

void sub_100C4C0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100985540((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_100C4C69C(id a1)
{
  qword_1022A0278 = (uint64_t)os_log_create("com.apple.locationd.Core", "PeopleDensity");
}

void sub_100C4C940(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

void sub_100C4D1B8(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217B718);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289282;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    v6 = 2050;
    v7 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"collecting advertisement information\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 360) = 2;
}

_QWORD *sub_100C4D2AC(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  if (!*(_QWORD *)(result[4] + 312))
  {
    v1 = result;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10217B718);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 68289282;
      v3[1] = 0;
      v4 = 2082;
      v5 = "";
      v6 = 2050;
      v7 = 11;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"pause data collection for receiving no advertisement\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
    }
    return objc_msgSend((id)v1[4], "stopDataCollection");
  }
  return result;
}

void sub_100C4D6A8(uint64_t a1)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10217B718);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289282;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    v6 = 2050;
    v7 = 11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"submit data and stop data collection\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)v3, 0x1Cu);
  }
  objc_msgSend(*(id *)(a1 + 32), "submitData");
  objc_msgSend(*(id *)(a1 + 32), "stopDataCollection");
  sub_101247A80(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
}

void sub_100C4E3CC(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_100C4E3F8(uint64_t a1, void *a2)
{
  sub_101155E0C(a1, a2);
}

void sub_100C4E4D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 208);
  *(_QWORD *)(v1 + 208) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10115681C(v1);
  _Unwind_Resume(a1);
}

void sub_100C4E508(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateObserverWatch::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217B850);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateObserverWatch::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217B850);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateObserverWatch::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100C4E980((char *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100C4E6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100C4E6E0(uint64_t a1)
{
  return sub_100C4E6E8(*(_QWORD *)(a1 + 32));
}

id sub_100C4E6E8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  __int128 v14;
  __int128 v15;
  int v16;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10217B870);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_DWORD *)(a1 + 117);
    v4 = *(_DWORD *)(a1 + 121);
    *(_DWORD *)buf = 67109376;
    LODWORD(v14) = v3;
    WORD2(v14) = 1024;
    *(_DWORD *)((char *)&v14 + 6) = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Sending session update, user type, %d, predicted type, %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217B870);
    v6 = *(_DWORD *)(a1 + 117);
    v7 = *(_DWORD *)(a1 + 121);
    v10[0] = 67109376;
    v10[1] = v6;
    v11 = 1024;
    v12 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver, Sending session update, user type, %d, predicted type, %d", v10, 14);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverWatch::sendSessionUpdate()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  *(_DWORD *)buf = 0;
  v14 = *(_OWORD *)(a1 + 109);
  v15 = *(_OWORD *)(a1 + 125);
  v16 = *(_DWORD *)(a1 + 141);
  return sub_100C4ECA0(a1, (uint64_t)buf);
}

uint64_t sub_100C4E8E4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10217B748;
  v2 = a1[26];
  a1[26] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_10115681C((uint64_t)a1);
}

void sub_100C4E928(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10217B748;
  v2 = a1[26];
  a1[26] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_10115681C((uint64_t)a1);
  operator delete();
}

char *sub_100C4E980(char *result, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if (*a3 == 2)
  {
    v5 = (uint64_t)result;
    v6 = a4[13];
    v29 = a4[12];
    v30 = v6;
    v31 = *((_QWORD *)a4 + 28);
    v7 = a4[9];
    v25 = a4[8];
    v26 = v7;
    v8 = a4[11];
    v27 = a4[10];
    v28 = v8;
    v9 = a4[5];
    v21 = a4[4];
    v22 = v9;
    v10 = a4[7];
    v23 = a4[6];
    v24 = v10;
    v11 = a4[1];
    v17 = *a4;
    v18 = v11;
    v12 = a4[3];
    v19 = a4[2];
    v20 = v12;
    if (!(_QWORD)v11 || (_QWORD)v18 == 9 || (_QWORD)v18 == 7)
    {
      if (sub_1009289E0(v24) == 14)
        v13 = v25;
      else
        v13 = 0;
      *(_QWORD *)&v14 = *((_QWORD *)&v18 + 1);
      *((_QWORD *)&v14 + 1) = __PAIR64__(*(_DWORD *)(v5 + 121), +[CMWorkout CLMotionActivityTypeFromCMWorkoutType:](CMWorkout, "CLMotionActivityTypeFromCMWorkoutType:", (_QWORD)v24));
      v15 = v13;
      v16[1] = 0;
      v16[0] = 0;
      uuid_copy((unsigned __int8 *)v16, (const unsigned __int8 *)a4 + 96);
      objc_msgSend(*(id *)(v5 + 152), "setNextFireDelay:interval:", 1.0, 60.0);
      return (char *)sub_1011568F0(v5, &v14);
    }
    else
    {
      result = (char *)sub_100F72B18((uint64_t)&v17);
      if ((_DWORD)result == 2)
        return sub_100C4EADC((char *)v5);
    }
  }
  return result;
}

char *sub_100C4EADC(char *result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = (uint64_t)result;
  if (*(_DWORD *)(result + 117) || *(_DWORD *)(result + 121))
  {
    sub_101156D08((uint64_t)result);
    sub_100C4E6E8(v1);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217B870);
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Disabling update timer.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217B870);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver, Disabling update timer.", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverWatch::stopSessionAndTimer()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return (char *)objc_msgSend(*(id *)(v1 + 152), "setNextFireDelay:interval:", 1.79769313e308, 1.79769313e308);
  }
  return result;
}

id sub_100C4ECA0(uint64_t a1, uint64_t a2)
{
  NSData *v3;
  id v4;
  _QWORD v6[5];

  v3 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", a2, 40);
  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLCompanionNotifier"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100C4ED28;
  v6[3] = &unk_102155328;
  v6[4] = v3;
  return objc_msgSend(v4, "doAsync:", v6);
}

id sub_100C4ED28(uint64_t a1, uint64_t a2)
{
  return sub_10061F764(120.0, a2, 18, *(void **)(a1 + 32), 300, 0, 0, 0, 0, 0);
}

uint64_t sub_100C4ED70(uint64_t result, _DWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  const char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  _BYTE buf[20];
  __int128 v25;

  if (*a2 == 10)
  {
    v4 = result;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10217B870);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *a3;
      v7 = *((_DWORD *)a3 + 2);
      v8 = *((_DWORD *)a3 + 3);
      v9 = *((_DWORD *)a3 + 4);
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v7;
      *(_WORD *)&buf[18] = 1024;
      LODWORD(v25) = v8;
      WORD2(v25) = 1024;
      *(_DWORD *)((char *)&v25 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MotionStateObserver,RemoteState,startTime,%.3f,activityType,%d,vehicularConfidence,%d,vehicleType,%d", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10217B870);
      v10 = *a3;
      v11 = *((_DWORD *)a3 + 2);
      v12 = *((_DWORD *)a3 + 3);
      v13 = *((_DWORD *)a3 + 4);
      v16 = 134218752;
      v17 = v10;
      v18 = 1024;
      v19 = v11;
      v20 = 1024;
      v21 = v12;
      v22 = 1024;
      v23 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "MotionStateObserver,RemoteState,startTime,%.3f,activityType,%d,vehicularConfidence,%d,vehicleType,%d", COERCE_DOUBLE(&v16), 30);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateObserverWatch::handleCompanionNotification(const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_101156F5C(v4, (__int128 *)a3);
    v25 = 0uLL;
    *(_OWORD *)buf = *(_OWORD *)a3;
    *(_DWORD *)&buf[16] = *((_DWORD *)a3 + 4);
    v16 = 1;
    return (*(uint64_t (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 152))(v4, &v16, buf, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_100C4EFC8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C4EFF4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_100C4F020()
{
  sub_1015A2E04(qword_1023073C0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023073C0, (void *)&_mh_execute_header);
}

_QWORD *sub_100C4F064@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 8)
    v2 = "UNKNOWN";
  else
    v2 = off_10217B890[a1];
  return sub_1015A2E04(a2, v2);
}

void sub_100C4F090(uint64_t a1)
{
  void *v2;
  _OWORD v3[3];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];

  memset(v12, 0, sizeof(v12));
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v4 = 0u;
  memset(v3, 0, sizeof(v3));
  sub_10100C6EC((uint64_t)v3);
  *(_OWORD *)(a1 + 8) = v3[0];
  *(_WORD *)(a1 + 24) = v3[1];
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)((char *)&v3[1] + 8);
  *(_QWORD *)(a1 + 48) = *((_QWORD *)&v3[2] + 1);
  memset((char *)&v3[1] + 8, 0, 24);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 136) = v9;
  *(_OWORD *)(a1 + 152) = v10;
  *(_OWORD *)(a1 + 168) = v11;
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v7;
  sub_100C4F248((_QWORD *)(a1 + 184), (uint64_t)v12);
  sub_10047F660(v12);
  if (*((_QWORD *)&v3[1] + 1))
  {
    *(_QWORD *)&v3[2] = *((_QWORD *)&v3[1] + 1);
    operator delete(*((void **)&v3[1] + 1));
  }
}

_QWORD *sub_100C4F1B0(_QWORD *a1)
{
  void *v2;

  *a1 = off_10217B8E8;
  sub_10047F660(a1 + 23);
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

BOOL sub_100C4F1F0(uint64_t a1, double *a2)
{
  return sub_10100C744(a1 + 8, a2);
}

void sub_100C4F1F8(_QWORD *a1)
{
  void *v2;

  *a1 = off_10217B8E8;
  sub_10047F660(a1 + 23);
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  operator delete();
}

uint64_t sub_100C4F248(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 85;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 170;
LABEL_7:
    a1[4] = v8;
  }
  sub_100C4F2E8(a1);
  result = sub_100C4F418((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100C4F2E8(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_10047FDC4((uint64_t)a1, 0);
    sub_1004CDEEC(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_100C4F358((uint64_t)a1);
}

void sub_100C4F358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_100C4F418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100C4F358(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

NSString *__cdecl sub_100C4F9EC(CLCompanionSyncAuthObject *self, SEL a2)
{
  objc_super v3;

  v3.receiver = self;
  v3.super_class = (Class)CLCompanionSyncAuthObject;
  return +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@ %@"), -[CLCompanionSyncAuthObject description](&v3, "description"), -[CLCompanionSyncAuthObject dictionaryRepresentation](self, "dictionaryRepresentation"));
}

uint64_t sub_100C4FE4C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  void *String;
  uint64_t result;
  char v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;
  CLAuthSyncVectorClock *v32;
  CLCompanionSyncInterestZone *v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        String = (void *)PBReaderReadString(a2);

        *(_QWORD *)(a1 + 24) = String;
        goto LABEL_95;
      case 2u:
        v14 = 0;
        v15 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v17 == -1 || v17 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 1;
            v16 |= (unint64_t)(v18 & 0x7F) << v14;
            if (v18 < 0)
            {
              v14 += 7;
              v9 = v15++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_72;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_72:
        v43 = 8;
        goto LABEL_89;
      case 3u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 60) |= 8u;
        while (2)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
            v21 |= (unint64_t)(v23 & 0x7F) << v19;
            if (v23 < 0)
            {
              v19 += 7;
              v9 = v20++ >= 9;
              if (v9)
              {
                v21 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v21 = 0;
LABEL_76:
        v44 = v21 != 0;
        v45 = 56;
        goto LABEL_94;
      case 4u:
        v24 = 0;
        v25 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1 || v26 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v16 |= (unint64_t)(v27 & 0x7F) << v24;
            if (v27 < 0)
            {
              v24 += 7;
              v9 = v25++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_80:
        v43 = 36;
        goto LABEL_89;
      case 5u:
        v28 = 0;
        v29 = 0;
        v16 = 0;
        while (2)
        {
          v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 1;
            v16 |= (unint64_t)(v31 & 0x7F) << v28;
            if (v31 < 0)
            {
              v28 += 7;
              v9 = v29++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_84:
        v43 = 40;
        goto LABEL_89;
      case 6u:
        v32 = objc_alloc_init(CLAuthSyncVectorClock);
        objc_msgSend((id)a1, "addVectorClocks:", v32);

        v46 = 0;
        v47 = 0;
        if (!PBReaderPlaceMark(a2, &v46) || (sub_10094D534((uint64_t)v32, a2) & 1) == 0)
          return 0;
        goto LABEL_54;
      case 7u:
        v33 = objc_alloc_init(CLCompanionSyncInterestZone);
        objc_msgSend((id)a1, "addInterestZones:", v33);

        v46 = 0;
        v47 = 0;
        if (PBReaderPlaceMark(a2, &v46) && (sub_10068A390((uint64_t)v33, a2) & 1) != 0)
        {
LABEL_54:
          PBReaderRecallMark(a2, &v46);
LABEL_95:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      case 8u:
        v34 = 0;
        v35 = 0;
        v16 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v36 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v36 == -1 || v36 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v37 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 1;
            v16 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              v9 = v35++ >= 9;
              if (v9)
              {
                LODWORD(v16) = 0;
                goto LABEL_88;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v16) = 0;
LABEL_88:
        v43 = 32;
LABEL_89:
        *(_DWORD *)(a1 + v43) = v16;
        goto LABEL_95;
      case 9u:
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 60) |= 0x10u;
        while (2)
        {
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 1;
            v40 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              v9 = v39++ >= 9;
              if (v9)
              {
                v40 = 0;
                goto LABEL_93;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v40 = 0;
LABEL_93:
        v44 = v40 != 0;
        v45 = 57;
LABEL_94:
        *(_BYTE *)(a1 + v45) = v44;
        goto LABEL_95;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_95;
    }
  }
}

void sub_100C51218(id a1)
{
  qword_1023073D8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPressureCalibrationDatabaseSilo"));
}

uint64_t sub_100C512D4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100C52B84;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023113F0 != -1)
    dispatch_once(&qword_1023113F0, block);
  return qword_1023113E8;
}

void sub_100C51474(id a1)
{
  if (sub_1000824CC())
  {
    if (sub_100761D14())
      byte_1023073E8 = 1;
  }
}

void sub_100C514A0(_QWORD *a1)
{
  sub_1011FD80C(a1);
}

void sub_100C516D8(_Unwind_Exception *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v27;

  if (__p)
    operator delete(__p);
  sub_100B4A370(v25, a2);
  v27 = (void *)v22[35];
  if (v27)
  {
    v22[36] = v27;
    operator delete(v27);
  }
  sub_1006322C0(v24);
  sub_100C52A00(v23);
  sub_1011FD9DC(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100C5176C(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10217BCC0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100C517EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100C51808(uint64_t a1@<X8>)
{
  _BYTE *v2;
  int v3;
  void *__p[2];
  uint64_t v5;

  sub_1015A2E04(__p, "");
  *(_QWORD *)a1 = 0x400000000;
  *(_WORD *)(a1 + 8) = 0;
  v2 = (_BYTE *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_100115CE4(v2, __p[0], (unint64_t)__p[1]);
    v3 = SHIBYTE(v5);
    *(_QWORD *)(a1 + 40) = 0;
    if (v3 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v2 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v5;
    *(_QWORD *)(a1 + 40) = 0;
  }
}

void sub_100C5188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100C518A8(uint64_t a1)
{
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
  sub_1000CDA68(a1 + 128, "SELECT Round, TemperatureOffsetCoefficient, MedianAbsoluteDeviation FROM PressureCalibration WHERE Round IN (SELECT DISTINCT Round FROM PressureCalibration ORDER BY Round DESC LIMIT ?) ORDER BY Round");
}

void sub_100C51C78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_100C51CBC(uint64_t a1)
{
  io_service_t MatchingService;
  void *CFProperty;
  CFTypeID v4;
  int *v5;
  char *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  char *v11;
  int v12;
  NSObject *v14;
  float v15;
  float v16;
  NSObject *v17;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  _BYTE v30[10];
  __int16 v31;
  int v32;
  uint8_t buf[4];
  _BYTE v34[10];
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  const __CFString *v40;
  NSDictionary *v41;
  const __CFString *v42;
  const __CFString *v43;

  v42 = CFSTR("name");
  v43 = CFSTR("pressure");
  v40 = CFSTR("IOPropertyMatch");
  v41 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v43, &v42, 1);
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v41, &v40, 1));
  CFProperty = (void *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("pressure-offset-calibration"), kCFAllocatorDefault, 0);
  IOObjectRelease(MatchingService);
  if (CFProperty)
  {
    v4 = CFGetTypeID(CFProperty);
    if (v4 == CFDataGetTypeID())
    {
      v5 = (int *)objc_msgSend(CFProperty, "bytes");
      v6 = (char *)objc_msgSend(CFProperty, "length");
      if ((unint64_t)v6 <= 3)
      {
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10217BC90);
        v7 = qword_10229FD78;
        if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "data not long enough to get version properly", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_10217BC90);
          LOWORD(v29) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "data not long enough to get version properly", &v29, 2);
          v9 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 0, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v8);
          if (v9 != buf)
            free(v9);
        }
        goto LABEL_54;
      }
      v11 = v6;
      v12 = *v5;
      if (*v5 != 2 && v12 != 5)
      {
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10217BC90);
        v14 = qword_10229FD78;
        if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)v34 = v12;
          *(_WORD *)&v34[4] = 1024;
          *(_DWORD *)&v34[6] = 2;
          LOWORD(v35) = 1024;
          *(_DWORD *)((char *)&v35 + 2) = 5;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "SPPO version (%u) does not match expected versions (%u, %u)", buf, 0x14u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_10217BC90);
          *(_WORD *)&v30[4] = 1024;
          *(_DWORD *)&v30[6] = 2;
          v31 = 1024;
          v32 = 5;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "SPPO version (%u) does not match expected versions (%u, %u)", &v29, 20, 67109632);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 0, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
      }
      if ((unint64_t)(v11 - 20) > 0xFFFFFFFFFFFFFFEFLL)
      {
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10217BC90);
        v21 = qword_10229FD78;
        if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)v34 = 0x4043000000000000;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Warning: using default factory calibrated temperature: %f", buf, 0xCu);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_52;
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10217BC90);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Warning: using default factory calibrated temperature: %f");
      }
      else
      {
        v15 = (float)v5[4];
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10217BC90);
        v16 = v15 * 0.0039062;
        v17 = qword_10229FD78;
        if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(double *)v34 = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "factory calibrated temperature from syscfg: %f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD70 != -1)
            dispatch_once(&qword_10229FD70, &stru_10217BC90);
          v29 = 134217984;
          *(double *)v30 = v16;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "factory calibrated temperature from syscfg: %f", COERCE_DOUBLE(&v29));
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        if (v16 >= 10.0 && v16 <= 70.0)
          goto LABEL_53;
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10217BC90);
        v19 = qword_10229FD78;
        if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)v34 = v16;
          *(_WORD *)&v34[8] = 2048;
          v35 = 0x4024000000000000;
          v36 = 2048;
          v37 = 0x4051800000000000;
          v38 = 2048;
          v39 = 0x4043000000000000;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "Warning: factory calibrated temperature (%f) is not within acceptable bounds: [%f, %f], using default: %f", buf, 0x2Au);
        }
        if (!sub_1001BFF7C(115, 2))
        {
LABEL_52:
          v16 = 38.0;
LABEL_53:
          *(float *)(a1 + 4) = v16;
LABEL_54:

          return;
        }
        bzero(buf, 0x65CuLL);
        if (qword_10229FD70 != -1)
          dispatch_once(&qword_10229FD70, &stru_10217BC90);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Warning: factory calibrated temperature (%f) is not within acceptable bounds: [%f, %f], using default: %f");
      }
      v26 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v20);
      if (v26 != buf)
        free(v26);
      goto LABEL_52;
    }
  }
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10217BC90);
  v10 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Cannot get SPPO property", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10217BC90);
    LOWORD(v29) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Cannot get SPPO property", &v29, 2);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 0, "static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  if (CFProperty)
    CFRelease(CFProperty);
}

BOOL sub_100C52638(int **a1, float *a2)
{
  int *v3;
  int *v4;
  unint64_t v5;
  int *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  int v17;
  const void *v18;
  NSObject *v20;
  unint64_t v21;
  float v22;
  float v23;
  unint64_t v25;
  const char *v26;
  uint8_t *v27;
  void *__p[4];
  uint8_t buf[1640];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (v4 - *a1);
  if (v5 <= 2)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10217BC90);
    v20 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "size of tco list (%lu) is less than minimum (%d) required for median computation", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_10217BC90);
      v25 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
      LODWORD(__p[0]) = 134218240;
      *(void **)((char *)__p + 4) = (void *)v25;
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "size of tco list (%lu) is less than minimum (%d) required for median computation", __p, 18);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLPressureCalibrationDatabase::computeMedianTemperatureOffsetCoefficient(const std::vector<TemperatureOffsetCoefficientRound>, CLMotionTypePressureBiasFit &)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    *a2 = 0.0;
  }
  else
  {
    memset(__p, 0, 24);
    if (v5 <= 9)
      v6 = v3;
    else
      v6 = v4 - 30;
    if (v4 == v6)
    {
      v7 = 0;
      v18 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        v8 = *v6;
        if (v7 >= __p[2])
        {
          v9 = (char *)__p[0];
          v10 = (v7 - (char *)__p[0]) >> 2;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62)
            sub_100259694();
          v12 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 1 > v11)
            v11 = v12 >> 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
            v13 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            v14 = (char *)sub_100260634((uint64_t)&__p[2], v13);
            v9 = (char *)__p[0];
            v7 = (char *)__p[1];
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[4 * v10];
          *(_DWORD *)v15 = v8;
          v16 = v15 + 4;
          while (v7 != v9)
          {
            v17 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v15 - 1) = v17;
            v15 -= 4;
          }
          __p[0] = v15;
          __p[1] = v16;
          __p[2] = &v14[4 * v13];
          if (v9)
            operator delete(v9);
          v7 = (char *)v16;
        }
        else
        {
          *(_DWORD *)v7 = v8;
          v7 += 4;
        }
        __p[1] = v7;
        v6 += 3;
      }
      while (v6 != v4);
      v18 = __p[0];
    }
    memset(buf, 0, 24);
    sub_10027205C(buf, v18, (uint64_t)v7, (v7 - (_BYTE *)v18) >> 2);
    v23 = sub_10053EDE8(*(float **)buf, *(float **)&buf[8], v22);
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    *a2 = v23;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return v5 > 2;
}

void sub_100C529BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C52A00(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217BCC0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *sub_100C52A74@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

_QWORD *sub_100C52AEC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100C52B64()
{
  return 1;
}

uint64_t sub_100C52B6C()
{
  return 1;
}

uint64_t sub_100C52B74()
{
  return 1;
}

uint64_t sub_100C52B7C()
{
  return 1;
}

void sub_100C52B84()
{
  operator new();
}

void sub_100C52BCC()
{
  operator delete();
}

void sub_100C52BF0(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10217BC90);
  v4 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Starting pressure calibration, user initiated, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10217BC90);
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Starting pressure calibration, user initiated, %d", v10);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPressureCalibrationDatabase::startCalibration(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if (!*(_QWORD *)(a1 + 328))
    goto LABEL_13;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10217BC90);
  v5 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Pressure dispatcher was expected to be null.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10217BC90);
    LOWORD(v10[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 17, "Pressure dispatcher was expected to be null.", v10, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLPressureCalibrationDatabase::startCalibration(BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  if (!*(_QWORD *)(a1 + 328))
LABEL_13:
    operator new();
}

void sub_100C52F28()
{
  operator delete();
}

void sub_100C52F54(__n128 *a1, uint64_t a2)
{
  CLProfilingIdentify("CLPressureCalibrationDatabase::onPressureData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 48), "silo"), "assertInside");
  sub_100C53A30(a2, a1);
}

uint64_t sub_100C52F94(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 288);
  if (*(_QWORD *)(result + 280) == v1)
  {
    v3 = 0;
    goto LABEL_5;
  }
  v2 = *(_DWORD *)(v1 - 4);
  if ((v2 & 0x80000000) == 0)
  {
    v3 = v2 + 1;
LABEL_5:
    *(_DWORD *)(result + 264) = v3;
    return result;
  }
  v4 = sub_101923C14();
  return sub_100C52FCC(v4);
}

uint64_t sub_100C52FCC(uint64_t result)
{
  *(_DWORD *)(result + 264) = -1;
  return result;
}

uint64_t sub_100C52FD8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  const char *v10;
  char *v11;
  double v12;
  void *__p;
  void *v14;
  uint64_t v15;
  float v16[3];
  int v17;
  int v18;
  unsigned __int8 v19;
  _QWORD v20[6];
  int v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  _BYTE buf[22];
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;

  sub_100B4A9B0(a1 + 344, *(_DWORD *)(a1 + 336), (uint64_t)v16);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 268) = *(_QWORD *)v16;
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10217BC90);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219008;
    *(double *)&buf[4] = v16[0];
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v16[1];
    v32 = 1024;
    v33 = v17;
    v34 = 1024;
    v35 = v18;
    v36 = 1024;
    v37 = v19;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "temperatureOffsetCoefficient,%f,medianAbsoluteDeviation,%f,minTemp,%d,maxTemp,%d,valid,%d", buf, 0x28u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10217BC90);
    v21 = 134219008;
    v22 = v16[0];
    v23 = 2048;
    v24 = v16[1];
    v25 = 1024;
    v26 = v17;
    v27 = 1024;
    v28 = v18;
    v29 = 1024;
    v30 = v19;
    LODWORD(v12) = 40;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "temperatureOffsetCoefficient,%f,medianAbsoluteDeviation,%f,minTemp,%d,maxTemp,%d,valid,%d", COERCE_DOUBLE(&v21), v12, (_DWORD)__p, (_DWORD)v14, v15);
    v11 = (char *)v10;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPressureCalibrationDatabase::endRun()", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  if (*(float *)(a1 + 272) <= 0.0025 && v19 != 0)
  {
    v4 = *(_QWORD *)(a1 + 280);
    v5 = *(_QWORD *)(a1 + 288);
    if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) < 0x64 || v4 == v5)
      v7 = -1;
    else
      v7 = *(_DWORD *)(v4 + 8);
    sub_100C53360(a1, v7);
    sub_100C534D4(a1, v7);
    __p = 0;
    v14 = 0;
    v15 = 0;
    sub_100C55970(&__p, *(const void **)(a1 + 280), *(_QWORD *)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 288) - *(_QWORD *)(a1 + 280)) >> 2));
    v8 = sub_100C52638((int **)&__p, (float *)(a1 + 312));
    *(_BYTE *)(a1 + 304) = v8;
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
      v8 = *(unsigned __int8 *)(a1 + 304);
    }
    *(_DWORD *)(a1 + 264) = -1;
    if (v8)
    {
      *(_OWORD *)buf = *(_OWORD *)(a1 + 312);
      v21 = 0;
      (*(void (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 + 16) + 152))(a1 + 16, &v21, buf, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return sub_10047F25C(v20);
}

void sub_100C53320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_10047F25C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C53360(uint64_t a1, int a2)
{
  uint64_t v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v4 = a1 + 128;
  sub_10001E638(a1 + 128);
  if ((a2 & 0x80000000) == 0 && !*(_BYTE *)(a1 + 473))
    sub_1000CDA68(v4, "DELETE FROM PressureCalibration WHERE Round <= ?");
  sub_100087AF4((_QWORD *)(a1 + 456), &v11);
  v5 = (sqlite3_stmt *)sub_100026CC8(v11);
  sub_1000CD75C(v5, 1, *(_DWORD *)(a1 + 276));
  v6 = (sqlite3_stmt *)sub_100026CC8(v11);
  sub_1000890C4(v6, 2, *(float *)(a1 + 268));
  v7 = (sqlite3_stmt *)sub_100026CC8(v11);
  sub_1000890C4(v7, 3, *(float *)(a1 + 272));
  v8 = (sqlite3_stmt *)sub_100026CC8(v11);
  sub_10023C9B0(v4, v8);
  sub_10001E99C(v4);
  if (*(uint64_t *)(a1 + 216) <= 0)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v9 = *(_QWORD *)(a1 + 216);
  sub_100053048(v4, v9);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_100C53498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  _Unwind_Resume(exception_object);
}

char *sub_100C534D4(uint64_t a1, int a2)
{
  char *v4;
  char *v5;
  size_t v6;
  uint64_t v8;

  if (a2 < 0)
  {
    v4 = *(char **)(a1 + 288);
  }
  else
  {
    v5 = *(char **)(a1 + 280);
    v4 = *(char **)(a1 + 288);
    if (v5 != v4)
    {
      while (*((_DWORD *)v5 + 2) != a2)
      {
        v5 += 12;
        if (v5 == v4)
          goto LABEL_11;
      }
    }
    if (v5 != v4)
    {
      v6 = v4 - (v5 + 12);
      if (v4 != v5 + 12)
        memmove(v5, v5 + 12, v6);
      v4 = &v5[v6];
      *(_QWORD *)(a1 + 288) = &v5[v6];
    }
  }
LABEL_11:
  if (*(char **)(a1 + 280) == v4 || *((_DWORD *)v4 - 1) < *(_DWORD *)(a1 + 276))
    return sub_100C53750(a1 + 280, v4, a1 + 268);
  v8 = sub_101923D90();
  return (char *)nullsub_1091(v8);
}

void sub_100C53588(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10217BC90);
  v2 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Stopped pressure calibration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10217BC90);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Stopped pressure calibration", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPressureCalibrationDatabase::teardown()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_QWORD *)(a1 + 328))
  {
    v3 = sub_1000824CC();
    sub_1000A4A6C(v3, 0, *(_QWORD *)(a1 + 328));
    v4 = *(_QWORD *)(a1 + 328);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 328) = 0;
  }
  sub_100B4BC30(a1 + 344);
}

char *sub_100C53750(uint64_t a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v14 > 0x1555555555555555)
      sub_100259694();
    v15 = __src - v13;
    v16 = 0xAAAAAAAAAAAAAAABLL * ((__src - v13) >> 2);
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)v13) >> 2);
    if (2 * v17 > v14)
      v14 = 2 * v17;
    if (v17 >= 0xAAAAAAAAAAAAAAALL)
      v18 = 0x1555555555555555;
    else
      v18 = v14;
    v33 = a1 + 16;
    if (v18)
      v19 = (char *)sub_100821B78(a1 + 16, v18);
    else
      v19 = 0;
    v22 = &v19[12 * v16];
    __p = v19;
    v30 = v22;
    v31 = v22;
    v32 = &v19[12 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v24 = 1;
        else
          v24 = 2 * v16;
        v25 = (char *)sub_100821B78(v8, v24);
        v22 = &v25[12 * (v24 >> 2)];
        __p = v25;
        v30 = v22;
        v32 = &v25[12 * v26];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v23 = v16 + 2;
        if (v16 >= -1)
          v23 = v16 + 1;
        v22 -= 12 * (v23 >> 1);
        v30 = v22;
      }
    }
    v27 = *(_QWORD *)v3;
    *((_DWORD *)v22 + 2) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)v22 = v27;
    v31 = v22 + 12;
    v4 = (char *)sub_100C55A38((void **)a1, (uint64_t)&__p, v4);
    if (v31 != v30)
      v31 = &v30[(v31 - v30 - 12) % 0xCuLL];
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    v21 = *(_QWORD *)a3;
    *((_DWORD *)__src + 2) = *(_DWORD *)(a3 + 8);
    *(_QWORD *)__src = v21;
    *(_QWORD *)(a1 + 8) = __src + 12;
  }
  else
  {
    v9 = __src + 12;
    v10 = v6 - 12;
    v11 = *(_QWORD *)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_QWORD *)v10;
      *(_DWORD *)(v11 + 8) = *((_DWORD *)v10 + 2);
      *(_QWORD *)v11 = v12;
      v11 += 12;
      v10 += 12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(__src + 12, __src, v6 - v9);
    if ((unint64_t)v4 <= v3)
      v3 += 12 * (*(_QWORD *)(a1 + 8) > v3);
    v20 = *(_QWORD *)v3;
    *((_DWORD *)v4 + 2) = *(_DWORD *)(v3 + 8);
    *(_QWORD *)v4 = v20;
  }
  return v4;
}

void sub_100C539C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100C53A10(uint64_t a1, _OWORD *a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 304);
  if (*(_BYTE *)(a1 + 304))
    *a2 = *(_OWORD *)(a1 + 312);
  return v2 != 0;
}

void sub_100C53A30(uint64_t a1, __n128 *a2)
{
  NSObject *v4;
  double v5;
  double v6;
  unint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  const char *v11;
  uint8_t *v12;
  double v13;
  int v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  unint64_t v19;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  unint64_t v25;

  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_10217BC90);
  v4 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v5 = a2->n128_f32[2];
    v6 = a2->n128_f32[3];
    v7 = a2->n128_u64[0];
    *(_DWORD *)buf = 134218496;
    v21 = v5;
    v22 = 2048;
    v23 = v6;
    v24 = 2048;
    v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "pressure,%f,temperature,%f,timestamp,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_10217BC90);
    v8 = a2->n128_f32[2];
    v9 = a2->n128_f32[3];
    v10 = a2->n128_u64[0];
    v14 = 134218496;
    v15 = v8;
    v16 = 2048;
    v17 = v9;
    v18 = 2048;
    v19 = v10;
    LODWORD(v13) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "pressure,%f,temperature,%f,timestamp,%f", COERCE_DOUBLE(&v14), v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLPressureCalibrationDatabase::onPressureData(const CLPressure::Sample *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  sub_100B4B27C(a1 + 344, a2);
}

void sub_100C53C30()
{
  operator new();
}

void sub_100C53CDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_100C53D18(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_10217BE50;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100C53DF0(_QWORD *a1, uint64_t a2)
{
  sub_100C55910(a1, a2);
  operator delete();
}

_QWORD *sub_100C53E14(uint64_t a1, uint64_t a2)
{
  return sub_100C55910((_QWORD *)(a1 - 16), a2);
}

void sub_100C53E1C(uint64_t a1, uint64_t a2)
{
  sub_100C55910((_QWORD *)(a1 - 16), a2);
  operator delete();
}

void sub_100C53E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217BBB0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10217BBB0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::removeClient(int) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100C540B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022FA980);
}

uint64_t sub_100C540CC(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[1638];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100C56960();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022FA981;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217BBB0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217BBB0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_100C54528(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217BBB0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217BBB0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_100C547A8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217BBB0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217BBB0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100C54B30(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = (char *)operator new(0x28uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_10217BDE0;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 24) = *a3;
  *(_QWORD *)&v13 = v6 + 24;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_100C54C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C54C18(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217BBB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x28uLL);
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_10217BDE0;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 24) = *a3;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100C55B04();
    os_activity_scope_leave(&state);
  }
}

void sub_100C55250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100C5529C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217BBB0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217BBB0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217BBB0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217BBB0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217BBB0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217BBB0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100C55848(uint64_t a1)
{
  sub_100C56900(a1);
  operator delete();
}

void sub_100C5586C(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  uint64_t v5;
  int v6;

  v3 = a2;
  sub_100C560B4(a3, a2);
  if (v5)
  {
    v6 = v3;
    (*(void (**)(_QWORD, int *, uint64_t, _QWORD))(a1 + 24))(0, &v6, v5, *(_QWORD *)(a1 + 32));
  }
}

void sub_100C558B8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100C558E4(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

_QWORD *sub_100C55910(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  *a1 = off_10217B9A0;
  a1[2] = off_10217BA18;
  v3 = (uint64_t)(a1 + 2);
  sub_100B4A370(a1 + 43, a2);
  v4 = (void *)a1[35];
  if (v4)
  {
    a1[36] = v4;
    operator delete(v4);
  }
  sub_1006322C0(a1 + 16);
  sub_100C52A00(v3);
  return sub_1011FD9DC(a1);
}

_QWORD *sub_100C55970(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_100C559E8(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100C559CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100C559E8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    sub_100259694();
  result = (char *)sub_100821B78((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

_DWORD *sub_100C55A38(void **a1, uint64_t a2, char *__src)
{
  _DWORD *v5;
  char *v6;
  _DWORD *v7;
  char *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  int64_t v13;
  char *v14;
  void *v15;
  void *v16;

  v5 = *(_DWORD **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(_DWORD **)(a2 + 8);
    do
    {
      v9 = *(_QWORD *)(v8 - 12);
      v8 -= 12;
      v10 = *((_DWORD *)v8 + 2);
      *(_QWORD *)(v7 - 3) = v9;
      v7 -= 3;
      v7[2] = v10;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v11 = a1[1];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    v7 = *(_DWORD **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v12 + v13;
  v14 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v14;
  v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

void sub_100C55B04()
{
  operator new();
}

void sub_100C55B94(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        sub_100C560B4(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, uint64_t, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_100C55F68(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10217BBB0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10217BBB0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_100C55F68(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t v14;
  int *v15;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    sub_100C560B4(a4, a2);
    v10 = v9;
    v11 = *(_QWORD *)a3 + 80;
    v12 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v15 = (int *)(*(_QWORD *)a2 + 32);
    v13 = sub_1001AFE94(v12, v15, (uint64_t)&unk_101B9EB60, &v15);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v14);
  }
  return result;
}

void sub_100C56044(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10217BDE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C56058(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10217BDE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100C56094(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_100C560B4(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    sub_100C5612C(a1);
  }
  else
  {
    v5 = objc_opt_class(CLCppContainer, v4);
    if ((objc_opt_isKindOfClass(a1, v5) & 1) != 0)
      sub_100C564B4(a1);
  }
}

void sub_100C5612C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
  {
    sub_100C56860((uint64_t)&v7 + 7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217BE20);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1F472 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10217BE20);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
LABEL_21:
      v6 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureCalibrationDatabase_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217BE20);
    v5 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1F472 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10217BE20);
      LODWORD(v8) = 134218498;
      HIDWORD(v8) = (_DWORD)v2;
      LODWORD(v7) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, v7, v8);
      goto LABEL_21;
    }
  }
}

id sub_100C564B4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217BE20);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1F472 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217BE20);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217BE20);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C1F472 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10217BE20);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureCalibrationDatabase_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100C56860(uint64_t a1, void *a2)
{
  void *v3;

  if (objc_msgSend(a2, "cppObjectPtr")
    || !objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221BEE8))
  {
    goto LABEL_5;
  }
  if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") == (id)16)
  {
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
LABEL_5:
    objc_msgSend(a2, "cppObjectPtr");
    return;
  }
  v3 = (void *)sub_101923F0C();
  sub_100C568D4(v3);
}

void sub_100C568D4(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_100C56900(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_10217BE50;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100C56960()
{
  operator new();
}

uint64_t sub_100C569F0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_100C56AB4(id a1)
{
  qword_1023073F8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLCapabilityMonitorSilo"));
}

id sub_100C56CF4(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, void *a4)
{
  return _objc_msgSend(a4, "onDarwinNotification:data:", *a2, *a3);
}

const void **sub_100C56D08(uint64_t a1, unsigned int *a2, const void **a3, void *a4)
{
  uint64_t v5;
  const void *v6;
  const void *v8;

  v5 = *a2;
  v6 = *a3;
  v8 = v6;
  if (v6)
    CFRetain(v6);
  objc_msgSend(a4, "onTelephonyNotification:data:", v5, &v8);
  return sub_1001358BC(&v8);
}

void sub_100C56D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1001358BC((const void **)va);
  _Unwind_Resume(a1);
}

id sub_100C570E8(int8x16_t *a1, uint64_t a2)
{
  int8x16_t v2;
  _QWORD v4[4];
  int8x16_t v5;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100C57148;
  v4[3] = &unk_10217BEB8;
  v2 = a1[2];
  v5 = vextq_s8(v2, v2, 8uLL);
  return objc_msgSend((id)v2.i64[0], "accountsWithAccountType:completion:", a2, v4);
}

id sub_100C57148(uint64_t a1, uint64_t a2)
{
  id v4;
  _QWORD v6[5];
  __int128 v7;

  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100C571BC;
  v6[3] = &unk_10212BBA8;
  v6[4] = a2;
  v7 = *(_OWORD *)(a1 + 32);
  return objc_msgSend(v4, "async:", v6);
}

void sub_100C571BC(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100C57270;
  v3[3] = &unk_10217BE90;
  v3[4] = &v4;
  objc_msgSend(v2, "enumerateObjectsUsingBlock:", v3);
  objc_msgSend(*(id *)(a1 + 40), "setICloudManagedAppleID:", *((unsigned __int8 *)v5 + 24));

  _Block_object_dispose(&v4, 8);
}

void sub_100C57258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100C57270(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "aa_isAccountClass:", AAAccountClassPrimary);
  if ((_DWORD)result)
  {
    result = objc_msgSend(a2, "aa_isManagedAppleID");
    if ((_DWORD)result)
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_100C57578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100C57590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  _QWORD v8[6];

  v6 = objc_msgSend(objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "installedProfileWithIdentifier:", a2), "payloads");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100C57618;
  v8[3] = &unk_10217BF08;
  v8[4] = *(_QWORD *)(a1 + 32);
  v8[5] = a4;
  return objc_msgSend(v6, "enumerateObjectsUsingBlock:", v8);
}

id sub_100C57618(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(objc_msgSend(a2, "type"), "isEqualToString:", CFSTR("com.apple.education"));
  if ((_DWORD)result)
  {
    *a4 = 1;
    **(_BYTE **)(a1 + 40) = 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void sub_100C58458(id a1, CLCapabilityMonitorClientProtocol *a2, BOOL *a3)
{
  -[CLCapabilityMonitorClientProtocol onCapabilityChange](a2, "onCapabilityChange", a3);
}

void sub_100C585CC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100C585F8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_100C58624()
{
  if (qword_102311400 != -1)
    dispatch_once(&qword_102311400, &stru_10217BFD0);
  return qword_1023113F8;
}

_QWORD *sub_100C58668(_QWORD *result)
{
  *result = off_10217C000;
  return result;
}

void sub_100C58680(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v9[7];
  char v10;

  v8 = sub_100127B9C();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100C586FC;
  v9[3] = &unk_1021528C0;
  v9[4] = a1;
  v9[5] = a2;
  v10 = a3;
  v9[6] = a4;
  sub_1000A50A8(v8, (uint64_t)v9);
}

uint64_t sub_100C586FC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

void sub_100C58718(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];

  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100C58778;
  v3[3] = &unk_10212ECA0;
  v3[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v3);
}

uint64_t sub_100C58778(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100C58788@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>)
{
  BOOL v6;
  _BOOL4 v7;
  double v8;
  NSObject *v9;
  _BYTE *v10;
  BOOL v11;
  char v12;
  int v13;
  _QWORD *i;
  NSObject *v15;
  char *v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char *v22;
  BOOL v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  int v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *v33;
  uint64_t v34;
  void **v35;
  __int128 *v36;
  NSObject *v37;
  uint64_t result;
  char v39;
  char *v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  void **v46;
  char *v47;
  char *v48;
  const char *v49;
  unint64_t v50;
  void *v51[2];
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  __int128 v59;
  __int128 v60;
  int v61;
  void *__p[3];
  __int16 v63;
  void **v64;
  int v65;
  _BYTE v66[14];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  unint64_t v74;
  __int16 v75;
  uint64_t v76;
  _BYTE buf[36];
  unint64_t v78;
  _BYTE v79[10];
  __int16 v80;
  __int128 v81;
  void *v82;

  v6 = *(int *)(a1 + 6472) <= 0 && *(_DWORD *)(a1 + 6476) <= 0;
  if (v6 && !sub_100217AA0((_DWORD *)(a1 + 6040)))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    v17 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#alsquery, skip, no location or spectator clients, and location request is not atypical", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_110;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    LOWORD(v65) = 0;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "#alsquery, skip, no location or spectator clients, and location request is not atypical", &v65, 2);
    sub_100512490("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v18);
    goto LABEL_156;
  }
  if (a2[1])
    v7 = sub_100CF233C(*a2);
  else
    v7 = 0;
  v8 = vabdd_f64(*(double *)(a1 + 6456), *(double *)(a1 + 6200));
  if (v8 >= 4.0 || sub_100217AA0((_DWORD *)(a1 + 6040)))
    goto LABEL_18;
  if (v7)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = (int)v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "proceed #alsquery eval due to 5GHz scan, since_last_query_secs, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217C030);
      v65 = 67109120;
      *(_DWORD *)v66 = (int)v8;
      v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "proceed #alsquery eval due to 5GHz scan, since_last_query_secs, %d", &v65);
      sub_100512490("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v48);
      if (v48 != buf)
        free(v48);
    }
LABEL_18:
    v10 = (_BYTE *)(a1 + 6244);
    if (a2[1])
      v11 = *a2 == *(_BYTE *)(a1 + 6520);
    else
      v11 = 0;
    v12 = v11;
    v59 = 0u;
    v60 = 0u;
    v61 = 1065353216;
    v13 = *(_DWORD *)(a1 + 6228);
    if (v13)
    {
      for (i = *(_QWORD **)(*(_QWORD *)(a1 + 3160) + 16); i; i = (_QWORD *)*i)
      {
        *(_QWORD *)buf = i[2];
        sub_1000AF824((uint64_t)&v59, buf, buf);
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217C030);
      v15 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = *((_QWORD *)&v60 + 1);
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#alsquery number of aps in scan history, %lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10217C030);
        v65 = 134217984;
        *(_QWORD *)v66 = *((_QWORD *)&v60 + 1);
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "#alsquery number of aps in scan history, %lu", &v65);
        sub_100512490("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v16);
        if (v16 != buf)
          free(v16);
      }
    }
    else if (&v59 != (__int128 *)(a1 + 1224))
    {
      v61 = *(_DWORD *)(a1 + 1256);
      sub_1001261BC(&v59, *(_QWORD **)(a1 + 1240), 0);
    }
    HIDWORD(v49) = v7;
    if (sub_100182520(a1 + 3248) && (sub_100217A4C(a1 + 3248) & 1) == 0)
    {
      *(_QWORD *)buf = sub_100129380(a1 + 3248);
      sub_1000AF824((uint64_t)&v59, buf, buf);
      v19 = a3;
      v20 = 1;
    }
    else
    {
      v19 = a3;
      v20 = 0;
    }
    v50 = *(_QWORD *)(a1 + 1208);
    v21 = *(_QWORD *)(a1 + 1248);
    if (*(_BYTE *)(a1 + 3152))
    {
      v22 = "alwayson";
LABEL_52:
      v23 = 1;
      goto LABEL_53;
    }
    if (v21)
    {
      v22 = "emergency";
      if (sub_1000709AC((_DWORD *)(a1 + 6040)))
        goto LABEL_52;
      if (!*v10)
        v22 = "nonstandard";
      v23 = 1;
      if (!v13 && !*v10)
      {
        if (*(_BYTE *)(a1 + 6492) != 0 && *(_DWORD *)(a1 + 1564) != 0)
          v22 = "watch";
        else
          v22 = "unknownassociated";
        if (v20 & 1 | (*(_BYTE *)(a1 + 6492) != 0 && *(_DWORD *)(a1 + 1564) != 0))
        {
          v23 = *(_BYTE *)(a1 + 6492) == 0 || *(_DWORD *)(a1 + 1564) == 0;
        }
        else if (*(_BYTE *)(a1 + 1624))
        {
          v23 = 0;
          v22 = "sufficient";
        }
        else if (sub_100217A74((_DWORD *)(a1 + 6040)) || sub_100217A54((_DWORD *)(a1 + 6040)))
        {
          v23 = 0;
          v22 = "cpi";
        }
        else if (*(double *)(a1 + 1428) < 0.0 || *(_DWORD *)(a1 + 1564) < 2u || v50 < v21)
        {
          if (v50)
            v39 = v12;
          else
            v39 = 0;
          if ((v39 & 1) != 0)
          {
            v23 = 0;
            v22 = "defer5Ghz";
          }
          else
          {
            v23 = v50 < 4;
            if (v50 >= 4)
              v22 = "default";
            else
              v22 = "unknownratio";
          }
        }
        else
        {
          v23 = 0;
          v22 = "knownratio";
        }
      }
    }
    else
    {
      v23 = 0;
      v22 = "allknown";
    }
LABEL_53:
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    v24 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v22;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#alsquery, do_query, %d, reason, %s", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217C030);
      v65 = 67109378;
      *(_DWORD *)v66 = v23;
      *(_WORD *)&v66[4] = 2080;
      *(_QWORD *)&v66[6] = v22;
      LODWORD(v49) = 18;
      v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "#alsquery, do_query, %d, reason, %s", &v65, v49);
      sub_100512490("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v40);
      if (v40 != buf)
        free(v40);
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    v25 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(_DWORD *)(a1 + 6228);
      v27 = *(_QWORD *)(a1 + 1288);
      *(_DWORD *)buf = 67241730;
      *(_DWORD *)&buf[4] = v23;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = v22;
      *(_WORD *)&buf[18] = 2050;
      *(_QWORD *)&buf[20] = *((_QWORD *)&v60 + 1);
      *(_WORD *)&buf[28] = 1026;
      *(_DWORD *)&buf[30] = v26;
      *(_WORD *)&buf[34] = 2050;
      v78 = v50;
      *(_WORD *)v79 = 2050;
      *(_QWORD *)&v79[2] = v21;
      v80 = 2050;
      *(_QWORD *)&v81 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "@WifiFlow, alsrequest, %{public}d, %{public}s, aps, %{public}lu, type, %{public}d, vni, %{public}ld, %{public}ld, %{public}ld", buf, 0x40u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217C030);
      v41 = *(_DWORD *)(a1 + 6228);
      v42 = *(_QWORD *)(a1 + 1288);
      v65 = 67241730;
      *(_DWORD *)v66 = v23;
      *(_WORD *)&v66[4] = 2082;
      *(_QWORD *)&v66[6] = v22;
      v67 = 2050;
      v68 = *((_QWORD *)&v60 + 1);
      v69 = 1026;
      v70 = v41;
      v71 = 2050;
      v72 = v50;
      v73 = 2050;
      v74 = v21;
      v75 = 2050;
      v76 = v42;
      LODWORD(v49) = 64;
      v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, alsrequest, %{public}d, %{public}s, aps, %{public}lu, type, %{public}d, vni, %{public}ld, %{public}ld, %{public}ld", &v65, v49);
      sub_100512490("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v43);
      if (v43 != buf)
        free(v43);
    }
    if (v23)
    {
      LOBYTE(v65) = 0;
      BYTE2(v74) = 0;
      v28 = *(_DWORD *)(a1 + 6228);
      if (HIDWORD(v49))
      {
        sub_100A470A4(&v58, 2);
      }
      else
      {
        sub_100A470A4(buf, 1);
        v58 = *(_DWORD *)buf;
      }
      sub_10012E3D0((uint64_t)&v53, (uint64_t)&v59);
      v30 = v53;
      v31 = v54;
      v53 = 0;
      v54 = 0;
      *(_QWORD *)buf = v30;
      *(_QWORD *)&buf[8] = v31;
      *(_QWORD *)&buf[16] = v55;
      *(_QWORD *)&buf[24] = v56;
      *(_DWORD *)&buf[32] = v57;
      if (v56)
      {
        v32 = *(_QWORD *)(v55 + 8);
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v32 >= v31)
            v32 %= v31;
        }
        else
        {
          v32 &= v31 - 1;
        }
        *(_QWORD *)(v30 + 8 * v32) = &buf[16];
        v55 = 0;
        v56 = 0;
      }
      BYTE4(v78) = v28 == 0;
      BYTE5(v78) = v28 != 1;
      *(_DWORD *)v79 = v58;
      sub_100C597CC((uint64_t)&v65, (uint64_t *)buf);
      sub_100067AC4((uint64_t)buf);
      sub_100067AC4((uint64_t)&v53);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217C030);
      v33 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v34 = *((_QWORD *)&v60 + 1);
        sub_100A470AC(&v58, __p);
        v35 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28 == 0;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v28 != 1;
        *(_WORD *)&buf[24] = 2082;
        *(_QWORD *)&buf[26] = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#alsquery, create_request, %lu, use_cache, %d, query_nearbys, %d, config, %{public}s", buf, 0x22u);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10217C030);
        v44 = qword_1022A0058;
        v45 = (void *)*((_QWORD *)&v60 + 1);
        sub_100A470AC(&v58, v51);
        if (v52 >= 0)
          v46 = v51;
        else
          v46 = (void **)v51[0];
        LODWORD(__p[0]) = 134218754;
        *(void **)((char *)__p + 4) = v45;
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = v28 == 0;
        WORD1(__p[2]) = 1024;
        HIDWORD(__p[2]) = v28 != 1;
        v63 = 2082;
        v64 = v46;
        LODWORD(v49) = 34;
        v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v44, 1, "#alsquery, create_request, %lu, use_cache, %d, query_nearbys, %d, config, %{public}s", __p, v49);
        if (v52 < 0)
          operator delete(v51[0]);
        sub_100512490("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v47);
        if (v47 != buf)
          free(v47);
      }
      sub_1015A2E04(__p, v22);
      sub_10055CDBC((uint64_t)buf, (uint64_t)&v65);
      v81 = *(_OWORD *)__p;
      v82 = __p[2];
      memset(__p, 0, sizeof(__p));
      sub_100C59D70(v19, (uint64_t)buf);
      if (SHIBYTE(v82) < 0)
        operator delete((void *)v81);
      if (v79[4])
        sub_100067AC4((uint64_t)buf);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      if (!BYTE2(v74))
        goto LABEL_104;
      v29 = &v65;
    }
    else
    {
      buf[0] = 0;
      v79[4] = 0;
      sub_100C59D28(v19, (uint64_t)buf);
      if (!v79[4])
      {
LABEL_104:
        v36 = &v59;
        return sub_100067AC4((uint64_t)v36);
      }
      v29 = (int *)buf;
    }
    sub_100067AC4((uint64_t)v29);
    goto LABEL_104;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10217C030);
  v37 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "blocking #alsquery, too soon, since_last_query_secs, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    v65 = 67109120;
    *(_DWORD *)v66 = (int)v8;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "blocking #alsquery, too soon, since_last_query_secs, %d", &v65);
    sub_100512490("Generic", 1, 0, 2, "HandleEvent::alsRequestResultPair CL::Wifi1::Policies::AlsQuery::HandleEvent::defaultAlsRequestLogicUsedWhenComputingLocation(const Input &, const std::optional<CLWifiService_Type::ScanType> &) const", "%s\n", v18);
LABEL_156:
    if (v18 != buf)
      free(v18);
  }
LABEL_110:
  buf[0] = 0;
  v79[4] = 0;
  result = sub_100C59D28(a3, (uint64_t)buf);
  if (!v79[4])
    return result;
  v36 = (__int128 *)buf;
  return sub_100067AC4((uint64_t)v36);
}

void sub_100C596E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,char a44)
{
  if (a42)
    sub_100067AC4((uint64_t)&a36);
  sub_100067AC4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_100C59784(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
    sub_100067AC4(a1);
  return a1;
}

uint64_t sub_100C597CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  if (*(_BYTE *)(a1 + 48))
  {
    sub_1000A6464(a1, a2);
    v4 = a2[5];
  }
  else
  {
    sub_10012D080(a1, a2);
    v4 = a2[5];
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_QWORD *)(a1 + 40) = v4;
  return a1;
}

uint64_t sub_100C59828(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(_BYTE *)(a1 + 48))
    sub_100067AC4(a1);
  return a1;
}

void sub_100C59868(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _BYTE v4[56];

  sub_100130768(a2, a1);
  sub_100C598E0(a1, 0, v4);
  sub_100C59DD4((uint64_t)(a2 + 454), (uint64_t)v4);
  if (v4[48])
    sub_100067AC4((uint64_t)v4);
}

void sub_100C598CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100C598E0(uint64_t a1@<X0>, int a2@<W1>, _BYTE *a3@<X8>)
{
  const char *v4;
  _BOOL4 v7;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _DWORD v23[2];
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  uint8_t buf[8];
  _BYTE v29[24];
  int v30;
  int v31;

  *a3 = 0;
  a3[48] = 0;
  if (a2)
    v4 = "reproc";
  else
    v4 = "live";
  if (*(_QWORD *)(a1 + 6400) && *(_DWORD *)(a1 + 6420) != 2)
  {
    v7 = !a2 && sub_100182520(a1 + 3248) && *(_BYTE *)(a1 + 1096) != 0;
    v9 = a2 == 1 && *(_DWORD *)(a1 + 6420) == 1 || v7;
    if (v9 == 1)
    {
      sub_10012E3D0((uint64_t)&v18, a1 + 6376);
      sub_100A470A4(v23, 1);
      v10 = v23[0];
      v11 = v18;
      v12 = v19;
      v18 = 0;
      v19 = 0;
      *(_QWORD *)buf = v11;
      *(_QWORD *)v29 = v12;
      *(_QWORD *)&v29[8] = v20;
      *(_QWORD *)&v29[16] = v21;
      v30 = v22;
      if (v21)
      {
        v13 = *(_QWORD *)(v20 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v13 >= v12)
            v13 %= v12;
        }
        else
        {
          v13 &= v12 - 1;
        }
        *(_QWORD *)(v11 + 8 * v13) = &v29[8];
        v20 = 0;
        v21 = 0;
      }
      v31 = v10;
      sub_100C59CA0((uint64_t)a3, (uint64_t)buf);
      sub_100067AC4((uint64_t)buf);
      sub_100067AC4((uint64_t)&v18);
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217C030);
    v14 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_QWORD *)(a1 + 6400);
      *(_DWORD *)buf = 67240706;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = v4;
      *(_WORD *)&v29[10] = 2050;
      *(_QWORD *)&v29[12] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WsbAls, query, %{public}d, %{public}s, unknown, %{public}ld", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217C030);
      v16 = *(_QWORD *)(a1 + 6400);
      v23[0] = 67240706;
      v23[1] = v9;
      v24 = 2082;
      v25 = v4;
      v26 = 2050;
      v27 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbAls, query, %{public}d, %{public}s, unknown, %{public}ld", v23, 28);
      sub_100512490("Generic", 1, 0, 2, "static std::optional<Decisions::AlsRequestForWsb> CL::Wifi1::Policies::AlsQuery::HandleEvent::shouldQueryForWsb(const Input &, Types::WsbPassType)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
  }
}

void sub_100C59BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (*(_BYTE *)(v21 + 48))
    sub_100067AC4(v21);
  _Unwind_Resume(exception_object);
}

void sub_100C59C28(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _BYTE v4[56];

  sub_100130768(a2, a1);
  sub_100C598E0(a1, 1, v4);
  sub_100C59DD4((uint64_t)(a2 + 454), (uint64_t)v4);
  if (v4[48])
    sub_100067AC4((uint64_t)v4);
}

void sub_100C59C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C59CA0(uint64_t a1, uint64_t a2)
{
  int v4;

  if (*(_BYTE *)(a1 + 48))
  {
    sub_1000A6464(a1, (uint64_t *)a2);
    v4 = *(_DWORD *)(a2 + 40);
  }
  else
  {
    sub_10012D080(a1, (uint64_t *)a2);
    v4 = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_DWORD *)(a1 + 40) = v4;
  return a1;
}

void sub_100C59CFC(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100C59D28(uint64_t result, uint64_t a2)
{
  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    result = sub_10012D080(result, (uint64_t *)a2);
    *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(result + 48) = 1;
  }
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 80) = 0;
  return result;
}

__n128 sub_100C59D70(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    a1 = sub_10012D080(a1, (uint64_t *)a2);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
  result = *(__n128 *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(__n128 *)(a1 + 56) = result;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

void sub_100C59DD4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      sub_1000A6464(a1, (uint64_t *)a2);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    sub_100067AC4(a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    sub_10012D080(a1, (uint64_t *)a2);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_BYTE *)(a1 + 48) = 1;
  }
}

void sub_100C59E4C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_100C59EE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_100C59F00()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_100C59F8C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_100C5A35C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  int v31;
  uint64_t v32;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_45;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_47;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_47:
        v32 = 8;
        goto LABEL_56;
      case 2u:
        v20 = 0;
        v21 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (2)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_51;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_51:
        v32 = 12;
        goto LABEL_56;
      case 3u:
        v25 = 0;
        v26 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        break;
      case 4u:
        *(_BYTE *)(a1 + 24) |= 4u;
        v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v31 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v31 = 0;
        }
        *(_DWORD *)(a1 + 20) = v31;
        continue;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
      v15 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
        goto LABEL_53;
      v25 += 7;
      v10 = v26++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_55;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_53:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v15) = 0;
LABEL_55:
    v32 = 16;
LABEL_56:
    *(_DWORD *)(a1 + v32) = v15;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_100C5ADC4(uint64_t a1)
{
  objc_super v2;

  v2.receiver = *(id *)(a1 + 32);
  v2.super_class = (Class)&OBJC_METACLASS___CLMapsXPCServiceManager;
  qword_102307408 = (uint64_t)objc_msgSend(objc_msgSendSuper2(&v2, "allocWithZone:", 0), "init");
  return objc_msgSend((id)qword_102307408, "createConnection");
}

void sub_100C5B4B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100C5B4CC(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;

  if (qword_1022A00E0 != -1)
    dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
  v4 = qword_1022A00E8;
  if (os_log_type_enabled((os_log_t)qword_1022A00E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v16 = objc_msgSend(a2, "code");
    v17 = 2114;
    v18 = objc_msgSend(a2, "domain");
    v19 = 2113;
    v20 = objc_msgSend(a2, "localizedDescription");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService synchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00E0 != -1)
      dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
    v6 = qword_1022A00E8;
    v9 = 134349571;
    v10 = objc_msgSend(a2, "code");
    v11 = 2114;
    v12 = objc_msgSend(a2, "domain");
    v13 = 2113;
    v14 = objc_msgSend(a2, "localizedDescription");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "CLMM,CLTSP,CLMapHelperService XPCService synchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v9, 32);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100C5B704(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;
  uint8_t buf[4];
  id v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;

  if (qword_1022A00E0 != -1)
    dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
  v4 = qword_1022A00E8;
  if (os_log_type_enabled((os_log_t)qword_1022A00E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v16 = objc_msgSend(a2, "code");
    v17 = 2114;
    v18 = objc_msgSend(a2, "domain");
    v19 = 2113;
    v20 = objc_msgSend(a2, "localizedDescription");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService asynchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00E0 != -1)
      dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
    v6 = qword_1022A00E8;
    v9 = 134349571;
    v10 = objc_msgSend(a2, "code");
    v11 = 2114;
    v12 = objc_msgSend(a2, "domain");
    v13 = 2113;
    v14 = objc_msgSend(a2, "localizedDescription");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "CLMM,CLTSP,CLMapHelperService XPCService asynchronous map data query returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v9, 32);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100C5B93C(uint64_t a1, void *a2)
{
  double v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[2];
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  unsigned int v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;

  v4 = (sub_1001FCBB4() - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v4 > 200.0)
  {
    if (qword_1022A00E0 != -1)
      dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
    v5 = qword_1022A00E8;
    if (os_log_type_enabled((os_log_t)qword_1022A00E8, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v6 = objc_msgSend(a2, "count");
      else
        v6 = -1;
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 64);
      v10 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67241729;
      v34 = v6;
      v35 = 1026;
      v36 = a2 == 0;
      v37 = 2050;
      v38 = v4;
      v39 = 2049;
      v40 = v7;
      v41 = 2049;
      v42 = v8;
      v43 = 2050;
      v44 = v9;
      v45 = 1026;
      v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned data,roadCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00E0 != -1)
        dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
      v12 = qword_1022A00E8;
      if (a2)
        v13 = objc_msgSend(a2, "count");
      else
        v13 = -1;
      v14 = *(_QWORD *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 64);
      v17 = *(unsigned __int8 *)(a1 + 72);
      v20[0] = 67241729;
      v20[1] = v13;
      v21 = 1026;
      v22 = a2 == 0;
      v23 = 2050;
      v24 = v4;
      v25 = 2049;
      v26 = v14;
      v27 = 2049;
      v28 = v15;
      v29 = 2050;
      v30 = v16;
      v31 = 1026;
      v32 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "CLMM,CLTSP,MapHelperService,XPCService returned data,roadCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", v20, 60);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100C5BBFC(uint64_t a1, void *a2)
{
  double v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[2];
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  unsigned int v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;

  v4 = (sub_1001FCBB4() - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v4 > 200.0)
  {
    if (qword_1022A00E0 != -1)
      dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
    v5 = qword_1022A00E8;
    if (os_log_type_enabled((os_log_t)qword_1022A00E8, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v6 = objc_msgSend(a2, "count");
      else
        v6 = -1;
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 64);
      v10 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67241729;
      v34 = v6;
      v35 = 1026;
      v36 = a2 == 0;
      v37 = 2050;
      v38 = v4;
      v39 = 2049;
      v40 = v7;
      v41 = 2049;
      v42 = v8;
      v43 = 2050;
      v44 = v9;
      v45 = 1026;
      v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Basic style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00E0 != -1)
        dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
      v12 = qword_1022A00E8;
      if (a2)
        v13 = objc_msgSend(a2, "count");
      else
        v13 = -1;
      v14 = *(_QWORD *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 64);
      v17 = *(unsigned __int8 *)(a1 + 72);
      v20[0] = 67241729;
      v20[1] = v13;
      v21 = 1026;
      v22 = a2 == 0;
      v23 = 2050;
      v24 = v4;
      v25 = 2049;
      v26 = v14;
      v27 = 2049;
      v28 = v15;
      v29 = 2050;
      v30 = v16;
      v31 = 1026;
      v32 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "CLMM,CLTSP,MapHelperService,XPCService returned Basic style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", v20, 60);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100C5BEBC(uint64_t a1, void *a2)
{
  double v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  _DWORD v20[2];
  __int16 v21;
  _BOOL4 v22;
  __int16 v23;
  double v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  unsigned int v34;
  __int16 v35;
  _BOOL4 v36;
  __int16 v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;

  v4 = (sub_1001FCBB4() - *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)) * 1000.0;
  if (v4 > 200.0)
  {
    if (qword_1022A00E0 != -1)
      dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
    v5 = qword_1022A00E8;
    if (os_log_type_enabled((os_log_t)qword_1022A00E8, OS_LOG_TYPE_DEBUG))
    {
      if (a2)
        v6 = objc_msgSend(a2, "count");
      else
        v6 = -1;
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 56);
      v9 = *(_QWORD *)(a1 + 64);
      v10 = *(unsigned __int8 *)(a1 + 72);
      *(_DWORD *)buf = 67241729;
      v34 = v6;
      v35 = 1026;
      v36 = a2 == 0;
      v37 = 2050;
      v38 = v4;
      v39 = 2049;
      v40 = v7;
      v41 = 2049;
      v42 = v8;
      v43 = 2050;
      v44 = v9;
      v45 = 1026;
      v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,CLTSP,MapHelperService,XPCService returned Extended style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", buf, 0x3Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00E0 != -1)
        dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
      v12 = qword_1022A00E8;
      if (a2)
        v13 = objc_msgSend(a2, "count");
      else
        v13 = -1;
      v14 = *(_QWORD *)(a1 + 48);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(a1 + 64);
      v17 = *(unsigned __int8 *)(a1 + 72);
      v20[0] = 67241729;
      v20[1] = v13;
      v21 = 1026;
      v22 = a2 == 0;
      v23 = 2050;
      v24 = v4;
      v25 = 2049;
      v26 = v14;
      v27 = 2049;
      v28 = v15;
      v29 = 2050;
      v30 = v16;
      v31 = 1026;
      v32 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "CLMM,CLTSP,MapHelperService,XPCService returned Extended style building data,buildingCount,%{public}d,error,%{public}d,responseTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf,syncCall,%{public}d", v20, 60);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "-[CLMapsXPCServiceManager collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:]_block_invoke", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100C5C348(id a1, NSError *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSInteger v8;
  __int16 v9;
  NSString *v10;
  __int16 v11;
  NSString *v12;
  uint8_t buf[4];
  NSInteger v14;
  __int16 v15;
  NSString *v16;
  __int16 v17;
  NSString *v18;

  if (qword_1022A00E0 != -1)
    dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
  v3 = qword_1022A00E8;
  if (os_log_type_enabled((os_log_t)qword_1022A00E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v14 = -[NSError code](a2, "code");
    v15 = 2114;
    v16 = -[NSError domain](a2, "domain");
    v17 = 2113;
    v18 = -[NSError localizedDescription](a2, "localizedDescription");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00E0 != -1)
      dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
    v4 = qword_1022A00E8;
    v7 = 134349571;
    v8 = -[NSError code](a2, "code");
    v9 = 2114;
    v10 = -[NSError domain](a2, "domain");
    v11 = 2113;
    v12 = -[NSError localizedDescription](a2, "localizedDescription");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 16, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v7, 32);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager clearMemoryAndExitHelperProcessCleanly]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

NSTimer *sub_100C5C79C(uint64_t a1)
{
  NSTimer *result;

  result = +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "onTimerFire:", 0, 0, 300.0);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = result;
  return result;
}

void sub_100C5CC90(id a1, NSError *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSInteger v8;
  __int16 v9;
  NSString *v10;
  __int16 v11;
  NSString *v12;
  uint8_t buf[4];
  NSInteger v14;
  __int16 v15;
  NSString *v16;
  __int16 v17;
  NSString *v18;

  if (qword_1022A00E0 != -1)
    dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
  v3 = qword_1022A00E8;
  if (os_log_type_enabled((os_log_t)qword_1022A00E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349571;
    v14 = -[NSError code](a2, "code");
    v15 = 2114;
    v16 = -[NSError domain](a2, "domain");
    v17 = 2113;
    v18 = -[NSError localizedDescription](a2, "localizedDescription");
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00E0 != -1)
      dispatch_once(&qword_1022A00E0, &stru_10217C0D8);
    v4 = qword_1022A00E8;
    v7 = 134349571;
    v8 = -[NSError code](a2, "code");
    v9 = 2114;
    v10 = -[NSError domain](a2, "domain");
    v11 = 2113;
    v12 = -[NSError localizedDescription](a2, "localizedDescription");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 16, "CLMM,CLTSP,CLMapHelperService XPCService returned error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", &v7, 32);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "-[CLMapsXPCServiceManager releaseMapHelperServiceOSTransaction]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_100C5CEC4(id a1)
{
  qword_1022A00E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TripSegmentProcessor");
}

uint64_t sub_100C5CEF0(_DWORD *a1)
{
  if (*a1 == 1)
    return CLMotionActivity::isTypePedestrian(a1[2]);
  else
    return 0;
}

uint64_t sub_100C5CF0C(uint64_t a1)
{
  int v2;
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  sub_100197040();
  v2 = sub_100195F08();
  result = 0;
  if (v2 && *(_DWORD *)a1 == 1)
  {
    v4 = *(_QWORD *)(a1 + 144);
    v5 = v4 > 0x31;
    v6 = (0x23E8000000000uLL >> v4) & 1;
    if (v5)
      return 0;
    else
      return v6;
  }
  return result;
}

BOOL sub_100C5CF64(uint64_t a1)
{
  int v2;
  _BOOL8 result;

  sub_100197040();
  v2 = sub_100195F08();
  result = 0;
  if (v2)
  {
    if (*(_DWORD *)a1 == 1)
      return *(_QWORD *)(a1 + 144) == 27;
  }
  return result;
}

double sub_100C5CFAC(double a1, double a2)
{
  return round(1.0 / a2 * a1) / (1.0 / a2);
}

void sub_100C5D004(id a1)
{
  BOOL v1;
  int v2;

  sub_100197040();
  v1 = 1;
  v2 = sub_1001AA9A8();
  if ((v2 - 139) > 0x2C || ((1 << (v2 + 117)) & 0x1FE7E0000015) == 0)
    v1 = (v2 - 218) < 6;
  byte_102307418 = v1;
}

id sub_100C5E540(uint64_t a1)
{
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "stopDeviceDiscovery");
  return objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "delegate"), "markScanEndTimeFromBoot:withReason:withPolicy:", 5, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 81), sub_1001FCBB4());
}

void sub_100C5EDAC(id a1, NSError *a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  NSString *v8;
  uint8_t buf[4];
  NSString *v10;

  if (a2)
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217C138);
    v3 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v10 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v4 = qword_1022A0158;
      v7 = 138412290;
      v8 = -[NSError localizedDescription](a2, "localizedDescription");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 16, "%@", &v7, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLGatheringBluetoothClient _startAdvertising]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

void sub_100C5FE4C(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  dispatch_time_t v4;

  objc_msgSend(*(id *)(a1 + 32), "_startTimedScanningWithReason:", 9);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 64);
  v4 = dispatch_time(0x8000000000000000, 1000000 * v2);
  dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
}

void sub_100C605B4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  id v11;
  NSObject *v12;
  dispatch_time_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD block[5];
  __int16 v28;
  uint64_t state64;
  uint8_t buf[1640];

  state64 = 0;
  if (!notify_get_state(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 76), &state64))
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = state64 == 0;
  if ((objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "settings"), "scanForceScreenOffOnly") & 1) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 80))
    {
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v2 = qword_1022A0158;
      if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "screen ON transition", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0150 != -1)
          dispatch_once(&qword_1022A0150, &stru_10217C138);
        v28 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "screen ON transition", &v28, 2);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 81))
      {
        if (qword_1022A0150 != -1)
          dispatch_once(&qword_1022A0150, &stru_10217C138);
        v3 = qword_1022A0158;
        if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "request to stop scanning for AOP path due to screen on transition ", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0150 != -1)
            dispatch_once(&qword_1022A0150, &stru_10217C138);
          v28 = 0;
          LODWORD(v26) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "request to stop scanning for AOP path due to screen on transition ", &v28, v26);
          v19 = (uint8_t *)v18;
          sub_100512490("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v18);
          if (v19 != buf)
            free(v19);
        }
        objc_msgSend(*(id *)(a1 + 32), "_cancelExistingStopScanningBlock");
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100C60E68;
        block[3] = &unk_10212BB58;
        block[4] = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = dispatch_block_create((dispatch_block_flags_t)0, block);
        v4 = dispatch_time(0, 1000000000);
        dispatch_after(v4, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 32), "queue"), *(dispatch_block_t *)(*(_QWORD *)(a1 + 32) + 56));
      }
      else
      {
        if (qword_1022A0150 != -1)
          dispatch_once(&qword_1022A0150, &stru_10217C138);
        v9 = qword_1022A0158;
        if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "request to stop scanning for non-AOP path due to screen on transition ", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0150 != -1)
            dispatch_once(&qword_1022A0150, &stru_10217C138);
          v28 = 0;
          LODWORD(v26) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "request to stop scanning for non-AOP path due to screen on transition ", &v28, v26);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        objc_msgSend(*(id *)(a1 + 32), "_stopScanningWithReason:", 2);
      }
    }
    else
    {
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v6 = qword_1022A0158;
      if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "screen OFF transition", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0150 != -1)
          dispatch_once(&qword_1022A0150, &stru_10217C138);
        v28 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "screen OFF transition", &v28, 2);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      v7 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(v7 + 56))
      {
        if (qword_1022A0150 != -1)
          dispatch_once(&qword_1022A0150, &stru_10217C138);
        v8 = qword_1022A0158;
        if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "scanning is ongoing due to non-nil stopScanningBlock", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0150 != -1)
            dispatch_once(&qword_1022A0150, &stru_10217C138);
          v28 = 0;
          LODWORD(v26) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "scanning is ongoing due to non-nil stopScanningBlock", &v28, v26);
          v23 = (uint8_t *)v22;
          sub_100512490("Generic", 1, 0, 2, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
        objc_msgSend(*(id *)(a1 + 32), "_cancelExistingStopScanningBlock");
      }
      else if (*(_BYTE *)(v7 + 81))
      {
        objc_msgSend((id)v7, "_startPermanentScanning");
      }
      else
      {
        objc_msgSend((id)v7, "_startTimedScanningWithReason:", 1);
        v10 = *(_QWORD **)(a1 + 32);
        if (v10[8])
        {
          v11 = objc_msgSend(objc_msgSend(v10, "settings"), "scanPeriodicInterval");
          v12 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 64);
          v13 = dispatch_time(0x8000000000000000, 1000000000 * (_QWORD)v11);
          dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217C138);
    v5 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "screen wake monitor installed unexpectedly", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v28 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 16, "screen wake monitor installed unexpectedly", &v28, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "-[CLGatheringBluetoothClient _installScreenWakeMonitor]_block_invoke", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_100C60E68(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "_stopScanningWithReason:", 2);

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 0;
}

void sub_100C614A4(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  int v5;
  unint64_t v6;
  NSObject *v8;
  int v9;
  NSObject *v10;
  double v11;
  uint8_t *v12;
  uint8_t *v13;
  NSObject *v14;
  int v15;
  uint8_t *v16;
  double v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  const char *v26;
  uint8_t *v27;
  int v28;
  int v29;
  uint8_t buf[4];
  int v31;

  if (!a1)
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217C138);
    v10 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "AP power changed callback with refcon", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217C138);
    LOWORD(v28) = 0;
    v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 16, "AP power changed callback with refcon", &v28, 2);
    v13 = v12;
    sub_100512490("Generic", 1, 0, 0, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n", v11);
LABEL_53:
    if (v13 != buf)
      free(v13);
    return;
  }
  HIDWORD(v6) = a3;
  LODWORD(v6) = a3 + 536870288;
  v5 = v6 >> 4;
  if (v5 > 8)
  {
    if (v5 == 9)
    {
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v20 = qword_1022A0158;
      if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(unsigned __int8 *)(a1 + 80);
        *(_DWORD *)buf = 67109120;
        v31 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "AP is ON, screen is %d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "AP is ON, screen is %d", &v28);
    }
    else
    {
      if (v5 != 11)
        return;
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v14 = qword_1022A0158;
      if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
      {
        v15 = *(unsigned __int8 *)(a1 + 80);
        *(_DWORD *)buf = 67109120;
        v31 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "AP will be ON, screen is %d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "AP will be ON, screen is %d", &v28);
    }
    v13 = v16;
    sub_100512490("Generic", 1, 0, 2, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n", v17);
    goto LABEL_53;
  }
  if (!v5)
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217C138);
    v18 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67109120;
      v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "AP wants to go OFF, screen is %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v25 = *(unsigned __int8 *)(a1 + 80);
      v28 = 67109120;
      v29 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "AP wants to go OFF, screen is %d", &v28);
      v27 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n", v26);
      if (v27 != buf)
        free(v27);
    }
    goto LABEL_34;
  }
  if (v5 == 1)
  {
    if (qword_1022A0150 != -1)
      dispatch_once(&qword_1022A0150, &stru_10217C138);
    v8 = qword_1022A0158;
    if (os_log_type_enabled((os_log_t)qword_1022A0158, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67109120;
      v31 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AP will go OFF, screen is %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0150 != -1)
        dispatch_once(&qword_1022A0150, &stru_10217C138);
      v22 = *(unsigned __int8 *)(a1 + 80);
      v28 = 67109120;
      v29 = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0158, 0, "AP will go OFF, screen is %d", &v28);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void PowerChangedCallback(void *, io_service_t, uint32_t, void *)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    objc_msgSend((id)a1, "_stopScanningWithReason:", 3);
LABEL_34:
    IOAllowPowerChange(*(_DWORD *)(a1 + 72), a4);
  }
}

void sub_100C620DC(id a1)
{
  qword_1022A0158 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

void sub_100C62108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  std::string *v16;
  NSObject *v17;
  _BOOL4 v18;
  int v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  int v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  NSObject *v41;
  int v42;
  int v43;
  int v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  int v49;
  std::string::value_type v50;
  int v51;
  std::string::value_type v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  int v57;
  uint64_t v58;
  void *v59;
  void *v60;
  char v61;
  char v62;
  id v63;
  uint64_t v64;
  void *i;
  const char *p_p;
  CFStringRef v67;
  CFStringRef v68;
  int v69;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  _BOOL4 v77;
  const char *v78;
  char *v79;
  int v80;
  const char *v81;
  char *v82;
  int v83;
  const char *v84;
  char *v85;
  int v86;
  const char *v87;
  char *v88;
  int v89;
  const char *v90;
  char *v91;
  int v92;
  const char *v93;
  char *v94;
  std::string *v95;
  const char *v96;
  char *v97;
  uint64_t v98;
  __int128 v99;
  _QWORD *v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[128];
  int v107;
  std::string *v108;
  __int128 __p;
  char v110;
  std::string v111;
  _BYTE v112[24];
  _BYTE *v113;

  sub_100270E34((uint64_t)v112, a3);
  v101 = a1;
  sub_100E7442C((_QWORD *)a1, a2, (uint64_t)v112);
  v6 = v113;
  if (v113 == v112)
  {
    v7 = 4;
    v6 = v112;
  }
  else
  {
    if (!v113)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  *(_QWORD *)a1 = off_10217C168;
  sub_101311AD0(a1 + 48);
  sub_100C25234(a1 + 456);
  *(_DWORD *)(a1 + 2248) = 0xFFFF;
  *(_QWORD *)(a1 + 2260) = 0;
  *(_QWORD *)(a1 + 2252) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v99 = _Q0;
  *(_OWORD *)(a1 + 2268) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 2284) = _Q0;
  *(_OWORD *)(a1 + 2300) = _Q0;
  *(_OWORD *)(a1 + 2316) = _Q0;
  *(_DWORD *)(a1 + 2332) = 0;
  *(_QWORD *)(a1 + 2336) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2352) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_DWORD *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2372) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_QWORD *)(a1 + 2384) = 0;
  *(_BYTE *)(a1 + 2400) = 0;
  v100 = (_QWORD *)(a1 + 2408);
  *(_DWORD *)(a1 + 2416) = 0;
  *(_QWORD *)(a1 + 2408) = 0;
  *(_QWORD *)(a1 + 2424) = 0x4082C00000000000;
  *(_OWORD *)(a1 + 2432) = 0u;
  *(_OWORD *)(a1 + 2448) = 0u;
  *(_QWORD *)(a1 + 2464) = 0;
  *(_QWORD *)(a1 + 2472) = nullsub_1093;
  *(_WORD *)(a1 + 2480) = 0;
  *(_QWORD *)(a1 + 2488) = 0;
  sub_1015A2E04(&__p, "CLTrackRunMapQueryTransaction");
  sub_100D82360(a1 + 2496, &__p);
  if (v110 < 0)
    operator delete((void *)__p);
  *(_WORD *)(a1 + 2528) = 256;
  sub_10117EF38((_OWORD *)(a1 + 2536));
  *(_DWORD *)(a1 + 2584) = 0xFFFF;
  *(_OWORD *)(a1 + 2588) = 0u;
  *(_OWORD *)(a1 + 2604) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 2620) = v99;
  *(_OWORD *)(a1 + 2636) = v99;
  *(_OWORD *)(a1 + 2652) = v99;
  *(_DWORD *)(a1 + 2668) = 0;
  *(_QWORD *)(a1 + 2672) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2696) = 0;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_QWORD *)(a1 + 2700) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2708) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 2712) = 0;
  *(_OWORD *)(a1 + 2720) = 0u;
  *(_BYTE *)(a1 + 2736) = 0;
  *(_QWORD *)(a1 + 2744) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2788) = 0;
  *(_BYTE *)(a1 + 2792) = 0;
  *(_QWORD *)(a1 + 2800) = 0;
  *(_WORD *)(a1 + 2784) = 0;
  *(_OWORD *)(a1 + 2768) = 0u;
  *(_OWORD *)(a1 + 2752) = 0u;
  *(_BYTE *)(a1 + 2808) = 1;
  *(_QWORD *)(a1 + 2816) = 0x5FFFFFFFFLL;
  *(_DWORD *)(a1 + 2824) = 3;
  *(_DWORD *)(a1 + 2828) = 16777217;
  *(_QWORD *)(a1 + 2832) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2840) = 0;
  *(_QWORD *)(a1 + 2848) = 0;
  *(_QWORD *)(a1 + 2856) = 0x600000006;
  *(_QWORD *)(a1 + 2880) = 0;
  *(_OWORD *)(a1 + 2864) = 0u;
  *(_QWORD *)(a1 + 2888) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2896) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 2904) = 0;
  *(_OWORD *)(a1 + 2912) = 0u;
  sub_100270E34(a1 + 2928, a3);
  objc_msgSend(*(id *)(a1 + 8), "silo");
  sub_100197040();
  if (sub_10075CD90())
  {
    sub_1015A2E04(&v111, "geomapfeatureaccess");
    sub_1001E4804(&__p);
    sub_1000BCB64(__p, "MapMatchingGeometryType", &v111);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v16 = &v111;
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)v111.__r_.__value_.__r.__words[0];
      LODWORD(__p) = 136446210;
      *(_QWORD *)((char *)&__p + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLMM,MapMatchingGeometryType,%{public}s", (uint8_t *)&__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v95 = &v111;
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v95 = (std::string *)v111.__r_.__value_.__r.__words[0];
      v107 = 136446210;
      v108 = v95;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,MapMatchingGeometryType,%{public}s", &v107, 12);
      v97 = (char *)v96;
      sub_100512490("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v96);
      if (v97 != (char *)&__p)
        free(v97);
    }
    operator new();
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10217C380);
  v17 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v18 = *v100 != 0;
    LODWORD(__p) = 67240192;
    DWORD1(__p) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM, PlatformSupportsMapMatching, %{public}d", (uint8_t *)&__p, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v77 = *v100 != 0;
    LODWORD(v111.__r_.__value_.__l.__data_) = 67240192;
    HIDWORD(v111.__r_.__value_.__r.__words[0]) = v77;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM, PlatformSupportsMapMatching, %{public}d", &v111, 8);
    v79 = (char *)v78;
    sub_100512490("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v78);
    if (v79 != (char *)&__p)
      free(v79);
  }
  LOBYTE(v107) = 0;
  sub_1001E4804(&__p);
  v19 = sub_1001E4874(__p, "EnableNMEAMapMatching", (BOOL *)&v107);
  v20 = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (!*((_QWORD *)&__p + 1))
    goto LABEL_31;
  v22 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
    if (!v20)
    {
LABEL_33:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v24 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(unsigned __int8 *)(v101 + 2528);
        LODWORD(__p) = 67240192;
        DWORD1(__p) = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLMM, EnableNMEAMapMatching, %{public}d", (uint8_t *)&__p, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v80 = *(unsigned __int8 *)(v101 + 2528);
        LODWORD(v111.__r_.__value_.__l.__data_) = 67240192;
        HIDWORD(v111.__r_.__value_.__r.__words[0]) = v80;
        LODWORD(v98) = 8;
        _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM, EnableNMEAMapMatching, %{public}d", &v111, v98);
        v82 = (char *)v81;
        sub_100512490("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v81);
        if (v82 != (char *)&__p)
          free(v82);
      }
      sub_1001E4804(&__p);
      v26 = sub_1001E4874(__p, "EnableVerboseMapMatching", (BOOL *)&v107);
      v27 = v26;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
      if (!*((_QWORD *)&__p + 1))
        goto LABEL_42;
      v29 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        if (!v27)
        {
LABEL_44:
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217C380);
          v31 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v32 = *(unsigned __int8 *)(v101 + 2529);
            LODWORD(__p) = 67240192;
            DWORD1(__p) = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLMM, EnableVerboseMapMatching, %{public}d", (uint8_t *)&__p, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217C380);
            v83 = *(unsigned __int8 *)(v101 + 2529);
            LODWORD(v111.__r_.__value_.__l.__data_) = 67240192;
            HIDWORD(v111.__r_.__value_.__r.__words[0]) = v83;
            LODWORD(v98) = 8;
            _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM, EnableVerboseMapMatching, %{public}d", &v111, v98);
            v85 = (char *)v84;
            sub_100512490("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v84);
            if (v85 != (char *)&__p)
              free(v85);
          }
          if (*v100)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v100 + 80))(*v100, *(unsigned __int8 *)(v101 + 2529));
          sub_1001E4804(&__p);
          sub_1001E4874(__p, "IgnoreSignalEnvironment", (BOOL *)(v101 + 2785));
          v33 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1))
          {
            v34 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          sub_1001E4804(&__p);
          v36 = sub_1001E4874(__p, "MapMatchingNetworkUsageThermalLevelHighThreshold", (BOOL *)&v107);
          v37 = v36;
          v38 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
          if (!*((_QWORD *)&__p + 1))
            goto LABEL_60;
          v39 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
            if (!v37)
            {
LABEL_62:
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_10217C380);
              v41 = qword_1022A0028;
              if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
              {
                v42 = *(_DWORD *)(v101 + 2820);
                LODWORD(__p) = 67240192;
                DWORD1(__p) = v42;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMM, MapMatchingNetworkUsageThermalLevelHighThreshold, %{public}d", (uint8_t *)&__p, 8u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(&__p, 0x65CuLL);
                if (qword_1022A0020 != -1)
                  dispatch_once(&qword_1022A0020, &stru_10217C380);
                v86 = *(_DWORD *)(v101 + 2820);
                LODWORD(v111.__r_.__value_.__l.__data_) = 67240192;
                HIDWORD(v111.__r_.__value_.__r.__words[0]) = v86;
                LODWORD(v98) = 8;
                _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM, MapMatchingNetworkUsageThermalLevelHighThreshold, %{public}d", &v111, v98);
                v88 = (char *)v87;
                sub_100512490("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v87);
                if (v88 != (char *)&__p)
                  free(v88);
              }
              sub_1001E4804(&__p);
              v43 = sub_1001E4874(__p, "MapMatchingNetworkUsageThermalLevelLowThreshold", (BOOL *)&v107);
              v44 = v43;
              v45 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
              if (!*((_QWORD *)&__p + 1))
                goto LABEL_71;
              v46 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
                if (!v44)
                {
LABEL_73:
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_10217C380);
                  v48 = qword_1022A0028;
                  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                  {
                    v49 = *(_DWORD *)(v101 + 2824);
                    LODWORD(__p) = 67240192;
                    DWORD1(__p) = v49;
                    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "CLMM, MapMatchingNetworkUsageThermalLevelLowThreshold, %{public}d", (uint8_t *)&__p, 8u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(&__p, 0x65CuLL);
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217C380);
                    v89 = *(_DWORD *)(v101 + 2824);
                    LODWORD(v111.__r_.__value_.__l.__data_) = 67240192;
                    HIDWORD(v111.__r_.__value_.__r.__words[0]) = v89;
                    LODWORD(v98) = 8;
                    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM, MapMatchingNetworkUsageThermalLevelLowThreshold, %{public}d", &v111, v98);
                    v91 = (char *)v90;
                    sub_100512490("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v90);
                    if (v91 != (char *)&__p)
                      free(v91);
                  }
                  sub_1001E4804(&__p);
                  v50 = *(_BYTE *)(v101 + 2808);
                  v111.__r_.__value_.__s.__data_[0] = 0;
                  v51 = sub_1001E4874(__p, "CLBaroAltimeterEnabledForLocationUpdate", (BOOL *)&v111);
                  v52 = v111.__r_.__value_.__s.__data_[0];
                  if (!v51)
                    v52 = v50;
                  *(_BYTE *)(v101 + 2808) = v52;
                  v53 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
                  if (*((_QWORD *)&__p + 1))
                  {
                    v54 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
                    do
                      v55 = __ldaxr(v54);
                    while (__stlxr(v55 - 1, v54));
                    if (!v55)
                    {
                      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
                      std::__shared_weak_count::__release_weak(v53);
                    }
                  }
                  if (qword_1022A0020 != -1)
                    dispatch_once(&qword_1022A0020, &stru_10217C380);
                  v56 = qword_1022A0028;
                  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
                  {
                    v57 = *(unsigned __int8 *)(v101 + 2808);
                    LODWORD(__p) = 67240192;
                    DWORD1(__p) = v57;
                    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "BaroAlt,fBaroAltimeterEnabled,%{public}d", (uint8_t *)&__p, 8u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(&__p, 0x65CuLL);
                    if (qword_1022A0020 != -1)
                      dispatch_once(&qword_1022A0020, &stru_10217C380);
                    v92 = *(unsigned __int8 *)(v101 + 2808);
                    LODWORD(v111.__r_.__value_.__l.__data_) = 67240192;
                    HIDWORD(v111.__r_.__value_.__r.__words[0]) = v92;
                    LODWORD(v98) = 8;
                    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,fBaroAltimeterEnabled,%{public}d", &v111, v98);
                    v94 = (char *)v93;
                    sub_100512490("Generic", 1, 0, 2, "CLLocationFilterController::CLLocationFilterController(id<CLIntersiloUniverse>, NonSystemLocationClientKeysCallback)", "%s\n", v93);
                    if (v94 != (char *)&__p)
                      free(v94);
                  }
                  if (*(_BYTE *)(v101 + 2808))
                    operator new();
                  if (*v100)
                  {
                    v58 = *(_QWORD *)(v101 + 2952);
                    if (v58)
                    {
                      v59 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 48))(v58);
                      v60 = v59;
                      if (v59)
                      {
                        v104 = 0u;
                        v105 = 0u;
                        v102 = 0u;
                        v103 = 0u;
                        v61 = 0;
                        v62 = 0;
                        v63 = objc_msgSend(v59, "countByEnumeratingWithState:objects:count:", &v102, v106, 16);
                        if (!v63)
                          goto LABEL_127;
                        v64 = *(_QWORD *)v103;
                        while (1)
                        {
                          for (i = 0; i != v63; i = (char *)i + 1)
                          {
                            if (*(_QWORD *)v103 != v64)
                              objc_enumerationMutation(v60);
                            sub_1015A2E04(&__p, (char *)objc_msgSend(*(id *)(*((_QWORD *)&v102 + 1) + 8 * (_QWORD)i), "UTF8String"));
                            if (v110 >= 0)
                              p_p = (const char *)&__p;
                            else
                              p_p = (const char *)__p;
                            v67 = CFStringCreateWithCString(kCFAllocatorDefault, p_p, 0x8000100u);
                            v68 = v67;
                            if (&_SBSGetApplicationState)
                            {
                              v69 = SBSGetApplicationState(v67);
                              if (v69 == 32 || v69 == 8)
                              {
                                if (v110 < 0)
                                {
                                  if (*((_QWORD *)&__p + 1) == 14)
                                  {
                                    v71 = (unint64_t *)__p;
LABEL_114:
                                    v72 = bswap64(*v71);
                                    v73 = 0x636F6D2E6170706CLL;
                                    if (v72 == 0x636F6D2E6170706CLL
                                      && (v72 = bswap64(*(unint64_t *)((char *)v71 + 6)),
                                          v73 = 0x706C652E4D617073,
                                          v72 == 0x706C652E4D617073))
                                    {
                                      v74 = 0;
                                    }
                                    else if (v72 < v73)
                                    {
                                      v74 = -1;
                                    }
                                    else
                                    {
                                      v74 = 1;
                                    }
                                    if (!v74)
                                      v62 = 1;
                                  }
                                }
                                else if (v110 == 14)
                                {
                                  v71 = (unint64_t *)&__p;
                                  goto LABEL_114;
                                }
                                v61 = 1;
                              }
                            }
                            CFRelease(v68);
                            if (v110 < 0)
                              operator delete((void *)__p);
                          }
                          v63 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v102, v106, 16);
                          if (!v63)
                          {
LABEL_127:
                            v75 = v61 & 1;
                            v76 = v62 & 1;
                            goto LABEL_129;
                          }
                        }
                      }
                    }
                    v75 = 0;
                    v76 = 0;
LABEL_129:
                    sub_1001D3B4C(v101, v75, v76);
                  }
                  operator new();
                }
              }
              else
              {
LABEL_71:
                if (!v43)
                  goto LABEL_73;
              }
              *(_DWORD *)(v101 + 2824) = v107;
              goto LABEL_73;
            }
          }
          else
          {
LABEL_60:
            if (!v36)
              goto LABEL_62;
          }
          *(_DWORD *)(v101 + 2820) = v107;
          goto LABEL_62;
        }
      }
      else
      {
LABEL_42:
        if (!v26)
          goto LABEL_44;
      }
      *(_BYTE *)(v101 + 2529) = v107;
      goto LABEL_44;
    }
  }
  else
  {
LABEL_31:
    if (!v19)
      goto LABEL_33;
  }
  *(_BYTE *)(v101 + 2528) = v107;
  goto LABEL_33;
}

void sub_100C63664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  _QWORD *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  v61 = *(_QWORD **)(a22 + 2952);
  if (v61 == a14)
  {
    v61 = a14;
    v62 = 4;
  }
  else
  {
    if (!v61)
      goto LABEL_6;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_6:
  v63 = *(void **)(a22 + 2864);
  if (v63)
  {
    *(_QWORD *)(a22 + 2872) = v63;
    operator delete(v63);
  }
  sub_1008AFC04(a19, 0);
  sub_1008AFBC8(a17, 0);
  nullsub_34(a15);
  sub_100D823D4(a16);
  v64 = *(_QWORD *)(a22 + 2464);
  *(_QWORD *)(a22 + 2464) = 0;
  if (v64)
    (*(void (**)(void))(a22 + 2472))();
  v65 = *a21;
  *a21 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  sub_100C25238(a12);
  sub_101311BB8(a13);
  *(_QWORD *)a22 = off_10218D420;
  v66 = *(_QWORD **)(a22 + 40);
  if (v66 == (_QWORD *)(a22 + 16))
  {
    v67 = 4;
    v66 = (_QWORD *)(a22 + 16);
  }
  else
  {
    if (!v66)
      goto LABEL_17;
    v67 = 5;
  }
  (*(void (**)(void))(*v66 + 8 * v67))();
LABEL_17:
  _Unwind_Resume(a1);
}

void sub_100C63900(uint64_t a1)
{
  sub_100C63908(*(_QWORD *)(a1 + 32));
}

void sub_100C63908(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  id v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  _WORD v15[8];
  uint8_t buf[1640];

  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
  v2 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLMM,onMapMatcherStopped,timer triggered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,onMapMatcherStopped,timer triggered", v15, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLLocationFilterController::onMapMatcherStopped()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v3 = *(_QWORD **)(a1 + 2408);
  if (v3)
  {
    sub_1008AF038(v3, 1);
    v4 = sub_1008AF038(*(_QWORD **)(a1 + 2408), 0);
    GEOResetGeoCodecsAllocator(v4);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    v5 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMM,onMapMatcherStopped,road and building tiles cleared from process memory", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
      v15[0] = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,onMapMatcherStopped,road and building tiles cleared from process memory", v15, v14);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationFilterController::onMapMatcherStopped()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  v6 = *(void **)(a1 + 2912);
  if (v6)
    objc_msgSend(v6, "setNextFireDelay:", 1.79769313e308);
  if (*(_QWORD *)(a1 + 2920))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    v7 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLMM,Releasing mapmatcher collection OS transaction", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
      v15[0] = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 0, "CLMM,Releasing mapmatcher collection OS transaction", v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationFilterController::onMapMatcherStopped()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }

    *(_QWORD *)(a1 + 2920) = 0;
  }
}

uint64_t sub_100C63D30()
{
  uint64_t v0;
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[8];
  std::__shared_weak_count *v11;

  sub_1001E4804(buf);
  v0 = *(_QWORD *)buf;
  LODWORD(v1) = sub_10075FEA8();
  LOBYTE(v9[0]) = 0;
  if (sub_1001E4874(v0, "EnableTrackRun", (BOOL *)v9))
    v1 = LOBYTE(v9[0]) != 0;
  else
    v1 = v1;
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217C3A0);
  v5 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltr,EnableTrackRun,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v9[0] = 67240192;
    v9[1] = v1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,EnableTrackRun,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLLocationFilterController::isTrackRunEnabled()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return v1;
}

void sub_100C63F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_100C63F74(uint64_t a1, uint64_t a2)
{
  return sub_10018DCF8(a1 + 48, a2);
}

uint64_t sub_100C63F7C(uint64_t a1)
{
  __int16 v2;
  NSObject *v3;
  int v4;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  if (*(_BYTE *)(a1 + 2419))
    *(_BYTE *)(a1 + 2419) = 0;
  if (!*(_QWORD *)(a1 + 2448))
    *(_QWORD *)(a1 + 2448) = objc_alloc_init(CLNanoRegistry);
  sub_100197040();
  if (sub_1000C4240())
    v2 = (unsigned __int16)objc_msgSend(*(id *)(a1 + 2448), "isAFire6OrOlderWatchPaired") ^ 1;
  else
    v2 = 0;
  *(_WORD *)(a1 + 2418) = v2 | 0x100;
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217C3A0);
  v3 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 2419))
      v4 = *(unsigned __int8 *)(a1 + 2418);
    else
      v4 = 1;
    *(_DWORD *)buf = 67240192;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#cltr,fIsPhoneThatDoesNotNeedTrackRunProcessing,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    if (*(_BYTE *)(a1 + 2419))
      v6 = *(unsigned __int8 *)(a1 + 2418);
    else
      v6 = 1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,fIsPhoneThatDoesNotNeedTrackRunProcessing,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedPairingStateChanged(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 432))(a1);
}

id sub_100C641A8(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  BOOL v10;
  __objc2_class *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  __objc2_class *v20;
  void *i;
  void *v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  id v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint8_t *v32;
  id v33;
  NSObject *v34;
  BOOL v35;
  NSObject *v36;
  id result;
  const char *v38;
  uint8_t *v39;
  const char *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  id obj;
  uint64_t v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  int v56;
  id v57;
  uint8_t buf[4];
  id v59;
  _BYTE v60[128];

  v2 = +[RDEstimate currentEstimates](RDEstimate, "currentEstimates");
  v3 = v2;
  if (!v2)
    goto LABEL_45;
  v4 = *(_QWORD *)(a1 + 2456);
  v5 = objc_msgSend(v2, "count");
  v6 = v5;
  obj = v3;
  if (v4)
  {
    v7 = objc_msgSend(*(id *)(a1 + 2456), "count");
    v8 = v3;
    v9 = v7;
    v10 = v6 == v7;
    if (objc_msgSend(v8, "count"))
    {
      v3 = obj;
      goto LABEL_7;
    }
    v35 = v6 == v9;
    v3 = obj;
    if (v35)
      goto LABEL_54;
LABEL_45:
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    v34 = qword_10229FC58;
    if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#cltr,country code list has changed. Clearing the supported region flag.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_10217C3A0);
      LOWORD(v56) = 0;
      LODWORD(v42) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,country code list has changed. Clearing the supported region flag.", &v56, v42);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    if (*(_BYTE *)(a1 + 2417))
      *(_BYTE *)(a1 + 2417) = 0;
    goto LABEL_59;
  }
  if (!v5)
    goto LABEL_45;
  v10 = 0;
LABEL_7:
  v43 = a1;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v46 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
  if (v46)
  {
    v11 = DefaultObserver;
    v45 = *(_QWORD *)v52;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v52 != v45)
          objc_enumerationMutation(obj);
        v13 = *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)v12);
        if (v11[78].info != (__objc2_class_ro *)-1)
          dispatch_once(&qword_10229FC50, &stru_10217C3A0);
        v14 = qword_10229FC58;
        if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
        {
          v15 = objc_msgSend(v13, "countryCode");
          *(_DWORD *)buf = 138477827;
          v59 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#cltr,currentCountryCode,%{private}@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v11[78].info != (__objc2_class_ro *)-1)
            dispatch_once(&qword_10229FC50, &stru_10217C3A0);
          v25 = qword_10229FC58;
          v26 = objc_msgSend(v13, "countryCode");
          v56 = 138477827;
          v57 = v26;
          LODWORD(v42) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 0, "#cltr,currentCountryCode,%{private}@", &v56, v42);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        if (v10)
        {
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          v16 = *(void **)(v43 + 2456);
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
          if (v17)
          {
            v18 = v17;
            v19 = *(_QWORD *)v48;
            while (2)
            {
              v20 = v11;
              for (i = 0; i != v18; i = (char *)i + 1)
              {
                if (*(_QWORD *)v48 != v19)
                  objc_enumerationMutation(v16);
                v22 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(objc_msgSend(v13, "countryCode"), "isEqualToString:", objc_msgSend(v22, "countryCode")))
                {
                  v11 = v20;
                  if (v20[78].info != (__objc2_class_ro *)-1)
                    dispatch_once(&qword_10229FC50, &stru_10217C3A0);
                  v23 = qword_10229FC58;
                  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
                  {
                    v24 = objc_msgSend(v22, "countryCode");
                    *(_DWORD *)buf = 138477827;
                    v59 = v24;
                    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#cltr,matching country found,%{private}@", buf, 0xCu);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (v20[78].info != (__objc2_class_ro *)-1)
                      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
                    v29 = qword_10229FC58;
                    v30 = objc_msgSend(v22, "countryCode");
                    v56 = 138477827;
                    v57 = v30;
                    LODWORD(v42) = 12;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 0, "#cltr,matching country found,%{private}@", &v56, v42);
                    v32 = (uint8_t *)v31;
                    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v31);
                    if (v32 != buf)
                      free(v32);
                  }
                  v10 = 1;
                  goto LABEL_33;
                }
              }
              v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v47, v55, 16);
              v10 = 0;
              v11 = v20;
              if (v18)
                continue;
              break;
            }
          }
        }
LABEL_33:
        v12 = (char *)v12 + 1;
      }
      while (v12 != v46);
      v3 = obj;
      v33 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v51, v60, 16);
      v46 = v33;
    }
    while (v33);
  }
  a1 = v43;
  if (!v10)
    goto LABEL_45;
LABEL_54:
  if (qword_10229FC50 != -1)
    dispatch_once(&qword_10229FC50, &stru_10217C3A0);
  v36 = qword_10229FC58;
  if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#cltr,country code list is the same. Not clearing the supported region flag.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC50 != -1)
      dispatch_once(&qword_10229FC50, &stru_10217C3A0);
    LOWORD(v56) = 0;
    LODWORD(v42) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 0, "#cltr,country code list is the same. Not clearing the supported region flag.", &v56, v42);
    v41 = (uint8_t *)v40;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedRegulatoryDomainUpdateNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v40);
    if (v41 != buf)
      free(v41);
  }
LABEL_59:

  result = v3;
  *(_QWORD *)(a1 + 2456) = result;
  return result;
}

uint64_t sub_100C64920(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_10217C168;
  v2 = *(_QWORD *)(a1 + 2800);
  if (v2)
    sub_1017C9950(v2);
  v3 = *(void **)(a1 + 2912);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 2912) = 0;
  }
  v4 = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2464) = 0;
  if (v4)
    (*(void (**)(void))(a1 + 2472))();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
  sub_10077E598(*(void **)(a1 + 2432));

  sub_100D823A8((id *)(a1 + 2496));
  v5 = *(_QWORD **)(a1 + 2952);
  if (v5 == (_QWORD *)(a1 + 2928))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 2928);
  }
  else
  {
    if (!v5)
      goto LABEL_12;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_12:
  v7 = *(void **)(a1 + 2864);
  if (v7)
  {
    *(_QWORD *)(a1 + 2872) = v7;
    operator delete(v7);
  }
  sub_1008AFC04((uint64_t *)(a1 + 2848), 0);
  sub_1008AFBC8((uint64_t *)(a1 + 2800), 0);
  nullsub_34(a1 + 2536);
  sub_100D823D4(a1 + 2496);
  v8 = *(_QWORD *)(a1 + 2464);
  *(_QWORD *)(a1 + 2464) = 0;
  if (v8)
    (*(void (**)(void))(a1 + 2472))();
  v9 = *(_QWORD *)(a1 + 2408);
  *(_QWORD *)(a1 + 2408) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_100C25238((_QWORD *)(a1 + 456));
  sub_101311BB8(a1 + 48);
  *(_QWORD *)a1 = off_10218D420;
  v10 = *(_QWORD **)(a1 + 40);
  if (v10 == (_QWORD *)(a1 + 16))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 16);
    goto LABEL_22;
  }
  if (v10)
  {
    v11 = 5;
LABEL_22:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return a1;
}

void sub_100C64AB0(uint64_t a1)
{
  sub_100C64920(a1);
  operator delete();
}

void sub_100C64AD4(uint64_t a1)
{
  uint64_t v7;

  *(_DWORD *)(a1 + 2248) = 0xFFFF;
  *(_QWORD *)(a1 + 2260) = 0;
  *(_QWORD *)(a1 + 2252) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 2268) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 2284) = _Q1;
  *(_OWORD *)(a1 + 2300) = _Q1;
  *(_OWORD *)(a1 + 2316) = _Q1;
  *(_DWORD *)(a1 + 2332) = 0;
  *(_QWORD *)(a1 + 2336) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2352) = 0;
  *(_QWORD *)(a1 + 2344) = 0;
  *(_DWORD *)(a1 + 2360) = 0;
  *(_QWORD *)(a1 + 2364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2372) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 2376) = 0;
  *(_QWORD *)(a1 + 2392) = 0;
  *(_QWORD *)(a1 + 2384) = 0;
  *(_BYTE *)(a1 + 2400) = 0;
  sub_100C252E0(a1 + 456);
  sub_101311BBC(a1 + 48);
  v7 = *(_QWORD *)(a1 + 2800);
  if (v7)
    sub_1017C9950(v7);
}

uint64_t sub_100C64B74(uint64_t a1, uint64_t a2, double a3)
{
  double v9;

  v9 = a3;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_DWORD *)a2 = 0xFFFF;
  *(_QWORD *)(a2 + 12) = 0;
  *(_QWORD *)(a2 + 4) = 0;
  *(_OWORD *)(a2 + 20) = xmmword_101BAFC90;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 36) = _Q0;
  *(_OWORD *)(a2 + 52) = _Q0;
  *(_OWORD *)(a2 + 68) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(_QWORD *)(a2 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  return sub_100C25D8C(a1 + 456, &v9, a2);
}

uint64_t sub_100C64BF8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  double v4;
  BOOL v5;
  _BOOL4 v6;
  int v7;

  result = *(_QWORD *)(a1 + 2408);
  if (result)
  {
    if (*(_BYTE *)(a1 + 2904)
      && (v3 = sub_100B303DC(),
          v7 = 1,
          v4 = sub_100B30608(v3, &v7),
          v5 = sub_1008ABF50((_DWORD *)(a1 + 2856), v4),
          result = *(_QWORD *)(a1 + 2408),
          !v5))
    {
      v6 = sub_10113494C(result);
      result = *(_QWORD *)(a1 + 2408);
    }
    else
    {
      v6 = 0;
    }
    return sub_101134694(result, v6);
  }
  return result;
}

double sub_100C64C70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = a1 + 2604;
  v3 = *(_QWORD *)(a1 + 2408);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  *(_DWORD *)(a1 + 2584) = 0xFFFF;
  *(_QWORD *)(a1 + 2596) = 0;
  *(_QWORD *)(a1 + 2588) = 0;
  result = -1.0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)v2 = xmmword_101BAFC90;
  *(_OWORD *)(v2 + 16) = _Q1;
  *(_OWORD *)(v2 + 32) = _Q1;
  *(_OWORD *)(v2 + 48) = _Q1;
  *(_DWORD *)(a1 + 2668) = 0;
  *(_QWORD *)(a1 + 2672) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 2688) = 0;
  *(_QWORD *)(a1 + 2680) = 0;
  *(_DWORD *)(a1 + 2696) = 0;
  *(_QWORD *)(v2 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2708) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 2712) = 0;
  *(_QWORD *)(a1 + 2728) = 0;
  *(_QWORD *)(a1 + 2720) = 0;
  *(_BYTE *)(a1 + 2736) = 0;
  return result;
}

uint64_t sub_100C64D00(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2408);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_100C64D18(uint64_t result, int *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  _DWORD v18[2];
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;

  v3 = result;
  if (*(_QWORD *)(result + 2408))
  {
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
    v4 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *a2;
      v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
      v7 = sub_100B303DC();
      *(_DWORD *)buf = 1;
      v8 = sub_100B30608(v7, buf);
      v9 = sub_100B303DC();
      v10 = sub_100B309E0(v9);
      *(_DWORD *)buf = 67240960;
      v26 = v5;
      v27 = 2050;
      v28 = v6;
      v29 = 2050;
      v30 = v8;
      v31 = 2050;
      v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLMM,RouteHints,CLLocationFilterController,setMapMatchingRouteHint,type,%{public}d,sz,%{public}zu,mct,%{public}.3f,propagation_us,%{public}.3f", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_10217C3C0);
      v11 = qword_1022A00D8;
      v12 = *a2;
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3);
      v14 = sub_1005EEB24();
      v15 = sub_100B303DC();
      v18[0] = 67240960;
      v18[1] = v12;
      v19 = 2050;
      v20 = v13;
      v21 = 2050;
      v22 = v14;
      v23 = 2050;
      v24 = sub_100B309E0(v15);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "CLMM,RouteHints,CLLocationFilterController,setMapMatchingRouteHint,type,%{public}d,sz,%{public}zu,mct,%{public}.3f,propagation_us,%{public}.3f", v18, 38);
      v17 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMapMatchingRouteHint(const CLMapsRouteHintData &)", "%s\n", v16);
      if (v17 != buf)
        free(v17);
    }
    result = sub_1011344E8(*(_QWORD *)(v3 + 2408), (double *)a2);
  }
  *(_QWORD *)(v3 + 2856) = *(_QWORD *)a2;
  if ((int *)(v3 + 2856) != a2)
    result = (uint64_t)sub_1008AFA64((char *)(v3 + 2864), *((char **)a2 + 1), *((_QWORD *)a2 + 2), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  *(_OWORD *)(v3 + 2888) = *((_OWORD *)a2 + 2);
  return result;
}

uint64_t sub_100C64FCC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 2408);
  if (result)
    return sub_101134610(result, a2);
  return result;
}

double sub_100C64FDC()
{
  return 166.0;
}

BOOL sub_100C64FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4;

  v4 = *(double *)(a4 + 544);
  if (v4 > 0.0)
  {
    *(_QWORD *)(a2 + 28) = *(_QWORD *)(a4 + 28);
    *(_DWORD *)(a3 + 316) = *(_DWORD *)(a4 + 476);
    *(_DWORD *)(a3 + 312) = *(_DWORD *)(a4 + 472);
    *(double *)(a3 + 384) = v4;
    *(_QWORD *)(a3 + 360) = *(_QWORD *)(a4 + 520);
    *(_OWORD *)(a3 + 368) = *(_OWORD *)(a4 + 528);
    *(_QWORD *)(a3 + 624) = *(_QWORD *)(a4 + 784);
    *(_OWORD *)(a3 + 496) = *(_OWORD *)(a4 + 656);
  }
  return v4 > 0.0;
}

void sub_100C6503C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  _BOOL4 v6;
  BOOL v7;
  __int128 v8;
  NSObject *v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  const char *v14;
  uint8_t *v15;
  _DWORD v16[2];
  __int16 v17;
  unint64_t v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  unint64_t v22;
  _OWORD v23[2];
  int v24;

  v3 = *(_QWORD *)(a1 + 2408);
  if (v3)
    v4 = *a2 == 0;
  else
    v4 = 0;
  if (v4)
  {
    v6 = (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    v7 = *(_DWORD *)(a3 + 8) == 71 || (*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
    if (!v7 && *(double *)a3 > 0.0)
    {
      v8 = *(_OWORD *)(a3 + 16);
      v23[0] = *(_OWORD *)a3;
      v23[1] = v8;
      v24 = *(_DWORD *)(a3 + 32);
      sub_10112DC40(v3, (uint64_t)v23);
    }
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v9 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_DWORD *)(a3 + 8);
      v11 = *(_QWORD *)a3;
      if (!v6)
        v11 = 0xBFF0000000000000;
      *(_DWORD *)buf = 67240448;
      v20 = v10;
      v21 = 2050;
      v22 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLMM,CLLocationFilterController,Received NotificationWorkoutSessionOverride,fitnessSession,%{public}d,startTime,%{public}.1lf", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v12 = *(_DWORD *)(a3 + 8);
      v13 = *(_QWORD *)a3;
      if (!v6)
        v13 = 0xBFF0000000000000;
      v16[0] = 67240448;
      v16[1] = v12;
      v17 = 2050;
      v18 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,CLLocationFilterController,Received NotificationWorkoutSessionOverride,fitnessSession,%{public}d,startTime,%{public}.1lf", v16, 18);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMotionStateObserverNotification(const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_100C65280(uint64_t a1, int *a2, __int128 *a3)
{
  uint64_t v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  double v12;
  double *v13;
  double v14;
  BOOL v15;
  _BOOL4 v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v22;
  int v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  const char *v27;
  uint8_t *v28;
  double v29;
  BOOL v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  double v45;
  uint64_t v46;
  double v47;
  NSObject *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  const char *v53;
  uint8_t *v54;
  int *v55;
  uint64_t v56;
  double v57;
  int v58;
  int v59;
  __int16 v60;
  _BYTE v61[10];
  double v62;
  double v63;
  __int16 v64;
  double v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint8_t buf[4];
  int v76;
  __int16 v77;
  _BYTE v78[10];
  double v79;
  double v80;
  __int16 v81;
  double v82;

  if ((*a2 - 1) >= 2)
  {
    if (*a2)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v22 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *a2;
        *(_DWORD *)buf = 67240192;
        v76 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Unknown notification %{public}d", buf, 8u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v19 = qword_1022A0028;
      v24 = *a2;
      LODWORD(v66) = 67240192;
      DWORD1(v66) = v24;
      LODWORD(v56) = 8;
      v55 = (int *)&v66;
      v20 = "#Warning Unknown notification %{public}d";
    }
    else
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v18 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning unexpected kNotificationMovementCoarse", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v19 = qword_1022A0028;
      LOWORD(v66) = 0;
      LODWORD(v56) = 2;
      v55 = (int *)&v66;
      v20 = "#Warning unexpected kNotificationMovementCoarse";
    }
    v25 = 0;
    goto LABEL_77;
  }
  v5 = sub_100B303DC();
  *(_DWORD *)buf = 0;
  v6 = sub_100B30608(v5, buf);
  v57 = v6;
  v7 = a3[6];
  v8 = a3[7];
  v9 = a3[4];
  v71 = a3[5];
  v72 = v7;
  v73 = v8;
  v74 = *((_QWORD *)a3 + 16);
  v10 = a3[3];
  v68 = a3[2];
  v69 = v10;
  v70 = v9;
  v11 = a3[1];
  v66 = *a3;
  v67 = v11;
  v12 = vabdd_f64(v6, *(double *)(a1 + 2752));
  if (v12 >= 1.5)
  {
    v17 = v66;
  }
  else
  {
    v16 = *(double *)(a1 + 2744) == 0.0
       && ((v13 = (double *)(a1 + 2628), v14 = vabdd_f64(v6, *(double *)(a1 + 2660)), v12 < 0.5)
         ? (v15 = v14 < 1.5)
         : (v15 = 0),
           v15 && *v13 >= 0.0)
       && *v13 + *(double *)(a1 + 2636) * -2.0 < 0.0;
    v17 = v66;
    if ((int)v66 > 40)
    {
      if ((_DWORD)v66 == 41)
      {
LABEL_13:
        *(_QWORD *)&v66 = 0x200000005;
        v17 = 5;
      }
      else if ((_DWORD)v66 == 52 || (_DWORD)v66 == 56)
      {
LABEL_47:
        DWORD1(v66) = 2;
      }
      else
      {
LABEL_36:
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v26 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Unhandled case", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217C380);
          LOWORD(v58) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "Unhandled case", &v58, 2);
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLLocationFilterController::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
      }
    }
    else
    {
      switch((int)v66)
      {
        case 0:
        case 6:
          break;
        case 1:
          v17 = 10;
          LODWORD(v66) = 10;
          if (v16)
          {
            DWORD1(v66) = 2;
            v17 = 10;
          }
          break;
        case 2:
          v17 = 11;
          LODWORD(v66) = 11;
          if (v16)
          {
            DWORD1(v66) = 2;
            v17 = 11;
          }
          break;
        case 3:
        case 4:
        case 7:
        case 8:
        case 9:
          goto LABEL_13;
        case 5:
          goto LABEL_47;
        case 10:
        case 11:
          if (v16)
            goto LABEL_47;
          break;
        default:
          goto LABEL_36;
      }
    }
  }
  if (*(_BYTE *)(a1 + 2784)
    && v17
    && ((v29 = v6 - *(double *)(a1 + 2760), v29 >= 0.0) ? (v30 = v29 < 10.0) : (v30 = 0), v30))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10217C380);
    v48 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v49 = sub_100B303DC();
      v50 = sub_100B309E0(v49);
      *(_DWORD *)buf = 67240704;
      v76 = v17;
      v77 = 2050;
      *(double *)v78 = v6;
      *(_WORD *)&v78[8] = 2050;
      v79 = v50;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Going to sleep. Not providing motion state, %{public}d, to the location KF,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v40 = qword_1022A0028;
      v51 = sub_100B303DC();
      v52 = sub_100B309E0(v51);
      v58 = 67240704;
      v59 = v17;
      v60 = 2050;
      *(double *)v61 = v6;
      *(_WORD *)&v61[8] = 2050;
      v62 = v52;
      LODWORD(v56) = 28;
      v55 = &v58;
      v20 = "Going to sleep. Not providing motion state, %{public}d, to the location KF,now,%{public}.3f,propagation_us,%{public}.3f";
      goto LABEL_76;
    }
  }
  else
  {
    sub_101311C14(a1 + 48, &v57, &v66, (int *)&v66 + 1);
    sub_100C253A8(a1 + 456, &v57, (int *)&v66, (int *)&v66 + 1);
    v31 = *(_QWORD *)(a1 + 2408);
    if (v31)
    {
      (*(void (**)(uint64_t, double *, __int128 *))(*(_QWORD *)v31 + 64))(v31, &v57, &v66);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v32 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v33 = v66;
        v34 = DWORD1(v66);
        v35 = HIDWORD(v66);
        v36 = v67;
        v37 = v57;
        v38 = sub_100B303DC();
        v39 = sub_100B309E0(v38);
        *(_DWORD *)buf = 67241472;
        v76 = v33;
        v77 = 1026;
        *(_DWORD *)v78 = v34;
        *(_WORD *)&v78[4] = 1026;
        *(_DWORD *)&v78[6] = v35;
        LOWORD(v79) = 1026;
        *(_DWORD *)((char *)&v79 + 2) = v36;
        HIWORD(v79) = 2050;
        v80 = v37;
        v81 = 2050;
        v82 = v39;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLMM, MotionState,type,%{public}d,confidence,%{public}d,mountedState,%{public}d,mountedConfidence,%{public}d,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x2Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v40 = qword_1022A0028;
        v41 = v66;
        v42 = DWORD1(v66);
        v43 = HIDWORD(v66);
        v44 = v67;
        v45 = v57;
        v46 = sub_100B303DC();
        v47 = sub_100B309E0(v46);
        v58 = 67241472;
        v59 = v41;
        v60 = 1026;
        *(_DWORD *)v61 = v42;
        *(_WORD *)&v61[4] = 1026;
        *(_DWORD *)&v61[6] = v43;
        LOWORD(v62) = 1026;
        *(_DWORD *)((char *)&v62 + 2) = v44;
        HIWORD(v62) = 2050;
        v63 = v45;
        v64 = 2050;
        v65 = v47;
        LODWORD(v56) = 46;
        v55 = &v58;
        v20 = "CLMM, MotionState,type,%{public}d,confidence,%{public}d,mountedState,%{public}d,mountedConfidence,%{public"
              "}d,now,%{public}.3f,propagation_us,%{public}.3f";
LABEL_76:
        v19 = v40;
        v25 = 2;
LABEL_77:
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, v25, v20, v55, v56);
        v54 = (uint8_t *)v53;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedMotionNotification(const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v53);
        if (v54 != buf)
          free(v54);
      }
    }
  }
}

void sub_100C65B10(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  NSObject *v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  double v27;
  int v28;
  int v29;
  int v30;
  double v31;
  _QWORD *v32;
  _QWORD *v33;
  NSObject *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  const char *v43;
  uint8_t *v44;
  double v45;
  int v46;
  int v47;
  int v48;
  const char *v49;
  uint8_t *v50;
  int v51;
  const char *v52;
  uint8_t *v53;
  const char *v54;
  uint8_t *v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  double v59;
  const char *v60;
  uint8_t *v61;
  uint64_t v62;
  int v63;
  double v64;
  __int16 v65;
  _BYTE v66[10];
  double v67;
  uint8_t buf[4];
  double v69;
  __int16 v70;
  _BYTE v71[10];
  double v72;

  v5 = *(_QWORD *)(a1 + 2408);
  switch(*a2)
  {
    case 2:
      v6 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      *(double *)(a1 + 2760) = sub_100B30608(v6, buf);
      sub_100C25D4C(a1 + 456, (double *)(a1 + 2760));
      *(_BYTE *)(a1 + 2784) = 1;
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v7 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v8 = sub_100B303DC();
        *(_DWORD *)buf = 0;
        v9 = sub_100B30608(v8, buf);
        v10 = sub_100B303DC();
        v11 = sub_100B309E0(v10);
        *(_DWORD *)buf = 134349312;
        v69 = v9;
        v70 = 2050;
        *(double *)v71 = v11;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "device entering sleep - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v35 = qword_1022A0028;
        v36 = sub_1005FECEC();
        v37 = sub_100B303DC();
        v63 = 134349312;
        v64 = v36;
        v65 = 2050;
        *(_QWORD *)v66 = sub_100B309E0(v37);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 2, "device entering sleep - no longer has active cell,now,%{public}.3f,propagation_us,%{public}.3f", &v63, 22);
        v39 = (uint8_t *)v38;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v38);
        if (v39 != buf)
          free(v39);
      }
      *(_DWORD *)buf = 0;
      v63 = 2;
      sub_100C253A8(a1 + 456, (double *)(a1 + 2760), (int *)buf, &v63);
      *(_DWORD *)buf = 0;
      v63 = 2;
      sub_101311C14(a1 + 48, (_QWORD *)(a1 + 2760), buf, &v63);
      break;
    case 3:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v13 = sub_100B303DC();
        *(_DWORD *)buf = 0;
        v14 = sub_100B30608(v13, buf);
        v15 = sub_100B303DC();
        v16 = sub_100B309E0(v15);
        *(_DWORD *)buf = 134349312;
        v69 = v14;
        v70 = 2050;
        *(double *)v71 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "device wake - checking for corresponding sleep,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v40 = qword_1022A0028;
        v41 = sub_1005FECEC();
        v42 = sub_100B303DC();
        v63 = 134349312;
        v64 = v41;
        v65 = 2050;
        *(_QWORD *)v66 = sub_100B309E0(v42);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 2, "device wake - checking for corresponding sleep,now,%{public}.3f,propagation_us,%{public}.3f", &v63, 22);
        v44 = (uint8_t *)v43;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v43);
        if (v44 != buf)
          free(v44);
      }
      if (!*(_BYTE *)(a1 + 2784))
      {
        v17 = sub_100B303DC();
        *(_DWORD *)buf = 0;
        v18 = sub_100B30608(v17, buf);
        if (v18 - *(double *)(a1 + 2776) > 2.0)
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10217C380);
          v19 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
          {
            v20 = *(double *)(a1 + 2768);
            v21 = sub_100B303DC();
            v22 = sub_100B309E0(v21);
            *(_DWORD *)buf = 134349568;
            v69 = v20;
            v70 = 2050;
            *(double *)v71 = v18;
            *(_WORD *)&v71[8] = 2050;
            v72 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning wake detected with no prior sleep known, sending unknown motion to location KF at time, %{public}.3lf,now,%{public}.3f,propagation_us,%{public}.3f", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10217C380);
            v56 = qword_1022A0028;
            v57 = *(double *)(a1 + 2768);
            v58 = sub_100B303DC();
            v59 = sub_100B309E0(v58);
            v63 = 134349568;
            v64 = v57;
            v65 = 2050;
            *(double *)v66 = v18;
            *(_WORD *)&v66[8] = 2050;
            v67 = v59;
            LODWORD(v62) = 32;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v56, 0, "#Warning wake detected with no prior sleep known, sending unknown motion to location KF at time, %{public}.3lf,now,%{public}.3f,propagation_us,%{public}.3f", &v63, v62);
            v61 = (uint8_t *)v60;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v60);
            if (v61 != buf)
              free(v61);
          }
          *(_DWORD *)buf = 0;
          v63 = 2;
          sub_100C253A8(a1 + 456, (double *)(a1 + 2768), (int *)buf, &v63);
        }
      }
      v23 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      *(double *)(a1 + 2776) = sub_100B30608(v23, buf);
      *(_BYTE *)(a1 + 2784) = 0;
      break;
    case 6:
      if ((*(_DWORD *)(a3 + 4) - 1) > 1)
      {
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_10217C3A0);
        v34 = qword_10229FC58;
        if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#cltr,device does not have reachability", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC50 != -1)
            dispatch_once(&qword_10229FC50, &stru_10217C3A0);
          LOWORD(v63) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltr,device does not have reachability", &v63, 2);
          v55 = (uint8_t *)v54;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v54);
          if (v55 != buf)
            free(v55);
        }
      }
      else
      {
        if (qword_10229FC50 != -1)
          dispatch_once(&qword_10229FC50, &stru_10217C3A0);
        v24 = qword_10229FC58;
        if (os_log_type_enabled((os_log_t)qword_10229FC58, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(_DWORD *)(a3 + 4);
          *(_DWORD *)buf = 67109120;
          LODWORD(v69) = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#cltr,device has reachability,type,%d,clearing backoff timer if one exists", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC50 != -1)
            dispatch_once(&qword_10229FC50, &stru_10217C3A0);
          v51 = *(_DWORD *)(a3 + 4);
          v63 = 67109120;
          LODWORD(v64) = v51;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC58, 2, "#cltr,device has reachability,type,%d,clearing backoff timer if one exists", &v63);
          v53 = (uint8_t *)v52;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v52);
          if (v53 != buf)
            free(v53);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 408))(a1);
      }
      break;
    case 7:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10217C380);
      v26 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        v27 = *(double *)a3;
        v28 = *(unsigned __int8 *)(a3 + 8);
        v29 = *(unsigned __int8 *)(a3 + 9);
        v30 = *(unsigned __int8 *)(a3 + 16);
        *(_DWORD *)buf = 134349824;
        v69 = v27;
        v70 = 1026;
        *(_DWORD *)v71 = v28;
        *(_WORD *)&v71[4] = 1026;
        *(_DWORD *)&v71[6] = v29;
        LOWORD(v72) = 1026;
        *(_DWORD *)((char *)&v72 + 2) = v30;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,Battery notification,level,%{public}.2lf,charged,%{public}d,connected,%{public}d,wasConnected,%{public}d", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10217C380);
        v45 = *(double *)a3;
        v46 = *(unsigned __int8 *)(a3 + 8);
        v47 = *(unsigned __int8 *)(a3 + 9);
        v48 = *(unsigned __int8 *)(a3 + 16);
        v63 = 134349824;
        v64 = v45;
        v65 = 1026;
        *(_DWORD *)v66 = v46;
        *(_WORD *)&v66[4] = 1026;
        *(_DWORD *)&v66[6] = v47;
        LOWORD(v67) = 1026;
        *(_DWORD *)((char *)&v67 + 2) = v48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,Battery notification,level,%{public}.2lf,charged,%{public}d,connected,%{public}d,wasConnected,%{public}d", &v63, 30);
        v50 = (uint8_t *)v49;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLLocationFilterController::feedDaemonStatusNotification(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
      if (v5)
      {
        v31 = *(double *)a3;
        if (*(double *)a3 >= 0.0 && v31 <= 100.0)
        {
          sub_100EAE084(a1 + 2816, v31);
          v32 = *(_QWORD **)(a1 + 2408);
          if (v32)
            sub_1001D4260(v32, *(_BYTE *)(a1 + 2831) == 0);
        }
      }
      break;
    case 0xD:
      if (v5)
      {
        sub_100EADFBC(a1 + 2816, *(_DWORD *)a3);
        goto LABEL_43;
      }
      break;
    case 0xF:
      if (v5)
      {
        sub_100EAE034(a1 + 2816, *(_BYTE *)a3);
LABEL_43:
        v33 = *(_QWORD **)(a1 + 2408);
        if (v33)
          sub_1001D4260(v33, *(_BYTE *)(a1 + 2831) == 0);
      }
      break;
    default:
      return;
  }
}

