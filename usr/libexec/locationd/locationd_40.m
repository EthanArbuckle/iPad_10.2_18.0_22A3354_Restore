void sub_101876E6C()
{
  operator new();
}

void sub_101876ED4()
{
  operator delete();
}

char *sub_101876EF8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101876F6C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101876F6C()
{
  operator new();
}

void sub_10187708C()
{
  operator new();
}

char *sub_1018770D8(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_10187714C();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 16;
}

void sub_10187714C()
{
  operator new();
}

_QWORD *sub_101877278(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5B88;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018772B8(_QWORD *a1)
{
  void *v2;

  *a1 = off_1021D5B88;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  operator delete();
}

_QWORD **sub_101877308(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **result;
  uint64_t v7;
  uint64_t *v8;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  v8 = a2;
  result = sub_101877400(&v8, a1 + 16);
  v7 = *a2 - v5;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void sub_10187736C()
{
  operator new();
}

void sub_1018773DC()
{
  operator delete();
}

_QWORD **sub_101877400(_QWORD **result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char *v6;
  char *v7;
  char v8;

  v2 = *result;
  *(_BYTE *)**result = *(_BYTE *)a2;
  v3 = (*v2)++;
  *(_WORD *)(v3 + 1) = *(_WORD *)(a2 + 2);
  v4 = *v2;
  *v2 += 2;
  *(_WORD *)(v4 + 2) = *(_DWORD *)(a2 + 16) - *(_DWORD *)(a2 + 8);
  v5 = (_BYTE *)(*v2 + 2);
  *v2 = v5;
  v6 = *(char **)(a2 + 8);
  v7 = *(char **)(a2 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    *v5 = v8;
    v5 = (_BYTE *)(*v2 + 1);
    *v2 = v5;
  }
  return result;
}

char *sub_101877474(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018774E8();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_1018774E8()
{
  operator new();
}

void sub_101877608()
{
  operator new();
}

char *sub_10187765C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018776D0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1018776D0()
{
  operator new();
}

void sub_1018777F0()
{
  operator new();
}

char *sub_10187783C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_1018778B0();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_1018778B0()
{
  operator new();
}

void sub_1018779D0()
{
  operator new();
}

char *sub_101877A1C(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101877A90();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 12;
}

void sub_101877A90()
{
  operator new();
}

void sub_101877BB0()
{
  operator new();
}

char *sub_101877C04(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101877C78();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101877C78()
{
  operator new();
}

void sub_101877D98()
{
  operator new();
}

char *sub_101877DE4(uint64_t a1, int a2)
{
  const void **v2;
  const void **v3;
  char *v4;

  v2 = *(const void ***)(a1 + 8);
  v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
LABEL_8:
    sub_101877E58();
  if (!v4)
    __cxa_bad_cast();
  return v4 + 9;
}

void sub_101877E58()
{
  operator new();
}

void sub_101877F78()
{
  operator new();
}

void sub_101877FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v5 = a1;
  do
  {
    v7 = *(void **)(v5 - 24);
    v5 -= 24;
    v6 = v7;
    if (v7)
    {
      *(_QWORD *)(a1 - 16) = v6;
      operator delete(v6);
    }
    a1 = v5;
  }
  while (v5 != a2);
  v8 = a2;
  do
  {
    v10 = *(void **)(v8 - 24);
    v8 -= 24;
    v9 = v10;
    if (v10)
    {
      *(_QWORD *)(a2 - 16) = v9;
      operator delete(v9);
    }
    a2 = v8;
  }
  while (v8 != a3);
}

void sub_101878030(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  int v17;
  int v18;
  char v19;
  int v20;
  char v21;
  char v22;
  _DWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  unsigned int v34;
  char v35;
  _BYTE v36[24];
  _BYTE *v37;
  _DWORD v38[4];
  uint8_t buf[4];
  int v40;

  if (a4)
  {
    LOBYTE(v33) = 0;
    v35 = 0;
    if (a1)
    {
      if (a1 != 1)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D5D90);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          v40 = a1;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#timingadvance,invalid SIM ID,%d", buf, 8u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_39;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D5D90);
        v38[0] = 67109120;
        v38[1] = a1;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,invalid SIM ID,%d", v38);
        v13 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)", "%s\n", v15);
        goto LABEL_55;
      }
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
    sub_1001DF2C0(a2, buf);
    sub_101892924((uint64_t)&v33, (uint64_t)buf);
    sub_10087B6D0((uint64_t)buf);
    if (v35)
    {
      if ((v34 > 9 || ((1 << v34) & 0x287) == 0) && v34 - 3 > 2)
      {
        if (v34 == 10)
        {
          HIDWORD(v32) = *(_DWORD *)sub_1007073B4((uint64_t)&v33);
          LODWORD(v32) = *(_DWORD *)(sub_1007073B4((uint64_t)&v33) + 4);
          v31 = *(unsigned int *)(sub_1007073B4((uint64_t)&v33) + 8);
          v30 = *(unsigned int *)(sub_1007073B4((uint64_t)&v33) + 16);
          v29 = *(unsigned int *)(sub_1007073B4((uint64_t)&v33) + 24);
          v28 = *(unsigned int *)(sub_1007073B4((uint64_t)&v33) + 28);
          v17 = *(_DWORD *)(sub_1007073B4((uint64_t)&v33) + 32);
          v27 = 0;
          v20 = 0;
          v22 = 0;
          v18 = *(_DWORD *)(sub_1007073B4((uint64_t)&v33) + 64);
          v21 = 6;
          v19 = 1;
        }
        else if (v34 == 6)
        {
          HIDWORD(v31) = *(_DWORD *)sub_1001E3CA4((uint64_t)&v33);
          HIDWORD(v30) = *(_DWORD *)(sub_1001E3CA4((uint64_t)&v33) + 4);
          HIDWORD(v29) = *(_DWORD *)(sub_1001E3CA4((uint64_t)&v33) + 8);
          HIDWORD(v28) = *(_DWORD *)(sub_1001E3CA4((uint64_t)&v33) + 12);
          HIDWORD(v27) = *(_DWORD *)(sub_1001E3CA4((uint64_t)&v33) + 16);
          LODWORD(v27) = *(_DWORD *)(sub_1001E3CA4((uint64_t)&v33) + 20);
          v32 = 0;
          LODWORD(v31) = 0;
          LODWORD(v30) = 0;
          LODWORD(v29) = 0;
          LODWORD(v28) = 0;
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = *(_DWORD *)(sub_1001E3CA4((uint64_t)&v33) + 24);
          v21 = 4;
          v22 = 1;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          v31 = 0;
          v32 = 0;
          v29 = 0;
          v30 = 0;
          v17 = 0;
          v18 = 0;
          v22 = 0;
          v19 = 0;
          v21 = 0;
        }
        v37 = 0;
        v23 = operator new(0x58uLL);
        *(_QWORD *)v23 = off_1021D5DC0;
        v23[2] = a1;
        *((_BYTE *)v23 + 12) = v21;
        *((_BYTE *)v23 + 13) = v7;
        *((_QWORD *)v23 + 2) = a4;
        v23[6] = HIDWORD(v31);
        v23[7] = HIDWORD(v30);
        v23[8] = HIDWORD(v29);
        v23[9] = HIDWORD(v28);
        v23[10] = HIDWORD(v27);
        v23[11] = v27;
        v23[12] = v20;
        v23[13] = HIDWORD(v32);
        v23[14] = v32;
        v23[15] = v31;
        v23[16] = v30;
        v23[17] = v29;
        v23[18] = v28;
        v23[19] = v17;
        v23[20] = v18;
        *((_BYTE *)v23 + 84) = v22;
        *((_BYTE *)v23 + 85) = v19;
        v37 = v23;
        sub_10178EA00(a3, (uint64_t)v36);
        v24 = v37;
        if (v37 == v36)
        {
          v25 = 4;
          v24 = v36;
        }
        else
        {
          if (!v37)
          {
LABEL_39:
            sub_10087B6D0((uint64_t)&v33);
            return;
          }
          v25 = 5;
        }
        (*(void (**)(void))(*v24 + 8 * v25))();
        goto LABEL_39;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D5D90);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#timingadvance,RAT not supported", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_39;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D5D90);
      LOWORD(v38[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,RAT not supported", v38, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)", "%s\n", v12);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D5D90);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#timingadvance,kCellInfoNotification,serving cell missing", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_39;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D5D90);
      LOWORD(v38[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,kCellInfoNotification,serving cell missing", v38, 2);
      v13 = (uint8_t *)v26;
      sub_100512490("Generic", 1, 0, 2, "void CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)", "%s\n", v26);
    }
LABEL_55:
    if (v13 != buf)
      free(v13);
    goto LABEL_39;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D5D90);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#timingadvance,fUniverse nil", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D5D90);
    v33 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#timingadvance,fUniverse nil", &v33, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 0, "void CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
}

void sub_101878810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10087B6D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101878880(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018788B0()
{
  operator delete();
}

__n128 sub_1018788C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x58uLL);
  *(_QWORD *)v2 = off_1021D5DC0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10187891C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = off_1021D5DC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_10187895C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint8_t buf[8];
  uint64_t v21;
  void (*v22)(uint64_t, qmi::MessageBase *);
  void *v23;
  uint64_t v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D5D90);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_DWORD *)(a1 + 8);
    v6 = *(unsigned __int8 *)(a1 + 12);
    v7 = *(unsigned __int8 *)(a1 + 13);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = v5;
    LOWORD(v21) = 1026;
    *(_DWORD *)((char *)&v21 + 2) = v6;
    HIWORD(v21) = 1026;
    LODWORD(v22) = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,queryTimingAdvance,SimInstance,%d,rat,%{public}d,sub_id,%{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D5D90);
    v10 = *(_DWORD *)(a1 + 8);
    v11 = *(unsigned __int8 *)(a1 + 12);
    v12 = *(unsigned __int8 *)(a1 + 13);
    v15[0] = 67109632;
    v15[1] = v10;
    v16 = 1026;
    v17 = v11;
    v18 = 1026;
    v19 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,queryTimingAdvance,SimInstance,%d,rat,%{public}d,sub_id,%{public}d", v15, 20);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v8 = *(unsigned __int8 *)(a1 + 12);
  v9 = *(unsigned __int8 *)(a1 + 13);
  *(_QWORD *)buf = _NSConcreteStackBlock;
  v21 = 3221225472;
  v22 = sub_101878C00;
  v23 = &unk_1021D5E28;
  v25 = *(_DWORD *)(a1 + 8);
  v26 = *(_OWORD *)(a1 + 24);
  v27 = *(_OWORD *)(a1 + 40);
  v28 = *(_OWORD *)(a1 + 56);
  v29 = *(_OWORD *)(a1 + 72);
  v24 = *(_QWORD *)(a1 + 16);
  sub_10172A304(a2, v8, v9, (uint64_t)buf);
}

uint64_t sub_101878BB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101878BF4()
{
}

void sub_101878C00(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v4;
  int v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  NSObject *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double Current;
  double v39;
  int v40;
  int v41;
  int v42;
  char v43;
  char v44;
  NSObject *v45;
  id v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  const char *v74;
  uint8_t *v75;
  const char *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  double v84;
  char v85;
  char v86;
  int v87;
  __int16 v88;
  int v89;
  _BYTE v90[10];
  __int16 v91;
  _BYTE v92[10];
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  unsigned __int8 v131[4];
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  uint8_t buf[4];
  _BYTE v137[10];
  __int16 v138;
  _BYTE v139[10];
  __int16 v140;
  int v141;
  __int16 v142;
  int v143;
  __int16 v144;
  int v145;
  __int16 v146;
  int v147;
  __int16 v148;
  int v149;
  __int16 v150;
  int v151;
  __int16 v152;
  int v153;
  __int16 v154;
  int v155;
  __int16 v156;
  int v157;
  __int16 v158;
  int v159;
  __int16 v160;
  int v161;
  __int16 v162;
  int v163;
  __int16 v164;
  int v165;
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D5D90);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(unsigned __int16 *)a2;
    v6 = *((_DWORD *)a2 + 1);
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)v137 = v5;
    *(_WORD *)&v137[4] = 1026;
    *(_DWORD *)&v137[6] = v6;
    v138 = 2081;
    *(_QWORD *)v139 = qmi::asString(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#timingadvance,sendGetTimingAdvance,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{private}s", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D5D90);
    v47 = qword_1022A0078;
    v48 = *(unsigned __int16 *)a2;
    v49 = *((_DWORD *)a2 + 1);
    v50 = qmi::asString(v49);
    v89 = 67240707;
    *(_DWORD *)v90 = v48;
    *(_WORD *)&v90[4] = 1026;
    *(_DWORD *)&v90[6] = v49;
    v91 = 2081;
    *(_QWORD *)v92 = v50;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 2, "#timingadvance,sendGetTimingAdvance,qmiResponse,msgId,%{public}d,eCode,%{public}d,eCodeStr,%{private}s", &v89, 24);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D5D90);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v8 = qmi::asString(*((unsigned int *)a2 + 1));
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)v137 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#timingadvance,sendGetTimingAdvance returned error,eCodeStr,%{private}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D5D90);
      v9 = qword_1022A0078;
      v10 = qmi::asString(*((unsigned int *)a2 + 1));
      v89 = 136380675;
      *(_QWORD *)v90 = v10;
      LODWORD(v78) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 16, "#timingadvance,sendGetTimingAdvance returned error,eCodeStr,%{private}s", &v89, v78);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  else
  {
    v131[0] = 0;
    sub_101879498(a2, 3u, v131);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D5D90);
    v13 = qword_1022A0078;
    v14 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG);
    if (v14)
    {
      if (!v131[0])
        sub_1018ECB3C(v14, v15, v16);
      v17 = *(_DWORD *)(a1 + 40);
      v18 = *(_DWORD *)(a1 + 44);
      v19 = *(_DWORD *)(a1 + 48);
      v20 = *(_DWORD *)(a1 + 52);
      v21 = *(_DWORD *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 60);
      v24 = *(_DWORD *)(a1 + 64);
      v23 = *(_DWORD *)(a1 + 68);
      v25 = *(_DWORD *)(a1 + 72);
      v26 = *(_DWORD *)(a1 + 76);
      v27 = *(_DWORD *)(a1 + 80);
      v28 = *(_DWORD *)(a1 + 84);
      v29 = *(_DWORD *)(a1 + 88);
      v30 = *(_DWORD *)(a1 + 92);
      v31 = *(_DWORD *)(a1 + 96);
      v32 = *(_DWORD *)(a1 + 100);
      v33 = *(unsigned __int8 *)(a1 + 104);
      v34 = *(unsigned __int8 *)(a1 + 105);
      *(_DWORD *)buf = 67114753;
      *(_DWORD *)v137 = v17;
      *(_WORD *)&v137[4] = 1026;
      *(_DWORD *)&v137[6] = v132;
      v138 = 1026;
      *(_DWORD *)v139 = v133;
      *(_WORD *)&v139[4] = 1025;
      *(_DWORD *)&v139[6] = v18;
      v140 = 1025;
      v141 = v19;
      v142 = 1025;
      v143 = v20;
      v144 = 1025;
      v145 = v21;
      v146 = 1025;
      v147 = v22;
      v148 = 1025;
      v149 = v24;
      v150 = 1026;
      v151 = v23;
      v152 = 1026;
      v153 = HIDWORD(v133);
      v154 = 1026;
      v155 = v135;
      v156 = 1026;
      v157 = v134;
      v158 = 1025;
      v159 = v25;
      v160 = 1025;
      v161 = v26;
      v162 = 1025;
      v163 = v27;
      v164 = 1025;
      v165 = v28;
      v166 = 1025;
      v167 = v29;
      v168 = 1025;
      v169 = v30;
      v170 = 1025;
      v171 = v31;
      v172 = 1025;
      v173 = v32;
      v174 = 1025;
      v175 = v33;
      v176 = 1025;
      v177 = v34;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#timingadvance,SimInstance,%d,ta_lte,%{public}d,lte_connection_state,%{public}d,lte_mcc,%{private}d,lte_mnc,%{private}d,lte_tac,%{private}d,lte_ci,%{private}d,lte_uarfcn,%{private}d,lte_pid,%{private}d,lte_band_info,%{public}d,ta_nr,%{public}d,nr_connection_state,%{public}d,nr_offset,%{public}d,nr_mcc,%{private}d,nr_mnc,%{private}d,nr_tac,%{private}d,nr_ci,%{private}d,nr_nrarfcn,%{private}d,nr_pid,%{private}d,nr_band_info,%{private}d,nr_scs,%{private}d,isLTE,%{private}d,isNR,%{private}d", buf, 0x8Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D5D90);
      if (!v131[0])
        sub_1018ECB3C(v53, v54, v55);
      v56 = *(_DWORD *)(a1 + 40);
      v57 = *(_DWORD *)(a1 + 44);
      v58 = *(_DWORD *)(a1 + 48);
      v59 = *(_DWORD *)(a1 + 52);
      v60 = *(_DWORD *)(a1 + 56);
      v61 = *(_DWORD *)(a1 + 60);
      v62 = *(_DWORD *)(a1 + 64);
      v63 = *(_DWORD *)(a1 + 68);
      v64 = *(_DWORD *)(a1 + 72);
      v65 = *(_DWORD *)(a1 + 76);
      v66 = *(_DWORD *)(a1 + 80);
      v67 = *(_DWORD *)(a1 + 84);
      v68 = *(_DWORD *)(a1 + 88);
      v69 = *(_DWORD *)(a1 + 92);
      v70 = *(_DWORD *)(a1 + 96);
      v71 = *(_DWORD *)(a1 + 100);
      v72 = *(unsigned __int8 *)(a1 + 104);
      v73 = *(unsigned __int8 *)(a1 + 105);
      v89 = 67114753;
      *(_DWORD *)v90 = v56;
      *(_WORD *)&v90[4] = 1026;
      *(_DWORD *)&v90[6] = v132;
      v91 = 1026;
      *(_DWORD *)v92 = v133;
      *(_WORD *)&v92[4] = 1025;
      *(_DWORD *)&v92[6] = v57;
      v93 = 1025;
      v94 = v58;
      v95 = 1025;
      v96 = v59;
      v97 = 1025;
      v98 = v60;
      v99 = 1025;
      v100 = v61;
      v101 = 1025;
      v102 = v62;
      v103 = 1026;
      v104 = v63;
      v105 = 1026;
      v106 = HIDWORD(v133);
      v107 = 1026;
      v108 = v135;
      v109 = 1026;
      v110 = v134;
      v111 = 1025;
      v112 = v64;
      v113 = 1025;
      v114 = v65;
      v115 = 1025;
      v116 = v66;
      v117 = 1025;
      v118 = v67;
      v119 = 1025;
      v120 = v68;
      v121 = 1025;
      v122 = v69;
      v123 = 1025;
      v124 = v70;
      v125 = 1025;
      v126 = v71;
      v127 = 1025;
      v128 = v72;
      v129 = 1025;
      v130 = v73;
      LODWORD(v78) = 140;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,SimInstance,%d,ta_lte,%{public}d,lte_connection_state,%{public}d,lte_mcc,%{private}d,lte_mnc,%{private}d,lte_tac,%{private}d,lte_ci,%{private}d,lte_uarfcn,%{private}d,lte_pid,%{private}d,lte_band_info,%{public}d,ta_nr,%{public}d,nr_connection_state,%{public}d,nr_offset,%{public}d,nr_mcc,%{private}d,nr_mnc,%{private}d,nr_tac,%{private}d,nr_ci,%{private}d,nr_nrarfcn,%{private}d,nr_pid,%{private}d,nr_band_info,%{private}d,nr_scs,%{private}d,isLTE,%{private}d,isNR,%{private}d", &v89, v78);
      v75 = (uint8_t *)v74;
      sub_100512490("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v74);
      if (v75 != buf)
        free(v75);
    }
    Current = CFAbsoluteTimeGetCurrent();
    if (!v131[0])
      sub_1018ECB3C(v35, v36, v37);
    v39 = Current;
    v40 = v132;
    v79 = v133;
    v42 = v134;
    v41 = v135;
    v43 = *(_BYTE *)(a1 + 104);
    v44 = *(_BYTE *)(a1 + 105);
    if (v43 && (_DWORD)v133 == 4 || *(_BYTE *)(a1 + 105) && v135 == 2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D5D90);
      v45 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "#timingadvance,in connected state,send TA details", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D5D90);
        LOWORD(v89) = 0;
        LODWORD(v78) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#timingadvance,in connected state,send TA details", &v89, v78);
        v77 = (uint8_t *)v76;
        sub_100512490("Generic", 1, 0, 2, "auto CLEurekaCommon::queryTimingAdvance(SimInstance, std::vector<CLCell>, CLQmiPdsController &, id<CLIntersiloUniverse>)::(anonymous class)::operator()(CLQmiPdsMessenger &) const_block_invoke", "%s\n", v76);
        if (v77 != buf)
          free(v77);
      }
      v46 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLTelephonyService"));
      v80 = v40;
      v81 = v79;
      v82 = v41;
      v83 = v42;
      v84 = v39;
      v85 = v43;
      v86 = v44;
      v87 = *(_DWORD *)buf;
      v88 = *(_WORD *)v137;
      objc_msgSend(v46, "updateTAInfo:", &v80);
    }
  }
}

uint64_t sub_101879498(qmi::MessageBase *a1, unsigned __int16 a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  __int128 v7;
  int v8;
  _QWORD v9[2];
  _DWORD **v10;

  result = qmi::MessageBase::findTlvValue(a1, a2);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    v7 = 0uLL;
    v8 = 0;
    v10 = (_DWORD **)v9;
    result = sub_101879518(&v10, v5, &v7);
    if ((_DWORD)result)
      v9[0] = 0;
    v6 = *a3;
    *(_OWORD *)(a3 + 4) = v7;
    *((_DWORD *)a3 + 5) = v8;
    if (!v6)
      *a3 = 1;
    if (!v9[0])
      *a3 = 0;
  }
  return result;
}

uint64_t sub_101879518(_DWORD ***a1, int a2, _DWORD *a3)
{
  _QWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t result;

  if (a2 < 4)
    return (a2 - 20);
  v3 = *a1;
  *a3 = ***a1;
  v4 = (_DWORD *)(*v3 + 4);
  *v3 = v4;
  if (a2 < 8)
    return (a2 - 20);
  a3[1] = *v4;
  v5 = (_DWORD *)(*v3 + 4);
  *v3 = v5;
  if ((a2 - 12) > 0xFFFFFFF7)
    return (a2 - 20);
  a3[2] = *v5;
  v6 = (_DWORD *)(*v3 + 4);
  *v3 = v6;
  if ((a2 - 16) >= 0xFFFFFFF8)
    return (a2 - 20);
  a3[3] = *v6;
  v7 = (_DWORD *)(*v3 + 4);
  *v3 = v7;
  result = (a2 - 20);
  if ((a2 - 20) <= 0xFFFFFFF7)
  {
    a3[4] = *v7;
    *v3 += 4;
  }
  return result;
}

void sub_1018795C4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = -1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021D5E58);
  v3 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRhythmicGnssUtility,created", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021D5E58);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLRhythmicGnssUtility,created", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLRhythmicGnssUtility::CLRhythmicGnssUtility(id<CLIntersiloUniverse>)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  qword_102314130 = a1;
  sub_100E087CC();
}

void sub_1018797EC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10187981C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _QWORD block[5];
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021D5E58);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRhythmicGnssUtility,createRhythmicGnssUtilityInUniverse", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021D5E58);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "CLRhythmicGnssUtility,createRhythmicGnssUtilityInUniverse", v7, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "static CLRhythmicGnssUtility *CLRhythmicGnssUtility::createRhythmicGnssUtilityInUniverse(id<CLIntersiloUniverse>)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101879A08;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_10230FBD8 != -1)
    dispatch_once(&qword_10230FBD8, block);
  return qword_102314130;
}

void sub_101879A08()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021D5E58);
  v0 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLRhythmicGnssUtility,createRhythmicGnssUtilityInUniverse first time", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021D5E58);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "CLRhythmicGnssUtility,createRhythmicGnssUtilityInUniverse first time", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "static CLRhythmicGnssUtility *CLRhythmicGnssUtility::createRhythmicGnssUtilityInUniverse(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
  operator new();
}

void sub_101879BC4()
{
  operator delete();
}

void sub_101879BF0(uint64_t a1, int a2, int a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D5E98);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    v18 = a2;
    v19 = 1026;
    v20 = a4;
    v21 = 1026;
    v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLRhythmicGnssUtility,updateStateInformationToRhythmic,modeOfOps,%{public}d,powerMode,%{public}d,state,%{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D5E98);
    v12[0] = 67240704;
    v12[1] = a2;
    v13 = 1026;
    v14 = a4;
    v15 = 1026;
    v16 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLRhythmicGnssUtility,updateStateInformationToRhythmic,modeOfOps,%{public}d,powerMode,%{public}d,state,%{public}d", v12, 20);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssUtility::updateStateInformationToRhythmic(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 24) = a4;
  v9 = 2;
  if (!a3)
    v9 = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFDLL | v9;
}

void sub_101879DF8(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101879E24(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101879E50(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101879E7C()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_101879F18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_101879F30()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_101879FBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_101879FD4()
{
  sub_1015A2E04(qword_10230FBC0, "t");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230FBC0, (void *)&_mh_execute_header);
}

void sub_10187A400()
{
  operator delete();
}

id sub_10187A42C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onDeviceMotionData:", a1);
}

void sub_10187A6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10187A7B0(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

_QWORD *sub_10187A7DC(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021D5EE8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10187A908;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_10187A91C;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10187A8E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10187A908(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_10187A91C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_10187A938(uint64_t a1)
{
  sub_10187AC38(a1);
  operator delete();
}

id sub_10187A95C(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD __dst[6];
  __int128 v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  unint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  int v46;

  HIWORD(v29) = 0;
  if (a4 >= 0x78)
    v8 = 120;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0x79)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D5F48);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v40 = (unint64_t)"N14CLDeviceMotion6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v41 = 2048;
      v42 = 120;
      v43 = 2048;
      v44 = a4;
      v45 = 1024;
      v46 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D5F48);
      v31 = 136315906;
      v32 = (unint64_t)"N14CLDeviceMotion6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v33 = 2048;
      v34 = 120;
      v35 = 2048;
      v36 = a4;
      v37 = 1024;
      v38 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v31, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>::dispatchData(int, const void *, size_t) [T = CLDeviceMotion::Sample]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10187AC8C;
  v18[3] = &unk_10214E878;
  v18[4] = v12;
  v18[5] = v11;
  v23 = __dst[4];
  v24 = __dst[5];
  v25 = v29;
  v19 = __dst[0];
  v20 = __dst[1];
  v21 = __dst[2];
  v22 = __dst[3];
  v26 = v30;
  v27 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_10187AC38(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D5EE8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_10187AC8C(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 168));
  return result;
}

void sub_10187ACD0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10187AD00(uint64_t a1)
{
  sub_100015E88(a1);
  operator delete();
}

uint64_t sub_10187AD24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_10187AD30(uint64_t a1)
{
  id v2;
  NSObject *v3;
  id v4;
  char v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint8_t *v23;
  NSFileManager *v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  unsigned int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint8_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  char *v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  id v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  uint8_t *v55;
  std::string v56;
  void *__p[2];
  int64_t v58;
  unsigned int v59;
  uint8_t buf[8];
  _BYTE v61[20];

  sub_10055D44C(a1, "CLDaemonCore", 1, 1);
  v2 = objc_msgSend(objc_alloc((Class)CLIntersiloUniverse), "initWithSilo:vendor:", +[CLSilo main](CLSilo, "main"), +[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"));
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 88) = 0x4066800000000000;
  *(_QWORD *)(a1 + 96) = 0;
  if (qword_102314138)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v3 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v61 = 2082;
      *(_QWORD *)&v61[2] = "";
      *(_WORD *)&v61[10] = 2050;
      *(_QWORD *)&v61[12] = qword_102314138;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning multiple instances created\", \"last instance\":\"%{public}p\"}", buf, 0x1Cu);
    }
  }
  qword_102314138 = a1;
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  v59 = 0;
  sub_1001E4804(buf);
  v5 = sub_100526244(*(uint64_t *)buf, "CLSilo.Version", &v59);
  if (v59 >= dword_1023008F8)
    v6 = v5;
  else
    v6 = 0;
  v7 = *(std::__shared_weak_count **)v61;
  if (!*(_QWORD *)v61)
    goto LABEL_13;
  v8 = (unint64_t *)(*(_QWORD *)v61 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    if ((v6 & 1) != 0)
      goto LABEL_25;
  }
  else
  {
LABEL_13:
    if ((v6 & 1) != 0)
      goto LABEL_25;
  }
  sub_1001E4804(buf);
  sub_100525484(*(uint64_t *)buf, "CLSilo.SyncgetGraphFile", 0xFFFFFFFFLL);
  v10 = *(std::__shared_weak_count **)v61;
  if (*(_QWORD *)v61)
  {
    v11 = (unint64_t *)(*(_QWORD *)v61 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_1001E4804(buf);
  sub_100525484(*(uint64_t *)buf, "CLSilo.NameToCohortMap", 0xFFFFFFFFLL);
  v13 = *(std::__shared_weak_count **)v61;
  if (*(_QWORD *)v61)
  {
    v14 = (unint64_t *)(*(_QWORD *)v61 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_25:
  sub_1001E4804(buf);
  sub_100019BD4(*(uint64_t *)buf, "CLSilo.Version", (unsigned int *)&dword_1023008F8);
  v16 = *(std::__shared_weak_count **)v61;
  if (*(_QWORD *)v61)
  {
    v17 = (unint64_t *)(*(_QWORD *)v61 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v61 = 0;
  *(_QWORD *)&v61[8] = 0;
  sub_1001E4804(__p);
  v19 = sub_1000BCB64((uint64_t)__p[0], "CLSilo.SyncgetGraphFile", (std::string *)buf);
  v20 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v21 = (unint64_t *)((char *)__p[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v19)
  {
    if (v61[15] >= 0)
      v23 = buf;
    else
      v23 = *(uint8_t **)buf;
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v23), CFSTR("SyncgetGraphFile"));
  }
  else
  {
    v24 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
    sub_100585420(&v56);
    if (byte_10231008F >= 0)
      v25 = (const std::string::value_type *)&qword_102310078;
    else
      v25 = (const std::string::value_type *)qword_102310078;
    if (byte_10231008F >= 0)
      v26 = byte_10231008F;
    else
      v26 = unk_102310080;
    v27 = std::string::append(&v56, v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v58 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if (v58 >= 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    v30 = -[NSFileManager fileExistsAtPath:](v24, "fileExistsAtPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29));
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v56.__r_.__value_.__l.__data_);
      if (!v30)
        goto LABEL_68;
    }
    else if (!v30)
    {
      goto LABEL_68;
    }
    sub_100585420(&v56);
    if (byte_10231008F >= 0)
      v31 = (const std::string::value_type *)&qword_102310078;
    else
      v31 = (const std::string::value_type *)qword_102310078;
    if (byte_10231008F >= 0)
      v32 = byte_10231008F;
    else
      v32 = unk_102310080;
    v33 = std::string::append(&v56, v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v58 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (v58 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v35), CFSTR("SyncgetGraphFile"));
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
  }
LABEL_68:
  if ((v61[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_100119F3C();
  sub_1001E4804(__p);
  sub_100006BB4((uint64_t)__p[0], "CLSilo.NameToCohortMap", buf);
  v36 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v37 = (unint64_t *)((char *)__p[1] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (void *)sub_10011A5AC((uint64_t)buf);
  if (objc_msgSend(v39, "count"))
    objc_msgSend(v4, "setObject:forKeyedSubscript:", v39, CFSTR("NameToCohortMap"));
  sub_10011A5A8(buf);
  sub_100584F4C(0, (std::string *)buf);
  if (v61[15] >= 0)
    v40 = buf;
  else
    v40 = *(uint8_t **)buf;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v40), CFSTR("AutoCohortEdgesDirectoryPath"));
  if ((v61[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  +[CLSilo setGlobalConfiguration:](CLSilo, "setGlobalConfiguration:", v4);

  sub_100119F3C();
  sub_1001E4804(buf);
  sub_100006BB4(*(uint64_t *)buf, "CLServiceVendor.RecordingTriggersFromByTo", __p);
  v41 = *(std::__shared_weak_count **)v61;
  if (*(_QWORD *)v61)
  {
    v42 = (unint64_t *)(*(_QWORD *)v61 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (void *)sub_10011A5AC((uint64_t)__p);
  v45 = -[NSString UTF8String](-[NSString stringByAppendingString:](NSTemporaryDirectory(), "stringByAppendingString:", CFSTR("/intersilo_recording")), "UTF8String");
  sub_1015A2E04(buf, v45);
  sub_1001E4804(&v56);
  sub_1000BCB64((uint64_t)v56.__r_.__value_.__l.__data_, "CLServiceVendor.RecordingPathBase", (std::string *)buf);
  size = (std::__shared_weak_count *)v56.__r_.__value_.__l.__size_;
  if (v56.__r_.__value_.__l.__size_)
  {
    v47 = (unint64_t *)(v56.__r_.__value_.__l.__size_ + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  sub_1001E4804(&v56);
  v49 = objc_msgSend((id)sub_10011A5AC((uint64_t)v56.__r_.__value_.__l.__data_), "cl_deepMutableCopy");
  v50 = (std::__shared_weak_count *)v56.__r_.__value_.__l.__size_;
  if (v56.__r_.__value_.__l.__size_)
  {
    v51 = (unint64_t *)(v56.__r_.__value_.__l.__size_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (!objc_msgSend(v49, "objectForKey:", CFSTR("HeartAttackStackshot")))
  {
    sub_100197040();
    if ((sub_10075D288() & 1) != 0)
      goto LABEL_102;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
LABEL_102:
      v53 = 1;
    else
      v53 = 0;
    objc_msgSend(v49, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v53), CFSTR("HeartAttackStackshot"));
  }
  sub_100197040();
  objc_msgSend(v49, "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10075D288()), CFSTR("IsInternalInstall"));
  objc_msgSend(v49, "setValue:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_10019CFA0() == 1), CFSTR("IsLocationServicesEnabled"));
  +[CLServiceVendor rereadConfiguration:](CLServiceVendor, "rereadConfiguration:", v49);
  if (objc_msgSend(v44, "count"))
  {
    v54 = objc_msgSend(*(id *)(a1 + 16), "vendor");
    if (v61[15] >= 0)
      v55 = buf;
    else
      v55 = *(uint8_t **)buf;
    objc_msgSend(v54, "setRecordingTriggerMap:outputPathBase:", v44, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v55));
  }

  if ((v61[15] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  sub_10011A5A8(__p);
  sub_10073C788();
  sub_1001FD94C();
  sub_100647FA8();
}

void sub_10187B7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v40;

  if (a25 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  v40 = *(_QWORD *)(v38 + 32);
  *(_QWORD *)(v38 + 32) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  sub_10055D4D0(v38);
  _Unwind_Resume(a1);
}

void sub_10187B924(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  os_activity_scope_state_s state;
  char v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  CLProfilingIdentify("CLDaemonCore::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D5FC0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v9 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonCore::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D5FC0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "activity";
      v16 = 2050;
      v17 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonCore::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v9 = 0;
  }
  if (*a2 == 4
    && (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a4 + 16), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetHasLingerClients") & 1) == 0)
  {
    sub_10187DEAC(a4, -1);
  }
  if (v9)
    os_activity_scope_leave(&state);
}

void sub_10187BAFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10187BB1C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  if (objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v1 + 16), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetHasLingerClients"))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"linger requested - not shutting down\"}", (uint8_t *)v4, 0x12u);
    }
  }
  else
  {
    sub_10187E568((unsigned int *)v1, 0);
    objc_msgSend(*(id *)(v1 + 48), "setNextFireDelay:", 1.79769313e308);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

void sub_10187BC50(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_10187BC84()
{
  sub_10187E75C(qword_102314138, 0);
}

uint64_t sub_10187BC94(uint64_t a1)
{
  uint64_t v2;

  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  *(_QWORD *)(a1 + 48) = 0;
  objc_msgSend(*(id *)(a1 + 96), "invalidate");

  *(_QWORD *)(a1 + 96) = 0;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_10055D4D0(a1);
}

uint64_t sub_10187BCF8(uint64_t a1)
{
  const char *v1;
  NSObject *v2;
  NSObject *v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  NSObject *v24;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  os_activity_scope_state_s state;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t v38[4];
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  id v43;
  __int16 v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;

  v1 = (const char *)a1;
  if (sub_1000CDFB0(a1))
  {
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: startInitialize", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A01D0 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    v26 = qword_1022A02D8;
    v1 = "(fMutex).__assertOwned()";
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2082;
      v51 = "assert";
      v52 = 2081;
      v53 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    }
    v27 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      *(_DWORD *)buf = 68289539;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2082;
      v51 = "assert";
      v52 = 2081;
      v53 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    }
    v28 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2082;
      v51 = "assert";
      v52 = 2081;
      v53 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm", 586, "startInitialize");
    __break(1u);
  }
  dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
LABEL_3:
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v47 = 0;
    v48 = 2082;
    v49 = "";
    v50 = 2082;
    v51 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"startInitialize\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCapabilityMonitor"));
  v31 = v4;
  objc_msgSend(*(id *)(*((_QWORD *)v1 + 4) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 4) + 8), 4, 0);
  v5 = objc_msgSend(objc_alloc((Class)NSURLCache), "initWithMemoryCapacity:diskCapacity:diskPath:", 0, 0, 0);
  +[NSURLCache setSharedURLCache:](NSURLCache, "setSharedURLCache:", v5);

  v33 = 0;
  v6 = sub_1001FD94C();
  if (sub_1001E48E4(v6, (uint64_t)CFSTR("PrivateMode"), &v33))
  {
    v7 = objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "proxyForService:", CFSTR("CLNetworkLocationProvider"));
    objc_msgSend(v7, "setPrivateMode:", v33);
    v8 = objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "proxyForService:", CFSTR("CLHarvesterService"));
    objc_msgSend(v8, "setPrivateMode:", v33);
  }
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLLocationController"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFilteredLocationController"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLTimeZoneManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLApplicationLifecycleManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCountryTracker"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMotionCuesService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFenceManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CMHealthColdStorageService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLStatusBarIconManager"));
  sub_1001FBB04(0);
  sub_1000A5944();
  sub_100B5A218();
  sub_100689AC0();
  sub_100D90530();
  sub_100BE44D8();
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLWorkoutRecorder"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLPredictedWalkDistanceServiceCompanion"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLVO2MaxService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLAudioAccessoryService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CMHealthColdStorageCompanionSyncService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCardioChangeService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLGyroCalibrationDatabase"));
  sub_100238258();
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLPressureCalibrationDatabase"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFitnessTrackingNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLStepCountNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMotionState"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLOnBodyNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMotionStateMediator"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLNatalimetryNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCatherineNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCompanionNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSedentaryTimerNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLActivityLogger"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLVehicleConnectionNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLVehicleStateNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSensorRecorderNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMotionSyncStore"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMotionStateObserver"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMotionHintLogger"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLRunningAggregatorAWD"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFitnessDailyAnalyticsAggregator"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFallNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLPencilState"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMagneticAccessory"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLEmergencyController"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLKappaNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLNearbydInterfaceManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSpringTrackingNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFitnessMachineNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMotionAlarmNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLHealthAssessmentNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLPressureStatsCollector"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMobilityWalkingBoutService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLVO2MaxCloudKitManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLDMVisionService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSimulationController"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLClientManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLTilesManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCellTilesManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCoarseCellTilesManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLWifiTilesManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLAppTileDataProvider"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLTransitMacTileDataProvider"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLRoutineMonitor"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSmootherMonitor"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSignificantVisitManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSuggestedActionManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLLocationStreamer"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLLocationMulticlientStreamer"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSensorMonitor"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLInternalService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLAvengerObservationReporterService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLGeoMapTilesPreloaderService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLTrackingAvoidanceService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLSeparationAlertsService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLGatheringService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLMicroLocationNotifier"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLDurianService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLBarometerCalibration"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFenceHandoffConnectionManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLAnalyticsLogger"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLOutdoorService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLFenceAnalyticsManager"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLCompanionBluetoothService"));
  objc_msgSend(objc_msgSend(*((id *)v1 + 2), "vendor"), "ensureServiceIsRunning:", CFSTR("CLDistributedSensingService"));
  sub_100197040();
  if ((sub_1001B7910() & 0x2000000000000) != 0)
    sub_1018C0CCC();
  v9 = -[NSDictionary objectForKeyedSubscript:](+[NSDictionary dictionaryWithContentsOfFile:](NSDictionary, "dictionaryWithContentsOfFile:", CFSTR("/System/Library/LaunchDaemons/com.apple.locationd.plist")), "objectForKeyedSubscript:", CFSTR("LaunchEvents"));
  if (!v9)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "no LaunchEvents found", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_39;
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    LOWORD(v34) = 0;
    LODWORD(v30) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "no LaunchEvents found", &v34, v30);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 0, "void launchServicesWithLaunchEvents()", "%s\n", v22);
LABEL_55:
    if (v23 != buf)
      free(v23);
    goto LABEL_39;
  }
  v10 = objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("com.apple.xpc.activity"));
  v11 = v10;
  if (v10)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, buf, 16);
    if (v12)
    {
      v13 = *(_QWORD *)v35;
      do
      {
        v14 = 0;
        do
        {
          if (*(_QWORD *)v35 != v13)
            objc_enumerationMutation(v11);
          v15 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v14);
          v16 = objc_msgSend(v15, "hasPrefix:", CFSTR("com.apple.locationd."));
          v17 = objc_msgSend(v15, "componentsSeparatedByString:", CFSTR("."));
          if (v16)
            v18 = 3;
          else
            v18 = 0;
          v19 = objc_msgSend(v17, "objectAtIndexedSubscript:", v18);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
          v20 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v38 = 68289538;
            v39 = 0;
            v40 = 2082;
            v41 = "";
            v42 = 2114;
            v43 = v19;
            v44 = 2114;
            v45 = v15;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"ensure service is running for xpc activity\", \"service\":%{public, location:escape_only}@, \"identifier\":%{public, location:escape_only}@}", v38, 0x26u);
          }
          -[CLServiceVendor ensureServiceIsRunning:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "ensureServiceIsRunning:", v19);
          v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, buf, 16);
      }
      while (v12);
    }
    goto LABEL_39;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
  v24 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "no xpc activities registered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    LOWORD(v34) = 0;
    LODWORD(v30) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "no xpc activities registered", &v34, v30);
    v23 = (uint8_t *)v29;
    sub_100512490("Generic", 1, 0, 0, "void launchServicesWithLaunchEvents()", "%s\n", v29);
    goto LABEL_55;
  }
LABEL_39:
  objc_msgSend(v31, "drain");
  os_activity_scope_leave(&state);
  return 1;
}

void sub_10187CB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10187CBAC(int a1, uint64_t a2, CFArrayRef theArray)
{
  CFIndex Count;
  CFIndex v6;
  const void *ValueAtIndex;
  const void *v8;

  if (a2 == 1)
    goto LABEL_6;
  if (a2 == 128 || a2 == 32)
  {
    Count = CFArrayGetCount(theArray);
    if (Count <= 0)
      __assert_rtn("wrapRunLoopWithAutoreleasePoolHandler", "CLDaemonCore.mm", 696, "count > 0");
    v6 = Count - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, Count - 1);
    NSPopAutoreleasePool(ValueAtIndex);
    CFArrayRemoveValueAtIndex(theArray, v6);
    if (a2 == 32)
    {
LABEL_6:
      v8 = (const void *)NSPushAutoreleasePool(0);
      CFArrayAppendValue(theArray, v8);
    }
  }
}

void sub_10187CC64(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  NSObject *v15;
  std::string *p_p;
  std::string *v17;
  std::string *v18;
  std::string *v19;
  const char *v20;
  uint8_t *v21;
  std::string __p;
  std::string v23;
  int v24;
  std::string *v25;
  __int16 v26;
  std::string *v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  uint8_t buf[4];
  std::string *v33;
  __int16 v34;
  std::string *v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v3 = atomic_load((unsigned __int8 *)&qword_10230FBF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_10230FBF8))
  {
    qword_10230FBF0 = 2000000000 * (unint64_t)unk_10230FC04 / dword_10230FC00;
    __cxa_guard_release(&qword_10230FBF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_10230FC18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_10230FC18))
  {
    qword_10230FC10 = mach_absolute_time();
    __cxa_guard_release(&qword_10230FC18);
  }
  v5 = mach_absolute_time();
  v6 = v5;
  if ((a2 & 0x40) == 0)
  {
    v7 = qword_10230FC10;
    v8 = v5 - qword_10230FC10;
    if (v5 - qword_10230FC10 >= qword_10230FBF0)
    {
      memset(&v23, 0, sizeof(v23));
      memset(&__p, 0, sizeof(__p));
      v10 = dword_10230FC00;
      v9 = unk_10230FC04;
      sub_10187D040(qword_10230FC08, &__p);
      sub_10187D040(a2, &v23);
      v11 = v7 * v10 / v9;
      v12 = v8 * v10 / v9;
      if (qword_1022A01D0 != -1)
      {
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
        v11 = v7 * v10 / v9;
      }
      v13 = (double)v11;
      v14 = (double)v12;
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v17 = &v23;
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        v33 = p_p;
        v34 = 2080;
        v35 = v17;
        v36 = 2048;
        v37 = v13 / 1000000000.0;
        v38 = 2048;
        v39 = v14 / 1000000000.0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
        v18 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v19 = &v23;
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
        v24 = 136315906;
        v25 = v18;
        v26 = 2080;
        v27 = v19;
        v28 = 2048;
        v29 = v13 / 1000000000.0;
        v30 = 2048;
        v31 = v14 / 1000000000.0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)", (const char *)&v24, 42, *(double *)&__p.__r_.__value_.__l.__data_, *(double *)&__p.__r_.__value_.__l.__size_);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "static void CLDaemonCore::profileObserverCallback(CFRunLoopObserverRef, CFRunLoopActivity, void *)", "%s\n", v20);
        if (v21 != buf)
          free(v21);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  qword_10230FC08 = a2;
  qword_10230FC10 = v6;
}

void sub_10187CFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_guard_abort(&qword_10230FC18);
  _Unwind_Resume(a1);
}

std::string *sub_10187D040(char a1, std::string *this)
{
  std::string *result;

  result = std::string::assign(this, "");
  if ((a1 & 1) != 0)
  {
    result = std::string::append(this, " kCFRunLoopEntry");
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = std::string::append(this, " kCFRunLoopBeforeTimers");
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = std::string::append(this, " kCFRunLoopBeforeSources");
  if ((a1 & 0x20) == 0)
  {
LABEL_5:
    if ((a1 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = std::string::append(this, " kCFRunLoopBeforeWaiting");
  if ((a1 & 0x40) == 0)
  {
LABEL_6:
    if ((a1 & 0x80) == 0)
      return result;
    return std::string::append(this, " kCFRunLoopExit");
  }
LABEL_12:
  result = std::string::append(this, " kCFRunLoopAfterWaiting");
  if (a1 < 0)
    return std::string::append(this, " kCFRunLoopExit");
  return result;
}

void sub_10187D104(uint64_t a1, os_activity_scope_state_s *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  NSObject *v6;
  NSObject *v7;
  __CFRunLoop *v8;
  __CFRunLoopObserver *v9;
  CFMutableArrayRef Mutable;
  std::__shared_weak_count *info;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  __CFRunLoop *v15;
  kern_return_t v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  CFRunLoopObserverContext *v20;
  NSObject *v21;
  __CFRunLoopObserver *v22;
  CFMutableArrayRef v23;
  __CFNotificationCenter *DarwinNotifyCenter;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  CFRunLoopObserverContext *v31;
  const char *v32;
  CFRunLoopObserverContext *v33;
  const char *v34;
  CFRunLoopObserverContext *v35;
  uint64_t v36;
  BOOL v37;
  os_activity_scope_state_s state;
  int v39;
  int v40;
  __int16 v41;
  int v42;
  CFRunLoopObserverContext buf[40];

  v4 = a1;
  if (!sub_1000CDFB0(a1))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    v28 = qword_1022A02D8;
    v5 = (uint64_t *)"assert";
    a2 = (os_activity_scope_state_s *)"(fMutex).__assertOwned()";
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      buf[0].version = 68289539;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    }
    v29 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      buf[0].version = 68289539;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    }
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      buf[0].version = 68289539;
      LOWORD(buf[0].info) = 2082;
      *(void **)((char *)&buf[0].info + 2) = "";
      WORD1(buf[0].retain) = 2082;
      *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
      WORD2(buf[0].release) = 2081;
      *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm", 852, "startRun");
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v5 = (uint64_t *)objc_autoreleasePoolPush();
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: startRun", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  v2 = &qword_1022A0000;
  if (qword_1022A01D0 != -1)
LABEL_75:
    dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
  v7 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    buf[0].version = 68289282;
    LOWORD(buf[0].info) = 2082;
    *(void **)((char *)&buf[0].info + 2) = "";
    WORD1(buf[0].retain) = 2082;
    *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"startRun\", \"event\":%{public, location:escape_only}s}", (uint8_t *)buf, 0x1Cu);
  }
  if (!_CFRunLoopSetPerCalloutAutoreleasepoolEnabled(1))
  {
    v8 = (__CFRunLoop *)sub_100193530();
    v9 = (__CFRunLoopObserver *)qword_10230FBE0;
    if (!qword_10230FBE0)
    {
      Mutable = CFArrayCreateMutable(0, 0, 0);
      buf[0].version = 0;
      buf[0].info = Mutable;
      buf[0].retain = (const void *(__cdecl *)(const void *))&_CFRetain;
      buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
      buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
      qword_10230FBE0 = (uint64_t)CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_10187CBAC, buf);
      qword_10230FBE8 = (uint64_t)CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_10187CBAC, buf);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_10230FBE0, kCFRunLoopCommonModes);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_10230FBE8, kCFRunLoopCommonModes);
      CFRelease(Mutable);
      v9 = (__CFRunLoopObserver *)qword_10230FBE0;
    }
    if (!CFRunLoopContainsObserver(v8, v9, kCFRunLoopDefaultMode))
    {
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_10230FBE0, kCFRunLoopDefaultMode);
      CFRunLoopAddObserver(v8, (CFRunLoopObserverRef)qword_10230FBE8, kCFRunLoopDefaultMode);
    }
  }
  v37 = 0;
  sub_1001E4804(buf);
  sub_1001E4874(buf[0].version, "RunLoopProfileObserver", &v37);
  info = (std::__shared_weak_count *)buf[0].info;
  if (buf[0].info)
  {
    v12 = (unint64_t *)((char *)buf[0].info + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))info->__on_zero_shared)(info);
      std::__shared_weak_count::__release_weak(info);
    }
  }
  if (v2[58] != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
  v14 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67109120;
    HIDWORD(buf[0].version) = v37;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "OBSERVER: ProfileObserver = %d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[58] != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v39 = 67109120;
    v40 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "OBSERVER: ProfileObserver = %d", &v39);
    v31 = (CFRunLoopObserverContext *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonCore::startRun(os_activity_scope_state_t)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  if (v37)
  {
    v15 = (__CFRunLoop *)sub_100193530();
    v16 = mach_timebase_info((mach_timebase_info_t)&dword_10230FC00);
    v17 = v2[58];
    if (v16)
    {
      if (v17 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v18 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        LODWORD(buf[0].version) = 67240192;
        HIDWORD(buf[0].version) = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Can't read mach_timebase_info = %{public}d", (uint8_t *)buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v2[58] != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
        v39 = 67240192;
        v40 = v16;
        LODWORD(v36) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Can't read mach_timebase_info = %{public}d", &v39, v36);
        v20 = (CFRunLoopObserverContext *)v19;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonCore::installProfileObserver(CFStringRef)", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
    else
    {
      if (v17 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v21 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf[0].version) = 67109376;
        HIDWORD(buf[0].version) = unk_10230FC04;
        LOWORD(buf[0].info) = 1024;
        *(_DWORD *)((char *)&buf[0].info + 2) = dword_10230FC00;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "sTimebaseInfo.denom %d sTimebaseInfo.numer %d", (uint8_t *)buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v2[58] != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
        v39 = 67109376;
        v40 = unk_10230FC04;
        v41 = 1024;
        v42 = dword_10230FC00;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "sTimebaseInfo.denom %d sTimebaseInfo.numer %d", &v39, 14);
        v35 = (CFRunLoopObserverContext *)v34;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonCore::installProfileObserver(CFStringRef)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      v22 = (__CFRunLoopObserver *)qword_10230FC20;
      if (!qword_10230FC20)
      {
        v23 = CFArrayCreateMutable(0, 0, 0);
        buf[0].version = 0;
        buf[0].info = v23;
        buf[0].retain = (const void *(__cdecl *)(const void *))&_CFRetain;
        buf[0].release = (void (__cdecl *)(const void *))&_CFRelease;
        buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))&CFCopyDescription;
        qword_10230FC20 = (uint64_t)CFRunLoopObserverCreate(0, 0xFFFFFFFuLL, 1u, 0, (CFRunLoopObserverCallBack)sub_10187CC64, buf);
        CFRunLoopAddObserver(v15, (CFRunLoopObserverRef)qword_10230FC20, kCFRunLoopCommonModes);
        CFRelease(v23);
        v22 = (__CFRunLoopObserver *)qword_10230FC20;
      }
      if (!CFRunLoopContainsObserver(v15, v22, kCFRunLoopDefaultMode))
        CFRunLoopAddObserver(v15, (CFRunLoopObserverRef)qword_10230FC20, kCFRunLoopDefaultMode);
    }
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLDaemonStartedNotification, 0, 0, 1u);
  *(_DWORD *)(v4 + 24) = 1;
  if (*(_DWORD *)(v4 + 40) != -1)
  {
    if (v2[58] != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v25 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      buf[0].version = 0x304000100;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "starting idle shutdown timer of %d seconds", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v2[58] != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v39 = 67109120;
      v40 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "starting idle shutdown timer of %d seconds", &v39);
      v33 = (CFRunLoopObserverContext *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonCore::startRun(os_activity_scope_state_t)", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    sub_10187DEAC(v4, 3);
  }
  os_activity_scope_leave(&state);
  objc_autoreleasePoolPop(v5);
  os_activity_scope_leave(a2);
  while (*(_DWORD *)(v4 + 24))
  {
    sub_1000CDA5C(v4);
    if (!sub_10055D534(v4))
    {
      a2 = (os_activity_scope_state_s *)&qword_1022A0000;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
      v5 = &qword_1022A0000;
      v26 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        buf[0].version = 68289539;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
      }
      v27 = qword_1022A02D8;
      if (os_signpost_enabled((os_log_t)qword_1022A02D8))
      {
        buf[0].version = 68289539;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
      }
      v4 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
      {
        buf[0].version = 68289539;
        LOWORD(buf[0].info) = 2082;
        *(void **)((char *)&buf[0].info + 2) = "";
        WORD1(buf[0].retain) = 2082;
        *(const void *(__cdecl **)(const void *))((char *)&buf[0].retain + 4) = (const void *(__cdecl *)(const void *))"assert";
        WORD2(buf[0].release) = 2081;
        *(void (__cdecl **)(const void *))((char *)&buf[0].release + 6) = (void (__cdecl *)(const void *))"(fMutex).__assertNotOwned()";
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)buf, 0x26u);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm", 890, "startRun");
      goto LABEL_74;
    }
    CFRunLoopRun();
    sub_1000CE038(v4);
  }
}

void sub_10187DE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, uint64_t a14, uint64_t a15, char a16)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_10187DEAC(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (*(_DWORD *)(a1 + 24))
  {
    if (a2 == -1)
    {
      a2 = *(_DWORD *)(a1 + 40);
      if (a2 < 0)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    }
    else if (a2 < 0)
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "no more clients, %d second(s) to auto-shutdown", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "no more clients, %d second(s) to auto-shutdown", v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonCore::scheduleShutdown(int)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(a1 + 48), "setNextFireDelay:", (double)a2);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

void sub_10187E0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10187E0D8(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  id v4;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;

  v1 = a1;
  if (sub_1000CDFB0(a1))
  {
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: startCleanup", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A01D0 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    }
    v8 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "(fMutex).__assertOwned()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021D5FE0);
    }
    v1 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "(fMutex).__assertOwned()";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonCore.mm", 898, "startCleanup");
    __break(1u);
  }
  dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
LABEL_3:
  v3 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    v14 = 2082;
    v15 = "activity";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"startCleanup\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (&_SBApplicationStateEndGeneratingChangeNotifications)
    SBApplicationStateEndGeneratingChangeNotifications();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveEveryObserver(DarwinNotifyCenter, v1);
  v6 = sub_1001FD94C();
  buf[0] = 1;
  sub_10011B47C(v6, off_1022A3758, buf);
  objc_msgSend(v4, "drain");
  os_activity_scope_leave(&state);
}

void sub_10187E464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_10187E488(unsigned __int8 *a1, os_activity_scope_state_s *a2)
{
  uint64_t v4;

  (*(void (**)(unsigned __int8 *))(*(_QWORD *)a1 + 16))(a1);
  sub_10187BCF8((uint64_t)a1);
  sub_10187D104((uint64_t)a1, a2);
  sub_10187E0D8((uint64_t)a1);
  v4 = a1[56];
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)a1 + 24))(a1);
  return v4;
}

void sub_10187E500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10187E514(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 17))
  {
    if (*(_BYTE *)(a1 + 16))
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    else
      (*(void (**)(void))(**(_QWORD **)a1 + 24))();
    *(_BYTE *)(a1 + 17) = 0;
  }
  return a1;
}

uint64_t sub_10187E568(unsigned int *a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  __CFRunLoop *v9;
  os_activity_scope_state_s v11;
  uint8_t buf[8];
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  v4 = _os_activity_create((void *)&_mh_execute_header, "CL: locationd shutting down", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v4, &v11);

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289794;
    *(_DWORD *)&buf[4] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "activity";
    v17 = 1026;
    v18 = a2;
    v19 = 1026;
    v20 = dword_102300900;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locationd shutting down\", \"event\":%{public, location:escape_only}s, \"force\":%{public}hhd, \"killerPid\":%{public}d}", buf, 0x28u);
  }
  alarm(0xAu);
  *(_QWORD *)buf = a1;
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
  HIWORD(v14) = 256;
  v6 = a1 + 6;
  while (1)
  {
    v7 = __ldxr(v6);
    if (v7 != 1)
      break;
    if (!__stxr(0, v6))
    {
      v8 = 1;
      *((_BYTE *)a1 + 56) = a2;
      v9 = (__CFRunLoop *)sub_100193530();
      CFRunLoopStop(v9);
      goto LABEL_10;
    }
  }
  v8 = 0;
  __clrex();
LABEL_10:
  (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  os_activity_scope_leave(&v11);
  return v8;
}

void sub_10187E724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_10187E75C(uint64_t a1, int a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  double Current;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t i;
  char *v26;
  std::string::size_type size;
  size_t v28;
  void **v29;
  std::string *v30;
  char *v31;
  NSObject *v32;
  void **v33;
  void **v34;
  void **v35;
  const char *v36;
  char *v37;
  std::string *v38;
  __int128 v39;
  void **v40;
  NSObject *v41;
  void **v42;
  void **v43;
  _BOOL4 v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  CFAbsoluteTime v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  CFAbsoluteTime v61;
  const char *v62;
  char *v63;
  uint64_t v64;
  BOOL v65;
  void *__p[2];
  int64_t v67;
  os_activity_scope_state_s state;
  int v69;
  void **v70;
  _BYTE buf[32];
  void *v72[2];
  uint64_t v73;
  std::string v74;

  if (a2)
  {
    sub_1001E4804(buf);
    v74.__r_.__value_.__s.__data_[0] = 0;
    sub_10011B47C(*(uint64_t *)buf, "ObsoleteDataDeleted", &v74);
    v3 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    sub_1001E4804(buf);
    sub_100569514(*(uint64_t *)buf);
    v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v7 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    objc_msgSend(*(id *)(a1 + 96), "setNextFireDelay:", 0.0);
  }
  else
  {
    v65 = 0;
    sub_1001E4804(buf);
    v9 = sub_1001E4874(*(uint64_t *)buf, "ObsoleteDataDeleted", &v65);
    if (v65)
      v10 = v9;
    else
      v10 = 0;
    v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v10)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v14 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Obsolete data has already been deleted; not deleting again\"}",
          buf,
          0x12u);
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Deleting obsolete data\"}", buf, 0x12u);
      }
      Current = CFAbsoluteTimeGetCurrent();
      v17 = _os_activity_create((void *)&_mh_execute_header, "CL: _deleteObsoleteData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
      os_activity_scope_enter(v17, &state);

      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v18 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = "activity";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"_deleteObsoleteData\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      sub_100DFDA28();
      sub_100DFDCB0();
      v19 = sub_1001FD94C();
      sub_100525484(v19, "PreviousLocation", 0xFFFFFFFFLL);
      v20 = sub_1001FD94C();
      sub_100525484(v20, "WifiLocationNearby", 0xFFFFFFFFLL);
      v21 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 944))(v21);
      sub_1001E4804(buf);
      sub_100525484(*(uint64_t *)buf, "LocationEnabled", 0xFFFFFFFFLL);
      v22 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      sub_100584F4C(0, &v74);
      for (i = 0; i != 23; ++i)
      {
        v26 = off_1021D6000[i];
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
        else
          size = v74.__r_.__value_.__l.__size_;
        v28 = strlen(off_1021D6000[i]);
        sub_100259584((uint64_t)__p, size + v28);
        if (v67 >= 0)
          v29 = __p;
        else
          v29 = (void **)__p[0];
        if (size)
        {
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &v74;
          else
            v30 = (std::string *)v74.__r_.__value_.__r.__words[0];
          memmove(v29, v30, size);
        }
        v31 = (char *)v29 + size;
        if (v28)
          memmove(v31, v26, v28);
        v31[v28] = 0;
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
        v32 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          if (v67 >= 0)
            v33 = __p;
          else
            v33 = (void **)__p[0];
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Notice Deleting %{public}s if present", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
          if (v67 >= 0)
            v35 = __p;
          else
            v35 = (void **)__p[0];
          v69 = 136446210;
          v70 = v35;
          LODWORD(v64) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Notice Deleting %{public}s if present", &v69, v64);
          v37 = (char *)v36;
          sub_100512490("Generic", 1, 0, 2, "void _deleteObsoleteData()", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        if (v67 >= 0)
          v34 = __p;
        else
          v34 = (void **)__p[0];
        sub_100512FA8((const char *)v34);
        if (SHIBYTE(v67) < 0)
          operator delete(__p[0]);
      }
      sub_100584F4C(0, (std::string *)buf);
      v38 = std::string::append((std::string *)buf, "wifi");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v67 = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (v67 >= 0)
        v40 = __p;
      else
        v40 = (void **)__p[0];
      if (sub_1000B78B0((const char *)v40))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
        v41 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Deleting obsolete wifi subdirectory\"}", buf, 0x12u);
        }
        *(_QWORD *)buf = _NSConcreteStackBlock;
        *(_QWORD *)&buf[8] = 3321888768;
        *(_QWORD *)&buf[16] = sub_10187F44C;
        *(_QWORD *)&buf[24] = &unk_1021D60C0;
        if (SHIBYTE(v67) < 0)
        {
          v42 = (void **)__p[0];
          sub_100115CE4(v72, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)v72 = *(_OWORD *)__p;
          v73 = v67;
          v42 = __p;
        }
        sub_100AD4F6C((uint64_t)v42, (uint64_t)buf);
        if (v67 >= 0)
          v43 = __p;
        else
          v43 = (void **)__p[0];
        sub_100512FC4((const char *)v43);
        if (SHIBYTE(v73) < 0)
          operator delete(v72[0]);
      }
      if (SHIBYTE(v67) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      os_activity_scope_leave(&state);
      if ((sub_1001E4BF4() & 8) != 0)
      {
        sub_1005695B4((uint64_t)buf, CFSTR("com.apple.springboard"), 1, (uint64_t)CFSTR("mobile"));
        __p[0] = 0;
        if (sub_1001C3D30((uint64_t)buf, CFSTR("SBLastSystemVersion"), (CFTypeRef *)__p))
          v44 = CFStringGetCharacterAtIndex((CFStringRef)__p[0], 0) == 57;
        else
          v44 = 0;
        LOBYTE(state.opaque[0]) = 0;
        sub_1001E4804(&v74);
        v45 = sub_1001E48E4((uint64_t)v74.__r_.__value_.__l.__data_, (uint64_t)CFSTR("GestureServiceEnabled"), (BOOL *)&state);
        v46 = (std::__shared_weak_count *)v74.__r_.__value_.__l.__size_;
        if (v74.__r_.__value_.__l.__size_)
        {
          v47 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        sub_100569628(buf);
        if ((v44 & (v45 ^ 1)) == 1)
        {
          sub_1001E4804(buf);
          v74.__r_.__value_.__s.__data_[0] = 1;
          sub_10011B81C(*(uint64_t *)buf, CFSTR("GestureServiceEnabled"), &v74);
          v49 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v50 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
        }
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v52 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
      {
        v53 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)buf = 134217984;
        *(double *)&buf[4] = v53 - Current;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "Obsolete data deleted in %.2f seconds", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
        v60 = qword_1022A01D8;
        v61 = CFAbsoluteTimeGetCurrent();
        LODWORD(v74.__r_.__value_.__l.__data_) = 134217984;
        *(double *)((char *)v74.__r_.__value_.__r.__words + 4) = v61 - Current;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v60, 2, "Obsolete data deleted in %.2f seconds", COERCE_DOUBLE(&v74));
        v63 = (char *)v62;
        sub_100512490("Generic", 1, 0, 2, "void CLDaemonCore::deleteObsoleteData(BOOL)", "%s\n", v62);
        if (v63 != buf)
          free(v63);
      }
      sub_1001E4804(buf);
      v74.__r_.__value_.__s.__data_[0] = 1;
      sub_10011B47C(*(uint64_t *)buf, "ObsoleteDataDeleted", &v74);
      v54 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      sub_1001E4804(buf);
      sub_100569514(*(uint64_t *)buf);
      v57 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
    }
  }
}

void sub_10187F2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,os_activity_scope_state_s state,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v37 - 121) < 0)
    operator delete(*(void **)(v37 - 144));
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10187F3C8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10187F3F4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10187F420(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10187F44C(uint64_t a1, const std::string::value_type *a2)
{
  size_t v4;
  std::string *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  std::string *v10;
  __int128 v11;
  NSObject *v12;
  void **v13;
  void **v14;
  NSObject *v15;
  void **v17;
  const char *v18;
  std::string *v19;
  const char *v20;
  std::string *v21;
  void *__p[2];
  int64_t v23;
  int v24;
  void *v25;
  std::string v26;

  if (*(char *)(a1 + 55) >= 0)
    v4 = *(unsigned __int8 *)(a1 + 55);
  else
    v4 = *(_QWORD *)(a1 + 40);
  v5 = &v26;
  sub_100259584((uint64_t)&v26, v4 + 1);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (v4)
  {
    v8 = *(char **)(a1 + 32);
    v7 = (char *)(a1 + 32);
    v6 = v8;
    if (v7[23] >= 0)
      v9 = v7;
    else
      v9 = v6;
    memmove(v5, v9, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  v10 = std::string::append(&v26, a2);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
  v12 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v13 = __p;
    if (v23 < 0)
      v13 = (void **)__p[0];
    LODWORD(v26.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Deleting %s", (uint8_t *)&v26, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&v26, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v17 = __p;
    if (v23 < 0)
      v17 = (void **)__p[0];
    v24 = 136315138;
    v25 = v17;
    _os_log_send_and_compose_impl(2, 0, &v26, 1628, &_mh_execute_header, qword_1022A01D8, 2, "Deleting %s", (const char *)&v24);
    v19 = (std::string *)v18;
    sub_100512490("Generic", 1, 0, 2, "void _deleteObsoleteData()_block_invoke", "%s\n", v18);
    if (v19 != &v26)
      free(v19);
  }
  if (v23 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (!sub_100512FA8((const char *)v14))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v26.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v26.__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Could not delete file %{public}s", (uint8_t *)&v26, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&v26, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D5FA0);
      v24 = 136446210;
      v25 = (void *)a2;
      _os_log_send_and_compose_impl(2, 0, &v26, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Could not delete file %{public}s", &v24, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 0, "void _deleteObsoleteData()_block_invoke", "%s\n", v20);
      if (v21 != &v26)
        free(v21);
    }
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_10187F824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10187F864()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CEAE80;
      v1[3] = unk_101CEAE90;
      v1[4] = xmmword_101CEAEA0;
      v1[0] = xmmword_101CEAE60;
      v1[1] = unk_101CEAE70;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10187F938(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_10187F950()
{
  sub_1015A2E04(qword_10230FC28, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10230FC28, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[3], "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[3], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[6], "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[6], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[9], "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[9], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[12], "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[12], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[15], "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[15], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[18], "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[18], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[21], "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[21], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[24], "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[24], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[27], "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[27], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[30], "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[30], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[33], "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[33], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[36], "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[36], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[39], "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[39], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[42], "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[42], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[45], "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[45], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[48], "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[48], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[51], "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[51], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[54], "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[54], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[57], "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[57], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[60], "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[60], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[63], "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[63], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[66], "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[66], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[69], "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[69], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[72], "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[72], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[75], "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[75], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[78], "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[78], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[81], "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[81], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[84], "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[84], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[87], "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[87], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[90], "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[90], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[93], "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[93], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[96], "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[96], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[99], "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[99], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[102], "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[102], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[105], "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[105], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[108], "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[108], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[111], "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[111], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[114], "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[114], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[117], "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[117], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[120], "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[120], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[123], "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[123], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[126], "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[126], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[129], "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[129], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[132], "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[132], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_10230FC28[135], "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10230FC28[135], (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102310078, "syncget_graph_iOS.plist");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102310078, (void *)&_mh_execute_header);
}

void sub_10188001C(uint64_t a1)
{
  nullsub_34(a1);
  sub_100570DF8();
  sub_10073C868();
  -[CLServiceVendor retireServiceWithName:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "retireServiceWithName:", CFSTR("CLClientManager"));
  sub_100EC7CFC();
  sub_1005EE934();
}

uint64_t start(int a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  NSObject *v7;
  CFRunLoopRef Current;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  CFTypeID v13;
  CFTypeID TypeID;
  void *v15;
  id v16;
  uint64_t v17;
  void *i;
  uint64_t v19;
  __CFString *v20;
  const __CFString *v21;
  NSObject *v22;
  NSMutableDictionary *v23;
  CFTypeRef cf[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  os_activity_scope_state_s state;
  uint8_t v30[128];
  uint8_t buf[8];
  __int16 v32;
  const char *v33;
  __int16 v34;
  NSMutableDictionary *v35;

  AnalyticsSendEventLazy(CFSTR("com.apple.locationd.Launch"), &stru_1021D60F0);
  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  v3 = _os_activity_create((void *)&_mh_execute_header, "CL: locationd main - setup", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DETACHED);
  os_activity_scope_enter(v3, &state);

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D6160);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    v32 = 2082;
    v33 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locationd main - setup\"}", buf, 0x12u);
  }
  if (_set_user_dir_suffix("com.apple.locationd"))
  {
    v5 = -[NSString UTF8String](NSTemporaryDirectory(), "UTF8String");
    if (!sub_100AD51DC(v5, 73, 0))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v6 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v32 = 2082;
        v33 = "";
        v34 = 2114;
        v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"locationd could not find attributes of file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      }
      v7 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        v32 = 2082;
        v33 = "";
        v34 = 2114;
        v35 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "locationd could not find attributes of file", "{\"msg%{public}.0s\":\"locationd could not find attributes of file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
  }
  Current = CFRunLoopGetCurrent();
  sub_10051264C(Current);
  if (a1 < 2)
  {
    v23 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", &off_102220380);
    sub_100197040();
    if (sub_10075D288())
    {
      cf[0] = 0;
      sub_1001E4804(buf);
      if (sub_100219F40(*(uint64_t *)buf, (uint64_t)CFSTR("DefaultServiceReplacementMap"), cf))
      {
        v13 = CFGetTypeID(cf[0]);
        TypeID = CFDictionaryGetTypeID();
        sub_100261F44((uint64_t)buf);
        if (v13 == TypeID)
        {
          v15 = (void *)cf[0];
          v25 = 0u;
          v26 = 0u;
          v27 = 0u;
          v28 = 0u;
          v16 = objc_msgSend((id)cf[0], "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
          if (v16)
          {
            v17 = *(_QWORD *)v26;
            do
            {
              for (i = 0; i != v16; i = (char *)i + 1)
              {
                if (*(_QWORD *)v26 != v17)
                  objc_enumerationMutation(v15);
                v19 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
                v20 = (__CFString *)objc_msgSend(v15, "objectForKeyedSubscript:", v19);
                if (-[__CFString length](v20, "length"))
                  v21 = v20;
                else
                  v21 = CFSTR("_CLUnSupportedService");
                -[NSMutableDictionary setObject:forKey:](v23, "setObject:forKey:", v21, v19);
              }
              v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
            }
            while (v16);
          }
        }
      }
      else
      {
        sub_100261F44((uint64_t)buf);
      }
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6160);
    v22 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2114;
      v35 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"locationd starting up with serviceReplacementMap\", \"ReplacementMap\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    -[CLServiceVendor setServiceReplacementMap:missBehavior:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "setServiceReplacementMap:missBehavior:", v23, 0);
    sub_101880FA0();
    sub_1018810D4();
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021D6180);
  v9 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "locationd does not take any command-line arguments. Use CFPreferences instead.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021D6180);
    LOWORD(cf[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "locationd does not take any command-line arguments. Use CFPreferences instead.", cf, 2);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "int main(int, const char **)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return 0;
}

void sub_101880E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;

  os_activity_scope_leave(&state);
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a32 < 0)
    operator delete(a27);
  if (a66 < 0)
    operator delete(a61);
  _Unwind_Resume(a1);
}

NSDictionary *__cdecl sub_101880F94(id a1)
{
  return (NSDictionary *)&off_102220358;
}

void sub_101880FA0()
{
  char v0;
  char v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  CLOSTransaction *v5;
  dispatch_time_t v6;
  _QWORD v7[5];
  uint64_t v8;
  std::__shared_weak_count *v9;
  double v10;

  v10 = 0.0;
  sub_1001E4804(&v8);
  v0 = sub_1001FD98C(v8, "LowWaterLoopProtectionInterval", &v10);
  v1 = v0;
  v2 = v9;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    if ((v0 & 1) != 0)
      goto LABEL_6;
LABEL_9:
    v10 = 600.0;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  if ((v1 & 1) == 0)
    goto LABEL_9;
LABEL_6:
  if (v10 > 0.0)
  {
LABEL_10:
    v5 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "main.low-water-loop-protection");
    v6 = dispatch_time(0, (uint64_t)(v10 * 1000000000.0));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = nullsub_2085;
    v7[3] = &unk_10212BB58;
    v7[4] = v5;
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, v7);

  }
}

void sub_1018810C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018810D4()
{
  int v0;
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  NSObject *v63;
  NSObject *v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  NSObject *v69;
  int v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  NSObject *v74;
  int v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  NSObject *v79;
  int v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  NSObject *v84;
  int v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  NSObject *v89;
  int v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  NSObject *v94;
  int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  NSObject *v99;
  int v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  NSObject *v104;
  int v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  NSObject *v109;
  int v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  NSObject *v114;
  int v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  NSObject *v119;
  int v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  NSObject *v124;
  int v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  NSObject *v129;
  int v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  NSObject *v134;
  int v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  NSObject *v139;
  int v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  NSObject *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  int v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  NSObject *v200;
  int v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  NSObject *v205;
  int v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  NSObject *v210;
  int v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  NSObject *v215;
  int v216;
  std::__shared_weak_count *v217;
  unint64_t *v218;
  unint64_t v219;
  NSObject *v220;
  int v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  NSObject *v225;
  int v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  NSObject *v230;
  int v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  NSObject *v235;
  int v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  NSObject *v240;
  int v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  NSObject *v245;
  int v246;
  std::__shared_weak_count *v247;
  unint64_t *v248;
  unint64_t v249;
  NSObject *v250;
  int v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  NSObject *v255;
  int v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  NSObject *v260;
  int v261;
  std::__shared_weak_count *v262;
  unint64_t *v263;
  unint64_t v264;
  NSObject *v265;
  int v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  NSObject *v270;
  int v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  NSObject *v275;
  _QWORD *v276;
  char *v277;
  std::string *v278;
  __int128 v279;
  char *v280;
  std::string *v281;
  __int128 v282;
  uint64_t v283;
  char *v284;
  std::string *v285;
  __int128 v286;
  std::__shared_weak_count *v287;
  unint64_t *p_shared_owners;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t *v292;
  unint64_t v293;
  _BOOL4 v294;
  _BOOL4 v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  int v305;
  int v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  std::__shared_weak_count *v313;
  unint64_t *v314;
  unint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  unint64_t *v322;
  std::__shared_weak_count *v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  uint64_t v332;
  void *v333[2];
  std::string::size_type v334;
  uint64_t v335;
  std::__shared_weak_count *v336;
  void *v337[2];
  std::string::size_type v338;
  void *__p[2];
  std::string::size_type v340;
  CFTypeRef v341;
  __int128 v342;
  BOOL v343;
  __int128 v344;
  std::string::size_type v345;
  __int128 v346;
  std::string::size_type v347;
  __int128 v348;
  uint64_t buf;
  _BYTE buf_8[20];
  __int16 v351;
  int v352;

  sub_1001E4804(&buf);
  LODWORD(v348) = 0;
  if (sub_1001E4B84(buf, "LogLegacyRadar", &v348))
    v0 = v348;
  else
    v0 = 0;
  v1 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v2 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  if (!sub_100ACDE60(v0))
  {
    if (v0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v63 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        buf = 68289282;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 1026;
        *(_DWORD *)&buf_8[12] = v0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid radar\", \"radar\":%{public}d}", (uint8_t *)&buf, 0x18u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      }
      v64 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        buf = 68289282;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 1026;
        *(_DWORD *)&buf_8[12] = v0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v64, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid radar", "{\"msg%{public}.0s\":\"Invalid radar\", \"radar\":%{public}d}", (uint8_t *)&buf, 0x18u);
      }
    }
    v341 = 0;
    sub_1001E4804(&buf);
    v65 = sub_100525C58(buf, "LogFile", &v341, 0xFFFFFFFFLL);
    v66 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v67 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (v65)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v69 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFile";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v70 = sub_100525C58(buf, "LogFilePrefix", &v341, 0xFFFFFFFFLL);
    v71 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v72 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (v70)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v74 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFilePrefix";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v75 = sub_100525C58(buf, "LogFileFlush", &v341, 0xFFFFFFFFLL);
    v76 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v77 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (v75)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v79 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileFlush";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v80 = sub_100525C58(buf, "ShowError", &v341, 0xFFFFFFFFLL);
    v81 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v82 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    if (v80)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v84 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "ShowError";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v85 = sub_100525C58(buf, "LogFence", &v341, 0xFFFFFFFFLL);
    v86 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v87 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (v85)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v89 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFence";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v90 = sub_100525C58(buf, "LogBufferSize", &v341, 0xFFFFFFFFLL);
    v91 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v92 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v90)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v94 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogBufferSize";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v95 = sub_100525C58(buf, "LogShowUI", &v341, 0xFFFFFFFFLL);
    v96 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v97 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (v95)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v99 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogShowUI";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v100 = sub_100525C58(buf, "LogFileLevel", &v341, 0xFFFFFFFFLL);
    v101 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v102 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    if (v100)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v104 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileLevel";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v105 = sub_100525C58(buf, "LogBufferLevel", &v341, 0xFFFFFFFFLL);
    v106 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v107 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    if (v105)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v109 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogBufferLevel";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v110 = sub_100525C58(buf, "LogConsoleLevel", &v341, 0xFFFFFFFFLL);
    v111 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v112 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    if (v110)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v114 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogConsoleLevel";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v115 = sub_100525C58(buf, "LogStackLevel", &v341, 0xFFFFFFFFLL);
    v116 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v117 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    if (v115)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v119 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogStackLevel";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v120 = sub_100525C58(buf, "LogFileRotationSize", &v341, 0xFFFFFFFFLL);
    v121 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v122 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    if (v120)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v124 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileRotationSize";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v125 = sub_100525C58(buf, "LogFileStorageCount", &v341, 0xFFFFFFFFLL);
    v126 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v127 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    if (v125)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v129 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileStorageCount";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v130 = sub_100525C58(buf, "LogLocations", &v341, 0xFFFFFFFFLL);
    v131 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v132 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    if (v130)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v134 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogLocations";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v135 = sub_100525C58(buf, "LogLocationsFile", &v341, 0xFFFFFFFFLL);
    v136 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v137 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    if (v135)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v139 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogLocationsFile";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v140 = sub_100525C58(buf, "LogLocationsFlush", &v341, 0xFFFFFFFFLL);
    v141 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v142 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    if (v140)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v144 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogLocationsFlush";
        v351 = 1026;
        v352 = 1;
        _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogFile", 0xFFFFFFFFLL);
    v145 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v146 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v147 = __ldaxr(v146);
      while (__stlxr(v147 - 1, v146));
      if (!v147)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogFilePrefix", 0xFFFFFFFFLL);
    v148 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v149 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v150 = __ldaxr(v149);
      while (__stlxr(v150 - 1, v149));
      if (!v150)
      {
        ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
        std::__shared_weak_count::__release_weak(v148);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogFileFlush", 0xFFFFFFFFLL);
    v151 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v152 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "ShowError", 0xFFFFFFFFLL);
    v154 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v155 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogFence", 0xFFFFFFFFLL);
    v157 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v158 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogBufferSize", 0xFFFFFFFFLL);
    v160 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v161 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogShowUI", 0xFFFFFFFFLL);
    v163 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v164 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogFileLevel", 0xFFFFFFFFLL);
    v166 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v167 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogBufferLevel", 0xFFFFFFFFLL);
    v169 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v170 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogConsoleLevel", 0xFFFFFFFFLL);
    v172 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v173 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v174 = __ldaxr(v173);
      while (__stlxr(v174 - 1, v173));
      if (!v174)
      {
        ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
        std::__shared_weak_count::__release_weak(v172);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogStackLevel", 0xFFFFFFFFLL);
    v175 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v176 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v177 = __ldaxr(v176);
      while (__stlxr(v177 - 1, v176));
      if (!v177)
      {
        ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
        std::__shared_weak_count::__release_weak(v175);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogFileRotationSize", 0xFFFFFFFFLL);
    v178 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v179 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogFileStorageCount", 0xFFFFFFFFLL);
    v181 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v182 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v183 = __ldaxr(v182);
      while (__stlxr(v183 - 1, v182));
      if (!v183)
      {
        ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
        std::__shared_weak_count::__release_weak(v181);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogLocations", 0xFFFFFFFFLL);
    v184 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v185 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v186 = __ldaxr(v185);
      while (__stlxr(v186 - 1, v185));
      if (!v186)
      {
        ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
        std::__shared_weak_count::__release_weak(v184);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogLocationsFile", 0xFFFFFFFFLL);
    v187 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v188 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v189 = __ldaxr(v188);
      while (__stlxr(v189 - 1, v188));
      if (!v189)
      {
        ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
        std::__shared_weak_count::__release_weak(v187);
      }
    }
    sub_1001E4804(&buf);
    sub_100525484(buf, "LogLocationsFlush", 0xFFFFFFFFLL);
    v190 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v191 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v192 = __ldaxr(v191);
      while (__stlxr(v192 - 1, v191));
      if (!v192)
      {
        ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
        std::__shared_weak_count::__release_weak(v190);
      }
    }
    sub_1001E4804(&buf);
    sub_100569514(buf);
    v193 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v194 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    sub_1001E4804(&buf);
    v196 = sub_100525C58(buf, "LogFile", &v341, 0xFFFFFFFFLL);
    v197 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v198 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    if (v196)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v200 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFile";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v200, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v201 = sub_100525C58(buf, "LogFilePrefix", &v341, 0xFFFFFFFFLL);
    v202 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v203 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v204 = __ldaxr(v203);
      while (__stlxr(v204 - 1, v203));
      if (!v204)
      {
        ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
        std::__shared_weak_count::__release_weak(v202);
      }
    }
    if (v201)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v205 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFilePrefix";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v206 = sub_100525C58(buf, "LogFileFlush", &v341, 0xFFFFFFFFLL);
    v207 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v208 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v209 = __ldaxr(v208);
      while (__stlxr(v209 - 1, v208));
      if (!v209)
      {
        ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
        std::__shared_weak_count::__release_weak(v207);
      }
    }
    if (v206)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v210 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileFlush";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v211 = sub_100525C58(buf, "ShowError", &v341, 0xFFFFFFFFLL);
    v212 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v213 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    if (v211)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v215 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "ShowError";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v215, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v216 = sub_100525C58(buf, "LogFence", &v341, 0xFFFFFFFFLL);
    v217 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v218 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v219 = __ldaxr(v218);
      while (__stlxr(v219 - 1, v218));
      if (!v219)
      {
        ((void (*)(std::__shared_weak_count *))v217->__on_zero_shared)(v217);
        std::__shared_weak_count::__release_weak(v217);
      }
    }
    if (v216)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v220 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFence";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v220, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v221 = sub_100525C58(buf, "LogBufferSize", &v341, 0xFFFFFFFFLL);
    v222 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v223 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v224 = __ldaxr(v223);
      while (__stlxr(v224 - 1, v223));
      if (!v224)
      {
        ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
        std::__shared_weak_count::__release_weak(v222);
      }
    }
    if (v221)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v225 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogBufferSize";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v225, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v226 = sub_100525C58(buf, "LogShowUI", &v341, 0xFFFFFFFFLL);
    v227 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v228 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v229 = __ldaxr(v228);
      while (__stlxr(v229 - 1, v228));
      if (!v229)
      {
        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
        std::__shared_weak_count::__release_weak(v227);
      }
    }
    if (v226)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v230 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogShowUI";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v231 = sub_100525C58(buf, "LogFileLevel", &v341, 0xFFFFFFFFLL);
    v232 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v233 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
        std::__shared_weak_count::__release_weak(v232);
      }
    }
    if (v231)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v235 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileLevel";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v235, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v236 = sub_100525C58(buf, "LogBufferLevel", &v341, 0xFFFFFFFFLL);
    v237 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v238 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v239 = __ldaxr(v238);
      while (__stlxr(v239 - 1, v238));
      if (!v239)
      {
        ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
        std::__shared_weak_count::__release_weak(v237);
      }
    }
    if (v236)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v240 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogBufferLevel";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v241 = sub_100525C58(buf, "LogConsoleLevel", &v341, 0xFFFFFFFFLL);
    v242 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v243 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      if (!v244)
      {
        ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
        std::__shared_weak_count::__release_weak(v242);
      }
    }
    if (v241)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v245 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogConsoleLevel";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v245, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v246 = sub_100525C58(buf, "LogStackLevel", &v341, 0xFFFFFFFFLL);
    v247 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v248 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v249 = __ldaxr(v248);
      while (__stlxr(v249 - 1, v248));
      if (!v249)
      {
        ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
        std::__shared_weak_count::__release_weak(v247);
      }
    }
    if (v246)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v250 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogStackLevel";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v250, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v251 = sub_100525C58(buf, "LogFileRotationSize", &v341, 0xFFFFFFFFLL);
    v252 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v253 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v254 = __ldaxr(v253);
      while (__stlxr(v254 - 1, v253));
      if (!v254)
      {
        ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
        std::__shared_weak_count::__release_weak(v252);
      }
    }
    if (v251)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v255 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileRotationSize";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v256 = sub_100525C58(buf, "LogFileStorageCount", &v341, 0xFFFFFFFFLL);
    v257 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v258 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v259 = __ldaxr(v258);
      while (__stlxr(v259 - 1, v258));
      if (!v259)
      {
        ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
        std::__shared_weak_count::__release_weak(v257);
      }
    }
    if (v256)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v260 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogFileStorageCount";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v260, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v261 = sub_100525C58(buf, "LogLocations", &v341, 0xFFFFFFFFLL);
    v262 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v263 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v264 = __ldaxr(v263);
      while (__stlxr(v264 - 1, v263));
      if (!v264)
      {
        ((void (*)(std::__shared_weak_count *))v262->__on_zero_shared)(v262);
        std::__shared_weak_count::__release_weak(v262);
      }
    }
    if (v261)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v265 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogLocations";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v265, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v266 = sub_100525C58(buf, "LogLocationsFile", &v341, 0xFFFFFFFFLL);
    v267 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v268 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v269 = __ldaxr(v268);
      while (__stlxr(v269 - 1, v268));
      if (!v269)
      {
        ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
        std::__shared_weak_count::__release_weak(v267);
      }
    }
    if (v266)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v270 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogLocationsFile";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v270, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    sub_1001E4804(&buf);
    v271 = sub_100525C58(buf, "LogLocationsFlush", &v341, 0xFFFFFFFFLL);
    v272 = *(std::__shared_weak_count **)buf_8;
    if (*(_QWORD *)buf_8)
    {
      v273 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
      do
        v274 = __ldaxr(v273);
      while (__stlxr(v274 - 1, v273));
      if (!v274)
      {
        ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
        std::__shared_weak_count::__release_weak(v272);
      }
    }
    if (v271)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6160);
      v275 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        buf = 68289538;
        *(_WORD *)buf_8 = 2082;
        *(_QWORD *)&buf_8[2] = "";
        *(_WORD *)&buf_8[10] = 2082;
        *(_QWORD *)&buf_8[12] = "LogLocationsFlush";
        v351 = 1026;
        v352 = 0;
        _os_log_impl((void *)&_mh_execute_header, v275, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, Legacy log settings found\", \"key\":%{public, location:escape_only}s, \"clearing\":%{public}hhd}", (uint8_t *)&buf, 0x22u);
      }
    }
    v276 = operator new(0xA0uLL);
    v276[1] = 0;
    v276[2] = 0;
    *v276 = off_1021D61B0;
    *(_QWORD *)&v348 = sub_100AD16CC((uint64_t)(v276 + 3), CFSTR("com.apple.locationd.legacy-logging-dummy-settings"), 1);
    *((_QWORD *)&v348 + 1) = v276;
    v277 = (char *)sub_1001FD94C();
    sub_1000B7884(v277, (uint64_t)&buf);
    v278 = std::string::append((std::string *)&buf, "locationd.log");
    v279 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
    v340 = v278->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v279;
    v278->__r_.__value_.__l.__size_ = 0;
    v278->__r_.__value_.__r.__words[2] = 0;
    v278->__r_.__value_.__r.__words[0] = 0;
    sub_100528888((uint64_t)(v276 + 16), "LogFile", (char *)__p);
    if (SHIBYTE(v340) < 0)
      operator delete(__p[0]);
    if ((buf_8[15] & 0x80000000) != 0)
      operator delete((void *)buf);
    v280 = (char *)sub_1001FD94C();
    sub_1000B7884(v280, (uint64_t)&buf);
    v281 = std::string::append((std::string *)&buf, "logs");
    v282 = *(_OWORD *)&v281->__r_.__value_.__l.__data_;
    v338 = v281->__r_.__value_.__r.__words[2];
    *(_OWORD *)v337 = v282;
    v281->__r_.__value_.__l.__size_ = 0;
    v281->__r_.__value_.__r.__words[2] = 0;
    v281->__r_.__value_.__r.__words[0] = 0;
    sub_100528888((uint64_t)(v276 + 16), "LogFileDirectory", (char *)v337);
    if (SHIBYTE(v338) < 0)
      operator delete(v337[0]);
    if ((buf_8[15] & 0x80000000) != 0)
      operator delete((void *)buf);
    sub_1001E4804(&v335);
    v283 = v335;
    v284 = (char *)sub_1001FD94C();
    sub_1000B7884(v284, (uint64_t)&buf);
    v285 = std::string::append((std::string *)&buf, "logs");
    v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
    v334 = v285->__r_.__value_.__r.__words[2];
    *(_OWORD *)v333 = v286;
    v285->__r_.__value_.__l.__size_ = 0;
    v285->__r_.__value_.__r.__words[2] = 0;
    v285->__r_.__value_.__r.__words[0] = 0;
    sub_100528888(v283 + 104, "LogFileDirectory", (char *)v333);
    if (SHIBYTE(v334) < 0)
      operator delete(v333[0]);
    if ((buf_8[15] & 0x80000000) != 0)
      operator delete((void *)buf);
    v287 = v336;
    if (v336)
    {
      p_shared_owners = (unint64_t *)&v336->__shared_owners_;
      do
        v289 = __ldaxr(p_shared_owners);
      while (__stlxr(v289 - 1, p_shared_owners));
      if (!v289)
      {
        ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
        std::__shared_weak_count::__release_weak(v287);
      }
    }
    v290 = v348;
    sub_1005285B4(v348 + 104, "LogFilePrefix", "locationd");
    LODWORD(buf) = 52428800;
    sub_10011B4E4(v290 + 104, "LogFileRotationSize", &buf);
    LODWORD(buf) = 0;
    sub_10011B4E4(v290 + 104, "LogFileStorageCount", &buf);
    LODWORD(buf) = -1;
    sub_10011B4E4(v290 + 104, "LogFileLevel", &buf);
    LOBYTE(buf) = 0;
    sub_10011B47C(v290 + 104, "LogFileFlush", &buf);
    LOBYTE(buf) = 0;
    sub_10011B47C(v290 + 104, "LogShowUI", &buf);
    LOBYTE(buf) = 0;
    sub_10011B47C(v290 + 104, "LogFence", &buf);
    LODWORD(buf) = -1;
    sub_10011B4E4(v290 + 104, "LogBufferLevel", &buf);
    LODWORD(buf) = 0;
    sub_10011B4E4(v290 + 104, "LogBufferSize", &buf);
    LODWORD(buf) = -1;
    sub_10011B4E4(v290 + 104, "LogConsoleLevel", &buf);
    LODWORD(buf) = -1;
    sub_10011B4E4(v290 + 104, "LogStackLevel", &buf);
    v291 = sub_1001BFFCC();
    if (*((_QWORD *)&v348 + 1))
    {
      v292 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
      do
        v293 = __ldxr(v292);
      while (__stxr(v293 + 1, v292));
    }
    sub_1012248B8(v291);
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D6160);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289282;
    *(_WORD *)buf_8 = 2082;
    *(_QWORD *)&buf_8[2] = "";
    *(_WORD *)&buf_8[10] = 1026;
    *(_DWORD *)&buf_8[12] = v0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Warning, Legacy logging enabled\", \"radar\":%{public}d}", (uint8_t *)&buf, 0x18u);
  }
  sub_1001E4804(&v348);
  v5 = v348;
  v6 = (char *)sub_1001FD94C();
  sub_1000B7884(v6, (uint64_t)&buf);
  v7 = std::string::append((std::string *)&buf, "locationd.log");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v347 = v7->__r_.__value_.__r.__words[2];
  v346 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  sub_100528888(v5 + 104, "LogFile", (char *)&v346);
  if (SHIBYTE(v347) < 0)
    operator delete((void *)v346);
  if ((buf_8[15] & 0x80000000) != 0)
    operator delete((void *)buf);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_1001E4804(&v348);
  v12 = v348;
  v13 = (char *)sub_1001FD94C();
  sub_1000B7884(v13, (uint64_t)&buf);
  v14 = std::string::append((std::string *)&buf, "logs");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v345 = v14->__r_.__value_.__r.__words[2];
  v344 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_100528888(v12 + 104, "LogFileDirectory", (char *)&v344);
  if (SHIBYTE(v345) < 0)
    operator delete((void *)v344);
  if ((buf_8[15] & 0x80000000) != 0)
    operator delete((void *)buf);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  sub_1001E4804(&buf);
  sub_1005285B4(buf + 104, "LogFilePrefix", "locationd");
  v19 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v20 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  sub_1001E4804(&buf);
  LODWORD(v348) = 52428800;
  sub_10011B4E4(buf + 104, "LogFileRotationSize", &v348);
  v22 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v23 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  sub_1001E4804(&buf);
  LODWORD(v348) = 6;
  sub_10011B4E4(buf + 104, "LogFileStorageCount", &v348);
  v25 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v26 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  sub_1001E4804(&buf);
  LODWORD(v348) = -1;
  sub_10011B4E4(buf + 104, "LogFileLevel", &v348);
  v28 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v29 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  sub_1001E4804(&buf);
  LOBYTE(v348) = 0;
  sub_10011B47C(buf + 104, "LogFileFlush", &v348);
  v31 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v32 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  sub_1001E4804(&buf);
  LOBYTE(v348) = 0;
  sub_10011B47C(buf + 104, "LogShowUI", &v348);
  v34 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v35 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  sub_1001E4804(&buf);
  LOBYTE(v348) = 0;
  sub_10011B47C(buf + 104, "LogFence", &v348);
  v37 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v38 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  sub_1001E4804(&buf);
  LODWORD(v348) = -1;
  sub_10011B4E4(buf + 104, "LogBufferLevel", &v348);
  v40 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v41 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  sub_1001E4804(&buf);
  LODWORD(v348) = 0;
  sub_10011B4E4(buf + 104, "LogBufferSize", &v348);
  v43 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v44 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  sub_1001E4804(&buf);
  LODWORD(v348) = 0;
  sub_10011B4E4(buf + 104, "LogConsoleLevel", &v348);
  v46 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v47 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  sub_1001E4804(&buf);
  LODWORD(v348) = 0;
  sub_10011B4E4(buf + 104, "LogStackLevel", &v348);
  v49 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v50 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  LOBYTE(v341) = 0;
  sub_1001E4804(&buf);
  v52 = sub_1001E4874(buf, "LogLocationsFlush", (BOOL *)&v341);
  v53 = v52;
  v54 = *(std::__shared_weak_count **)buf_8;
  if (!*(_QWORD *)buf_8)
    goto LABEL_91;
  v55 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
    std::__shared_weak_count::__release_weak(v54);
    if (!v53)
      goto LABEL_537;
  }
  else
  {
LABEL_91:
    if (!v52)
      goto LABEL_537;
  }
  sub_1001E4804(&buf);
  sub_100525484(buf, "LogLocationsFlush", 0xFFFFFFFFLL);
  v57 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v58 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  sub_1001E4804(&buf);
  sub_10011B47C(buf, "LogFileFlush", &v341);
  v60 = *(std::__shared_weak_count **)buf_8;
  if (*(_QWORD *)buf_8)
  {
    v61 = (unint64_t *)(*(_QWORD *)buf_8 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
LABEL_537:
  buf = 0;
  *(_QWORD *)buf_8 = 0;
  *(_QWORD *)&buf_8[8] = 0;
  sub_1001E4804(&v348);
  v294 = sub_1000BCB64(v348, "LogLocationsFile", (std::string *)&buf);
  v295 = v294;
  v296 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (!*((_QWORD *)&v348 + 1))
    goto LABEL_541;
  v297 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
  do
    v298 = __ldaxr(v297);
  while (__stlxr(v298 - 1, v297));
  if (!v298)
  {
    ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
    std::__shared_weak_count::__release_weak(v296);
    if (!v295)
      goto LABEL_553;
  }
  else
  {
LABEL_541:
    if (!v294)
      goto LABEL_553;
  }
  sub_1001E4804(&v348);
  sub_100525484(v348, "LogLocationsFile", 0xFFFFFFFFLL);
  v299 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v300 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v301 = __ldaxr(v300);
    while (__stlxr(v301 - 1, v300));
    if (!v301)
    {
      ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
      std::__shared_weak_count::__release_weak(v299);
    }
  }
  sub_1001E4804(&v348);
  sub_100528888(v348, "LogFile", (char *)&buf);
  v302 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v303 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v304 = __ldaxr(v303);
    while (__stlxr(v304 - 1, v303));
    if (!v304)
    {
      ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
      std::__shared_weak_count::__release_weak(v302);
    }
  }
LABEL_553:
  v343 = 0;
  sub_1001E4804(&v348);
  v305 = sub_1001E4874(v348, "LogLocations", &v343);
  v306 = v305;
  v307 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (!*((_QWORD *)&v348 + 1))
    goto LABEL_557;
  v308 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
  do
    v309 = __ldaxr(v308);
  while (__stlxr(v309 - 1, v308));
  if (!v309)
  {
    ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
    std::__shared_weak_count::__release_weak(v307);
    if (!v306)
      goto LABEL_595;
  }
  else
  {
LABEL_557:
    if (!v305)
      goto LABEL_595;
  }
  sub_1001E4804(&v348);
  sub_100525484(v348, "LogLocations", 0xFFFFFFFFLL);
  v310 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v311 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v312 = __ldaxr(v311);
    while (__stlxr(v312 - 1, v311));
    if (!v312)
    {
      ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
      std::__shared_weak_count::__release_weak(v310);
    }
  }
  if (v343)
  {
    sub_1001E4804(&v348);
    LODWORD(v335) = 3;
    sub_10011B4E4(v348, "LogFileLevel", &v335);
    v313 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
    if (*((_QWORD *)&v348 + 1))
    {
      v314 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
      do
        v315 = __ldaxr(v314);
      while (__stlxr(v315 - 1, v314));
      if (!v315)
      {
        ((void (*)(std::__shared_weak_count *))v313->__on_zero_shared)(v313);
        std::__shared_weak_count::__release_weak(v313);
      }
    }
    sub_1001E4804(&v348);
    LOBYTE(v335) = 1;
    sub_10011B47C(v348, "LogShowUI", &v335);
    v316 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
    if (!*((_QWORD *)&v348 + 1))
      goto LABEL_585;
    v317 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
  }
  else
  {
    sub_1001E4804(&v348);
    LODWORD(v335) = -1;
    sub_10011B4E4(v348, "LogFileLevel", &v335);
    v319 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
    if (*((_QWORD *)&v348 + 1))
    {
      v320 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
      do
        v321 = __ldaxr(v320);
      while (__stlxr(v321 - 1, v320));
      if (!v321)
      {
        ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
        std::__shared_weak_count::__release_weak(v319);
      }
    }
    sub_1001E4804(&v348);
    LOBYTE(v335) = 0;
    sub_10011B47C(v348, "LogShowUI", &v335);
    v316 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
    if (!*((_QWORD *)&v348 + 1))
      goto LABEL_585;
    v322 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v318 = __ldaxr(v322);
    while (__stlxr(v318 - 1, v322));
  }
  if (!v318)
  {
    ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
    std::__shared_weak_count::__release_weak(v316);
  }
LABEL_585:
  sub_1001E4804(&v348);
  sub_100525484(v348, "LogConsoleLevel", 0);
  v323 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v324 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v325 = __ldaxr(v324);
    while (__stlxr(v325 - 1, v324));
    if (!v325)
    {
      ((void (*)(std::__shared_weak_count *))v323->__on_zero_shared)(v323);
      std::__shared_weak_count::__release_weak(v323);
    }
  }
  sub_1001E4804(&v348);
  sub_100525484(v348, "LogStackLevel", 0xFFFFFFFFLL);
  v326 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v327 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 - 1, v327));
    if (!v328)
    {
      ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
      std::__shared_weak_count::__release_weak(v326);
    }
  }
LABEL_595:
  sub_1001E4804(&v348);
  sub_100569514(v348);
  v329 = (std::__shared_weak_count *)*((_QWORD *)&v348 + 1);
  if (*((_QWORD *)&v348 + 1))
  {
    v330 = (unint64_t *)(*((_QWORD *)&v348 + 1) + 8);
    do
      v331 = __ldaxr(v330);
    while (__stlxr(v331 - 1, v330));
    if (!v331)
    {
      ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
      std::__shared_weak_count::__release_weak(v329);
    }
  }
  v332 = sub_1001BFFCC();
  sub_1001E4804(&v348);
  v342 = v348;
  v348 = 0uLL;
  sub_1012248B8(v332);
}

void sub_101884810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48)
{
  uint64_t v48;

  sub_100261F44(v48 - 160);
  if (*(char *)(v48 - 121) < 0)
    operator delete(*(void **)(v48 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_101884AF4()
{
  uint64_t result;

  result = qword_102310098;
  if (qword_102310098)
    return sub_10187E568((unsigned int *)qword_102310098, 1);
  return result;
}

uint64_t sub_101884B0C()
{
  sigaction v1;

  signal(14, (void (__cdecl *)(int))sub_101884C64);
  signal(2, (void (__cdecl *)(int))sub_101884C64);
  v1 = (sigaction)off_1021D61F0;
  sigaction(3, &v1, 0);
  return sigaction(15, &v1, 0);
}

void (__cdecl *sub_101884B7C())(int)
{
  signal(14, (void (__cdecl *)(int))1);
  signal(2, (void (__cdecl *)(int))1);
  signal(3, (void (__cdecl *)(int))1);
  return signal(15, (void (__cdecl *)(int))1);
}

void sub_101884BB8(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101884BE4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101884C14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D61B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101884C24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D61B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_101884C54(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_101884C64(int a1)
{
  __CFRunLoop *v2;

  if ((a1 - 2) < 2 || a1 == 15)
  {
    alarm(0xAu);
    CFRunLoopSourceSignal((CFRunLoopSourceRef)qword_102310090);
    v2 = (__CFRunLoop *)sub_100193530();
    CFRunLoopWakeUp(v2);
  }
  else if (a1 == 14)
  {
    _Exit(1);
  }
}

void sub_101884CB4(int a1, uint64_t a2)
{
  if (a2)
    dword_102300900 = *(_DWORD *)(a2 + 12);
  sub_101884C64(a1);
}

void sub_101884CC8()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CEAED8;
      v1[3] = unk_101CEAEE8;
      v1[4] = xmmword_101CEAEF8;
      v1[0] = xmmword_101CEAEB8;
      v1[1] = unk_101CEAEC8;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_101884D9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

BOOL sub_101884DB4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a2 + 16);
  if (v2 < v3)
    return 1;
  if (v2 > v3)
    return 0;
  v4 = *(float *)(a1 + 12);
  v5 = *(float *)(a2 + 12);
  if (v4 < v5)
    return 1;
  if (v4 > v5)
    return 0;
  if (*(float *)a1 < *(float *)a2)
    return 1;
  if (*(float *)a1 > *(float *)a2)
    return 0;
  v6 = *(float *)(a1 + 4);
  v7 = *(float *)(a2 + 4);
  if (v6 < v7)
    return 1;
  if (v6 > v7)
    return 0;
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

void sub_101884E28(_QWORD *a1)
{
  sub_1011FD80C(a1);
}

void sub_101885534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  uint64_t v20;
  void **v21;
  void *v22;
  void *v23;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  v20 = v16[403];
  v16[403] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (void **)(v16 + 35);
  sub_10188CA10(a15);
  v22 = *v18;
  if (*v18)
  {
    v16[40] = v22;
    operator delete(v22);
  }
  v23 = *v21;
  if (*v21)
  {
    v16[36] = v23;
    operator delete(v23);
  }
  v16[2] = off_1021D76A8;
  sub_1006322C0(v16 + 16);
  sub_1006153DC(a16);
  sub_1011FD9DC(v16);
  _Unwind_Resume(a1);
}

void sub_101885640(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  void *__p;
  _BYTE v27[20];
  __int16 v28;
  const char *v29;

  if (!*(_BYTE *)(a1 + 270))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
    *(_DWORD *)(a1 + 304) = 0;
    __p = 0;
    *(_QWORD *)v27 = 0;
    *(_QWORD *)&v27[8] = 0;
    sub_100952314(&__p);
    v2 = __p;
    v3 = *(_DWORD **)v27;
    if (__p != *(void **)v27)
    {
      v4 = *(char **)(a1 + 288);
      do
      {
        v5 = (uint64_t *)(v2 + 1);
        v6 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v4 >= v6)
        {
          v9 = *(_QWORD *)(a1 + 280);
          v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v9] >> 2);
          v11 = v10 + 1;
          if (v10 + 1 > 0xCCCCCCCCCCCCCCCLL)
            sub_100259694();
          v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - v9) >> 2);
          if (2 * v12 > v11)
            v11 = 2 * v12;
          if (v12 >= 0x666666666666666)
            v13 = 0xCCCCCCCCCCCCCCCLL;
          else
            v13 = v11;
          v14 = (char *)sub_10188D184(v13);
          v16 = &v14[20 * v10];
          v17 = *v2;
          v18 = *v5;
          *((_DWORD *)v16 + 2) = v2[3];
          *(_QWORD *)v16 = v18;
          *((_DWORD *)v16 + 3) = v17;
          *((_DWORD *)v16 + 4) = -1;
          v20 = *(char **)(a1 + 280);
          v19 = *(char **)(a1 + 288);
          v21 = v16;
          if (v19 != v20)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 20);
              *((_DWORD *)v21 - 1) = *((_DWORD *)v19 - 1);
              *(_OWORD *)(v21 - 20) = v22;
              v21 -= 20;
              v19 -= 20;
            }
            while (v19 != v20);
            v19 = *(char **)(a1 + 280);
          }
          v4 = v16 + 20;
          *(_QWORD *)(a1 + 280) = v21;
          *(_QWORD *)(a1 + 288) = v16 + 20;
          *(_QWORD *)(a1 + 296) = &v14[20 * v15];
          if (v19)
            operator delete(v19);
        }
        else
        {
          v7 = *v2;
          v8 = *v5;
          *((_DWORD *)v4 + 2) = v2[3];
          *(_QWORD *)v4 = v8;
          *((_DWORD *)v4 + 3) = v7;
          *((_DWORD *)v4 + 4) = -1;
          v4 += 20;
        }
        *(_QWORD *)(a1 + 288) = v4;
        ++*(_DWORD *)(a1 + 304);
        v2 += 4;
      }
      while (v2 != v3);
    }
    sub_101888D10(a1, -1);
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v23 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
  {
    __p = (void *)68289539;
    *(_WORD *)v27 = 2082;
    *(_QWORD *)&v27[2] = "";
    *(_WORD *)&v27[10] = 2082;
    *(_QWORD *)&v27[12] = "assert";
    v28 = 2081;
    v29 = "!fBuilding";
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
  }
  v24 = off_10229FD58;
  if (os_signpost_enabled((os_log_t)off_10229FD58))
  {
    __p = (void *)68289539;
    *(_WORD *)v27 = 2082;
    *(_QWORD *)&v27[2] = "";
    *(_WORD *)&v27[10] = 2082;
    *(_QWORD *)&v27[12] = "assert";
    v28 = 2081;
    v29 = "!fBuilding";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
  }
  v25 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    __p = (void *)68289539;
    *(_WORD *)v27 = 2082;
    *(_QWORD *)&v27[2] = "";
    *(_WORD *)&v27[10] = 2082;
    *(_QWORD *)&v27[12] = "assert";
    v28 = 2081;
    v29 = "!fBuilding";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x26u);
  }
  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 346, "initializeWithFactoryData");
  __break(1u);
}

void sub_101885A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_101885A9C(float32x2_t *a1, float32x2_t *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  float32x2_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int32 v8;
  float32x2_t *v9;
  float32x2_t *v10;
  float32x2_t *v11;
  unint64_t v12;
  float32x2_t *v13;
  float v14;
  float v15;
  float32x2_t *i;
  float32x2_t *v17;
  int32x2_t v18;
  float32x2_t *j;
  float32x2_t *v20;
  float v21;
  float32x2_t *v22;
  float v23;
  float32x2_t v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  float32x2_t *v29;
  float32x2_t *v30;
  float32x2_t v31;
  __int32 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int32 v36;
  float32x2_t *v37;
  int v38;
  int v39;
  NSObject *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _BOOL8 v46;
  double v48;
  double v49;
  double v50;
  const char *v51;
  uint8_t *v52;
  double v53;
  float32x2_t *v54;
  float32x2_t *v58;
  float32x2_t *v59;
  unint64_t v60;
  int v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  uint8_t buf[4];
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;

  v58 = 0;
  v59 = 0;
  v60 = 0;
  if (a1 == a2)
    return 0;
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  v5 = a1;
  do
  {
    v6 = v4 >> 1;
    v7 = (uint64_t)v5 + 20 * (v4 >> 1);
    v8 = *(_DWORD *)(v7 + 16);
    v9 = (float32x2_t *)(v7 + 20);
    v4 += ~(v4 >> 1);
    if (v8 <= a1[2].i32[0])
      v5 = v9;
    else
      v4 = v6;
  }
  while (v4);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v59;
  v14 = 1.1755e-38;
  v15 = 3.4028e38;
  v54 = a1;
  for (i = a1; ; i = v17)
  {
    v17 = v5;
    if (((sub_1001B7910() & 0x8000) == 0 || i[2].i32[0] == -1) && (char *)v17 - (char *)i >= 40)
    {
      for (j = (float32x2_t *)((char *)v17 - 20); i != j; j = (float32x2_t *)((char *)v17 - 20))
      {
        v20 = i;
        v21 = i[1].f32[1];
        if (v21 < v15)
          v15 = i[1].f32[1];
        if (v21 > v14)
          v14 = i[1].f32[1];
        i = (float32x2_t *)((char *)i + 20);
        if (i != v17)
        {
          v22 = i;
          do
          {
            v18.i32[0] = v20[1].i32[1];
            v23 = v22[1].f32[1];
            if (*(float *)v18.i32 != v23)
            {
              if (v23 < v15)
                v15 = v22[1].f32[1];
              if (v23 > v14)
                v14 = v22[1].f32[1];
              *(float *)v18.i32 = *(float *)v18.i32 - v23;
              v24 = vdiv_f32(vsub_f32(*v20, *v22), (float32x2_t)vdup_lane_s32(v18, 0));
              v25 = (float)(v20[1].f32[0] - v22[1].f32[0]) / *(float *)v18.i32;
              if ((unint64_t)v10 >= v12)
              {
                v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v11) >> 2) + 1;
                if (v26 > 0x1555555555555555)
                {
                  v59 = v13;
                  v60 = v12;
                  v58 = v11;
                  sub_100259694();
                }
                if (0x5555555555555556 * ((uint64_t)(v12 - (_QWORD)v11) >> 2) > v26)
                  v26 = 0x5555555555555556 * ((uint64_t)(v12 - (_QWORD)v11) >> 2);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v11) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                  v27 = 0x1555555555555555;
                else
                  v27 = v26;
                if (v27)
                  v27 = (unint64_t)sub_10188E6F4(v27);
                else
                  v28 = 0;
                v29 = (float32x2_t *)(v27 + 4 * (((char *)v10 - (char *)v11) >> 2));
                *v29 = v24;
                v29[1].f32[0] = v25;
                v30 = v29;
                while (v10 != v11)
                {
                  v31 = *(float32x2_t *)((char *)v10 - 12);
                  v10 = (float32x2_t *)((char *)v10 - 12);
                  v32 = v10[1].i32[0];
                  *(float32x2_t *)((char *)v30 - 12) = v31;
                  v30 = (float32x2_t *)((char *)v30 - 12);
                  v30[1].i32[0] = v32;
                }
                v12 = v27 + 12 * v28;
                v13 = (float32x2_t *)((char *)v29 + 12);
                if (v11)
                  operator delete(v11);
                v10 = v13;
                v11 = v30;
              }
              else
              {
                *v10 = v24;
                v10[1].f32[0] = v25;
                v13 = (float32x2_t *)((char *)v10 + 12);
                v10 = (float32x2_t *)((char *)v10 + 12);
              }
            }
            v22 = (float32x2_t *)((char *)v22 + 20);
          }
          while (v22 != v17);
        }
      }
    }
    if (v17 == a2)
      break;
    v33 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v17) >> 2);
    v5 = v17;
    do
    {
      v34 = v33 >> 1;
      v35 = (uint64_t)v5 + 20 * (v33 >> 1);
      v36 = *(_DWORD *)(v35 + 16);
      v37 = (float32x2_t *)(v35 + 20);
      v33 += ~(v33 >> 1);
      if (v36 <= v17[2].i32[0])
        v5 = v37;
      else
        v33 = v34;
    }
    while (v33);
  }
  v59 = v13;
  v60 = v12;
  v58 = v11;
  if (v11 == v10)
  {
    v46 = 0;
    if (!v10)
      return v46;
LABEL_60:
    v59 = v10;
    operator delete(v10);
    return v46;
  }
  *(float *)(a4 + 24) = v15;
  *(float *)(a4 + 28) = v14;
  *(float *)(a4 + 32) = sub_10188A8C0((uint64_t *)&v58);
  *(_DWORD *)(a4 + 36) = v38;
  *(_DWORD *)(a4 + 40) = v39;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v40 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    v41 = *(float *)(a4 + 32);
    v42 = *(float *)(a4 + 36);
    v43 = *(float *)(a4 + 40);
    *(_DWORD *)buf = 134218496;
    v68 = v41;
    v69 = 2048;
    v70 = v42;
    v71 = 2048;
    v72 = v43;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "ComputeFullBias: x,%f,y,%f,z,%f", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v48 = *(float *)(a4 + 32);
    v49 = *(float *)(a4 + 36);
    v50 = *(float *)(a4 + 40);
    v61 = 134218496;
    v62 = v48;
    v63 = 2048;
    v64 = v49;
    v65 = 2048;
    v66 = v50;
    LODWORD(v53) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "ComputeFullBias: x,%f,y,%f,z,%f", COERCE_DOUBLE(&v61), v53, *(double *)&v54);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLGyroCalibrationDatabaseLocalMultiRun::computeFullBias(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  v46 = sub_101886DB8(v54, a2, a3, a4, v44, v45);
  v10 = v11;
  if (v11)
    goto LABEL_60;
  return v46;
}

void sub_101885FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

char *sub_101885FEC(char *result)
{
  char *v1;
  int v2;
  _BYTE __dst[320];

  if (result[384])
  {
    v1 = result;
    sub_101887D20(result);
    memcpy(__dst, v1 + 392, sizeof(__dst));
    v2 = 0;
    return (char *)(*(uint64_t (**)(char *, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*((_QWORD *)v1 + 2)
                                                                                               + 152))(v1 + 16, &v2, __dst, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

_QWORD *sub_101886080(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *a1 = off_1021D6210;
  a1[2] = off_1021D62D0;
  v2 = a1 + 2;
  v3 = a1[403];
  a1[403] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10188CA10((uint64_t)(a1 + 42));
  v4 = (void *)a1[39];
  if (v4)
  {
    a1[40] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[35];
  if (v5)
  {
    a1[36] = v5;
    operator delete(v5);
  }
  a1[2] = off_1021D76A8;
  sub_1006322C0(a1 + 16);
  sub_1006153DC(v2);
  return sub_1011FD9DC(a1);
}

_QWORD *sub_101886118(uint64_t a1)
{
  return sub_101886080((_QWORD *)(a1 - 16));
}

void sub_101886120(_QWORD *a1)
{
  sub_101886080(a1);
  operator delete();
}

void sub_101886144(uint64_t a1)
{
  sub_101886080((_QWORD *)(a1 - 16));
  operator delete();
}

uint64_t sub_10188616C(char *a1, float *a2, float *a3, __n128 a4, double a5)
{
  float v6;
  uint64_t v10;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  int v15;
  float v16;
  NSObject *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t result;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char **v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  int64_t v49;
  char *v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  signed int v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  float *v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  float *v68;
  float *v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  void *v77;
  void *v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  BOOL v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  int64_t v127;
  double v128;
  double v129;
  double v130;
  const char *v131;
  char *v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  BOOL v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  void *v166;
  int v167;
  const char *v168;
  char *v169;
  double v170;
  double v171;
  double v172;
  _QWORD *v173;
  int v174;
  double v175;
  __int16 v176;
  double v177;
  __int16 v178;
  double v179;
  __int16 v180;
  double v181;
  _QWORD buf[205];

  v6 = a4.n128_f32[0];
  v10 = *((_QWORD *)a1 + 403);
  if (v10)
    (*(void (**)(uint64_t, float *, float *, __n128, double))(*(_QWORD *)v10 + 208))(v10, a2, a3, a4, a4.n128_f32[0]);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v11 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    v12 = *a2;
    v13 = a2[1];
    v14 = a2[2];
    LODWORD(buf[0]) = 134218752;
    *(double *)((char *)buf + 4) = v12;
    WORD2(buf[1]) = 2048;
    *(double *)((char *)&buf[1] + 6) = v13;
    HIWORD(buf[2]) = 2048;
    *(double *)&buf[3] = v14;
    LOWORD(buf[4]) = 2048;
    *(double *)((char *)&buf[4] + 2) = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f", (uint8_t *)buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v128 = *a2;
    v129 = a2[1];
    v130 = a2[2];
    v174 = 134218752;
    v175 = v128;
    v176 = 2048;
    v177 = v129;
    v178 = 2048;
    v179 = v130;
    v180 = 2048;
    v181 = v6;
    LODWORD(v170) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f", COERCE_DOUBLE(&v174), v170, v171, v172);
    v132 = (char *)v131;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)", "%s\n", v131);
    if (v132 != (char *)buf)
      free(v132);
  }
  if (fabsf(*a2) > 75.0 || fabsf(a2[1]) > 75.0 || fabsf(a2[2]) > 75.0)
    return 0;
  sub_100197040();
  v15 = sub_1001AA9A8();
  v16 = 1.1755e-38;
  if (((v15 - 82) & 0xFFFFFFF9) == 0)
    v16 = 20.0;
  if (v16 >= v6)
    return 0;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v17 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
  {
    v18 = a1[270];
    LODWORD(buf[0]) = 67109120;
    HIDWORD(buf[0]) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "fBuilding,%d", (uint8_t *)buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v167 = a1[270];
    v174 = 67109120;
    LODWORD(v175) = v167;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "fBuilding,%d", &v174);
    v169 = (char *)v168;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)", "%s\n", v168);
    if (v169 != (char *)buf)
      free(v169);
  }
  if (a1[270])
  {
    v20 = *((_QWORD *)a1 + 35);
    v19 = *((_QWORD *)a1 + 36);
    v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - v20) >> 2);
    if (v21 > 0x3B)
    {
      v51 = *((_DWORD *)a1 + 76);
      if (v51)
      {
        v52 = v51 + 1;
        if (v51 == -1)
        {
          v58 = sub_10100A8F4((uint64_t)(a1 + 720));
        }
        else
        {
          v53 = __clz(v52);
          v54 = 31;
          if (((v52 << v53) & 0x7FFFFFFF) != 0)
            v54 = 32;
          v55 = v54 - v53;
          v56 = v55 >> 5;
          if ((v55 & 0x1F) != 0)
            ++v56;
          if (v56 <= v55)
            v57 = 0xFFFFFFFF >> -(v55 / v56);
          else
            v57 = 0;
          do
            v58 = sub_10100A8F4((uint64_t)(a1 + 720)) & v57;
          while (v58 >= v52);
        }
      }
      else
      {
        v58 = 0;
      }
      v71 = *((_QWORD *)a1 + 35);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a1 + 36) - v71) >> 2) > v58)
      {
        v72 = *((_DWORD *)a1 + 68);
        v73 = v71 + 20 * v58;
        v74 = *(_QWORD *)a2;
        *(float *)(v73 + 8) = a2[2];
        *(_QWORD *)v73 = v74;
        *(float *)(v73 + 12) = v6;
        *(_DWORD *)(v73 + 16) = v72;
      }
    }
    else
    {
      v22 = *((_QWORD *)a1 + 37);
      if (v19 >= v22)
      {
        v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v20) >> 2);
        if (2 * v59 <= v21 + 1)
          v60 = v21 + 1;
        else
          v60 = 2 * v59;
        if (v59 >= 0x666666666666666)
          v61 = 0xCCCCCCCCCCCCCCCLL;
        else
          v61 = v60;
        v62 = (char *)sub_10188D184(v61);
        v63 = (float *)&v62[20 * v21];
        v65 = &v62[20 * v64];
        v66 = *((_DWORD *)a1 + 68);
        v67 = *(_QWORD *)a2;
        v63[2] = a2[2];
        *(_QWORD *)v63 = v67;
        v63[3] = v6;
        *((_DWORD *)v63 + 4) = v66;
        v25 = (char *)(v63 + 5);
        v69 = (float *)*((_QWORD *)a1 + 35);
        v68 = (float *)*((_QWORD *)a1 + 36);
        if (v68 != v69)
        {
          do
          {
            v70 = *(_OWORD *)(v68 - 5);
            *(v63 - 1) = *(v68 - 1);
            *(_OWORD *)(v63 - 5) = v70;
            v63 -= 5;
            v68 -= 5;
          }
          while (v68 != v69);
          v68 = (float *)*((_QWORD *)a1 + 35);
        }
        *((_QWORD *)a1 + 35) = v63;
        *((_QWORD *)a1 + 36) = v25;
        *((_QWORD *)a1 + 37) = v65;
        if (v68)
          operator delete(v68);
      }
      else
      {
        v23 = *((_DWORD *)a1 + 68);
        v24 = *(_QWORD *)a2;
        *(float *)(v19 + 8) = a2[2];
        *(_QWORD *)v19 = v24;
        *(float *)(v19 + 12) = v6;
        *(_DWORD *)(v19 + 16) = v23;
        v25 = (char *)(v19 + 20);
      }
      *((_QWORD *)a1 + 36) = v25;
    }
    ++*((_DWORD *)a1 + 76);
    return 1;
  }
  result = 0;
  if (*a3 <= 0.01 && a3[1] <= 0.01 && a3[2] <= 0.01)
  {
    v27 = *((_QWORD *)a1 + 46);
    v28 = *((_QWORD *)a1 + 47);
    if (v28 >= 0x33)
    {
      --v28;
      *((_QWORD *)a1 + 46) = ++v27;
      *((_QWORD *)a1 + 47) = v28;
      if (v27 >= 0x198)
      {
        operator delete(**((void ***)a1 + 43));
        *((_QWORD *)a1 + 43) += 8;
        v28 = *((_QWORD *)a1 + 47);
        v27 = *((_QWORD *)a1 + 46) - 204;
        *((_QWORD *)a1 + 46) = v27;
      }
    }
    v29 = a1 + 336;
    v30 = (char **)(a1 + 344);
    v31 = (char *)*((_QWORD *)a1 + 44);
    v32 = (char *)*((_QWORD *)a1 + 43);
    v33 = (v31 - v32) >> 3;
    v34 = 204 * v33 - 1;
    if (v31 == v32)
      v34 = 0;
    v35 = v28 + v27;
    v173 = a1 + 336;
    if (v34 != v35)
      goto LABEL_95;
    v36 = v27 >= 0xCC;
    v37 = v27 - 204;
    if (v36)
    {
      *((_QWORD *)a1 + 46) = v37;
      v40 = *(_QWORD *)v32;
      v38 = v32 + 8;
      v39 = v40;
      *((_QWORD *)a1 + 43) = v38;
      if (v31 == *((char **)a1 + 45))
      {
        v41 = (uint64_t)&v38[-*v29];
        if ((unint64_t)v38 <= *v29)
        {
          if (v31 == (char *)*v29)
            v90 = 1;
          else
            v90 = (uint64_t)&v31[-*v29] >> 2;
          v91 = (char *)sub_10188D1C8(v90);
          v93 = &v91[8 * (v90 >> 2)];
          v94 = (uint64_t *)*((_QWORD *)a1 + 43);
          v31 = v93;
          v95 = *((_QWORD *)a1 + 44) - (_QWORD)v94;
          if (v95)
          {
            v31 = &v93[v95 & 0xFFFFFFFFFFFFFFF8];
            v96 = 8 * (v95 >> 3);
            v97 = &v91[8 * (v90 >> 2)];
            do
            {
              v98 = *v94++;
              *(_QWORD *)v97 = v98;
              v97 += 8;
              v96 -= 8;
            }
            while (v96);
          }
          v99 = (void *)*((_QWORD *)a1 + 42);
          *((_QWORD *)a1 + 42) = v91;
          *((_QWORD *)a1 + 43) = v93;
          *((_QWORD *)a1 + 44) = v31;
          *((_QWORD *)a1 + 45) = &v91[8 * v92];
          if (v99)
          {
            operator delete(v99);
            v31 = (char *)*((_QWORD *)a1 + 44);
          }
        }
        else
        {
          v42 = v41 >> 3;
          v43 = v41 >> 3 < -1;
          v44 = (v41 >> 3) + 2;
          if (v43)
            v45 = v44;
          else
            v45 = v42 + 1;
          v46 = -(v45 >> 1);
          v47 = v45 >> 1;
          v48 = &v38[-8 * v47];
          v49 = v31 - v38;
          if (v31 != v38)
          {
            memmove(&v38[-8 * v47], v38, v31 - v38);
            v31 = *v30;
          }
          v50 = &v31[8 * v46];
          v31 = &v48[v49];
          *((_QWORD *)a1 + 43) = v50;
          *((_QWORD *)a1 + 44) = &v48[v49];
        }
      }
      *(_QWORD *)v31 = v39;
    }
    else
    {
      v75 = (char *)*((_QWORD *)a1 + 45);
      v76 = (char *)*((_QWORD *)a1 + 42);
      if (v33 >= (v75 - v76) >> 3)
      {
        if (v75 == v76)
          v79 = 1;
        else
          v79 = (v75 - v76) >> 2;
        v80 = (char *)sub_10188D1C8(v79);
        v82 = v81;
        v83 = operator new(0xFF0uLL);
        v84 = &v80[8 * v33];
        v85 = v82;
        v86 = &v80[8 * v82];
        if (v33 == v85)
        {
          v87 = 8 * v33;
          if (v31 - v32 < 1)
          {
            v133 = v83;
            v134 = v87 >> 2;
            if (v31 == v32)
              v135 = 1;
            else
              v135 = v134;
            v136 = (char *)sub_10188D1C8(v135);
            v84 = &v136[8 * (v135 >> 2)];
            v86 = &v136[8 * v137];
            if (v80)
              operator delete(v80);
            v80 = v136;
            v83 = v133;
          }
          else
          {
            v88 = v87 >> 3;
            if (v88 >= -1)
              v89 = v88 + 1;
            else
              v89 = v88 + 2;
            v84 -= 8 * (v89 >> 1);
          }
        }
        *(_QWORD *)v84 = v83;
        v138 = v84 + 8;
        v139 = (char *)*((_QWORD *)a1 + 43);
        v140 = (char *)*((_QWORD *)a1 + 44);
        while (v140 != v139)
        {
          if (v84 == v80)
          {
            if (v138 >= v86)
            {
              if (v86 == v80)
                v145 = 1;
              else
                v145 = (v86 - v80) >> 2;
              v146 = (char *)sub_10188D1C8(v145);
              v148 = v146;
              v84 = &v146[(2 * v145 + 6) & 0xFFFFFFFFFFFFFFF8];
              v150 = v138 - v80;
              v149 = v138 == v80;
              v138 = v84;
              if (!v149)
              {
                v138 = &v84[v150 & 0xFFFFFFFFFFFFFFF8];
                v151 = 8 * (v150 >> 3);
                v152 = v84;
                v153 = (uint64_t *)v80;
                do
                {
                  v154 = *v153++;
                  *(_QWORD *)v152 = v154;
                  v152 += 8;
                  v151 -= 8;
                }
                while (v151);
              }
              v86 = &v146[8 * v147];
              if (v80)
                operator delete(v80);
              v80 = v148;
            }
            else
            {
              v141 = (v86 - v138) >> 3;
              if (v141 >= -1)
                v142 = v141 + 1;
              else
                v142 = v141 + 2;
              v143 = v142 >> 1;
              v84 = &v80[8 * (v142 >> 1)];
              v144 = v80;
              if (v138 != v80)
              {
                memmove(v84, v80, v138 - v80);
                v144 = v138;
              }
              v138 = &v144[8 * v143];
            }
          }
          v155 = *((_QWORD *)v140 - 1);
          v140 -= 8;
          *((_QWORD *)v84 - 1) = v155;
          v84 -= 8;
          v139 = *v30;
        }
        v156 = (void *)*((_QWORD *)a1 + 42);
        *((_QWORD *)a1 + 42) = v80;
        *((_QWORD *)a1 + 43) = v84;
        *((_QWORD *)a1 + 44) = v138;
        *((_QWORD *)a1 + 45) = v86;
        if (v156)
          operator delete(v156);
        goto LABEL_94;
      }
      v77 = operator new(0xFF0uLL);
      v78 = v77;
      if (v75 == v31)
      {
        if (v32 == v76)
        {
          if (v31 == v32)
            v107 = 1;
          else
            v107 = (v75 - v32) >> 2;
          v108 = (char *)sub_10188D1C8(v107);
          v32 = &v108[8 * ((v107 + 3) >> 2)];
          v110 = (uint64_t *)*((_QWORD *)a1 + 43);
          v111 = v32;
          v112 = *((_QWORD *)a1 + 44) - (_QWORD)v110;
          if (v112)
          {
            v111 = &v32[v112 & 0xFFFFFFFFFFFFFFF8];
            v113 = 8 * (v112 >> 3);
            v114 = &v108[8 * ((v107 + 3) >> 2)];
            do
            {
              v115 = *v110++;
              *(_QWORD *)v114 = v115;
              v114 += 8;
              v113 -= 8;
            }
            while (v113);
          }
          v116 = (void *)*((_QWORD *)a1 + 42);
          *((_QWORD *)a1 + 42) = v108;
          *((_QWORD *)a1 + 43) = v32;
          *((_QWORD *)a1 + 44) = v111;
          *((_QWORD *)a1 + 45) = &v108[8 * v109];
          if (v116)
          {
            operator delete(v116);
            v32 = *v30;
          }
        }
        *((_QWORD *)v32 - 1) = v78;
        v117 = (char *)*((_QWORD *)a1 + 43);
        v118 = (char *)*((_QWORD *)a1 + 44);
        *((_QWORD *)a1 + 43) = v117 - 8;
        v119 = *((_QWORD *)v117 - 1);
        *((_QWORD *)a1 + 43) = v117;
        if (v118 == *((char **)a1 + 45))
        {
          v120 = (uint64_t)&v117[-*v173];
          if ((unint64_t)v117 <= *v173)
          {
            if (v118 == (char *)*v173)
              v157 = 1;
            else
              v157 = (uint64_t)&v118[-*v173] >> 2;
            v158 = (char *)sub_10188D1C8(v157);
            v160 = &v158[8 * (v157 >> 2)];
            v161 = (uint64_t *)*((_QWORD *)a1 + 43);
            v118 = v160;
            v162 = *((_QWORD *)a1 + 44) - (_QWORD)v161;
            if (v162)
            {
              v118 = &v160[v162 & 0xFFFFFFFFFFFFFFF8];
              v163 = 8 * (v162 >> 3);
              v164 = &v158[8 * (v157 >> 2)];
              do
              {
                v165 = *v161++;
                *(_QWORD *)v164 = v165;
                v164 += 8;
                v163 -= 8;
              }
              while (v163);
            }
            v166 = (void *)*((_QWORD *)a1 + 42);
            *((_QWORD *)a1 + 42) = v158;
            *((_QWORD *)a1 + 43) = v160;
            *((_QWORD *)a1 + 44) = v118;
            *((_QWORD *)a1 + 45) = &v158[8 * v159];
            if (v166)
            {
              operator delete(v166);
              v118 = (char *)*((_QWORD *)a1 + 44);
            }
          }
          else
          {
            v121 = v120 >> 3;
            v43 = v120 >> 3 < -1;
            v122 = (v120 >> 3) + 2;
            if (v43)
              v123 = v122;
            else
              v123 = v121 + 1;
            v124 = -(v123 >> 1);
            v125 = v123 >> 1;
            v126 = &v117[-8 * v125];
            v127 = v118 - v117;
            if (v118 != v117)
            {
              memmove(&v117[-8 * v125], v117, v118 - v117);
              v117 = *v30;
            }
            v118 = &v126[v127];
            *((_QWORD *)a1 + 43) = &v117[8 * v124];
            *((_QWORD *)a1 + 44) = &v126[v127];
          }
        }
        *(_QWORD *)v118 = v119;
      }
      else
      {
        *(_QWORD *)v31 = v77;
      }
    }
    *((_QWORD *)a1 + 44) += 8;
LABEL_94:
    v32 = (char *)*((_QWORD *)a1 + 43);
    v35 = *((_QWORD *)a1 + 47) + *((_QWORD *)a1 + 46);
LABEL_95:
    v100 = *(_QWORD *)&v32[8 * (v35 / 0xCC)];
    v101 = v35 % 0xCC;
    v102 = *(_QWORD *)a2;
    v103 = v100 + 20 * v101;
    *(float *)(v103 + 8) = a2[2];
    *(_QWORD *)v103 = v102;
    *(float *)(v103 + 12) = v6;
    *(_DWORD *)(v103 + 16) = -2;
    ++*((_QWORD *)a1 + 47);
    memset(&buf[1], 0, 312);
    *(double *)buf = a5;
    *(float *)&buf[1] = v6;
    v174 = 3;
    (*(void (**)(char *, int *, _QWORD *, uint64_t, uint64_t, _QWORD))(*((_QWORD *)a1 + 2) + 152))(a1 + 16, &v174, buf, 1, 0xFFFFFFFFLL, 0);
    if (a1[384])
      v106 = sub_101886DB8(*((float32x2_t **)a1 + 39), *((float32x2_t **)a1 + 40), v173, (uint64_t)(a1 + 392), v104, v105);
    else
      v106 = 0;
    a1[384] = v106;
    (*(void (**)(char *, char *))(*(_QWORD *)a1 + 128))(a1, a1 + 400);
    sub_101885FEC(a1);
    return 1;
  }
  return result;
}

void sub_101886D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_101886DB8(float32x2_t *a1, float32x2_t *a2, _QWORD *a3, uint64_t a4, double a5, double a6)
{
  float32x2_t *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  float32x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  char *v25;
  void *v26;
  void *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *i;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  void *v95;
  __int32 v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  float32x2_t *v101;
  char *v102;
  char *v103;
  int *v104;
  uint64_t v105;
  float32x2_t *v106;
  int *v107;
  char *v108;
  int v109;
  NSObject *v110;
  char *v111;
  char *v112;
  char *v113;
  NSObject *v114;
  NSObject *v115;
  void **v116;
  void *v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  int v121;
  float32x2_t *v122;
  char *v123;
  unint64_t v124;
  char *v125;
  float32x2_t v126;
  float v127;
  char *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  float32x2_t *v132;
  char *v133;
  uint64_t v134;
  int v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  float32x2_t *v146;
  unint64_t v147;
  unint64_t v148;
  char *v149;
  _QWORD *v150;
  float32x2_t v151;
  float v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  int v159;
  float32x2_t *v160;
  int v161;
  int v162;
  NSObject *v163;
  double v164;
  double v165;
  double v166;
  uint64_t v168;
  double v169;
  double v170;
  double v171;
  const char *v172;
  uint8_t *v173;
  double v174;
  double v175;
  _QWORD *v176;
  uint64_t v178;
  void *v181;
  char *v182;
  unint64_t v183;
  void *__p[2];
  __int128 v185;
  __int128 v186;
  int v187;
  double v188;
  __int16 v189;
  double v190;
  __int16 v191;
  double v192;
  uint8_t buf[4];
  _BYTE v194[34];

  v185 = 0u;
  v186 = 0u;
  *(_OWORD *)__p = 0u;
  if (a1 == a2)
  {
    v112 = 0;
    v181 = 0;
    v182 = 0;
    v183 = 0;
    if (!a3)
      goto LABEL_201;
    goto LABEL_178;
  }
  v6 = a2;
  v176 = a3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = a1;
  do
  {
    v12 = v10 - v9;
    if (v10 == v9)
      v13 = 0;
    else
      v13 = ((v10 - v9) << 7) - 1;
    v14 = v7 + v8;
    if (v13 != v7 + v8)
      goto LABEL_95;
    if (v8 < 0x400)
    {
      if (v12 >> 3 >= (unint64_t)((uint64_t)(*((_QWORD *)&v185 + 1) - (unint64_t)__p[0]) >> 3))
      {
        v178 = v12 >> 3;
        if (*((void **)&v185 + 1) == __p[0])
          v28 = 1;
        else
          v28 = (uint64_t)(*((_QWORD *)&v185 + 1) - (unint64_t)__p[0]) >> 2;
        v29 = (char *)sub_10188D1C8(v28);
        v31 = v30;
        v32 = operator new(0x1000uLL);
        v33 = &v29[8 * v178];
        v34 = &v29[8 * v31];
        if (v178 == v31)
        {
          v35 = 8 * v178;
          if (v12 < 1)
          {
            v47 = v32;
            v48 = v35 >> 2;
            if (v10 == v9)
              v49 = 1;
            else
              v49 = v48;
            v50 = (char *)sub_10188D1C8(v49);
            v33 = &v50[8 * (v49 >> 2)];
            v34 = &v50[8 * v51];
            if (v29)
              operator delete(v29);
            v29 = v50;
            v32 = v47;
          }
          else
          {
            v36 = v35 >> 3;
            if (v36 >= -1)
              v37 = v36 + 1;
            else
              v37 = v36 + 2;
            v33 -= 8 * (v37 >> 1);
          }
        }
        *(_QWORD *)v33 = v32;
        v10 = v33 + 8;
        for (i = (char *)v185; i != __p[1]; i -= 8)
        {
          if (v33 == v29)
          {
            if (v10 >= v34)
            {
              if (v34 == v29)
                v57 = 1;
              else
                v57 = (v34 - v29) >> 2;
              v58 = (char *)sub_10188D1C8(v57);
              v60 = v58;
              v33 = &v58[(2 * v57 + 6) & 0xFFFFFFFFFFFFFFF8];
              v62 = v10 - v29;
              v61 = v10 == v29;
              v10 = v33;
              if (!v61)
              {
                v10 = &v33[v62 & 0xFFFFFFFFFFFFFFF8];
                v63 = 8 * (v62 >> 3);
                v64 = v33;
                v65 = v29;
                do
                {
                  v66 = *(_QWORD *)v65;
                  v65 += 8;
                  *(_QWORD *)v64 = v66;
                  v64 += 8;
                  v63 -= 8;
                }
                while (v63);
              }
              v34 = &v58[8 * v59];
              if (v29)
                operator delete(v29);
              v29 = v60;
            }
            else
            {
              v53 = (v34 - v10) >> 3;
              if (v53 >= -1)
                v54 = v53 + 1;
              else
                v54 = v53 + 2;
              v55 = v54 >> 1;
              v33 = &v29[8 * (v54 >> 1)];
              v56 = v29;
              if (v10 != v29)
              {
                memmove(v33, v29, v10 - v29);
                v56 = v10;
              }
              v10 = &v56[8 * v55];
            }
          }
          v67 = *((_QWORD *)i - 1);
          *((_QWORD *)v33 - 1) = v67;
          v33 -= 8;
        }
        v68 = __p[0];
        __p[0] = v29;
        __p[1] = v33;
        *(_QWORD *)&v185 = v10;
        *((_QWORD *)&v185 + 1) = v34;
        if (v68)
          operator delete(v68);
        v6 = a2;
        goto LABEL_94;
      }
      v26 = operator new(0x1000uLL);
      v27 = v26;
      if (*((char **)&v185 + 1) == v10)
      {
        if (v9 == __p[0])
        {
          if (v10 == v9)
            v69 = 1;
          else
            v69 = (uint64_t)(*((_QWORD *)&v185 + 1) - (_QWORD)v9) >> 2;
          v70 = (char *)sub_10188D1C8(v69);
          v9 = &v70[(2 * v69 + 6) & 0xFFFFFFFFFFFFFFF8];
          v72 = (uint64_t *)__p[1];
          v73 = v9;
          v74 = v185 - (unint64_t)__p[1];
          v6 = a2;
          if ((void *)v185 != __p[1])
          {
            v73 = &v9[v74 & 0xFFFFFFFFFFFFFFF8];
            v75 = 8 * (v74 >> 3);
            v76 = v9;
            do
            {
              v77 = *v72++;
              *(_QWORD *)v76 = v77;
              v76 += 8;
              v75 -= 8;
            }
            while (v75);
          }
          v78 = __p[0];
          __p[0] = v70;
          __p[1] = v9;
          *(_QWORD *)&v185 = v73;
          *((_QWORD *)&v185 + 1) = &v70[8 * v71];
          if (v78)
            operator delete(v78);
        }
        else
        {
          v6 = a2;
        }
        *((_QWORD *)v9 - 1) = v27;
        v79 = (char *)v185;
        v80 = *((_QWORD *)__p[1] - 1);
        if ((_QWORD)v185 == *((_QWORD *)&v185 + 1))
        {
          v81 = (char *)__p[1] - (char *)__p[0];
          if (__p[1] <= __p[0])
          {
            if ((void *)v185 == __p[0])
              v87 = 1;
            else
              v87 = (uint64_t)(v185 - (unint64_t)__p[0]) >> 2;
            v88 = (char *)sub_10188D1C8(v87);
            v90 = (uint64_t *)__p[1];
            v79 = &v88[8 * (v87 >> 2)];
            v91 = v185 - (unint64_t)__p[1];
            v6 = a2;
            if ((void *)v185 != __p[1])
            {
              v79 = &v88[8 * (v87 >> 2) + (v91 & 0xFFFFFFFFFFFFFFF8)];
              v92 = 8 * (v91 >> 3);
              v93 = &v88[8 * (v87 >> 2)];
              do
              {
                v94 = *v90++;
                *(_QWORD *)v93 = v94;
                v93 += 8;
                v92 -= 8;
              }
              while (v92);
            }
            v95 = __p[0];
            __p[0] = v88;
            __p[1] = &v88[8 * (v87 >> 2)];
            *(_QWORD *)&v185 = v79;
            *((_QWORD *)&v185 + 1) = &v88[8 * v89];
            if (v95)
              operator delete(v95);
          }
          else
          {
            v82 = v81 >> 3;
            v20 = v81 >> 3 < -1;
            v83 = (v81 >> 3) + 2;
            if (v20)
              v84 = v83;
            else
              v84 = v82 + 1;
            v85 = v84 >> 1;
            v86 = (char *)__p[1] - 8 * v85;
            if ((void *)v185 != __p[1])
              memmove((char *)__p[1] - 8 * v85, __p[1], v185 - (unint64_t)__p[1]);
            v79 = &v86[v185 - (unint64_t)__p[1]];
            __p[1] = v86;
            *(_QWORD *)&v185 = v79;
          }
        }
        *(_QWORD *)v79 = v80;
        v10 = (char *)(v185 + 8);
        *(_QWORD *)&v185 = v185 + 8;
        goto LABEL_94;
      }
      *(_QWORD *)v10 = v26;
    }
    else
    {
      *(_QWORD *)&v186 = v8 - 1024;
      v17 = *(_QWORD *)v9;
      v15 = v9 + 8;
      v16 = v17;
      __p[1] = v15;
      if (v10 == *((char **)&v185 + 1))
      {
        v18 = v15 - (char *)__p[0];
        if (v15 <= __p[0])
        {
          if (v10 == __p[0])
            v38 = 1;
          else
            v38 = (v10 - (char *)__p[0]) >> 2;
          v39 = (char *)sub_10188D1C8(v38);
          v41 = (uint64_t *)__p[1];
          v10 = &v39[8 * (v38 >> 2)];
          v42 = v185 - (unint64_t)__p[1];
          if ((void *)v185 != __p[1])
          {
            v10 = &v39[8 * (v38 >> 2) + (v42 & 0xFFFFFFFFFFFFFFF8)];
            v43 = 8 * (v42 >> 3);
            v44 = &v39[8 * (v38 >> 2)];
            do
            {
              v45 = *v41++;
              *(_QWORD *)v44 = v45;
              v44 += 8;
              v43 -= 8;
            }
            while (v43);
          }
          v46 = __p[0];
          __p[0] = v39;
          __p[1] = &v39[8 * (v38 >> 2)];
          *(_QWORD *)&v185 = v10;
          *((_QWORD *)&v185 + 1) = &v39[8 * v40];
          if (v46)
            operator delete(v46);
        }
        else
        {
          v19 = v18 >> 3;
          v20 = v18 >> 3 < -1;
          v21 = (v18 >> 3) + 2;
          if (v20)
            v22 = v21;
          else
            v22 = v19 + 1;
          v23 = &v15[-8 * (v22 >> 1)];
          v24 = v10 - v15;
          if (v10 != v15)
          {
            memmove(&v15[-8 * (v22 >> 1)], v15, v10 - v15);
            v10 = v15;
          }
          v25 = &v10[-8 * (v22 >> 1)];
          v10 = &v23[v24];
          __p[1] = v25;
          *(_QWORD *)&v185 = &v23[v24];
        }
      }
      *(_QWORD *)v10 = v16;
    }
    v10 = (char *)(v185 + 8);
    *(_QWORD *)&v185 = v185 + 8;
    v6 = a2;
LABEL_94:
    v7 = *((_QWORD *)&v186 + 1);
    v8 = v186;
    v9 = (char *)__p[1];
    v14 = v186 + *((_QWORD *)&v186 + 1);
LABEL_95:
    *(_DWORD *)(*(_QWORD *)&v9[(v14 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v14 & 0x3FF)) = v11[2].i32[0];
    *((_QWORD *)&v186 + 1) = ++v7;
    if (v11 == v6)
      break;
    v96 = v11[2].i32[0];
    v97 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v11) >> 2);
    do
    {
      v98 = v97 >> 1;
      v99 = (uint64_t)v11 + 20 * (v97 >> 1);
      v100 = *(_DWORD *)(v99 + 16);
      v101 = (float32x2_t *)(v99 + 20);
      v97 += ~(v97 >> 1);
      if (v100 <= v96)
        v11 = v101;
      else
        v97 = v98;
    }
    while (v97);
  }
  while (v11 != v6);
  v102 = &v9[8 * (v8 >> 10)];
  v103 = *(char **)v102;
  v104 = (int *)(*(_QWORD *)v102 + 4 * (v8 & 0x3FF));
  v105 = *(_QWORD *)&v9[((v8 + v7) >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * ((v8 + v7) & 0x3FF);
  v106 = a1;
  if (v104 != (int *)v105)
  {
    do
    {
      v107 = v104 + 1;
      if ((char *)(v104 + 1) - v103 == 4096)
      {
        v108 = (char *)*((_QWORD *)v102 + 1);
        v102 += 8;
        v103 = v108;
        v107 = (int *)v108;
      }
      if (v107 == (int *)v105)
        goto LABEL_118;
      v109 = *v104;
      v104 = v107;
    }
    while (*v107 >= v109);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v110 = off_10229FD58;
    v111 = "fication_T &, const NotificationData_T &, BOOL, int, BOOL) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]";
    v112 = "";
    v113 = "std::is_sorted(rounds.begin(), rounds.end())";
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v194 = 0;
      *(_WORD *)&v194[4] = 2082;
      *(_QWORD *)&v194[6] = "";
      *(_WORD *)&v194[14] = 2082;
      *(_QWORD *)&v194[16] = "assert";
      *(_WORD *)&v194[24] = 2081;
      *(_QWORD *)&v194[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v114 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v194 = 0;
      *(_WORD *)&v194[4] = 2082;
      *(_QWORD *)&v194[6] = "";
      *(_WORD *)&v194[14] = 2082;
      *(_QWORD *)&v194[16] = "assert";
      *(_WORD *)&v194[24] = 2081;
      *(_QWORD *)&v194[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v114, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v115 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v194 = 0;
      *(_WORD *)&v194[4] = 2082;
      *(_QWORD *)&v194[6] = "";
      *(_WORD *)&v194[14] = 2082;
      *(_QWORD *)&v194[16] = "assert";
      *(_WORD *)&v194[24] = 2081;
      *(_QWORD *)&v194[26] = "std::is_sorted(rounds.begin(), rounds.end())";
      _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 728, "computeIntercept");
    __break(1u);
LABEL_216:
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
LABEL_211:
    v168 = *((_QWORD *)v111 + 427);
    v169 = *(float *)(a4 + 44);
    v170 = *(float *)(a4 + 48);
    v171 = *(float *)(a4 + 52);
    v187 = 134218496;
    v188 = v169;
    v189 = 2048;
    v190 = v170;
    v191 = 2048;
    v192 = v171;
    LODWORD(v174) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v168, 1, "ComputeIntercept: x,%f,y,%f,z,%f", COERCE_DOUBLE(&v187), v174, v175);
    v173 = (uint8_t *)v172;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLGyroCalibrationDatabaseLocalMultiRun::computeIntercept(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)", "%s\n", v172);
    if (v173 != buf)
      free(v173);
    goto LABEL_207;
  }
LABEL_118:
  v181 = 0;
  v182 = 0;
  v183 = 0;
  if (v7)
  {
    if (v7 >= 4)
    {
      v116 = (void **)__p[1];
      do
      {
        if (v8 + 1 >= 0x800)
        {
          v117 = *v116++;
          operator delete(v117);
          __p[1] = v116;
          v8 -= 1023;
        }
        else
        {
          ++v8;
        }
        --v7;
      }
      while (v7 > 3);
      *(_QWORD *)&v186 = v8;
      *((_QWORD *)&v186 + 1) = v7;
    }
    if (v6 != a1)
    {
      v118 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)a1) >> 2);
      do
      {
        v119 = v118 >> 1;
        v120 = (char *)v106 + 20 * (v118 >> 1);
        v121 = *((_DWORD *)v120 + 4);
        v122 = (float32x2_t *)(v120 + 20);
        v118 += ~(v118 >> 1);
        if (v121 < *(_DWORD *)(*(_QWORD *)((char *)__p[1] + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)))
          v106 = v122;
        else
          v118 = v119;
      }
      while (v118);
      if (v106 != v6)
      {
        v123 = 0;
        v112 = v182;
        v124 = v183;
        v125 = (char *)v181;
        while (1)
        {
          LODWORD(a6) = v106[1].i32[1];
          v126 = vmls_lane_f32(*v106, *(float32x2_t *)(a4 + 32), *(float32x2_t *)&a6, 0);
          v127 = v106[1].f32[0] - (float)(*(float *)(a4 + 40) * *(float *)&a6);
          if ((unint64_t)v123 >= v124)
          {
            v129 = 0xAAAAAAAAAAAAAAABLL * ((v123 - v125) >> 2) + 1;
            if (v129 > 0x1555555555555555)
            {
              v182 = v112;
              v183 = v124;
              v181 = v125;
              sub_100259694();
            }
            if (0x5555555555555556 * ((uint64_t)(v124 - (_QWORD)v125) >> 2) > v129)
              v129 = 0x5555555555555556 * ((uint64_t)(v124 - (_QWORD)v125) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (_QWORD)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v130 = 0x1555555555555555;
            else
              v130 = v129;
            if (v130)
              v130 = (unint64_t)sub_10188E6F4(v130);
            else
              v131 = 0;
            v132 = (float32x2_t *)(v130 + 4 * ((v123 - v125) >> 2));
            *v132 = v126;
            v132[1].f32[0] = v127;
            if (v123 == v125)
            {
              v125 = (char *)(v130 + 4 * ((v123 - v125) >> 2));
            }
            else
            {
              v133 = (char *)(v130 + 4 * ((v123 - v125) >> 2));
              do
              {
                v134 = *(_QWORD *)(v123 - 12);
                v123 -= 12;
                v135 = *((_DWORD *)v123 + 2);
                *(_QWORD *)(v133 - 12) = v134;
                v133 -= 12;
                *((_DWORD *)v133 + 2) = v135;
              }
              while (v123 != v125);
              v123 = v125;
              v125 = v133;
            }
            v124 = v130 + 12 * v131;
            v128 = (char *)&v132[1] + 4;
            if (v123)
              operator delete(v123);
          }
          else
          {
            *(float32x2_t *)v123 = v126;
            *((float *)v123 + 2) = v127;
            v128 = v123 + 12;
          }
          if (v106[2].i32[0] == *(_DWORD *)(*(_QWORD *)((char *)__p[1]
                                                       + (((unint64_t)(*((_QWORD *)&v186 + 1) + v186 - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                                           + 4 * ((*((_QWORD *)&v186 + 1) + v186 - 1) & 0x3FF)))
          {
            v136 = v128 - 12;
            if ((unint64_t)v128 >= v124)
            {
              v137 = 0xAAAAAAAAAAAAAAABLL * ((v128 - v125) >> 2) + 1;
              if (v137 > 0x1555555555555555)
              {
                v182 = v128;
                v183 = v124;
                v181 = v125;
                sub_100259694();
              }
              if (0x5555555555555556 * ((uint64_t)(v124 - (_QWORD)v125) >> 2) > v137)
                v137 = 0x5555555555555556 * ((uint64_t)(v124 - (_QWORD)v125) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - (_QWORD)v125) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v138 = 0x1555555555555555;
              else
                v138 = v137;
              if (v138)
                v138 = (unint64_t)sub_10188E6F4(v138);
              else
                v139 = 0;
              v140 = (char *)(v138 + 4 * ((v128 - v125) >> 2));
              v141 = *(_QWORD *)v136;
              v124 = v138 + 12 * v139;
              *((_DWORD *)v140 + 2) = *((_DWORD *)v128 - 1);
              *(_QWORD *)v140 = v141;
              v112 = v140 + 12;
              if (v128 == v125)
              {
                v125 = v128;
              }
              else
              {
                do
                {
                  v142 = *(_QWORD *)(v128 - 12);
                  v128 -= 12;
                  v143 = *((_DWORD *)v128 + 2);
                  *(_QWORD *)(v140 - 12) = v142;
                  v140 -= 12;
                  *((_DWORD *)v140 + 2) = v143;
                }
                while (v128 != v125);
                if (!v125)
                  goto LABEL_171;
              }
              operator delete(v125);
LABEL_171:
              v125 = v140;
              goto LABEL_172;
            }
            *(_QWORD *)v128 = *(_QWORD *)v136;
            *((_DWORD *)v128 + 2) = *((_DWORD *)v128 - 1);
            v112 = v128 + 12;
          }
          else
          {
            v112 = v128;
          }
LABEL_172:
          v106 = (float32x2_t *)((char *)v106 + 20);
          v123 = v112;
          if (v106 == a2)
          {
            v182 = v112;
            v183 = v124;
            v181 = v125;
            goto LABEL_175;
          }
        }
      }
    }
  }
  v112 = 0;
LABEL_175:
  a3 = v176;
  if (v176)
  {
LABEL_178:
    v144 = a3[1];
    if (a3[2] != v144)
    {
      v145 = a3[4];
      v146 = (float32x2_t *)(*(_QWORD *)(v144 + 8 * (v145 / 0xCC)) + 20 * (v145 % 0xCC));
      v147 = *(_QWORD *)(v144 + 8 * ((a3[5] + v145) / 0xCC)) + 20 * ((a3[5] + v145) % 0xCC);
      if (v146 != (float32x2_t *)v147)
      {
        v148 = v183;
        v149 = (char *)v181;
        v150 = (_QWORD *)(v144 + 8 * (v145 / 0xCC));
        do
        {
          LODWORD(a6) = v146[1].i32[1];
          v151 = vmls_lane_f32(*v146, *(float32x2_t *)(a4 + 32), *(float32x2_t *)&a6, 0);
          v152 = v146[1].f32[0] - (float)(*(float *)(a4 + 40) * *(float *)&a6);
          if ((unint64_t)v112 >= v148)
          {
            v153 = 0xAAAAAAAAAAAAAAABLL * ((v112 - v149) >> 2) + 1;
            if (v153 > 0x1555555555555555)
              sub_100259694();
            if (0x5555555555555556 * ((uint64_t)(v148 - (_QWORD)v149) >> 2) > v153)
              v153 = 0x5555555555555556 * ((uint64_t)(v148 - (_QWORD)v149) >> 2);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - (_QWORD)v149) >> 2) >= 0xAAAAAAAAAAAAAAALL)
              v154 = 0x1555555555555555;
            else
              v154 = v153;
            if (v154)
              v154 = (unint64_t)sub_10188E6F4(v154);
            else
              v155 = 0;
            v156 = v154 + 4 * ((v112 - v149) >> 2);
            *(float32x2_t *)v156 = v151;
            *(float *)(v156 + 8) = v152;
            v157 = (_DWORD *)v156;
            while (v112 != v149)
            {
              v158 = *(_QWORD *)(v112 - 12);
              v112 -= 12;
              v159 = *((_DWORD *)v112 + 2);
              *(_QWORD *)(v157 - 3) = v158;
              v157 -= 3;
              v157[2] = v159;
            }
            v148 = v154 + 12 * v155;
            v112 = (char *)(v156 + 12);
            v181 = v157;
            v183 = v148;
            if (v149)
              operator delete(v149);
            v149 = (char *)v157;
          }
          else
          {
            *(float32x2_t *)v112 = v151;
            *((float *)v112 + 2) = v152;
            v112 += 12;
          }
          v182 = v112;
          v146 = (float32x2_t *)((char *)v146 + 20);
          if ((float32x2_t *)((char *)v146 - *v150) == (float32x2_t *)4080)
          {
            v160 = (float32x2_t *)v150[1];
            ++v150;
            v146 = v160;
          }
        }
        while (v146 != (float32x2_t *)v147);
      }
    }
  }
LABEL_201:
  v113 = (char *)v181;
  if (v181 != v112)
  {
    *(float *)(a4 + 44) = sub_10188A8C0((uint64_t *)&v181);
    *(_DWORD *)(a4 + 48) = v161;
    *(_DWORD *)(a4 + 52) = v162;
    *(CFAbsoluteTime *)(a4 + 16) = CFAbsoluteTimeGetCurrent();
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v111 = (char *)DefaultObserver;
    v163 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      v164 = *(float *)(a4 + 44);
      v165 = *(float *)(a4 + 48);
      v166 = *(float *)(a4 + 52);
      *(_DWORD *)buf = 134218496;
      *(double *)v194 = v164;
      *(_WORD *)&v194[8] = 2048;
      *(double *)&v194[10] = v165;
      *(_WORD *)&v194[18] = 2048;
      *(double *)&v194[20] = v166;
      _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_INFO, "ComputeIntercept: x,%f,y,%f,z,%f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        goto LABEL_216;
      goto LABEL_211;
    }
  }
LABEL_207:
  if (v113)
    operator delete(v113);
  sub_10188E738((uint64_t)__p);
  return v113 != v112;
}

void sub_101887C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p)
    operator delete(__p);
  sub_10188E738((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_101887CD0(uint64_t a1, float *a2, float *a3, __n128 a4, double a5)
{
  return sub_10188616C((char *)(a1 - 16), a2, a3, a4, a5);
}

BOOL sub_101887CD8(uint64_t a1, void *__dst)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 384);
  if (*(_BYTE *)(a1 + 384))
  {
    memcpy(__dst, (const void *)(a1 + 392), 0x140uLL);
    sub_101887D20((char *)a1);
  }
  return v2 != 0;
}

void sub_101887D20(char *a1)
{
  char *v1;
  NSObject *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  char *v12;
  float v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  double v25;
  double v26;
  double v27;
  double __src;
  double v29;
  uint8_t buf[4];
  _BYTE v31[38];
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  _BYTE v41[44];
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;

  if (*((_DWORD *)a1 + 98) == 1)
  {
    v1 = a1;
    if (qword_10229FD50 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v14 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(_QWORD *)&v31[6] = "";
      *(_WORD *)&v31[14] = 2082;
      *(_QWORD *)&v31[16] = "assert";
      *(_WORD *)&v31[24] = 2081;
      *(_QWORD *)&v31[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v15 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(_QWORD *)&v31[6] = "";
      *(_WORD *)&v31[14] = 2082;
      *(_QWORD *)&v31[16] = "assert";
      *(_WORD *)&v31[24] = 2081;
      *(_QWORD *)&v31[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v1 = (char *)off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v31 = 0;
      *(_WORD *)&v31[4] = 2082;
      *(_QWORD *)&v31[6] = "";
      *(_WORD *)&v31[14] = 2082;
      *(_QWORD *)&v31[16] = "assert";
      *(_WORD *)&v31[24] = 2081;
      *(_QWORD *)&v31[26] = "fFit.kind == kCLMotionTypeGyroBiasFitKindLinear";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 282, "logFit");
    __break(1u);
  }
  dispatch_once(&qword_10229FD50, &stru_1021D6608);
LABEL_3:
  v2 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
  {
    v3 = *((float *)v1 + 106);
    v4 = *((float *)v1 + 107);
    v5 = *((float *)v1 + 108);
    v6 = *((float *)v1 + 109);
    v7 = *((float *)v1 + 110);
    v8 = *((float *)v1 + 111);
    v9 = *((_QWORD *)v1 + 50);
    *(_DWORD *)buf = 134219520;
    *(double *)v31 = v3;
    *(_WORD *)&v31[8] = 2048;
    *(double *)&v31[10] = v4;
    *(_WORD *)&v31[18] = 2048;
    *(double *)&v31[20] = v5;
    *(_WORD *)&v31[28] = 2048;
    *(double *)&v31[30] = v6;
    v32 = 2048;
    v33 = v7;
    v34 = 2048;
    v35 = v8;
    v36 = 2048;
    v37 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f", buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v16 = *((float *)v1 + 106);
    v17 = *((float *)v1 + 107);
    v18 = *((float *)v1 + 108);
    v19 = *((float *)v1 + 109);
    v20 = *((float *)v1 + 110);
    v21 = *((float *)v1 + 111);
    v22 = *((_QWORD *)v1 + 50);
    *(_DWORD *)v41 = 134219520;
    *(double *)&v41[4] = v16;
    *(_WORD *)&v41[12] = 2048;
    *(double *)&v41[14] = v17;
    *(_WORD *)&v41[22] = 2048;
    *(double *)&v41[24] = v18;
    *(_WORD *)&v41[32] = 2048;
    *(double *)&v41[34] = v19;
    *(_WORD *)&v41[42] = 2048;
    v42 = v20;
    v43 = 2048;
    v44 = v21;
    v45 = 2048;
    v46 = v22;
    LODWORD(v25) = 72;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f", COERCE_DOUBLE(v41), v25, v26, v27, __src, v29);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalMultiRun::logFit() const", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  if (v1[712])
  {
    *(_QWORD *)v41 = off_102171518;
    *(_QWORD *)&v41[8] = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v41[20] = *(_OWORD *)(v1 + 424);
    *(_QWORD *)&v41[36] = *((_QWORD *)v1 + 55);
    v10 = *((double *)v1 + 50);
    *(float *)&v42 = v10;
    v11 = sub_1011B78D4();
    sub_1011B8DB0(v11, (uint64_t)v41);
    sub_1015EB864(buf);
    sub_101604CA4((uint64_t)buf);
    v40 |= 1u;
    v38 = *(_QWORD *)&v41[8];
    __src = *((double *)v1 + 53);
    LODWORD(v29) = *((_DWORD *)v1 + 108);
    sub_1002A3054(v39 + 32, (char *)&__src, (uint64_t)&v29 + 4, 3uLL);
    __src = *(double *)(v1 + 436);
    LODWORD(v29) = *((_DWORD *)v1 + 111);
    sub_1002A3054(v39 + 8, (char *)&__src, (uint64_t)&v29 + 4, 3uLL);
    v12 = v39;
    v13 = *((double *)v1 + 50);
    v39[60] |= 1u;
    *((float *)v12 + 14) = v13;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021D6628);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
}

void sub_1018882D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

BOOL sub_1018882F8(uint64_t a1, void *__dst)
{
  int v2;
  char *v3;

  v2 = *(unsigned __int8 *)(a1 + 368);
  if (*(_BYTE *)(a1 + 368))
  {
    v3 = (char *)(a1 - 16);
    memcpy(__dst, (const void *)(a1 + 376), 0x140uLL);
    sub_101887D20(v3);
  }
  return v2 != 0;
}

BOOL sub_101888340(uint64_t a1)
{
  int v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD v12[8];
  uint8_t buf[1640];

  v1 = *(unsigned __int8 *)(a1 + 270);
  if (!*(_BYTE *)(a1 + 270))
  {
    *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
    v6 = *(void ***)(a1 + 344);
    v7 = *(_QWORD *)(a1 + 352);
    *(_QWORD *)(a1 + 376) = 0;
    v8 = v7 - (_QWORD)v6;
    if (v8 >= 0x11)
    {
      do
      {
        operator delete(*v6);
        v9 = *(_QWORD *)(a1 + 352);
        v6 = (void **)(*(_QWORD *)(a1 + 344) + 8);
        *(_QWORD *)(a1 + 344) = v6;
        v8 = v9 - (_QWORD)v6;
      }
      while (v8 > 0x10);
    }
    if (v8 >> 3 == 1)
    {
      v10 = 102;
    }
    else
    {
      if (v8 >> 3 != 2)
        goto LABEL_18;
      v10 = 204;
    }
    *(_QWORD *)(a1 + 368) = v10;
LABEL_18:
    *(_BYTE *)(a1 + 384) = 0;
    sub_1000CDA68(a1 + 128, "DELETE FROM GyroMultiCalibration");
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v2 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Wipe database during a build.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "Wipe database during a build.", v12, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::wipeDatabase()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v1 == 0;
}

void sub_1018885A8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_1018885D0(uint64_t a1)
{
  return sub_101888340(a1 - 16);
}

uint64_t sub_1018885D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = (uint64_t *)&v14;
  v2 = a1[39];
  v3 = a1[40];
  while (v2 != v3)
  {
    sub_10188D1FC(&v13, (float *)(v2 + 12), (_DWORD *)(v2 + 12));
    v2 += 20;
  }
  v4 = a1[43];
  if (a1[44] != v4)
  {
    v5 = a1[46];
    v6 = a1[47];
    v7 = (_QWORD *)(v4 + 8 * (v5 / 0xCC));
    v8 = *v7 + 20 * (v5 % 0xCC);
    v9 = *(_QWORD *)(v4 + 8 * ((v6 + v5) / 0xCC)) + 20 * ((v6 + v5) % 0xCC);
    while (v8 != v9)
    {
      sub_10188D1FC(&v13, (float *)(v8 + 12), (_DWORD *)(v8 + 12));
      v8 += 20;
      if (v8 - *v7 == 4080)
      {
        v10 = v7[1];
        ++v7;
        v8 = v10;
      }
    }
  }
  v11 = v15;
  sub_100008848((uint64_t)&v13, v14);
  return v11;
}

void sub_1018886D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_100008848((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1018886F4(uint64_t a1)
{
  return sub_1018885D8((_QWORD *)(a1 - 16));
}

uint64_t sub_1018886FC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 3224);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return sub_1006154D4(a1 + 16);
}

uint64_t sub_101888730(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 3208);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  return sub_1006154D4(a1);
}

void sub_101888764()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v0 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::startFactoryGYTT()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
  operator new();
}

void sub_101888944()
{
  operator delete();
}

void sub_101888970()
{
  sub_101888764();
}

unint64_t sub_101888978()
{
  return ((unint64_t)sub_1001B7910() >> 13) & 1;
}

unint64_t sub_101888990()
{
  return ((unint64_t)sub_1001B7910() >> 13) & 1;
}

uint64_t sub_1018889A8(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocalMultiRun::getLastMiniCalibration(CFAbsoluteTime &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  *a2 = *(_QWORD *)(a1 + 3240);
  return 1;
}

uint64_t sub_101888B48(uint64_t a1, _QWORD *a2)
{
  sub_1018889A8(a1 - 16, a2);
  return 1;
}

void sub_101888B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  os_unfair_lock_lock((os_unfair_lock_t)a1);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    sub_1015E38D8(v4, a2);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

id *sub_101888B9C(unsigned int a1, uint64_t a2)
{
  __CFString *v4;
  double Current;
  id v7;

  if (a1 > 2)
    v4 = CFSTR("com.apple.CoreMotion.GyroCalibration.UnknownCal");
  else
    v4 = off_1021D66C0[a1];
  Current = CFAbsoluteTimeGetCurrent();
  sub_100793ACC(&v7, v4);
  sub_100793BA0(&v7, (uint64_t)CFSTR("Intercept.X"), (uint64_t)(*(float *)(a2 + 44) * 1000000.0));
  sub_100793BA0(&v7, (uint64_t)CFSTR("Intercept.Y"), (uint64_t)(*(float *)(a2 + 48) * 1000000.0));
  sub_100793BA0(&v7, (uint64_t)CFSTR("Intercept.Z"), (uint64_t)(*(float *)(a2 + 52) * 1000000.0));
  sub_100793BA0(&v7, (uint64_t)CFSTR("Slope.X"), (uint64_t)(*(float *)(a2 + 32) * 1000000.0));
  sub_100793BA0(&v7, (uint64_t)CFSTR("Slope.Y"), (uint64_t)(*(float *)(a2 + 36) * 1000000.0));
  sub_100793BA0(&v7, (uint64_t)CFSTR("Slope.Z"), (uint64_t)(*(float *)(a2 + 40) * 1000000.0));
  if (a1 == 1)
    sub_100793BA0(&v7, (uint64_t)CFSTR("TimeSinceLastCal"), (uint64_t)(Current - *(double *)(a2 + 8)));
  return sub_100793B28(&v7);
}

void sub_101888CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100793B28((id *)va);
  _Unwind_Resume(a1);
}

void sub_101888D10(uint64_t a1, int a2)
{
  uint64_t v4;
  _OWORD v5[3];

  v4 = a1 + 128;
  sub_10001E638(a1 + 128);
  if ((a2 & 0x80000000) == 0 && !*(_BYTE *)(a1 + 265))
    sub_1000CDA68(v4, "DELETE FROM GyroMultiCalibration WHERE Round <= ? AND Round <> ?");
  v5[0] = *(_OWORD *)&off_1021D6400;
  v5[1] = *(_OWORD *)&off_1021D6410;
  v5[2] = off_1021D6420;
  sub_10063E734(v4, "GyroMultiCalibration", (const char **)v5, 0);
}

void sub_101888FA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_101888FD8(uint64_t *a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  size_t v7;
  __n128 *v8;
  __n128 *v9;
  unint64_t v10;
  uint64_t v11;
  __objc2_class *v12;
  __objc2_class *v13;
  char *v14;
  char *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __objc2_class *v26;
  int64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  char *v38;
  char *v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  void *v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;

  v2 = a1;
  if ((a2 & 0x80000000) == 0)
  {
    v3 = a1[40];
    v4 = (char *)sub_10188DFF4(a1[39], v3, a2);
    if (v4 != v5)
    {
      v6 = v4;
      v7 = v3 - (_QWORD)v5;
      if (v7)
        memmove(v4, v5, v7);
      v2[40] = (uint64_t)&v6[v7];
    }
  }
  v8 = (__n128 *)v2[35];
  v9 = (__n128 *)v2[36];
  v10 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v9 - (char *)v8) >> 2));
  if (v9 == v8)
    v11 = 0;
  else
    v11 = v10;
  sub_10188D2B4(v8, v9, v11, 1);
  v13 = (__objc2_class *)v2[35];
  v12 = (__objc2_class *)v2[36];
  if (v13 == v12)
  {
LABEL_23:
    v14 = (char *)v2[39];
    v15 = (char *)v2[40];
    goto LABEL_25;
  }
  v14 = (char *)v2[39];
  v15 = (char *)v2[40];
  if (v14 != v15)
  {
    if (*((_DWORD *)v15 - 1) < SLODWORD(v13->cache))
      goto LABEL_25;
    v13 = DefaultObserver;
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v16 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2082;
      v51 = "assert";
      v52 = 2081;
      v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v17 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2082;
      v51 = "assert";
      v52 = 2081;
      v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v2 = (uint64_t *)off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v47 = 0;
      v48 = 2082;
      v49 = "";
      v50 = 2082;
      v51 = "assert";
      v52 = 2081;
      v53 = "fPendingPoints.empty() || fPoints.empty() || fPoints.rbegin()->round < fPendingPoints.begin()->round";
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 448, "updatePoints");
    __break(1u);
    goto LABEL_23;
  }
  v15 = (char *)v2[39];
LABEL_25:
  if ((char *)v12 - (char *)v13 < 1)
    goto LABEL_60;
  v18 = ((char *)v12 - (char *)v13) / 20;
  v19 = (v15 - v14) / 20;
  v20 = &v14[20 * v19];
  v21 = v2[41];
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v21 - (uint64_t)v15) >> 2)) < v18)
  {
    if ((unint64_t)(v19 + v18) > 0xCCCCCCCCCCCCCCCLL)
      sub_100259694();
    v22 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (uint64_t)v14) >> 2);
    v23 = 2 * v22;
    if (2 * v22 <= v19 + v18)
      v23 = v19 + v18;
    if (v22 >= 0x666666666666666)
      v24 = 0xCCCCCCCCCCCCCCCLL;
    else
      v24 = v23;
    if (v24)
      v24 = (unint64_t)sub_10188D184(v24);
    else
      v25 = 0;
    v33 = v24 + 20 * v19;
    v34 = (char *)(v33 + 20 * v18);
    v35 = 20 * v18;
    v36 = v33;
    do
    {
      v37 = *(_OWORD *)&v13->isa;
      *(_DWORD *)(v36 + 16) = v13->cache;
      *(_OWORD *)v36 = v37;
      v36 += 20;
      v13 = (__objc2_class *)((char *)v13 + 20);
      v35 -= 20;
    }
    while (v35);
    v38 = (char *)v2[39];
    if (v38 == v20)
    {
      v41 = v24 + 20 * v19;
    }
    else
    {
      v39 = v20;
      do
      {
        v40 = *(_OWORD *)(v39 - 20);
        v41 = v33 - 20;
        *(_DWORD *)(v33 - 4) = *((_DWORD *)v39 - 1);
        *(_OWORD *)(v33 - 20) = v40;
        v39 -= 20;
        v33 -= 20;
      }
      while (v39 != v38);
    }
    v42 = v24 + 20 * v25;
    v43 = (_BYTE *)v2[40];
    v44 = v43 - v20;
    if (v43 != v20)
      memmove(v34, v20, v43 - v20);
    v45 = (void *)v2[39];
    v2[39] = v41;
    v2[40] = (uint64_t)&v34[v44];
    v2[41] = v42;
    if (v45)
      operator delete(v45);
    goto LABEL_60;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v15 - v20) >> 2)) >= v18)
  {
    v26 = (__objc2_class *)((char *)v13 + 20 * v18);
    v28 = v15;
LABEL_41:
    v29 = &v20[20 * v18];
    v30 = (unint64_t)&v28[-20 * v18];
    v31 = v28;
    if (v30 < (unint64_t)v15)
    {
      v31 = v28;
      do
      {
        v32 = *(_OWORD *)v30;
        *((_DWORD *)v31 + 4) = *(_DWORD *)(v30 + 16);
        *(_OWORD *)v31 = v32;
        v31 += 20;
        v30 += 20;
      }
      while (v30 < (unint64_t)v15);
    }
    v2[40] = (uint64_t)v31;
    if (v28 != v29)
      memmove(&v20[20 * v18], v20, v28 - v29);
    if (v26 != v13)
      memmove(v20, v13, (char *)v26 - (char *)v13);
    goto LABEL_60;
  }
  v26 = (__objc2_class *)((char *)v13 + 4 * ((v15 - v20) >> 2));
  v27 = (char *)v12 - (char *)v26;
  if (v12 != v26)
    memmove(v15, (char *)v13 + 4 * ((v15 - v20) >> 2), (char *)v12 - (char *)v26);
  v28 = &v15[v27];
  v2[40] = (uint64_t)&v15[v27];
  if (v15 - v20 >= 1)
    goto LABEL_41;
LABEL_60:
  v2[36] = v2[35];
  *((_DWORD *)v2 + 76) = 0;
}

uint64_t sub_10188954C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 312);
  v2 = *(_QWORD *)(a1 + 320);
  if (v1 == v2)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v4 = *(_DWORD *)(v1 + 16);
    v5 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v1) >> 2);
    do
    {
      v6 = v5 >> 1;
      v7 = v1 + 20 * (v5 >> 1);
      v8 = *(_DWORD *)(v7 + 16);
      v9 = v7 + 20;
      v5 += ~(v5 >> 1);
      if (v8 <= v4)
        v1 = v9;
      else
        v5 = v6;
    }
    while (v5);
    result = result + (v4 >= 0);
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_1018895C0(uint64_t a1)
{
  return sub_10188954C(a1 - 16);
}

uint64_t sub_1018895C8(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  result = sub_100635B3C(a1, "GyroMultiCalibration");
  if ((_DWORD)result)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v3 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Dropping GyroMultiCalibration.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Dropping GyroMultiCalibration.", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "static void CLGyroCalibrationDatabaseLocalMultiRun::dropTableIfPresent(CLSqliteDatabase &)", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    return sub_10063E3BC(a1, "GyroMultiCalibration");
  }
  return result;
}

void sub_101889778(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _DWORD v21[4];
  uint8_t buf[4];
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;

  if (*(_BYTE *)(a1 + 270))
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v12 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "!fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v13 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "!fBuilding";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v14 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "!fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 486, "beginRun");
    goto LABEL_45;
  }
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a1 + 280);
  *(_DWORD *)(a1 + 304) = 0;
  v2 = *(void ***)(a1 + 344);
  v3 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 376) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 352);
      v2 = (void **)(*(_QWORD *)(a1 + 344) + 8);
      *(_QWORD *)(a1 + 344) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 102;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_9;
    v6 = 204;
  }
  *(_QWORD *)(a1 + 368) = v6;
LABEL_9:
  *(_BYTE *)(a1 + 270) = 1;
  v7 = *(_QWORD *)(a1 + 320);
  if (*(_QWORD *)(a1 + 312) != v7)
  {
    v8 = *(_DWORD *)(v7 - 4);
    if (v8 > -2)
    {
      v9 = v8 + 1;
      goto LABEL_13;
    }
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v18 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v19 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v20 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v23 = 0;
      v24 = 2082;
      v25 = "";
      v26 = 2082;
      v27 = "assert";
      v28 = 2081;
      v29 = "fPoints.empty() || fPoints.rbegin()->round >= kFactoryRound";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 493, "beginRun");
LABEL_45:
    __break(1u);
  }
  v9 = 0;
LABEL_13:
  *(_DWORD *)(a1 + 272) = v9;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v10 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    v11 = *(_DWORD *)(a1 + 272);
    *(_DWORD *)buf = 67109120;
    v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "fNextRound,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v15 = *(_DWORD *)(a1 + 272);
    v21[0] = 67109120;
    v21[1] = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "fNextRound,%d", v21);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::beginRun()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

uint64_t sub_101889E18(uint64_t result)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[4];
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  if (!*(_BYTE *)(result + 270))
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v1 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v2 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "fBuilding";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v3 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 505, "abortRun");
    __break(1u);
  }
  *(_QWORD *)(result + 288) = *(_QWORD *)(result + 280);
  *(_DWORD *)(result + 304) = 0;
  *(_BYTE *)(result + 270) = 0;
  *(_DWORD *)(result + 272) = -2;
  return result;
}

void sub_10188A098(NSObject *a1)
{
  NSObject *v1;
  Class isa;
  Class v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  int v7;
  objc_class *v8;
  const char *v9;
  const char *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  int v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  _BYTE v28[10];
  const char *v29;
  __int16 v30;
  const char *v31;

  if (BYTE6(a1[33].isa))
  {
    v1 = a1;
    if ((*((int (**))a1->isa + 17))(a1) < 6)
      goto LABEL_11;
    isa = v1[39].isa;
    v3 = v1[40].isa;
    if (v3 == isa)
      goto LABEL_11;
    v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - isa) >> 2);
    do
    {
      v5 = v4 >> 1;
      v6 = (char *)isa + 20 * (v4 >> 1);
      v7 = *((_DWORD *)v6 + 4);
      v8 = (objc_class *)(v6 + 20);
      v4 += ~(v4 >> 1);
      if (v7 < 0)
        isa = v8;
      else
        v4 = v5;
    }
    while (v4);
    if (isa == v3)
LABEL_11:
      LODWORD(v9) = -1;
    else
      LODWORD(v9) = *((_DWORD *)isa + 4);
    v10 = (const char *)DefaultObserver;
    if (qword_10229FD50 == -1)
    {
LABEL_13:
      v11 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
      {
        v12 = (*((uint64_t (**))v1->isa + 17))(v1);
        *(_DWORD *)buf = 67109632;
        v26 = v12;
        v27 = 1024;
        *(_DWORD *)v28 = 6;
        *(_WORD *)&v28[4] = 1024;
        *(_DWORD *)&v28[6] = (_DWORD)v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (*((_QWORD *)v10 + 426) != -1)
          dispatch_once(&qword_10229FD50, &stru_1021D6608);
        v15 = off_10229FD58;
        v16 = (*((uint64_t (**))v1->isa + 17))(v1);
        v20[0] = 67109632;
        v20[1] = v16;
        v21 = 1024;
        v22 = 6;
        v23 = 1024;
        v24 = (int)v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 1, "nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d", v20, 20, v19);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::endRun()", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      sub_101888D10((uint64_t)v1, (int)v9);
    }
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v13 = off_10229FD58;
    v10 = "";
    v9 = "fBuilding";
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v26 = 0;
      v27 = 2082;
      *(_QWORD *)v28 = "";
      *(_WORD *)&v28[8] = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v14 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      v26 = 0;
      v27 = 2082;
      *(_QWORD *)v28 = "";
      *(_WORD *)&v28[8] = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "fBuilding";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v1 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v26 = 0;
      v27 = 2082;
      *(_QWORD *)v28 = "";
      *(_WORD *)&v28[8] = 2082;
      v29 = "assert";
      v30 = 2081;
      v31 = "fBuilding";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 515, "endRun");
  }
  dispatch_once(&qword_10229FD50, &stru_1021D6608);
  goto LABEL_13;
}

char *sub_10188A5F8(double *a1, double a2)
{
  a1[405] = a2;
  (*(void (**)(double *, double *))(*(_QWORD *)a1 + 128))(a1, a1 + 50);
  return sub_101885FEC((char *)a1);
}

BOOL sub_10188A62C(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  float32x2_t *v8;
  float32x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  float32x2_t *v14;
  float32x2_t *v15;
  _BOOL8 result;
  __int128 v17;
  uint64_t v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  _OWORD v28[20];

  memset(v28, 0, sizeof(v28));
  LODWORD(v28[0]) = 1;
  if (a5)
  {
    if (!*(_BYTE *)(a1 + 384))
      return 0;
    v9 = *(float32x2_t **)(a1 + 312);
    v8 = *(float32x2_t **)(a1 + 320);
    if (v8 == v9)
    {
      v9 = *(float32x2_t **)(a1 + 320);
    }
    else
    {
      v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v9) >> 2);
      do
      {
        v11 = v10 >> 1;
        v12 = (char *)v9 + 20 * (v10 >> 1);
        v13 = *((_DWORD *)v12 + 4);
        v14 = (float32x2_t *)(v12 + 20);
        v10 += ~(v10 >> 1);
        if (v13 < 0)
          v9 = v14;
        else
          v10 = v11;
      }
      while (v10);
    }
    memcpy(v28, (const void *)(a1 + 392), sizeof(v28));
  }
  else
  {
    v9 = (float32x2_t *)sub_10188DFF4(*(_QWORD *)(a1 + 312), *(_QWORD *)(a1 + 320), -1);
    v8 = v15;
    result = sub_101885A9C(v9, v15, 0, (uint64_t)v28);
    if (!result)
      return result;
  }
  *(_QWORD *)a3 = *(_QWORD *)&v28[2];
  *(_DWORD *)(a3 + 8) = DWORD2(v28[2]);
  v17 = v28[2];
  v18 = *(_QWORD *)&v28[3];
  v19 = *(float *)&v28[3] + (float)(*((float *)&v28[2] + 1) * 25.0);
  *a2 = *((float *)&v28[2] + 3) + (float)(*(float *)&v28[2] * 25.0);
  a2[1] = v19;
  a2[2] = *((float *)&v18 + 1) + (float)(*((float *)&v17 + 2) * 25.0);
  *(_DWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = 0;
  if (v8 == v9)
    return 0;
  v20 = 0;
  v21 = 0.0;
  v22 = 0.0;
  v23 = 0.0;
  do
  {
    v25 = v9[1].f32[0];
    v24 = v9[1].f32[1];
    v26 = v9->f32[0];
    v27 = v9->f32[1];
    v9 = (float32x2_t *)((char *)v9 + 20);
    v21 = v21
        + (float)((float)((float)(*((float *)&v17 + 3) + (float)(v24 * *(float *)&v17)) - v26)
                * (float)((float)(*((float *)&v17 + 3) + (float)(v24 * *(float *)&v17)) - v26));
    v22 = v22
        + (float)((float)((float)(*(float *)&v18 + (float)(v24 * *((float *)&v17 + 1))) - v27)
                * (float)((float)(*(float *)&v18 + (float)(v24 * *((float *)&v17 + 1))) - v27));
    *(float *)a4 = v21;
    *(float *)(a4 + 4) = v22;
    v23 = v23
        + (float)((float)((float)(*((float *)&v18 + 1) + (float)(v24 * *((float *)&v17 + 2))) - v25)
                * (float)((float)(*((float *)&v18 + 1) + (float)(v24 * *((float *)&v17 + 2))) - v25));
    *(float *)(a4 + 8) = v23;
    ++v20;
  }
  while (v9 != v8);
  *(float *)a4 = v21 / (float)v20;
  *(float *)(a4 + 4) = v22 / (float)v20;
  *(float *)(a4 + 8) = v23 / (float)v20;
  return 1;
}

BOOL sub_10188A81C(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_10188A62C(a1 - 16, a2, a3, a4, a5);
}

uint64_t sub_10188A824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  int v9;

  v1 = *(_QWORD *)(a1 + 312);
  v2 = *(_QWORD *)(a1 + 320);
  if (v2 != v1)
  {
    v3 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - v1) >> 2);
    do
    {
      v4 = v3 >> 1;
      v5 = v1 + 20 * (v3 >> 1);
      v6 = *(_DWORD *)(v5 + 16);
      v7 = v5 + 20;
      v3 += ~(v3 >> 1);
      if (v6 < 0)
        v1 = v7;
      else
        v3 = v4;
    }
    while (v3);
  }
  result = 0x80000000;
  while (v1 != v2)
  {
    v9 = (int)*(float *)(v1 + 12);
    if ((int)result <= v9)
      result = v9;
    else
      result = result;
    v1 += 20;
  }
  return result;
}

uint64_t sub_10188A898(uint64_t a1)
{
  return sub_10188A824(a1 - 16);
}

uint64_t sub_10188A8A0()
{
  return 1;
}

uint64_t sub_10188A8A8()
{
  return 1;
}

uint64_t sub_10188A8B0()
{
  return 1;
}

uint64_t sub_10188A8B8()
{
  return 1;
}

float sub_10188A8C0(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;
  float *v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  v2 = *a1;
  v1 = a1[1];
  if (*a1 == v1)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v11 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "!v.empty()";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v12 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "!v.empty()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6608);
    }
    v13 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "!v.empty()";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 635, "getMedians");
  }
  v4 = (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1 - v2) >> 2)) >> 1;
  v5 = (float *)(v2 + 12 * v4);
  *(_QWORD *)buf = &stru_1021D6450;
  if (v5 == (float *)v1)
  {
    v6 = v2;
  }
  else
  {
    sub_10188E0D8(v2, v2 + 12 * v4, v1, (uint64_t)buf);
    v6 = *a1;
    v1 = a1[1];
  }
  v7 = *v5;
  *(_QWORD *)buf = &stru_1021D6470;
  if (v5 != (float *)v1)
  {
    sub_10188E0D8(v6, v2 + 12 * v4, v1, (uint64_t)buf);
    v8 = *a1;
    v9 = a1[1];
    *(_QWORD *)buf = &stru_1021D6490;
    if (v5 != (float *)v9)
      sub_10188E0D8(v8, v2 + 12 * v4, v9, (uint64_t)buf);
  }
  return v7;
}

BOOL sub_10188ABF8(id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var0 < a3->var0;
}

BOOL sub_10188AC0C(id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var1 < a3->var1;
}

BOOL sub_10188AC20(id a1, const $E2C29196C7A5C696474C6955C5A9CE06 *a2, const $E2C29196C7A5C696474C6955C5A9CE06 *a3)
{
  return a2->var2 < a3->var2;
}

void sub_10188AC34(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting gyro calibration, user initiated, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Starting gyro calibration, user initiated, %d", v10);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::startCalibration(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (!*(_QWORD *)(a1 + 3232))
  {
    -[CLDeviceMotionProperties initWithMode:]([CLDeviceMotionProperties alloc], "initWithMode:", 19);
    operator new();
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v7 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "assert";
    v17 = 2081;
    v18 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
  }
  v8 = off_10229FD58;
  if (os_signpost_enabled((os_log_t)off_10229FD58))
  {
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "assert";
    v17 = 2081;
    v18 = "!fDeviceMotionDispatcher";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
  }
  v9 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "assert";
    v17 = 2081;
    v18 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm", 795, "startCalibration");
  __break(1u);
}

void sub_10188B0A0()
{
  operator delete();
}

void sub_10188B0D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1002433D4();
  sub_1011932BC(v2, *(_QWORD *)(v1 + 3232), 1.0);
}

void sub_10188B0F8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6608);
  v2 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped gyro calibration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6608);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Stopped gyro calibration", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalMultiRun::teardown()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_QWORD *)(a1 + 3232))
  {
    v3 = sub_1002433D4();
    sub_101193558(v3, *(_QWORD *)(a1 + 3232));
    v4 = *(_QWORD *)(a1 + 3232);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 3232) = 0;
  }
}

uint64_t sub_10188B2B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t **v4;
  _QWORD *v5;
  int *v7;
  _QWORD v8[2];
  uint64_t *v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 108))
    return 0xFFFFFFFFLL;
  v7 = (int *)v8;
  v8[0] = 0;
  v8[1] = 0;
  v9 = a2;
  v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  v10 = (_DWORD *)(a1 + 104);
  v4 = sub_1000823D0((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_101B9EB60, &v10);
  if (v4 + 5 != (uint64_t **)&v7)
    sub_1001CA4BC(v4 + 5, v7, (int *)v8);
  v5 = (_QWORD *)v8[0];
  v4[8] = v9;
  v2 = *v3;
  sub_100008848((uint64_t)&v7, v5);
  return v2;
}

void sub_10188B364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_100008848((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_10188B37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D6648);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021D6648);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::removeClient(int) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_10188B5F0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1000B3638(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_10188B670(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10188B69C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10188B6C8(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
}

uint64_t sub_10188B6F8(uint64_t a1)
{
  uint64_t result;
  CLNotifierServiceAdapter *v3;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(_QWORD *)(a1 + 48) = v3;
    -[CLNotifierServiceAdapter setValid:](v3, "setValid:", 1);
    objc_msgSend(*(id *)(a1 + 48), "setAdaptedNotifier:", a1);
    return *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_10188B744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A35B0);
}

uint64_t sub_10188B758(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _OWORD buf[102];

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10188F1C0();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A35B1;
        HIDWORD(v39) = v17;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D6648);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6648);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != (char *)buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_10188BBE0(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6648);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D6648);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10188BE60(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D6648);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021D6648);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_10188C1E8(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (v4)
  {
    v5 = *a2;
    v6 = v2;
    do
    {
      v7 = *(_DWORD *)(v3 + 32);
      v8 = v7 < v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
      sub_100346F9C((_QWORD *)(v6 + 64));
  }
}

uint64_t sub_10188C234(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(const void **)(v7 + 64);
  if (!v11)
    return 0;
  memcpy(__dst, v11, 0x140uLL);
  return 1;
}

uint64_t sub_10188C2A4(uint64_t a1, int *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  __int128 v13;
  int *v14;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_1021D6698;
  memcpy(v6 + 3, a3, 0x140uLL);
  *(_QWORD *)&v13 = v6 + 3;
  *((_QWORD *)&v13 + 1) = v6;
  v12 = *a2;
  v14 = &v12;
  v7 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v12, (uint64_t)&unk_101B9EB60, &v14);
  sub_1002B7674((uint64_t)(v7 + 8), &v13);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_10188C388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10188C39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[20];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10188C430(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6648);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D6648);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6648);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D6648);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021D6648);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D6648);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

uint64_t sub_10188C9D8()
{
  return 0;
}

void sub_10188C9E0(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_10188CA10(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 102;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 204;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_10188CAD4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10188CB00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D6698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10188CB10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D6698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id sub_10188CB40(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_10188CEA8((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_10188CEA8(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;

  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221DFB8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)320)
    {
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021D6668);
      v4 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D6668);
      }
      v5 = qword_10229FC38;
      if (os_signpost_enabled((os_log_t)qword_10229FC38))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D6668);
      }
      v6 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_10188D158(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_10188D184(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL)
    sub_10025955C();
  return operator new(20 * a1);
}

void *sub_10188D1C8(unint64_t a1)
{
  if (a1 >> 61)
    sub_10025955C();
  return operator new(8 * a1);
}

uint64_t **sub_10188D1FC(uint64_t **a1, float *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  float v7;
  uint64_t **v8;
  float v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((float *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v5;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v5[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_1000145B0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_10188D2B4(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  unsigned __int32 v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  __int128 v26;
  __n128 v27;
  unint64_t v28;
  __n128 v29;
  __n128 v30;
  BOOL v31;
  BOOL v32;
  __n128 v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  __n128 v37;
  __int128 v38;
  __n128 v39;
  __n128 *v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  uint64_t v46;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __n128 v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  int64_t v69;
  __n128 *v70;
  __n128 *v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  __n128 v81;
  __n128 v82;
  uint64_t v83;
  int64_t v84;
  unint64_t v85;
  uint64_t v86;
  __n128 v87;
  uint64_t v88;
  __int128 v89;
  __n128 v90;
  __n128 v91;
  BOOL v92;
  __int8 *v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  BOOL v97;
  __n128 v98;
  uint64_t v99;
  __n128 *v100;
  __n128 v101;
  unsigned __int32 v102;
  __n128 v103;
  unsigned __int32 v104;

BOOL sub_10188DB40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL8 result;
  int v8;
  __int128 v9;
  int v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  __int128 v18;
  int v19;
  int v20;

  v6 = sub_101884DB4(a2, a1);
  result = sub_101884DB4(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = *(_DWORD *)(a1 + 16);
      v9 = *(_OWORD *)a1;
      v10 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 16) = v10;
    }
    else
    {
      v17 = *(_DWORD *)(a1 + 16);
      v18 = *(_OWORD *)a1;
      v19 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v19;
      *(_OWORD *)a2 = v18;
      *(_DWORD *)(a2 + 16) = v17;
      result = sub_101884DB4(a3, a2);
      if (!result)
        return result;
      v8 = *(_DWORD *)(a2 + 16);
      v9 = *(_OWORD *)a2;
      v20 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v20;
    }
    *(_OWORD *)a3 = v9;
    *(_DWORD *)(a3 + 16) = v8;
  }
  else if (result)
  {
    v11 = *(_DWORD *)(a2 + 16);
    v12 = *(_OWORD *)a2;
    v13 = *(_DWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 16) = v13;
    *(_OWORD *)a3 = v12;
    *(_DWORD *)(a3 + 16) = v11;
    result = sub_101884DB4(a2, a1);
    if (result)
    {
      v14 = *(_DWORD *)(a1 + 16);
      v15 = *(_OWORD *)a1;
      v16 = *(_DWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = v16;
      *(_OWORD *)a2 = v15;
      *(_DWORD *)(a2 + 16) = v14;
    }
  }
  return result;
}

BOOL sub_10188DC5C(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unsigned __int32 v7;
  __n128 v8;
  unsigned __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  int v18;

  v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 20);
      if (sub_101884DB4((uint64_t)&a2[-2].n128_i64[1] + 4, (uint64_t)a1))
      {
        v7 = a1[1].n128_u32[0];
        v8 = *a1;
        v9 = v6[1].n128_u32[0];
        *a1 = *v6;
        a1[1].n128_u32[0] = v9;
        *v6 = v8;
        v6[1].n128_u32[0] = v7;
      }
      return 1;
    case 3uLL:
      sub_10188DB40((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    case 4uLL:
      sub_10188DE20(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    case 5uLL:
      sub_10188DEEC(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a1[3].n128_i64[1] + 4, (uint64_t)&a2[-2].n128_i64[1] + 4);
      return 1;
    default:
      v10 = (uint64_t)&a1[2].n128_i64[1];
      sub_10188DB40((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1]);
      v11 = (uint64_t)&a1[3].n128_i64[1] + 4;
      if ((__n128 *)((char *)&a1[3].n128_f64[1] + 4) == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_101884DB4(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = *(_DWORD *)(v11 + 16);
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 60) = *(__n128 *)((char *)a1 + v14 + 40);
        *((_DWORD *)v15 + 19) = *(unsigned __int32 *)((char *)&a1[3].n128_u32[2] + v14);
        if (v14 == -40)
          break;
        v14 -= 20;
        if (!sub_101884DB4((uint64_t)&v17, (uint64_t)(v15 + 20)))
        {
          v16 = (uint64_t)&a1[3].n128_i64[1] + v14 + 4;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_DWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 20 == (_QWORD)a2;
    }
    v10 = v11;
    v12 += 20;
    v11 += 20;
    if ((__n128 *)v11 == a2)
      return 1;
  }
}

__n128 sub_10188DE20(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  __n128 v13;
  int v14;
  unsigned __int32 v15;
  unsigned __int32 v16;

  sub_10188DB40((uint64_t)a1, a2, a3);
  if (sub_101884DB4(a4, a3))
  {
    v9 = *(_DWORD *)(a3 + 16);
    v10 = *(_OWORD *)a3;
    v11 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v11;
    *(_OWORD *)a4 = v10;
    *(_DWORD *)(a4 + 16) = v9;
    if (sub_101884DB4(a3, a2))
    {
      v12 = *(_DWORD *)(a2 + 16);
      v13 = *(__n128 *)a2;
      v14 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v14;
      *(__n128 *)a3 = v13;
      *(_DWORD *)(a3 + 16) = v12;
      if (sub_101884DB4(a2, (uint64_t)a1))
      {
        v15 = a1[1].n128_u32[0];
        result = *a1;
        v16 = *(_DWORD *)(a2 + 16);
        *a1 = *(__n128 *)a2;
        a1[1].n128_u32[0] = v16;
        *(__n128 *)a2 = result;
        *(_DWORD *)(a2 + 16) = v15;
      }
    }
  }
  return result;
}

__n128 sub_10188DEEC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  __n128 v18;
  int v19;
  unsigned __int32 v20;
  unsigned __int32 v21;

  sub_10188DE20(a1, a2, a3, a4);
  if (sub_101884DB4(a5, a4))
  {
    v11 = *(_DWORD *)(a4 + 16);
    v12 = *(_OWORD *)a4;
    v13 = *(_DWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_DWORD *)(a4 + 16) = v13;
    *(_OWORD *)a5 = v12;
    *(_DWORD *)(a5 + 16) = v11;
    if (sub_101884DB4(a4, a3))
    {
      v14 = *(_DWORD *)(a3 + 16);
      v15 = *(_OWORD *)a3;
      v16 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v16;
      *(_OWORD *)a4 = v15;
      *(_DWORD *)(a4 + 16) = v14;
      if (sub_101884DB4(a3, a2))
      {
        v17 = *(_DWORD *)(a2 + 16);
        v18 = *(__n128 *)a2;
        v19 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v19;
        *(__n128 *)a3 = v18;
        *(_DWORD *)(a3 + 16) = v17;
        if (sub_101884DB4(a2, (uint64_t)a1))
        {
          v20 = a1[1].n128_u32[0];
          result = *a1;
          v21 = *(_DWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u32[0] = v21;
          *(__n128 *)a2 = result;
          *(_DWORD *)(a2 + 16) = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10188DFF4(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  if (a2 == result)
    return result;
  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - result) >> 2);
  while (1)
  {
    v4 = v3 >> 1;
    v5 = result + 20 * (v3 >> 1);
    v6 = *(_DWORD *)(v5 + 16);
    if (v6 >= a3)
      break;
    result = v5 + 20;
    v4 = v3 + ~v4;
LABEL_7:
    v3 = v4;
    if (!v4)
      return result;
  }
  if (v6 > a3)
  {
    a2 = result + 20 * (v3 >> 1);
    goto LABEL_7;
  }
  if (v3 >= 2)
  {
    do
    {
      v7 = v4 >> 1;
      v8 = result + 20 * (v4 >> 1);
      v9 = *(_DWORD *)(v8 + 16);
      v10 = v8 + 20;
      v4 += ~(v4 >> 1);
      if (v9 < a3)
        result = v10;
      else
        v4 = v7;
    }
    while (v4);
  }
  v11 = v5 + 20;
  v12 = a2 - (v5 + 20);
  if (v12)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 >> 2);
    do
    {
      v14 = v13 >> 1;
      v15 = v11 + 20 * (v13 >> 1);
      v16 = *(_DWORD *)(v15 + 16);
      v17 = v15 + 20;
      v13 += ~(v13 >> 1);
      if (v16 > a3)
        v13 = v14;
      else
        v11 = v17;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_10188E0D8(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;

  if (a3 != a2)
  {
    v5 = a3;
    v7 = result;
    do
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v7) >> 2);
      if (v8 < 2)
        break;
      if (v8 == 3)
        return sub_10188E59C((uint64_t *)v7, (uint64_t *)(v7 + 12), (uint64_t *)(v5 - 12), a4);
      if (v8 == 2)
      {
        v26 = *(_QWORD *)a4;
        v27 = (uint64_t *)(v5 - 12);
        result = (*(uint64_t (**)(void))(v26 + 16))();
        if ((_DWORD)result)
        {
          v45 = *(_DWORD *)(v7 + 8);
          v38 = *(_QWORD *)v7;
          v28 = *v27;
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v5 - 4);
          *(_QWORD *)v7 = v28;
          *(_DWORD *)(v5 - 4) = v45;
          *v27 = v38;
        }
        return result;
      }
      if ((uint64_t)(v5 - v7) <= 95)
      {
        while (v7 != v5 - 12)
        {
          v29 = v7;
          v7 += 12;
          if (v29 != v5 && v7 != v5)
          {
            v30 = v7;
            v31 = (uint64_t *)v29;
            do
            {
              result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
              if ((_DWORD)result)
                v31 = (uint64_t *)v30;
              v30 += 12;
            }
            while (v30 != v5);
            if (v31 != (uint64_t *)v29)
            {
              v46 = *(_DWORD *)(v29 + 8);
              v39 = *(_QWORD *)v29;
              v32 = *v31;
              *(_DWORD *)(v29 + 8) = *((_DWORD *)v31 + 2);
              *(_QWORD *)v29 = v32;
              *((_DWORD *)v31 + 2) = v46;
              *v31 = v39;
            }
          }
        }
        return result;
      }
      v9 = v7 + 12 * (v8 >> 1);
      v10 = (uint64_t *)(v5 - 12);
      v11 = sub_10188E59C((uint64_t *)v7, (uint64_t *)v9, (uint64_t *)(v5 - 12), a4);
      result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
      if ((result & 1) != 0)
      {
        v12 = v5 - 12;
LABEL_13:
        v14 = v7 + 12;
        if (v7 + 12 < v12)
        {
          while (1)
          {
            v15 = v14 - 12;
            do
              v15 += 12;
            while (((*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))() & 1) != 0);
            v14 = v15 + 12;
            do
            {
              v12 -= 12;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
            }
            while (!(_DWORD)result);
            if (v15 >= v12)
              break;
            v41 = *(_DWORD *)(v15 + 8);
            v34 = *(_QWORD *)v15;
            v16 = *(_QWORD *)v12;
            *(_DWORD *)(v15 + 8) = *(_DWORD *)(v12 + 8);
            *(_QWORD *)v15 = v16;
            *(_DWORD *)(v12 + 8) = v41;
            *(_QWORD *)v12 = v34;
            ++v11;
            if (v15 == v9)
              v9 = v12;
          }
          v14 = v15;
        }
        if (v14 != v9)
        {
          result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
          if ((_DWORD)result)
          {
            v42 = *(_DWORD *)(v14 + 8);
            v35 = *(_QWORD *)v14;
            v17 = *(_QWORD *)v9;
            *(_DWORD *)(v14 + 8) = *(_DWORD *)(v9 + 8);
            *(_QWORD *)v14 = v17;
            *(_DWORD *)(v9 + 8) = v42;
            *(_QWORD *)v9 = v35;
            ++v11;
          }
        }
        if (v14 == a2)
          return result;
        if (!v11)
        {
          v19 = v14;
          if (v14 <= a2)
          {
            while (1)
            {
              v22 = v19 + 12;
              if (v19 + 12 == v5)
                break;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
              v19 = v22;
              if ((_DWORD)result)
                goto LABEL_28;
            }
          }
          else
          {
            v20 = v7;
            while (1)
            {
              v21 = v20 + 12;
              if (v20 + 12 == v14)
                break;
              result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
              v20 = v21;
              if ((result & 1) != 0)
                goto LABEL_28;
            }
          }
          return result;
        }
LABEL_28:
        if (v14 <= a2)
        {
          v18 = v14 + 12;
        }
        else
        {
          v5 = v14;
          v18 = v7;
        }
      }
      else
      {
        v12 = v5 - 12;
        while (1)
        {
          v12 -= 12;
          if (v12 == v7)
            break;
          result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
          if ((_DWORD)result)
          {
            v40 = *(_DWORD *)(v7 + 8);
            v33 = *(_QWORD *)v7;
            v13 = *(_QWORD *)v12;
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
            *(_QWORD *)v7 = v13;
            *(_DWORD *)(v12 + 8) = v40;
            *(_QWORD *)v12 = v33;
            ++v11;
            goto LABEL_13;
          }
        }
        v23 = v7 + 12;
        result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
        if ((result & 1) == 0)
        {
          while ((uint64_t *)v23 != v10)
          {
            result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
            if ((_DWORD)result)
            {
              v43 = *(_DWORD *)(v23 + 8);
              v36 = *(_QWORD *)v23;
              v24 = *v10;
              *(_DWORD *)(v23 + 8) = *(_DWORD *)(v5 - 4);
              *(_QWORD *)v23 = v24;
              v23 += 12;
              *(_DWORD *)(v5 - 4) = v43;
              *v10 = v36;
              goto LABEL_44;
            }
            v23 += 12;
          }
          return result;
        }
LABEL_44:
        if ((uint64_t *)v23 == v10)
          return result;
        while (1)
        {
          v18 = v23 - 12;
          do
            v18 += 12;
          while (!(*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))());
          v23 = v18 + 12;
          do
          {
            v10 = (uint64_t *)((char *)v10 - 12);
            result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
          }
          while ((result & 1) != 0);
          if (v18 >= (unint64_t)v10)
            break;
          v44 = *(_DWORD *)(v18 + 8);
          v37 = *(_QWORD *)v18;
          v25 = *v10;
          *(_DWORD *)(v18 + 8) = *((_DWORD *)v10 + 2);
          *(_QWORD *)v18 = v25;
          *((_DWORD *)v10 + 2) = v44;
          *v10 = v37;
        }
        if (v18 > a2)
          return result;
      }
      v7 = v18;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t sub_10188E59C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;

  v8 = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  result = (*(uint64_t (**)(void))(*(_QWORD *)a4 + 16))();
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *((_DWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_DWORD *)a3 + 2) = v13;
    if (!(*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
      return 1;
    v16 = *((_DWORD *)a1 + 2);
    v17 = *a1;
    v18 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_DWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = *((_DWORD *)a1 + 2);
    v20 = *a1;
    v21 = *((_DWORD *)a2 + 2);
    *a1 = *a2;
    *((_DWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_DWORD *)a2 + 2) = v19;
    if (!(*(unsigned int (**)(void))(*(_QWORD *)a4 + 16))())
      return 1;
    v22 = *((_DWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_DWORD *)a3 + 2);
    *a2 = *a3;
    *((_DWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_DWORD *)a3 + 2) = v22;
    return 2;
  }
  v10 = *((_DWORD *)a1 + 2);
  v11 = *a1;
  v12 = *((_DWORD *)a3 + 2);
  *a1 = *a3;
  *((_DWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_DWORD *)a3 + 2) = v10;
  return 1;
}

void *sub_10188E6F4(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    sub_10025955C();
  return operator new(12 * a1);
}

uint64_t sub_10188E738(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

id sub_10188E7FC(void *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  id v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_10188EF10((uint64_t)&v10 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v13 = v2;
      v14 = 2048;
      v15 = 0;
      v16 = 2080;
      v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v11) = 134218498;
    HIDWORD(v11) = (_DWORD)v2;
    LODWORD(v10) = 32;
    v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v11, v10, v11);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v7 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v13 = v2;
      v14 = 2048;
      v15 = 0;
      v16 = 2080;
      v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v11) = 134218498;
    HIDWORD(v11) = (_DWORD)v2;
    LODWORD(v10) = 32;
    v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v11, v10, v11);
  }
  v9 = (uint8_t *)v5;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v5);
  if (v9 != buf)
    free(v9);
  return 0;
}

id sub_10188EB74(void *a1)
{
  id v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint8_t buf[4];
  id v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v12 = v2;
      v13 = 2048;
      v14 = 0;
      v15 = 2080;
      v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v10) = 134218498;
    HIDWORD(v10) = (_DWORD)v2;
    v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v10, 32, v10);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v7 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v12 = v2;
      v13 = 2048;
      v14 = 0;
      v15 = 2080;
      v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v10) = 134218498;
    HIDWORD(v10) = (_DWORD)v2;
    v5 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v10, 32, v10);
  }
  v9 = (uint8_t *)v5;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = char, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v5);
  if (v9 != buf)
    free(v9);
  return 0;
}

id sub_10188EF10(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;

  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221DFB8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)1)
    {
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021D6668);
      v4 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D6668);
      }
      v5 = qword_10229FC38;
      if (os_signpost_enabled((os_log_t)qword_10229FC38))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D6668);
      }
      v6 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_10188F1C0()
{
  operator new();
}

uint64_t sub_10188F258(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

void sub_10188F380()
{
  operator delete();
}

id sub_10188F3A4(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onAveragedALSData:", a1);
}

void sub_10188F4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_10188F598(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021D66E8;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10188F6C4;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100206BF0;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10188F69C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10188F6C4(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_10188F6DC(uint64_t a1)
{
  sub_10188F700(a1);
  operator delete();
}

uint64_t sub_10188F700(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D66E8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

void sub_10188F754(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10188F824(id a1)
{
  qword_1023100A0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLNearbydInterfaceManagerSilo"));
}

void sub_10188FA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (a3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#NearbydIfMgr IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    }
    v5 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#NearbydIfMgr IDS service failed to initialize", "{\"msg%{public}.0s\":\"#NearbydIfMgr IDS service failed to initialize\", \"Error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setService:", a2);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#NearbydIfMgr,IDS became available so resuming silo\"}", (uint8_t *)&v8, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 40), "resume");
  }
}

void sub_101890584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_101892DD0(v13);
  v16 = *(_QWORD *)(v12 + 120);
  *(_QWORD *)(v12 + 120) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(v12 + 112);
  *(_QWORD *)(v12 + 112) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *v15;
  *v15 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_10010E39C(*v14);
  sub_101892D30(a12);
  operator delete();
}

uint64_t *sub_1018906F4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    sub_101892DD0(v2 + 136);
    v3 = *(_QWORD *)(v2 + 120);
    *(_QWORD *)(v2 + 120) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(_QWORD *)(v2 + 112);
    *(_QWORD *)(v2 + 112) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(_QWORD *)(v2 + 104);
    *(_QWORD *)(v2 + 104) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    sub_10010E39C(*(_QWORD **)(v2 + 80));
    sub_101892D30(v2 + 8);
    operator delete();
  }
  return result;
}

void sub_1018919B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_101891D44(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  int v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  os_activity_scope_state_s state;
  char v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  uint64_t v25;

  CLProfilingIdentify("CLNearbydInterfaceManager::onStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 56), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D6780);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v16 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLNearbydInterfaceManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6780);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2082;
      v23 = "activity";
      v24 = 2050;
      v25 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLNearbydInterfaceManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v16 = 0;
  }
  if (*a2 == 8)
  {
    v9 = *a3;
    *(_BYTE *)(a4 + 96) = v9;
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(unsigned __int8 *)(a4 + 96);
      *(_DWORD *)buf = 67240192;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#NearbydIfMgr,#processAirplaneModeChange,airplaneMode=%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v12 = *(unsigned __int8 *)(a4 + 96);
      v17[0] = 67240192;
      v17[1] = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#NearbydIfMgr,#processAirplaneModeChange,airplaneMode=%{public}d", v17, 8);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::processAirplaneModeChange(const BOOL)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    if (v9)
    {
      sub_1001EE090(a4, 0, 0);
      sub_1001EE090(a4, 1, 0);
    }
  }
  if (v16)
    os_activity_scope_leave(&state);
}

void sub_10189207C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10189209C(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _OWORD v12[8];
  _OWORD v13[2];
  __int16 v14;
  uint64_t v15;
  uint8_t buf[1640];

  v2 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  v3 = objc_alloc((Class)CLLocation);
  v4 = *(_OWORD *)(a1 + 288);
  v12[6] = *(_OWORD *)(a1 + 272);
  v12[7] = v4;
  v13[0] = *(_OWORD *)(a1 + 304);
  *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)(a1 + 316);
  v5 = *(_OWORD *)(a1 + 224);
  v12[2] = *(_OWORD *)(a1 + 208);
  v12[3] = v5;
  v6 = *(_OWORD *)(a1 + 256);
  v12[4] = *(_OWORD *)(a1 + 240);
  v12[5] = v6;
  v7 = *(_OWORD *)(a1 + 192);
  v12[0] = *(_OWORD *)(a1 + 176);
  v12[1] = v7;
  objc_msgSend(v2, "encodeObject:forKey:", objc_msgSend(v3, "initWithClientLocation:", v12), CFSTR("kCLLocationStreamingMessageLocationKey"));
  v8 = objc_alloc_init((Class)NSMutableDictionary);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", objc_msgSend(v2, "encodedData"), CFSTR("kCLLocationStreamingMessageLocationKey"));
  v15 = 0;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D6760);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#NearbydIfMgr,#assistancerelay,send location to watch", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D6760);
    v14 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "#NearbydIfMgr,#assistancerelay,send location to watch", &v14, 2);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::relayLocationToWatch(NSMutableDictionary *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
  objc_msgSend(*(id *)(a1 + 64), "sendMessageToWatch:identifier:", v8, &v15);
  *(double *)(a1 + 48) = sub_1001FCBB4();
}

uint64_t sub_1018922F8(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  sub_100259608(&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_101892340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  NSNumber *v6;
  void **v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  NSObject *v27;
  uint64_t *v28;
  int v29;
  void **v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  void **v34;
  const char *v35;
  uint8_t *v36;
  id v37;
  void *__dst[2];
  uint64_t v39;
  int v40;
  void *__p[2];
  id v42;
  __int16 v43;
  int v44;
  __int16 v45;
  void **v46;
  uint8_t buf[8];
  uint64_t v48;
  id v49;
  char *v50;
  void **v51;
  _QWORD v52[2];
  _QWORD v53[2];

  v40 = a2;
  v4 = a1 + 8;
  v5 = sub_1001EE134((_QWORD *)(a1 + 8), a2);
  if (v5)
  {
    if (*((char *)v5 + 47) < 0)
    {
      sub_100115CE4(__dst, (void *)v5[3], v5[4]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v5 + 3);
      v39 = v5[5];
    }
    v52[0] = CFSTR("SimInstance");
    v6 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2);
    v52[1] = CFSTR("ISO");
    v53[0] = v6;
    if (v39 >= 0)
      v7 = __dst;
    else
      v7 = (void **)__dst[0];
    v53[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7);
    v37 = 0;
    v8 = objc_msgSend(*(id *)(a1 + 64), "sendMessageToWatch:identifier:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v53, v52, 2), &v37);
    if (v37)
      v9 = v8;
    else
      v9 = 0;
    if (v9 == 1)
    {
      v10 = sub_101892E80(v4, a2, &v40);
      sub_1015A2E04(__p, (char *)objc_msgSend(v37, "UTF8String"));
      v11 = v10[9];
      v12 = v10[8];
      if (v12 >= v11)
      {
        v14 = v10[7];
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v51 = (void **)(v10 + 9);
        if (v18)
          v19 = (char *)sub_1002596A8((uint64_t)(v10 + 9), v18);
        else
          v19 = 0;
        v20 = &v19[24 * v15];
        *(_QWORD *)buf = v19;
        v48 = (uint64_t)v20;
        v50 = &v19[24 * v18];
        v21 = *(_OWORD *)__p;
        *((_QWORD *)v20 + 2) = v42;
        *(_OWORD *)v20 = v21;
        __p[1] = 0;
        v42 = 0;
        __p[0] = 0;
        v49 = v20 + 24;
        sub_100074D44(v10 + 7, buf);
        v22 = v10[8];
        sub_100074DB8((uint64_t)buf);
        v23 = SHIBYTE(v42);
        v10[8] = v22;
        if (v23 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v13 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v42;
        *(_OWORD *)v12 = v13;
        v10[8] = v12 + 24;
      }
      v24 = sub_101892E80(v4, a2, &v40);
      if (0xAAAAAAAAAAAAAAABLL * ((v24[8] - v24[7]) >> 3) >= 0x15)
      {
        v25 = sub_101892E80(v4, a2, &v40)[7];
        v26 = sub_101892E80(v4, a2, &v40);
        sub_1011AE72C((uint64_t)(v26 + 7), v25, (__int128 *)(v25 + 24));
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D6760);
      v27 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v28 = sub_101892E80(v4, a2, &v40);
        v29 = -1431655765 * ((unint64_t)(v28[8] - v28[7]) >> 3);
        v30 = __dst;
        if (v39 < 0)
          v30 = (void **)__dst[0];
        *(_DWORD *)buf = 67110146;
        *(_DWORD *)&buf[4] = v29;
        v48 = 0x840000000010400;
        v49 = v37;
        LOWORD(v50) = 1024;
        *(_DWORD *)((char *)&v50 + 2) = a2;
        HIWORD(v50) = 2080;
        v51 = v30;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#NearbydIfMgr,#sendIsoCountryToWatch,savedMsgIdentifiers.size()=%d,sent=%d,identifier:%@,SimInstance:%d,ISO:%s", buf, 0x28u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021D6760);
        v31 = qword_1022A01D8;
        v32 = sub_101892E80(v4, a2, &v40);
        v33 = -1431655765 * ((unint64_t)(v32[8] - v32[7]) >> 3);
        v34 = __dst;
        if (v39 < 0)
          v34 = (void **)__dst[0];
        LODWORD(__p[0]) = 67110146;
        HIDWORD(__p[0]) = v33;
        LOWORD(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 2) = 1;
        HIWORD(__p[1]) = 2112;
        v42 = v37;
        v43 = 1024;
        v44 = a2;
        v45 = 2080;
        v46 = v34;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "#NearbydIfMgr,#sendIsoCountryToWatch,savedMsgIdentifiers.size()=%d,sent=%d,identifier:%@,SimInstance:%d,ISO:%s", __p, 40);
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "void CLNearbydInterfaceManager::sendIsoCountryToWatch(SimInstance)", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
    }
    if (SHIBYTE(v39) < 0)
      operator delete(__dst[0]);
  }
}

void sub_101892838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1018928A0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1018928CC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1018928F8(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

__n128 sub_101892924(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 result;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  if (*(unsigned __int8 *)(a1 + 696) == *(unsigned __int8 *)(a2 + 696))
  {
    if (*(_BYTE *)(a1 + 696))
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      v4 = *(_OWORD *)(a2 + 16);
      v5 = *(_OWORD *)(a2 + 32);
      v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)(a1 + 48) = v6;
      *(_OWORD *)(a1 + 16) = v4;
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      sub_100006898(a1 + 88, (__n128 *)(a2 + 88));
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      v7 = *(_OWORD *)(a2 + 128);
      v8 = *(_OWORD *)(a2 + 144);
      v9 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v9;
      *(_OWORD *)(a1 + 128) = v7;
      *(_OWORD *)(a1 + 144) = v8;
      v10 = *(_OWORD *)(a2 + 192);
      v11 = *(_OWORD *)(a2 + 208);
      v12 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v12;
      *(_OWORD *)(a1 + 192) = v10;
      *(_OWORD *)(a1 + 208) = v11;
      v13 = *(_OWORD *)(a2 + 256);
      v14 = *(_OWORD *)(a2 + 272);
      v15 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
      *(_OWORD *)(a1 + 272) = v14;
      *(_OWORD *)(a1 + 288) = v15;
      *(_OWORD *)(a1 + 256) = v13;
      v16 = (void **)(a1 + 320);
      if (*(char *)(a1 + 343) < 0)
        operator delete(*v16);
      v17 = *(_OWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
      *(_OWORD *)v16 = v17;
      *(_BYTE *)(a2 + 343) = 0;
      *(_BYTE *)(a2 + 320) = 0;
      v19 = *(_OWORD *)(a2 + 424);
      v18 = *(_OWORD *)(a2 + 440);
      v20 = *(_OWORD *)(a2 + 408);
      *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
      *(_OWORD *)(a1 + 408) = v20;
      *(_OWORD *)(a1 + 424) = v19;
      *(_OWORD *)(a1 + 440) = v18;
      v22 = *(_OWORD *)(a2 + 360);
      v21 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 360) = v22;
      *(_OWORD *)(a1 + 376) = v21;
      v23 = *(_OWORD *)(a2 + 456);
      v24 = *(_OWORD *)(a2 + 472);
      v25 = *(_OWORD *)(a2 + 488);
      *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
      *(_OWORD *)(a1 + 472) = v24;
      *(_OWORD *)(a1 + 488) = v25;
      *(_OWORD *)(a1 + 456) = v23;
      v26 = *(_OWORD *)(a2 + 512);
      v27 = *(_OWORD *)(a2 + 528);
      v28 = *(_OWORD *)(a2 + 560);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
      *(_OWORD *)(a1 + 560) = v28;
      *(_OWORD *)(a1 + 512) = v26;
      *(_OWORD *)(a1 + 528) = v27;
      v29 = *(_OWORD *)(a2 + 576);
      v30 = *(_OWORD *)(a2 + 592);
      v31 = *(_OWORD *)(a2 + 624);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
      *(_OWORD *)(a1 + 624) = v31;
      *(_OWORD *)(a1 + 576) = v29;
      *(_OWORD *)(a1 + 592) = v30;
      result = *(__n128 *)(a2 + 640);
      v33 = *(_OWORD *)(a2 + 656);
      v34 = *(_OWORD *)(a2 + 672);
      *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
      *(_OWORD *)(a1 + 656) = v33;
      *(_OWORD *)(a1 + 672) = v34;
      *(__n128 *)(a1 + 640) = result;
    }
  }
  else if (*(_BYTE *)(a1 + 696))
  {
    sub_100D6F0A8(a1);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v35 = *(_OWORD *)(a2 + 16);
    v36 = *(_OWORD *)(a2 + 32);
    v37 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
    *(_OWORD *)(a1 + 32) = v36;
    *(_OWORD *)(a1 + 48) = v37;
    *(_OWORD *)(a1 + 16) = v35;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 88) = 0;
    v38 = *(_OWORD *)(a2 + 176);
    v40 = *(_OWORD *)(a2 + 128);
    v39 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v38;
    *(_OWORD *)(a1 + 128) = v40;
    *(_OWORD *)(a1 + 144) = v39;
    v41 = *(_OWORD *)(a2 + 240);
    v43 = *(_OWORD *)(a2 + 192);
    v42 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v41;
    *(_OWORD *)(a1 + 192) = v43;
    *(_OWORD *)(a1 + 208) = v42;
    v45 = *(_OWORD *)(a2 + 272);
    v44 = *(_OWORD *)(a2 + 288);
    v46 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 300) = *(_OWORD *)(a2 + 300);
    *(_OWORD *)(a1 + 272) = v45;
    *(_OWORD *)(a1 + 288) = v44;
    *(_OWORD *)(a1 + 256) = v46;
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    v47 = *(_OWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = v47;
    *(_QWORD *)(a2 + 328) = 0;
    *(_QWORD *)(a2 + 336) = 0;
    *(_QWORD *)(a2 + 320) = 0;
    v48 = *(_OWORD *)(a2 + 440);
    v50 = *(_OWORD *)(a2 + 392);
    v49 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 440) = v48;
    *(_OWORD *)(a1 + 392) = v50;
    *(_OWORD *)(a1 + 408) = v49;
    v51 = *(_OWORD *)(a2 + 344);
    v52 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v52;
    *(_OWORD *)(a1 + 344) = v51;
    v54 = *(_OWORD *)(a2 + 472);
    v53 = *(_OWORD *)(a2 + 488);
    v55 = *(_OWORD *)(a2 + 456);
    *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
    *(_OWORD *)(a1 + 472) = v54;
    *(_OWORD *)(a1 + 488) = v53;
    *(_OWORD *)(a1 + 456) = v55;
    v56 = *(_OWORD *)(a2 + 512);
    v57 = *(_OWORD *)(a2 + 528);
    v58 = *(_OWORD *)(a2 + 560);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 560) = v58;
    *(_OWORD *)(a1 + 512) = v56;
    *(_OWORD *)(a1 + 528) = v57;
    v59 = *(_OWORD *)(a2 + 576);
    v60 = *(_OWORD *)(a2 + 592);
    v61 = *(_OWORD *)(a2 + 624);
    *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 608);
    *(_OWORD *)(a1 + 624) = v61;
    *(_OWORD *)(a1 + 576) = v59;
    *(_OWORD *)(a1 + 592) = v60;
    result = *(__n128 *)(a2 + 640);
    v62 = *(_OWORD *)(a2 + 656);
    v63 = *(_OWORD *)(a2 + 672);
    *(_DWORD *)(a1 + 688) = *(_DWORD *)(a2 + 688);
    *(_OWORD *)(a1 + 656) = v62;
    *(_OWORD *)(a1 + 672) = v63;
    *(__n128 *)(a1 + 640) = result;
    *(_BYTE *)(a1 + 696) = 1;
  }
  return result;
}

void sub_101892BBC(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_100385A64((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_100259C18((_QWORD *)a1, v11);
    v12 = sub_100259C68(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_10028EE04(__str, v13, v9);
    v12 = sub_100259C68(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_10028EE04(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_101892D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_101892D28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_101892D30(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_101892D8C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_101892D8C(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 40);
  sub_100259608(&v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t sub_101892DD0(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_101892E34(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_101892E80(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;
  _QWORD v35[2];
  char v36;

  v6 = a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x58uLL);
  v35[0] = v13;
  v35[1] = a1 + 16;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v6;
  *((_DWORD *)v13 + 4) = *a3;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  v36 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_10025955C();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(void **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*v12;
          if (*v12)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v12;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  i = (uint64_t *)v35[0];
  if (v31)
  {
    *(_QWORD *)v35[0] = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *(_QWORD *)v35[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  v35[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1018932A4((uint64_t)v35);
  return i;
}

void sub_101893290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018932A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018932A4(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_101892D8C((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

__int128 *sub_1018932E8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_101893358()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CEAFE4;
      v1[3] = unk_101CEAFF4;
      v1[4] = xmmword_101CEB004;
      v1[0] = xmmword_101CEAFC4;
      v1[1] = unk_101CEAFD4;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_10189342C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

float sub_101893444()
{
  NSDate *v0;
  NSDateComponents *v1;
  id v2;
  id v3;
  id v4;
  double v5;
  double v6;

  v0 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  v1 = -[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 252, v0);
  v2 = -[NSDateComponents copy](v1, "copy");
  objc_msgSend(v2, "setDay:", 1);
  objc_msgSend(v2, "setMonth:", 1);
  v3 = objc_msgSend(objc_alloc((Class)NSCalendar), "initWithCalendarIdentifier:", NSCalendarIdentifierGregorian);
  v4 = objc_msgSend(v3, "components:fromDate:toDate:options:", 16, objc_msgSend(v3, "dateFromComponents:", v2), v0, 0);
  v5 = (double)-[NSDateComponents year](v1, "year");
  v6 = fabs((double)((uint64_t)objc_msgSend(v4, "day") + 1));
  return v6 / dbl_101CEB020[(-[NSDateComponents year](v1, "year") & 3) == 0] + v5;
}

void sub_101893544(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  NSFileManager *v6;
  uint64_t *v7;
  NSArray *v8;
  NSObject *v9;
  uint64_t *v10;
  uint64_t *v11;
  const char *v12;
  char *v13;
  NSArray *v14;
  uint64_t *v15;
  NSString *v16;
  id v17;
  uint64_t v18;
  void *i;
  void *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  const void **v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _BYTE v32[128];
  int v33;
  uint64_t *v34;
  __int16 v35;
  uint64_t v36;
  _BYTE buf[12];
  __int16 v38;
  uint64_t v39;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v31 = 0;
  v6 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  if (*((char *)a1 + 23) >= 0)
    v7 = a1;
  else
    v7 = (uint64_t *)*a1;
  v8 = -[NSFileManager contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:](v6, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7)), 0, 4, &v31);
  if (v31)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D67C0);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a1 + 23) >= 0)
        v10 = a1;
      else
        v10 = (uint64_t *)*a1;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v10;
      v38 = 2114;
      v39 = v31;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021D67C0);
      if (*((char *)a1 + 23) >= 0)
        v11 = a1;
      else
        v11 = (uint64_t *)*a1;
      v33 = 136446466;
      v34 = v11;
      v35 = 2114;
      v36 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 1, "Unable to list files at path: %{public}s, error, %{public}@", &v33, 22);
      v13 = (char *)v12;
      sub_100512490("Generic", 1, 0, 2, "static std::vector<std::string> CLLegacyFileManager::listFilesWithExt(const std::string &, const std::string &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    v14 = v8;
    if (*((char *)a2 + 23) >= 0)
      v15 = a2;
    else
      v15 = (uint64_t *)*a2;
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15);
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v17 = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    if (v17)
    {
      v18 = *(_QWORD *)v28;
      do
      {
        for (i = 0; i != v17; i = (char *)i + 1)
        {
          if (*(_QWORD *)v28 != v18)
            objc_enumerationMutation(v14);
          v20 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
          if (!objc_msgSend(objc_msgSend(v20, "pathExtension"), "compare:options:", v16, 1))
          {
            v21 = (char *)objc_msgSend(v20, "fileSystemRepresentation");
            *(_QWORD *)buf = v21;
            v22 = a3[1];
            if (v22 >= a3[2])
            {
              v23 = sub_10163BE48(a3, (char **)buf);
            }
            else
            {
              sub_1015A2E04((_QWORD *)a3[1], v21);
              v23 = v22 + 24;
              a3[1] = v22 + 24;
            }
            a3[1] = v23;
          }
        }
        v17 = -[NSArray countByEnumeratingWithState:objects:count:](v14, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
      }
      while (v17);
    }
    v24 = (const void **)a3[1];
    v25 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v24 - *a3) >> 3));
    if (v24 == (const void **)*a3)
      v26 = 0;
    else
      v26 = v25;
    sub_10163BF4C(*a3, v24, (uint64_t)&v33, v26, 1);
  }
}

void sub_1018938D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void **a41)
{
  sub_100259608(&a41);
  _Unwind_Resume(a1);
}

void sub_101893914(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101893C0C(id a1)
{
  qword_1023100B8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLInternalServiceSilo"));
}

void sub_101894038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018941F4(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  qword_1023100C8 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___CLLocationInternalServiceProtocol);
  v2 = objc_opt_class(NSArray, v1);
  v4 = objc_opt_class(NSDictionary, v3);
  v6 = objc_opt_class(NSString, v5);
  v8 = objc_opt_class(NSData, v7);
  v10 = objc_opt_class(NSDate, v9);
  v12 = objc_opt_class(NSNumber, v11);
  objc_msgSend((id)qword_1023100C8, "setClasses:forSelector:argumentIndex:ofReply:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v2, v4, v6, v8, v10, v12, objc_opt_class(CLLocation, v13), 0), "notifyPassKitPayment:transaction:info:", 2, 0);
}

void sub_1018942F4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Spi, Connection interrupted for process\", \"process\":%{public}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_1018943DC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 32);
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Spi, Connection invalidated for process\", \"process\":%{public}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_101894504(id a1)
{
  qword_1023100D8 = objc_alloc_init(CLIntersiloDelegate);
}

void sub_101894568(id a1)
{
  qword_1023100E8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("MIGResponseSilo"));
}

void sub_101894910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101894CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101895064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018950A4(uint64_t a1, uint64_t a2)
{
  id v3;

  if (a2)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    v3 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.internalservice.errorDomain"), 0, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
}

void sub_101895618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101895B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101895FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, os_activity_scope_state_s state)
{
  void *v20;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189698C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;
  void *v71;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101896E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101897690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  void *v50;

  if (a22 < 0)
    operator delete(__p);
  sub_100010174((uint64_t)&a50);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

id sub_10189771C(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = -[NSXPCConnection valueForEntitlement:](+[NSXPCConnection currentConnection](NSXPCConnection, "currentConnection"), "valueForEntitlement:", a1);
  if (v1 && (v3 = v1, v4 = objc_opt_class(NSNumber, v2), (objc_opt_isKindOfClass(v3, v4) & 1) != 0))
    return objc_msgSend(v3, "BOOLValue");
  else
    return 0;
}

void sub_101897B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,os_activity_scope_state_s state,char a23)
{
  void *v23;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101897E98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10189813C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1018985A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state)
{
  void *v12;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018989A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018990B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  void *v59;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018997B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  void *v54;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_101899984(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_101899F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,os_activity_scope_state_s state,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  void *v50;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,os_activity_scope_state_s state)
{
  void *v43;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;
  void *v65;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189B778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,os_activity_scope_state_s state)
{
  void *v43;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189C0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;

  sub_100010174((uint64_t)&a41);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189C4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189C6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_10189C9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  sub_100010174((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189CD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, os_activity_scope_state_s state,char a21)
{
  void *v21;

  sub_100010174((uint64_t)&a21);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189D128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,os_activity_scope_state_s state)
{
  void *v48;
  uint64_t v49;

  if (a47 < 0)
    operator delete(__p);
  sub_100010174(v49 - 256);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_10189D198(uint64_t a1, int a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1026;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#UsageWin, setting incidentalUseMode\", \"to\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10189DC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,os_activity_scope_state_s state,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  void *v58;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_10189DCCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10189E634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,os_activity_scope_state_s state,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  void *v60;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_10189E6E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10189F048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,os_activity_scope_state_s state,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  void *v58;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_10189F0FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10189FA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,os_activity_scope_state_s state,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  void *v58;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_10189FB08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10189FED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,os_activity_scope_state_s state,char a26)
{
  void *v26;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_10189FF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6;
  NSObject *v7;
  void *v8;
  std::string *v9;
  _OWORD v10[2];
  std::string v11;
  uint8_t buf[8];
  __int16 v13;
  const char *v14;
  __int16 v15;
  _BYTE v16[18];
  __int16 v17;
  uint64_t v18;
  _BYTE v19[10];
  __int16 v20;
  std::string *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;

  v6 = sub_100127828(a3 - a2);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(void **)(a1 + 32);
    if (v8)
      objc_msgSend(v8, "currentToken");
    else
      memset(v10, 0, sizeof(v10));
    sub_1001AE4D0((uint64_t)v10, (uint64_t)buf);
    sub_1001A8444((uint64_t)buf, &v11);
    if (v30 < 0)
      operator delete(__p);
    if (v28 < 0)
      operator delete(v27);
    if (v26 < 0)
      operator delete(v25);
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(*(void **)v19);
    if (SHIBYTE(v18) < 0)
      operator delete(*(void **)&v16[4]);
    if ((v16[3] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    v9 = &v11;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 68290306;
    *(_DWORD *)&buf[4] = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    *(_QWORD *)v16 = "elapsed";
    *(_WORD *)&v16[8] = 2050;
    *(_QWORD *)&v16[10] = a2;
    v17 = 2050;
    v18 = a3;
    *(_WORD *)v19 = 2050;
    *(double *)&v19[2] = v6;
    v20 = 2082;
    v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Spi, triggered migration\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"clientName\":%{public, location:escape_only}s}", buf, 0x44u);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1018A0124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1018A0140(uint64_t a1)
{
  void *v2;
  _QWORD v4[4];
  __int128 v5;

  sub_10187E75C(qword_102314138, 1);
  v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1018A01B4;
  v4[3] = &unk_102159978;
  v5 = *(_OWORD *)(a1 + 40);
  return objc_msgSend(v2, "performMigrationWithReply:", v4);
}

uint64_t sub_1018A01B4(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  objc_msgSend(*(id *)(a1 + 32), "notifyMigrationPerformed");
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLDaemonStartedNotification, 0, 0, 1u);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1018A04C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  sub_100010174((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A07C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  sub_100010174((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A0C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  void *v52;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A0F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  void *v22;

  sub_100010174((uint64_t)&a22);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A162C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,os_activity_scope_state_s state,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  sub_100010174((uint64_t)&a51);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A21CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  sub_100261F44((uint64_t)&STACK[0x6C8]);
  sub_100010174((uint64_t)&STACK[0x2C0]);
  _Block_object_dispose(&STACK[0x380], 8);
  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x450]);

  _Unwind_Resume(a1);
}

void sub_1018A22AC(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  void **v7;
  void *v8;
  id v9;
  void *v10[2];
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *__p[2];
  char v25;
  _QWORD v26[19];
  uint64_t buf;
  __int16 v28;
  const char *v29;
  __int16 v30;
  _BYTE v31[10];
  __int16 v32;
  _QWORD *v33;

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(a3 + 16))(v26, a3);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    buf = 68289795;
    v28 = 2082;
    v29 = "";
    v30 = 1026;
    *(_DWORD *)v31 = a2;
    *(_WORD *)&v31[4] = 1040;
    *(_DWORD *)&v31[6] = 156;
    v32 = 2097;
    v33 = v26;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SPI getLocation #cclp\", \"gotLocation\":%{public}hhd, \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x28u);
  }
  if (a2 && *(double *)((char *)&v26[2] + 4) > 0.0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021D69F0);
    v6 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_1001A885C(a1 + 48, (uint64_t)__p);
      v7 = v25 >= 0 ? __p : (void **)__p[0];
      buf = 68289282;
      v28 = 2082;
      v29 = "";
      v30 = 2082;
      *(_QWORD *)v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    v8 = *(void **)(a1 + 32);
    sub_1001AF190((char *)v10, (__int128 *)(a1 + 48));
    objc_msgSend(v8, "markReceivingLocationInformation:", sub_1001AE728((__int128 *)v10));
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(v14);
    if (v13 < 0)
      operator delete(v12);
    if (v11 < 0)
      operator delete(v10[0]);
    +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v26, 156);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v9 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.internalservice.errorDomain"), 0, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

  }
}

void sub_1018A25A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_1018A25C0(uint64_t a1, uint64_t a2)
{
  return sub_1001AF190((char *)(a1 + 48), (__int128 *)(a2 + 48));
}

uint64_t sub_1018A25CC(uint64_t a1)
{
  return sub_100010174(a1 + 48);
}

__n128 sub_1018A25D4(uint64_t a1, void *a2)
{
  _OWORD *v3;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  if (a2)
  {
    objc_msgSend(a2, "clientLocation");
  }
  else
  {
    v12 = 0u;
    memset(v13, 0, 28);
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    v6 = 0u;
    v7 = 0u;
    v5 = 0u;
  }
  v3 = *(_OWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v3[5] = v7;
  v3[10] = v12;
  v3[11] = v13[0];
  *(_OWORD *)((char *)v3 + 188) = *(_OWORD *)((char *)v13 + 12);
  v3[6] = v8;
  v3[7] = v9;
  v3[8] = v10;
  v3[9] = v11;
  v3[3] = v5;
  v3[4] = v6;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  return result;
}

void sub_1018A2DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;

  sub_100261F44((uint64_t)&STACK[0x638]);
  _Block_object_dispose(&a53, 8);
  _Block_object_dispose(&STACK[0x230], 8);
  sub_100010174((uint64_t)&STACK[0x2C0]);
  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x380]);

  _Unwind_Resume(a1);
}

void sub_1018A2EC0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1018A2ED0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

_QWORD *sub_1018A2EDC(_QWORD *result, uint64_t a2, void *a3)
{
  *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 40) = a2;
  if (!a2)
    return objc_msgSend(a3, "getBytes:length:", *(_QWORD *)(result[5] + 8) + 48, 156);
  return result;
}

void sub_1018A33B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  void *v11;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A38A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A3D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A4598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,os_activity_scope_state_s state)
{
  if (__p)
    operator delete(__p);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A4BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  void *v50;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A4FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1018A4FF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1018A5388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1018A53C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1018A5758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1018A5798(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349056;
    v12 = objc_msgSend(a2, "count");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "getOdometryBatchedLocationsWithReplyBlock received data count,%{public}lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v6 = qword_1022A01C8;
    v9 = 134349056;
    v10 = objc_msgSend(a2, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 2, "getOdometryBatchedLocationsWithReplyBlock received data count,%{public}lu", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLInternalService getOdometryBatchedLocationsWithReplyBlock:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1018A727C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A7340(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint8_t *v6;
  uint8_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v13 = 0;
  if ((objc_msgSend(*(id *)(a1 + 32), "removeItemAtPath:error:", *(_QWORD *)(a1 + 40), &v13) & 1) != 0)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v3 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "getPipelinedCacheWithReply %@ deleted", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      v4 = *(_QWORD *)(a1 + 40);
      v14 = 138412290;
      v15 = v4;
      v5 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 1, "getPipelinedCacheWithReply %@ deleted", &v14, 12);
      v7 = v6;
      sub_100512490("Generic", 1, 0, 2, "-[CLInternalService getPipelinedCacheWithReply:]_block_invoke", "%s\n", v5);
LABEL_19:
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v19 = v9;
      v20 = 2112;
      v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "getPipelinedCacheWithReply removal of %@ FAILED with error %@", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      v10 = *(_QWORD *)(a1 + 40);
      v14 = 138412546;
      v15 = v10;
      v16 = 2112;
      v17 = v13;
      v11 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 16, "getPipelinedCacheWithReply removal of %@ FAILED with error %@", &v14, 22);
      v7 = v12;
      sub_100512490("Generic", 1, 0, 0, "-[CLInternalService getPipelinedCacheWithReply:]_block_invoke", "%s\n", v11);
      goto LABEL_19;
    }
  }
}

void sub_1018A80F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,os_activity_scope_state_s state,char a60)
{
  void *v60;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A89D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  void *v50;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A9298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,os_activity_scope_state_s state,char a50)
{
  void *v50;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018A94B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1018A94C4(uint64_t a1, int a2, uint64_t a3)
{
  id v4;
  id v5;

  if (a2)
    v4 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a3, 320);
  else
    v4 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.internalservice.errorDomain"), 0, 0);
  v5 = v4;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1018A99E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018AA6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x200]);

  _Unwind_Resume(a1);
}

void sub_1018AAB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state, os_activity_scope_state_s a14)
{
  void *v14;

  os_activity_scope_leave(&state);
  os_activity_scope_leave(&a14);

  _Unwind_Resume(a1);
}

void sub_1018AAEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1018AB77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;
  void *v67;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018AC098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;
  void *v67;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018AC4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018ACE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  os_activity_scope_state_s state;
  void *v69;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018AD164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  void *v9;

  os_activity_scope_leave(&a9);

  _Unwind_Resume(a1);
}

void sub_1018AD30C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018AD4A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018AD668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018AD698(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  void *v8;
  uint8_t buf[4];
  void *v10;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,copyNearbyAssetSettings,returning dict,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v7 = 138477827;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,copyNearbyAssetSettings,returning dict,%{private}@", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLInternalService copyNearbyAssetSettings:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1018AD9FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018ADA2C(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  void *v8;
  uint8_t buf[4];
  void *v10;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,copyNearbyAssetSettingsOfAccessoryFileWithReply,returning dict,%{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v7 = 138477827;
    v8 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,copyNearbyAssetSettingsOfAccessoryFileWithReply,returning dict,%{private}@", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLInternalService copyNearbyAssetSettingsOfAccessoryFile:withReply:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1018ADD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018ADDB0(uint64_t a1, void *a2, int a3, int a4)
{
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  void *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  void *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v8 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138478339;
    v18 = a2;
    v19 = 1026;
    v20 = a3;
    v21 = 1026;
    v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Spi,copyRoutineAssetSettings,returning dict,%{private}@,compVersion,%{public}d,contVersion,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v11 = 138478339;
    v12 = a2;
    v13 = 1026;
    v14 = a3;
    v15 = 1026;
    v16 = a4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,copyRoutineAssetSettings,returning dict,%{private}@,compVersion,%{public}d,contVersion,%{public}d", &v11, 24);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "-[CLInternalService copyRoutineAssetSettings:]_block_invoke", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1018AE144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

uint64_t sub_1018AE174(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  const char *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "disable";
    if (a2)
      v5 = "enable";
    *(_DWORD *)buf = 136446210;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,shouldDisplayEEDUI,returning %{public}s EED UI", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v7 = "disable";
    if (a2)
      v7 = "enable";
    v10 = 136446210;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,shouldDisplayEEDUI,returning %{public}s EED UI", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLInternalService shouldDisplayEEDUI:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1018AE6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1018AE6F0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v8;
  __int128 v9;
  uint8_t buf[4];
  uint64_t v11;

  if (a2)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDCloakingKeyWithReply,returning error,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      LODWORD(v9) = 138477827;
      *(_QWORD *)((char *)&v9 + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,getEEDCloakingKeyWithReply,returning error,%{private}@", &v9, 12, v9);
LABEL_19:
      v8 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLInternalService getEEDCloakingKeyWithReply:]_block_invoke", "%s\n", v5);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDCloakingKeyWithReply,successfully returned cloaking key", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      LOWORD(v9) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,getEEDCloakingKeyWithReply,successfully returned cloaking key", &v9, 2, v9);
      goto LABEL_19;
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1018AECDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

uint64_t sub_1018AED18(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v8;
  __int128 v9;
  uint8_t buf[4];
  uint64_t v11;

  if (a2)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138477827;
      v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDEmergencyContactNamesWithReply,returning error,%{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      LODWORD(v9) = 138477827;
      *(_QWORD *)((char *)&v9 + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,getEEDEmergencyContactNamesWithReply,returning error,%{private}@", &v9, 12, v9);
LABEL_19:
      v8 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLInternalService getEEDEmergencyContactNamesWithReply:]_block_invoke", "%s\n", v5);
      if (v8 != buf)
        free(v8);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v6 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Spi,getEEDEmergencyContactNamesWithReply,successfully returned emergency contact names", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      LOWORD(v9) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Spi,getEEDEmergencyContactNamesWithReply,successfully returned emergency contact names", &v9, 2, v9);
      goto LABEL_19;
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1018AF3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018AF5D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018AF7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018AFB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018AFF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018B04E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018B0530(uint64_t a1, char a2)
{
  NSObject *v3;
  id v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if ((a2 & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "#Spi, Unable to send configuration to Oscar", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "#Spi, Unable to send configuration to Oscar", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLInternalService configure:replyBlock:]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    v4 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.internalservice.errorDomain"), 0, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  _Block_release(*(const void **)(a1 + 32));
}

void sub_1018B09EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018B0CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018B0E70(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

void sub_1018B12CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  void *v13;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018B1C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

void sub_1018B1CF0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1018B1D1C(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1018B1D48(id a1)
{
  qword_10229FC58 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

void sub_1018B1D78()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101CEB070;
      v1[3] = unk_101CEB080;
      v1[4] = xmmword_101CEB090;
      v1[0] = xmmword_101CEB050;
      v1[1] = unk_101CEB060;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1018B1E4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1018B1E64(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  const char *v14;
  uint8_t *v15;
  _WORD v16[7];
  BOOL v17;
  uint8_t buf[8];
  std::__shared_weak_count *v19;

  v3 = sub_1018CE228((unsigned __int8 *)a1, a2);
  *(_QWORD *)v3 = off_1021D6A80;
  v4 = (uint64_t)(v3 + 256);
  sub_1010E5B8C((uint64_t)(v3 + 256));
  *(_WORD *)(a1 + 344) = 0;
  v17 = 0;
  v5 = sub_10063D030(a1 + 112, "GyroCalibration", (uint64_t)"1475");
  v6 = sub_100127B9C();
  sub_100081C10(v6, buf);
  v7 = sub_1001E4874(*(uint64_t *)buf, "SensorReplayMode", &v17) ^ 1;
  if (v17)
    v8 = v7;
  else
    v8 = 1;
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (sub_100634364(a1 + 112, "GyroCalibration", (const char **)&off_1021D6BF8, 0, v8))
  {
    sub_1018B3B18(v4);
    sub_1018B2170(a1);
    sub_1010E5B48(v4);
  }
  else if (v5)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v12 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Removing outliers from database.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6D18);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Removing outliers from database.", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLGyroCalibrationDatabaseLocal::CLGyroCalibrationDatabaseLocal(id<CLIntersiloUniverse>)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    sub_1018B2830(a1);
  }
  return a1;
}

void sub_1018B2120(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_1010E5BAC(v2);
  *v1 = off_1021D76A8;
  sub_1006322C0(v1 + 14);
  sub_1006153DC(v1);
  _Unwind_Resume(a1);
}

void sub_1018B2170(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  void *__p[2];
  char v8;
  uint8_t buf[8];
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a1 + 288))
  {
    sub_10001E638(a1 + 112);
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v10, (uint64_t)"DELETE FROM ", 12);
    sub_100263F7C(v2, (uint64_t)"GyroCalibration", 15);
    std::stringbuf::str(__p, &v11);
    if (v8 >= 0)
      v3 = (char *)__p;
    else
      v3 = (char *)__p[0];
    sub_1000CDA68(a1 + 112, v3);
  }
  if ((sub_1001B7910() & 0x80000) != 0)
  {
    *(_BYTE *)(a1 + 344) = 1;
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v4 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Attempting to write zero entries to Gyro database.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6D18);
      LOWORD(__p[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "Attempting to write zero entries to Gyro database.", __p, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocal::writeCacheToDatabase()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    *(_BYTE *)(a1 + 344) = 0;
  }
}

void sub_1018B276C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a32)
    operator delete();
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

void sub_1018B2830(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  const char *v23;
  uint8_t *v24;
  uint8_t buf[8];
  uint64_t v26;
  _QWORD v27[8];
  uint8_t v28[8];
  char v29;

  if (*(int *)(a1 + 288) >= 1)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v2 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Reading database into non-empty cache.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6D18);
      *(_WORD *)v28 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "Reading database into non-empty cache.", v28, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocal::cacheAllEntries(CLGyroCalibrationCache &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
  }
  sub_100263E50((uint64_t)buf);
  v3 = sub_100263F7C(&v26, (uint64_t)"SELECT ", 7);
  v4 = sub_100263F7C(v3, (uint64_t)"Temperature", 11);
  v5 = sub_100263F7C(v4, (uint64_t)", ", 2);
  v6 = sub_100263F7C(v5, (uint64_t)"Time", 4);
  v7 = sub_100263F7C(v6, (uint64_t)", ", 2);
  v8 = sub_100263F7C(v7, (uint64_t)"BiasX", 5);
  v9 = sub_100263F7C(v8, (uint64_t)", ", 2);
  v10 = sub_100263F7C(v9, (uint64_t)"BiasY", 5);
  v11 = sub_100263F7C(v10, (uint64_t)", ", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"BiasZ", 5);
  v13 = sub_100263F7C(v12, (uint64_t)" FROM ", 6);
  v14 = sub_100263F7C(v13, (uint64_t)"GyroCalibration", 15);
  v15 = sub_100263F7C(v14, (uint64_t)" WHERE ", 7);
  v16 = sub_100263F7C(v15, (uint64_t)"Temperature", 11);
  v17 = sub_100263F7C(v16, (uint64_t)">=? AND ", 8);
  v18 = sub_100263F7C(v17, (uint64_t)"Temperature", 11);
  v19 = sub_100263F7C(v18, (uint64_t)"<=? ORDER BY ", 13);
  v20 = sub_100263F7C(v19, (uint64_t)"Temperature", 11);
  v21 = sub_100263F7C(v20, (uint64_t)",", 1);
  sub_100263F7C(v21, (uint64_t)"Time", 4);
  std::stringbuf::str(v28, v27);
  if (v29 >= 0)
    v22 = (char *)v28;
  else
    v22 = *(char **)v28;
  sub_1000CDA68(a1 + 112, v22);
}

void sub_1018B2E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018B2EC8(uint64_t a1, float32x2_t *a2, double a3, int32x4_t a4)
{
  float v4;
  NSObject *v7;
  NSObject *v9;
  double v10;
  double v11;
  double v12;
  const char *v13;
  uint8_t *v14;
  double v15;
  double v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  int v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  double v28;
  uint8_t buf[4];
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;

  v4 = *(float *)&a3;
  if (!*(_BYTE *)(a1 + 344))
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v7 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Insert into uncached database.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6D18);
      LOWORD(v21) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "Insert into uncached database.", &v21, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if (fabsf(a2->f32[0]) > 75.0)
    return 0;
  if (fabsf(a2->f32[1]) > 75.0)
    return 0;
  a4.i32[0] = 1117126656;
  if (fabsf(a2[1].f32[0]) > 75.0)
    return 0;
  *(float *)&a3 = v4;
  sub_1010E5BF4(a1 + 256, a2, a3, a4);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6D18);
  v9 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    v10 = a2->f32[0];
    v11 = a2->f32[1];
    v12 = a2[1].f32[0];
    *(_DWORD *)buf = 134349824;
    v30 = v10;
    v31 = 2050;
    v32 = v11;
    v33 = 2050;
    v34 = v12;
    v35 = 2050;
    v36 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLGyroCalibrationDatabaseLocal insert x,%{public}f,y,%{public}f,z,%{public}f,temperature,%{public}f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v15 = a2->f32[0];
    v16 = a2->f32[1];
    v17 = a2[1].f32[0];
    v21 = 134349824;
    v22 = v15;
    v23 = 2050;
    v24 = v16;
    v25 = 2050;
    v26 = v17;
    v27 = 2050;
    v28 = v4;
    LODWORD(v20) = 42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "CLGyroCalibrationDatabaseLocal insert x,%{public}f,y,%{public}f,z,%{public}f,temperature,%{public}f", &v21, v20);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, float)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (*(_BYTE *)(a1 + 345))
    sub_1018B2170(a1);
  sub_1018B3294(a1);
  return 1;
}

uint64_t sub_1018B3294(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  unint64_t v5;
  CFAbsoluteTime Current;

  v4 = 1;
  v5 = 0xFFEFFFFFFFFFFFFFLL;
  Current = CFAbsoluteTimeGetCurrent();
  result = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 216))(a1, &v4);
  if ((_DWORD)result)
  {
    v3 = 0;
    return (*(uint64_t (**)(uint64_t, int *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v3, &v4, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

BOOL sub_1018B333C(uint64_t a1, _DWORD *a2)
{
  if (!*(_BYTE *)(a1 + 344))
    sub_1018B2830(a1);
  return sub_1010E5EF4(a1 + 256, a2);
}

uint64_t sub_1018B3378(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 344))
    *(_BYTE *)(a1 + 344) = 1;
  sub_1010E5B48(a1 + 256);
  return 1;
}

uint64_t sub_1018B33A4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 344))
    sub_1018B2830(a1);
  return sub_1002E6070(a1 + 256);
}

uint64_t sub_1018B33D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 344))
    sub_1018B2170(a1);
  return sub_1006154D4(a1);
}

uint64_t sub_1018B3408(uint64_t a1)
{
  *(_BYTE *)(a1 + 345) = 1;
  if (!*(_BYTE *)(a1 + 344))
    sub_1018B2830(a1);
  return a1;
}

uint64_t sub_1018B3424(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (!*a2)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v3 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Client registered, caching database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6D18);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Client registered, caching database", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocal::registerForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    if (!*(_BYTE *)(a1 + 344))
      sub_1018B2830(a1);
  }
  return 1;
}

uint64_t sub_1018B35D4(uint64_t a1, _DWORD *a2)
{
  NSObject *v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (!*a2)
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v3 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "No more clients, flushing cache to database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6D18);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "No more clients, flushing cache to database", v11, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    if (!*(_BYTE *)(a1 + 344))
    {
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D6D18);
      v4 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Database should be cached", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021D6D18);
        v11[0] = 0;
        LODWORD(v10) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "Database should be cached", v11, v10);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
      sub_1018B2170(a1);
      sub_1010E5B48(a1 + 256);
      *(_BYTE *)(a1 + 344) = 0;
    }
  }
  return 1;
}

uint64_t sub_1018B38B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = a1 + 24;
  *(_QWORD *)(a1 + 16) = v3;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf(v4);
  std::ios::~ios(a1 + 128);
  return a1;
}

uint64_t sub_1018B393C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (!result)
    operator new();
  return result;
}

_QWORD *sub_1018B39C0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;

  v2 = (_QWORD *)a1[2];
  v3 = a1[3] + 12;
  a1[3] = v3;
  if (v3 - *v2 == 4092)
  {
    a1[2] = v2 + 1;
    v3 = v2[1];
    a1[3] = v3;
  }
  v4 = (_QWORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 48);
  if (*(_QWORD *)(*a1 + 56) == v5)
  {
    v7 = 0;
  }
  else
  {
    v6 = v4[10] + v4[9];
    v7 = *(_QWORD *)(v5 + 8 * (v6 / 0x155)) + 12 * (v6 % 0x155);
  }
  if (v3 == v7)
  {
    v8 = (_QWORD *)v4[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v4[2];
        v10 = *v9 == (_QWORD)v4;
        v4 = v9;
      }
      while (!v10);
    }
    *a1 = v9;
    if (v9 != (_QWORD *)a1[1])
    {
      v11 = v9[9];
      v12 = v9[6];
      v13 = (_QWORD *)(v12 + 8 * (v11 / 0x155));
      if (v9[7] == v12)
        v14 = 0;
      else
        v14 = *v13 + 12 * (v11 % 0x155);
      a1[2] = v13;
      a1[3] = v14;
    }
  }
  v15 = a1[4];
  a1[4] = 0;
  if (v15)
    operator delete();
  return a1;
}

void sub_1018B3B18(uint64_t a1)
{
  double v2;
  int32x4_t v3;
  _DWORD *v4;
  _DWORD *v5;
  float32x2_t *v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_100952314((void **)&v8);
  v4 = v8;
  v5 = v9;
  if (v8 != v9)
  {
    do
    {
      v7 = *v4;
      v6 = (float32x2_t *)(v4 + 1);
      LODWORD(v2) = v7;
      sub_1010E5BF4(a1, v6, v2, v3);
      v4 = (_DWORD *)&v6[1] + 1;
    }
    while (v4 != v5);
    v4 = v8;
  }
  if (v4)
  {
    v9 = v4;
    operator delete(v4);
  }
}

void sub_1018B3B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018B3BB0(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, char a5)
{
  uint64_t v8;
  double v9;
  _DWORD v17[8];
  float32x2_t v18;
  float v19;
  float32x2_t v20;
  float v21;

  if ((a5 & 1) == 0)
    operator new();
  v8 = a1 + 256;
  if (!sub_1010E5EF4(a1 + 256, v17))
    return 0;
  *a3 = v18;
  a3[1].f32[0] = v19;
  HIDWORD(v9) = v18.i32[1];
  __asm { FMOV            V2.2S, #25.0 }
  *a2 = vmla_f32(v20, _D2, v18);
  *(float *)&v9 = v21 + (float)(v19 * 25.0);
  a2[1].i32[0] = LODWORD(v9);
  return sub_1010E72F4(v8, a4, v9);
}

void sub_1018B3CE4()
{
  operator delete();
}

uint64_t sub_1018B3D1C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_1010E5BAC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1018B3D58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;

  v1 = a1 + 256;
  sub_1010E6C10(a1 + 256, &v13);
  sub_1010E6C90(v1, v11);
  v2 = 0x80000000;
  while (v13 != v11[0] || v14 != v11[1] || v13 != v14 && v15 != v11[3])
  {
    v3 = (float *)sub_1018B393C((uint64_t)&v13);
    v4 = modff(fabsf(v3[1] * 256.0), &v17);
    v5 = modff(fabsf(v3[2] * 256.0), &v17);
    v6 = modff(fabsf(v3[3] * 256.0), &v17);
    if (v4 >= 0.001 && v4 <= 0.999 || v5 >= 0.001 && v5 <= 0.999 || v6 >= 0.001 && v6 <= 0.999)
    {
      v7 = (int)*(float *)sub_1018B393C((uint64_t)&v13);
      if ((int)v2 <= v7)
        v2 = v7;
      else
        v2 = v2;
    }
    sub_1018B39C0(&v13);
  }
  v8 = v12;
  v12 = 0;
  if (v8)
    operator delete();
  v9 = v16;
  v16 = 0;
  if (v9)
    operator delete();
  return v2;
}

void sub_1018B3EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19)
    operator delete();
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018B3F48(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1018B3FC4;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102310A00 != -1)
    dispatch_once(&qword_102310A00, block);
  return qword_1023109F8;
}

void sub_1018B3FC4()
{
  uint64_t v0;
  char v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v0 = sub_100127B9C();
  sub_100081C10(v0, &v9);
  HIBYTE(v8) = 0;
  v1 = sub_1001E4874(v9, "EnableGyroLinearCalibration", (BOOL *)&v8 + 7);
  BYTE6(v8) = 0;
  sub_100197040();
  v2 = sub_10075D1EC();
  if ((sub_1001E4874(v9, "EnableGyroNonlinearCalibration", (BOOL *)&v8 + 6) & 1) == 0)
    BYTE6(v8) = v2 ^ 1;
  BYTE5(v8) = 0;
  if ((sub_1001E4874(v9, "EnableGyroMultiRunCalibration", (BOOL *)&v8 + 5) & 1) == 0)
    BYTE5(v8) = v2 ^ 1;
  v3 = sub_1001B7910();
  v4 = v3;
  if ((v1 & 1) == 0)
    HIBYTE(v8) = BYTE2(v3) & 1 & ~(_BYTE)v2;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D6D18);
  v5 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241472;
    v22 = v2;
    v23 = 1026;
    v24 = BYTE6(v8);
    v25 = 1026;
    v26 = HIBYTE(v8);
    v27 = 1026;
    v28 = BYTE5(v8);
    v29 = 1026;
    v30 = (v4 >> 17) & 1;
    v31 = 1026;
    v32 = (v4 >> 14) & 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Creating GyroCalibrationDatabaseLocal with isNonUI,%{public}u, enableGyroNonlinearCalibration,%{public}u, enableGyroLinearCalibration,%{public}u,enableGyroMultiRunCalibration,%{public}u, gyroNonlinearity,%{public}u, gyroMultiRunCalibration,%{public}u", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D6D18);
    v10[0] = 67241472;
    v10[1] = v2;
    v11 = 1026;
    v12 = BYTE6(v8);
    v13 = 1026;
    v14 = HIBYTE(v8);
    v15 = 1026;
    v16 = BYTE5(v8);
    v17 = 1026;
    v18 = (v4 >> 17) & 1;
    v19 = 1026;
    v20 = (v4 >> 14) & 1;
    LODWORD(v8) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Creating GyroCalibrationDatabaseLocal with isNonUI,%{public}u, enableGyroNonlinearCalibration,%{public}u, enableGyroLinearCalibration,%{public}u,enableGyroMultiRunCalibration,%{public}u, gyroNonlinearity,%{public}u, gyroMultiRunCalibration,%{public}u", v10, v8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "static CLGyroCalibrationDatabase *CLGyroCalibrationDatabase::createInUniverse(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  if ((v4 & 0x20000) != 0 && BYTE6(v8))
    operator new();
  if (HIBYTE(v8))
    operator new();
  if ((v4 & 0x4000) != 0)
  {
    if (BYTE5(v8))
      operator new();
  }
  operator new();
}

void sub_1018B4398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018B4424(_QWORD *a1)
{
  sub_1018B448C(a1);
  operator delete();
}

uint64_t sub_1018B4448()
{
  return 0;
}

uint64_t sub_1018B4450()
{
  return 0;
}

uint64_t sub_1018B4458()
{
  return 0;
}

void sub_1018B4460(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_1018B448C(_QWORD *a1)
{
  *a1 = off_1021D6A80;
  sub_1010E5BAC((uint64_t)(a1 + 32));
  *a1 = off_1021D76A8;
  sub_1006322C0(a1 + 14);
  return sub_1006153DC(a1);
}

void sub_1018B4C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_1018B4C3C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  double result;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v2, "getStartLocation");
  }
  else
  {
    result = 0.0;
    *(_OWORD *)((char *)a2 + 140) = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

void sub_1018B544C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  void *v46;

  if (a44 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  std::__shared_weak_count::~__shared_weak_count(v44);
  operator delete(v46);
  sub_100985540((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1018B5634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_1018B6134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(__p);
  a24 = &a19;
  sub_100259608((void ***)&a24);
  _Unwind_Resume(a1);
}

void sub_1018B687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018B6F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_1015EE304((PB::Base *)&a28);
  _Unwind_Resume(a1);
}

void sub_1018B7948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1018B7A68(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018B7A94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D6D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018B7AA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D6D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018B7AD4(uint64_t a1)
{
  return sub_1015E2ECC(a1 + 24);
}

uint64_t sub_1018B7AE0()
{
  sub_1015A2E04(qword_1023100F8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023100F8, (void *)&_mh_execute_header);
}

void sub_1018B7CAC()
{
  operator delete();
}

id sub_1018B7CD0(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onFaceCovered:", a1);
}

void sub_1018B7F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_1018B8358(id a1)
{
  qword_10229FE88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

_QWORD *sub_1018B8384(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021D6E00;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018B84B0;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1018B84C4;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1018B8488(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018B84B0(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018B84C4(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018B84E0(uint64_t a1)
{
  sub_1018B8798(a1);
  operator delete();
}

id sub_1018B8504(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  int v39;

  if (a4 >= 0x18)
    v8 = 24;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D6E28);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v33 = (unint64_t)"N23CLWaterSubmersion_Types11FaceCoveredE" & 0x7FFFFFFFFFFFFFFFLL;
      v34 = 2048;
      v35 = 24;
      v36 = 2048;
      v37 = a4;
      v38 = 1024;
      v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D6E28);
      v24 = 136315906;
      v25 = (unint64_t)"N23CLWaterSubmersion_Types11FaceCoveredE" & 0x7FFFFFFFFFFFFFFFLL;
      v26 = 2048;
      v27 = 24;
      v28 = 2048;
      v29 = a4;
      v30 = 1024;
      v31 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v24, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLWaterSubmersion_Types::FaceCovered>::dispatchData(int, const void *, size_t) [T = CLWaterSubmersion_Types::FaceCovered]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1018B87EC;
  v18[3] = &unk_102179570;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v23;
  v21 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_1018B8798(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D6E00;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1018B87EC(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 72));
  return result;
}

void sub_1018B8830(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1018B885C()
{
  sub_1015A2E04(qword_102310110, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102310110, (void *)&_mh_execute_header);
}

id sub_1018B8C10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onElevationmetryNotification:data:", a2, a3);
}

void sub_1018B8D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018B8E14(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_1018B90A8(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setIsCyclingWorkout:", a2);
}

id sub_1018B938C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onFitnessMachineNotification:data:", a2, a3);
}

void sub_1018B9608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018B9750(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018B9AB8()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 47) < 0)
    operator delete(*v1);
  operator delete[]();
}

id sub_1018B9B3C(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "onAccessoryDeviceMotionData:buffersize:", a1, a2);
}

id sub_1018B9B50(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "onAccessoryDeviceMotionConfig:buffersize:", a1, a2);
}

void sub_1018BA1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018BA3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018BA470(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018BA49C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_1021D6EB8;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_1018BA5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1018BA624(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018BA638(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018BA654(uint64_t a1)
{
  sub_1018BA78C(a1);
  operator delete();
}

__n128 sub_1018BA678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD v18[8];
  unsigned int v19;

  v3 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 144 * *(unsigned int *)(a1 + 64));
  v4 = *(_OWORD *)(a3 + 64);
  v6 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 32);
  v3[3] = *(_OWORD *)(a3 + 48);
  v3[4] = v4;
  v3[1] = v6;
  v3[2] = v5;
  v7 = *(_OWORD *)(a3 + 128);
  v9 = *(_OWORD *)(a3 + 80);
  v8 = *(_OWORD *)(a3 + 96);
  v3[7] = *(_OWORD *)(a3 + 112);
  v3[8] = v7;
  v3[5] = v9;
  v3[6] = v8;
  result = *(__n128 *)a3;
  *v3 = *(_OWORD *)a3;
  v11 = *(_DWORD *)(a1 + 68);
  v12 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v12;
  if (v12 >= v11)
  {
    v14 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(void **)(a1 + 16);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1018BA7FC;
    v18[3] = &unk_1021579E0;
    v18[4] = v15;
    v18[5] = v14;
    v19 = v12;
    v18[6] = v16;
    v18[7] = v13;
    objc_msgSend(v17, "async:", v18);
    operator new[]();
  }
  return result;
}

uint64_t sub_1018BA784(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1018BA78C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D6EB8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_1018BA7FC(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

uint64_t sub_1018BA85C(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1018BA89C(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018BA8B0(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018BA8CC(uint64_t a1)
{
  sub_1018BAAA8(a1);
  operator delete();
}

__n128 sub_1018BA8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v16[8];
  unsigned int v17;

  v3 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 96 * *(unsigned int *)(a1 + 64));
  v4 = *(_OWORD *)(a3 + 80);
  v6 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v3[4] = *(_OWORD *)(a3 + 64);
  v3[5] = v4;
  v3[2] = v6;
  v3[3] = v5;
  result = *(__n128 *)a3;
  v8 = *(_OWORD *)(a3 + 16);
  *v3 = *(_OWORD *)a3;
  v3[1] = v8;
  v9 = *(_DWORD *)(a1 + 68);
  v10 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v10;
  if (v10 >= v9)
  {
    v12 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(a1 + 48);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(void **)(a1 + 16);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_1018BAB70;
    v16[3] = &unk_1021579E0;
    v16[4] = v13;
    v16[5] = v12;
    v17 = v10;
    v16[6] = v14;
    v16[7] = v11;
    objc_msgSend(v15, "async:", v16);
    operator new[]();
  }
  return result;
}

void sub_1018BAA48()
{
  uint64_t v0;
  uint64_t v1;

  if (*(char *)(v0 + v1 + 47) < 0)
    operator delete(*(void **)(v0 + v1 + 24));
  for (; v1; v1 -= 96)
    sub_1018BA85C(v0 - 80 + v1);
  operator delete[]();
}

uint64_t sub_1018BAAA0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1018BAAA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1021D6EF0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 96 * v3;
      do
      {
        v5 = v2 + v4;
        if (*(char *)(v2 + v4 - 41) < 0)
          operator delete(*(void **)(v5 - 64));
        if (*(char *)(v5 - 65) < 0)
          operator delete(*(void **)(v2 + v4 - 88));
        v4 -= 96;
      }
      while (v4);
    }
    operator delete[]();
  }
  return sub_100015E88(a1);
}

uint64_t sub_1018BAB70(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 - 8);
    if (v4)
    {
      v5 = 96 * v4;
      do
      {
        v6 = v3 + v5;
        if (*(char *)(v3 + v5 - 41) < 0)
          operator delete(*(void **)(v6 - 64));
        if (*(char *)(v6 - 65) < 0)
          operator delete(*(void **)(v3 + v5 - 88));
        v5 -= 96;
      }
      while (v5);
    }
    operator delete[]();
  }
  return result;
}

uint64_t sub_1018BAC24(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];
  void *__p[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint8_t buf[8];
  uint8_t v28[48];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v3 = sub_1018CE228((unsigned __int8 *)a1, a2);
  *(_QWORD *)v3 = off_1021D6F40;
  *(_DWORD *)(v3 + 254) = 0;
  *(_QWORD *)(a1 + 264) = objc_msgSend(*((id *)v3 + 5), "newTimer");
  *(_QWORD *)(a1 + 272) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  v4 = operator new(0x20uLL);
  v4[2] = 0;
  v4[3] = &off_10217E0C8;
  *v4 = off_1021D72B0;
  v4[1] = 0;
  *(_QWORD *)(a1 + 312) = v4 + 3;
  *(_QWORD *)(a1 + 320) = v4;
  *(_QWORD *)v28 = 0x40CC200000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 328), "GyroNonlinearTargetExpirationAge", v28, 0);
  *(_QWORD *)v28 = 0x411FA40000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 352), "GyroNonlinearMaxExpirationAge", v28, 0);
  *(_QWORD *)v28 = 0x410FA40000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 376), "GyroNonlinearFactoryDataAge", v28, 0);
  *(_QWORD *)v28 = 0x4082C00000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 400), "GyroNonlinearFlushTimeout", v28, 0);
  *(_QWORD *)v28 = 0x405E000000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 424), "GyroNonlinearFirstPruneTimeout", v28, 0);
  *(_QWORD *)v28 = 0x40AC200000000000;
  sub_1018BEA14((unsigned __int8 *)(a1 + 448), "GyroNonlinearPruneTimeout", v28, 0);
  v28[0] = 0;
  sub_1018BF25C((unsigned __int8 *)(a1 + 472), "LogGyroNonFactoryCalOnStartup", v28, 0);
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 520) = 0x8000007F7FFFFFLL;
  *(_QWORD *)(a1 + 528) = 0;
  sub_100E81598((_QWORD *)(a1 + 536), 0, 0);
  sub_100197040();
  *(_BYTE *)(a1 + 255) = sub_100762208();
  v5 = sub_100127B9C();
  sub_100081C10(v5, v28);
  sub_1001E4874(*(uint64_t *)v28, "EnableGyroFitRMSError", (BOOL *)(a1 + 255));
  v6 = *(std::__shared_weak_count **)&v28[8];
  if (*(_QWORD *)&v28[8])
  {
    v7 = (unint64_t *)(*(_QWORD *)&v28[8] + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1018BB950;
  v22[3] = &unk_10212ECA0;
  v22[4] = a1;
  objc_msgSend(*(id *)(a1 + 264), "setHandler:", v22);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1018BC708;
  v21[3] = &unk_10212ECA0;
  v21[4] = a1;
  objc_msgSend(*(id *)(a1 + 272), "setHandler:", v21);
  sub_1018895C8(a1 + 112);
  if (sub_100635B3C(a1 + 112, "GyroNonlinearCalibration"))
  {
    if (!sub_100635B3C(a1 + 112, "GyroPointCalibration"))
    {
      sub_10001E638(a1 + 112);
      sub_100263E50((uint64_t)v28);
      v9 = sub_100263F7C(&v28[16], (uint64_t)"ALTER TABLE GyroNonlinearCalibration", 36);
      v10 = sub_100263F7C(v9, (uint64_t)" RENAME TO ", 11);
      v11 = sub_100263F7C(v10, (uint64_t)"GyroPointCalibration", 20);
      sub_100263F7C(v11, (uint64_t)";", 1);
      std::stringbuf::str(__p, &v28[24]);
      if ((SBYTE7(v24) & 0x80u) == 0)
        v12 = (char *)__p;
      else
        v12 = (char *)__p[0];
      sub_1000CDA68(a1 + 112, v12);
    }
    sub_10063E3BC(a1 + 112, "GyroNonlinearCalibration");
  }
  *(_OWORD *)__p = *(_OWORD *)off_1021D7090;
  v24 = *(_OWORD *)off_1021D70A0;
  v25 = *(_OWORD *)off_1021D70B0;
  v26 = 0;
  if (!sub_100634364(a1 + 112, "GyroPointCalibration", (const char **)&off_1021D70E0, 0, 1))
  {
    *(_QWORD *)(a1 + 536) = sub_10063E674(a1 + 112, "GyroPointCalibration", (const char **)__p, 0);
    *(_QWORD *)(a1 + 544) = v15;
    if (sub_100635B3C(a1 + 112, "GyroPointCalibration"))
    {
      memset(v28, 0, 24);
      sub_1018BD6C4(a1);
    }
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7260);
    v17 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v28 = 68289539;
      *(_DWORD *)&v28[4] = 0;
      *(_WORD *)&v28[8] = 2082;
      *(_QWORD *)&v28[10] = "";
      *(_WORD *)&v28[18] = 2082;
      *(_QWORD *)&v28[20] = "assert";
      *(_WORD *)&v28[28] = 2081;
      *(_QWORD *)&v28[30] = "fDb.tableExists(\"GyroPointCalibration\")";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"db doesn't exist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v28, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D7260);
    }
    v18 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)v28 = 68289539;
      *(_DWORD *)&v28[4] = 0;
      *(_WORD *)&v28[8] = 2082;
      *(_QWORD *)&v28[10] = "";
      *(_WORD *)&v28[18] = 2082;
      *(_QWORD *)&v28[20] = "assert";
      *(_WORD *)&v28[28] = 2081;
      *(_QWORD *)&v28[30] = "fDb.tableExists(\"GyroPointCalibration\")";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "db doesn't exist", "{\"msg%{public}.0s\":\"db doesn't exist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v28, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D7260);
    }
    v19 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)v28 = 68289539;
      *(_DWORD *)&v28[4] = 0;
      *(_WORD *)&v28[8] = 2082;
      *(_QWORD *)&v28[10] = "";
      *(_WORD *)&v28[18] = 2082;
      *(_QWORD *)&v28[20] = "assert";
      *(_WORD *)&v28[28] = 2081;
      *(_QWORD *)&v28[30] = "fDb.tableExists(\"GyroPointCalibration\")";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"db doesn't exist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v28, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalShared.mm", 274, "cacheFactoryIfMissing");
    __break(1u);
  }
  *(_QWORD *)(a1 + 536) = sub_10063E674(a1 + 112, "GyroPointCalibration", (const char **)__p, 0);
  *(_QWORD *)(a1 + 544) = v13;
  sub_1018BCEE4(a1);
  *(_BYTE *)(a1 + 254) = 1;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  memset(v28, 0, sizeof(v28));
  v28[0] = 1;
  *(_DWORD *)buf = 1;
  (*(void (**)(uint64_t, uint8_t *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v28, 1, 0xFFFFFFFFLL, 0);
  *(_BYTE *)(a1 + 257) = 1;
  v14 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 480) = v14;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1018BD14C;
  v20[3] = &unk_10212ECA0;
  v20[4] = a1;
  objc_msgSend(v14, "setHandler:", v20);
  objc_msgSend(*(id *)(a1 + 480), "setNextFireDelay:", 1800.0);
  objc_msgSend(*(id *)(a1 + 272), "setNextFireDelay:", *(double *)(a1 + 432));
  return a1;
}

void sub_1018BB7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  _QWORD *v45;
  void **v46;
  void **v47;
  uint64_t v48;
  void *v50;
  uint64_t v51;
  void *v52;

  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v50 = *v47;
  if (*v47)
  {
    v45[63] = v50;
    operator delete(v50);
  }
  v51 = v45[61];
  v45[61] = 0;
  if (v51)
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  sub_100261F44((uint64_t)(v45 + 39));
  v52 = *v46;
  if (*v46)
  {
    v45[37] = v52;
    operator delete(v52);
  }
  *v45 = off_1021D76A8;
  sub_1006322C0(v45 + 14);
  sub_1006153DC(v45);
  _Unwind_Resume(a1);
}

uint64_t sub_1018BB950(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  sub_1018BB988(v1);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 304))(v1);
  return sub_1018BC66C(v1);
}

void sub_1018BB988(uint64_t a1)
{
  double Current;
  double v3;
  unint64_t v4;
  float *v5;
  float *v6;
  float v7;
  _QWORD *v8;
  uint64_t v9;
  float *v10;
  float *v11;
  float v12;
  std::string::size_type v13;
  uint64_t v14;
  double v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t i;
  uint64_t v30;
  sqlite3_stmt *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  _OWORD *v35;
  NSObject *v36;
  std::string *v37;
  void *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  __int128 v49;
  char *v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  NSObject *v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  std::string *v61;
  uint64_t v62;
  const char *v63;
  std::string *v64;
  uint64_t v65;
  uint64_t v66;
  void *__p;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  std::string buf;
  std::string v93;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 528);
  v4 = vcvtps_u32_f32((float)(*(float *)(a1 + 524) - *(float *)(a1 + 520)) * 0.5);
  buf.__r_.__value_.__r.__words[0] = 0;
  sub_100274CE0(&__p, v4, &buf);
  v5 = *(float **)(a1 + 288);
  v6 = *(float **)(a1 + 296);
  if (v5 != v6)
  {
    v7 = *(float *)(a1 + 520);
    v8 = __p;
    do
    {
      v9 = (int)(float)((float)(*v5 - v7) * 0.5);
      if ((v9 & 0x80000000) == 0 && v4 > v9)
        ++v8[v9];
      v5 += 8;
    }
    while (v5 != v6);
  }
  buf.__r_.__value_.__r.__words[0] = 0;
  sub_100274CE0(&v93, v4, &buf);
  v10 = *(float **)(a1 + 288);
  v11 = *(float **)(a1 + 296);
  if (v10 != v11)
  {
    v12 = *(float *)(a1 + 520);
    v13 = v93.__r_.__value_.__r.__words[0];
    do
    {
      v14 = (int)(float)((float)(*v10 - v12) * 0.5);
      if ((v14 & 0x80000000) == 0 && v4 > v14)
        ++*(_QWORD *)(v13 + 8 * v14);
      v10 += 8;
    }
    while (v10 != v11);
  }
  v15 = vabdd_f64(Current, v3);
  if (*(double *)(a1 + 456) < v15)
    v15 = *(double *)(a1 + 456);
  v17 = *(float **)(a1 + 496);
  v16 = *(float **)(a1 + 504);
  if (v17 == v16)
    goto LABEL_33;
  v18 = v15 / *(double *)(a1 + 336) * 30.0;
  v19 = *(float **)(a1 + 504);
  while (1)
  {
    v20 = (int)(float)((float)(*v17 - *(float *)(a1 + 520)) * 0.5);
    if ((v20 & 0x80000000) != 0)
      break;
    if (v4 <= v20)
      break;
    if (*((_QWORD *)__p + v20) >= 6uLL)
    {
      v21 = *(_QWORD *)(v93.__r_.__value_.__r.__words[0] + 8 * v20);
      if ((float)((float)(v18 / (float)v21) * 4295000000.0) < (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 8))(*(_QWORD *)(a1 + 312)))
        break;
    }
    v17 += 8;
    if (v17 == v16)
      goto LABEL_34;
  }
  if (v17 != v16)
  {
    v22 = v17 + 8;
    if (v17 + 8 != v16)
    {
      v19 = v17;
      do
      {
        v23 = (int)(float)((float)(*v22 - *(float *)(a1 + 520)) * 0.5);
        if ((v23 & 0x80000000) == 0 && v4 > v23)
        {
          if (*((_QWORD *)__p + v23) < 6uLL
            || (v24 = *(_QWORD *)(v93.__r_.__value_.__r.__words[0] + 8 * v23),
                (float)((float)(v18 / (float)v24) * 4295000000.0) >= (float)(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 8))(*(_QWORD *)(a1 + 312))))
          {
            v25 = *((_OWORD *)v22 + 1);
            *(_OWORD *)v19 = *(_OWORD *)v22;
            *((_OWORD *)v19 + 1) = v25;
            v19 += 8;
          }
        }
        v22 += 8;
      }
      while (v22 != v16);
      goto LABEL_34;
    }
LABEL_33:
    v19 = v17;
  }
LABEL_34:
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7260);
  v26 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    v27 = *(_QWORD *)(a1 + 496);
    v28 = (*(_QWORD *)(a1 + 504) - v27) >> 5;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v28;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = ((uint64_t)v19 - v27) >> 5;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Point gyro pending samples thinned.  %zu samples reduced to %zu.", (uint8_t *)&buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7260);
    v58 = *(_QWORD *)(a1 + 496);
    v59 = (*(_QWORD *)(a1 + 504) - v58) >> 5;
    v88 = 134218240;
    v89 = v59;
    v90 = 2048;
    v91 = ((uint64_t)v19 - v58) >> 5;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Point gyro pending samples thinned.  %zu samples reduced to %zu.", (size_t)&v88, 22);
    v61 = (std::string *)v60;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::thinPendingSamples(CFTimeInterval)", "%s\n", v60);
    if (v61 != &buf)
      free(v61);
  }
  (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)a1 + 320))(a1, CFSTR("Thinned"), (uint64_t)(*(_QWORD *)(a1 + 504) - (_QWORD)v19) >> 5);
  (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)a1 + 320))(a1, CFSTR("Inserted"), ((uint64_t)v19 - *(_QWORD *)(a1 + 496)) >> 5);
  if (v19 != *(float **)(a1 + 504))
    *(_QWORD *)(a1 + 504) = v19;
  if (v93.__r_.__value_.__r.__words[0])
  {
    v93.__r_.__value_.__l.__size_ = v93.__r_.__value_.__r.__words[0];
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (__p)
  {
    *(_QWORD *)&v68 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)(a1 + 496) != *(_QWORD *)(a1 + 504))
  {
    *(double *)(a1 + 528) = Current;
    v85 = 0u;
    v86 = 0u;
    v84 = 0u;
    v87 = 0;
    v83 = 0u;
    v82 = 0u;
    v81 = 0u;
    v80 = 0u;
    v79 = 0u;
    v78 = 0u;
    v77 = 0u;
    v76 = 0u;
    v75 = 0u;
    v74 = 0u;
    v73 = 0u;
    v72 = 0u;
    v71 = 0u;
    v70 = 0u;
    v69 = 0u;
    v68 = 0u;
    __p = *(void **)&Current;
    LODWORD(buf.__r_.__value_.__l.__data_) = 2;
    (*(void (**)(uint64_t, std::string *, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &buf, &__p, 1, 0xFFFFFFFFLL, 0);
    sub_10001E638(a1 + 112);
    sub_100087AF4((_QWORD *)(a1 + 536), &v66);
    v30 = *(_QWORD *)(a1 + 496);
    for (i = *(_QWORD *)(a1 + 504); v30 != i; v30 += 32)
    {
      if (sub_1018BE250(v66, 1, *(double *)(v30 + 16), *(float *)v30, *(float *)(v30 + 4), *(float *)(v30 + 8), *(float *)(v30 + 12)))
      {
        v31 = (sqlite3_stmt *)sub_100026CC8(v66);
        sub_10023C9B0(a1 + 112, v31);
        *(_QWORD *)(v30 + 24) = sub_10063E99C(a1 + 112);
        v32 = *(_OWORD **)(a1 + 296);
        v33 = *(_QWORD *)(a1 + 304);
        if ((unint64_t)v32 >= v33)
        {
          v42 = *(_QWORD *)(a1 + 288);
          v43 = ((uint64_t)v32 - v42) >> 5;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 59)
            sub_100259694();
          v45 = v33 - v42;
          if (v45 >> 4 > v44)
            v44 = v45 >> 4;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0)
            v46 = 0x7FFFFFFFFFFFFFFLL;
          else
            v46 = v44;
          if (v46)
            v46 = (unint64_t)sub_1018BFA78(v46);
          else
            v47 = 0;
          v48 = (_OWORD *)(v46 + 32 * v43);
          v49 = *(_OWORD *)(v30 + 16);
          *v48 = *(_OWORD *)v30;
          v48[1] = v49;
          v51 = *(char **)(a1 + 288);
          v50 = *(char **)(a1 + 296);
          v52 = v48;
          if (v50 != v51)
          {
            do
            {
              v53 = *((_OWORD *)v50 - 1);
              *(v52 - 2) = *((_OWORD *)v50 - 2);
              *(v52 - 1) = v53;
              v52 -= 2;
              v50 -= 32;
            }
            while (v50 != v51);
            v50 = *(char **)(a1 + 288);
          }
          v35 = v48 + 2;
          *(_QWORD *)(a1 + 288) = v52;
          *(_QWORD *)(a1 + 296) = v48 + 2;
          *(_QWORD *)(a1 + 304) = v46 + 32 * v47;
          if (v50)
            operator delete(v50);
        }
        else
        {
          v34 = *(_OWORD *)(v30 + 16);
          *v32 = *(_OWORD *)v30;
          v32[1] = v34;
          v35 = v32 + 2;
        }
        *(_QWORD *)(a1 + 296) = v35;
      }
      else
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021D7260);
        v36 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
        {
          sub_100640928(a1 + 112, &buf);
          v37 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &buf
              : (std::string *)buf.__r_.__value_.__r.__words[0];
          LODWORD(v93.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "flushPendingError: %{public}s", (uint8_t *)&v93, 0xCu);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_1021D7260);
          v38 = off_10229FD58;
          sub_100640928(a1 + 112, &v93);
          v39 = &v93;
          if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v39 = (std::string *)v93.__r_.__value_.__r.__words[0];
          v88 = 136446210;
          v89 = (uint64_t)v39;
          LODWORD(v65) = 12;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v38, 17, "flushPendingError: %{public}s", &v88, v65);
          v41 = v40;
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v93.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::flushPendingSamples()", "%s\n", (const char *)v41);
          if (v41 != &buf)
            free(v41);
        }
      }
    }
    sub_10001E99C(a1 + 112);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7260);
    v54 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
    {
      v55 = (uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 5;
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Point gyro database flushed, %zu samples added.", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D7260);
      v62 = (uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 5;
      LODWORD(v93.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = v62;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Point gyro database flushed, %zu samples added.", (size_t)&v93);
      v64 = (std::string *)v63;
      sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::flushPendingSamples()", "%s\n", v63);
      if (v64 != &buf)
        free(v64);
    }
    *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
    sub_1018BD240((char **)(a1 + 496));
    objc_msgSend(*(id *)(a1 + 272), "nextFireDelay");
    if (v56 == 1.79769313e308)
      objc_msgSend(*(id *)(a1 + 272), "setNextFireDelay:", *(double *)(a1 + 456));
    v57 = v66;
    v66 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  }
}

void sub_1018BC5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018BC66C(uint64_t a1)
{
  uint64_t result;
  int v3;
  _BYTE __dst[320];
  _BYTE __src[320];

  result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 216))(a1, __src);
  if ((_DWORD)result)
  {
    memcpy(__dst, __src, sizeof(__dst));
    v3 = 0;
    return (*(uint64_t (**)(uint64_t, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v3, __dst, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_1018BC708(uint64_t a1)
{
  sub_1018BC710(*(_QWORD *)(a1 + 32));
}

void sub_1018BC710(uint64_t a1)
{
  double Current;
  double *v3;
  double *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  const __CFString *v17;
  unint64_t v18;
  double v19;
  const __CFString *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  float *v25;
  float *v26;
  float *v27;
  float v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float v33;
  float v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  void *v50;
  _BYTE *v51;
  _BYTE __p[12];
  __int16 v53;
  uint64_t v54;
  char v55;
  _BYTE buf[64];

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double **)(a1 + 288);
  v4 = *(double **)(a1 + 296);
  v5 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 5);
  *(double *)buf = Current;
  if (v4 == v3)
    v6 = 0;
  else
    v6 = v5;
  sub_1018BFAAC(v3, v4, (double *)buf, v6, 1);
  v7 = vcvtps_u32_f32((float)(*(float *)(a1 + 524) - *(float *)(a1 + 520)) * 0.5);
  *(_QWORD *)buf = 0;
  sub_100274CE0(&v50, v7, buf);
  v9 = *(_QWORD *)(a1 + 288);
  v10 = *(_QWORD *)(a1 + 296);
  if (v9 != v10)
  {
LABEL_5:
    v11 = *(float *)(a1 + 520);
    v12 = v50;
    v13 = (v51 - (_BYTE *)v50) >> 3;
    while (1)
    {
      v14 = (int)(float)((float)(*(float *)v9 - v11) * 0.5);
      if ((v14 & 0x80000000) != 0 || v13 <= v14)
        goto LABEL_18;
      v15 = vabdd_f64(Current, *(double *)(v9 + 16));
      if (v15 > *(double *)(a1 + 360))
        break;
      v16 = v12[v14];
      if (v16 > 0x50)
      {
        v17 = CFSTR("Overpopulated");
        goto LABEL_17;
      }
      if (v16 >= 6 && v15 > *(double *)(a1 + 336))
      {
        v17 = CFSTR("NormalAgeOut");
        goto LABEL_17;
      }
      v12[v14] = v16 + 1;
      v9 += 32;
      if (v9 == v10)
      {
        v9 = v10;
        goto LABEL_29;
      }
    }
    v17 = CFSTR("MaxAgeOut");
LABEL_17:
    (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)a1 + 320))(a1, v17, 1);
LABEL_18:
    v10 -= 32;
    if (v9 == v10)
      goto LABEL_29;
    do
    {
      v18 = (int)(float)((float)(*(float *)v10 - *(float *)(a1 + 520)) * 0.5);
      if ((v18 & 0x80000000) == 0 && v18 < (v51 - (_BYTE *)v50) >> 3)
      {
        v19 = vabdd_f64(Current, *(double *)(v10 + 16));
        v20 = CFSTR("MaxAgeOut");
        if (v19 <= *(double *)(a1 + 360))
        {
          v21 = *((_QWORD *)v50 + v18);
          v20 = CFSTR("Overpopulated");
          if (v21 <= 0x50)
          {
            if (v21 < 6 || (v20 = CFSTR("NormalAgeOut"), v19 <= *(double *)(a1 + 336)))
            {
              *((_QWORD *)v50 + v18) = v21 + 1;
              v22 = *(_OWORD *)(v9 + 16);
              *(_OWORD *)buf = *(_OWORD *)v9;
              *(_OWORD *)&buf[16] = v22;
              v23 = *(_OWORD *)(v10 + 16);
              *(_OWORD *)v9 = *(_OWORD *)v10;
              *(_OWORD *)(v9 + 16) = v23;
              v9 += 32;
              v8.n128_u64[1] = *(_QWORD *)&buf[8];
              v24 = *(_OWORD *)&buf[16];
              *(_OWORD *)v10 = *(_OWORD *)buf;
              *(_OWORD *)(v10 + 16) = v24;
              if (v10 == v9)
                break;
              goto LABEL_5;
            }
          }
        }
        (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)a1 + 320))(a1, v20, 1);
      }
      v10 -= 32;
    }
    while (v10 != v9);
  }
LABEL_29:
  v26 = *(float **)(a1 + 288);
  v25 = *(float **)(a1 + 296);
  if (v26 == v25)
  {
    v8.n128_u64[0] = 0;
  }
  else
  {
    v27 = v26 + 8;
    if (v26 + 8 == v25)
    {
      v29 = *(float **)(a1 + 288);
      v27 = v29;
    }
    else
    {
      v28 = v26[8];
      if (v28 >= *v26)
        v29 = *(float **)(a1 + 288);
      else
        v29 = v26 + 8;
      if (v28 < *v26)
        v27 = *(float **)(a1 + 288);
      v30 = v26 + 16;
      if (v26 + 16 != v25)
      {
        if (v28 >= *v26)
          v28 = *v26;
        while (1)
        {
          v31 = v30;
          v32 = v30 + 8;
          if (v32 == v25)
            break;
          v33 = v31[8];
          v34 = *v31;
          if (v33 >= *v31)
          {
            v35 = v26 + 24;
            if (v34 < v28)
            {
              v28 = *v31;
              v29 = v31;
            }
            if (v33 >= *v27)
              v27 = v35;
          }
          else
          {
            v28 = *v29;
            if (v33 < *v29)
            {
              v28 = v31[8];
              v29 = v32;
            }
            if (v34 >= *v27)
              v27 = v31;
          }
          v30 = v31 + 16;
          v26 = v31;
          if (v31 + 16 == v25)
            goto LABEL_58;
        }
        if (*v31 >= *v29)
        {
          if (*v31 >= *v27)
            v27 = v31;
        }
        else
        {
          v29 = v31;
        }
      }
    }
LABEL_58:
    v8.n128_f64[0] = (float)(*v27 - *v29);
  }
  (*(void (**)(uint64_t, const __CFString *, __n128))(*(_QWORD *)a1 + 328))(a1, CFSTR("TemperatureSpan"), v8);
  v36 = *(_QWORD *)(a1 + 296);
  v37 = (v36 - v9) >> 5;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7260);
  v38 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    v39 = ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 5) - v37;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = (v36 - v9) >> 5;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v39;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Point gyro database prune, deleted %zu samples, %zu remain.", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7260);
    v47 = ((uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 5) - v37;
    *(_DWORD *)__p = 134218240;
    *(_QWORD *)&__p[4] = (v36 - v9) >> 5;
    v53 = 2048;
    v54 = v47;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Point gyro database prune, deleted %zu samples, %zu remain.", (size_t)__p, 22);
    v49 = (char *)v48;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::prune()", "%s\n", v48);
    if (v49 != buf)
      free(v49);
  }
  if (v36 != v9)
  {
    sub_100263E50((uint64_t)buf);
    v40 = sub_100263F7C(&buf[16], (uint64_t)"UPDATE ", 7);
    v41 = sub_100263F7C(v40, (uint64_t)"GyroPointCalibration", 20);
    v42 = sub_100263F7C(v41, (uint64_t)" SET Active = ", 14);
    v43 = (_QWORD *)std::ostream::operator<<(v42, 0);
    v44 = sub_100263F7C(v43, (uint64_t)" WHERE ", 7);
    v45 = sub_100263F7C(v44, (uint64_t)"Id", 2);
    sub_100263F7C(v45, (uint64_t)" = ?", 4);
    if (*(_BYTE *)(a1 + 249))
    {
      std::stringbuf::str(__p, &buf[24]);
      if (v55 >= 0)
        v46 = __p;
      else
        v46 = *(char **)__p;
      sub_1000CDA68(a1 + 112, v46);
    }
    sub_1000CDA68(a1 + 112, "DELETE FROM GyroPointCalibration WHERE Id = ?");
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1018BCE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1018BCEE4(uint64_t a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[4];
  int v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  if (*(_QWORD *)(a1 + 496) != *(_QWORD *)(a1 + 504))
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7260);
    v1 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "fPendingSamples.empty()";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"initialization function expected with no pending samples\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D7260);
    }
    v2 = off_10229FD58;
    if (os_signpost_enabled((os_log_t)off_10229FD58))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "fPendingSamples.empty()";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "initialization function expected with no pending samples", "{\"msg%{public}.0s\":\"initialization function expected with no pending samples\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D7260);
    }
    v3 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v5 = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = "assert";
      v10 = 2081;
      v11 = "fPendingSamples.empty()";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"initialization function expected with no pending samples\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalShared.mm", 288, "initializeWithFactoryData");
  }
  sub_1018BDCA8(a1, (void **)(a1 + 496));
}

uint64_t sub_1018BD14C(uint64_t a1)
{
  _BYTE *v1;

  v1 = *(_BYTE **)(a1 + 32);
  v1[257] = 0;
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v1 + 312))(v1);
}

void sub_1018BD160(uint64_t a1)
{
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  sub_1018BD240((char **)(a1 + 288));
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a1 + 496);
  sub_1018BD240((char **)(a1 + 496));
  *(_BYTE *)(a1 + 256) = 0;
  sub_1000CDA68(a1 + 112, "DELETE FROM GyroPointCalibration");
}

void sub_1018BD220(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1018BD240(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;

  v2 = a1[2];
  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - v3) >> 5;
  if (v5 < (v2 - v3) >> 5)
  {
    if (v4 == v3)
    {
      v10 = 0;
      v8 = 32 * v5;
    }
    else
    {
      v6 = (char *)sub_1018BFA78((v4 - v3) >> 5);
      v7 = *a1;
      v3 = a1[1];
      v8 = (uint64_t)&v6[32 * v5];
      v10 = &v6[32 * v9];
      if (v3 != *a1)
      {
        v11 = v8;
        do
        {
          v12 = *((_OWORD *)v3 - 1);
          *(_OWORD *)(v11 - 32) = *((_OWORD *)v3 - 2);
          *(_OWORD *)(v11 - 16) = v12;
          v11 -= 32;
          v3 -= 32;
        }
        while (v3 != v7);
        v3 = *a1;
        goto LABEL_9;
      }
    }
    v11 = v8;
LABEL_9:
    *a1 = (char *)v11;
    a1[1] = (char *)v8;
    a1[2] = v10;
    if (v3)
      operator delete(v3);
  }
}

uint64_t sub_1018BD2F8(uint64_t a1)
{
  float *v1;
  float *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = (uint64_t *)&v7;
  v1 = *(float **)(a1 + 288);
  v2 = *(float **)(a1 + 296);
  if (v1 == v2)
  {
    v4 = 0;
    v3 = 0;
  }
  else
  {
    do
    {
      sub_10188D1FC(&v6, v1, v1);
      v1 += 8;
    }
    while (v1 != v2);
    v3 = v8;
    v4 = v7;
  }
  sub_100008848((uint64_t)&v6, v4);
  return v3;
}

void sub_1018BD370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_100008848((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

unint64_t sub_1018BD388()
{
  return ((unint64_t)sub_1001B7910() >> 13) & 1;
}

uint64_t sub_1018BD3A0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 488);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  objc_msgSend(*(id *)(a1 + 264), "invalidate");
  objc_msgSend(*(id *)(a1 + 272), "invalidate");
  objc_msgSend(*(id *)(a1 + 480), "invalidate");
  sub_1018BB988(a1);
  return sub_1006154D4(a1);
}

void sub_1018BD3F4()
{
  NSObject *v0;
  const char *v1;
  uint8_t *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7260);
  v0 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Start factory GYTT", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7260);
    v3[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Start factory GYTT", v3, 2);
    v2 = (uint8_t *)v1;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalShared::startFactoryGYTT()", "%s\n", v1);
    if (v2 != buf)
      free(v2);
  }
  operator new();
}

void sub_1018BD5D4()
{
  operator delete();
}

uint64_t sub_1018BD600(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 280);
  return 1;
}

void sub_1018BD610(uint64_t a1)
{
  char v1;
  uint64_t v2;
  _QWORD v3[4];
  char v4;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 280))(a1);
  v2 = sub_100127B9C();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1018BD67C;
  v3[3] = &unk_102146CB8;
  v4 = v1;
  sub_1000A57FC(v2, (uint64_t)v3);
}

uint64_t sub_1018BD67C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1001FBB04(0);
  if (result)
  {
    v3 = sub_1001FBB04(0);
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, *(unsigned __int8 *)(a1 + 32));
  }
  return result;
}

void sub_1018BD6C4(uint64_t a1)
{
  sub_1000CDA68(a1 + 112, "SELECT Id, Timestamp, Temperature, BiasX, BiasY, BiasZ FROM GyroPointCalibration WHERE Active = ?");
}

void sub_1018BDC58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1018BDCA8(uint64_t a1, void **a2)
{
  double Current;
  double v5;
  int *v6;
  int *v7;
  double v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  sqlite3_stmt *v28;
  NSObject *v29;
  std::string *v30;
  void *v31;
  std::string *p_buf;
  std::string *v33;
  std::string *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int *v44;
  uint64_t v45;
  std::string buf;
  int v47;
  std::string *v48;
  std::string __p[68];

  Current = CFAbsoluteTimeGetCurrent();
  v5 = *(double *)(a1 + 384);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  sub_100952314(&v43);
  v6 = (int *)v43;
  v7 = v44;
  if (v43 != v44)
  {
    v8 = Current - v5;
    v9 = (char *)a2[1];
    do
    {
      v11 = *v6;
      v10 = v6[1];
      v13 = v6[2];
      v12 = v6[3];
      v14 = (char *)a2[2];
      if (v9 >= v14)
      {
        v15 = (v9 - (_BYTE *)*a2) >> 5;
        if ((unint64_t)(v15 + 1) >> 59)
          sub_100259694();
        v16 = v14 - (_BYTE *)*a2;
        v17 = v16 >> 4;
        if (v16 >> 4 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v18 = (unint64_t)sub_1018BFA78(v18);
        else
          v19 = 0;
        v20 = v18 + 32 * v15;
        *(_DWORD *)v20 = v11;
        *(_DWORD *)(v20 + 4) = v10;
        *(_DWORD *)(v20 + 8) = v13;
        *(_DWORD *)(v20 + 12) = v12;
        *(double *)(v20 + 16) = v8;
        *(_QWORD *)(v20 + 24) = 0;
        v22 = (char *)*a2;
        v21 = (char *)a2[1];
        v23 = (char *)v20;
        if (v21 != *a2)
        {
          do
          {
            v24 = *((_OWORD *)v21 - 1);
            *((_OWORD *)v23 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v23 - 1) = v24;
            v23 -= 32;
            v21 -= 32;
          }
          while (v21 != v22);
          v21 = (char *)*a2;
        }
        v9 = (char *)(v20 + 32);
        *a2 = v23;
        a2[1] = (void *)(v20 + 32);
        a2[2] = (void *)(v18 + 32 * v19);
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_DWORD *)v9 = v11;
        *((_DWORD *)v9 + 1) = v10;
        *((_DWORD *)v9 + 2) = v13;
        *((_DWORD *)v9 + 3) = v12;
        *((double *)v9 + 2) = v8;
        *((_QWORD *)v9 + 3) = 0;
        v9 += 32;
      }
      a2[1] = v9;
      v6 += 4;
    }
    while (v6 != v7);
  }
  v25 = a1 + 112;
  sub_10001E638(a1 + 112);
  sub_100087AF4((_QWORD *)(a1 + 536), &v42);
  v26 = (char *)*a2;
  v27 = (char *)a2[1];
  if (*a2 != v27)
  {
    do
    {
      if (sub_1018BE250(v42, -1, *((double *)v26 + 2), *(float *)v26, *((float *)v26 + 1), *((float *)v26 + 2), *((float *)v26 + 3)))
      {
        v28 = (sqlite3_stmt *)sub_100026CC8(v42);
        sub_10023C9B0(v25, v28);
      }
      else
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021D7260);
        v29 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
        {
          sub_100640928(v25, __p);
          v30 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? __p
              : (std::string *)__p[0].__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "flushPendingError: %{public}s", (uint8_t *)&buf, 0xCu);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_1021D7260);
          v31 = off_10229FD58;
          sub_100640928(v25, &buf);
          p_buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          v47 = 136446210;
          v48 = p_buf;
          LODWORD(v41) = 12;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v31, 17, "flushPendingError: %{public}s", &v47, v41);
          v34 = v33;
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::persistFactoryPointsInDatabase(std::vector<Sample> &)", "%s\n", (const char *)v34);
          if (v34 != __p)
            free(v34);
        }
      }
      v26 += 32;
    }
    while (v26 != v27);
  }
  sub_10001E99C(v25);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7260);
  v35 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    v36 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5;
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Factory data persisted in gyro database, %zu samples added.", (uint8_t *)__p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7260);
    v38 = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 5;
    LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v38;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_10229FD58, 0, "Factory data persisted in gyro database, %zu samples added.", (size_t)&buf);
    v40 = (std::string *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLGyroCalibrationDatabaseLocalShared::persistFactoryPointsInDatabase(std::vector<Sample> &)", "%s\n", v39);
    if (v40 != __p)
      free(v40);
  }
  v37 = v42;
  v42 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v43)
  {
    v44 = (int *)v43;
    operator delete(v43);
  }
}

void sub_1018BE1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1018BE250(uint64_t a1, int a2, double a3, float a4, float a5, float a6, float a7)
{
  sqlite3_stmt *v13;

  v13 = (sqlite3_stmt *)sub_100026CC8(a1);
  return sub_1000CD75C(v13, 1, a2)
      && sub_1000890C4(v13, 2, a3)
      && sub_1000890C4(v13, 3, a4)
      && sub_1000890C4(v13, 4, a5)
      && sub_1000890C4(v13, 5, a6)
      && sub_1000890C4(v13, 6, a7);
}

uint64_t sub_1018BE328(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)a1 = off_1021D6F40;

  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;

  *(_QWORD *)(a1 + 480) = 0;
  v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(_QWORD *)(a1 + 504) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 488) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100261F44(a1 + 312);
  v4 = *(void **)(a1 + 288);
  if (v4)
  {
    *(_QWORD *)(a1 + 296) = v4;
    operator delete(v4);
  }
  *(_QWORD *)a1 = off_1021D76A8;
  sub_1006322C0(a1 + 112);
  return sub_1006153DC(a1);
}

void sub_1018BE3D8(uint64_t a1)
{
  float v2;
  float v3;
  BOOL v4;
  NSObject *v5;
  float v6;
  unint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  CFAbsoluteTime Current;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int128 v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint8_t buf[4];
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  CFAbsoluteTime v27;
  char v28;
  _DWORD v29[3];
  __int16 v30;
  unint64_t v31;

  if (*(_BYTE *)(a1 + 473))
  {
    v2 = *(float *)(a1 + 524);
    v3 = *(float *)(a1 + 520);
    v4 = v3 == 3.4028e38 || v2 == 1.1755e-38;
    if (v4 || (v6 = v2 - v3, v6 <= 0.0))
    {
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D7260);
      v5 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to log gyro non factory cal from db because the temperature range is either uninitialized or invalid.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021D7260);
        LOWORD(v29[0]) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Failed to log gyro non factory cal from db because the temperature range is either uninitialized or invalid.", v29, 2);
        v12 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::logGyroNonFactoryCalIfNecessary()", "%s\n", v17);
        goto LABEL_33;
      }
    }
    else
    {
      v7 = 30 * vcvtps_u32_f32(v6 * 0.5);
      if (v7 >= (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 5)
      {
        sub_1015EB864(buf);
        Current = CFAbsoluteTimeGetCurrent();
        v28 |= 1u;
        v27 = Current;
        sub_101603598((uint64_t)buf);
        v14 = *(__int128 **)(a1 + 288);
        if (v14 != *(__int128 **)(a1 + 296))
        {
          v18 = *v14;
          v15 = *((_QWORD *)v14 + 2);
          sub_101558D64((uint64_t)v19);
          v22 |= 1u;
          v21 = v15;
          sub_10155919C((uint64_t)v19);
          v16 = v20;
          *(_BYTE *)(v20 + 24) |= 0xFu;
          *(_OWORD *)(v16 + 8) = v18;
          operator new();
        }
        if (qword_1023118A8 != -1)
          dispatch_once(&qword_1023118A8, &stru_1021D7280);
        if (qword_1023118B0)
          sub_101888B64(qword_1023118B0, (uint64_t)buf);
        sub_1015EE304((PB::Base *)buf);
      }
      else
      {
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021D7260);
        v8 = off_10229FD58;
        if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_ERROR))
        {
          v9 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 5;
          *(_DWORD *)buf = 134218240;
          v24 = v9;
          v25 = 2048;
          v26 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to log gyro non factory cal because the number of samples (%zu) exceeds the max limit (%zu).", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD50 != -1)
            dispatch_once(&qword_10229FD50, &stru_1021D7260);
          v10 = (uint64_t)(*(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288)) >> 5;
          v29[0] = 134218240;
          *(_QWORD *)&v29[1] = v10;
          v30 = 2048;
          v31 = v7;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 16, "Failed to log gyro non factory cal because the number of samples (%zu) exceeds the max limit (%zu).", (size_t)v29, 22);
          v12 = (uint8_t *)v11;
          sub_100512490("Generic", 1, 0, 0, "void CLGyroCalibrationDatabaseLocalShared::logGyroNonFactoryCalIfNecessary()", "%s\n", v11);
LABEL_33:
          if (v12 != buf)
            free(v12);
        }
      }
    }
  }
}

void sub_1018BE92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018BE978()
{
  return 1;
}

uint64_t sub_1018BE980()
{
  return 1;
}

void sub_1018BE994(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1018BE9C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D72B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018BE9D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D72B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018BEA04(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

unsigned __int8 *sub_1018BEA14(unsigned __int8 *a1, const char *a2, _QWORD *a3, unsigned __int8 a4)
{
  double *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  void **v21;
  char *v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  NSObject *v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  void **v34;
  char *v35;
  void *v36[2];
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  _BYTE __p[12];
  __int16 v44;
  int v45;
  __int16 v46;
  void **v47;
  _BYTE buf[18];
  __int16 v49;
  _BYTE *v50;

  *a1 = 0;
  *((_QWORD *)a1 + 1) = *a3;
  v6 = (double *)(a1 + 8);
  a1[16] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_1001FD98C(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v38);
  std::ostream::operator<<(&v39, *v6);
  if (!a1[16])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *a1;
        std::stringbuf::str(__p, v40);
        v18 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v17;
        v49 = 2080;
        v50 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v19 = qword_10229FC78;
      v20 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v21 = v36;
      else
        v21 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v20;
      v46 = 2080;
      v47 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v22;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v27 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v28 = *a1;
        std::stringbuf::str(__p, v40);
        v29 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28;
        v49 = 2080;
        v50 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v32 = qword_10229FC78;
      v33 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v34 = v36;
      else
        v34 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v33;
      v46 = 2080;
      v47 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v35;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]", "%s\n", v15);
    if (v15 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D72F0);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D72F0);
    v23 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v24 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v25 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = double]", "%s\n", v26);
LABEL_42:
      if (v15 == buf)
        goto LABEL_53;
LABEL_64:
      free(v15);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v38
  v39 = v30;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf(v40);
  std::ios::~ios(&v42);
  return a1;
}

void sub_1018BF1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018BF230(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_1018BF25C(unsigned __int8 *a1, const char *a2, unsigned __int8 *a3, unsigned __int8 a4)
{
  BOOL *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  void **v20;
  NSObject *v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  void **v31;
  void *v32[2];
  char v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;
  _BYTE __p[12];
  __int16 v40;
  int v41;
  __int16 v42;
  void **v43;
  _BYTE buf[18];
  __int16 v45;
  _BYTE *v46;

  *a1 = 0;
  a1[1] = *a3;
  v6 = (BOOL *)(a1 + 1);
  a1[2] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_1001E4874(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v34);
  std::ostream::operator<<(&v35, *v6);
  if (!a1[2])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v15 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *a1;
        std::stringbuf::str(__p, v36);
        v17 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        v45 = 2080;
        v46 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v18 = qword_10229FC78;
      v19 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v20 = v32;
      else
        v20 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v19;
      v42 = 2080;
      v43 = v20;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v24 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v25 = *a1;
        std::stringbuf::str(__p, v36);
        v26 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        v45 = 2080;
        v46 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v29 = qword_10229FC78;
      v30 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v31 = v32;
      else
        v31 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v30;
      v42 = 2080;
      v43 = v31;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "%s\n", v14);
    if (v14 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D72F0);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D72F0);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v22 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D72F0);
      v23 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v23;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "%s\n", v14);
LABEL_42:
      if (v14 == buf)
        goto LABEL_53;
LABEL_64:
      free(v14);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v34
  v35 = v27;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf(v36);
  std::ios::~ios(&v38);
  return a1;
}

void sub_1018BFA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1018BFA78(unint64_t a1)
{
  if (a1 >> 59)
    sub_10025955C();
  return operator new(32 * a1);
}

void sub_1018BFAAC(double *a1, double *a2, double *a3, uint64_t a4, char a5)
{
  double *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double *v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double v27;
  double *v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  __int128 v35;
  BOOL v36;
  double *v37;
  double v38;
  double *v39;
  double v40;
  double *v41;
  double *v42;
  double v43;
  uint64_t v44;
  __int128 v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double *v50;
  __int128 v51;
  __int128 v52;
  __int128 *v53;
  __int128 *v54;
  __int128 *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  double *v65;
  BOOL v67;
  uint64_t v68;
  double v69;
  double *v70;
  double *v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  double *v82;
  double v83;
  double *v84;
  double v85;
  uint64_t v86;
  double *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  double *v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  double *v102;
  double v103;
  uint64_t v104;
  double *v105;
  __int128 v106;
  double v108;
  double *v109;
  double v110;
  uint64_t v111;
  __int128 v112;
  double v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;

double *sub_1018C0390(double *result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = vabdd_f64(*a4, a2[2]);
  v5 = vabdd_f64(*a4, a3[2]);
  if (v4 >= vabdd_f64(*a4, result[2]))
  {
    if (v5 < v4)
    {
      v10 = *(_OWORD *)a2;
      v9 = *((_OWORD *)a2 + 1);
      v11 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v11;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v9;
      if (vabdd_f64(*a4, a2[2]) < vabdd_f64(*a4, result[2]))
      {
        v13 = *(_OWORD *)result;
        v12 = *((_OWORD *)result + 1);
        v14 = *((_OWORD *)a2 + 1);
        *(_OWORD *)result = *(_OWORD *)a2;
        *((_OWORD *)result + 1) = v14;
        *(_OWORD *)a2 = v13;
        *((_OWORD *)a2 + 1) = v12;
      }
    }
  }
  else
  {
    if (v5 >= v4)
    {
      v16 = *(_OWORD *)result;
      v15 = *((_OWORD *)result + 1);
      v17 = *((_OWORD *)a2 + 1);
      *(_OWORD *)result = *(_OWORD *)a2;
      *((_OWORD *)result + 1) = v17;
      *(_OWORD *)a2 = v16;
      *((_OWORD *)a2 + 1) = v15;
      if (vabdd_f64(*a4, a3[2]) >= vabdd_f64(*a4, a2[2]))
        return result;
      v7 = *(_OWORD *)a2;
      v6 = *((_OWORD *)a2 + 1);
      v18 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v18;
    }
    else
    {
      v7 = *(_OWORD *)result;
      v6 = *((_OWORD *)result + 1);
      v8 = *((_OWORD *)a3 + 1);
      *(_OWORD *)result = *(_OWORD *)a3;
      *((_OWORD *)result + 1) = v8;
    }
    *(_OWORD *)a3 = v7;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_1018C045C(double *a1, double *a2, double *a3)
{
  uint64_t v6;
  _BOOL8 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  double *v11;
  double *v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, a1[2]))
      {
        v9 = *(_OWORD *)a1;
        v8 = *((_OWORD *)a1 + 1);
        v10 = *((_OWORD *)a2 - 1);
        *(_OWORD *)a1 = *((_OWORD *)a2 - 2);
        *((_OWORD *)a1 + 1) = v10;
        *((_OWORD *)a2 - 2) = v9;
        *((_OWORD *)a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1018C0390(a1, a1 + 4, a2 - 4, a3);
      return 1;
    case 4:
      sub_1018C06E4(a1, a1 + 4, a1 + 8, (uint64_t)(a2 - 4), a3);
      return 1;
    case 5:
      v22 = (__int128 *)(a1 + 4);
      v23 = (__int128 *)(a1 + 8);
      v24 = (__int128 *)(a1 + 12);
      sub_1018C06E4(a1, a1 + 4, a1 + 8, (uint64_t)(a1 + 12), a3);
      if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, a1[14]))
      {
        v26 = *v24;
        v25 = *((_OWORD *)a1 + 7);
        v27 = *((_OWORD *)a2 - 1);
        *v24 = *((_OWORD *)a2 - 2);
        *((_OWORD *)a1 + 7) = v27;
        *((_OWORD *)a2 - 2) = v26;
        *((_OWORD *)a2 - 1) = v25;
        if (vabdd_f64(*a3, a1[14]) < vabdd_f64(*a3, a1[10]))
        {
          v29 = *v23;
          v28 = *((_OWORD *)a1 + 5);
          v30 = *((_OWORD *)a1 + 7);
          *v23 = *v24;
          *((_OWORD *)a1 + 5) = v30;
          *v24 = v29;
          *((_OWORD *)a1 + 7) = v28;
          if (vabdd_f64(*a3, a1[10]) < vabdd_f64(*a3, a1[6]))
          {
            v32 = *v22;
            v31 = *((_OWORD *)a1 + 3);
            v33 = *((_OWORD *)a1 + 5);
            *v22 = *v23;
            *((_OWORD *)a1 + 3) = v33;
            *v23 = v32;
            *((_OWORD *)a1 + 5) = v31;
            if (vabdd_f64(*a3, a1[6]) < vabdd_f64(*a3, a1[2]))
            {
              v35 = *(_OWORD *)a1;
              v34 = *((_OWORD *)a1 + 1);
              v36 = *((_OWORD *)a1 + 3);
              *(_OWORD *)a1 = *v22;
              *((_OWORD *)a1 + 1) = v36;
              *v22 = v35;
              *((_OWORD *)a1 + 3) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 8;
      sub_1018C0390(a1, a1 + 4, a1 + 8, a3);
      v12 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      v15 = *a3;
      break;
  }
  while (1)
  {
    v16 = v12[2];
    if (vabdd_f64(v15, v16) < vabdd_f64(v15, v11[2]))
      break;
LABEL_15:
    v11 = v12;
    v13 += 32;
    v12 += 4;
    if (v12 == a2)
      return 1;
  }
  v37 = *(_OWORD *)v12;
  v17 = *((_QWORD *)v12 + 3);
  v18 = v13;
  while (1)
  {
    v19 = (char *)a1 + v18;
    v20 = *(_OWORD *)((char *)a1 + v18 + 80);
    *((_OWORD *)v19 + 6) = *(_OWORD *)((char *)a1 + v18 + 64);
    *((_OWORD *)v19 + 7) = v20;
    if (v18 == -64)
      break;
    v18 -= 32;
    if (vabdd_f64(*a3, v16) >= vabdd_f64(*a3, *((double *)v19 + 6)))
    {
      v21 = (uint64_t)a1 + v18 + 96;
      goto LABEL_13;
    }
  }
  v21 = (uint64_t)a1;
LABEL_13:
  *(_OWORD *)v21 = v37;
  *(double *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v17;
  if (++v14 != 8)
  {
    v15 = *a3;
    goto LABEL_15;
  }
  return v12 + 4 == a2;
}

__n128 sub_1018C06E4(double *a1, double *a2, double *a3, uint64_t a4, double *a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  sub_1018C0390(a1, a2, a3, a5);
  result.n128_f64[0] = vabdd_f64(*a5, a3[2]);
  if (vabdd_f64(*a5, *(double *)(a4 + 16)) < result.n128_f64[0])
  {
    v11 = *(_OWORD *)a3;
    result = *(__n128 *)(a3 + 2);
    v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_OWORD *)a3 + 1) = v12;
    *(_OWORD *)a4 = v11;
    *(__n128 *)(a4 + 16) = result;
    result.n128_f64[0] = vabdd_f64(*a5, a2[2]);
    if (vabdd_f64(*a5, a3[2]) < result.n128_f64[0])
    {
      v13 = *(_OWORD *)a2;
      result = *(__n128 *)(a2 + 2);
      v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *(_OWORD *)a3 = v13;
      *((__n128 *)a3 + 1) = result;
      result.n128_f64[0] = vabdd_f64(*a5, a1[2]);
      if (vabdd_f64(*a5, a2[2]) < result.n128_f64[0])
      {
        v15 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 2);
        v16 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v16;
        *(_OWORD *)a2 = v15;
        *((__n128 *)a2 + 1) = result;
      }
    }
  }
  return result;
}

void sub_1018C07B4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  NSDate *v8;
  uint64_t v9;
  uint64_t v10;
  NSDate *v11;
  const char *v12;
  const char *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  uint64_t v21;
  BOOL v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  NSDate *v30;

  v1 = *(_QWORD *)(a1 + 32);
  if ((MGGetBoolAnswer(CFSTR("DeviceSupportsCollisionSOS")) & 1) == 0
    && (MGGetBoolAnswer(CFSTR("InternalBuild")) & 1) == 0)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021D7370);
    v18 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v24 = 0;
      v25 = 2082;
      v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Simulator, Not supported HW\"}", buf, 0x12u);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021D7370);
    }
    v17 = qword_10229FDA8;
    if (!os_signpost_enabled((os_log_t)qword_10229FDA8))
      return;
    *(_DWORD *)buf = 68289026;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v12 = "Simulator, Not supported HW";
    v13 = "{\"msg%{public}.0s\":\"Simulator, Not supported HW\"}";
LABEL_29:
    v14 = v17;
    v15 = 18;
    goto LABEL_30;
  }
  v22 = 0;
  sub_1001E48E4(*(_QWORD *)(v1 + 24), (uint64_t)CFSTR("EnableSimulateVehicularCrash"), &v22);
  if (!v22)
  {
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021D7370);
    v16 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v24 = 0;
      v25 = 2082;
      v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Simulator, Not enabled\"}", buf, 0x12u);
      if (qword_10229FDA0 != -1)
        dispatch_once(&qword_10229FDA0, &stru_1021D7370);
    }
    v17 = qword_10229FDA8;
    if (!os_signpost_enabled((os_log_t)qword_10229FDA8))
      return;
    *(_DWORD *)buf = 68289026;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v12 = "Simulator, Not enabled";
    v13 = "{\"msg%{public}.0s\":\"Simulator, Not enabled\"}";
    goto LABEL_29;
  }
  v2 = *(void **)(v1 + 8);
  if (!v2)
  {
LABEL_33:
    *(_QWORD *)(v1 + 8) = objc_alloc_init((Class)NSDate);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021D7370);
    v20 = qword_10229FDA8;
    if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(v1 + 8);
      *(_DWORD *)buf = 68289282;
      v24 = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2114;
      v28 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulator, triggered\", \"at\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    -[SOSKappaManager triggerKappaWithCompletion:](+[SOSKappaManager sharedInstance](SOSKappaManager, "sharedInstance"), "triggerKappaWithCompletion:", &stru_1021D7350);
    return;
  }
  objc_msgSend(v2, "timeIntervalSinceNow");
  v4 = v3;
  objc_msgSend(*(id *)(v1 + 8), "timeIntervalSinceNow");
  if (v4 < 0.0)
    v5 = -v5;
  if (v5 >= 30.0)
  {
    v19 = *(void **)(v1 + 8);
    if (v19)
    {

      *(_QWORD *)(v1 + 8) = 0;
    }
    goto LABEL_33;
  }
  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021D7370);
  v6 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_ERROR))
  {
    v7 = *(_QWORD *)(v1 + 8);
    v8 = +[NSDate now](NSDate, "now");
    *(_DWORD *)buf = 68289538;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2114;
    v28 = v7;
    v29 = 2114;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Simulator, Too frequent trigger\", \"Previous at\":%{public, location:escape_only}@, \"Current at\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021D7370);
  }
  v9 = qword_10229FDA8;
  if (os_signpost_enabled((os_log_t)qword_10229FDA8))
  {
    v10 = *(_QWORD *)(v1 + 8);
    v11 = +[NSDate now](NSDate, "now");
    *(_DWORD *)buf = 68289538;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2114;
    v28 = v10;
    v29 = 2114;
    v30 = v11;
    v12 = "Simulator, Too frequent trigger";
    v13 = "{\"msg%{public}.0s\":\"Simulator, Too frequent trigger\", \"Previous at\":%{public, location:escape_only}@, \""
          "Current at\":%{public, location:escape_only}@}";
    v14 = v9;
    v15 = 38;
LABEL_30:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, buf, v15);
  }
}

uint64_t sub_1018C0CCC()
{
  if (qword_102310130 != -1)
    dispatch_once(&qword_102310130, &stru_1021D7310);
  return qword_102310128;
}

void sub_1018C0D0C(id a1)
{
  if (sub_100760428())
  {
    sub_100197040();
    if ((sub_1001B7910() & 0x2000000000000) != 0)
    {
      if (amfi_developer_mode_status())
      {
        +[CLIntersiloUniverse newSharedVendorUniverseWithSilo:](CLIntersiloUniverse, "newSharedVendorUniverseWithSilo:", sub_10024455C());
        operator new();
      }
    }
  }
  qword_102310128 = 0;
}

void sub_1018C0E44()
{
  operator delete();
}

void sub_1018C0E98(id a1, int64_t a2, NSUUID *a3)
{
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int64_t v9;

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021D7370);
  v4 = qword_10229FDA8;
  if (os_log_type_enabled((os_log_t)qword_10229FDA8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2050;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Simulator, trigger\", \"response\":%{public}ld}", (uint8_t *)v5, 0x1Cu);
  }
}

void sub_1018C0F7C(id a1)
{
  qword_10229FDA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Kappa");
}

void sub_1018C0FA8(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1018C0FFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1018C1020(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018C1044(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  unsigned int v5;

  v2 = sub_1001FD94C();
  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v5 = 0;
  if (sub_1001E4B84(v2, v3, &v5))
    return v5;
  else
    return 1;
}

uint64_t sub_1018C10A4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  unsigned int v7;

  v7 = a2;
  v3 = sub_1001FD94C();
  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  sub_100019BD4(v3, v4, &v7);
  v5 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 944))(v5);
}

uint64_t sub_1018C1104(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const char *v4;
  unsigned __int8 v6[4];
  unsigned int v7;
  int v8;

  sub_100197040();
  v2 = sub_10075D288();
  v3 = 88;
  if (v2)
    v3 = 96;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + v3))(a1);
  v4 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  sub_1018C1A0C(v6, v4, &v8, 0);
  return v7;
}

uint64_t sub_1018C117C(uint64_t a1)
{
  const char *v2;
  int v4;
  unsigned __int8 v5[4];
  unsigned int v6;

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  sub_1018C1A0C(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_1018C11DC(uint64_t a1)
{
  const char *v2;
  int v4;
  unsigned __int8 v5[4];
  unsigned int v6;

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  sub_1018C1A0C(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_1018C123C(uint64_t a1)
{
  const char *v2;
  int v4;
  unsigned __int8 v5[4];
  unsigned int v6;

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  sub_1018C1A0C(v5, v2, &v4, 0);
  return v6;
}

uint64_t sub_1018C129C(uint64_t a1)
{
  const char *v2;
  unsigned __int8 v4;
  unsigned __int8 v5[3];

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  sub_1018BF25C(v5, v2, &v4, 0);
  return v5[1];
}

uint64_t sub_1018C12FC(uint64_t a1)
{
  const char *v2;
  unsigned __int8 v4;
  unsigned __int8 v5[3];

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  sub_1018BF25C(v5, v2, &v4, 0);
  return v5[1];
}

double sub_1018C135C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  NSObject *v4;
  const char *v5;
  const char *v7;
  uint8_t *v8;
  double v9;
  int v10;
  double v11;
  uint8_t buf[4];
  double v13[204];

  v9 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v2 = sub_1001FD94C();
  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  sub_1001FD98C(v2, v3, &v9);
  if (qword_10229FE30 != -1)
    dispatch_once(&qword_10229FE30, &stru_1021D74F0);
  v4 = qword_10229FE38;
  if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v13[0] = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRecordingSettings: Getting server Sampling Rate in CLDaemonCache: %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D74F0);
    v10 = 134217984;
    v11 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "CLRecordingSettings: Getting server Sampling Rate in CLDaemonCache: %f", COERCE_DOUBLE(&v10));
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "double CLRecordingSettings::getRecordingRateLimitingSamplingRate()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  sub_1018BEA14(buf, v5, &v9, 0);
  return *(double *)((char *)v13 + 4);
}

uint64_t sub_1018C1570(uint64_t a1, double a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v9;
  uint8_t *v10;
  double v11;
  int v12;
  double v13;
  uint8_t buf[4];
  double v15;

  v11 = a2;
  if (qword_10229FE30 != -1)
    dispatch_once(&qword_10229FE30, &stru_1021D74F0);
  v4 = qword_10229FE38;
  if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLRecordingSettings: Setting Sampling Rate in CLDaemonCache to: %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D74F0);
    v12 = 134217984;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "CLRecordingSettings: Setting Sampling Rate in CLDaemonCache to: %f", COERCE_DOUBLE(&v12));
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLRecordingSettings::setSamplingRate(double)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  v5 = sub_1001FD94C();
  v6 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  sub_10018A4CC(v5, v6, &v11);
  v7 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
}

uint64_t sub_1018C1760(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;

  v2 = sub_1001FD94C();
  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  sub_100525484(v2, v3, 0xFFFFFFFFLL);
  v4 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 944))(v4);
}

uint64_t sub_1018C17B0(uint64_t a1)
{
  const char *v2;
  unsigned __int8 v4;
  unsigned __int8 v5[3];

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 216))(a1);
  sub_1018BF25C(v5, v2, &v4, 0);
  return v5[1];
}

uint64_t sub_1018C1810(uint64_t a1)
{
  const char *v2;
  unsigned __int8 v4;
  unsigned __int8 v5[3];

  v2 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
  sub_1018BF25C(v5, v2, &v4, 0);
  return v5[1];
}

unint64_t sub_1018C1870()
{
  int v1;
  unsigned __int8 v2[4];
  unsigned int v3;

  v1 = 1119092736;
  sub_1018C2254(v2, "WorkoutRecorderPowerAssertionDuration", &v1, 0);
  return v3 | (unint64_t)&_mh_execute_header;
}

void sub_1018C18B4()
{
  operator delete();
}

const __CFString *sub_1018C18C8()
{
  return CFSTR("com.apple.locationd.CLWorkoutRecorderPublisher");
}

const __CFString *sub_1018C18D4()
{
  return CFSTR("CLWorkoutRecorderPublisherSubjectUUID");
}

const __CFString *sub_1018C18E0()
{
  return CFSTR("CLWorkoutRecorderPublisherSubjectToken");
}

_QWORD *sub_1018C18EC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "WorkoutRecording");
}

const __CFString *sub_1018C18FC()
{
  return CFSTR("CLWorkoutRecorderPublishedCount");
}

const char *sub_1018C1908()
{
  return "WorkoutRecorderRateLimitingSampling";
}

const char *sub_1018C1914()
{
  return "WorkoutRecorderIntervalCount";
}

const char *sub_1018C1920()
{
  return "WorkoutRecorderPublisherMaxPerUUID";
}

uint64_t sub_1018C192C()
{
  return 10;
}

uint64_t sub_1018C1934()
{
  return 30;
}

const char *sub_1018C193C()
{
  return "WorkoutRecorderRateLimitingDisable";
}

uint64_t sub_1018C1948()
{
  return 0;
}

const char *sub_1018C1950()
{
  return "WorkoutRecorderRateLimitingDisableInternalInstallBypass";
}

uint64_t sub_1018C195C()
{
  return 0;
}

const char *sub_1018C1964()
{
  return "WorkoutRecorderSamplingInterval";
}

uint64_t sub_1018C1970()
{
  return 3;
}

const char *sub_1018C1978()
{
  return "WorkoutRecorderNumSamplesPerInterval";
}

uint64_t sub_1018C1984()
{
  return 2;
}

const char *sub_1018C198C()
{
  return "WorkoutRecorderRecordingFileCountMax";
}

uint64_t sub_1018C1998()
{
  return 9;
}

double sub_1018C19A0()
{
  return 0.0;
}

double sub_1018C19A8()
{
  return 1.0;
}

double sub_1018C19B0()
{
  return 0.0;
}

const char *sub_1018C19B8()
{
  return "WorkoutRecorderListenersHeartRateDisable";
}

uint64_t sub_1018C19C4()
{
  return 0;
}

const char *sub_1018C19CC()
{
  return "WorkoutRecorderListenersForceActiveDisable";
}

uint64_t sub_1018C19D8()
{
  return 1;
}

void sub_1018C19E0(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

unsigned __int8 *sub_1018C1A0C(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  _DWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  int v17;
  _BYTE *v18;
  uint64_t v19;
  int v20;
  void **v21;
  char *v22;
  NSObject *v23;
  int v24;
  int v25;
  const char *v26;
  NSObject *v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  void **v34;
  char *v35;
  void *v36[2];
  char v37;
  _QWORD v38[2];
  uint64_t v39;
  _QWORD v40[10];
  char v41;
  uint64_t v42;
  _BYTE __p[12];
  __int16 v44;
  int v45;
  __int16 v46;
  void **v47;
  _BYTE buf[18];
  __int16 v49;
  _BYTE *v50;

  *a1 = 0;
  *((_DWORD *)a1 + 1) = *a3;
  v6 = a1 + 4;
  a1[8] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_100526244(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v38);
  std::ostream::operator<<(&v39, *v6);
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *a1;
        std::stringbuf::str(__p, v40);
        v18 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v17;
        v49 = 2080;
        v50 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v19 = qword_10229FC78;
      v20 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v21 = v36;
      else
        v21 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v20;
      v46 = 2080;
      v47 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v22;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v27 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v28 = *a1;
        std::stringbuf::str(__p, v40);
        v29 = SBYTE3(v47) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28;
        v49 = 2080;
        v50 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v47) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v32 = qword_10229FC78;
      v33 = *a1;
      std::stringbuf::str(v36, v40);
      if (v37 >= 0)
        v34 = v36;
      else
        v34 = (void **)v36[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v33;
      v46 = 2080;
      v47 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v36[0]);
      v15 = v35;
      if (v37 < 0)
        operator delete(v36[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]", "%s\n", v15);
    if (v15 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7510);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7510);
    v23 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v24 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v25 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v44 = 1024;
      v45 = v25;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      v15 = (char *)v26;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<unsigned int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = unsigned int]", "%s\n", v26);
LABEL_42:
      if (v15 == buf)
        goto LABEL_53;
LABEL_64:
      free(v15);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v38
  v39 = v30;
  if (v41 < 0)
    operator delete((void *)v40[8]);
  std::streambuf::~streambuf(v40);
  std::ios::~ios(&v42);
  return a1;
}

void sub_1018C21DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018C2228(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

unsigned __int8 *sub_1018C2254(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  float *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  void **v20;
  NSObject *v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  void **v31;
  void *v32[2];
  char v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;
  _BYTE __p[12];
  __int16 v40;
  int v41;
  __int16 v42;
  void **v43;
  _BYTE buf[18];
  __int16 v45;
  _BYTE *v46;

  *a1 = 0;
  *((_DWORD *)a1 + 1) = *a3;
  v6 = (float *)(a1 + 4);
  a1[8] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_100526804(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v34);
  std::ostream::operator<<(&v35, *v6);
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v15 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *a1;
        std::stringbuf::str(__p, v36);
        v17 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        v45 = 2080;
        v46 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v18 = qword_10229FC78;
      v19 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v20 = v32;
      else
        v20 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v19;
      v42 = 2080;
      v43 = v20;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v24 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v25 = *a1;
        std::stringbuf::str(__p, v36);
        v26 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        v45 = 2080;
        v46 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v29 = qword_10229FC78;
      v30 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v31 = v32;
      else
        v31 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v30;
      v42 = 2080;
      v43 = v31;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]", "%s\n", v14);
    if (v14 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7510);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7510);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v22 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7510);
      v23 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v23;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<float>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = float]", "%s\n", v14);
LABEL_42:
      if (v14 == buf)
        goto LABEL_53;
LABEL_64:
      free(v14);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v34
  v35 = v27;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf(v36);
  std::ios::~ios(&v38);
  return a1;
}

void sub_1018C2A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018C2F30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete();
}

void sub_1018C3624(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x7D7]) < 0)
    operator delete((void *)STACK[0x7C0]);
  _Unwind_Resume(a1);
}

_QWORD *sub_1018C3AF8(_QWORD *result)
{
  if (result[4] == *(_QWORD *)(result[5] + 24))
    return (_QWORD *)(*(uint64_t (**)(void))(result[6] + 16))();
  return result;
}

void sub_1018C4ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1018C4F64(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "releasePowerAssertion:", CFSTR("schedule release power"));
  return objc_msgSend(*(id *)(a1 + 32), "cancelDeferredStopTimer");
}

void sub_1018C4FF4(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018C5258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(exception_object);
}

id sub_1018C5734(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v7;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  if (qword_10229FE30 != -1)
    dispatch_once(&qword_10229FE30, &stru_1021D7578);
  v7 = qword_10229FE38;
  if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLWorkoutRecorderTrigger: onMotionStateObserverNotification_bounce:", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D7578);
    v11[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 0, "CLWorkoutRecorderTrigger: onMotionStateObserverNotification_bounce:", v11, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void onMotionStateObserverNotification_bounce(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &, void *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  return objc_msgSend(a4, "onMotionStateObserverNotification:data:", a2, a3);
}

void sub_1018C6B88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1018C6C8C(v1 - 208);
  _Unwind_Resume(a1);
}

id sub_1018C6BC4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[14];
  uint64_t v13;

  v1 = *(void **)(a1 + 32);
  v2 = *(unsigned __int8 *)(a1 + 280);
  v3 = *(unsigned __int8 *)(a1 + 281);
  v4 = *(_OWORD *)(a1 + 216);
  v5 = *(_OWORD *)(a1 + 248);
  v12[12] = *(_OWORD *)(a1 + 232);
  v12[13] = v5;
  v13 = *(_QWORD *)(a1 + 264);
  v6 = *(_OWORD *)(a1 + 152);
  v7 = *(_OWORD *)(a1 + 184);
  v12[8] = *(_OWORD *)(a1 + 168);
  v12[9] = v7;
  v12[10] = *(_OWORD *)(a1 + 200);
  v12[11] = v4;
  v8 = *(_OWORD *)(a1 + 88);
  v9 = *(_OWORD *)(a1 + 120);
  v12[4] = *(_OWORD *)(a1 + 104);
  v12[5] = v9;
  v12[6] = *(_OWORD *)(a1 + 136);
  v12[7] = v6;
  v10 = *(_OWORD *)(a1 + 56);
  v12[0] = *(_OWORD *)(a1 + 40);
  v12[1] = v10;
  v12[2] = *(_OWORD *)(a1 + 72);
  v12[3] = v8;
  return objc_msgSend(v1, "onDeferredStopTimerShouldPublish:recordSubsequentSession:isMultiSportSession:withEvent:triggerDelay:", 1, v2, v3, v12, *(double *)(a1 + 272));
}

uint64_t sub_1018C6C8C(uint64_t a1)
{
  sub_100544F70((_QWORD *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

id sub_1018C6CC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onDeferredStopTimerShouldPublish:", 1);
}

void sub_1018C6DF0(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_1018C6E1C()
{
  sub_1015A2E04(qword_102310138, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102310138, (void *)&_mh_execute_header);
}

void sub_1018C6F04(id a1)
{
  qword_102310168 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLWorkoutRecorderSilo"));
}

void sub_1018C7868()
{
  operator delete();
}

id sub_1018C7894(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", a2, a3);
}

void sub_1018C956C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_1018C9CF4(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018C9D20(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

BOOL *sub_1018C9D4C(BOOL *a1, const char *a2, __int128 *a3, unsigned __int8 a4)
{
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  _BOOL4 v17;
  _BOOL4 v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  _BOOL4 v22;
  _BYTE *v23;
  uint64_t v24;
  _BOOL4 v25;
  void **v26;
  char *v27;
  NSObject *v28;
  _BOOL4 v29;
  _BOOL4 v30;
  const char *v31;
  NSObject *v32;
  _BOOL4 v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v37;
  _BOOL4 v38;
  void **v39;
  char *v40;
  void *v41[2];
  char v42;
  _QWORD v43[2];
  uint64_t v44;
  _QWORD v45[10];
  char v46;
  uint64_t v47;
  _BYTE __p[12];
  __int16 v49;
  _BOOL4 v50;
  __int16 v51;
  void **v52;
  _BYTE buf[18];
  __int16 v54;
  _BYTE *v55;

  *a1 = 0;
  v7 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(a1 + 8, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *((_QWORD *)a1 + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  a1[32] = a4;
  v9 = sub_100127B9C();
  sub_100081C10(v9, buf);
  *a1 = sub_1000BCB64(*(uint64_t *)buf, a2, v7);
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_100263E50((uint64_t)v43);
  v13 = a1[31];
  if (v13 >= 0)
    v14 = (uint64_t)v7;
  else
    v14 = *((_QWORD *)a1 + 1);
  if (v13 >= 0)
    v15 = a1[31];
  else
    v15 = *((_QWORD *)a1 + 2);
  sub_100263F7C(&v44, v14, v15);
  if (!a1[32])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v21 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *a1;
        std::stringbuf::str(__p, v45);
        v23 = SBYTE3(v52) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v22;
        v54 = 2080;
        v55 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v52) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_62;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v24 = qword_10229FC78;
      v25 = *a1;
      std::stringbuf::str(v41, v45);
      if (v42 >= 0)
        v26 = v41;
      else
        v26 = (void **)v41[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v49 = 1024;
      v50 = v25;
      v51 = 2080;
      v52 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v41[0]);
      v20 = v27;
      if (v42 < 0)
        operator delete(v41[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v32 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v33 = *a1;
        std::stringbuf::str(__p, v45);
        v34 = SBYTE3(v52) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v33;
        v54 = 2080;
        v55 = v34;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v52) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_62;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v37 = qword_10229FC78;
      v38 = *a1;
      std::stringbuf::str(v41, v45);
      if (v42 >= 0)
        v39 = v41;
      else
        v39 = (void **)v41[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v49 = 1024;
      v50 = v38;
      v51 = 2080;
      v52 = v39;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v41[0]);
      v20 = v40;
      if (v42 < 0)
        operator delete(v41[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]", "%s\n", v20);
    if (v20 == buf)
      goto LABEL_62;
    goto LABEL_73;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D75D8);
    v16 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v18 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v49 = 1024;
      v50 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      v20 = (char *)v19;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]", "%s\n", v19);
      goto LABEL_51;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D75D8);
    v28 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v29 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v30 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v49 = 1024;
      v50 = v30;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      v20 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<std::string>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = std::string]", "%s\n", v31);
LABEL_51:
      if (v20 == buf)
        goto LABEL_62;
LABEL_73:
      free(v20);
    }
  }
LABEL_62:
  *(_QWORD *)((char *)v43
  v44 = v35;
  if (v46 < 0)
    operator delete((void *)v45[8]);
  std::streambuf::~streambuf(v45);
  std::ios::~ios(&v47);
  return a1;
}

void sub_1018CA554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void **v7;
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  if (*(char *)(v6 + 31) < 0)
    operator delete(*v7);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1018CA5B4(unsigned __int8 *a1, const char *a2, _QWORD *a3, unsigned __int8 a4)
{
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  void **v20;
  NSObject *v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  void **v31;
  void *v32[2];
  char v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;
  _BYTE __p[12];
  __int16 v40;
  int v41;
  __int16 v42;
  void **v43;
  _BYTE buf[18];
  __int16 v45;
  _BYTE *v46;

  *a1 = 0;
  *((_QWORD *)a1 + 1) = *a3;
  v6 = a1 + 8;
  a1[16] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_1005262B4(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v34);
  std::ostream::operator<<(&v35, *v6);
  if (!a1[16])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v15 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *a1;
        std::stringbuf::str(__p, v36);
        v17 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        v45 = 2080;
        v46 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v18 = qword_10229FC78;
      v19 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v20 = v32;
      else
        v20 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v19;
      v42 = 2080;
      v43 = v20;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v24 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v25 = *a1;
        std::stringbuf::str(__p, v36);
        v26 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        v45 = 2080;
        v46 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v29 = qword_10229FC78;
      v30 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v31 = v32;
      else
        v31 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v30;
      v42 = 2080;
      v43 = v31;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]", "%s\n", v14);
    if (v14 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D75D8);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D75D8);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v22 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D75D8);
      v23 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v23;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<long long>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = long long]", "%s\n", v14);
LABEL_42:
      if (v14 == buf)
        goto LABEL_53;
LABEL_64:
      free(v14);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v34
  v35 = v27;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf(v36);
  std::ios::~ios(&v38);
  return a1;
}

void sub_1018CAD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018CADD0()
{
  sub_1015A2E04(qword_102310150, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102310150, (void *)&_mh_execute_header);
}

id sub_1018CB190(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onOdometerNotification:data:", a2, a3);
}

void sub_1018CB44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018CB6F8(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_1018CBAF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onCalorimetryNotification:data:", a2, a3);
}

void sub_1018CBD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1018CBEC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018CBF78(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

BOOL sub_1018CBFA4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12)
      && *(float *)(a1 + 16) == *(float *)(a2 + 16)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && *(float *)(a1 + 24) == *(float *)(a2 + 24)
      && *(float *)(a1 + 28) == *(float *)(a2 + 28)
      && *(float *)(a1 + 32) == *(float *)(a2 + 32)
      && *(float *)(a1 + 36) == *(float *)(a2 + 36)
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(float *)(a1 + 44) == *(float *)(a2 + 44)
      && *(float *)(a1 + 52) == *(float *)(a2 + 52)
      && *(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48)
      && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56)
      && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a2 + 57)
      && *(unsigned __int8 *)(a1 + 58) == *(unsigned __int8 *)(a2 + 58);
}

uint64_t sub_1018CC0C0()
{
  sub_1015A2E04(qword_102310178, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102310178, (void *)&_mh_execute_header);
}

void sub_1018CC1A8(id a1)
{
  qword_1023101A8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLPrivacyManagerSilo"));
}

void sub_1018CC4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1018CC52C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  void *v7[2];
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__p;
  char v20;
  uint64_t v21;

  v6 = *a2;
  sub_1001AF190((char *)v7, (__int128 *)a3);
  v21 = *(_QWORD *)(a3 + 184);
  objc_msgSend(a4, "onClientManagerNotification:data:", v6, v7);
  if (v20 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1018CC5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1018CCB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

id sub_1018CCB60(uint64_t a1)
{
  dispatch_source_cancel(*(dispatch_source_t *)(*(_QWORD *)(a1 + 32) + 16));

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = 0;
  return _objc_msgSend(*(id *)(a1 + 32), "vacuumAll");
}

BOOL sub_1018CCCEC(void *a1)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8[2];
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int128 __p;
  uint64_t v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021D7658);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289282;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2114;
    v20 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Vacuuming database\", \"class\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if (objc_msgSend(a1, "isEqualToString:", CFSTR("B")))
  {
    sub_1015A2E04(v8, "");
    v10 = 0x100000002;
    v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_100115CE4(&__p, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      __p = *(_OWORD *)v8;
      v13 = v9;
    }
    v14 = 0;
    sub_100631F84(buf, &v10);
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
  }
  else if (objc_msgSend(a1, "isEqualToString:", CFSTR("C")))
  {
    sub_1015A2E04(v8, "");
    v10 = 0x100000003;
    v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_100115CE4(&__p, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      __p = *(_OWORD *)v8;
      v13 = v9;
    }
    v14 = 0;
    sub_100631F84(buf, &v10);
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
  }
  else
  {
    if (!objc_msgSend(a1, "isEqualToString:", CFSTR("D")))
    {
      if (qword_1022A01D0 != -1)
        goto LABEL_42;
      while (1)
      {
        v5 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289795;
          v16 = 0;
          v17 = 2082;
          v18 = "";
          v19 = 2114;
          v20 = a1;
          v21 = 2082;
          v22 = "assert";
          v23 = 2081;
          v24 = "0";
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected encryption class\", \"class\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D7658);
        }
        v6 = qword_1022A01D8;
        if (os_signpost_enabled((os_log_t)qword_1022A01D8))
        {
          *(_DWORD *)buf = 68289795;
          v16 = 0;
          v17 = 2082;
          v18 = "";
          v19 = 2114;
          v20 = a1;
          v21 = 2082;
          v22 = "assert";
          v23 = 2081;
          v24 = "0";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected encryption class", "{\"msg%{public}.0s\":\"Unexpected encryption class\", \"class\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021D7658);
        }
        v7 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289795;
          v16 = 0;
          v17 = 2082;
          v18 = "";
          v19 = 2114;
          v20 = a1;
          v21 = 2082;
          v22 = "assert";
          v23 = 2081;
          v24 = "0";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unexpected encryption class\", \"class\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        }
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/PrivacyManager/CLPrivacyManager.mm", 128, "vacuumEncryptionClass");
        __break(1u);
LABEL_42:
        dispatch_once(&qword_1022A01D0, &stru_1021D7658);
      }
    }
    sub_1015A2E04(v8, "");
    v10 = 0x200000000;
    v11 = 0;
    if (SHIBYTE(v9) < 0)
    {
      sub_100115CE4(&__p, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      __p = *(_OWORD *)v8;
      v13 = v9;
    }
    v14 = 0;
    sub_100631F84(buf, &v10);
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v9) < 0)
      operator delete(v8[0]);
  }
  v3 = sub_10063EA94((uint64_t)buf);
  sub_1006322C0(buf);
  return v3;
}

void sub_1018CD1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1018CD250(uint64_t a1)
{
  id result;

  result = (id)sub_1018CCCEC(CFSTR("D"));
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "retryActivityForEncryptionClass:reason:", CFSTR("D"), 1);
  return result;
}

id sub_1018CD30C(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  _QWORD v7[7];

  v4 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1018CD380;
  v7[3] = &unk_10212BBA8;
  v5 = *(_QWORD *)(a1 + 40);
  v7[4] = *(_QWORD *)(a1 + 32);
  v7[5] = a2;
  v7[6] = v5;
  return objc_msgSend(v4, "sync:", v7);
}

id sub_1018CD380(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onActivity:withIdentifier:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1018CDFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1018CE064(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1018CE090(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1018CE0BC()
{
  operator new();
}

void sub_1018CE170()
{
  operator delete();
}

uint64_t sub_1018CE194(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

uint64_t sub_1018CE1E4()
{
  sub_1015A2E04(qword_102310190, "PrivacyManager");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102310190, (void *)&_mh_execute_header);
}

unsigned __int8 *sub_1018CE228(unsigned __int8 *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned __int8 v6[16];
  void *__p;
  char v8;

  v3 = sub_100615314((uint64_t)a1, a2);
  *v3 = off_1021D76A8;
  v4 = v3 + 14;
  sub_1018CE318((uint64_t)v6);
  sub_100631F84(v4, v6);
  if (v8 < 0)
    operator delete(__p);
  v6[0] = 0;
  sub_1018BF25C(a1 + 248, "KeepAllSensorCalibrationRoundsInDb", v6, 0);
  v6[0] = 0;
  sub_1018BF25C(a1 + 251, "LogGyroFactoryCalOnStartup", v6, 0);
  if (a1[252])
    sub_1018CE754();
  return a1;
}

void sub_1018CE2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  sub_1006322C0(v17);
  sub_1006153DC(v16);
  _Unwind_Resume(a1);
}

void sub_1018CE318(uint64_t a1@<X8>)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  void **v13;
  NSObject *v14;
  const char *v15;
  std::string __str;
  int v17;
  uint64_t v18;
  void *__p[2];
  uint64_t v20;

  sub_1015A2E04(__p, "");
  *(_QWORD *)a1 = 0x400000000;
  *(_WORD *)(a1 + 8) = 0;
  if (SHIBYTE(v20) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 16), __p[0], (unint64_t)__p[1]);
    v2 = SHIBYTE(v20);
    *(_QWORD *)(a1 + 40) = 0;
    if (v2 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = 0;
  }
  memset(&__str, 0, sizeof(__str));
  v3 = sub_100127B9C();
  sub_100081C10(v3, __p);
  v4 = sub_1000BCB64((uint64_t)__p[0], "GyroCalDbFile", &__str);
  v5 = v4;
  v6 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_9;
  v7 = (unint64_t *)((char *)__p[1] + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v5)
    {
LABEL_10:
      std::string::operator=((std::string *)(a1 + 16), &__str);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021D77F0);
      v9 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 39) >= 0)
          v10 = (void *)(a1 + 16);
        else
          v10 = *(void **)(a1 + 16);
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Using gyroCal database file: %s.", (uint8_t *)__p, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_1021D77F0);
        if (*(char *)(a1 + 39) >= 0)
          v11 = a1 + 16;
        else
          v11 = *(_QWORD *)(a1 + 16);
        v17 = 136315138;
        v18 = v11;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_10229FD58, 0, "Using gyroCal database file: %s.", (const char *)&v17);
        v13 = (void **)v12;
        sub_100512490("Generic", 1, 0, 2, "static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()", "%s\n", v12);
LABEL_36:
        if (v13 != __p)
          free(v13);
        goto LABEL_30;
      }
      goto LABEL_30;
    }
  }
  else
  {
LABEL_9:
    if (v4)
      goto LABEL_10;
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D77F0);
  v14 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No gyroCal database file set in preferences. Using the default database.", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D77F0);
    LOWORD(v17) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_10229FD58, 0, "No gyroCal database file set in preferences. Using the default database.", &v17, 2);
    v13 = (void **)v15;
    sub_100512490("Generic", 1, 0, 2, "static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()", "%s\n", v15);
    goto LABEL_36;
  }
LABEL_30:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1018CE6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void **v26;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v25 + 39) < 0)
    operator delete(*v26);
  _Unwind_Resume(exception_object);
}

void sub_1018CE754()
{
  CFAbsoluteTime Current;
  __int128 *v1;
  __int128 v2;
  _BYTE v3[8];
  __int128 v4;
  char v5;
  _QWORD v6[149];
  char v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_100952314((void **)&v8);
  sub_1015EB864(v6);
  Current = CFAbsoluteTimeGetCurrent();
  v7 |= 1u;
  *(CFAbsoluteTime *)&v6[77] = Current;
  sub_1016035FC((uint64_t)v6);
  v1 = v8;
  if (v8 != v9)
  {
    sub_1015588FC((uint64_t)v3);
    v2 = *v1;
    v5 |= 0xFu;
    v4 = v2;
    operator new();
  }
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021D7810);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v6);
  sub_1015EE304((PB::Base *)v6);
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
}

void sub_1018CE96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  void *v8;
  va_list va;

  va_start(va, a6);
  sub_1015EE304((PB::Base *)va);
  v8 = *(void **)(v6 - 144);
  if (v8)
  {
    *(_QWORD *)(v6 - 136) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

NSString *sub_1018CE9C8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::string *p_p;
  NSString *v6;
  NSString *v7;
  const char *v9;
  uint8_t *v10;
  std::string __p;
  gid_t buf[4];
  void *v13;
  char v14;

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D77F0);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Dumping gyro calibration database", (uint8_t *)buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D77F0);
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Dumping gyro calibration database", &__p, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual NSString *CLGyroCalibrationDatabaseLocalBase::dumpDatabase(NSString *)", "%s\n", v9);
    if (v10 != (uint8_t *)buf)
      free(v10);
  }
  sub_1018CE318((uint64_t)buf);
  sub_100633AB4(buf, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13);
  v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@-%@.db"), -[NSString stringByDeletingPathExtension](v6, "stringByDeletingPathExtension"), a2);
  if (sub_10063BA08(a1 + 112, -[NSString UTF8String](v7, "UTF8String")))
    return v7;
  else
    return 0;
}

void sub_1018CEBF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_1018CEC38(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

id sub_1018CF19C(int8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  _QWORD v10[7];
  int8x16_t v11;
  uint64_t v12;

  v8 = objc_msgSend(*(id *)(a1[2].i64[0] + 40), "silo");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1018CF238;
  v10[3] = &unk_10213E338;
  v10[4] = a4;
  v10[5] = a2;
  v10[6] = a3;
  v11 = vextq_s8(a1[2], a1[2], 8uLL);
  v12 = a1[3].i64[0];
  return objc_msgSend(v8, "async:", v10);
}

void sub_1018CF238(uint64_t a1)
{
  NSObject *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  double v8;
  uint8_t *v9;
  uint8_t *v10;
  NSObject *v11;
  id v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  unsigned int v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  double v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  uint64_t v37;
  int v38;
  id v39;
  __int16 v40;
  uint64_t v41;
  uint8_t buf[4];
  id v43;
  __int16 v44;
  uint64_t v45;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v2 = qword_10229FE38;
    if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_ERROR))
    {
      v3 = objc_msgSend(*(id *)(a1 + 40), "objectType");
      v4 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      v43 = v3;
      v44 = 2114;
      v45 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to query HealthKit for: %{public}@, error: %{public}@", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v5 = qword_10229FE38;
    v6 = objc_msgSend(*(id *)(a1 + 40), "objectType");
    v7 = *(_QWORD *)(a1 + 32);
    v38 = 138543618;
    v39 = v6;
    v40 = 2114;
    v41 = v7;
    v8 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 16, "Failed to query HealthKit for: %{public}@, error: %{public}@", &v38, 22);
    v10 = v9;
    sub_100512490("Generic", 1, 0, 0, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n", v8);
LABEL_55:
    if (v10 != buf)
LABEL_56:
      free(v10);
    return;
  }
  if (!objc_msgSend(*(id *)(a1 + 48), "count") || *(_QWORD *)(a1 + 32))
  {
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v11 = qword_10229FE38;
    if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
    {
      v12 = objc_msgSend(*(id *)(a1 + 40), "objectType");
      *(_DWORD *)buf = 138543362;
      v43 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Unable to find HealthKit results for: %{public}@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v31 = qword_10229FE38;
    v32 = objc_msgSend(*(id *)(a1 + 40), "objectType");
    v38 = 138543362;
    v39 = v32;
    v33 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 2, "Unable to find HealthKit results for: %{public}@", &v38, 12);
    v10 = v34;
    sub_100512490("Generic", 1, 0, 2, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n", v33);
    goto LABEL_55;
  }
  v13 = objc_msgSend(*(id *)(a1 + 48), "firstObject");
  if (qword_10229FE30 != -1)
    dispatch_once(&qword_10229FE30, &stru_1021D78D0);
  v14 = qword_10229FE38;
  if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138477827;
    v43 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Found HK Sample: %{private}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 == -1)
      goto LABEL_58;
    goto LABEL_61;
  }
  while (objc_msgSend(v13, "sampleType") != *(id *)(a1 + 56))
  {
    if (objc_msgSend(v13, "sampleType") == *(id *)(a1 + 72))
    {
      v26 = *(_QWORD *)(a1 + 64) + 64;
      objc_msgSend(objc_msgSend(v13, "quantity"), "_beatsPerMinute");
      *(_BYTE *)(v26 + 28) |= 2u;
      *(_QWORD *)(v26 + 16) = v27;
      if (qword_10229FE30 != -1)
        dispatch_once(&qword_10229FE30, &stru_1021D78D0);
      v28 = qword_10229FE38;
      if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
      {
        objc_msgSend(objc_msgSend(v13, "quantity"), "_beatsPerMinute");
        *(_DWORD *)buf = 134217984;
        v43 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Walking HR sample %f", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_10229FE30 != -1)
        dispatch_once(&qword_10229FE30, &stru_1021D78D0);
      v30 = qword_10229FE38;
      objc_msgSend(objc_msgSend(v13, "quantity"), "_beatsPerMinute");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "Walking HR sample %f");
      goto LABEL_50;
    }
    if (objc_msgSend(objc_msgSend(v13, "sampleType"), "isEqual:", +[HKSampleType workoutType](HKSampleType, "workoutType")))
    {
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 56), "setValue:forKey:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v13, "workoutActivityType")), CFSTR("WorkoutActivityTypeHK"));
      v15 = *(_QWORD *)(a1 + 64) + 64;
      v16 = objc_msgSend(v13, "workoutActivityType");
      *(_BYTE *)(v15 + 28) |= 4u;
      *(_DWORD *)(v15 + 24) = v16;
      if (qword_10229FE30 != -1)
        dispatch_once(&qword_10229FE30, &stru_1021D78D0);
      v17 = qword_10229FE38;
      if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
      {
        v18 = objc_msgSend(v13, "workoutActivityType");
        *(_DWORD *)buf = 134217984;
        v43 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Recieved HK Workout for activity type %lu", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_10229FE30 != -1)
        dispatch_once(&qword_10229FE30, &stru_1021D78D0);
      v19 = qword_10229FE38;
      objc_msgSend(v13, "workoutActivityType");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "Recieved HK Workout for activity type %lu", &v38);
      goto LABEL_50;
    }
    abort_report_np("Wiring bug: received unrequested sample type from HK.");
LABEL_61:
    dispatch_once(&qword_10229FE30, &stru_1021D78D0);
LABEL_58:
    v38 = 138477827;
    v39 = v13;
    LODWORD(v37) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "Found HK Sample: %{private}@", &v38, v37);
    v36 = (uint8_t *)v35;
    sub_100512490("Generic", 1, 0, 2, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n", v35);
    if (v36 != buf)
      free(v36);
  }
  v21 = *(_QWORD *)(a1 + 64) + 64;
  objc_msgSend(objc_msgSend(v13, "quantity"), "_beatsPerMinute");
  *(_BYTE *)(v21 + 28) |= 1u;
  *(_QWORD *)(v21 + 8) = v22;
  if (qword_10229FE30 != -1)
    dispatch_once(&qword_10229FE30, &stru_1021D78D0);
  v23 = qword_10229FE38;
  if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(objc_msgSend(v13, "quantity"), "_beatsPerMinute");
    *(_DWORD *)buf = 134217984;
    v43 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "Resting hr sample %f", buf, 0xCu);
  }
  if (!sub_1001BFF7C(115, 2))
    return;
  bzero(buf, 0x65CuLL);
  if (qword_10229FE30 != -1)
    dispatch_once(&qword_10229FE30, &stru_1021D78D0);
  v25 = qword_10229FE38;
  objc_msgSend(objc_msgSend(v13, "quantity"), "_beatsPerMinute");
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "Resting hr sample %f");
LABEL_50:
  v10 = (uint8_t *)v20;
  sub_100512490("Generic", 1, 0, 2, "-[CLWMHealthKit setupHealthKitQueries]_block_invoke", "%s\n", v20);
  if (v10 != buf)
    goto LABEL_56;
}

void sub_1018CFC28(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  NSObject *v6;
  id v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  uint8_t *v19;
  double v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  uint8_t *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  _BYTE v44[24];
  uint64_t v45;
  uuid_t uu;
  char out[48];
  uint8_t buf[4];
  id v49;
  __int16 v50;
  char *v51;
  __int16 v52;
  uint64_t v53;

  if (a5)
  {
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v6 = qword_10229FE38;
    if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      v49 = objc_msgSend(a5, "code");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery encountered error,%{public}ld", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v35 = qword_10229FE38;
    *(_DWORD *)out = 134349056;
    *(_QWORD *)&out[4] = objc_msgSend(a5, "code");
    v36 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v35, 16, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery encountered error,%{public}ld", out, 12);
    v27 = v37;
    sub_100512490("Generic", 1, 0, 0, "-[CLWMHealthKit queryUserEffortResponse:workoutEndTime:]_block_invoke", "%s\n", v36);
LABEL_72:
    if (v27 != buf)
      free(v27);
    return;
  }
  if (objc_msgSend(a3, "count"))
  {
    v10 = +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierWorkoutEffortScore);
    v11 = objc_msgSend(objc_msgSend(objc_msgSend(a3, "firstObject"), "samples"), "firstObject");
    if (v11)
    {
      v12 = v11;
      if ((objc_msgSend(objc_msgSend(v11, "sampleType"), "isEqual:", v10) & 1) != 0)
      {
        v13 = objc_msgSend(objc_msgSend(a3, "firstObject"), "workout");
        if (v13)
        {
          v14 = v13;
          v15 = objc_msgSend(v13, "metadata");
          v16 = _HKPrivateMetadataKeySessionUUID;
          if (objc_msgSend(v15, "objectForKey:", _HKPrivateMetadataKeySessionUUID))
          {
            v17 = objc_msgSend(objc_msgSend(v14, "metadata"), "objectForKeyedSubscript:", v16);
            memset(out, 0, 37);
            uuid_unparse((const unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 116), out);
            memset(uu, 0, sizeof(uu));
            uuid_parse((const char *)objc_msgSend(v17, "UTF8String"), uu);
            if (uuid_compare(uu, (const unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 116)))
            {
              if (qword_10229FE30 != -1)
                dispatch_once(&qword_10229FE30, &stru_1021D78D0);
              v18 = qword_10229FE38;
              if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412546;
                v49 = v17;
                v50 = 2080;
                v51 = out;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery overviewId mismatch, _HKPrivateMetadataKeySessionUUID,%@, CMSessionID,%s", buf, 0x16u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FE30 != -1)
                  dispatch_once(&qword_10229FE30, &stru_1021D78D0);
                *(_DWORD *)v44 = 138412546;
                *(_QWORD *)&v44[4] = v17;
                *(_WORD *)&v44[12] = 2080;
                *(_QWORD *)&v44[14] = out;
                v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery overviewId mismatch, _HKPrivateMetadataKeySessionUUID,%@, CMSessionID,%s", v44, 22, *(_OWORD *)v44, *(_QWORD *)&v44[16]);
LABEL_62:
                v27 = v19;
                sub_100512490("Generic", 1, 0, 2, "-[CLWMHealthKit queryUserEffortResponse:workoutEndTime:]_block_invoke", "%s\n", v20);
                goto LABEL_72;
              }
            }
            else
            {
              v28 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
              objc_msgSend(objc_msgSend(v12, "startDate"), "timeIntervalSinceReferenceDate");
              objc_msgSend(v28, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("UserEffortResponseStartDate"));
              v29 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
              objc_msgSend(objc_msgSend(v12, "endDate"), "timeIntervalSinceReferenceDate");
              objc_msgSend(v29, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("UserEffortResponseEndDate"));
              v30 = *(void **)(*(_QWORD *)(a1 + 32) + 56);
              objc_msgSend(objc_msgSend(v12, "quantity"), "doubleValueForUnit:", +[HKUnit appleEffortScoreUnit](HKUnit, "appleEffortScoreUnit"));
              objc_msgSend(v30, "setValue:forKey:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"), CFSTR("UserEffortResponse"));
              if (qword_10229FE30 != -1)
                dispatch_once(&qword_10229FE30, &stru_1021D78D0);
              v31 = qword_10229FE38;
              if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
              {
                v32 = objc_msgSend(v12, "startDate");
                v33 = (char *)objc_msgSend(v12, "endDate");
                objc_msgSend(objc_msgSend(v12, "quantity"), "doubleValueForUnit:", +[HKUnit appleEffortScoreUnit](HKUnit, "appleEffortScoreUnit"));
                *(_DWORD *)buf = 138412802;
                v49 = v32;
                v50 = 2112;
                v51 = v33;
                v52 = 2048;
                v53 = v34;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLWMHealthKit,HKWorkoutEffortRelationshipQuery completed found user entered sample from %@, end %@, value %f", buf, 0x20u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FE30 != -1)
                  dispatch_once(&qword_10229FE30, &stru_1021D78D0);
                v38 = qword_10229FE38;
                v39 = objc_msgSend(v12, "startDate");
                v40 = objc_msgSend(v12, "endDate");
                objc_msgSend(objc_msgSend(v12, "quantity"), "doubleValueForUnit:", +[HKUnit appleEffortScoreUnit](HKUnit, "appleEffortScoreUnit"));
                *(_DWORD *)v44 = 138412802;
                *(_QWORD *)&v44[4] = v39;
                *(_WORD *)&v44[12] = 2112;
                *(_QWORD *)&v44[14] = v40;
                *(_WORD *)&v44[22] = 2048;
                v45 = v41;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 2, "CLWMHealthKit,HKWorkoutEffortRelationshipQuery completed found user entered sample from %@, end %@, value %f", v44, 32);
                v43 = (uint8_t *)v42;
                sub_100512490("Generic", 1, 0, 2, "-[CLWMHealthKit queryUserEffortResponse:workoutEndTime:]_block_invoke", "%s\n", v42);
                if (v43 != buf)
                  free(v43);
              }
              objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 96), "stopQuery:", a2);
            }
          }
          else
          {
            if (qword_10229FE30 != -1)
              dispatch_once(&qword_10229FE30, &stru_1021D78D0);
            v26 = qword_10229FE38;
            if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery,_HKPrivateMetadataKeySessionUUID is nil, returning", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FE30 != -1)
                dispatch_once(&qword_10229FE30, &stru_1021D78D0);
              *(_WORD *)out = 0;
              v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery,_HKPrivateMetadataKeySessionUUID is nil, returning", out, 2, *(_OWORD *)v44, *(_QWORD *)&v44[16]);
              goto LABEL_62;
            }
          }
        }
        else
        {
          if (qword_10229FE30 != -1)
            dispatch_once(&qword_10229FE30, &stru_1021D78D0);
          v25 = qword_10229FE38;
          if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery,workout object is nil,association not completed, returning", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FE30 != -1)
              dispatch_once(&qword_10229FE30, &stru_1021D78D0);
            *(_WORD *)out = 0;
            v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery,workout object is nil,association not completed, returning", out, 2, *(_OWORD *)v44, *(_QWORD *)&v44[16]);
            goto LABEL_62;
          }
        }
      }
      else
      {
        if (qword_10229FE30 != -1)
          dispatch_once(&qword_10229FE30, &stru_1021D78D0);
        v23 = qword_10229FE38;
        if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412290;
          v49 = objc_msgSend(v12, "sampleType");
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery, did not receive user response, received sampleType %@", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE30 != -1)
            dispatch_once(&qword_10229FE30, &stru_1021D78D0);
          v24 = qword_10229FE38;
          *(_DWORD *)out = 138412290;
          *(_QWORD *)&out[4] = objc_msgSend(v12, "sampleType");
          v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery, did not receive user response, received sampleType %@", out, 12, *(_OWORD *)v44, *(_QWORD *)&v44[16]);
          goto LABEL_62;
        }
      }
    }
    else
    {
      if (qword_10229FE30 != -1)
        dispatch_once(&qword_10229FE30, &stru_1021D78D0);
      v22 = qword_10229FE38;
      if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery, sample Array is nil", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FE30 != -1)
          dispatch_once(&qword_10229FE30, &stru_1021D78D0);
        *(_WORD *)out = 0;
        v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery, sample Array is nil", out, 2, *(_OWORD *)v44, *(_QWORD *)&v44[16]);
        goto LABEL_62;
      }
    }
  }
  else
  {
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v21 = qword_10229FE38;
    if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery returned empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE30 != -1)
        dispatch_once(&qword_10229FE30, &stru_1021D78D0);
      *(_WORD *)out = 0;
      v20 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 2, "CLWMHealthKit, HKWorkoutEffortRelationshipQuery returned empty", out, 2, *(_OWORD *)v44, *(_QWORD *)&v44[16]);
      goto LABEL_62;
    }
  }
}

void sub_1018D0984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_1018D0BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  __int128 v8;
  _QWORD v10[6];
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "silo");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1018D0C8C;
  v10[3] = &unk_1021D7888;
  v10[4] = a4;
  v10[5] = a3;
  v11 = *(_OWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 72);
  v13 = *(_OWORD *)(a1 + 56);
  v14 = v8;
  v15 = *(_OWORD *)(a1 + 88);
  return objc_msgSend(v7, "async:", v10);
}

void sub_1018D0C8C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  int *v7;
  __objc2_class *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  const char *v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  const char *v32;
  uint8_t *v33;
  id v34;
  NSObject *v35;
  const char *v36;
  void *v37;
  uint8_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  id v45;
  __int16 v46;
  id v47;
  __int16 v48;
  id v49;
  uint8_t v50[128];
  uint8_t buf[4];
  id v52;
  __int16 v53;
  id v54;
  __int16 v55;
  id v56;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v2 = qword_10229FE38;
    if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_ERROR))
    {
      v3 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v52 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLWMHealthKit,HRSourceQuery returned with error,%{public}@", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    v37 = *(void **)(a1 + 32);
    v44 = 138543362;
    v45 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 16, "CLWMHealthKit,HRSourceQuery returned with error,%{public}@", &v44, 12);
LABEL_56:
    v38 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 0, "-[CLWMHealthKit queryHRSource:workoutEndTime:]_block_invoke", "%s\n", v36);
    if (v38 != buf)
      free(v38);
    return;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v4 = *(void **)(a1 + 40);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v50, 16);
    if (!v5)
      return;
    v6 = v5;
    v7 = &OBJC_IVAR___CLRecordingTriggerBase__transaction;
    v8 = DefaultObserver;
    v9 = *(_QWORD *)v41;
    while (1)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v41 != v9)
          objc_enumerationMutation(v4);
        v11 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)v10);
        if (objc_msgSend(objc_msgSend(v11, "sampleType"), "isEqual:", *(_QWORD *)(a1 + 48)))
        {
          if (objc_msgSend(objc_msgSend(objc_msgSend(v11, "device"), "name"), "containsString:", *(_QWORD *)(a1 + 56))&& (v12 = v7[45], objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 72)), "isEqualToString:", *(_QWORD *)(a1 + 80))))
          {
            if (v8[90].info != (__objc2_class_ro *)-1)
              dispatch_once(&qword_10229FE30, &stru_1021D78D0);
            v13 = qword_10229FE38;
            if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
            {
              v14 = objc_msgSend(objc_msgSend(v11, "device"), "name");
              v15 = objc_msgSend(objc_msgSend(v11, "device"), "model");
              v16 = objc_msgSend(objc_msgSend(v11, "device"), "firmwareVersion");
              *(_DWORD *)buf = 138412802;
              v52 = v14;
              v8 = DefaultObserver;
              v53 = 2112;
              v54 = v15;
              v7 = &OBJC_IVAR___CLRecordingTriggerBase__transaction;
              v55 = 2112;
              v56 = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLWMHealthKIt, HRSourceQuery, source name: %@,  source model : %@, source fw : %@", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v8[90].info != (__objc2_class_ro *)-1)
                dispatch_once(&qword_10229FE30, &stru_1021D78D0);
              v28 = qword_10229FE38;
              v29 = objc_msgSend(objc_msgSend(v11, "device"), "name");
              v30 = objc_msgSend(objc_msgSend(v11, "device"), "model");
              v31 = objc_msgSend(objc_msgSend(v11, "device"), "firmwareVersion");
              v44 = 138412802;
              v45 = v29;
              v46 = 2112;
              v47 = v30;
              v48 = 2112;
              v49 = v31;
              LODWORD(v39) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "CLWMHealthKIt, HRSourceQuery, source name: %@,  source model : %@, source fw : %@", &v44, v39);
              v33 = (uint8_t *)v32;
              sub_100512490("Generic", 1, 0, 2, "-[CLWMHealthKit queryHRSource:workoutEndTime:]_block_invoke", "%s\n", v32);
              if (v33 != buf)
                free(v33);
              v7 = &OBJC_IVAR___CLRecordingTriggerBase__transaction;
              v8 = DefaultObserver;
            }
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(v11, "device"), "name"), *(_QWORD *)(a1 + 72));
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(v11, "device"), "model"), *(_QWORD *)(a1 + 88));
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "setObject:forKeyedSubscript:", objc_msgSend(objc_msgSend(v11, "device"), "firmwareVersion"), *(_QWORD *)(a1 + 96));
            v17 = objc_msgSend(objc_msgSend(v11, "device"), "hardwareVersion");
          }
          else
          {
            if ((objc_msgSend(objc_msgSend(objc_msgSend(v11, "device"), "name"), "containsString:", *(_QWORD *)(a1 + 56)) & 1) != 0)goto LABEL_31;
            if (v8[90].info != (__objc2_class_ro *)-1)
              dispatch_once(&qword_10229FE30, &stru_1021D78D0);
            v18 = qword_10229FE38;
            if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_DEBUG))
            {
              v19 = objc_msgSend(objc_msgSend(v11, "device"), "name");
              v20 = objc_msgSend(objc_msgSend(v11, "device"), "model");
              v21 = objc_msgSend(objc_msgSend(v11, "device"), "firmwareVersion");
              *(_DWORD *)buf = 138412802;
              v52 = v19;
              v7 = &OBJC_IVAR___CLRecordingTriggerBase__transaction;
              v53 = 2112;
              v54 = v20;
              v8 = DefaultObserver;
              v55 = 2112;
              v56 = v21;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLWMHealthKit, 3rd party data HRSourceQuery, source name: %@,  source model : %@, source fw : %@", buf, 0x20u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v8[90].info != (__objc2_class_ro *)-1)
                dispatch_once(&qword_10229FE30, &stru_1021D78D0);
              v22 = qword_10229FE38;
              v23 = objc_msgSend(objc_msgSend(v11, "device"), "name");
              v24 = objc_msgSend(objc_msgSend(v11, "device"), "model");
              v25 = objc_msgSend(objc_msgSend(v11, "device"), "firmwareVersion");
              v44 = 138412802;
              v45 = v23;
              v46 = 2112;
              v47 = v24;
              v48 = 2112;
              v49 = v25;
              LODWORD(v39) = 32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 2, "CLWMHealthKit, 3rd party data HRSourceQuery, source name: %@,  source model : %@, source fw : %@", &v44, v39);
              v27 = (uint8_t *)v26;
              sub_100512490("Generic", 1, 0, 2, "-[CLWMHealthKit queryHRSource:workoutEndTime:]_block_invoke", "%s\n", v26);
              if (v27 != buf)
                free(v27);
              v7 = &OBJC_IVAR___CLRecordingTriggerBase__transaction;
              v8 = DefaultObserver;
            }
            v12 = v7[45];
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 72));
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 88));
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 96));
            v17 = *(id *)(a1 + 112);
          }
          objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + v12), "setObject:forKeyedSubscript:", v17, *(_QWORD *)(a1 + 104));
        }
LABEL_31:
        v10 = (char *)v10 + 1;
      }
      while (v6 != v10);
      v34 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v40, v50, 16);
      v6 = v34;
      if (!v34)
        return;
    }
  }
  if (qword_10229FE30 != -1)
    dispatch_once(&qword_10229FE30, &stru_1021D78D0);
  v35 = qword_10229FE38;
  if (os_log_type_enabled((os_log_t)qword_10229FE38, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "CLWMHealthKit,HRSourceQuery HR returned empty", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE30 != -1)
      dispatch_once(&qword_10229FE30, &stru_1021D78D0);
    LOWORD(v44) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE38, 16, "CLWMHealthKit,HRSourceQuery HR returned empty", &v44, 2);
    goto LABEL_56;
  }
}

void sub_1018D1760(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018D178C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v9[6];

  v8 = sub_100238258();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1018D1808;
  v9[3] = &unk_1021D7920;
  v9[4] = a2;
  v9[5] = a4;
  sub_100024998(v8, a1, a3, (uint64_t)v9);
}

uint64_t sub_1018D1808(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7958);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GyroBias received by DeviceMotion in daemon", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7958);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "GyroBias received by DeviceMotion in daemon", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroBiasEstimatorClientLocal::registerWithGyroBiasEstimatorPrivate(CLGyroBiasEstimatorClientCallback, BOOL, void *)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 32))(a2, *(_QWORD *)(a1 + 40));
}

void sub_1018D19A8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100238258();
  sub_100024998(v2, a1, 0, 0);
}

uint64_t sub_1018D19D4()
{
  uint64_t result;

  result = sub_10021C350();
  if (result)
    operator new();
  return result;
}

void sub_1018D1A2C()
{
  operator delete();
}

void sub_1018D1A54(uint64_t a1)
{
  nullsub_34(a1);
  operator delete();
}

void sub_1018D1A78(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

id sub_1018D1BC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  _QWORD v8[7];

  v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 40), "silo");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1018D1C48;
  v8[3] = &unk_10212BBA8;
  v8[4] = *(_QWORD *)(a1 + 32);
  v8[5] = a2;
  v8[6] = a3;
  return objc_msgSend(v6, "async:", v8);
}

id sub_1018D1C48(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "handleBrightnessClientNotification:withValue:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1018D1D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_1018D21AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onWatchOrientationNotification:data:", a2, a3);
}

void sub_1018D2314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018D2494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018D2548(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

id sub_1018D2668(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "recordWorkoutSessionEvent:", a2);
}

void sub_1018D3050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018D34A4(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_1018D34D0(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v34;

  v5 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = (_QWORD *)*v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return 0;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v5;
  v12[2] = a3;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = *((_QWORD *)a1 + 1);
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = *((_QWORD *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      *((_QWORD *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_10025955C();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = *(_QWORD **)a1;
  *(_QWORD *)a1 = v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v22)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v31)
  {
    *v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v30[v5] = a1 + 4;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return 1;
}

void sub_1018D38A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1018D3B04()
{
  uint64_t v0;

  sub_100015E88(v0);
  operator delete();
}

id sub_1018D3B4C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onCompassCalibrationData:", a1);
}

void sub_1018D4148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018D4304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018D43AC(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018D43D8(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

uint64_t sub_1018D4404(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018D4418(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018D4434(uint64_t a1)
{
  sub_1018D471C(a1);
  operator delete();
}

id sub_1018D4458(uint64_t a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  const char *v13;
  uint8_t *v14;
  void **v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[25];
  _OWORD __dst[4];
  _BYTE v27[25];
  int v28;
  unint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  int v35;
  uint8_t buf[4];
  unint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  int v43;

  if (a4 >= 0x59)
    v8 = 89;
  else
    v8 = a4;
  memcpy(__dst, __src, v8);
  if (a4 >= 0x5A)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7AC0);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v37 = (unint64_t)"N24CMMotionCoprocessorReply18CompassCalibrationE" & 0x7FFFFFFFFFFFFFFFLL;
      v38 = 2048;
      v39 = 89;
      v40 = 2048;
      v41 = a4;
      v42 = 1024;
      v43 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7AC0);
      v28 = 136315906;
      v29 = (unint64_t)"N24CMMotionCoprocessorReply18CompassCalibrationE" & 0x7FFFFFFFFFFFFFFFLL;
      v30 = 2048;
      v31 = 89;
      v32 = 2048;
      v33 = a4;
      v34 = 1024;
      v35 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v28, 38, (size_t)v15, v16);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CMMotionCoprocessorReply::CompassCalibration>::dispatchData(int, const void *, size_t) [T = CMMotionCoprocessorReply::CompassCalibration]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(void **)(a1 + 32);
  v15 = _NSConcreteStackBlock;
  v16 = 3221225472;
  v17 = sub_1018D4770;
  v18 = &unk_1021D7AA0;
  v19 = v10;
  v23 = __dst[2];
  v24 = __dst[3];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  *(_OWORD *)&v25[9] = *(_OWORD *)&v27[9];
  v21 = __dst[0];
  v22 = __dst[1];
  v20 = *(_OWORD *)(a1 + 16);
  return objc_msgSend(v11, "async:", &v15);
}

uint64_t sub_1018D471C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D7A58;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1018D4770(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 56, *(_QWORD *)(a1 + 48));
  return result;
}

void sub_1018D47B0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1018D4920()
{
  operator delete();
}

id sub_1018D4944(uint64_t a1, uint64_t a2, void *a3)
{
  return _objc_msgSend(a3, "onAccelerometer800Data:count:", a1, a2);
}

void sub_1018D4D10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018D4DC4(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018D4DF0(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = &off_1021D7B10;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_1018D4F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1018D4F48(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018D4F5C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018D4F78(uint64_t a1)
{
  sub_1018D5098(a1);
  operator delete();
}

__n128 sub_1018D4F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v22[8];
  unsigned int v23;

  v3 = (_OWORD *)(*(_QWORD *)(a1 + 56) + 224 * *(unsigned int *)(a1 + 64));
  v4 = *(_OWORD *)(a3 + 80);
  v6 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v3[4] = *(_OWORD *)(a3 + 64);
  v3[5] = v4;
  v3[2] = v6;
  v3[3] = v5;
  v7 = *(_OWORD *)(a3 + 144);
  v9 = *(_OWORD *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 112);
  v3[8] = *(_OWORD *)(a3 + 128);
  v3[9] = v7;
  v3[6] = v9;
  v3[7] = v8;
  v10 = *(_OWORD *)(a3 + 208);
  v12 = *(_OWORD *)(a3 + 160);
  v11 = *(_OWORD *)(a3 + 176);
  v3[12] = *(_OWORD *)(a3 + 192);
  v3[13] = v10;
  v3[10] = v12;
  v3[11] = v11;
  result = *(__n128 *)a3;
  v14 = *(_OWORD *)(a3 + 16);
  *v3 = *(_OWORD *)a3;
  v3[1] = v14;
  v15 = *(_DWORD *)(a1 + 68);
  v16 = *(_DWORD *)(a1 + 64) + 1;
  *(_DWORD *)(a1 + 64) = v16;
  if (v16 >= v15)
  {
    v18 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(void **)(a1 + 16);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1018D5108;
    v22[3] = &unk_1021579E0;
    v22[4] = v19;
    v22[5] = v18;
    v23 = v16;
    v22[6] = v20;
    v22[7] = v17;
    objc_msgSend(v21, "async:", v22);
    operator new[]();
  }
  return result;
}

uint64_t sub_1018D5090(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_1018D5098(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1021D7B10;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_1018D5108(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
    (*(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 64), *(_QWORD *)(a1 + 56));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    operator delete[]();
  return result;
}

void sub_1018D5564()
{
  operator delete();
}

id sub_1018D5590(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onAccelerometerData:", a1);
}

void sub_1018D5824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

id sub_1018D5840(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 72), "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (*(_QWORD *)(a2 + 7824) & 0xFF0000FF00) != 0), CFSTR("SensorRecordingActiveAndEnabled"));
}

void sub_1018D5930(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

_QWORD *sub_1018D595C(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021D7B68;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018D5A88;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1018D5A9C;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1018D5A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018D5A88(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018D5A9C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018D5AB8(uint64_t a1)
{
  sub_1018D5D70(a1);
  operator delete();
}

id sub_1018D5ADC(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  int v39;

  if (a4 >= 0x18)
    v8 = 24;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7B90);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v33 = (unint64_t)"N15CLAccelerometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v34 = 2048;
      v35 = 24;
      v36 = 2048;
      v37 = a4;
      v38 = 1024;
      v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D7B90);
      v24 = 136315906;
      v25 = (unint64_t)"N15CLAccelerometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v26 = 2048;
      v27 = 24;
      v28 = 2048;
      v29 = a4;
      v30 = 1024;
      v31 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v24, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLAccelerometer::Sample>::dispatchData(int, const void *, size_t) [T = CLAccelerometer::Sample]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1018D5DC4;
  v18[3] = &unk_102179570;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v23;
  v21 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_1018D5D70(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D7B68;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1018D5DC4(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 72));
  return result;
}

void sub_1018D5E08(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1018D5E34()
{
  sub_1015A2E04(qword_1023101B8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023101B8, (void *)&_mh_execute_header);
}

void sub_1018D5F80()
{
  operator delete();
}

id sub_1018D5FA4(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onSpectatorALSData:", a1);
}

void sub_1018D60E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018D6198(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  NSObject *v6;
  NSObject *v7;
  char *v8;
  int *v9;
  int v10;
  BOOL v11;
  id *v12;
  os_activity_scope_state_s state;
  char v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  id *v22;

  CLProfilingIdentify("CLGeomagneticModelProviderDaemon::onStatusNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v14 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGeomagneticModelProviderDaemon::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "activity";
      v21 = 2050;
      v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGeomagneticModelProviderDaemon::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v14 = 0;
  }
  if (*a2 == 2)
  {
    *(_DWORD *)buf = 0;
    (*((void (**)(id *, uint8_t *))*a4 + 22))(a4, buf);
  }
  else if (*a2 == 3 && !*((_BYTE *)a4 + 108))
  {
    v8 = (char *)a4[8];
    if (v8)
    {
      v9 = (int *)(a4 + 8);
      do
      {
        v10 = *((_DWORD *)v8 + 8);
        v11 = v10 < 0;
        if (v10 >= 0)
          v12 = (id *)v8;
        else
          v12 = (id *)(v8 + 8);
        if (!v11)
          v9 = (int *)v8;
        v8 = (char *)*v12;
      }
      while (*v12);
      if (v9 != (int *)(a4 + 8) && v9[8] <= 0 && v9[14])
      {
        *(_DWORD *)buf = 0;
        (*((void (**)(id *, uint8_t *))*a4 + 21))(a4, buf);
      }
    }
  }
  if (v14)
    os_activity_scope_leave(&state);
}

void sub_1018D63D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1018D63F4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  os_activity_scope_state_s state;
  char v13;
  _WORD v14[8];
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;

  CLProfilingIdentify("CLGeomagneticModelProviderDaemon::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGeomagneticModelProviderDaemon::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 2082;
      v20 = "activity";
      v21 = 2050;
      v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGeomagneticModelProviderDaemon::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  if (*a2 == 4 && *(_DWORD *)(a3 + 188) != 1)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v9 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "location services is now disabled; invalidating geomagnetic field data",
        buf,
        2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v14[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "location services is now disabled; invalidating geomagnetic field data",
        v14,
        2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    sub_1018D7884(a4);
  }
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_1018D66F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  if (a13)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1018D6714(uint64_t a1)
{
  sub_1018D671C(*(_QWORD *)(a1 + 32));
}

void sub_1018D671C(uint64_t a1)
{
  double Current;
  double v3;
  double v4;
  double v5;
  double v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  double v21;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(double *)(a1 + 416);
  v4 = v3 * 0.5;
  v5 = *(double *)(a1 + 168);
  if (v5 >= 0.0 && Current - v5 < v4)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v11 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_QWORD *)(a1 + 168);
      *(_DWORD *)buf = 134218240;
      v19 = v12;
      v20 = 2048;
      v21 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "current location is still fresh, not requesting coarse location for computing geomagnetic data, gmmTimestamp %.1f gmmFreshnessDuration %.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "current location is still fresh, not requesting coarse location for computing geomagnetic data, gmmTimestamp %.1f gmmFreshnessDuration %.1f");
      goto LABEL_22;
    }
  }
  else
  {
    v7 = v3 * 0.4;
    if (Current - *(double *)(a1 + 424) >= v3 * 0.4)
    {
      if (!*(_BYTE *)(a1 + 408) && *(_QWORD *)(a1 + 400))
      {
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        v14 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "requesting coarse location for computing geomagnetic data", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          LOWORD(v17) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "requesting coarse location for computing geomagnetic data", &v17, 2);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::startCoarseLocationUpdates()", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 400) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8), 2, 0);
        *(_BYTE *)(a1 + 408) = 1;
        *(double *)(a1 + 424) = Current;
        objc_msgSend(*(id *)(a1 + 376), "setNextFireDelay:", 20.0);
      }
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v8 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(a1 + 424);
        *(_DWORD *)buf = 134218240;
        v19 = v9;
        v20 = 2048;
        v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "avoiding frequent coarse location request for computing geomagnetic data, fLastCoarseLocationRequestTimestamp %.1f minimumLocationRequestInterval %.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "avoiding frequent coarse location request for computing geomagnetic data, fLastCoarseLocationRequestTimestamp %.1f minimumLocationRequestInterval %.1f");
LABEL_22:
        v13 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::startCoarseLocationUpdates()", "%s\n", v10);
        if (v13 != buf)
          free(v13);
      }
    }
  }
}

id sub_1018D6BC0(uint64_t a1)
{
  return sub_10014F7DC(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1018D6BC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1021D7BC0;
  sub_1018D6C74((uint64_t)a1);
  v2 = a1[50];
  a1[50] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[49];
  a1[49] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[48];
  a1[48] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100BCD638((uint64_t)(a1 + 22));
  return sub_100D78FAC(a1);
}

void sub_1018D6C50(_QWORD *a1)
{
  sub_1018D6BC8(a1);
  operator delete();
}

void sub_1018D6C74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_100D78ED8(a1);
  v2 = *(_QWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 392);
  *(_QWORD *)(a1 + 392) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

}

__n128 sub_1018D6CE8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;
  __int128 v4;

  v2 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 144);
  v4 = *(_OWORD *)(a1 + 160);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

void sub_1018D6CFC(uint64_t a1)
{
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  uint8_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  __double2 v18;
  __double2 v19;
  __int128 v20;
  __int128 v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint8_t buf[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (*(double *)(a1 + 168) >= 0.0)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v5 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "loadGeomagneticDataFromCache already loaded", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      LOWORD(v28) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "loadGeomagneticDataFromCache already loaded", &v28, 2);
      goto LABEL_19;
    }
  }
  else
  {
    v2 = sub_100BCF098(a1 + 176);
    if ((v2 - 1) > 1)
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v7 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "loadGeomagneticDataFromCache loading with authorization status %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        v28 = 67240192;
        LODWORD(v29) = v2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "loadGeomagneticDataFromCache loading with authorization status %{public}d", &v28, 8);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      v27 = 0;
      v8 = sub_1001FD94C();
      if (sub_100527258(v8, CFSTR("GeomagneticModel"), (CFTypeRef *)&v27) && objc_msgSend(v27, "count") == (id)4)
      {
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 0), "doubleValue");
        v10 = v9;
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 1), "doubleValue");
        v12 = v11;
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 2), "doubleValue");
        v14 = v13;
        objc_msgSend(objc_msgSend(v27, "objectAtIndexedSubscript:", 3), "doubleValue");
        v16 = v15;
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        v17 = qword_10229FD48;
        if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(_QWORD *)&buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "recovered geomagnetic information @ %{public}.3f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD40 != -1)
            dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
          v28 = 134349056;
          v29 = v10;
          LODWORD(v26) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "recovered geomagnetic information @ %{public}.3f", &v28, v26);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        *(double *)(a1 + 160) = v16;
        *(_QWORD *)(a1 + 168) = v10;
        *(double *)(a1 + 136) = v12;
        *(double *)(a1 + 152) = v14;
        v18 = __sincos_stret(v16 * 0.0174532924);
        *(double *)(a1 + 144) = v12 * v18.__cosval;
        v19 = __sincos_stret(v14 * 0.0174532924);
        *(double *)(a1 + 112) = v19.__cosval * (v12 * v18.__cosval);
        *(double *)(a1 + 120) = v19.__sinval * (v12 * v18.__cosval);
        *(double *)(a1 + 128) = v12 * v18.__sinval;
        v20 = *(_OWORD *)(a1 + 128);
        *(_OWORD *)buf = *(_OWORD *)(a1 + 112);
        v31 = v20;
        v21 = *(_OWORD *)(a1 + 160);
        v32 = *(_OWORD *)(a1 + 144);
        v33 = v21;
        v28 = 0;
        (*(void (**)(uint64_t, int *, uint8_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v28, buf, 1, 0xFFFFFFFFLL, 0);
        objc_msgSend(*(id *)(a1 + 368), "setNextFireDelay:", *(double *)(a1 + 416));
      }
    }
    else
    {
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v3 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "loadGeomagneticDataFromCache not loading because deauthorized (%{public}d)", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        v28 = 67240192;
        LODWORD(v29) = v2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "loadGeomagneticDataFromCache not loading because deauthorized (%{public}d)", &v28, 8);
LABEL_19:
        v6 = (uint8_t *)v4;
        sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::loadGeomagneticDataFromCache()", "%s\n", v4);
        if (v6 != buf)
          free(v6);
      }
    }
  }
}

uint64_t sub_1018D733C(uint64_t a1, int *a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[4];
  uint8_t buf[8];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Client requested notification %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v8 = *a2;
    v13[0] = 67109120;
    v13[1] = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Client requested notification %d", v13);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!*(_QWORD *)(a1 + 400))
    sub_100E4F1B8();
  if (!*a2)
  {
    sub_1018D6CFC(a1);
    sub_1018D671C(a1);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 400) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8), 4, 0);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v6 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "registered as location spectator to compute geomagnetic data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      LOWORD(v13[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "registered as location spectator to compute geomagnetic data", v13, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return 1;
}

uint64_t sub_1018D76C0(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (!*a2)
  {
    sub_10014F7DC(a1);
    v3 = *(_QWORD *)(a1 + 400);
    if (v3)
    {
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 4);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v4 = qword_10229FD48;
      if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "unregistered as location spectator to compute geomagnetic data", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD40 != -1)
          dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "unregistered as location spectator to compute geomagnetic data", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLGeomagneticModelProviderDaemon::unregisterForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
    objc_msgSend(*(id *)(a1 + 368), "setNextFireDelay:", 1.79769313e308);
  }
  return 1;
}

void sub_1018D7884(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  NSObject *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _OWORD v15[3];
  __int128 v16;
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;

  *(_QWORD *)(a1 + 424) = 0;
  if (*(double *)(a1 + 168) >= 0.0)
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v5 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "invalidateGeomagneticField invalidating", buf, 2u);
    }
    v6 = (_OWORD *)(a1 + 112);
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "invalidateGeomagneticField invalidating", v15, 2);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    objc_msgSend(*(id *)(a1 + 368), "setNextFireDelay:", 1.79769313e308);
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *v6 = 0u;
    *(_QWORD *)(a1 + 168) = 0xBFF0000000000000;
    v7 = *(_OWORD *)(a1 + 128);
    v15[0] = *v6;
    v15[1] = v7;
    v8 = *(_OWORD *)(a1 + 160);
    v15[2] = *(_OWORD *)(a1 + 144);
    v16 = v8;
    v9 = sub_1001FD94C();
    sub_1005254E4(v9);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v10 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v20 = *((_QWORD *)&v16 + 1);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Geomagnetic model data invalidated. Sending notification with timestamp %f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      v17 = 134217984;
      v18 = *((_QWORD *)&v16 + 1);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 2, "Geomagnetic model data invalidated. Sending notification with timestamp %f", COERCE_DOUBLE(&v17));
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    *(_DWORD *)buf = 0;
    (*(void (**)(uint64_t, uint8_t *, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v15, 1, 0xFFFFFFFFLL, 0);
  }
  else
  {
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
    v1 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "invalidateGeomagneticField already invalid", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_1021D7CD0);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "invalidateGeomagneticField already invalid", v15, 2);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
}

uint64_t sub_1018D7D14(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1018D7D8C;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023101D0 != -1)
    dispatch_once(&qword_1023101D0, block);
  return qword_102311548;
}

void sub_1018D7D8C()
{
  operator new();
}

void sub_1018D80A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a30 < 0)
    operator delete(__p);
  v33 = *(_QWORD *)(v30 + 400);
  *(_QWORD *)(v30 + 400) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *(_QWORD *)(v30 + 392);
  *(_QWORD *)(v30 + 392) = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *v32;
  *v32 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_100BCD638(v31);
  sub_100D78FAC(v30);
  operator delete();
}

uint64_t sub_1018D81A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t **v4;
  _QWORD *v5;
  int *v7;
  _QWORD v8[2];
  uint64_t *v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 108))
    return 0xFFFFFFFFLL;
  v7 = (int *)v8;
  v8[0] = 0;
  v8[1] = 0;
  v9 = a2;
  v3 = (unsigned int *)(a1 + 104);
  ++*(_DWORD *)(a1 + 104);
  v10 = (_DWORD *)(a1 + 104);
  v4 = sub_1000823D0((uint64_t **)(a1 + 80), (int *)(a1 + 104), (uint64_t)&unk_101B9EB60, &v10);
  if (v4 + 5 != (uint64_t **)&v7)
    sub_1001CA4BC(v4 + 5, v7, (int *)v8);
  v5 = (_QWORD *)v8[0];
  v4[8] = v9;
  v2 = *v3;
  sub_100008848((uint64_t)&v7, v5);
  return v2;
}

void sub_1018D8258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_100008848((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_1018D8270(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::removeClient(int) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1018D84E4(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1018D8510(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1018D853C(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
}

uint64_t sub_1018D8568(uint64_t a1)
{
  uint64_t result;
  CLNotifierServiceAdapter *v3;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(_QWORD *)(a1 + 48) = v3;
    -[CLNotifierServiceAdapter setValid:](v3, "setValid:", 1);
    objc_msgSend(*(id *)(a1 + 48), "setAdaptedNotifier:", a1);
    return *(_QWORD *)(a1 + 48);
  }
  return result;
}

BOOL sub_1018D85B4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1018D8834(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_1018D8BBC(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (v4)
  {
    v5 = *a2;
    v6 = v2;
    do
    {
      v7 = *(_DWORD *)(v3 + 32);
      v8 = v7 < v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
      sub_100346F9C((_QWORD *)(v6 + 64));
  }
}

uint64_t sub_1018D8C08(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  uint64_t **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v14;
  __int128 v15;
  int *v16;

  v6 = (char *)operator new(0x58uLL);
  v7 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 40) = v7;
  v8 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_1021D7D00;
  *(_OWORD *)(v6 + 72) = v8;
  *(_QWORD *)&v15 = v6 + 24;
  *((_QWORD *)&v15 + 1) = v6;
  v14 = *a2;
  v16 = &v14;
  v9 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v14, (uint64_t)&unk_101B9EB60, &v16);
  sub_1002B7674((uint64_t)(v9 + 8), &v15);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return 1;
}

void sub_1018D8CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018D8CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[4];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1018D8D3C(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v32[20];
  __int16 v33;
  _QWORD *v34;
  __int16 v35;
  std::__shared_weak_count *v36;
  _QWORD **v37;
  _QWORD *v38[3];
  std::__shared_weak_count *v39;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v32 = 2082;
      *(_QWORD *)&v32[2] = "";
      *(_WORD *)&v32[10] = 2082;
      *(_QWORD *)&v32[12] = "activity";
      v33 = 2082;
      v34 = v10;
      v35 = 2050;
      v36 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v37 = v38;
      memset(v38, 0, sizeof(v38));
      v39 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v37);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v32, *(_QWORD **)&v32[8]);
      v21 = v39;
      if (v39)
      {
        v22 = (unint64_t *)&v39->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v37, v38[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x58uLL);
      v25 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *(_OWORD *)(v24 + 40) = v25;
      v26 = a3[3];
      *(_OWORD *)(v24 + 56) = a3[2];
      *((_QWORD *)v24 + 1) = 0;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_1021D7D00;
      *(_OWORD *)(v24 + 72) = v26;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v32 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v27 = *(std::__shared_weak_count **)v32;
      if (*(_QWORD *)v32)
      {
        v28 = (unint64_t *)(*(_QWORD *)v32 + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1018D99D4();
    os_activity_scope_leave(&state);
  }
}

void sub_1018D9384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1018D93D4(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1018D997C(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1018D99A8(id a1)
{
  qword_10229FD48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1018D99D4()
{
  operator new();
}

void sub_1018D9A6C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100043FC8(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1002454E4(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021D7CB0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

void sub_1018D9E40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D7D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018D9E50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D7D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018D9E80(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1018D9EA0(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1018DA208((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGeomagneticModelProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1018DA208(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;

  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221DFE8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)64)
    {
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021D7D28);
      v4 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D7D28);
      }
      v5 = qword_10229FC38;
      if (os_signpost_enabled((os_log_t)qword_10229FC38))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D7D28);
      }
      v6 = qword_10229FC38;
      if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        v8 = 0;
        v9 = 2082;
        v10 = "";
        v11 = 2082;
        v12 = "assert";
        v13 = 2081;
        v14 = "sizeof(Object_T) == podContainer.serialized.length";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
    }
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1018DA4B8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1018DA4E4(_QWORD *a1)
{
  sub_1011FD80C(a1);
}

void sub_1018DA598(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_1018BE328(v2);
  sub_1011FD9DC(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1018DA5CC(uint64_t a1, void *__dst)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 272);
  if (*(_BYTE *)(a1 + 272))
    memcpy(__dst, (const void *)(a1 + 584), 0x140uLL);
  return v2 != 0;
}

BOOL sub_1018DA608(uint64_t a1, void *__dst)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 256);
  if (*(_BYTE *)(a1 + 256))
    memcpy(__dst, (const void *)(a1 + 568), 0x140uLL);
  return v2 != 0;
}

void sub_1018DA644(uint64_t a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7F60);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Starting gyro calibration, user initiated, %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7F60);
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Starting gyro calibration, user initiated, %d", v10);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalNonlinear::startCalibration(BOOL)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (!*(_QWORD *)(a1 + 576))
  {
    -[CLDeviceMotionProperties initWithMode:]([CLDeviceMotionProperties alloc], "initWithMode:", 19);
    operator new();
  }
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7F60);
  v7 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "assert";
    v17 = 2081;
    v18 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7F60);
  }
  v8 = off_10229FD58;
  if (os_signpost_enabled((os_log_t)off_10229FD58))
  {
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "assert";
    v17 = 2081;
    v18 = "!fDeviceMotionDispatcher";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7F60);
  }
  v9 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289539;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 2082;
    v16 = "assert";
    v17 = 2081;
    v18 = "!fDeviceMotionDispatcher";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalNonlinear.mm", 51, "startCalibration");
  __break(1u);
}

void sub_1018DAAB0()
{
  operator delete();
}

void sub_1018DAAE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = sub_1002433D4();
  sub_1011932BC(v2, *(_QWORD *)(v1 + 576), 1.0);
}

void sub_1018DAB08(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7F60);
  v2 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stopped gyro calibration", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7F60);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 0, "Stopped gyro calibration", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalNonlinear::teardown()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_QWORD *)(a1 + 576))
  {
    v3 = sub_1002433D4();
    sub_101193558(v3, *(_QWORD *)(a1 + 576));
    v4 = *(_QWORD *)(a1 + 576);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    *(_QWORD *)(a1 + 576) = 0;
  }
}

uint64_t sub_1018DACC8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

id sub_1018DACD4(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 16;
  sub_1018BB988(a1 + 16);
  sub_1018BC710(v2);
  objc_msgSend(*(id *)(a1 + 280), "setNextFireDelay:", 1.79769313e308);
  return objc_msgSend(*(id *)(a1 + 288), "setNextFireDelay:", 1.79769313e308);
}

uint64_t sub_1018DAD28(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 16;
  v2 = *(_QWORD *)(a1 + 16);
  *(double *)(a1 + 296) = a2;
  (*(void (**)(uint64_t, uint64_t))(v2 + 288))(a1 + 16, a1 + 592);
  return sub_1018BC66C(v3);
}

void sub_1018DAD60(uint64_t a1)
{
  double Current;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  NSObject *v26;
  const char *v27;
  void **v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _OWORD __src[18];
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *__p;
  char *v35;
  uint64_t v36;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(_QWORD *)(a1 + 304);
  v4 = *(_QWORD *)(a1 + 312);
  v5 = *(unsigned __int8 *)(a1 + 271);
  v6 = *(_QWORD *)(a1 + 328);
  v7 = *(std::__shared_weak_count **)(a1 + 336);
  v29 = v6;
  v30 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    memset(__src, 0, 282);
    v32 = v6;
    v33 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    memset(__src, 0, 282);
    v32 = v6;
    v33 = 0;
  }
  sub_1018DB380(v3, v4, &v32, (uint64_t)&__p);
  sub_1013168C4((float **)&__p, v5 != 0, (uint64_t)__src);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
  v11 = v33;
  if (v33)
  {
    v12 = (unint64_t *)&v33->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  __p = 0;
  v35 = 0;
  v36 = 0;
  if (v4 != v3)
  {
    sub_100259C18(&__p, (v4 - v3) >> 5);
    v14 = 0;
    v15 = v35;
    do
    {
      v16 = &v15[v14];
      v17 = *(_OWORD *)v3;
      *((_QWORD *)v16 + 2) = *(_QWORD *)(v3 + 16);
      *(_OWORD *)v16 = v17;
      v3 += 32;
      v14 += 24;
    }
    while (v3 != v4);
    v35 = &v15[v14];
  }
  sub_101316C64((uint64_t)__src, (uint64_t *)&__p, v5 != 0, Current);
  if (__p)
  {
    v35 = (char *)__p;
    operator delete(__p);
  }
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_DWORD *)(a1 + 584) = 2;
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 296);
  *(double *)(a1 + 600) = Current;
  v20 = *(float **)(a1 + 304);
  v21 = *(float **)(a1 + 312);
  if (v20 == v21)
  {
    v23 = 3.4028e38;
    v22 = 1.1755e-38;
  }
  else
  {
    v22 = 1.1755e-38;
    v23 = 3.4028e38;
    do
    {
      v24 = *v20;
      v20 += 8;
      v25 = v24;
      if (v24 < v23)
        v23 = v25;
      if (v25 > v22)
        v22 = v25;
    }
    while (v20 != v21);
  }
  *(float *)(a1 + 608) = v23;
  *(float *)(a1 + 612) = v22;
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a1 + 273);
  memcpy((void *)(a1 + 617), __src, 0x11AuLL);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D7F60);
  v26 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Nonlinear gyro database computed fit.", (uint8_t *)&__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D7F60);
    LOWORD(v32) = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, off_10229FD58, 1, "Nonlinear gyro database computed fit.", &v32, 2, v29);
    v28 = (void **)v27;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalNonlinear::computeFit()", "%s\n", v27);
    if (v28 != &__p)
      free(v28);
  }
  *(_BYTE *)(a1 + 272) = 1;
}

void sub_1018DB154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *__p,uint64_t a52)
{
  if (__p)
  {
    a52 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1018DB1AC(uint64_t a1)
{
  sub_1018DAD60(a1 - 16);
}

_BYTE *sub_1018DB1B4(_BYTE *result)
{
  if (result[272])
  {
    result[616] = result[273];
    return (_BYTE *)sub_1018BC66C((uint64_t)(result + 16));
  }
  return result;
}

uint64_t sub_1018DB1D4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 256))
  {
    *(_BYTE *)(a1 + 600) = *(_BYTE *)(a1 + 257);
    return sub_1018BC66C(a1);
  }
  return a1;
}

void sub_1018DB1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100793B2C((_QWORD *)(a1 + 568), a2, a3);
}

void sub_1018DB1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100793B2C((_QWORD *)(a1 + 552), a2, a3);
}

void sub_1018DB1FC(uint64_t a1, uint64_t a2, double a3)
{
  sub_100793C04((_QWORD *)(a1 + 568), a2, a3);
}

void sub_1018DB204(uint64_t a1, uint64_t a2, double a3)
{
  sub_100793C04((_QWORD *)(a1 + 552), a2, a3);
}

_QWORD *sub_1018DB20C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021D7D58;
  *(_QWORD *)(a1 + 16) = off_1021D7DD8;
  v2 = a1 + 16;
  sub_100793B28((id *)(a1 + 568));
  sub_1018BE328(v2);
  return sub_1011FD9DC((_QWORD *)a1);
}

void sub_1018DB254(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1021D7D58;
  *(_QWORD *)(a1 + 16) = off_1021D7DD8;
  v2 = a1 + 16;
  sub_100793B28((id *)(a1 + 568));
  sub_1018BE328(v2);
  sub_1011FD9DC((_QWORD *)a1);
  operator delete();
}

_QWORD *sub_1018DB2B0(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 - 16) = off_1021D7D58;
  v2 = (_QWORD *)(a1 - 16);
  *(_QWORD *)a1 = off_1021D7DD8;
  sub_100793B28((id *)(a1 + 552));
  sub_1018BE328(a1);
  return sub_1011FD9DC(v2);
}

void sub_1018DB2F8(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)(a1 - 16) = off_1021D7D58;
  v2 = (_QWORD *)(a1 - 16);
  *(_QWORD *)a1 = off_1021D7DD8;
  sub_100793B28((id *)(a1 + 552));
  sub_1018BE328(a1);
  sub_1011FD9DC(v2);
  operator delete();
}

void sub_1018DB354(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

uint64_t sub_1018DB380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  _OWORD v25[9];

  memset(v25, 0, 140);
  sub_1018DB874((_QWORD *)a4, 0xAFuLL);
  for (; a1 != a2; a1 += 32)
  {
    v8 = (int)(float)(*(float *)a1 * 0.5);
    if (v8 <= 0x22)
    {
      v9 = *((_DWORD *)v25 + v8);
      *((_DWORD *)v25 + v8) = v9 + 1;
      if (v9 < 5 || (v9 = (**(uint64_t (***)(_QWORD))*a3)(*a3), v9 <= 4))
      {
        v10 = v9 + 5 * v8;
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3) <= v10)
        {
          if (qword_10229FD50 != -1)
            goto LABEL_19;
          while (1)
          {
            v14 = off_10229FD58;
            if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 68289539;
              v18 = 0;
              v19 = 2082;
              v20 = "";
              v21 = 2082;
              v22 = "assert";
              v23 = 2081;
              v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_10229FD50 != -1)
                dispatch_once(&qword_10229FD50, &stru_1021D7F60);
            }
            v15 = off_10229FD58;
            if (os_signpost_enabled((os_log_t)off_10229FD58))
            {
              *(_DWORD *)buf = 68289539;
              v18 = 0;
              v19 = 2082;
              v20 = "";
              v21 = 2082;
              v22 = "assert";
              v23 = 2081;
              v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_10229FD50 != -1)
                dispatch_once(&qword_10229FD50, &stru_1021D7F60);
            }
            v16 = off_10229FD58;
            if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 68289539;
              v18 = 0;
              v19 = 2082;
              v20 = "";
              v21 = 2082;
              v22 = "assert";
              v23 = 2081;
              v24 = "targetStratum * kStrataSize + target < samples.size()";
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            }
            abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasFitter.h", 83, "stratifiedRandomSample");
            __break(1u);
LABEL_19:
            dispatch_once(&qword_10229FD50, &stru_1021D7F60);
          }
        }
        v11 = *(_QWORD *)a4 + 24 * v10;
        *(_DWORD *)v11 = *(_DWORD *)a1;
        *(_DWORD *)(v11 + 4) = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(v11 + 12) = *(_DWORD *)(a1 + 12);
        *(_QWORD *)(v11 + 16) = *(_QWORD *)(a1 + 16);
      }
    }
  }
  *(_DWORD *)buf = 0;
  v12 = sub_1018DB758(*(__int128 **)a4, *(__int128 **)(a4 + 8), (unsigned int *)buf, (uint64_t)v25);
  return sub_1018DB80C(a4, (uint64_t)v12, *(_QWORD *)(a4 + 8));
}

void sub_1018DB730(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__int128 *sub_1018DB758(__int128 *result, __int128 *a2, unsigned int *a3, uint64_t a4)
{
  unsigned int i;
  __int128 *j;
  unint64_t v6;
  unsigned int v7;
  __int128 v8;

  if (result != a2)
  {
    for (i = *a3; ; ++i)
    {
      *a3 = i + 1;
      if (i % 5 >= *(_DWORD *)(a4 + 4 * (i / 5uLL)))
        break;
      result = (__int128 *)((char *)result + 24);
      if (result == a2)
        return a2;
    }
  }
  if (result != a2)
  {
    for (j = (__int128 *)((char *)result + 24); j != a2; j = (__int128 *)((char *)j + 24))
    {
      v6 = *a3 / 5uLL;
      v7 = *a3 % 5;
      ++*a3;
      if (v7 < *(_DWORD *)(a4 + 4 * v6))
      {
        v8 = *j;
        *((_QWORD *)result + 2) = *((_QWORD *)j + 2);
        *result = v8;
        result = (__int128 *)((char *)result + 24);
      }
    }
  }
  return result;
}

uint64_t sub_1018DB80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (a2 != a3)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = a2;
    if (a3 != v3)
    {
      v5 = 8 * ((a3 - a2) >> 3);
      v4 = a2;
      do
      {
        v6 = *(_OWORD *)(v4 + v5);
        *(_QWORD *)(v4 + 16) = *(_QWORD *)(v4 + v5 + 16);
        *(_OWORD *)v4 = v6;
        v4 += 24;
      }
      while (v4 + v5 != v3);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a2;
}

_QWORD *sub_1018DB874(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100259C18(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1018DB8F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DB910(_QWORD *a1)
{
  sub_100DE1374(a1);
  operator delete();
}

BOOL sub_1018DB934(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  int v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021D7FE8);
  v3 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v4 = *a2;
    *(_DWORD *)buf = 136315394;
    v16 = "PreviousCoverOpenTimestamp";
    v17 = 2048;
    v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Setting property %s to %f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7FE8);
    v7 = *a2;
    v11 = 136315394;
    v12 = "PreviousCoverOpenTimestamp";
    v13 = 2048;
    v14 = v7;
    LODWORD(v10) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Setting property %s to %f", (const char *)&v11, v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCoverStateDaemon::setLastCoverStateChangeTimestamp(const CFAbsoluteTime &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = sub_1001FD94C();
  return sub_10018A4CC(v5, "PreviousCoverOpenTimestamp", a2);
}

double sub_1018DBB20()
{
  uint64_t v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  double v5;
  int v6;
  double v7;
  uint8_t buf[4];
  double v9;

  v5 = 0.0;
  v0 = sub_1001FD94C();
  if ((sub_1001FD98C(v0, "PreviousCoverOpenTimestamp", &v5) & 1) == 0)
    v5 = -1.0;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021D7FE8);
  v1 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Last cover open timestamp = %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D7FE8);
    v6 = 134217984;
    v7 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Last cover open timestamp = %f", COERCE_DOUBLE(&v6));
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual CFAbsoluteTime CLCoverStateDaemon::getLastCoverStateChangeTimestamp()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v5;
}

void sub_1018DBCF0()
{
  operator new();
}

void sub_1018DBD40()
{
  operator delete();
}

double sub_1018DBD64()
{
  return -1.0;
}

void sub_1018DBD6C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1018DCAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void sub_1018DD4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_1018DDEE8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSMutableURLRequest *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSURL *v20;
  id v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t buf[1640];
  _BYTE v27[128];

  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v6 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v23 != v8)
        objc_enumerationMutation(a4);
      v10 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v9);
      v20 = 0;
      v21[0] = 0;
      sub_1018DE2CC(objc_msgSend(v10, "taskDescription"), v21, &v20);
      if (objc_msgSend(v21[0], "isEqualToString:", CFSTR("registration")))
        break;
      if (v7 == (id)++v9)
      {
        v7 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    if (qword_10229FE40 != -1)
      dispatch_once(&qword_10229FE40, &stru_1021D8030);
    v16 = qword_10229FE48;
    if (os_log_type_enabled((os_log_t)qword_10229FE48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Registration request already in progress.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE40 != -1)
        dispatch_once(&qword_10229FE40, &stru_1021D8030);
      LOWORD(v19) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE48, 0, "Registration request already in progress.", &v19, 2, v19);
      goto LABEL_28;
    }
  }
  else
  {
LABEL_9:
    v11 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 104));
    -[NSMutableURLRequest setAllowsCellularAccess:](v11, "setAllowsCellularAccess:", 0);
    -[NSMutableURLRequest setHTTPMethod:](v11, "setHTTPMethod:", CFSTR("POST"));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80);
    if (v12)
      -[NSMutableURLRequest setValue:forHTTPHeaderField:](v11, "setValue:forHTTPHeaderField:", v12, CFSTR("Authorization"));
    -[NSMutableURLRequest setValue:forHTTPHeaderField:](v11, "setValue:forHTTPHeaderField:", CFSTR("application/octet-stream"), CFSTR("Content-Type"));
    -[NSMutableURLRequest setValue:forHTTPHeaderField:](v11, "setValue:forHTTPHeaderField:", CFSTR("application/json"), CFSTR("Accept"));
    v13 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "downloadTaskWithRequest:", v11);
    objc_msgSend(v13, "setTaskDescription:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@::%@"), CFSTR("registration"), &stru_1021D8FB8));
    objc_msgSend(v13, "resume");
    if (qword_10229FE40 != -1)
      dispatch_once(&qword_10229FE40, &stru_1021D8030);
    v14 = qword_10229FE48;
    if (os_log_type_enabled((os_log_t)qword_10229FE48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Created request for registration.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE40 != -1)
        dispatch_once(&qword_10229FE40, &stru_1021D8030);
      LOWORD(v21[0]) = 0;
      LODWORD(v18) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE48, 0, "Created request for registration.", v21, v18, v19);
LABEL_28:
      v17 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "-[CLWorkoutRecorderPublisher sendRegisterRequest]_block_invoke", "%s\n", v15);
      if (v17 != buf)
        free(v17);
    }
  }
}

NSURL *sub_1018DE2CC(void *a1, _QWORD *a2, NSURL **a3)
{
  id v6;
  NSURL *result;

  if (a2)
  {
    if (a3)
      goto LABEL_3;
  }
  else
  {
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void parseTaskDescription(NSString *, NSString **, NSURL **)"), CFSTR("CLWorkoutRecorderPublisher.mm"), 558, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("requestType"));
    if (a3)
      goto LABEL_3;
  }
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void parseTaskDescription(NSString *, NSString **, NSURL **)"), CFSTR("CLWorkoutRecorderPublisher.mm"), 559, CFSTR("Invalid parameter not satisfying: %@"), CFSTR("requestURL"));
LABEL_3:
  v6 = objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("::"));
  if (objc_msgSend(v6, "count") == (id)2)
  {
    *a2 = objc_msgSend(v6, "objectAtIndexedSubscript:", 0);
    result = +[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", objc_msgSend(v6, "objectAtIndexedSubscript:", 1));
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  *a3 = result;
  return result;
}

void sub_1018DE468(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  NSMutableURLRequest *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSURL *v21;
  id v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[1640];
  _BYTE v28[128];

  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v6 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v24;
LABEL_3:
    v9 = 0;
    while (1)
    {
      if (*(_QWORD *)v24 != v8)
        objc_enumerationMutation(a4);
      v10 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * v9);
      v21 = 0;
      v22[0] = 0;
      sub_1018DE2CC(objc_msgSend(v10, "taskDescription"), v22, &v21);
      if (objc_msgSend(v22[0], "isEqualToString:", CFSTR("configuration")))
        break;
      if (v7 == (id)++v9)
      {
        v7 = objc_msgSend(a4, "countByEnumeratingWithState:objects:count:", &v23, v28, 16);
        if (v7)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    if (qword_10229FE40 != -1)
      dispatch_once(&qword_10229FE40, &stru_1021D8030);
    v17 = qword_10229FE48;
    if (os_log_type_enabled((os_log_t)qword_10229FE48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Request for configuration already in progress.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE40 != -1)
        dispatch_once(&qword_10229FE40, &stru_1021D8030);
      LOWORD(v20) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE48, 0, "Request for configuration already in progress.", &v20, 2, v20);
      goto LABEL_28;
    }
  }
  else
  {
LABEL_9:
    v11 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120));
    -[NSMutableURLRequest setAllowsCellularAccess:](v11, "setAllowsCellularAccess:", 0);
    -[NSMutableURLRequest setHTTPMethod:](v11, "setHTTPMethod:", CFSTR("GET"));
    v12 = *(_QWORD *)(a1 + 32);
    v13 = *(_QWORD *)(v12 + 80);
    if (v13)
    {
      -[NSMutableURLRequest setValue:forHTTPHeaderField:](v11, "setValue:forHTTPHeaderField:", v13, CFSTR("Authorization"));
      v12 = *(_QWORD *)(a1 + 32);
    }
    v14 = objc_msgSend(*(id *)(v12 + 16), "downloadTaskWithRequest:", v11);
    objc_msgSend(v14, "setTaskDescription:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@::%@"), CFSTR("configuration"), &stru_1021D8FB8));
    objc_msgSend(v14, "resume");
    if (qword_10229FE40 != -1)
      dispatch_once(&qword_10229FE40, &stru_1021D8030);
    v15 = qword_10229FE48;
    if (os_log_type_enabled((os_log_t)qword_10229FE48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Created request for configuration.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE40 != -1)
        dispatch_once(&qword_10229FE40, &stru_1021D8030);
      LOWORD(v22[0]) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE48, 0, "Created request for configuration.", v22, v19, v20);
LABEL_28:
      v18 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "-[CLWorkoutRecorderPublisher sendConfigurationRequest]_block_invoke", "%s\n", v16);
      if (v18 != buf)
        free(v18);
    }
  }
}

id sub_1018DEA6C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sendRegisterRequest");
}

id sub_1018DEB34(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "sendConfigurationRequest");
}

void sub_1018E0018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1018E003C(void *a1)
{
  id v1;

  v1 = objc_msgSend(objc_msgSend(a1, "lastPathComponent"), "lowercaseString");
  return !v1
      || (objc_msgSend(v1, "isEqualToString:", -[NSString lowercaseString](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "53681040-29d2-4420-988a-adbdf2f02905"), "lowercaseString")) & 1) == 0;
}

void sub_1018E1D78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1018E1DCC(id a1)
{
  qword_10229FE48 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorderPublisher");
}

void sub_1018E1DF8(id a1)
{
  qword_1022A02B8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "QA");
}

uint64_t sub_1018E1E24(uint64_t a1)
{
  sub_10010E39C(*(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1018E1E4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018E2724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1018E29DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void **v53;

  if (a53 < 0)
    operator delete(*v53);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1018E2E18(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

void sub_1018E2ECC(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t *sub_1018E2EF8(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)qword_1023101D8)
  {
    qword_1023101D8 = *(_QWORD *)qword_1023101D8;
    a3 = *a2;
  }
  result = sub_10025F800((uint64_t *)qword_1023101E0, a3);
  ++qword_1023101E8;
  return result;
}

_QWORD *sub_1018E2F54(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      goto LABEL_23;
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 62)
LABEL_23:
      sub_100259694();
    result = operator new(4 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v11;
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v17 = (void *)*result;
LABEL_21:
    result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *v13 = &v9[v12];
  return result;
}

uint64_t sub_1018E3090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  int v29;
  uint64_t **v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  _OWORD *v34;
  _OWORD *v35;
  _DWORD v37[2];
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;

  v37[0] = 0;
  v38 = objc_opt_class(CLWMAccelerometer, a2);
  v39 = 1;
  v40 = objc_opt_class(CLWMAccelerometer800, v2);
  v41 = 2;
  v42 = objc_opt_class(CLWMAveragedALS, v3);
  v43 = 3;
  v44 = objc_opt_class(CLWMBrightnessALS, v4);
  v45 = 4;
  v46 = objc_opt_class(CLWMCalorimetry, v5);
  v47 = 5;
  v48 = objc_opt_class(CLWMCompassCalibration, v6);
  v49 = 6;
  v50 = objc_opt_class(CLWMDeviceMotion, v7);
  v51 = 7;
  v52 = objc_opt_class(CLWMElevationmeter, v8);
  v53 = 8;
  v54 = objc_opt_class(CLWMFaceCovered, v9);
  v55 = 9;
  v56 = objc_opt_class(CLWMGymKit, v10);
  v57 = 10;
  v58 = objc_opt_class(CLWMHeadsetDeviceMotion, v11);
  v59 = 11;
  v60 = objc_opt_class(CLWMHealthKit, v12);
  v61 = 12;
  v62 = objc_opt_class(CLWMHeartRate, v13);
  v63 = 13;
  v64 = objc_opt_class(CLWMMagnetometer, v14);
  v65 = 14;
  v66 = objc_opt_class(CLWMMotionState, v15);
  v67 = 15;
  v68 = objc_opt_class(CLWMOdometer, v16);
  v69 = 16;
  v70 = objc_opt_class(CLWMPressure, v17);
  v71 = 17;
  v72 = objc_opt_class(CLWMSpectatorALS, v18);
  v73 = 18;
  v74 = objc_opt_class(CLWMWatchOrientation, v19);
  v21 = 0;
  v22 = 0;
  v75 = 19;
  v76 = objc_opt_class(CLWMWifiScans, v20);
  qword_1023101E8 = 0;
  qword_1023101E0 = 0;
  v23 = &qword_1023101E0;
  qword_1023101D8 = (uint64_t)&qword_1023101E0;
  while (1)
  {
    v24 = &v37[4 * v22];
    if (v23 == &qword_1023101E0)
    {
      v26 = &qword_1023101E0;
LABEL_10:
      if (v21)
      {
        v30 = (uint64_t **)(v26 + 1);
        if (v26[1])
          goto LABEL_23;
      }
      else
      {
LABEL_21:
        v30 = (uint64_t **)&qword_1023101E0;
        v26 = &qword_1023101E0;
      }
LABEL_22:
      v33 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v33 + 2) = *v24;
      sub_1018E2EF8((uint64_t)v26, v30, v33);
      goto LABEL_23;
    }
    v25 = (uint64_t *)v21;
    if (v21)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)v25[1];
      }
      while (v25);
    }
    else
    {
      v27 = &qword_1023101E0;
      do
      {
        v26 = (uint64_t *)v27[2];
        v28 = *v26 == (_QWORD)v27;
        v27 = v26;
      }
      while (v28);
    }
    v29 = *(_DWORD *)v24;
    if (*((_DWORD *)v26 + 8) < *(_DWORD *)v24)
      goto LABEL_10;
    if (!v21)
      goto LABEL_21;
    v31 = v21;
    while (1)
    {
      while (1)
      {
        v26 = (uint64_t *)v31;
        v32 = *(_DWORD *)(v31 + 32);
        if (v32 <= v29)
          break;
        v31 = *v26;
        v30 = (uint64_t **)v26;
        if (!*v26)
          goto LABEL_22;
      }
      if (v32 >= v29)
        break;
      v31 = v26[1];
      if (!v31)
      {
        v30 = (uint64_t **)(v26 + 1);
        goto LABEL_22;
      }
    }
LABEL_23:
    if (++v22 == 20)
      break;
    v23 = (uint64_t *)qword_1023101D8;
    v21 = qword_1023101E0;
  }
  __cxa_atexit((void (*)(void *))sub_1018E1E24, &qword_1023101D8, (void *)&_mh_execute_header);
  qword_1023101F8 = 0;
  unk_102310200 = 0;
  qword_1023101F0 = 0;
  v34 = operator new(0x4CuLL);
  qword_1023101F0 = (uint64_t)v34;
  v34[2] = xmmword_101CEB420;
  v34[3] = unk_101CEB430;
  *(_OWORD *)((char *)v34 + 60) = unk_101CEB43C;
  *v34 = xmmword_101CEB400;
  v34[1] = unk_101CEB410;
  qword_1023101F8 = (uint64_t)v34 + 76;
  unk_102310200 = (char *)v34 + 76;
  __cxa_atexit((void (*)(void *))sub_1018E1E4C, &qword_1023101F0, (void *)&_mh_execute_header);
  qword_102310210 = 0;
  unk_102310218 = 0;
  qword_102310208 = 0;
  v35 = operator new(0x40uLL);
  qword_102310208 = (uint64_t)v35;
  *v35 = xmmword_101CEB44C;
  v35[1] = unk_101CEB45C;
  v35[2] = xmmword_101CEB46C;
  v35[3] = unk_101CEB47C;
  qword_102310210 = (uint64_t)(v35 + 4);
  unk_102310218 = v35 + 4;
  __cxa_atexit((void (*)(void *))sub_1018E1E4C, &qword_102310208, (void *)&_mh_execute_header);
  qword_102310220 = 0;
  qword_102310228 = 0;
  unk_102310230 = 0;
  return __cxa_atexit((void (*)(void *))sub_1018E1E4C, &qword_102310220, (void *)&_mh_execute_header);
}

void sub_1018E34B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_10010E39C(v1);
  _Unwind_Resume(a1);
}

void sub_1018E356C(id a1)
{
  qword_102310248 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMotionHintLoggerSilo"));
}

void sub_1018E39A4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  double v10;
  CFAbsoluteTime Current;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_activity_scope_state_s state;
  char v32;
  size_t v33;
  _QWORD v34[4];
  __int16 v35;
  _DWORD v36[2];
  __int16 v37;
  int v38;
  uint8_t v39[4];
  int v40;
  __int16 v41;
  int v42;
  char __s1[256];
  uint64_t buf;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  CFAbsoluteTime v51;
  uint64_t v52;
  char v53;

  CLProfilingIdentify("CLMotionHintLogger::onDaemonStatus");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D81C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v32 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionHintLogger::onDaemonStatus", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D81C0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289538;
      v45 = 2082;
      v46 = "";
      v47 = 2082;
      v48 = "activity";
      v49 = 2050;
      v50 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionHintLogger::onDaemonStatus\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    v32 = 0;
  }
  v34[0] = off_1021724D8;
  v9 = mach_absolute_time();
  v10 = sub_100127828(v9);
  *(double *)&v34[3] = v10;
  Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)&v34[1] = Current;
  sub_1015EB864(&buf);
  sub_1016051B8((uint64_t)&buf);
  v53 |= 1u;
  v51 = Current;
  v12 = v52;
  *(_BYTE *)(v52 + 24) |= 1u;
  *(double *)(v12 + 8) = v10;
  v33 = 0;
  switch(*a2)
  {
    case 2:
      v35 = 4;
      v13 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v13 + 16) = 4;
      v14 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v14 + 20) = 0;
      goto LABEL_39;
    case 3:
      v22 = sysctlbyname("kern.wakereason", __s1, &v33, 0, 0);
      HIBYTE(v35) = 1;
      v23 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v23 + 20) = 1;
      if (v22 < 0)
        goto LABEL_38;
      if (strstr(__s1, "hold"))
      {
        v24 = 2;
      }
      else if (strstr(__s1, "menu"))
      {
        v24 = 3;
      }
      else if (strstr(__s1, "rtc"))
      {
        v24 = 4;
      }
      else if (strstr(__s1, "wlan"))
      {
        v24 = 5;
      }
      else
      {
        if (!strstr(__s1, "baseband"))
          goto LABEL_38;
        v24 = 6;
      }
      HIBYTE(v35) = v24;
      v28 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v28 + 20) = v24;
LABEL_38:
      LOBYTE(v35) = 4;
      v29 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v29 + 16) = 4;
LABEL_39:
      v30 = sub_1011B78D4();
      sub_1011B8DB0(v30, (uint64_t)v34);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021D8200);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)&buf);
LABEL_43:
      sub_1015EE304((PB::Base *)&buf);
      if (v32)
        os_activity_scope_leave(&state);
      return;
    case 7:
      if (*((_DWORD *)a3 + 3) == 4)
        v15 = 13;
      else
        v15 = 3;
      LOBYTE(v35) = v15;
      v16 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v16 + 16) = v15;
      HIBYTE(v35) = a3[9];
      v17 = HIBYTE(v35);
      v18 = v52;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v18 + 20) = v17;
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D81E0);
      v19 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v39 = 67240448;
        v40 = v15;
        v41 = 1026;
        v42 = v17;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#Notice gesture charging type %{public}d value %{public}d", v39, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v39, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021D81E0);
        v36[0] = 67240448;
        v36[1] = v15;
        v37 = 1026;
        v38 = v17;
        _os_log_send_and_compose_impl(2, 0, v39, 1628, &_mh_execute_header, qword_10229FC78, 2, "#Notice gesture charging type %{public}d value %{public}d", v36, 14);
        v21 = (uint8_t *)v20;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionHintLogger::onDaemonStatus(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v20);
        if (v21 != v39)
          free(v21);
      }
      goto LABEL_39;
    case 0xA:
      v25 = 6;
      goto LABEL_28;
    case 0xB:
      v25 = 7;
LABEL_28:
      LOBYTE(v35) = v25;
      HIBYTE(v35) = *a3;
      v26 = v52;
      *(_BYTE *)(v52 + 24) |= 2u;
      *(_DWORD *)(v26 + 16) = v25;
      v27 = v52;
      LODWORD(v26) = *a3;
      *(_BYTE *)(v52 + 24) |= 4u;
      *(_DWORD *)(v27 + 20) = v26;
      goto LABEL_39;
    default:
      goto LABEL_43;
  }
}

void sub_1018E3F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  sub_1015EE304((PB::Base *)&STACK[0x7D0]);
  if (a13)
    os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1018E3FDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (uint64_t *)sub_100A07FA0();
  v6 = 0x10000000BLL;
  v7 = 0;
  sub_1018E4078(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_1002B7674(v1 + 152, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_100A0A4BC(*(uint64_t **)(v1 + 152), (uint64_t)sub_1018E4138, v1);
}

void sub_1018E4078(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t *v13;

  v13 = a1;
  sub_100412484((int *)a2, (int *)(a2 + 4), (char *)(a2 + 8), (uint64_t *)&v13, a3);
  v5 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_100A083CC(a1, &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1018E411C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E4138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int IntegerValue;
  int v7;
  uint64_t v8;
  unint64_t TimeStamp;
  double v10;
  NSObject *v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t buf;
  __int16 v21;
  _BOOL4 v22;
  CFAbsoluteTime v23;
  uint64_t v24;
  char v25;
  uint64_t (**v26)();
  CFAbsoluteTime v27;
  double v28;
  char v29;
  BOOL v30;

  result = IOHIDEventGetType(a4);
  if ((_DWORD)result == 3)
  {
    IntegerValue = IOHIDEventGetIntegerValue(a4, 196608);
    result = IOHIDEventGetIntegerValue(a4, 196609);
    if (IntegerValue == 12)
    {
      v7 = result;
      v8 = IOHIDEventGetIntegerValue(a4, 196610);
      TimeStamp = IOHIDEventGetTimeStamp(a4);
      v10 = sub_100127828(TimeStamp);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D81E0);
      v11 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67240448;
        HIDWORD(buf) = v7;
        v21 = 1026;
        v22 = v8 == 1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Notice gesture button %{public}d down %{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021D81E0);
        LODWORD(v26) = 67240448;
        HIDWORD(v26) = v7;
        LOWORD(v27) = 1026;
        *(_DWORD *)((char *)&v27 + 2) = v8 == 1;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice gesture button %{public}d down %{public}d", &v26, 14);
        v19 = (char *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionHintLogger::onButton(int, BOOL, const CFTimeInterval)", "%s\n", v18);
        if (v19 != (char *)&buf)
          free(v19);
      }
      v26 = off_1021724D8;
      v28 = v10;
      Current = CFAbsoluteTimeGetCurrent();
      v27 = Current;
      v30 = v8 == 1;
      sub_1015EB864(&buf);
      sub_1016051B8((uint64_t)&buf);
      v25 |= 1u;
      v23 = Current;
      v13 = v24;
      *(_BYTE *)(v24 + 24) |= 1u;
      *(double *)(v13 + 8) = v10;
      v14 = v24;
      *(_BYTE *)(v24 + 24) |= 4u;
      *(_DWORD *)(v14 + 20) = v8 == 1;
      if (v7 == 48)
        v15 = 2;
      else
        v15 = v7 == 64;
      v29 = v15;
      v16 = v24;
      *(_BYTE *)(v24 + 24) |= 2u;
      *(_DWORD *)(v16 + 16) = v15;
      v17 = sub_1011B78D4();
      sub_1011B8DB0(v17, (uint64_t)&v26);
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021D8200);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)&buf);
      return sub_1015EE304((PB::Base *)&buf);
    }
  }
  return result;
}

void sub_1018E448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018E44AC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  CFAbsoluteTime Current;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  os_activity_scope_state_s state;
  char v25;
  _WORD v26[8];
  _QWORD v27[4];
  char v28;
  char v29;
  char v30;
  uint8_t v31[1632];
  uint64_t buf;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  CFAbsoluteTime v39;
  uint64_t v40;
  char v41;

  CLProfilingIdentify("CLMotionHintLogger::onTelephonyNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D81C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v25 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionHintLogger::onTelephonyNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D81C0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      buf = 68289538;
      v33 = 2082;
      v34 = "";
      v35 = 2082;
      v36 = "activity";
      v37 = 2050;
      v38 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionHintLogger::onTelephonyNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", (uint8_t *)&buf, 0x26u);
    }
  }
  else
  {
    v25 = 0;
  }
  v8 = (const void *)sub_1001DEC98(a2);
  if (CFEqual(v8, kCTCallStatusChangeNotification))
  {
    v30 = 1;
    v9 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetActiveCall:", &v30);
    v27[0] = off_1021724D8;
    v10 = mach_absolute_time();
    v11 = sub_100127828(v10);
    *(double *)&v27[3] = v11;
    Current = CFAbsoluteTimeGetCurrent();
    *(CFAbsoluteTime *)&v27[1] = Current;
    v28 = 5;
    sub_1015EB864(&buf);
    sub_1016051B8((uint64_t)&buf);
    v41 |= 1u;
    v39 = Current;
    v13 = v40;
    *(_BYTE *)(v40 + 24) |= 1u;
    *(double *)(v13 + 8) = v11;
    v14 = v40;
    *(_BYTE *)(v40 + 24) |= 2u;
    *(_DWORD *)(v14 + 16) = 5;
    if (v30)
      v15 = v9;
    else
      v15 = 0;
    if (v15 == 1)
    {
      v29 = 1;
      v16 = v40;
      *(_BYTE *)(v40 + 24) |= 4u;
      *(_DWORD *)(v16 + 20) = 1;
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D81E0);
      v17 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Notice gesture IN CALL", v31, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_27;
      bzero(v31, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D81E0);
      v26[0] = 0;
      _os_log_send_and_compose_impl(2, 0, v31, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice gesture IN CALL", v26, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionHintLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v18);
    }
    else
    {
      v29 = 0;
      v20 = v40;
      *(_BYTE *)(v40 + 24) |= 4u;
      *(_DWORD *)(v20 + 20) = 0;
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D81E0);
      v21 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Notice gesture OUT OF CALL", v31, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_27;
      bzero(v31, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D81E0);
      v26[0] = 0;
      _os_log_send_and_compose_impl(2, 0, v31, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice gesture OUT OF CALL", v26, 2);
      v19 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionHintLogger::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v23);
    }
    if (v19 != v31)
      free(v19);
LABEL_27:
    v22 = sub_1011B78D4();
    sub_1011B8DB0(v22, (uint64_t)v27);
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_1021D8200);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)&buf);
    sub_1015EE304((PB::Base *)&buf);
  }
  if (v25)
    os_activity_scope_leave(&state);
}

void sub_1018E4A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, os_activity_scope_state_s state, char a13)
{
  sub_1015EE304((PB::Base *)&STACK[0x6D0]);
  if (a13)
    os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E4A60(uint64_t *a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v10;
  const char *v11;
  uint8_t *v12;
  uint8_t buf[616];
  CFAbsoluteTime v14;
  uint64_t v15;
  char v16;
  uint64_t (**v17)();
  CFAbsoluteTime Current;
  uint64_t v19;
  int v20;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021D81E0);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((_DWORD *)a1 + 2);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Notice proximity detection mask %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D81E0);
    v10 = *((_DWORD *)a1 + 2);
    LODWORD(v17) = 67240192;
    HIDWORD(v17) = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice proximity detection mask %{public}d", &v17, 8);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionHintLogger::onProximity(const CLProximityNotifier::Sample *)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  v17 = off_102171780;
  v19 = *a1;
  Current = CFAbsoluteTimeGetCurrent();
  v20 = *((_DWORD *)a1 + 2);
  v4 = sub_1011B78D4();
  sub_1011B8DB0(v4, (uint64_t)&v17);
  sub_1015EB864(buf);
  sub_101604EFC((uint64_t)buf);
  v16 |= 1u;
  v14 = Current;
  v5 = v15;
  v6 = *a1;
  *(_BYTE *)(v15 + 20) |= 1u;
  *(_QWORD *)(v5 + 8) = v6;
  v7 = v15;
  v8 = *((_DWORD *)a1 + 2);
  *(_BYTE *)(v15 + 20) |= 2u;
  *(_DWORD *)(v7 + 16) = v8;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021D8200);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)buf);
  return sub_1015EE304((PB::Base *)buf);
}

void sub_1018E4CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E4D04()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[252];
  uint64_t v8;
  char v9;
  uint64_t (**v10)();
  CFAbsoluteTime Current;
  double v12;
  __int16 v13;

  v10 = off_1021724D8;
  v0 = mach_absolute_time();
  v12 = sub_100127828(v0);
  Current = CFAbsoluteTimeGetCurrent();
  v13 = 8;
  v1 = sub_1011B78D4();
  sub_1011B8DB0(v1, (uint64_t)&v10);
  sub_1015EB864(v7);
  sub_1016051B8((uint64_t)v7);
  v2 = v12;
  *(CFAbsoluteTime *)&v7[77] = Current;
  v9 |= 1u;
  v3 = v8;
  *(_BYTE *)(v8 + 24) |= 1u;
  *(double *)(v3 + 8) = v2;
  v4 = v8;
  *(_BYTE *)(v8 + 24) |= 2u;
  *(_DWORD *)(v4 + 16) = 8;
  v5 = v8;
  *(_BYTE *)(v8 + 24) |= 4u;
  *(_DWORD *)(v5 + 20) = 0;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021D8200);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v7);
  return sub_1015EE304((PB::Base *)v7);
}

void sub_1018E4E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1015EE304((PB::Base *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E4E24(unsigned __int8 *a1)
{
  int v1;
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  _QWORD v9[252];
  uint64_t v10;
  char v11;

  v1 = *a1;
  sub_1015EB864(v9);
  sub_1016051B8((uint64_t)v9);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  v3 = v10;
  v4 = mach_absolute_time();
  v5 = sub_100127828(v4);
  *(_BYTE *)(v3 + 24) |= 1u;
  *(double *)(v3 + 8) = v5;
  v6 = v10;
  if (v1)
    v7 = 9;
  else
    v7 = 10;
  *(_BYTE *)(v10 + 24) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021D8200);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_1018E4EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E4F14(unsigned __int8 *a1)
{
  int v1;
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  int v7;
  _QWORD v9[252];
  uint64_t v10;
  char v11;

  v1 = *a1;
  sub_1015EB864(v9);
  sub_1016051B8((uint64_t)v9);
  Current = CFAbsoluteTimeGetCurrent();
  v11 |= 1u;
  *(CFAbsoluteTime *)&v9[77] = Current;
  v3 = v10;
  v4 = mach_absolute_time();
  v5 = sub_100127828(v4);
  *(_BYTE *)(v3 + 24) |= 1u;
  *(double *)(v3 + 8) = v5;
  v6 = v10;
  if (v1)
    v7 = 11;
  else
    v7 = 12;
  *(_BYTE *)(v10 + 24) |= 2u;
  *(_DWORD *)(v6 + 16) = v7;
  if (qword_1023118A8 != -1)
    dispatch_once(&qword_1023118A8, &stru_1021D8200);
  if (qword_1023118B0)
    sub_101888B64(qword_1023118B0, (uint64_t)v9);
  return sub_1015EE304((PB::Base *)v9);
}

void sub_1018E4FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E5004(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D8230;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_1018E7C04(*(_QWORD **)(a1 + 88));
  sub_1018E7C48(*(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1018E506C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v13;

  *a1 = off_1021D80C0;
  if (*((_BYTE *)a1 + 109))
  {
    objc_msgSend(*(id *)(a1[14] + 16), "unregister:forNotification:", *(_QWORD *)(a1[14] + 8), 7);
    objc_msgSend(*(id *)(a1[14] + 16), "unregister:forNotification:", *(_QWORD *)(a1[14] + 8), 2);
    objc_msgSend(*(id *)(a1[14] + 16), "unregister:forNotification:", *(_QWORD *)(a1[14] + 8), 3);
    objc_msgSend(*(id *)(a1[14] + 16), "unregister:forNotification:", *(_QWORD *)(a1[14] + 8), 10);
    objc_msgSend(*(id *)(a1[14] + 16), "unregister:forNotification:", *(_QWORD *)(a1[14] + 8), 11);
    sub_100346F9C(a1 + 19);
    v2 = a1[15];
    sub_10013F950(&v13, kCTCallStatusChangeNotification);
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), sub_1001CFE7C(&v13));
    v3 = sub_100B14EA4();
    sub_1000A4A6C(v3, 0, a1[16]);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, CFSTR("com.apple.CoreMotion.PocketState.queryStart"), 0);
    v5 = sub_100244568();
    sub_1000A4A6C(v5, 0, a1[17]);
    sub_100197040();
    if (sub_1007614BC())
    {
      v6 = sub_1000A6998();
      sub_1000A4A6C(v6, 0, a1[18]);
    }
  }
  sub_100261F44((uint64_t)(a1 + 19));
  v7 = a1[18];
  a1[18] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[17];
  a1[17] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[16];
  a1[16] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[15];
  a1[15] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[14];
  a1[14] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return sub_1018E5004((uint64_t)a1);
}

void sub_1018E521C(_QWORD *a1)
{
  sub_1018E506C(a1);
  operator delete();
}

void sub_1018E5240()
{
  operator new();
}

void sub_1018E5728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a5);
  sub_1015EE304((PB::Base *)va);
  sub_100261F44((uint64_t)(v5 + 19));
  v7 = v5[18];
  v5[18] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = v5[17];
  v5[17] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v5[16];
  v5[16] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = v5[15];
  v5[15] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *v6;
  *v6 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_1018E5004((uint64_t)v5);
  operator delete();
}

_QWORD *sub_1018E5874@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1018E58EC()
{
  return 1;
}

uint64_t sub_1018E58F4()
{
  return 1;
}

uint64_t sub_1018E58FC(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t sub_1018E5908(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  int v7;
  uint64_t **v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  int *v15;
  _QWORD v16[2];
  uint64_t v17;

  if (*(_BYTE *)(a1 + 108))
    return 0xFFFFFFFFLL;
  v15 = (int *)v16;
  v16[0] = 0;
  v16[1] = 0;
  v17 = a2;
  v5 = (uint64_t **)(a1 + 88);
  v4 = *(uint64_t **)(a1 + 88);
  v6 = *(_DWORD *)(a1 + 104);
  v7 = v6 + 1;
  *(_DWORD *)(a1 + 104) = v6 + 1;
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v4;
        v9 = *((_DWORD *)v4 + 8);
        if (v9 <= v7)
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_11;
      }
      if (v9 > v6)
        break;
      v4 = v8[1];
      if (!v4)
      {
        v5 = v8 + 1;
        goto LABEL_11;
      }
    }
    v10 = (char *)v8;
  }
  else
  {
    v8 = (uint64_t **)(a1 + 88);
LABEL_11:
    v10 = (char *)operator new(0x48uLL);
    *((_DWORD *)v10 + 8) = v7;
    *((_QWORD *)v10 + 7) = 0;
    *((_QWORD *)v10 + 8) = 0;
    *((_QWORD *)v10 + 6) = 0;
    *((_QWORD *)v10 + 5) = v10 + 48;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = v8;
    *v5 = (uint64_t *)v10;
    v11 = **(_QWORD **)(a1 + 80);
    v12 = (uint64_t *)v10;
    if (v11)
    {
      *(_QWORD *)(a1 + 80) = v11;
      v12 = *v5;
    }
    sub_10025F800(*(uint64_t **)(a1 + 88), v12);
    ++*(_QWORD *)(a1 + 96);
  }
  if (v10 + 40 != (char *)&v15)
    sub_1001CA4BC((uint64_t **)v10 + 5, v15, (int *)v16);
  v13 = (_QWORD *)v16[0];
  *((_QWORD *)v10 + 8) = v17;
  v2 = *(unsigned int *)(a1 + 104);
  sub_100008848((uint64_t)&v15, v13);
  return v2;
}

void sub_1018E5A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_100008848((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_1018E5A60(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  BOOL v9;
  uint64_t **v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t **v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t **v20;
  BOOL v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  if (!*(_BYTE *)(a1 + 108))
  {
    v5 = (uint64_t **)(a1 + 88);
    v4 = *(uint64_t **)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v6 = v5;
    v7 = v4;
    do
    {
      v8 = *((_DWORD *)v7 + 8);
      v9 = v8 < (int)a2;
      if (v8 >= (int)a2)
        v10 = (uint64_t **)v7;
      else
        v10 = (uint64_t **)(v7 + 1);
      if (!v9)
        v6 = (uint64_t **)v7;
      v7 = *v10;
    }
    while (*v10);
    if (v6 != v5 && *((_DWORD *)v6 + 8) <= (int)a2)
    {
      if (v6[7])
      {
        do
        {
          *(_DWORD *)buf = *((_DWORD *)v6[5] + 7);
          (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
        }
        while (v6[7]);
        v4 = *v5;
      }
      if (v4)
      {
        v13 = v5;
        v14 = v4;
        do
        {
          v15 = *((_DWORD *)v14 + 8);
          v16 = v15 < (int)a2;
          if (v15 >= (int)a2)
            v17 = (uint64_t **)v14;
          else
            v17 = (uint64_t **)(v14 + 1);
          if (!v16)
            v13 = (uint64_t **)v14;
          v14 = *v17;
        }
        while (*v17);
        if (v13 != v5 && *((_DWORD *)v13 + 8) <= (int)a2)
        {
          v18 = v13[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            v20 = v13;
            do
            {
              v19 = v20[2];
              v21 = *v19 == (_QWORD)v20;
              v20 = (uint64_t **)v19;
            }
            while (!v21);
          }
          if (*(uint64_t ***)(a1 + 80) == v13)
            *(_QWORD *)(a1 + 80) = v19;
          --*(_QWORD *)(a1 + 96);
          sub_10025F998(v4, (uint64_t *)v13);
          sub_100008848((uint64_t)(v13 + 5), v13[6]);
          operator delete(v13);
        }
      }
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D81C0);
      v11 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        *(_DWORD *)buf = 136446466;
        v30 = v12;
        v31 = 1026;
        v32 = a2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021D81C0);
        v22 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v22 = (_QWORD *)*v22;
        v25 = 136446466;
        v26 = v22;
        v27 = 1026;
        v28 = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v25,
          18);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::removeClient(int) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
  }
}

uint64_t sub_1018E5D74(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1000B3638(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1018E5DF4(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1018E5E20(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1018E5E4C(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
}

uint64_t sub_1018E5E78(uint64_t a1)
{
  uint64_t result;
  CLNotifierServiceAdapter *v3;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(_QWORD *)(a1 + 48) = v3;
    -[CLNotifierServiceAdapter setValid:](v3, "setValid:", 1);
    objc_msgSend(*(id *)(a1 + 48), "setAdaptedNotifier:", a1);
    return *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1018E5EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_102310238);
}

uint64_t sub_1018E5ED8(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[12];
  __int16 v41;
  int v42;
  _BYTE buf[12];
  __int16 v44;
  int v45;

  v39 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v40 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v38 = v26;
        v33 = *(_QWORD *)(v26 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v39;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1018E7DC4();
        }
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_DWORD *)buf = *a3;
        *((_BYTE *)sub_1018E7F30((uint64_t **)(a1 + 56), v17, buf) + 80) = 0;
        *(_DWORD *)buf = *a3;
        v30 = sub_1018E7F30((uint64_t **)(a1 + 56), *(int *)buf, buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        LODWORD(v38) = *a3;
        v32 = sub_1018E7F30((uint64_t **)(a1 + 56), v38, &v38);
        *(_QWORD *)buf = &v39;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v39, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v40 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D81C0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v44 = 1026;
    v45 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D81C0);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v40 = 136446466;
    *(_QWORD *)&v40[4] = v35;
    v41 = 1026;
    v42 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v40,
      18);
    v37 = (char *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

BOOL sub_1018E62E4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D81C0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D81C0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1018E6564(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D81C0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021D81C0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_1018E68EC(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  v4 = *(_QWORD *)(a1 + 64);
  v2 = a1 + 64;
  v3 = v4;
  if (v4)
  {
    v5 = *a2;
    v6 = v2;
    do
    {
      v7 = *(_DWORD *)(v3 + 32);
      v8 = v7 < v5;
      if (v7 >= v5)
        v9 = (uint64_t *)v3;
      else
        v9 = (uint64_t *)(v3 + 8);
      if (!v8)
        v6 = v3;
      v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32))
      sub_100346F9C((_QWORD *)(v6 + 64));
  }
}

uint64_t sub_1018E6938(uint64_t a1, int *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  _BYTE *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_BYTE **)(v7 + 64);
  if (!v11)
    return 0;
  *a3 = *v11;
  return 1;
}

uint64_t sub_1018E6998(uint64_t a1, int *a2, char *a3)
{
  _QWORD *v6;
  char v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;

  v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = off_1021D83D8;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  *((_BYTE *)v6 + 24) = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v8 = sub_1018E7F30((uint64_t **)(a1 + 56), v13, &v13);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_1018E6A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E6A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1018E6A9C(uint64_t a1, unsigned int *a2, _BYTE *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  int v14;
  uint64_t **v15;
  int v16;
  BOOL v17;
  uint64_t *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t **v31;
  uint64_t **v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  os_activity_scope_state_s state;
  void *__p;
  _QWORD *v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  char v49;
  uint8_t buf[8];
  _BYTE v51[40];
  char v52;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D81C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = *a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v51 = 2082;
      *(_QWORD *)&v51[2] = "";
      *(_WORD *)&v51[10] = 2082;
      *(_QWORD *)&v51[12] = "activity";
      *(_WORD *)&v51[20] = 2082;
      *(_QWORD *)&v51[22] = v10;
      *(_WORD *)&v51[30] = 2050;
      *(_QWORD *)&v51[32] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v13 = (uint64_t **)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 64);
    v14 = *a2;
    if (!v12)
      goto LABEL_18;
    v15 = (uint64_t **)(a1 + 64);
    do
    {
      v16 = *(_DWORD *)(v12 + 32);
      v17 = v16 < v14;
      if (v16 >= v14)
        v18 = (uint64_t *)v12;
      else
        v18 = (uint64_t *)(v12 + 8);
      if (!v17)
        v15 = (uint64_t **)v12;
      v12 = *v18;
    }
    while (*v18);
    if (v15 == v13 || v14 < *((_DWORD *)v15 + 8))
    {
LABEL_18:
      __p = v46;
      v46[0] = 0;
      v47 = 0;
      v48 = 0;
      v46[1] = 0;
      *(_DWORD *)buf = v14;
      sub_1004A6DBC((uint64_t *)v51, (uint64_t)&__p);
      *(_QWORD *)&v51[24] = v47;
      *(_QWORD *)&v51[32] = v48;
      if (v48)
      {
        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
      }
      v21 = v49;
      v52 = v49;
      v22 = operator new(0x58uLL);
      v15 = (uint64_t **)v22;
      v23 = *(_DWORD *)buf;
      v25 = *(_QWORD *)v51;
      v24 = *(_QWORD *)&v51[8];
      v22[6] = *(_QWORD *)&v51[8];
      v26 = (char *)(v22 + 6);
      *((_DWORD *)v22 + 8) = v23;
      v22[5] = v25;
      v27 = v22 + 5;
      v28 = *(_QWORD *)&v51[16];
      v22[7] = *(_QWORD *)&v51[16];
      if (v28)
      {
        *(_QWORD *)(v24 + 16) = v26;
        *(_QWORD *)v51 = &v51[8];
        *(_OWORD *)&v51[8] = 0uLL;
      }
      else
      {
        *v27 = v26;
      }
      *((_OWORD *)v22 + 4) = *(_OWORD *)&v51[24];
      v29 = (uint64_t)(v22 + 8);
      *(_QWORD *)&v51[24] = 0;
      *(_QWORD *)&v51[32] = 0;
      *((_BYTE *)v15 + 80) = v21;
      v30 = *v13;
      v31 = (uint64_t **)(a1 + 64);
      v32 = (uint64_t **)(a1 + 64);
      if (*v13)
      {
        while (1)
        {
          while (1)
          {
            v32 = (uint64_t **)v30;
            v33 = *((_DWORD *)v30 + 8);
            if (v23 >= v33)
              break;
            v30 = *v32;
            v31 = v32;
            if (!*v32)
              goto LABEL_31;
          }
          if (v33 >= v23)
            break;
          v30 = v32[1];
          if (!v30)
          {
            v31 = v32 + 1;
            goto LABEL_31;
          }
        }
        sub_100261F44(v29);
        sub_100008848((uint64_t)v27, v15[6]);
        operator delete(v15);
        v15 = v32;
      }
      else
      {
LABEL_31:
        sub_1000145B0((uint64_t **)(a1 + 56), (uint64_t)v32, v31, (uint64_t *)v15);
      }
      v34 = *(std::__shared_weak_count **)&v51[32];
      if (*(_QWORD *)&v51[32])
      {
        v35 = (unint64_t *)(*(_QWORD *)&v51[32] + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      sub_100008848((uint64_t)v51, *(_QWORD **)&v51[8]);
      v37 = v48;
      if (v48)
      {
        v38 = (unint64_t *)&v48->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      sub_100008848((uint64_t)&__p, v46[0]);
    }
    if (a4)
    {
      v40 = operator new(0x20uLL);
      v40[1] = 0;
      v40[2] = 0;
      *v40 = off_1021D83D8;
      *((_BYTE *)v40 + 24) = *a3;
      *(_QWORD *)buf = v40 + 3;
      *(_QWORD *)v51 = v40;
      sub_1002B7674((uint64_t)(v15 + 8), (__int128 *)buf);
      v41 = *(std::__shared_weak_count **)v51;
      if (*(_QWORD *)v51)
      {
        v42 = (unint64_t *)(*(_QWORD *)v51 + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
    else
    {
      sub_100346F9C(v15 + 8);
    }
    if (v15[7])
      operator new();
    os_activity_scope_leave(&state);
  }
}

void sub_1018E759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E75F0()
{
  return 1;
}

void sub_1018E75F8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D81C0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D81C0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listClients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D81C0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021D81C0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listClients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021D81C0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021D81C0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionHintLogger_Type::Notification, CLMotionHintLogger_Type::NotificationData>::listClients() [Notification_T = CLMotionHintLogger_Type::Notification, NotificationData_T = CLMotionHintLogger_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1018E7BA0(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1018E7BCC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1018E7C04(_QWORD *a1)
{
  if (a1)
  {
    sub_1018E7C04(*a1);
    sub_1018E7C04(a1[1]);
    sub_100008848((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    operator delete(a1);
  }
}

void sub_1018E7C48(_QWORD *a1)
{
  if (a1)
  {
    sub_1018E7C48(*a1);
    sub_1018E7C48(a1[1]);
    sub_100261F44((uint64_t)(a1 + 8));
    sub_100008848((uint64_t)(a1 + 5), (_QWORD *)a1[6]);
    operator delete(a1);
  }
}

_QWORD *sub_1018E7C98(_QWORD *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1021D8310;
  sub_100A0A3DC((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_1018E7CDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1018E7CF0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D8310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018E7D00(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D8310;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_1018E7D34(uint64_t a1)
{
  sub_100015E88(a1);
  operator delete();
}

uint64_t sub_1018E7D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_1018E7D68(uint64_t a1)
{
  sub_100015E88(a1);
  operator delete();
}

uint64_t sub_1018E7D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_1018E7D98(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1018E7DC4()
{
  operator new();
}

_BYTE *sub_1018E7E54(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1018E8010(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t **sub_1018E7F30(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  _DWORD *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = operator new(0x58uLL);
    v9[8] = *a3;
    *((_OWORD *)v9 + 4) = 0u;
    *((_QWORD *)v9 + 9) = 0;
    *((_QWORD *)v9 + 10) = 0;
    *((_OWORD *)v9 + 3) = 0u;
    *((_QWORD *)v9 + 5) = v9 + 12;
    *((_QWORD *)v9 + 8) = 0;
    sub_1000145B0(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t sub_1018E7FF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1018E8010(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  const char *v11;
  NSObject *v13;
  uint8_t *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  id v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  uint8_t buf[4];
  _BYTE v26[34];

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
  {
    v5 = objc_msgSend(a1, "binaryVersion");
    objc_msgSend(a1, "sizeOfType");
    if (v5)
    {
      if (getenv("_INTERSILO_UNIT_TEST"))
      {
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v6 = qword_10229FC38;
        if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)v26 = v5;
          *(_WORD *)&v26[8] = 2048;
          *(_QWORD *)&v26[10] = 0;
          *(_WORD *)&v26[18] = 2080;
          *(_QWORD *)&v26[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v19 = 134218498;
        v20 = v5;
        v21 = 2048;
        v22 = 0;
        v23 = 2080;
        v24 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v19, 32);
      }
      else
      {
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v13 = qword_10229FC38;
        if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)v26 = v5;
          *(_WORD *)&v26[8] = 2048;
          *(_QWORD *)&v26[10] = 0;
          *(_WORD *)&v26[18] = 2080;
          *(_QWORD *)&v26[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v19 = 134218498;
        v20 = v5;
        v21 = 2048;
        v22 = 0;
        v23 = 2080;
        v24 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v19, 32);
      }
      v14 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionHintLogger_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v7);
      goto LABEL_47;
    }
    if (!objc_msgSend(a1, "cppObjectPtr")
      && objc_msgSend(objc_msgSend(a1, "compatibilityInfo"), "isEqual:", &off_10221E000))
    {
      if (objc_msgSend(objc_msgSend(a1, "serialized"), "length") != (id)1)
      {
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v16 = qword_10229FC38;
        if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)v26 = 0;
          *(_WORD *)&v26[4] = 2082;
          *(_QWORD *)&v26[6] = "";
          *(_WORD *)&v26[14] = 2082;
          *(_QWORD *)&v26[16] = "assert";
          *(_WORD *)&v26[24] = 2081;
          *(_QWORD *)&v26[26] = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_10229FC30 != -1)
            dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        }
        v17 = qword_10229FC38;
        if (os_signpost_enabled((os_log_t)qword_10229FC38))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)v26 = 0;
          *(_WORD *)&v26[4] = 2082;
          *(_QWORD *)&v26[6] = "";
          *(_WORD *)&v26[14] = 2082;
          *(_QWORD *)&v26[16] = "assert";
          *(_WORD *)&v26[24] = 2081;
          *(_QWORD *)&v26[26] = "sizeof(Object_T) == podContainer.serialized.length";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (qword_10229FC30 != -1)
            dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        }
        v18 = qword_10229FC38;
        if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)v26 = 0;
          *(_WORD *)&v26[4] = 2082;
          *(_QWORD *)&v26[6] = "";
          *(_WORD *)&v26[14] = 2082;
          *(_QWORD *)&v26[16] = "assert";
          *(_WORD *)&v26[24] = 2081;
          *(_QWORD *)&v26[26] = "sizeof(Object_T) == podContainer.serialized.length";
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
        abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
      }
      objc_msgSend(a1, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a1, "serialized"), "bytes"));
    }
    return objc_msgSend(a1, "cppObjectPtr");
  }
  v8 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v8) & 1) != 0)
  {
    v9 = objc_msgSend(a1, "binaryVersion");
    objc_msgSend(a1, "sizeOfType");
    if (v9)
    {
      if (getenv("_INTERSILO_UNIT_TEST"))
      {
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v10 = qword_10229FC38;
        if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)v26 = v9;
          *(_WORD *)&v26[8] = 2048;
          *(_QWORD *)&v26[10] = 0;
          *(_WORD *)&v26[18] = 2080;
          *(_QWORD *)&v26[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v19 = 134218498;
        v20 = v9;
        v21 = 2048;
        v22 = 0;
        v23 = 2080;
        v24 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v19, 32);
      }
      else
      {
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v15 = qword_10229FC38;
        if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)v26 = v9;
          *(_WORD *)&v26[8] = 2048;
          *(_QWORD *)&v26[10] = 0;
          *(_WORD *)&v26[18] = 2080;
          *(_QWORD *)&v26[20] = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 0))
          return 0;
        bzero(buf, 0x65CuLL);
        if (qword_10229FC30 != -1)
          dispatch_once(&qword_10229FC30, &stru_1021D83A8);
        v19 = 134218498;
        v20 = v9;
        v21 = 2048;
        v22 = 0;
        v23 = 2080;
        v24 = (unint64_t)"N23CLMotionHintLogger_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v19, 32);
      }
      v14 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLMotionHintLogger_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v11);
LABEL_47:
      if (v14 != buf)
        free(v14);
      return 0;
    }
    return objc_msgSend(a1, "cppObjectPtr");
  }
  return 0;
}

void sub_1018E88F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021D83D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018E8908(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021D83D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1018E8940(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1018E8CCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onHeartRateNotification:data:", a2, a3);
}

void sub_1018E8E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018E8F28(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_1018E91C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  unint64_t v6;
  int v7;
  __int128 v9;
  __int128 v10;
  _QWORD v11[452];
  char v12;
  uint8_t buf[8];

  sub_1015EB864(v11);
  objc_msgSend(*(id *)(a1 + 32), "makeSafeCFAbsoluteTime:", CFAbsoluteTimeGetCurrent());
  v12 |= 1u;
  v11[77] = v4;
  sub_101603020((uint64_t)v11);
  sub_10163A060(v11[447]);
  if (a2)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(a2 + 16))(&v9, a2);
    if (*((_QWORD *)&v9 + 1) != (_QWORD)v10)
    {
      *(_QWORD *)buf = **((_QWORD **)&v9 + 1);
      v5 = (id)sub_100129380((uint64_t)buf);
      v6 = 0;
      v7 = -1;
      while ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "count") > v6)
      {
        if (objc_msgSend(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "objectAtIndexedSubscript:", v6), "unsignedLongLongValue") == v5)v7 = v6;
        ++v6;
      }
      if (v7 == -1)
      {
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "addObject:", +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", v5));
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 56), "count");
      }
      sub_10163445C();
    }
  }
  else
  {
    v9 = 0u;
    v10 = 0u;
  }
  sub_1015E38D8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), (uint64_t)v11);
  *(_QWORD *)buf = (char *)&v9 + 8;
  sub_100279AA4((void ***)buf);
  return sub_1015EE304((PB::Base *)v11);
}

void sub_1018E95BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  STACK[0xEA0] = a5;
  sub_100279AA4((void ***)&STACK[0xEA0]);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018E9690(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

void sub_1018E983C()
{
  operator delete();
}

id sub_1018E9860(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onPressureData:", a1);
}

void sub_1018E9B44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018E9BF8(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

_QWORD *sub_1018E9C24(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_1021D84B0;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018E9D50;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1018E9D64;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_1018E9D28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018E9D50(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018E9D64(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018E9D80(uint64_t a1)
{
  sub_1018EA034(a1);
  operator delete();
}

id sub_1018E9DA4(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  __int128 __dst;
  int v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  uint8_t buf[4];
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  int v37;

  if (a4 >= 0x10)
    v8 = 16;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x11)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D84D8);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v31 = (unint64_t)"N10CLPressure6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v32 = 2048;
      v33 = 16;
      v34 = 2048;
      v35 = a4;
      v36 = 1024;
      v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D84D8);
      v22 = 136315906;
      v23 = (unint64_t)"N10CLPressure6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v24 = 2048;
      v25 = 16;
      v26 = 2048;
      v27 = a4;
      v28 = 1024;
      v29 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v22, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLPressure::Sample>::dispatchData(int, const void *, size_t) [T = CLPressure::Sample]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1018EA088;
  v18[3] = &unk_10217BDB0;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_1018EA034(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D84B0;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1018EA088(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 64));
  return result;
}

void sub_1018EA0CC(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1018EA5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_1018EAA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  _Unwind_Resume(exception_object);
}

id sub_1018EAA6C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onDeferredStartTimerSpecifyTriggerDelay:", 1.79769313e308);
}

id sub_1018EAD08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onMotionStateObserverNotification:data:", a2, a3);
}

id sub_1018EB1AC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "onDeferredStartTimerSpecifyTriggerDelay:", *(double *)(a1 + 40));
}

id sub_1018EB7F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "onDeferredStopTimerShouldPublish:", 1);
}

void sub_1018EB8A4(id a1)
{
  qword_10229FE58 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DrivingRecorder");
}

void sub_1018EB8D4()
{
  operator delete();
}

const __CFString *sub_1018EB8E8()
{
  return CFSTR("com.apple.locationd.CLDrivingRecorderPublisher");
}

const __CFString *sub_1018EB8F4()
{
  return CFSTR("CLDrivingRecorderPublisherSubjectUUID");
}

const __CFString *sub_1018EB900()
{
  return CFSTR("CLDrivingRecorderPublisherSubjectToken");
}

_QWORD *sub_1018EB90C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, "DrivingRecording");
}

const __CFString *sub_1018EB91C()
{
  return CFSTR("CLDrivingRecorderPublishedCount");
}

const char *sub_1018EB928()
{
  return "DrivingRecorderRateLimitingSampling";
}

uint64_t sub_1018EB934()
{
  return 0;
}

const char *sub_1018EB93C()
{
  return "DrivingRecorderIntervalCount";
}

const char *sub_1018EB948()
{
  return "DrivingRecorderPublisherMaxPerUUID";
}

uint64_t sub_1018EB954()
{
  return 10;
}

uint64_t sub_1018EB95C()
{
  return 30;
}

const char *sub_1018EB964()
{
  return "DrivingRecorderRateLimitingDisable";
}

uint64_t sub_1018EB970()
{
  return 0;
}

const char *sub_1018EB978()
{
  return "DrivingRecorderRateLimitingDisableInternalInstallBypass";
}

uint64_t sub_1018EB984()
{
  return 1;
}

const char *sub_1018EB98C()
{
  return "DrivingRecorderSamplingInterval";
}

uint64_t sub_1018EB998()
{
  return 3;
}

const char *sub_1018EB9A0()
{
  return "DrivingRecorderNumSamplesPerInterval";
}

uint64_t sub_1018EB9AC()
{
  return 0;
}

const char *sub_1018EB9B4()
{
  return "DrivingRecorderRecordingFileCountMax";
}

uint64_t sub_1018EB9C0()
{
  return 9;
}

double sub_1018EB9C8()
{
  return 0.0;
}

double sub_1018EB9D0()
{
  return 1.0;
}

double sub_1018EB9D8()
{
  return 0.0;
}

const char *sub_1018EB9E0()
{
  return "DrivingRecorderListenersHeartRateDisable";
}

uint64_t sub_1018EB9EC()
{
  return 1;
}

const char *sub_1018EB9F4()
{
  return "DrivingRecorderListenersForceActiveDisable";
}

uint64_t sub_1018EBA00()
{
  return 1;
}

void sub_1018EBA08(uint64_t a1, void *a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)sub_1018BAC24(a1, a2);
  *v2 = off_1021D8640;
  sub_1018EBA98((uint64_t)v2);
}

void sub_1018EBA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1018BE328(v1);
  _Unwind_Resume(a1);
}

void sub_1018EBA98(uint64_t a1)
{
  void *__p;
  uint64_t v2;
  uint64_t v3;

  __p = 0;
  v2 = 0;
  v3 = 0;
  sub_1018BD6C4(a1);
}

void sub_1018EBB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1018EBB28(uint64_t a1, void *__dst)
{
  int v2;

  v2 = *(unsigned __int8 *)(a1 + 256);
  if (*(_BYTE *)(a1 + 256))
    memcpy(__dst, (const void *)(a1 + 568), 0x140uLL);
  return v2 != 0;
}

void sub_1018EBB64(uint64_t a1)
{
  CFAbsoluteTime Current;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  __int16 v20[8];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p;
  float *v26;
  uint8_t buf[1640];

  Current = CFAbsoluteTimeGetCurrent();
  v3 = *(_QWORD *)(a1 + 288);
  v4 = *(_QWORD *)(a1 + 296);
  v5 = *(std::__shared_weak_count **)(a1 + 320);
  v23 = *(_QWORD *)(a1 + 312);
  v24 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_1018DB380(v3, v4, &v23, (uint64_t)&__p);
  v8 = v24;
  if (v24)
  {
    v9 = (unint64_t *)&v24->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v21 = 0uLL;
  v22 = 0;
  sub_100A9BE9C((float *)__p, v26, *(_QWORD *)(a1 + 552), *(unsigned int *)(a1 + 560) | (unint64_t)&_mh_execute_header, (float *)&v21);
  *(_DWORD *)(a1 + 568) = 1;
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 280);
  *(CFAbsoluteTime *)(a1 + 584) = Current;
  v11 = *(float **)(a1 + 288);
  v12 = *(float **)(a1 + 296);
  if (v11 == v12)
  {
    v14 = 3.4028e38;
    v13 = 1.1755e-38;
  }
  else
  {
    v13 = 1.1755e-38;
    v14 = 3.4028e38;
    do
    {
      v15 = *v11;
      v11 += 8;
      v16 = v15;
      if (v15 < v14)
        v14 = v16;
      if (v16 > v13)
        v13 = v16;
    }
    while (v11 != v12);
  }
  *(float *)(a1 + 592) = v14;
  *(float *)(a1 + 596) = v13;
  *(_OWORD *)(a1 + 600) = v21;
  *(_QWORD *)(a1 + 616) = v22;
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_1021D87A8);
  v17 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Linear gyro database computed fit.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021D87A8);
    v20[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "Linear gyro database computed fit.", v20, 2);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGyroCalibrationDatabaseLocalLinear::computeFit()", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  *(_BYTE *)(a1 + 256) = 1;
  if (__p)
  {
    v26 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1018EBE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1018EBE58(uint64_t a1)
{
  sub_1018BE328(a1);
  operator delete();
}

uint64_t sub_1018EBE7C()
{
  return 0;
}

uint64_t sub_1018EBE84()
{
  return 1;
}

void sub_1018EBE8C(id a1)
{
  off_10229FD58 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1018EC344()
{
  uint64_t v0;

  sub_100015E88(v0);
  operator delete();
}

id sub_1018EC394(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "onMagnetometerData:", a1);
}

void sub_1018EC688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1018EC73C(id a1)
{
  qword_10229FE38 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutRecorder");
}

uint64_t sub_1018EC768(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_1018EC77C(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) == 0;
}

void sub_1018EC798(uint64_t a1)
{
  sub_1018ECA50(a1);
  operator delete();
}

id sub_1018EC7BC(_QWORD *a1, int a2, void *__src, unint64_t a4)
{
  size_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 __dst;
  uint64_t v23;
  int v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  int v31;
  uint8_t buf[4];
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  int v39;

  if (a4 >= 0x18)
    v8 = 24;
  else
    v8 = a4;
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021D8838);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v33 = (unint64_t)"N14CLMagnetometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v34 = 2048;
      v35 = 24;
      v36 = 2048;
      v37 = a4;
      v38 = 1024;
      v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021D8838);
      v24 = 136315906;
      v25 = (unint64_t)"N14CLMagnetometer6SampleE" & 0x7FFFFFFFFFFFFFFFLL;
      v26 = 2048;
      v27 = 24;
      v28 = 2048;
      v29 = a4;
      v30 = 1024;
      v31 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", (const char *)&v24, 38, v17, LODWORD(v18[0]));
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLMagnetometer::Sample>::dispatchData(int, const void *, size_t) [T = CLMagnetometer::Sample]", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  v11 = a1[2];
  v10 = a1[3];
  v12 = a1[6];
  v13 = (void *)a1[4];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_1018ECAA4;
  v18[3] = &unk_102179570;
  v18[4] = v12;
  v18[5] = v11;
  v19 = __dst;
  v20 = v23;
  v21 = v10;
  return objc_msgSend(v13, "async:", v18);
}

uint64_t sub_1018ECA50(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D87F8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_100015E88(a1);
}

uint64_t sub_1018ECAA4(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 40))(a1 + 48, *(_QWORD *)(a1 + 72));
  return result;
}

void sub_1018ECAE8(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1018ECB14()
{
  __assert_rtn("get", "optional.hpp", 1211, "this->is_initialized()");
}

void sub_1018ECB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10025CDB4("operator->", "optional.hpp", a3, "this->is_initialized()");
}

void sub_1018ECB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10025CDE8("get", "optional.hpp", a3, "this->is_initialized()");
}

void sub_1018ECB84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  if (sub_10025CD70())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"availabilityTileParams must not be nil inside availableVenuesState\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
  }
  if (sub_10025CDBC())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "availabilityTileParams must not be nil inside availableVenuesState", "{\"msg%{public}.0s\":\"availabilityTileParams must not be nil inside availableVenuesState\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
  }
  if (sub_10025CDA4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"availabilityTileParams must not be nil inside availableVenuesState\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

#error "1018ECE18: call analysis failed (funcsize=75)"

#error "1018ECF90: call analysis failed (funcsize=75)"

#error "1018ED108: call analysis failed (funcsize=75)"

#error "1018ED280: call analysis failed (funcsize=75)"

void sub_1018ED2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10025CDE0("operator->", "optional.hpp", a3, "this->is_initialized()");
}

void sub_1018ED2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102129F68);
  if (sub_10025FE88())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102129F68);
  }
  if (sub_10025FEAC())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "min_dist should not be infinity", "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102129F68);
  }
  if (sub_10025FE9C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"min_dist should not be infinity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_1018ED468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10025FE88())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102129F68);
    }
    if (sub_10025FEAC())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "distanceThresholdVector must not be empty", "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102129F68);
    }
    if (sub_10025FE9C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"distanceThresholdVector must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MachineLearning/CLHierarchicalClustering.mm", 146, "getClusterLabels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_102129F68);
  }
}

void sub_1018ED5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10025FE88())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102129F68);
    }
    if (sub_10025FEAC())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "minNumCluster must be greater than zero", "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102129F68);
    }
    if (sub_10025FE9C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"minNumCluster must be greater than zero\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MachineLearning/CLHierarchicalClustering.mm", 147, "getClusterLabels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_102129F68);
  }
}

void sub_1018ED768()
{
  __assert_rtn("operator()", "CLDistanceFunction.h", 26, "a.size() == b.size()");
}

void sub_1018ED790()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
    }
    v1 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Cannot localize on invalid model!", "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A088);
    }
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Cannot localize on invalid model!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationCosineSimilarityLocalize.mm", 21, "localize");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212A088);
  }
}

void sub_1018ED968()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Expecting some clientIDs to be passed in\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Expecting some clientIDs to be passed in", "{\"msg%{public}.0s\":\"Expecting some clientIDs to be passed in\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Expecting some clientIDs to be passed in\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecordingLabelsTable.mm", 327, "deleteRecordingLabelsForClients");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  }
}

void sub_1018EDADC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 267, "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212A0E0);
  }
}

void sub_1018EDC50()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A520);
  v0 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A520);
  }
  v1 = qword_1022A00F8;
  if (os_signpost_enabled((os_log_t)qword_1022A00F8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error, localization probabilities were not sorted in descending order", "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A520);
  }
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Error, localization probabilities were not sorted in descending order\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_1018EDE14()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CFType must be a CFArrayRef to convert to a const char*\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "CFType must be a CFArrayRef to convert to a const char*", "{\"msg%{public}.0s\":\"CFType must be a CFArrayRef to convert to a const char*\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CFType must be a CFArrayRef to convert to a const char*\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h", 1303, "CFValueToNativeValue");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212A788);
  }
}

void sub_1018EDF88()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Unable to get the value from a CFNumber\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Unable to get the value from a CFNumber", "{\"msg%{public}.0s\":\"Unable to get the value from a CFNumber\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Unable to get the value from a CFNumber\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h", 1277, "CFValueToNativeValue");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212A788);
  }
}

void sub_1018EE0F4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CFType must be a CFNumber to convert to an int\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "CFType must be a CFNumber to convert to an int", "{\"msg%{public}.0s\":\"CFType must be a CFNumber to convert to an int\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A788);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CFType must be a CFNumber to convert to an int\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h", 1273, "CFValueToNativeValue");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212A788);
  }
}

void sub_1018EE260()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  v0 = qword_1022A00F8;
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"invalid file protection class requested for the default CoreLocation Database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "invalid file protection class requested for the default CoreLocation Database", "{\"msg%{public}.0s\":\"invalid file protection class requested for the default CoreLocation Database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  }
  v4 = qword_1022A00F8;
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid file protection class requested for the default CoreLocation Database\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
  }
}

void sub_1018EE3EC(void *a1, uint64_t a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a3 = __cxa_begin_catch(a1);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  if (sub_1002908E4())
  {
    sub_1002908D4();
    sub_1002908B8((void *)&_mh_execute_header, v3, v4, "Error converting database values. %{public}s", v5, v6, v7, v8, 2u);
  }
  sub_1002908F0();
}

void sub_1018EE4A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"RowId not expected as timestamp column\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "RowId not expected as timestamp column", "{\"msg%{public}.0s\":\"RowId not expected as timestamp column\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    }
    v4 = qword_1022A00F8;
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"RowId not expected as timestamp column\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.mm", 993, "exportRecordsUsingPaging");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
  }
}

void sub_1018EE63C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

#error "1018EE6CC: call analysis failed (funcsize=72)"

void sub_1018EE7B8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AB08);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212AB08);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 195, "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212AB08);
  }
}

#error "1018EE9A0: call analysis failed (funcsize=70)"

#error "1018EEB00: call analysis failed (funcsize=70)"

#error "1018EEC60: call analysis failed (funcsize=70)"

void sub_1018EED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v27, v28, "Couldn't find key: onesided_jaccard", "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Couldn't find key: onesided_jaccard\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_1018EEEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;

  sub_10029A040();
  a23 = v27;
  a24 = v28;
  v30 = v29;
  sub_10029A02C();
  if (!v31)
    dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v32, v33, "No per_source_params provided in dictionary", "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  v34 = *(NSObject **)(v26 + 248);
  if (sub_100299F70(v34))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No per_source_params provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v30 = 79;
  sub_100299FDC();
}

void sub_1018EF024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;

  sub_10029A040();
  a23 = v27;
  a24 = v28;
  v30 = v29;
  sub_10029A02C();
  if (!v31)
    dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v32, v33, "No e2j_kernel_thr provided in dictionary", "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  v34 = *(NSObject **)(v26 + 248);
  if (sub_100299F70(v34))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No e2j_kernel_thr provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v30 = 76;
  sub_100299FDC();
}

void sub_1018EF194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;

  sub_10029A040();
  a23 = v27;
  a24 = v28;
  v30 = v29;
  sub_10029A02C();
  if (!v31)
    dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v32, v33, "No jaccard_scale_factor provided in dictionary", "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212AD00);
  }
  v34 = *(NSObject **)(v26 + 248);
  if (sub_100299F70(v34))
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No jaccard_scale_factor provided in dictionary\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v30 = 73;
  sub_100299FDC();
}

#error "1018EF378: call analysis failed (funcsize=71)"

#error "1018EF4E0: call analysis failed (funcsize=71)"

#error "1018EF648: call analysis failed (funcsize=71)"

#error "1018EF890: call analysis failed (funcsize=85)"

#error "1018EF960: call analysis failed (funcsize=75)"

#error "1018EFAD8: call analysis failed (funcsize=75)"

#error "1018EFC54: call analysis failed (funcsize=78)"

#error "1018EFDCC: call analysis failed (funcsize=71)"

#error "1018EFF34: call analysis failed (funcsize=71)"

#error "1018F009C: call analysis failed (funcsize=71)"

#error "1018F0204: call analysis failed (funcsize=71)"

#error "1018F036C: call analysis failed (funcsize=71)"

#error "1018F04D4: call analysis failed (funcsize=71)"

#error "1018F0644: call analysis failed (funcsize=75)"

#error "1018F07B4: call analysis failed (funcsize=70)"

#error "1018F0914: call analysis failed (funcsize=70)"

void sub_1018F0A00()
{
  __assert_rtn("CLGaussianKernelFunction", "CLKernelFunction.h", 37, "sigma > 0.0");
}

void sub_1018F0A28()
{
  __assert_rtn("CLExponentialKernelFunction", "CLKernelFunction.h", 77, "power > 0.0");
}

void sub_1018F0A50()
{
  __assert_rtn("CLExponentialKernelFunction", "CLKernelFunction.h", 78, "sigma > 0.0");
}

void sub_1018F0A78()
{
  __assert_rtn("set_confidencelevel", "microlocation.pb.h", 20312, "::CLMicroLocationProto::ConfidenceLevel_IsValid(value)");
}

void sub_1018F0AA0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
    }
    v1 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "semi-supervised model has no clientId value", "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B410);
    }
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"semi-supervised model has no clientId value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLocalizationController.mm", 178, "localizationRequestResultsPerModelInternal");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212B410);
  }
}

void sub_1018F0C74()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B498);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B498);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 195, "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212B498);
  }
}

void sub_1018F0DE8(void *a1, _QWORD *a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v3 = __cxa_begin_catch(a1);
  *a2 = v3;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10212B748);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
  {
    v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 16))(v3);
    v6 = 136446210;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error converting database values. %{public}s", (uint8_t *)&v6, 0xCu);
  }
}

void sub_1018F0EC8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assigning a negative value to an unsigned type is probably not what you intended", "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 244, "convert");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212B608);
  }
}

void sub_1018F1034()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Trying to assign a value that is bigger than the provided type can hold", "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212B608);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 245, "convert");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212B608);
  }
}

void sub_1018F11A0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1018F11C0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212BA48);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "must have fingerprints distance function", "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212BA48);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"must have fingerprints distance function\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNearestNeighborAlgorithm.mm", 29, "localize");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212BA48);
  }
}

void sub_1018F1334()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212BA48);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212BA48);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationNearestNeighborAlgorithm.mm", 28, "localize");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212BA48);
  }
}

void sub_1018F14A8(_DWORD *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20;

  sub_1002B458C();
  if (!v2)
    dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v20);
    sub_1002B458C();
    if (!v2)
      dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_1002B4544((void *)&_mh_execute_header, v9, v10, v11, "cluster distance threshold must not be empty", "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v20);
    sub_1002B458C();
    if (!v2)
      dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  }
  if (sub_1002B4598())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"cluster distance threshold must not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
  *a1 = 30;
  sub_100299FDC();
}

void sub_1018F15F8(_DWORD *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20;

  sub_1002B458C();
  if (!v2)
    dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v20);
    sub_1002B458C();
    if (!v2)
      dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_1002B4544((void *)&_mh_execute_header, v9, v10, v11, "fingerprintVector must be non-empty", "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v20);
    sub_1002B458C();
    if (!v2)
      dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  }
  if (sub_1002B4598())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"fingerprintVector must be non-empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
  *a1 = 35;
  sub_100299FDC();
}

void sub_1018F1748(_DWORD *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t v20;

  sub_1002B458C();
  if (!v2)
    dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v3, v4, "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, v6, v7, v8, v20);
    sub_1002B458C();
    if (!v2)
      dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_1002B4544((void *)&_mh_execute_header, v9, v10, v11, "prune threshold must be less than or equal to clusterDistance threshold", "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v12, v13, v20);
    sub_1002B458C();
    if (!v2)
      dispatch_once(&qword_1022A00F0, &stru_10212BAB8);
  }
  if (sub_1002B4598())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v14, v15, "{\"msg%{public}.0s\":\"prune threshold must be less than or equal to clusterDistance threshold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v16, v17, v18, v19, v20);
  }
  *a1 = 33;
  sub_100299FDC();
}

void sub_1018F1898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  sub_1002B458C();
  if (!v29)
    dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B458C();
    if (!v29)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v30, v31, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B458C();
    if (!v29)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_1002B4598())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v28 = 48;
  sub_100299FDC();
}

void sub_1018F1A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  _DWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  v28 = v27;
  sub_1002B458C();
  if (!v29)
    dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B458C();
    if (!v29)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v30, v31, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B458C();
    if (!v29)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_1002B4598())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v28 = 47;
  sub_100299FDC();
}

void sub_1018F1B68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1002B858C();
  if (!v27)
    dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B858C();
    if (!v27)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B858C();
    if (!v27)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_1018F1CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1002B858C();
  if (!v27)
    dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B858C();
    if (!v27)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_1002B858C();
    if (!v27)
      dispatch_once(&qword_1022A00F0, &stru_10212BCC8);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_1018F1E20()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9142, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002E643C("down_cast", "common.h", a3, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void sub_1018F1E6C()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9467, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1E94()
{
  __assert_rtn("set_devicetype", "microlocation.pb.h", 9831, "::CLMicroLocationProto::UwbRange_DeviceType_IsValid(value)");
}

void sub_1018F1EBC()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9652, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1EE4()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 9902, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1F0C()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10065, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1F34()
{
  __assert_rtn("set_hapversion", "microlocation.pb.h", 10410, "::CLMicroLocationProto::HomeKitBluetoothRssi_HAPVersion_IsValid(value)");
}

void sub_1018F1F5C()
{
  __assert_rtn("set_devicetype", "microlocation.pb.h", 10387, "::CLMicroLocationProto::HomeKitBluetoothRssi_DeviceType_IsValid(value)");
}

void sub_1018F1F84()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10250, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1FAC()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10437, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1FD4()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 10856, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F1FFC()
{
  __assert_rtn("set_datatype", "microlocation.pb.h", 11480, "::CLMicroLocationProto::DataType_IsValid(value)");
}

void sub_1018F2024()
{
  __assert_rtn("set_anchorstatus", "microlocation.pb.h", 11413, "::CLMicroLocationProto::AnchorStatus_IsValid(value)");
}

void sub_1018F204C()
{
  __assert_rtn("set_candidatequalityindicator", "microlocation.pb.h", 12507, "::CLMicroLocationProto::Model_ModelQualityLevel_IsValid(value)");
}

void sub_1018F2074()
{
  __assert_rtn("set_qualityindicator", "microlocation.pb.h", 12484, "::CLMicroLocationProto::Model_ModelQualityLevel_IsValid(value)");
}

void sub_1018F209C()
{
  __assert_rtn("set_modeltype", "microlocation.pb.h", 12283, "::CLMicroLocationProto::Model_ModelType_IsValid(value)");
}

void sub_1018F20C4()
{
  __assert_rtn("set_generationalgorithm", "microlocation.pb.h", 12260, "::CLMicroLocationProto::Model_GenerationAlgorithm_IsValid(value)");
}

void sub_1018F20EC()
{
  __assert_rtn("set_receivedeventactiontype", "microlocation.pb.h", 12856, "::CLMicroLocationProto::ReceivedEventActionType_IsValid(value)");
}

void sub_1018F2114()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 12833, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F213C()
{
  __assert_rtn("set_recordingrequesttype", "microlocation.pb.h", 13116, "::CLMicroLocationProto::RecordingRequestType_IsValid(value)");
}

void sub_1018F2164()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13093, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F218C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13353, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F21B4()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13562, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F21DC()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13659, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2204()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13686, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F222C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13923, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2254()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 13950, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F227C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 14861, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F22A4()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 15610, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F22CC()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 15866, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F22F4()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 15893, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F231C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 15920, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2344()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 15947, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F236C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 15974, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2394()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16001, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F23BC()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16120, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F23E4()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16287, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F240C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16454, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2434()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16621, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F245C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16810, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2484()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 16977, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F24AC()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17284, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F24D4()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17521, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F24FC()
{
  __assert_rtn("set_screenon", "microlocation.pb.h", 17804, "::CLMicroLocationProto::MotionEvent_ScreenStatus_IsValid(value)");
}

void sub_1018F2524()
{
  __assert_rtn("set_status", "microlocation.pb.h", 17711, "::CLMicroLocationProto::MotionEvent_Status_IsValid(value)");
}

void sub_1018F254C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17618, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2574()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17853, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F259C()
{
  __assert_rtn("set_reason", "microlocation.pb.h", 18183, "::CLMicroLocationProto::ChangedLoiReason_IsValid(value)");
}

void sub_1018F25C4()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 17950, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F25EC()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 18232, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2614()
{
  __assert_rtn("set_reason", "microlocation.pb.h", 20781, "::CLMicroLocationProto::TriggerReason_IsValid(value)");
}

void sub_1018F263C()
{
  __assert_rtn("set_requeststatus", "microlocation.pb.h", 20758, "::CLMicroLocationProto::TriggerRequestStatus_IsValid(value)");
}

void sub_1018F2664()
{
  __assert_rtn("set_requesttype", "microlocation.pb.h", 20735, "::CLMicroLocationProto::TriggerRequestType_IsValid(value)");
}

void sub_1018F268C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20366, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F26B4()
{
  __assert_rtn("set_numberofobservationsstate", "microlocation.pb.h", 20901, "::CLMicroLocationProto::NumberOfObservationsStates_IsValid(value)");
}

void sub_1018F26DC()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20878, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2704()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20928, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F272C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 20977, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F2754()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21136, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F277C()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21185, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F27A4()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 21212, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F27CC()
{
  __assert_rtn("set_eventtype", "microlocation.pb.h", 19803, "::CLMicroLocationProto::EventType_IsValid(value)");
}

void sub_1018F27F4()
{
  __assert_rtn("set_type", "microlocation.pb.h", 21287, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

void sub_1018F281C()
{
  __assert_rtn("set_type", "microlocation.pb.h", 21339, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

void sub_1018F2844()
{
  __assert_rtn("set_type", "microlocation.pb.h", 21408, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

void sub_1018F286C()
{
  __assert_rtn("set_type", "microlocation.pb.h", 21547, "::CLMicroLocationProto::ConfigurationType_IsValid(value)");
}

void sub_1018F2894()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_1002F53E0();
  if (!v1)
    dispatch_once(&qword_1022A00F0, &stru_10212E458);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E458);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters", "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E458);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"CLMicroLocationSimilarityListData fromProtobuf - number of probabilities should match number of clusters\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_1018F29E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212E458);
    }
    v1 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      sub_100299F04();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Model get prediction classes unknown model type", "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212E458);
    }
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Model get prediction classes unknown model type\", \"modelType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationModel.mm", 242, "getPredictionClasses");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212E458);
  }
}

void sub_1018F2BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212E458);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "mapped cluster identifer already exists", "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212E458);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"mapped cluster identifer already exists\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationModel.mm", 305, "mapIdentifiers");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212E458);
  }
}

void sub_1018F2D48()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_1002F53E0();
  if (!v1)
    dispatch_once(&qword_1022A00F0, &stru_10212E458);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E458);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Similarity List Model Learning, Localizer must not return empty results", "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212E458);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Similarity List Model Learning, Localizer must not return empty results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

uint64_t sub_1018F2E98(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    sub_1002F53CC();
  return result;
}

#error "1018F2F28: call analysis failed (funcsize=73)"

#error "1018F3098: call analysis failed (funcsize=73)"

#error "1018F3208: call analysis failed (funcsize=72)"

void sub_1018F32F8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212F088);
  v0 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#LoiRecordingManager Tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212F088);
  }
  v1 = qword_1022A00F8;
  if (os_signpost_enabled((os_log_t)qword_1022A00F8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LoiRecordingManager Tried to initialize with an invalid queue", "{\"msg%{public}.0s\":\"#LoiRecordingManager Tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212F088);
  }
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LoiRecordingManager Tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

uint64_t sub_1018F34BC()
{
  uint64_t v0;

  v0 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationStateMachine.h", 57, "stateFunction");
  return sub_1018F34F0(v0);
}

#error "1018F3568: call analysis failed (funcsize=71)"

#error "1018F36CC: call analysis failed (funcsize=72)"

#error "1018F3840: call analysis failed (funcsize=79)"

#error "1018F39C0: call analysis failed (funcsize=71)"

#error "1018F3B24: call analysis failed (funcsize=71)"

void sub_1018F3C10(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_1018F3C24()
{
  NSObject *v0;
  void *v1;
  os_log_t v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint8_t v9[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212F658);
  v0 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid model index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212F658);
  }
  if (os_signpost_enabled((os_log_t)qword_1022A00F8))
  {
    sub_10025CD44();
    sub_100320C20();
    _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212F658);
  }
  v8 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid model index\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, 0x26u);
  }
}

void sub_1018F3DDC()
{
  NSObject *v0;
  void *v1;
  os_log_t v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  uint8_t buf[56];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100299F5C())
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212F658);
    }
    if (sub_10029A008())
    {
      sub_100299EA0();
      sub_100320C20();
      _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212F658);
    }
    if (sub_1002B4598())
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Unsupported distance function type\", \"type\":%{public}u, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.mm", 122, "getFingerprintDistanceFunctionParamsForType");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_10212F658);
  }
}

void sub_1018F3F8C(uint64_t *a1)
{
  NSObject *v1;
  void *v3;
  os_log_t v4;
  os_signpost_type_t v5;
  os_signpost_id_t v6;
  const char *v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_10212F658);
  if (sub_100299F5C())
  {
    sub_100320BEC();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Failed to get a long value for key\", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x30u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212F658);
  }
  if (sub_10029A008())
  {
    sub_100320BEC();
    sub_100320C20();
    _os_signpost_emit_with_name_impl(v3, v4, v5, v6, v7, v8, v9, 0x30u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212F658);
  }
  if (sub_1002B4598())
  {
    if (*((char *)a1 + 23) < 0)
      a1 = (uint64_t *)*a1;
    v10[0] = 68289795;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = a1;
    v15 = 2082;
    v16 = "assert";
    v17 = 2081;
    v18 = "res";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed to get a long value for key\", \"key\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x30u);
  }
}

#error "1018F41F0: call analysis failed (funcsize=71)"

#error "1018F4358: call analysis failed (funcsize=70)"

#error "1018F44B8: call analysis failed (funcsize=71)"

void sub_1018F45AC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130538);
    }
    v1 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      sub_100299EA0();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130538);
    }
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintDataSources.mm", 26, "create");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130538);
  }
}

void sub_1018F4784()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102130670);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102130670);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Optional Model must have value here", "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102130670);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Optional Model must have value here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_1018F4904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"All services released their models and shared_ptr count is more than expected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130670);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "All services released their models and shared_ptr count is more than expected", "{\"msg%{public}.0s\":\"All services released their models and shared_ptr count is more than expected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130670);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"All services released their models and shared_ptr count is more than expected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoServiceManager.mm", 313, "releaseAllModels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130670);
  }
}

void sub_1018F4A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"enable MiLo at current location called for a service which is not currently connected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130670);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "enable MiLo at current location called for a service which is not currently connected", "{\"msg%{public}.0s\":\"enable MiLo at current location called for a service which is not currently connected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130670);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"enable MiLo at current location called for a service which is not currently connected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoServiceManager.mm", 865, "enableMiLoAtCurrentLocation");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130670);
  }
}

void sub_1018F4C24()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_1002907C0();
      sub_100290818((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"DatabaseFreeSpacePercentage needs to be a valid percentage\", \"percentage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130670);
    }
    if (sub_100343324())
    {
      sub_1002907C0();
      sub_1002907F8((void *)&_mh_execute_header, v6, v7, v8, "DatabaseFreeSpacePercentage needs to be a valid percentage", "{\"msg%{public}.0s\":\"DatabaseFreeSpacePercentage needs to be a valid percentage\", \"percentage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130670);
    }
    if (sub_10029088C())
    {
      sub_1002907C0();
      sub_10029082C((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"DatabaseFreeSpacePercentage needs to be a valid percentage\", \"percentage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabase.h", 450, "minimumNumRowsFree");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130670);
  }
}

void sub_1018F4DAC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130840);
    }
    v1 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Expecting a wifi channel histogram", "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130840);
    }
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expecting a wifi channel histogram\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWiFiChannelHistogramAnalyzer.mm", 66, "histogramFromProtobuf");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130840);
  }
}

void sub_1018F4F80()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130860);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130860);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintDistanceFunction.mm", 27, "computeDifference");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130860);
  }
}

void sub_1018F50EC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130860);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "configured e2jKernelThr illegal value", "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130860);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"configured e2jKernelThr illegal value\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintDistanceFunction.mm", 327, "weightedEuclideanJaccardDistance");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130860);
  }
}

void sub_1018F5258()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      sub_100346064();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021308C0);
    }
    v1 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      sub_100346064();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "index out of bounds", "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021308C0);
    }
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      sub_100346064();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"index out of bounds\", \"ii\":%{public}llu, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationFingerprintVector.mm", 38, "operator[]");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_1021308C0);
  }
}

#error "1018F54A0: call analysis failed (funcsize=72)"

#error "1018F560C: call analysis failed (funcsize=72)"

void sub_1018F5700()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130920);
    }
    v1 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      sub_100299EA0();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid type chosen", "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130920);
    }
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid type chosen\", \"enum value\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationAlgorithms.h", 177, "createReducerFunction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130920);
  }
}

#error "1018F5950: call analysis failed (funcsize=72)"

#error "1018F5ABC: call analysis failed (funcsize=72)"

#error "1018F5C28: call analysis failed (funcsize=72)"

void sub_1018F5D1C()
{
  __assert_rtn("minimumValueSorted", "CLReducerFunction.h", 38, "container.size()>0");
}

void sub_1018F5D44()
{
  __assert_rtn("minimumValue", "CLReducerFunction.h", 27, "container.size()>0");
}

void sub_1018F5D6C()
{
  __assert_rtn("meanValue", "CLReducerFunction.h", 22, "container.size()>0");
}

void sub_1018F5D94()
{
  __assert_rtn("maximumValueSorted", "CLReducerFunction.h", 43, "container.size()>0");
}

void sub_1018F5DBC()
{
  __assert_rtn("maximumValue", "CLReducerFunction.h", 32, "container.size()>0");
}

void sub_1018F5DE4()
{
  __assert_rtn("firstQuartileValueSorted", "CLReducerFunction.h", 48, "container.size()>0");
}

void sub_1018F5E0C()
{
  __assert_rtn("medianValueSorted", "CLReducerFunction.h", 54, "container.size()>0");
}

void sub_1018F5E34()
{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 60, "container.size()>0");
}

void sub_1018F5E5C()
{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 61, "minPercentile >= 0 && minPercentile <= 1 && maxPercentile >= minPercentile && maxPercentile <= 1");
}

void sub_1018F5E84()
{
  __assert_rtn("parameterizedTruncatedMeanValueSorted", "CLReducerFunction.h", 65, "numElements>0");
}

void sub_1018F5EAC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100299F5C())
    {
      sub_100299F04();
      sub_100299FB4((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    if (sub_10029A008())
    {
      sub_100299F04();
      sub_100299F3C((void *)&_mh_execute_header, v6, v7, v8, "Unsupported Service Type", "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    if (sub_1002B4598())
    {
      sub_100299F04();
      sub_100299FC8((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Unsupported Service Type\", \"ServiceType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm", 32, "settingsString");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
}

void sub_1018F6028()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00F8;
    if (sub_10034F4E4(qword_1022A00F8))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    v1 = qword_1022A00F8;
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v1, v2, v3, "Error converting uint to location types: Value does not fit into bitset", "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    v4 = qword_1022A00F8;
    if (sub_100299F70(qword_1022A00F8))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Error converting uint to location types: Value does not fit into bitset\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm", 252, "uint64ToLocationTypesBitset");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
}

void sub_1018F61CC(char a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[40];

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    v1 = qword_1022A00F8;
    if (sub_10034F4E4(qword_1022A00F8))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    v2 = qword_1022A00F8;
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v2, v3, v4, "Update model - got null pointer", "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    v5 = qword_1022A00F8;
    if (sub_100299F70(qword_1022A00F8))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Update model - got null pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm", 266, "updateModel");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
}

void sub_1018F6370()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t buf;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100299F5C())
    {
      sub_100299EA0();
      sub_100299FB4((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, buf);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    if (sub_10029A008())
    {
      sub_100299EA0();
      sub_100299F3C((void *)&_mh_execute_header, v6, v7, v8, "Service Type unsupported ", "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, buf);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102130A70);
    }
    if (sub_1002B4598())
      sub_100299FC8((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Service Type unsupported \", \"service type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, 3u);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/ServiceManager/CLMiLoService.mm", 416, "modelTypeByServiceAndLocationType");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
}

void sub_1018F6508(_DWORD *a1)
{
  NSObject *v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  sub_10029A02C();
  if (!v4)
    dispatch_once(&qword_1022A00F0, &stru_102130A70);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"If run state is runnimg then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (*(_QWORD *)(v2 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v5, v6, "If run state is runnimg then suspend reason must be empty", "{\"msg%{public}.0s\":\"If run state is runnimg then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (*(_QWORD *)(v2 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
  if (sub_1002B4598())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"If run state is runnimg then suspend reason must be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  *a1 = 708;
  sub_100299FDC();
}

void sub_1018F6678(_DWORD *a1)
{
  NSObject *v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  sub_10029A02C();
  if (!v4)
    dispatch_once(&qword_1022A00F0, &stru_102130A70);
  if (sub_100299F5C())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (*(_QWORD *)(v2 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
  if (sub_10029A008())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v5, v6, "If run state is suspended then suspend reason cannot be empty", "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (*(_QWORD *)(v2 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102130A70);
  }
  if (sub_1002B4598())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"If run state is suspended then suspend reason cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  *a1 = 706;
  sub_100299FDC();
}

void sub_1018F67E8(uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 16))
    (**((void (***)(char *))__p + 4))(__p + 32);
  operator delete(__p);
}

void sub_1018F6824()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"WifiBridge, shouldn't request scanner when scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131100);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "WifiBridge, shouldn't request scanner when scan activity is not set", "{\"msg%{public}.0s\":\"WifiBridge, shouldn't request scanner when scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131100);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"WifiBridge, shouldn't request scanner when scan activity is not set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWifiBridge.mm", 209, "getWifiScannerForScanActivity");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102131100);
  }
}

void sub_1018F6990()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131100);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension", "{\"msg%{public}.0s\":\"WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131100);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"WifiBridge, the wifi scan timer should have a nextFireTime when requesting scan duration extension\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationWifiBridge.mm", 108, "extendWifiScanTimer");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102131100);
  }
}

#error "1018F6B74: call analysis failed (funcsize=72)"

#error "1018F6CE0: call analysis failed (funcsize=72)"

#error "1018F6E4C: call analysis failed (funcsize=71)"

#error "1018F6FB0: call analysis failed (funcsize=72)"

#error "1018F711C: call analysis failed (funcsize=72)"

void sub_1018F7210()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 80, "container.size()>0");
}

void sub_1018F7238()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 81, "prctile >= 0.0 && prctile <= 1.0");
}

void sub_1018F7260()
{
  __assert_rtn("parametrizedPercentileSorted", "CLReducerFunction.h", 93, "(startIndex >= 0) && (startIndex <= static_cast<int>(container.size()) - 2)");
}

#error "1018F7300: call analysis failed (funcsize=72)"

#error "1018F746C: call analysis failed (funcsize=72)"

void sub_1018F7560()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131318);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed, no current transaction when recording batch of measurementWrappers", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131318);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording batch of measurementWrappers\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecorder.mm", 285, "recordMeasurementBatch");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102131318);
  }
}

void sub_1018F76DC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131318);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed, no current transaction when recording an event", "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131318);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed, no current transaction when recording an event\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationRecorder.mm", 301, "recordEvent");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102131318);
  }
}

void sub_1018F7860()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Already monitoring App In Focus events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021315C8);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Already monitoring App In Focus events", "{\"msg%{public}.0s\":\"Already monitoring App In Focus events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021315C8);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Already monitoring App In Focus events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBiomeMonitor.mm", 96, "startMonitoringBiomeEvents");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_1021315C8);
  }
}

void sub_1018F79CC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Already monitoring Now Playing events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021315C8);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Already monitoring Now Playing events", "{\"msg%{public}.0s\":\"Already monitoring Now Playing events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021315C8);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Already monitoring Now Playing events\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationBiomeMonitor.mm", 82, "startMonitoringBiomeEvents");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_1021315C8);
  }
}

uint64_t sub_1018F7B38()
{
  uint64_t v0;

  v0 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm", 78, "setScanActivity");
  return sub_1018F7B6C(v0);
}

uint64_t sub_1018F7B6C()
{
  uint64_t v0;

  v0 = abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm", 87, "setScanActivity");
  return sub_1018F7BA0(v0);
}

void sub_1018F7BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102131A40);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"# MiLo Logic -- tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102131A40);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "# MiLo Logic -- tried to initialize with an invalid queue", "{\"msg%{public}.0s\":\"# MiLo Logic -- tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102131A40);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"# MiLo Logic -- tried to initialize with an invalid queue\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_1018F7D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131A40);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "MiLo must be enabled", "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131A40);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"MiLo must be enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm", 449, "onStartRecordingOrLocalizing");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102131A40);
  }
}

void sub_1018F7E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131A40);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Must contain valid scan activity", "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131A40);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Must contain valid scan activity\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationLogic.mm", 452, "onStartRecordingOrLocalizing");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102131A40);
  }
}

void sub_1018F8010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CFType must be a CFString to convert to a std::string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131A40);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "CFType must be a CFString to convert to a std::string", "{\"msg%{public}.0s\":\"CFType must be a CFString to convert to a std::string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102131A40);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"CFType must be a CFString to convert to a std::string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationSettings.h", 1265, "CFValueToNativeValue");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102131A40);
  }
}

void sub_1018F8188()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102131E70);
  v0 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"json string is invalid\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102131E70);
  }
  v1 = qword_1022A00F8;
  if (os_signpost_enabled((os_log_t)qword_1022A00F8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "json string is invalid", "{\"msg%{public}.0s\":\"json string is invalid\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102131E70);
  }
  v2 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"json string is invalid\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_1018F834C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102132050);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102132050);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 195, "convert");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102132050);
  }
}

void sub_1018F84C0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18;

  sub_1002B858C();
  if (!v0)
    dispatch_once(&qword_1022A00F0, &stru_1021321F0);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10039549C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18);
    sub_1002B858C();
    if (!v0)
      dispatch_once(&qword_1022A00F0, &stru_1021321F0);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10039547C((void *)&_mh_execute_header, v7, v8, v9, "number of measurements still exceeds maximum", "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18);
    sub_1002B858C();
    if (!v0)
      dispatch_once(&qword_1022A00F0, &stru_1021321F0);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_1003954B0((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"number of measurements still exceeds maximum\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18);
  }
  sub_100299FDC();
}

void sub_1018F8604()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18;

  sub_1002B858C();
  if (!v0)
    dispatch_once(&qword_1022A00F0, &stru_1021321F0);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10039549C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18);
    sub_1002B858C();
    if (!v0)
      dispatch_once(&qword_1022A00F0, &stru_1021321F0);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10039547C((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18);
    sub_1002B858C();
    if (!v0)
      dispatch_once(&qword_1022A00F0, &stru_1021321F0);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_1003954B0((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18);
  }
  sub_100299FDC();
}

void sub_1018F8748()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021325A0);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assigning a negative value to an unsigned type is probably not what you intended", "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021325A0);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assigning a negative value to an unsigned type is probably not what you intended\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 244, "convert");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_1021325A0);
  }
}

void sub_1018F88B4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021325A0);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Trying to assign a value that is bigger than the provided type can hold", "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021325A0);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Trying to assign a value that is bigger than the provided type can hold\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationDatabaseColumns.h", 245, "convert");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_1021325A0);
  }
}

#error "1018F8A98: call analysis failed (funcsize=72)"

#error "1018F8C04: call analysis failed (funcsize=72)"

void sub_1018F8CF8(void *a1, _QWORD *a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v3 = __cxa_begin_catch(a1);
  *a2 = v3;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102132770);
  v4 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
  {
    v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 16))(v3);
    v6 = 136446210;
    v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Error converting database values. %{public}s", (uint8_t *)&v6, 0xCu);
  }
}

#error "1018F8E50: call analysis failed (funcsize=72)"

void sub_1018F8F44(_BYTE *a1, uint64_t a2)
{
  if (*a1)
  {
    if (*(char *)(a2 + 23) < 0)
      sub_1003B06FC((uint64_t)a1, (void **)a2);
  }
}

#error "1018F8FE0: call analysis failed (funcsize=72)"

#error "1018F914C: call analysis failed (funcsize=72)"

#error "1018F92B8: call analysis failed (funcsize=72)"

void sub_1018F93AC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102133210);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102133210);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationTimeUtils.mm", 34, "getTimeDeltaDaysAgo");
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102133210);
  }
}

void sub_1018F9518()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FCE0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FCE8;
    if (os_log_type_enabled((os_log_t)qword_10229FCE8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FCE0 != -1)
        dispatch_once(&qword_10229FCE0, &stru_102138310);
    }
    v1 = qword_10229FCE8;
    if (os_signpost_enabled((os_log_t)qword_10229FCE8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "sendConfiguration should be running on motion thread", "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FCE0 != -1)
        dispatch_once(&qword_10229FCE0, &stru_102138310);
    }
    v2 = qword_10229FCE8;
    if (os_log_type_enabled((os_log_t)qword_10229FCE8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"sendConfiguration should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Orientation/CLOrientationNotifier.mm", 853, "sendConfiguration");
LABEL_11:
    dispatch_once(&qword_10229FCE0, &stru_102138310);
  }
}

#error "1018F975C: call analysis failed (funcsize=72)"

#error "1018F98C8: call analysis failed (funcsize=72)"

#error "1018F9A34: call analysis failed (funcsize=72)"

#error "1018F9BA0: call analysis failed (funcsize=72)"

#error "1018F9D0C: call analysis failed (funcsize=72)"

#error "1018F9E70: call analysis failed (funcsize=65)"

#error "1018F9FB4: call analysis failed (funcsize=65)"

#error "1018FA0F8: call analysis failed (funcsize=65)"

#error "1018FA23C: call analysis failed (funcsize=65)"

void sub_1018FA310()
{
  __assert_rtn("set_health", "CLPRavenOutput.pb.h", 5184, "::CLP::LogEntry::Raven::EstimatorHealth_EstimatorHealthType_IsValid(value)");
}

void sub_1018FA338()
{
  __assert_rtn("set_estimator_type", "CLPRavenOutput.pb.h", 5161, "::CLP::LogEntry::Raven::EstimatorHealth_EstimatorType_IsValid(value)");
}

void sub_1018FA360()
{
  __assert_rtn("set_estimated_signal_environment", "CLPRavenOutput.pb.h", 6354, "::CLP::LogEntry::Raven::EstimatorActivity_SignalEnvironmentType_IsValid(value)");
}

void sub_1018FA388()
{
  __assert_rtn("set_estimated_position_context_state", "CLPRavenOutput.pb.h", 5891, "::CLP::LogEntry::Raven::EstimatorActivity_PositionContextStateType_IsValid(value)");
}

void sub_1018FA3B0()
{
  __assert_rtn("set_estimated_mount_state", "CLPRavenOutput.pb.h", 5868, "::CLP::LogEntry::Raven::EstimatorActivity_MountStateType_IsValid(value)");
}

void sub_1018FA3D8()
{
  __assert_rtn("set_user_fitness_session", "CLPRavenOutput.pb.h", 5845, "::CLP::LogEntry::Raven::EstimatorActivity_UserFitnessSessionType_IsValid(value)");
}

void sub_1018FA400()
{
  __assert_rtn("set_estimated_moving_state", "CLPRavenOutput.pb.h", 5778, "::CLP::LogEntry::Raven::EstimatorActivity_MovingStateType_IsValid(value)");
}

void sub_1018FA428()
{
  __assert_rtn("set_estimated_user_activity", "CLPRavenOutput.pb.h", 5733, "::CLP::LogEntry::Raven::EstimatorActivity_UserActivityType_IsValid(value)");
}

void sub_1018FA450()
{
  __assert_rtn("set_health", "CLPRavenOutput.pb.h", 4797, "::CLP::LogEntry::Raven::NrEstimatorHealth_NrEstimatorHealthType_IsValid(value)");
}

void sub_1018FA478()
{
  __assert_rtn("set_type", "CLPRavenOutput.pb.h", 4706, "::CLP::LogEntry::Raven::MeasurementTypeCount_MeasurementType_IsValid(value)");
}

void sub_1018FA4A0()
{
  __assert_rtn("set_signal_environment_type", "CLPPrivateDataShared.pb.h", 14820, "::CLP::LogEntry::PrivateData::SignalEnvironment_SignalEnvironmentType_IsValid(value)");
}

void sub_1018FA4C8()
{
  __assert_rtn("set_raw_reference_frame", "CLPPrivateDataShared.pb.h", 14797, "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)");
}

void sub_1018FA4F0()
{
  __assert_rtn("set_reference_frame", "CLPPrivateDataShared.pb.h", 14774, "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)");
}

void sub_1018FA518()
{
  __assert_rtn("set_integrity", "CLPPrivateDataShared.pb.h", 14751, "::CLP::LogEntry::PrivateData::DaemonLocation_LocationIntegrityType_IsValid(value)");
}

void sub_1018FA540()
{
  __assert_rtn("set_type", "CLPPrivateDataShared.pb.h", 14642, "::CLP::LogEntry::PrivateData::LocationType_IsValid(value)");
}

void sub_1018FA568()
{
  __assert_rtn("set_suitability", "CLPPrivateDataShared.pb.h", 14357, "::CLP::LogEntry::PrivateData::DaemonLocation_ClientLocationSuitabilityType_IsValid(value)");
}

void sub_1018FA590()
{
  __assert_rtn("set_constellation", "CLPPrivateDataShared.pb.h", 15031, "::CLP::LogEntry::PrivateData::ClientSatelliteConstellation_IsValid(value)");
}

void sub_1018FA5B8()
{
  __assert_rtn("set_undulation_model", "CLPPrivateDataShared.pb.h", 15278, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_UndulationModelType_IsValid(value)");
}

void sub_1018FA5E0()
{
  __assert_rtn("set_batched_location_fix_type", "CLPPrivateDataShared.pb.h", 16624, "::CLP::LogEntry::PrivateData::BatchedLocationFixType_IsValid(value)");
}

void sub_1018FA608()
{
  __assert_rtn("set_loi_location_source_accuracy", "CLPPrivateDataShared.pb.h", 16601, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_LoiLocationSourceAccuracy_IsValid(value)");
}

void sub_1018FA630()
{
  __assert_rtn("set_map_matcher_type", "CLPPrivateDataShared.pb.h", 16556, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_MapMatcherType_IsValid(value)");
}

void sub_1018FA658()
{
  __assert_rtn("set_estimated_position_context_state", "CLPPrivateDataShared.pb.h", 16489, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_PositionContextStateType_IsValid(value)");
}

void sub_1018FA680()
{
  __assert_rtn("set_gnss_content", "CLPPrivateDataShared.pb.h", 16424, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_GnssContent_IsValid(value)");
}

void sub_1018FA6A8()
{
  __assert_rtn("set_fused_reference_frame", "CLPPrivateDataShared.pb.h", 16200, "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)");
}

void sub_1018FA6D0()
{
  __assert_rtn("set_origin_device", "CLPPrivateDataShared.pb.h", 15829, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_ClientLocationOriginDeviceType_IsValid(value)");
}

void sub_1018FA6F8()
{
  __assert_rtn("set_undulation_model", "CLPPrivateDataShared.pb.h", 15698, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_UndulationModelType_IsValid(value)");
}

void sub_1018FA720()
{
  __assert_rtn("set_match_quality", "CLPPrivateDataShared.pb.h", 15503, "::CLP::LogEntry::PrivateData::DaemonLocationPrivate_MatchQualityType_IsValid(value)");
}

void sub_1018FA748()
{
  __assert_rtn("set_location_type", "CLPPrivateDataShared.pb.h", 16695, "::CLP::LogEntry::PrivateData::LocationType_IsValid(value)");
}

void sub_1018FA770()
{
  __assert_rtn("set_motion_detected", "CLPPrivateDataShared.pb.h", 17433, "::CLP::LogEntry::PrivateData::Location_MotionDetectedType_IsValid(value)");
}

void sub_1018FA798()
{
  __assert_rtn("set_signal_quality", "CLPPrivateDataShared.pb.h", 17284, "::CLP::LogEntry::PrivateData::Location_SignalQualityType_IsValid(value)");
}

void sub_1018FA7C0()
{
  __assert_rtn("set_rhythmic_mode", "CLPPrivateDataShared.pb.h", 17601, "::CLP::LogEntry::PrivateData::RhythmicGnssWakeMode_IsValid(value)");
}

void sub_1018FA7E8()
{
  __assert_rtn("set_gnss_mode_of_operation", "CLPPrivateDataShared.pb.h", 17556, "::CLP::LogEntry::PrivateData::GnssModeOfOperation_IsValid(value)");
}

void sub_1018FA810()
{
  __assert_rtn("set_vehicular_confidence", "CLPPrivateDataShared.pb.h", 18075, "::CLP::LogEntry::PrivateData::MotionActivity_VehicularConfidenceType_IsValid(value)");
}

void sub_1018FA838()
{
  __assert_rtn("set_raw_confidence", "CLPPrivateDataShared.pb.h", 17968, "::CLP::LogEntry::PrivateData::MotionActivity_ConfidenceType_IsValid(value)");
}

void sub_1018FA860()
{
  __assert_rtn("set_raw_type", "CLPPrivateDataShared.pb.h", 17945, "::CLP::LogEntry::PrivateData::DominantMotionModeType_IsValid(value)");
}

void sub_1018FA888()
{
  __assert_rtn("set_exit_state", "CLPPrivateDataShared.pb.h", 17878, "::CLP::LogEntry::PrivateData::MotionActivity_VehicleExitStateType_IsValid(value)");
}

void sub_1018FA8B0()
{
  __assert_rtn("set_mounted_confidence", "CLPPrivateDataShared.pb.h", 17767, "::CLP::LogEntry::PrivateData::MotionActivity_ConfidenceType_IsValid(value)");
}

void sub_1018FA8D8()
{
  __assert_rtn("set_mounted_state", "CLPPrivateDataShared.pb.h", 17744, "::CLP::LogEntry::PrivateData::MotionActivity_MountedStateType_IsValid(value)");
}

void sub_1018FA900()
{
  __assert_rtn("set_confidence", "CLPPrivateDataShared.pb.h", 17721, "::CLP::LogEntry::PrivateData::MotionActivity_ConfidenceType_IsValid(value)");
}

void sub_1018FA928()
{
  __assert_rtn("set_type", "CLPPrivateDataShared.pb.h", 17698, "::CLP::LogEntry::PrivateData::DominantMotionModeType_IsValid(value)");
}

void sub_1018FA950()
{
  __assert_rtn("set_predicted_workout_type", "CLPPrivateDataShared.pb.h", 18299, "::CLP::LogEntry::PrivateData::DominantMotionModeType_IsValid(value)");
}

void sub_1018FA978()
{
  __assert_rtn("set_activity_type", "CLPPrivateDataShared.pb.h", 18212, "::CLP::LogEntry::PrivateData::DominantMotionModeType_IsValid(value)");
}

void sub_1018FA9A0()
{
  __assert_rtn("set_workout_mode", "CLPPrivateDataShared.pb.h", 18622, "::CLP::LogEntry::PrivateData::WorkoutSettings_WorkoutMode_IsValid(value)");
}

void sub_1018FA9C8()
{
  __assert_rtn("set_workout_location_type", "CLPPrivateDataShared.pb.h", 18599, "::CLP::LogEntry::PrivateData::WorkoutSettings_WorkoutLocationType_IsValid(value)");
}

void sub_1018FA9F0()
{
  __assert_rtn("set_workout_type", "CLPPrivateDataShared.pb.h", 18576, "::CLP::LogEntry::PrivateData::WorkoutSettings_WorkoutType_IsValid(value)");
}

void sub_1018FAA18()
{
  __assert_rtn("set_event_type", "CLPPrivateDataShared.pb.h", 18733, "::CLP::LogEntry::PrivateData::WorkoutEvent_EventType_IsValid(value)");
}

void sub_1018FAA40()
{
  __assert_rtn("set_condition", "CLPPrivateDataShared.pb.h", 19243, "::CLP::LogEntry::PrivateData::BodyMetrics_UserConditionType_IsValid(value)");
}

void sub_1018FAA68()
{
  __assert_rtn("set_gender", "CLPPrivateDataShared.pb.h", 19044, "::CLP::LogEntry::PrivateData::BodyMetrics_NatalimeterGenderType_IsValid(value)");
}

void sub_1018FAA90()
{
  __assert_rtn("set_reference_frame", "CLPPrivateDataShared.pb.h", 20530, "::CLP::LogEntry::PrivateData::ClientLocationReferenceFrameType_IsValid(value)");
}

void sub_1018FAAB8()
{
  __assert_rtn("set_step_type", "CLPPrivateDataShared.pb.h", 21064, "::CLP::LogEntry::PrivateData::MapMatchingRouteHint_RoutingType_IsValid(value)");
}

void sub_1018FAAE0()
{
  __assert_rtn("set_route_type", "CLPPrivateDataShared.pb.h", 21041, "::CLP::LogEntry::PrivateData::MapMatchingRouteHint_RoutingType_IsValid(value)");
}

void sub_1018FAB08()
{
  __assert_rtn("set_sensor_type", "CLPPrivateDataShared.pb.h", 21339, "::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification_SensorType_IsValid(value)");
}

void sub_1018FAB30()
{
  __assert_rtn("set_transmission_state", "CLPPrivateDataShared.pb.h", 21222, "::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification_TransmissionStateType_IsValid(value)");
}

void sub_1018FAB58()
{
  __assert_rtn("set_current", "CLPPrivateDataShared.pb.h", 21389, "::CLP::LogEntry::PrivateData::ReachabilityType_IsValid(value)");
}

void sub_1018FAB80()
{
  __assert_rtn("set_previous", "CLPPrivateDataShared.pb.h", 21366, "::CLP::LogEntry::PrivateData::ReachabilityType_IsValid(value)");
}

void sub_1018FABA8()
{
  __assert_rtn("set_charger_type", "CLPPrivateDataShared.pb.h", 21526, "::CLP::LogEntry::PrivateData::BatteryChargerType_IsValid(value)");
}

void sub_1018FABD0()
{
  __assert_rtn("set_notification_data", "CLPPrivateDataShared.pb.h", 21661, "::CLP::LogEntry::PrivateData::DeviceStatus_NotificationType_IsValid(value)");
}

void sub_1018FABF8()
{
  __assert_rtn("set_high_resolution_signal_environment", "CLPPrivateDataShared.pb.h", 22013, "::CLP::LogEntry::PrivateData::SignalEnvironment_SignalEnvironmentType_IsValid(value)");
}

void sub_1018FAC20()
{
  __assert_rtn("set_coarse_signal_environment", "CLPPrivateDataShared.pb.h", 21990, "::CLP::LogEntry::PrivateData::SignalEnvironment_SignalEnvironmentType_IsValid(value)");
}

void sub_1018FAC48()
{
  __assert_rtn("set_fidelity_level", "CLPPrivateDataShared.pb.h", 22085, "::CLP::LogEntry::PrivateData::SignalEnvironmentFidelityLevel_IsValid(value)");
}

void sub_1018FAC70()
{
  __assert_rtn("set_type", "CLPPrivateDataShared.pb.h", 22062, "::CLP::LogEntry::PrivateData::SignalEnvironment_SignalEnvironmentType_IsValid(value)");
}

void sub_1018FAC98()
{
  __assert_rtn("set_distance_source", "CLPPrivateDataShared.pb.h", 23203, "::CLP::LogEntry::PrivateData::StepCountEntry_DistanceSourceType_IsValid(value)");
}

void sub_1018FACC0()
{
  __assert_rtn("set_calibration_level", "CLPPrivateDataShared.pb.h", 23694, "::CLP::LogEntry::PrivateData::MotionTypeCompassCalibrationLevel_IsValid(value)");
}

void sub_1018FACE8()
{
  __assert_rtn("set_magnetic_field_calibration_level", "CLPPrivateDataShared.pb.h", 24244, "::CLP::LogEntry::PrivateData::MotionTypeCompassCalibrationLevel_IsValid(value)");
}

void sub_1018FAD10()
{
  __assert_rtn("set_mode", "CLPPrivateDataShared.pb.h", 24513, "::CLP::LogEntry::PrivateData::SensorFusionMode_IsValid(value)");
}

void sub_1018FAD38()
{
  __assert_rtn("set_band", "CLPPrivateDataShared.pb.h", 25168, "::CLP::LogEntry::PrivateData::WifiRfBand_IsValid(value)");
}

void sub_1018FAD60()
{
  __assert_rtn("set_mode", "CLPPrivateDataShared.pb.h", 25057, "::CLP::LogEntry::PrivateData::WifiAccessPointMode_IsValid(value)");
}

void sub_1018FAD88()
{
  __assert_rtn("set_scan_type", "CLPPrivateDataShared.pb.h", 25443, "::CLP::LogEntry::PrivateData::WifiScanType_IsValid(value)");
}

void sub_1018FADB0()
{
  __assert_rtn("set_type", "CLPPrivateDataShared.pb.h", 25420, "::CLP::LogEntry::PrivateData::WifiNotificationType_IsValid(value)");
}

void sub_1018FADD8()
{
  __assert_rtn("set_measurement_source", "CLPPrivateDataShared.pb.h", 25751, "::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction_MeasurementSource_IsValid(value)");
}

void sub_1018FAE00()
{
  __assert_rtn("set_state", "CLPPrivateDataShared.pb.h", 25706, "::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction_GnssAvailability_IsValid(value)");
}

void sub_1018FAE28()
{
  __assert_rtn("set_branch_type", "CLPPrivateDataShared.pb.h", 26245, "::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavannaBranch_BranchType_IsValid(value)");
}

void sub_1018FAE50()
{
  __assert_rtn("set_tree_type", "CLPPrivateDataShared.pb.h", 26592, "::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna_TreeType_IsValid(value)");
}

void sub_1018FAE78()
{
  __assert_rtn("set_crown_orientation", "CLPPrivateDataShared.pb.h", 26821, "::CLP::LogEntry::PrivateData::WatchOrientation_WatchOrientationType_IsValid(value)");
}

void sub_1018FAEA0()
{
  __assert_rtn("set_wrist_orientation", "CLPPrivateDataShared.pb.h", 26798, "::CLP::LogEntry::PrivateData::WatchOrientation_WatchOrientationType_IsValid(value)");
}

void sub_1018FAEC8()
{
  __assert_rtn("set_on_wrist_confidence", "CLPPrivateDataShared.pb.h", 26936, "::CLP::LogEntry::PrivateData::WristState_WristStateConfidenceType_IsValid(value)");
}

void sub_1018FAEF0()
{
  __assert_rtn("set_on_wrist_sensor", "CLPPrivateDataShared.pb.h", 26913, "::CLP::LogEntry::PrivateData::WristState_WristStateType_IsValid(value)");
}

void sub_1018FAF18()
{
  __assert_rtn("set_on_wrist", "CLPPrivateDataShared.pb.h", 26890, "::CLP::LogEntry::PrivateData::WristState_WristStateType_IsValid(value)");
}

void sub_1018FAF40()
{
  __assert_rtn("set_place_type", "CLPPrivateDataShared.pb.h", 27204, "::CLP::LogEntry::PrivateData::PlaceInference_PlaceInferencePlaceType_IsValid(value)");
}

void sub_1018FAF68()
{
  __assert_rtn("set_user_specific_place_type", "CLPPrivateDataShared.pb.h", 27181, "::CLP::LogEntry::PrivateData::PlaceInference_UserSpecificPlaceType_IsValid(value)");
}

void sub_1018FAF90()
{
  __assert_rtn("set_daylight_confidence", "CLPPrivateDataShared.pb.h", 27761, "::CLP::LogEntry::PrivateData::IndoorOutdoorConfidence_IsValid(value)");
}

void sub_1018FAFB8()
{
  __assert_rtn("set_confidence", "CLPPrivateDataShared.pb.h", 27716, "::CLP::LogEntry::PrivateData::IndoorOutdoorConfidence_IsValid(value)");
}

void sub_1018FAFE0()
{
  __assert_rtn("set_type", "CLPPrivateDataShared.pb.h", 27693, "::CLP::LogEntry::PrivateData::IndoorOutdoorType_IsValid(value)");
}

void sub_1018FB008()
{
  __assert_rtn("set_static_indicator", "CLPPrivateDataShared.pb.h", 28207, "::CLP::LogEntry::PrivateData::InertialOdometrySample_StaticIndicator_IsValid(value)");
}

void sub_1018FB030()
{
  __assert_rtn("set_reference_frame", "CLPPrivateDataShared.pb.h", 28118, "::CLP::LogEntry::PrivateData::InertialOdometrySample_ReferenceFrame_IsValid(value)");
}

void sub_1018FB058()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FCA0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100480934())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10213D280);
    }
    if (sub_100480958())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10213D280);
    }
    if (sub_100480948())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm", 675, "addTurn");
LABEL_11:
    dispatch_once(&qword_10229FCA0, &stru_10213D280);
  }
}

void sub_1018FB1C4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FCA0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100480934())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10213D280);
    }
    if (sub_100480958())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10213D280);
    }
    if (sub_100480948())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm", 866, "updateDistribution");
LABEL_11:
    dispatch_once(&qword_10229FCA0, &stru_10213D280);
  }
}

void sub_1018FB330()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FCA0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100480934())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10213D280);
    }
    if (sub_100480958())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_10213D280);
    }
    if (sub_100480948())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimDataStore.mm", 992, "addLap");
LABEL_11:
    dispatch_once(&qword_10229FCA0, &stru_10213D280);
  }
}

void sub_1018FB49C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213D770);
  if (sub_1004966FC())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213D770);
  }
  if (sub_100496720())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213D770);
  }
  if (sub_100496710())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
  }
}

void sub_1018FB61C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213D770);
    }
    if (sub_100496720())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213D770);
    }
    if (sub_100496710())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileSyncManager.mm", 1359, "addTile");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10213D770);
  }
}

void sub_1018FB7AC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01E0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10049C04C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Cannot set workout state when overall source state isn't Workout.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    }
    if (sub_10049C070())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Cannot set workout state when overall source state isn't Workout.", "{\"msg%{public}.0s\":\"Cannot set workout state when overall source state isn't Workout.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    }
    if (sub_10049C060())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Cannot set workout state when overall source state isn't Workout.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamingAwareLocationProviderLocalGPSStateMachine.mm", 35, "changeWorkoutState");
LABEL_11:
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  }
}

void sub_1018FB918()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01E0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10049C04C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"This function must only be called in workout scenarios.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    }
    if (sub_10049C070())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "This function must only be called in workout scenarios.", "{\"msg%{public}.0s\":\"This function must only be called in workout scenarios.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    }
    if (sub_10049C060())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"This function must only be called in workout scenarios.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamingAwareLocationProviderLocalGPSStateMachine.mm", 396, "setWorkoutStateBasedOnMotionCompatibility");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  }
}

void sub_1018FBA8C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213DB80);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213DB80);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/HealthAssessment/CLHealthAssessmentNotifier.mm", 67, "-[CLHealthAssessmentNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10213DB80);
  }
}

void sub_1018FBC0C(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_1018FBC58()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10213DD10);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10213DD10);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10213DD10);
  }
}

void sub_1018FBDD0(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[24];

  objc_begin_catch(a1);
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_10213E038);
  v1 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
  {
    sub_1004AF720();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes stats compute time.\"}", v3, 0x12u);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10213E038);
  }
  v2 = qword_10229FD98;
  if (os_signpost_enabled((os_log_t)qword_10229FD98))
  {
    sub_1004AF720();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to receive correct MET minutes stats compute time.", "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes stats compute time.\"}", v3, 0x12u);
  }
  objc_end_catch();
}

void sub_1018FBF20()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213E430);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213E430);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 63, "-[CLStreamedLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10213E430);
  }
}

void sub_1018FC0A0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01E0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004B7AFC())
    {
      sub_1004B7AA4();
      sub_1004B7B10((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    if (sub_1004B7B48())
    {
      sub_1004B7AA4();
      sub_1004B7ADC((void *)&_mh_execute_header, v6, v7, v8, "Unexpected registration", "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    if (sub_1004B7B38())
    {
      sub_1004B7AA4();
      sub_1004B7B24((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 280, "registerForNotificationInternal");
LABEL_11:
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  }
}

void sub_1018FC21C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01E0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004B7AFC())
    {
      sub_1004B7AA4();
      sub_1004B7B10((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    if (sub_1004B7B48())
    {
      sub_1004B7AA4();
      sub_1004B7ADC((void *)&_mh_execute_header, v6, v7, v8, "Unexpected registration", "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    if (sub_1004B7B38())
    {
      sub_1004B7AA4();
      sub_1004B7B24((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Unexpected registration\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 325, "unregisterForNotificationInternal");
LABEL_11:
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  }
}

void sub_1018FC398()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01E0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#Multiclient must pass a non-nil target device\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#Multiclient must pass a non-nil target device", "{\"msg%{public}.0s\":\"#Multiclient must pass a non-nil target device\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#Multiclient must pass a non-nil target device\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 589, "registerForStreamingClientNotifications");
LABEL_11:
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  }
}

void sub_1018FC518()
{
  __assert_rtn("-[ALMotionState writeTo:]", "ALMotionState.m", 157, "self->_motion != nil");
}

#error "1018FC5B8: call analysis failed (funcsize=72)"

#error "1018FC724: call analysis failed (funcsize=72)"

#error "1018FC890: call analysis failed (funcsize=72)"

#error "1018FC9FC: call analysis failed (funcsize=72)"

#error "1018FCB68: call analysis failed (funcsize=72)"

void sub_1018FCC5C()
{
  __assert_rtn("-[ALActivityOverrideMsg writeTo:]", "ALActivityOverrideMsg.m", 108, "self->_activity != nil");
}

void sub_1018FCC84()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004F6CF4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"attempting to construct policies without controller\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    }
    if (sub_1004F6D18())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "attempting to construct policies without controller", "{\"msg%{public}.0s\":\"attempting to construct policies without controller\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    }
    if (sub_1004F6D08())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"attempting to construct policies without controller\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Service/CLHarvesterService.mm", 189, "-[CLHarvesterService constructPolicies]");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_10213F4E0);
  }
}

void sub_1018FCDF8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004F6CF4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"attempting to construct policies without gps monitor\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    }
    if (sub_1004F6D18())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "attempting to construct policies without gps monitor", "{\"msg%{public}.0s\":\"attempting to construct policies without gps monitor\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    }
    if (sub_1004F6D08())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"attempting to construct policies without gps monitor\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Service/CLHarvesterService.mm", 190, "-[CLHarvesterService constructPolicies]");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_10213F4E0);
  }
}

void sub_1018FCF6C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102140238);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102140238);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Odometer/CLOdometerNotifier.mm", 27, "-[CLOdometerNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102140238);
  }
}

void sub_1018FD0F4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102140718);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102140718);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102140718);
  }
}

void sub_1018FD264()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0020 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102140DD0);
    }
    v1 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102140DD0);
    }
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLNavModeEstimator.mm", 70, "feedActivityState");
LABEL_11:
    dispatch_once(&qword_1022A0020, &stru_102140DD0);
  }
}

void sub_1018FD430()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Utilities/CLCommon.mm", 2218, "determineClientServiceTypeMasks");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  }
}

#error "1018FD674: call analysis failed (funcsize=72)"

#error "1018FD7E0: call analysis failed (funcsize=72)"

#error "1018FD94C: call analysis failed (funcsize=72)"

#error "1018FDAB8: call analysis failed (funcsize=72)"

#error "1018FDC24: call analysis failed (funcsize=72)"

void sub_1018FDD18()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FC60 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102141648);
    }
    v1 = qword_10229FC68;
    if (os_signpost_enabled((os_log_t)qword_10229FC68))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLSPUEclipseInterface] Service required", "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC60 != -1)
        dispatch_once(&qword_10229FC60, &stru_102141648);
    }
    v2 = qword_10229FC68;
    if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLSPUEclipseInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Eclipse/CLSPUEclipseInterface.mm", 39, "sendCommand");
LABEL_11:
    dispatch_once(&qword_10229FC60, &stru_102141648);
  }
}

uint64_t sub_1018FDEE4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1018FDF04()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021424C0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021424C0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/SedentaryTimer/CLSedentaryTimerNotifier.mm", 43, "-[CLSedentaryTimerNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021424C0);
  }
}

void sub_1018FE084()
{
  __assert_rtn("getMedianInPlace", "CMPressureUtilities.h", 163, "size > 0");
}

#error "1018FE134: call analysis failed (funcsize=80)"

#error "1018FE2AC: call analysis failed (funcsize=72)"

#error "1018FE418: call analysis failed (funcsize=72)"

#error "1018FE584: call analysis failed (funcsize=72)"

#error "1018FE6F0: call analysis failed (funcsize=72)"

#error "1018FE85C: call analysis failed (funcsize=72)"

void sub_1018FE950()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102142C98);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102142C98);
    }
    if (sub_1005490CC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102142C98);
  }
}

#error "1018FEB30: call analysis failed (funcsize=70)"

#error "1018FEC90: call analysis failed (funcsize=70)"

#error "1018FEDF0: call analysis failed (funcsize=70)"

#error "1018FEF50: call analysis failed (funcsize=70)"

#error "1018FF0B0: call analysis failed (funcsize=70)"

#error "1018FF210: call analysis failed (funcsize=70)"

#error "1018FF370: call analysis failed (funcsize=70)"

void sub_1018FF45C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void sub_1018FF474(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void sub_1018FF48C(void **a1)
{
  if (*((char *)a1 + 23) < 0)
    sub_10055D19C(a1);
}

#error "1018FF510: call analysis failed (funcsize=70)"

#error "1018FF670: call analysis failed (funcsize=70)"

#error "1018FF7D0: call analysis failed (funcsize=70)"

#error "1018FF930: call analysis failed (funcsize=70)"

#error "1018FFA90: call analysis failed (funcsize=70)"

void sub_1018FFB7C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021437D8);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021437D8);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLLocationStreamingConnectionManager.mm", 532, "-[CLLocationStreamingConnectionManager service:account:identifier:didSendWithSuccess:error:]");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021437D8);
  }
}

void sub_1018FFD48()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021443E8);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPreferences.mm", 394, "setFileAttributes");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021443E8);
  }
}

void sub_1018FFF14()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentStore.mm", 371, "setStoreInterval");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021452C0);
  }
}

void sub_1019000E0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102145430);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102145430);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/HomeKitProvider/CLHomeKitProvider.mm", 82, "-[CLHomeKitProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102145430);
  }
}

void sub_10190025C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      sub_100593360();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"SystemService not found in kSystemServicesUsedInHarvesting\", \"SystemService\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
    }
    v1 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      sub_100593360();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "SystemService not found in kSystemServicesUsedInHarvesting", "{\"msg%{public}.0s\":\"SystemService not found in kSystemServicesUsedInHarvesting\", \"SystemService\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021459F8);
    }
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_100593360();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"SystemService not found in kSystemServicesUsedInHarvesting\", \"SystemService\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Controller/CLHarvestController.mm", 985, "updateClientAuthorization");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_1021459F8);
  }
}

void sub_101900464()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CLTelephonyServiceNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021460C0);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "CLTelephonyServiceNotifier Assertion failed", "{\"msg%{public}.0s\":\"CLTelephonyServiceNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021460C0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CLTelephonyServiceNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm", 248, "-[CLTelephonyServiceAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021460C0);
  }
}

void sub_1019005E0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLTelephonyService.mm", 611, "operator int");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  }
}

void sub_10190075C()
{
  __assert_rtn("notifyAllClients", "CLTelephonyService.mm", 1273, "!notificationInfo");
}

void sub_101900784()
{
  __assert_rtn("notifyAllClients", "CLTelephonyService.mm", 1270, "[expected containsObject:(NSString *)notification]");
}

#error "1019008E0: call analysis failed (funcsize=78)"

void sub_10190092C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

void sub_101900950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"WifiService, dispatchQ, Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "WifiService, dispatchQ, Assertion failed", "{\"msg%{public}.0s\":\"WifiService, dispatchQ, Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021469D0);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"WifiService, dispatchQ, Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  sub_100299FDC();
}

void sub_101900ABC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_1005CA060();
  if (!v1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

#error "101900D50: call analysis failed (funcsize=79)"

void sub_101900DA4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_1005CA060();
  if (!v1)
    dispatch_once(&qword_1022A02D0, &stru_102146A30);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146A30);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

#error "101901038: call analysis failed (funcsize=79)"

#error "1019011C0: call analysis failed (funcsize=79)"

void sub_101901214(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_101901228(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_102147A18);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_102147A18);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_102147A18);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 112;
  sub_100299FDC();
}

void sub_101901398(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_102147A18);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_102147A18);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_102147A18);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 107;
  sub_100299FDC();
}

void sub_101901508()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102147A38);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102147A38);
    }
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h", 258, "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102147A38);
  }
}

void sub_1019016C0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102147D30);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102147D30);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Context/CLMotionState.mm", 56, "-[CLMotionStateAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102147D30);
  }
}

void sub_101901848()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102147EC0);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102147EC0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102147EC0);
  }
}

void sub_1019019B8()
{
  __assert_rtn("set_message_type", "CLPLocationController.pb.h", 9683, "::CLP::LogEntry::PrivateData::MessageType_IsValid(value)");
}

void sub_1019019E0()
{
  __assert_rtn("set_scan_type", "CLPLocationController.pb.h", 6762, "::CLP::LogEntry::PrivateData::WifiScanType_IsValid(value)");
}

void sub_101901A08()
{
  __assert_rtn("set_signal_quality", "CLPLocationController.pb.h", 8219, "::CLP::LogEntry::PrivateData::Location_SignalQualityType_IsValid(value)");
}

void sub_101901A30()
{
  __assert_rtn("set_motion_detected", "CLPLocationController.pb.h", 8326, "::CLP::LogEntry::PrivateData::Location_MotionDetectedType_IsValid(value)");
}

void sub_101901A58()
{
  __assert_rtn("set_silo_type", "CLPLocationController.pb.h", 9614, "::CLP::LogEntry::PrivateData::Silo_Type_IsValid(value)");
}

void sub_101901A80()
{
  __assert_rtn("set_service_type", "CLPLocationController.pb.h", 9591, "::CLP::LogEntry::PrivateData::ServiceType_IsValid(value)");
}

void sub_101901AA8()
{
  NSObject *v0;
  NSObject *v1;
  uint8_t v2[24];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  v0 = qword_1022A00F8;
  if (sub_100290880())
  {
    sub_1004AF720();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Exception while decoding locationTypes\"}", v2, 0x12u);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021480E0);
  }
  v1 = qword_1022A00F8;
  if (os_signpost_enabled((os_log_t)qword_1022A00F8))
  {
    sub_1004AF720();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Exception while decoding locationTypes", "{\"msg%{public}.0s\":\"Exception while decoding locationTypes\"}", v2, 0x12u);
  }
  objc_end_catch();
}

void sub_101901BEC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC38;
    if (sub_100290880())
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102148120);
    }
    v1 = qword_10229FC38;
    if (os_signpost_enabled((os_log_t)qword_10229FC38))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102148120);
    }
    v2 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102148120);
  }
}

void sub_101901DB0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102148760);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102148760);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabase.mm", 23, "-[CLGyroCalibrationDatabaseLocationdAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102148760);
  }
}

void sub_101901F38(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_101901F8C(char a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t v22;

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    if (sub_1006199BC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18, v19, v20, v21, v22);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148A98);
    }
    if (sub_1006199E0())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18, v19, v20, v21, v22);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148A98);
    }
    if (sub_1006199D0())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18, v19, v20, v21, v22);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTransitMacTile.mm", 57, "traverseTileFile");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  }
}

void sub_1019020F8(char a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t v22;

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    if (sub_1006199BC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18, v19, v20, v21, v22);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148A98);
    }
    if (sub_1006199E0())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18, v19, v20, v21, v22);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102148A98);
    }
    if (sub_1006199D0())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18, v19, v20, v21, v22);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTransitMacTile.mm", 131, "extractTransitMacAddresses");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102148A98);
  }
}

#error "1019022E4: call analysis failed (funcsize=75)"

#error "101902458: call analysis failed (funcsize=75)"

#error "1019025CC: call analysis failed (funcsize=75)"

#error "1019027E8: call analysis failed (funcsize=75)"

void sub_101902834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Destination name should not be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  if (sub_1006418F0())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Destination name should not be NULL", "{\"msg%{public}.0s\":\"Destination name should not be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Destination name should not be NULL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  sub_100299FDC();
}

#error "101902AC4: call analysis failed (funcsize=76)"

#error "101902C48: call analysis failed (funcsize=77)"

void sub_101902C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102149350);
  if (sub_1004966FC())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102149350);
  }
  if (sub_100496720())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102149350);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  sub_100299FDC();
}

#error "101902E74: call analysis failed (funcsize=75)"

#error "101902FE8: call analysis failed (funcsize=75)"

#error "10190315C: call analysis failed (funcsize=75)"

#error "1019032C8: call analysis failed (funcsize=72)"

#error "101903430: call analysis failed (funcsize=72)"

#error "101903598: call analysis failed (funcsize=72)"

#error "101903700: call analysis failed (funcsize=72)"

void sub_1019037F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214A398);
  if (sub_1004966FC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A398);
  }
  if (sub_100496720())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A398);
  }
  if (sub_100496710())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

#error "1019039F0: call analysis failed (funcsize=72)"

void sub_101903AE0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10214A638);
  v0 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#luLive locationData serilization should only give 1 location\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10214A638);
  }
  v1 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#luLive locationData serilization should only give 1 location", "{\"msg%{public}.0s\":\"#luLive locationData serilization should only give 1 location\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10214A638);
  }
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#luLive locationData serilization should only give 1 location\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "101903D1C: call analysis failed (funcsize=72)"

#error "101903E88: call analysis failed (funcsize=72)"

#error "101903FF4: call analysis failed (funcsize=72)"

#error "101904160: call analysis failed (funcsize=72)"

#error "1019042CC: call analysis failed (funcsize=72)"

void sub_1019043C0()
{
  __assert_rtn("-[CLCompanionSyncInterestZone writeTo:]", "CLCompanionSyncInterestZone.m", 323, "nil != self->_zoneIdentifier");
}

void sub_1019043E8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  }
  v1 = qword_1022A02D8;
  if (os_signpost_enabled((os_log_t)qword_1022A02D8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214B2D8);
  }
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "10190462C: call analysis failed (funcsize=75)"

#error "101904798: call analysis failed (funcsize=73)"

#error "10190490C: call analysis failed (funcsize=76)"

#error "101904A88: call analysis failed (funcsize=75)"

void sub_101904B7C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214C560);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214C560);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/LocationController/CLLocationController.mm", 159, "-[CLLocationControllerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  }
}

void sub_101904D48(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*a1 == a2)
  {
    v2 = 4;
  }
  else
  {
    if (!*a1)
      goto LABEL_6;
    v2 = 5;
    a2 = (_QWORD *)*a1;
  }
  (*(void (**)(_QWORD *))(*a2 + 8 * v2))(a2);
LABEL_6:
  operator delete();
}

void sub_101904DAC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214CDB0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214CDB0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiLocationProvider.mm", 30, "-[CLWifiLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10214CDB0);
  }
}

void sub_101904F2C(char a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t v22;

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"should not send out an empty container of batched wifi locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18, v19, v20, v21, v22);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v7, v8, v9, "should not send out an empty container of batched wifi locations", "{\"msg%{public}.0s\":\"should not send out an empty container of batched wifi locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18, v19, v20, v21, v22);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"should not send out an empty container of batched wifi locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18, v19, v20, v21, v22);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiLocationProvider.mm", 958, "handleLogicOutput");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  }
}

#error "101905134: call analysis failed (funcsize=80)"

#error "1019052AC: call analysis failed (funcsize=71)"

#error "101905410: call analysis failed (funcsize=71)"

#error "101905574: call analysis failed (funcsize=71)"

#error "1019056D8: call analysis failed (funcsize=71)"

void sub_1019057C4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm", 160, "-[CLMotionStateMediatorAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  }
}

void sub_10190594C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1006DA48C())
    {
      sub_100299F04();
      sub_100299FB4((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
    }
    if (sub_1006DA4B0())
    {
      sub_100299F04();
      sub_100299F3C((void *)&_mh_execute_header, v6, v7, v8, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
    }
    if (sub_1006DA4A0())
    {
      sub_100299F04();
      sub_100299FC8((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm", 2134, "onDaemonStatus");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_10214D488);
  }
}

void sub_101905AC8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1006DA48C())
    {
      sub_100299F04();
      sub_100299FB4((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
    }
    if (sub_1006DA4B0())
    {
      sub_100299F04();
      sub_100299F3C((void *)&_mh_execute_header, v6, v7, v8, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10214D488);
    }
    if (sub_1006DA4A0())
    {
      sub_100299F04();
      sub_100299FC8((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/CLMotionStateMediator.mm", 2235, "onMotionStateObserverNotification");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_10214D488);
  }
}

void sub_101905C44()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10214EB70);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10214EB70);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10214EB70);
  }
}

void sub_101905DB4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10214FAD8);
    }
    if (sub_1005490CC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10214FAD8);
  }
}

void sub_101905F20()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18;

  sub_1006F9FB4();
  if (!v0)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  if (sub_1006F9FA0())
  {
    sub_10025CD44();
    sub_10039549C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"failure to bind row_id\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18);
    sub_1006F9FB4();
    if (!v0)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  }
  if (sub_1006418F0())
  {
    sub_10025CD44();
    sub_10039547C((void *)&_mh_execute_header, v7, v8, v9, "failure to bind row_id", "{\"msg%{public}.0s\":\"failure to bind row_id\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18);
    sub_1006F9FB4();
    if (!v0)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  }
  if (sub_1006F9FC0())
  {
    sub_10025CD44();
    sub_1003954B0((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"failure to bind row_id\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18);
  }
  sub_100299FDC();
}

void sub_101906064()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18;

  sub_1006F9FB4();
  if (!v0)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  if (sub_1006F9FA0())
  {
    sub_10025CD44();
    sub_10039549C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"failure to bind\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18);
    sub_1006F9FB4();
    if (!v0)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  }
  if (sub_1006418F0())
  {
    sub_10025CD44();
    sub_10039547C((void *)&_mh_execute_header, v7, v8, v9, "failure to bind", "{\"msg%{public}.0s\":\"failure to bind\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18);
    sub_1006F9FB4();
    if (!v0)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  }
  if (sub_1006F9FC0())
  {
    sub_10025CD44();
    sub_1003954B0((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"failure to bind\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18);
  }
  sub_100299FDC();
}

void sub_1019061A8()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18;

  sub_1006F9FB4();
  if (!v0)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  if (sub_1006F9FA0())
  {
    sub_10025CD44();
    sub_10039549C((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"failure to bind mac when deleting by mac!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18);
    sub_1006F9FB4();
    if (!v0)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  }
  if (sub_1006418F0())
  {
    sub_10025CD44();
    sub_10039547C((void *)&_mh_execute_header, v7, v8, v9, "failure to bind mac when deleting by mac!", "{\"msg%{public}.0s\":\"failure to bind mac when deleting by mac!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18);
    sub_1006F9FB4();
    if (!v0)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  }
  if (sub_1006F9FC0())
  {
    sub_10025CD44();
    sub_1003954B0((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"failure to bind mac when deleting by mac!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18);
  }
  sub_100299FDC();
}

#error "10190636C: call analysis failed (funcsize=76)"

void sub_101906464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  if (sub_1004966FC())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  }
  if (sub_100496720())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  sub_100299FDC();
}

#error "10190663C: call analysis failed (funcsize=73)"

#error "1019067A8: call analysis failed (funcsize=73)"

#error "101906914: call analysis failed (funcsize=73)"

#error "101906A80: call analysis failed (funcsize=73)"

void sub_101906B74(_DWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10214FFB0);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    sub_100299ED8();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Nearby request complete without keys for the tag\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10214FFB0);
  }
  v3 = qword_1022A0068;
  if (os_signpost_enabled((os_log_t)qword_1022A0068))
  {
    sub_100299ED8();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Nearby request complete without keys for the tag", "{\"msg%{public}.0s\":\"Nearby request complete without keys for the tag\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10214FFB0);
  }
  v4 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    sub_100299ED8();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Nearby request complete without keys for the tag\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
  *a1 = 2230;
  sub_100299FDC();
}

void sub_101906D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214FFF0);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Partial numer of ALS aps saved\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214FFF0);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Partial numer of ALS aps saved", "{\"msg%{public}.0s\":\"Partial numer of ALS aps saved\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214FFF0);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Partial numer of ALS aps saved\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
  sub_100299FDC();
}

#error "101906F1C: call analysis failed (funcsize=76)"

void sub_101907014()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FD80 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[AccessoryProximity] Incorrect optical and temperature size.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
    }
    v1 = qword_10229FD88;
    if (os_signpost_enabled((os_log_t)qword_10229FD88))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[AccessoryProximity] Incorrect optical and temperature size.", "{\"msg%{public}.0s\":\"[AccessoryProximity] Incorrect optical and temperature size.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD80 != -1)
        dispatch_once(&qword_10229FD80, &stru_102150318);
    }
    v2 = qword_10229FD88;
    if (os_log_type_enabled((os_log_t)qword_10229FD88, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[AccessoryProximity] Incorrect optical and temperature size.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLAccessoryProximity.mm", 178, "onEventData");
LABEL_11:
    dispatch_once(&qword_10229FD80, &stru_102150318);
  }
}

void sub_1019071E0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102150680);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102150680);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Accessory/CLAccessoryLocationProvider.mm", 59, "-[CLAccessoryLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102150680);
  }
}

void sub_1019073AC(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CarKitLibrary()"), CFSTR("CLAccessoryLocationProvider.mm"), 39, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_101907410()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCARSessionStatusClass()_block_invoke"), CFSTR("CLAccessoryLocationProvider.mm"), 41, CFSTR("Unable to find class %s"), "CARSessionStatus");
  __break(1u);
}

void sub_101907474()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102151218);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102151218);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLFilteredLocationController.mm", 52, "-[CLFilteredLocationControllerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102151218);
  }
}

void sub_101907640(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[40];

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    v1 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102151370);
    }
    v2 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102151370);
    }
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLRegionPreloadManifestTile.mm", 56, "traverseTileFile");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102151370);
  }
}

void sub_10190780C()
{
  __assert_rtn("set_gnss_content_in_fix", "GnssTypes.pb.h", 2020, "::proto::gnss::GnssContent_IsValid(value)");
}

void sub_101907834()
{
  __assert_rtn("set_reliability", "GnssTypes.pb.h", 1975, "::proto::gnss::Reliability_IsValid(value)");
}

void sub_10190785C()
{
  __assert_rtn("set_estimation_technology", "GnssTypes.pb.h", 2533, "::proto::gnss::EstimationTechnology_IsValid(value)");
}

void sub_101907884()
{
  __assert_rtn("set_quality", "GnssTypes.pb.h", 2624, "::proto::gnss::TimeQuality_IsValid(value)");
}

void sub_1019078AC()
{
  __assert_rtn("set_status", "GnssTypes.pb.h", 3193, "::proto::gnss::PwrMeasurement_PowerLoggingStatus_IsValid(value)");
}

void sub_1019078D4()
{
  __assert_rtn("set_assistance_file_type", "GnssTypes.pb.h", 3334, "::CLP::LogEntry::PrivateData::SvPositionSource_IsValid(value)");
}

void sub_1019078FC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FD20 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021521F0);
    }
    v1 = qword_10229FD28;
    if (os_signpost_enabled((os_log_t)qword_10229FD28))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Service required", "{\"msg%{public}.0s\":\"Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_1021521F0);
    }
    v2 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Utilities/CLDeviceMotionControl.mm", 84, "sendCommand");
LABEL_11:
    dispatch_once(&qword_10229FD20, &stru_1021521F0);
  }
}

void sub_101907AC8()
{
  __assert_rtn("apply", "normalize_spheroidal_coordinates.hpp", 312, "! math::larger(longitude, constants::max_longitude())");
}

void sub_101907AF0()
{
  __assert_rtn("apply", "normalize_spheroidal_coordinates.hpp", 311, "math::smaller(constants::min_longitude(), longitude)");
}

void sub_101907B18()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0020 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLC: Enable CLRouteListener when already enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102152638);
    }
    v1 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLC: Enable CLRouteListener when already enabled", "{\"msg%{public}.0s\":\"CLC: Enable CLRouteListener when already enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102152638);
    }
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLC: Enable CLRouteListener when already enabled\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Transit/CLRouteListener.mm", 84, "-[CLRouteListener enable]");
LABEL_11:
    dispatch_once(&qword_1022A0020, &stru_102152638);
  }
}

void sub_101907CE4(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0070, &stru_102152998);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLSE,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
  }
  v2 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLSE,Assertion failed", "{\"msg%{public}.0s\":\"CLSE,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102152998);
  }
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLSE,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101907EA0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      sub_1007AA514();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Usage of incorrect column to update timestamp\", \"column\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021530C0);
    }
    v1 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      sub_1007AA514();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Usage of incorrect column to update timestamp", "{\"msg%{public}.0s\":\"Usage of incorrect column to update timestamp\", \"column\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021530C0);
    }
    v2 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      sub_1007AA514();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Usage of incorrect column to update timestamp\", \"column\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Network/CLWifiTileHeaderDatabase.mm", 293, "updateTimestampByTileXY");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_1021530C0);
  }
}

void sub_1019080A8()
{
  operator delete((void *)qword_102304A28);
}

#error "1019081D4: call analysis failed (funcsize=73)"

#error "101908340: call analysis failed (funcsize=73)"

void sub_10190838C()
{
  NSObject *v0;
  void *v1;
  os_log_t v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint8_t v9[56];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v0 = qword_1022A01D8;
  if (sub_10034F4E4(qword_1022A01D8))
  {
    sub_1007F99F0();
    sub_100320BEC();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Connection to #CoreLocationAgent already exists\", \"User\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, 0x30u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9A04())
  {
    sub_1007F99F0();
    sub_100320BEC();
    sub_1007F9A10();
    _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x30u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  v8 = qword_1022A01D8;
  if (sub_100299F70(qword_1022A01D8))
  {
    sub_1007F99F0();
    sub_100320BEC();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Connection to #CoreLocationAgent already exists\", \"User\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, 0x30u);
  }
}

#error "101908660: call analysis failed (funcsize=74)"

#error "1019087D4: call analysis failed (funcsize=74)"

#error "101908948: call analysis failed (funcsize=74)"

#error "101908ABC: call analysis failed (funcsize=74)"

#error "101908C30: call analysis failed (funcsize=73)"

#error "101908D9C: call analysis failed (funcsize=74)"

void sub_101908DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1007F99C8();
  if (!v27)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  if (sub_1007F9954())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Path must not be the empty string here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9978())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "Path must not be the empty string here", "{\"msg%{public}.0s\":\"Path must not be the empty string here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9968())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Path must not be the empty string here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_101908F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1007F99C8();
  if (!v27)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  if (sub_1007F9954())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9978())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "dynamic_pointer_cast must never fail in this context", "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9968())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "1019091A0: call analysis failed (funcsize=74)"

void sub_1019091F4()
{
  NSObject *v0;
  void *v1;
  os_log_t v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint8_t buf[72];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (sub_10034F4E4(qword_1022A01D8))
    {
      sub_1007F9A28();
      sub_1007F9984();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"destroying disconnected #dic - not found\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    if (sub_1007F9A04())
    {
      sub_1007F9A28();
      sub_1007F9984();
      sub_1007F9A10();
      _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x3Au);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v8 = qword_1022A01D8;
    if (sub_100299F70(qword_1022A01D8))
    {
      sub_1007F9A28();
      sub_1007F9984();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"destroying disconnected #dic - not found\", \"ClientKey\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm", 3514, "destroyDaemonIdentifiableClient");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
}

void sub_1019093C0()
{
  NSObject *v0;
  void *v1;
  os_log_t v2;
  os_signpost_type_t v3;
  os_signpost_id_t v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  NSObject *v8;
  uint8_t buf[56];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (sub_10034F4E4(qword_1022A01D8))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor unable to create storage token\", \"error\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    if (sub_1007F9A04())
    {
      sub_100299EA0();
      sub_1007F9A10();
      _os_signpost_emit_with_name_impl(v1, v2, v3, v4, v5, v6, v7, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v8 = qword_1022A01D8;
    if (sub_100299F70(qword_1022A01D8))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor unable to create storage token\", \"error\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Unified.mm", 6214, "createStorageTokenOrGetIfExists");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
}

#error "101909698: call analysis failed (funcsize=74)"

void sub_1019096EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1007F99C8();
  if (!v27)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  if (sub_1007F9954())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should be identical to registered zone\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9978())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "info.plist zone registration, zone-to-reconcile should be identical to registered zone", "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should be identical to registered zone\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9968())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should be identical to registered zone\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_101909834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1007F99C8();
  if (!v27)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  if (sub_1007F9954())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should exists in clients.plist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9978())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "info.plist zone registration, zone-to-reconcile should exists in clients.plist", "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should exists in clients.plist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 464) != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
  }
  if (sub_1007F9968())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"info.plist zone registration, zone-to-reconcile should exists in clients.plist\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101909AA8: call analysis failed (funcsize=76)"

#error "101909C28: call analysis failed (funcsize=78)"

#error "101909D94: call analysis failed (funcsize=74)"

#error "101909F08: call analysis failed (funcsize=74)"

#error "10190A07C: call analysis failed (funcsize=74)"

#error "10190A1F0: call analysis failed (funcsize=74)"

void sub_10190A244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10029A040();
  a23 = v24;
  a24 = v25;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v26, v27, "{\"msg%{public}.0s\":\"destruction without invalidation\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v28, v29, v30, "destruction without invalidation", "{\"msg%{public}.0s\":\"destruction without invalidation\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"destruction without invalidation\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_10190A3A8()
{
  __assert_rtn("onStatusBarNotification", "CLClientManager.mm", 5396, "data.entity == CLStatusBarIconManager_Type::kEntityClassSystemService");
}

void sub_10190A3D0()
{
  __assert_rtn("onStatusBarNotification", "CLClientManager.mm", 5400, "data.entity == CLStatusBarIconManager_Type::kEntityClassFindMyiPhone");
}

void sub_10190A3F8()
{
  __assert_rtn("onStatusBarNotification", "CLClientManager.mm", 5404, "data.entity == CLStatusBarIconManager_Type::kEntityClassEmergencyService");
}

void sub_10190A420()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100804608())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102154BF8);
    }
    if (sub_10080462C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102154BF8);
    }
    if (sub_10080461C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm", 227, "startThreads");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FD30, &stru_102154BF8);
  }
}

void sub_10190A594()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100804608())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102154BF8);
    }
    if (sub_10080462C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102154BF8);
    }
    if (sub_10080461C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm", 246, "stopThreads");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FD30, &stru_102154BF8);
  }
}

void sub_10190A708()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100804608())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102154BF8);
    }
    if (sub_10080462C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_102154BF8);
    }
    if (sub_10080461C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorTemperatureController.mm", 76, "setLoad");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FD30, &stru_102154BF8);
  }
}

#error "10190A8F4: call analysis failed (funcsize=72)"

#error "10190AA60: call analysis failed (funcsize=72)"

#error "10190ABCC: call analysis failed (funcsize=72)"

#error "10190AD38: call analysis failed (funcsize=72)"

#error "10190AEA4: call analysis failed (funcsize=72)"

void sub_10190AF98()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1007F9954())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#slv programmer error.  Only call this function after setting client interest to PendingDelete\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
    }
    if (sub_1007F9978())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#slv programmer error.  Only call this function after setting client interest to PendingDelete", "{\"msg%{public}.0s\":\"#slv programmer error.  Only call this function after setting client interest to PendingDelete\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
    }
    if (sub_1007F9968())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#slv programmer error.  Only call this function after setting client interest to PendingDelete\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantVisitManager.mm", 555, "-[CLSignificantVisitManager actOnPendingDeleteForClientKey:]");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_102155348);
  }
}

void sub_10190B104()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1007F9954())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#slv Visit must be non-nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
    }
    if (sub_1007F9978())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#slv Visit must be non-nil", "{\"msg%{public}.0s\":\"#slv Visit must be non-nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102155348);
    }
    if (sub_1007F9968())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#slv Visit must be non-nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantVisitManager.mm", 598, "-[CLSignificantVisitManager notifyClientsOfVisit:]");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_102155348);
  }
}

void sub_10190B270()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102155AC8);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102155AC8);
    }
    if (sub_1005490CC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102155AC8);
  }
}

void sub_10190B3DC()
{
  __assert_rtn("increment", "token_iterator.hpp", 54, "valid_");
}

void sub_10190B404()
{
  __assert_rtn("TransposeDataFootprint", "cnmatrix.h", 122, "scratch != nullptr");
}

void sub_10190B42C()
{
  __assert_rtn("TransposeDataFootprint", "cnmatrix.h", 128, "lead_dim > 0");
}

void sub_10190B454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC2C();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v29, v30, "{\"msg%{public}.0s\":\"fPowerLogger assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v31, v32, "fPowerLogger assertion failed", "{\"msg%{public}.0s\":\"fPowerLogger assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"fPowerLogger assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_10190B5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  v29 = v28;
  sub_10085FC18();
  if (!v30)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#awd,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v31, v32, "#awd,Assertion failed", "{\"msg%{public}.0s\":\"#awd,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#awd,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v29 = 148;
  sub_100299FDC();
}

void sub_10190B708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  v29 = v28;
  sub_10085FC18();
  if (!v30)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#gnssawd Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v31, v32, "#gnssawd Assertion failed", "{\"msg%{public}.0s\":\"#gnssawd Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#gnssawd Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *v29 = 176;
  sub_100299FDC();
}

void sub_10190B870(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*a1 == a2)
  {
    v2 = 4;
  }
  else
  {
    if (!*a1)
      goto LABEL_6;
    v2 = 5;
    a2 = (_QWORD *)*a1;
  }
  (*(void (**)(_QWORD *))(*a2 + 8 * v2))(a2);
LABEL_6:
  operator delete();
}

#error "10190B948: call analysis failed (funcsize=75)"

void sub_10190BA48()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;

  sub_10085FBDC();
  do
    sub_10085FB98(v0);
  while (v2);
  if (!v1)
  {
    sub_10085FB88();
    sub_10085FBD4();
  }
  sub_10085FBCC();
}

#error "10190BAEC: call analysis failed (funcsize=74)"

#error "10190BC60: call analysis failed (funcsize=75)"

#error "10190BDD8: call analysis failed (funcsize=74)"

#error "10190BF4C: call analysis failed (funcsize=74)"

#error "10190C0C0: call analysis failed (funcsize=74)"

#error "10190C234: call analysis failed (funcsize=74)"

void sub_10190C330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v26;
  a24 = v27;
  sub_10085FC2C();
  if (!v28)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v29, v30, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_100299E88((void *)&_mh_execute_header, v24, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v25 + 112) != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_10190C47C(char *a1, void **a2, void **a3, void **a4)
{
  if (a1[1175] < 0)
    operator delete(*a2);
  if (a1[1007] < 0)
    operator delete(*a3);
  if (a1[983] < 0)
    operator delete(*a4);
}

void sub_10190C4D8(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    sub_10085FB88();
    sub_10085FBD4();
  }
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
    sub_10085FBCC();
  }
  else
  {
    sub_10085FB88();
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_10190C538()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor unknown variant of condition is received\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102157B78);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor unknown variant of condition is received", "{\"msg%{public}.0s\":\"#monitor unknown variant of condition is received\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102157B78);
    }
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor unknown variant of condition is received\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemonMonitoringRecord.mm", 142, "-[CLDaemonMonitoringRecord setupDaemonPartOfConditionWithAuthContext:clientKeyPath:universe:identifier:stopMonitoring:callbackHandler:]");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_102157B78);
  }
}

#error "10190C77C: call analysis failed (funcsize=72)"

#error "10190C8E8: call analysis failed (funcsize=72)"

#error "10190CA54: call analysis failed (funcsize=72)"

#error "10190CBC0: call analysis failed (funcsize=72)"

#error "10190CD2C: call analysis failed (funcsize=72)"

void sub_10190CE20()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158238);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158238);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/BacklightState/CLBacklightStateNotifier.mm", 30, "-[CLBacklightStateNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102158238);
  }
}

void sub_10190CFA0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158978);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102158978);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/WatchOrientationSettings/CLWatchOrientationSettingsNotifier.mm", 34, "-[CLWatchOrientationSettingsNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102158978);
  }
}

void sub_10190D128()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102158AE8);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102158AE8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102158AE8);
  }
}

void sub_10190D298(std::__shared_weak_count *a1)
{
  unint64_t *p_shared_owners;
  unint64_t v3;

  p_shared_owners = (unint64_t *)&a1->__shared_owners_;
  do
    v3 = __ldaxr(p_shared_owners);
  while (__stlxr(v3 - 1, p_shared_owners));
  if (!v3)
  {
    sub_10085FB88();
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_10190D2D8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a1;
  *a1 = 0;
  if (v4)
    operator delete();
  v5 = *a2;
  *a2 = 0;
  if (v5)
    operator delete();
  result = *a3;
  *a3 = 0;
  if (result)
    operator delete();
  return result;
}

void sub_10190D364()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102159380);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102159380);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLCorrectiveCompensatedLocationProvider.mm", 51, "-[CLCorrectiveCompensatedLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102159380);
  }
}

void sub_10190D4E4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.", "{\"msg%{public}.0s\":\"#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021593A0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#cclp notifying clients when CompensationTimer is scheduled. Not Allowed.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLCorrectiveCompensatedLocationProvider.mm", 359, "notifyClientsWithData");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_1021593A0);
  }
}

#error "10190D6E4: call analysis failed (funcsize=75)"

#error "10190D858: call analysis failed (funcsize=75)"

#error "10190D9CC: call analysis failed (funcsize=75)"

void sub_10190DAC0()
{
  __assert_rtn("set_geofence_control_event", "CLPPrivateDataCapture.pb.h", 2842, "::CLP::LogEntry::RegionMonitoring::RegionMonitoringControl_IsValid(value)");
}

void sub_10190DAE8()
{
  __assert_rtn("down_cast", "common.h", 348, "f == NULL || dynamic_cast<To>(f) != NULL");
}

void sub_10190DB10(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_10190DB74(void **a1, void **a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;

  v7 = *a1;
  if (v7)
  {
    *(_QWORD *)(a4 + 104) = v7;
    operator delete(v7);
  }
  v8 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a4 + 80) = v8;
    operator delete(v8);
  }
  return sub_100261F44(a3);
}

void sub_10190DBC4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FCD0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10215A570);
    }
    v1 = qword_10229FCD8;
    if (os_signpost_enabled((os_log_t)qword_10229FCD8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10215A570);
    }
    v2 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/StrideCalibration/CMStrideCalibrator.mm", 301, "-[CMStrideCalibrator attemptForcedLocation]");
LABEL_11:
    dispatch_once(&qword_10229FCD0, &stru_10215A570);
  }
}

void sub_10190DD90()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1008B9EF8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215A620);
    }
    if (sub_1008B9F1C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "tile id doesn't exist in tiles map", "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215A620);
    }
    if (sub_1008B9F0C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesMap.mm", 97, "unprotectedErase");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_10215A620);
  }
}

void sub_10190DF04()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1008B9EF8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215A620);
    }
    if (sub_1008B9F1C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "tile id doesn't exist in tiles map", "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10215A620);
    }
    if (sub_1008B9F0C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"tile id doesn't exist in tiles map\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesMap.mm", 112, "unprotectedAdd");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_10215A620);
  }
}

void sub_10190E078()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215A918);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215A918);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/FitnessTracking/CLFitnessTrackingNotifier.mm", 36, "-[CLFitnessTrackingNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10215A918);
  }
}

void sub_10190E200()
{
  __assert_rtn("set_error_code", "GnssEmergencyTypes.pb.h", 13384, "::proto::gnss::Emergency::SessionErrorCode_IsValid(value)");
}

void sub_10190E228()
{
  __assert_rtn("set_pos_req_type", "GnssEmergencyTypes.pb.h", 13361, "::proto::gnss::Emergency::PositionReqType_IsValid(value)");
}

void sub_10190E250()
{
  __assert_rtn("set_protocol_type", "GnssEmergencyTypes.pb.h", 13272, "::proto::gnss::Emergency::PositionProtocol_IsValid(value)");
}

void sub_10190E278()
{
  __assert_rtn("set_session_type", "GnssEmergencyTypes.pb.h", 13249, "::proto::gnss::Emergency::PositionSession_IsValid(value)");
}

void sub_10190E2A0()
{
  __assert_rtn("set_method_type", "GnssEmergencyTypes.pb.h", 13226, "::proto::gnss::Emergency::PositionMethod_IsValid(value)");
}

void sub_10190E2C8()
{
  __assert_rtn("set_freq_mode", "GnssEmergencyTypes.pb.h", 14153, "::proto::gnss::Emergency::FreqMode_IsValid(value)");
}

void sub_10190E2F0()
{
  __assert_rtn("set_cell_type", "GnssEmergencyTypes.pb.h", 14202, "::proto::gnss::Emergency::CellType_IsValid(value)");
}

void sub_10190E318()
{
  __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 14514, "::proto::gnss::Emergency::WlanMeasurementResult_IsValid(value)");
}

void sub_10190E340()
{
  __assert_rtn("set_slp_address_type", "GnssEmergencyTypes.pb.h", 14702, "::proto::gnss::Emergency::SLPAddressType_IsValid(value)");
}

void sub_10190E368()
{
  __assert_rtn("set_trigger_type", "GnssEmergencyTypes.pb.h", 14914, "::proto::gnss::Emergency::TriggerType_IsValid(value)");
}

void sub_10190E390()
{
  __assert_rtn("set_pos_method", "GnssEmergencyTypes.pb.h", 14941, "::proto::gnss::Emergency::PositionMethod_IsValid(value)");
}

void sub_10190E3B8()
{
  __assert_rtn("set_end_cause", "GnssEmergencyTypes.pb.h", 15570, "::proto::gnss::Emergency::EndCause_IsValid(value)");
}

void sub_10190E3E0()
{
  __assert_rtn("set_status", "GnssEmergencyTypes.pb.h", 15547, "::proto::gnss::Emergency::Status_IsValid(value)");
}

void sub_10190E408()
{
  __assert_rtn("set_pos_method", "GnssEmergencyTypes.pb.h", 15524, "::proto::gnss::Emergency::PositionMethod_IsValid(value)");
}

void sub_10190E430()
{
  __assert_rtn("set_modem_state", "GnssEmergencyTypes.pb.h", 16057, "::proto::gnss::Emergency::ClsModemState_IsValid(value)");
}

void sub_10190E458()
{
  __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 16177, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
}

void sub_10190E480()
{
  __assert_rtn("set_session_protocol", "GnssEmergencyTypes.pb.h", 16154, "::proto::gnss::Emergency::SessionProtocol_IsValid(value)");
}

void sub_10190E4A8()
{
  __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 16535, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
}

void sub_10190E4D0()
{
  __assert_rtn("set_method", "GnssEmergencyTypes.pb.h", 16248, "::proto::gnss::Emergency::MethodType_IsValid(value)");
}

void sub_10190E4F8()
{
  __assert_rtn("set_gps_time_measured_type", "GnssEmergencyTypes.pb.h", 16920, "::proto::gnss::Emergency::ClsNetworkType_IsValid(value)");
}

void sub_10190E520()
{
  __assert_rtn("set_fix_type", "GnssEmergencyTypes.pb.h", 17125, "::proto::gnss::Emergency::FixType_IsValid(value)");
}

void sub_10190E548()
{
  __assert_rtn("set_ganss_time_measured_type", "GnssEmergencyTypes.pb.h", 17926, "::proto::gnss::Emergency::ClsNetworkType_IsValid(value)");
}

void sub_10190E570()
{
  __assert_rtn("set_fix_type", "GnssEmergencyTypes.pb.h", 18084, "::proto::gnss::Emergency::FixType_IsValid(value)");
}

void sub_10190E598()
{
  __assert_rtn("set_time_id", "GnssEmergencyTypes.pb.h", 17995, "::proto::gnss::Emergency::GnssTimeId_IsValid(value)");
}

void sub_10190E5C0()
{
  __assert_rtn("set_shape_type", "GnssEmergencyTypes.pb.h", 19156, "::proto::gnss::Emergency::ShapeType_IsValid(value)");
}

void sub_10190E5E8()
{
  __assert_rtn("set_velocity_type", "GnssEmergencyTypes.pb.h", 19743, "::proto::gnss::Emergency::VelocityType_IsValid(value)");
}

void sub_10190E610()
{
  __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 19812, "::proto::gnss::Emergency::ErrorCodes_IsValid(value)");
}

void sub_10190E638()
{
  __assert_rtn("set_multi_path", "GnssEmergencyTypes.pb.h", 20181, "::proto::gnss::Emergency::MultipathIndicator_IsValid(value)");
}

void sub_10190E660()
{
  __assert_rtn("set_ganss_id", "GnssEmergencyTypes.pb.h", 20391, "::proto::gnss::Emergency::GanssId_IsValid(value)");
}

void sub_10190E688()
{
  __assert_rtn("set_time_id", "GnssEmergencyTypes.pb.h", 20460, "::proto::gnss::Emergency::GnssTimeId_IsValid(value)");
}

void sub_10190E6B0()
{
  __assert_rtn("set_multi_path", "GnssEmergencyTypes.pb.h", 20813, "::proto::gnss::Emergency::MultipathIndicator_IsValid(value)");
}

void sub_10190E6D8()
{
  __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 21129, "::proto::gnss::Emergency::ErrorCodes_IsValid(value)");
}

void sub_10190E700()
{
  __assert_rtn("set_ganss_id", "GnssEmergencyTypes.pb.h", 21956, "::proto::gnss::Emergency::LcsGanssId_IsValid(value)");
}

void sub_10190E728()
{
  __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 22344, "::proto::gnss::Emergency::ErrorCodes_IsValid(value)");
}

void sub_10190E750()
{
  __assert_rtn("set_cell_time_assistance_type", "GnssEmergencyTypes.pb.h", 23024, "::proto::gnss::Emergency::ClsNetworkType_IsValid(value)");
}

void sub_10190E778()
{
  __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 23365, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
}

void sub_10190E7A0()
{
  __assert_rtn("set_session_protocol", "GnssEmergencyTypes.pb.h", 23342, "::proto::gnss::Emergency::SessionProtocol_IsValid(value)");
}

void sub_10190E7C8()
{
  __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 23679, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
}

void sub_10190E7F0()
{
  __assert_rtn("set_session_protocol", "GnssEmergencyTypes.pb.h", 23656, "::proto::gnss::Emergency::SessionProtocol_IsValid(value)");
}

void sub_10190E818()
{
  __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 24550, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
}

void sub_10190E840()
{
  __assert_rtn("set_session_protocol", "GnssEmergencyTypes.pb.h", 24527, "::proto::gnss::Emergency::SessionProtocol_IsValid(value)");
}

void sub_10190E868()
{
  __assert_rtn("set_doppler_uncer_ext", "GnssEmergencyTypes.pb.h", 25157, "::proto::gnss::Emergency::GpsDopplerUncMpsExt_IsValid(value)");
}

void sub_10190E890()
{
  __assert_rtn("set_pos_protocol", "GnssEmergencyTypes.pb.h", 25340, "::proto::gnss::Emergency::PosProtocol_IsValid(value)");
}

void sub_10190E8B8()
{
  __assert_rtn("set_session_protocol", "GnssEmergencyTypes.pb.h", 25317, "::proto::gnss::Emergency::SessionProtocol_IsValid(value)");
}

void sub_10190E8E0()
{
  __assert_rtn("set_network_type", "GnssEmergencyTypes.pb.h", 25389, "::proto::gnss::Emergency::ClsNetworkType_IsValid(value)");
}

void sub_10190E908()
{
  __assert_rtn("set_network_type", "GnssEmergencyTypes.pb.h", 25439, "::proto::gnss::Emergency::ClsNetworkType_IsValid(value)");
}

void sub_10190E930()
{
  __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 25416, "::proto::gnss::Result_IsValid(value)");
}

void sub_10190E958()
{
  __assert_rtn("set_fix_type", "GnssEmergencyTypes.pb.h", 26012, "::proto::gnss::Emergency::FixType_IsValid(value)");
}

void sub_10190E980()
{
  __assert_rtn("set_aflt_action", "GnssEmergencyTypes.pb.h", 26402, "::proto::gnss::Emergency::AfltAction_IsValid(value)");
}

void sub_10190E9A8()
{
  __assert_rtn("set_result", "GnssEmergencyTypes.pb.h", 26231, "::proto::gnss::Emergency::ErrorCodes_IsValid(value)");
}

void sub_10190E9D0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"failed to invalidate before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10215E570);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "failed to invalidate before dealloc", "{\"msg%{public}.0s\":\"failed to invalidate before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10215E570);
    }
    if (sub_100903234())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"failed to invalidate before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLVisibilityAssertion.m", 48, "-[CLStatusBarAssertion dealloc]");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_10215E570);
  }
}

void sub_10190EB3C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"failed to get assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10215E570);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "failed to get assertion", "{\"msg%{public}.0s\":\"failed to get assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10215E570);
    }
    if (sub_100903234())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"failed to get assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLVisibilityAssertion.m", 64, "-[CLStatusBarAssertion setDesiredEnablementState:]");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_10215E570);
  }
}

void sub_10190ECA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215E918);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10215E918);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceManager.mm", 51, "-[CLFenceManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10215E918);
  }
}

void sub_10190EE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0060 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10091D998())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Attempting to send fence transition, but state unknown\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10215E938);
    }
    if (sub_10091D9C4())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Attempting to send fence transition, but state unknown", "{\"msg%{public}.0s\":\"Attempting to send fence transition, but state unknown\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_10215E938);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Attempting to send fence transition, but state unknown\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceManager.mm", 911, "notifyFenceEntryExitForAuthorizedFence");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0060, &stru_10215E938);
  }
}

void sub_10190EFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10215E938);
  if (sub_10091D998())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"onAuthorizationNotification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215E938);
  }
  if (sub_10091D9C4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "onAuthorizationNotification fence without key", "{\"msg%{public}.0s\":\"onAuthorizationNotification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10215E938);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"onAuthorizationNotification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_10190F134()
{
  uint64_t v0;
  int v1;

  sub_10091D9D0();
  if (v1 < 0)
    sub_10091D9B4();
  if (*(char *)(v0 + 71) < 0)
    sub_10091D9AC();
  if (*(char *)(v0 + 47) < 0)
    sub_10091D9BC();
  if (*(char *)(v0 + 23) < 0)
    sub_10091D990(*(void **)v0);
  else
    sub_10085FBCC();
}

#error "10190F200: call analysis failed (funcsize=76)"

#error "10190F37C: call analysis failed (funcsize=76)"

#error "10190F4F8: call analysis failed (funcsize=75)"

void sub_10190F5EC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10215F410);
  v0 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Input expected to contain all APs with valid locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
  }
  v1 = qword_1022A0058;
  if (os_signpost_enabled((os_log_t)qword_1022A0058))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Input expected to contain all APs with valid locations", "{\"msg%{public}.0s\":\"Input expected to contain all APs with valid locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10215F410);
  }
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Input expected to contain all APs with valid locations\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "10190F81C: call analysis failed (funcsize=63)"

void sub_10190F8EC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10215F870);
  v0 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"expecting 1 to 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10215F870);
  }
  v1 = qword_1022A0028;
  if (os_signpost_enabled((os_log_t)qword_1022A0028))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "expecting 1 to 1", "{\"msg%{public}.0s\":\"expecting 1 to 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10215F870);
  }
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"expecting 1 to 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_10190FAB0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#ctcl fCTClient allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#ctcl fCTClient allocation failed", "{\"msg%{public}.0s\":\"#ctcl fCTClient allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#ctcl fCTClient allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLCoreTelephonyClient.mm", 120, "createCTClient");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  }
}

void sub_10190FC1C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#ctcl fCTClientDelegate allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#ctcl fCTClientDelegate allocation failed", "{\"msg%{public}.0s\":\"#ctcl fCTClientDelegate allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#ctcl fCTClientDelegate allocation failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLCoreTelephonyClient.mm", 123, "createCTClient");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  }
}

void sub_10190FD88()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext", "{\"msg%{public}.0s\":\"copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"copyEmergencyMode: Invalid instance from CTXPCServiceSubscriptionContext\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/TelephonyService/CLCoreTelephonyClient.mm", 530, "queryEmergencyModeChanged_block_invoke");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  }
}

#error "10190FF6C: call analysis failed (funcsize=72)"

#error "1019100D8: call analysis failed (funcsize=72)"

#error "101910244: call analysis failed (funcsize=72)"

#error "1019103B0: call analysis failed (funcsize=72)"

#error "10191051C: call analysis failed (funcsize=72)"

void sub_101910610()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10025FE88())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    }
    if (sub_10025FEAC())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    }
    if (sub_10025FE9C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm", 52, "-[CLPersistentTimerInternal initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:]");
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_1021612F0);
  }
}

void sub_10191077C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10025FE88())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    }
    if (sub_10025FEAC())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    }
    if (sub_10025FE9C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm", 135, "-[CLPersistentTimerInternal dealloc]");
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_1021612F0);
  }
}

void sub_1019108E8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10025FE88())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    }
    if (sub_10025FEAC())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    }
    if (sub_10025FE9C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentTimer.mm", 131, "-[CLPersistentTimerInternal dealloc]");
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_1021612F0);
  }
}

void sub_101910A54()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102161408);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fGpsOdometryInterface is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
  }
  v1 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,GPSODOM,fGpsOdometryInterface is null", "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fGpsOdometryInterface is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102161408);
  }
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fGpsOdometryInterface is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101910C18()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021618F0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021618F0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/MotionAlarm/CLMotionAlarmNotifier.mm", 53, "-[CLMotionAlarmNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021618F0);
  }
}

void sub_101910DA0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102161A30);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102161A30);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102161A30);
  }
}

void sub_101910F10()
{
  __assert_rtn("set_location_type", "CLPRegionMonitoringLogEntry.pb.h", 2929, "::CLP::LogEntry::RegionMonitoring::FenceLocationType_IsValid(value)");
}

void sub_101910F38()
{
  __assert_rtn("set_environment_type", "CLPRegionMonitoringLogEntry.pb.h", 2906, "::CLP::LogEntry::RegionMonitoring::FenceEnvironmentType_IsValid(value)");
}

void sub_101910F60()
{
  __assert_rtn("set_last_status", "CLPRegionMonitoringLogEntry.pb.h", 3156, "::CLP::LogEntry::RegionMonitoring::FenceStatus_IsValid(value)");
}

void sub_101910F88()
{
  __assert_rtn("set_status", "CLPRegionMonitoringLogEntry.pb.h", 3133, "::CLP::LogEntry::RegionMonitoring::FenceStatus_IsValid(value)");
}

void sub_101910FB0()
{
  __assert_rtn("set_notification_type", "CLPRegionMonitoringLogEntry.pb.h", 3068, "::CLP::LogEntry::RegionMonitoring::FenceNotificationType_IsValid(value)");
}

void sub_101910FD8()
{
  __assert_rtn("set_fence_location_type", "CLPRegionMonitoringLogEntry.pb.h", 3319, "::CLP::LogEntry::RegionMonitoring::FenceLocationType_IsValid(value)");
}

void sub_101911000()
{
  __assert_rtn("set_status", "CLPRegionMonitoringLogEntry.pb.h", 3388, "::CLP::LogEntry::RegionMonitoring::LocationOfInterestNotFound_IsValid(value)");
}

void sub_101911028()
{
  __assert_rtn("set_fence_status", "CLPRegionMonitoringLogEntry.pb.h", 3727, "::CLP::LogEntry::RegionMonitoring::FenceStatus_IsValid(value)");
}

void sub_101911050()
{
  __assert_rtn("set_location_type", "CLPRegionMonitoringLogEntry.pb.h", 3798, "::CLP::LogEntry::RegionMonitoring::LocationRequestType_IsValid(value)");
}

void sub_101911078()
{
  __assert_rtn("set_settled_state", "CLPRegionMonitoringLogEntry.pb.h", 4052, "::CLP::LogEntry::RegionMonitoring::ScenarioTriggerSettledState_IsValid(value)");
}

void sub_1019110A0()
{
  __assert_rtn("set_detection_type", "CLPRegionMonitoringLogEntry.pb.h", 3987, "::CLP::LogEntry::RegionMonitoring::SettledDetectionType_IsValid(value)");
}

void sub_1019110C8()
{
  __assert_rtn("set_event_type", "CLPRegionMonitoringLogEntry.pb.h", 4347, "::CLP::LogEntry::RegionMonitoring::ActivityAlarmTrigger_IsValid(value)");
}

void sub_1019110F0()
{
  __assert_rtn("set_event_type", "CLPRegionMonitoringLogEntry.pb.h", 4488, "::CLP::LogEntry::RegionMonitoring::TimerEventType_IsValid(value)");
}

void sub_101911118()
{
  __assert_rtn("set_event", "CLPRegionMonitoringLogEntry.pb.h", 4700, "::CLP::LogEntry::RegionMonitoring::ConvergingStatusEvent_IsValid(value)");
}

void sub_101911140()
{
  __assert_rtn("set_proximity_state", "CLPRegionMonitoringLogEntry.pb.h", 4677, "::CLP::LogEntry::RegionMonitoring::FenceProximityState_IsValid(value)");
}

void sub_101911168()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021627F0);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021627F0);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Simulation/CLSimulatedLocationProvider.mm", 20, "-[CLSimulatedLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021627F0);
  }
}

void sub_101911334()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A00F0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10026AFD0())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102162810);
    }
    if (sub_10026AFF4())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102162810);
    }
    if (sub_10026AFE4())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MicroLocation/CLMicroLocationPublishHelper.mm", 34, "biomePublicEventsFromLocalizationResultMeasurement");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00F0, &stru_102162810);
  }
}

void sub_1019114C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102162810);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102162810);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "localization results vector cannot be empty", "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102162810);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"localization results vector cannot be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
  }
}

void sub_101911644()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Companion is receiving a reset sync session from the watch\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Companion is receiving a reset sync session from the watch", "{\"msg%{public}.0s\":\"Companion is receiving a reset sync session from the watch\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102162F50);
    }
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Companion is receiving a reset sync session from the watch\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/AuthSync/CLAuthSyncManager.mm", 2971, "-[CLAuthSyncManager syncSession:applyChanges:completion:]");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_102162F50);
  }
}

#error "101911888: call analysis failed (funcsize=72)"

#error "1019119F4: call analysis failed (funcsize=72)"

#error "101911B60: call analysis failed (funcsize=72)"

#error "101911CCC: call analysis failed (funcsize=72)"

#error "101911E38: call analysis failed (funcsize=72)"

void sub_101911F2C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021633A8);
    }
    v1 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Not running on motion thread!", "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021633A8);
    }
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Not running on motion thread!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/CLMotionCore.mm", 184, "assertOnMotionThread");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_1021633A8);
  }
}

void sub_1019120F8()
{
  __assert_rtn("wrapRunLoopWithAutoreleasePoolHandler", "CLMotionCore.mm", 218, "count > 0");
}

#error "101912198: call analysis failed (funcsize=72)"

#error "101912304: call analysis failed (funcsize=72)"

#error "101912470: call analysis failed (funcsize=72)"

#error "1019125DC: call analysis failed (funcsize=72)"

#error "101912748: call analysis failed (funcsize=72)"

#error "1019128B4: call analysis failed (funcsize=72)"

#error "101912A20: call analysis failed (funcsize=72)"

#error "101912B8C: call analysis failed (funcsize=72)"

#error "101912CF8: call analysis failed (funcsize=72)"

#error "101912E64: call analysis failed (funcsize=72)"

void sub_101912F58()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_10229FDB0 != -1)
    dispatch_once(&qword_10229FDB0, &stru_102164318);
  v0 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
  }
  if (os_signpost_enabled((os_log_t)qword_10229FDB8))
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_10229FDB0 != -1)
      dispatch_once(&qword_10229FDB0, &stru_102164318);
  }
  v4 = qword_10229FDB8;
  if (os_log_type_enabled((os_log_t)qword_10229FDB8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "10191317C: call analysis failed (funcsize=73)"

#error "1019132EC: call analysis failed (funcsize=73)"

#error "10191345C: call analysis failed (funcsize=73)"

#error "1019135CC: call analysis failed (funcsize=73)"

#error "10191373C: call analysis failed (funcsize=73)"

void sub_101913834()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_102164678);
  v0 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102164678);
  }
  v1 = qword_10229FC98;
  if (os_signpost_enabled((os_log_t)qword_10229FC98))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.", "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_102164678);
  }
  v2 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"VO2Max,AdaptiveOutdoorPedestrianModel,Invalid clustering results.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_1019139F8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0060 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10091D998())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CombinedFence addFence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
    }
    if (sub_10091D9C4())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "CombinedFence addFence without key", "{\"msg%{public}.0s\":\"CombinedFence addFence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_1021647B0);
    }
    if (sub_100949B70())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CombinedFence addFence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLCombinedFence.mm", 237, "addFence");
LABEL_11:
    dispatch_once(&qword_1022A0060, &stru_1021647B0);
  }
}

void sub_101913B64()
{
  __assert_rtn("set_gnss_band_support", "CLPRavenLogEntry.pb.h", 1072, "::CLP::LogEntry::Raven::RavenPlatformInfo_GnssBandSupport_IsValid(value)");
}

void sub_101913B8C()
{
  __assert_rtn("set_product_category", "CLPRavenLogEntry.pb.h", 1049, "::CLP::LogEntry::Raven::RavenPlatformInfo_ProductCategory_IsValid(value)");
}

void sub_101913BB4()
{
  __assert_rtn("set_hardware", "CLPRavenLogEntry.pb.h", 864, "::CLP::LogEntry::Raven::RavenPlatformInfo_Hardware_IsValid(value)");
}

void sub_101913BDC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
    }
    if (sub_100496720())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
    }
    if (sub_100496710())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLOldWifiScanner.mm", 146, "onLocationNotification");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102164E10);
  }
}

void sub_101913D48()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
    }
    if (sub_100496720())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102164E10);
    }
    if (sub_100496710())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLOldWifiScanner.mm", 193, "onWifiNotification");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102164E10);
  }
}

void sub_101913EB4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165268);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165268);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Catherine/CLCatherineNotifier.mm", 57, "-[CLCatherineNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102165268);
  }
}

void sub_10191403C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021653D8);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021653D8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_1021653D8);
  }
}

#error "101914220: call analysis failed (funcsize=70)"

#error "101914380: call analysis failed (funcsize=71)"

#error "1019144E8: call analysis failed (funcsize=71)"

#error "101914650: call analysis failed (funcsize=71)"

#error "1019147B8: call analysis failed (funcsize=71)"

#error "101914920: call analysis failed (funcsize=71)"

#error "101914A88: call analysis failed (funcsize=70)"

#error "101914BEC: call analysis failed (funcsize=74)"

#error "101914D5C: call analysis failed (funcsize=70)"

#error "101914EBC: call analysis failed (funcsize=71)"

#error "101915028: call analysis failed (funcsize=74)"

#error "101915198: call analysis failed (funcsize=70)"

#error "1019152FC: call analysis failed (funcsize=74)"

#error "10191546C: call analysis failed (funcsize=70)"

#error "1019155D0: call analysis failed (funcsize=74)"

#error "101915740: call analysis failed (funcsize=70)"

#error "1019158A8: call analysis failed (funcsize=74)"

#error "101915A18: call analysis failed (funcsize=74)"

#error "101915B88: call analysis failed (funcsize=74)"

#error "101915CF8: call analysis failed (funcsize=74)"

#error "101915E68: call analysis failed (funcsize=74)"

#error "101915FD8: call analysis failed (funcsize=74)"

#error "101916140: call analysis failed (funcsize=70)"

#error "1019162A0: call analysis failed (funcsize=70)"

#error "101916400: call analysis failed (funcsize=70)"

#error "101916568: call analysis failed (funcsize=74)"

#error "1019166D8: call analysis failed (funcsize=74)"

#error "101916848: call analysis failed (funcsize=74)"

#error "1019169B0: call analysis failed (funcsize=70)"

void sub_101916A9C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#PersistentDictionary invalid to init with nil filename\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102165748);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#PersistentDictionary invalid to init with nil filename", "{\"msg%{public}.0s\":\"#PersistentDictionary invalid to init with nil filename\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102165748);
    }
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#PersistentDictionary invalid to init with nil filename\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLPersistentDictionary.mm", 32, "-[CLPersistentDictionary initWithFilename:withDataProtectionClass:]");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_102165748);
  }
}

void sub_101916C68(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
  }
  v2 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
  }
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101916E24()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021658C0);
  v0 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
  }
  v1 = qword_10229FD48;
  if (os_signpost_enabled((os_log_t)qword_10229FD48))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLCompass7 requires deviceMotionService", "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
  }
  v2 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101916FE8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10034F4E4(qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165C28);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102165C28);
    }
    if (sub_100299F70(qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallNotifier.mm", 374, "-[CLFallNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102165C28);
  }
}

void sub_10191716C(void *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  objc_begin_catch(a1);
  sub_100A38FF8();
  if (!v1)
    dispatch_once(&qword_10229FD90, &stru_102165C08);
  if (sub_100A38FBC())
  {
    sub_1004AF720();
    sub_100A38FE4((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Failed to read the timestamp.\"}", v4, v5, v6, v7, v13);
    sub_100A38FF8();
    if (!v1)
      dispatch_once(&qword_10229FD90, &stru_102165C08);
  }
  if (sub_100343324())
  {
    sub_1004AF720();
    sub_100A38F9C((void *)&_mh_execute_header, v8, v9, v10, "Failed to read the timestamp.", "{\"msg%{public}.0s\":\"Failed to read the timestamp.\"}", v11, v12, v13);
  }
  objc_end_catch();
  sub_100A38FD0();
}

void sub_101917264()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC78;
    if (sub_10034F4E4(qword_10229FC78))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165C48);
    }
    v1 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      sub_100299F04();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165C48);
    }
    v2 = qword_10229FC78;
    if (sub_100299F70(qword_10229FC78))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallNotifier.mm", 3592, "onWatchOrientationSettingsNotification");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_102165C48);
  }
}

void sub_101917438(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t buf[40];

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    v1 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Compass should only be reset from locationd\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102166168);
    }
    v2 = qword_10229FD48;
    if (os_signpost_enabled((os_log_t)qword_10229FD48))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Compass should only be reset from locationd", "{\"msg%{public}.0s\":\"Compass should only be reset from locationd\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD40 != -1)
        dispatch_once(&qword_10229FD40, &stru_102166168);
    }
    v3 = qword_10229FD48;
    if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Compass should only be reset from locationd\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/Compass/CLCompass.mm", 401, "onDaemonStatus");
LABEL_11:
    dispatch_once(&qword_10229FD40, &stru_102166168);
  }
}

#error "101917674: call analysis failed (funcsize=74)"

#error "1019177E8: call analysis failed (funcsize=73)"

#error "101917958: call analysis failed (funcsize=74)"

#error "101917ACC: call analysis failed (funcsize=73)"

#error "101917C3C: call analysis failed (funcsize=73)"

#error "101917DAC: call analysis failed (funcsize=73)"

#error "101917F1C: call analysis failed (funcsize=73)"

void sub_101918014()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102166828);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102166828);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_10191819C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_10229FD50 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100A9C3FC())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102167110);
    }
    if (sub_100A9C420())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102167110);
    }
    if (sub_100A9C410())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasFitter.cpp", 26, "computeLinearFit");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FD50, &stru_102167110);
  }
}

void sub_10191832C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_102167110);
  if (sub_100A9C3FC())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102167110);
  }
  if (sub_100A9C420())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102167110);
  }
  if (sub_100A9C410())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
  }
}

void sub_1019184AC(int a1, char *a2)
{
  __assert_rtn("SetMatrixSize", "cnmatrixbase.h", a1, a2);
}

void sub_1019184D0(const char *a1, const char *a2, int a3, const char *a4)
{
  __assert_rtn(a1, a2, a3, a4);
}

void sub_1019184DC()
{
  __assert_rtn("operator()", "cnmatrix.h", 1194, "strcmp(c, \":\") == 0");
}

void sub_101918504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100AA0DC0("TransposeDataFootprint", "cnmatrix.h", a3, "scratch != nullptr");
}

void sub_101918528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100AA0DB8("TransposeDataFootprint", "cnmatrix.h", a3, "lead_dim > 0");
}

void sub_10191854C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100AA0DD8("AllocateMemoryBacking", "cnmatrix.h", a3, "this->allocated_data_");
}

void sub_101918570()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 782, "data_ != __null");
}

void sub_101918598()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 783, "idx >= 0");
}

void sub_1019185C0()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 784, "idx < num_elements_");
}

void sub_1019185E8()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2337, "in_nr >= 0");
}

void sub_101918610()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2339, "in_nr <= max_nr");
}

void sub_101918638()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2340, "in_nc >= 0");
}

void sub_101918660()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2342, "in_nc <= max_nc");
}

void sub_101918688()
{
  __assert_rtn("operator=", "cnmatrixbase.h", 619, "this->max_num_rows_ >= A.num_rows_");
}

void sub_1019186B0()
{
  __assert_rtn("operator=", "cnmatrixbase.h", 620, "this->max_num_cols_ >= A.num_cols_");
}

void sub_1019186D8()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2456, "in_nr <= max_nr");
}

void sub_101918700()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2458, "in_nc <= max_nc");
}

void sub_101918728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100AA0DC8("SetMatrixSize", "cnmatrixbase.h", a3, "this->max_num_rows_ >= num_rows");
}

void sub_10191874C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100AA0DD0("operator()", "cnmatrix.h", a3, "strcmp(c, \":\") == 0");
}

void sub_101918770()
{
  __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
}

void sub_101918798()
{
  __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
}

void sub_1019187C0()
{
  __assert_rtn("operator()", "cnmatrix.h", 891, "strcmp(r, \":\") == 0");
}

void sub_1019187E8()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 913, "data_ != __null");
}

void sub_101918810()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 914, "idx >= 0");
}

void sub_101918838()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 915, "idx < num_elements_");
}

void sub_101918860()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 711, "data_ != __null");
}

void sub_101918888()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 712, "idx >= 0");
}

void sub_1019188B0()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 713, "idx < num_elements_");
}

void sub_1019188D8()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3536, "&(A) != &(C)");
}

void sub_101918900()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3537, "&(B) != &(C)");
}

void sub_101918928()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3534, "A.num_cols_ == B.num_cols_");
}

void sub_101918950()
{
  __assert_rtn("Add", "cnmatrixbase.h", 3533, "A.num_rows_ == B.num_rows_");
}

void sub_101918978()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3818, "&(B) != &(C)");
}

void sub_1019189A0()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3677, "&(A) != &(C)");
}

void sub_1019189C8()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3678, "&(B) != &(C)");
}

void sub_1019189F0()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3675, "A.num_cols_ == B.num_cols_");
}

void sub_101918A18()
{
  __assert_rtn("Subtract", "cnmatrixbase.h", 3674, "A.num_rows_ == B.num_rows_");
}

void sub_101918A40()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7187, "&A != &Acopy");
}

void sub_101918A68()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7188, "&A != &Work");
}

void sub_101918A90()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7189, "&A != &U");
}

void sub_101918AB8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7190, "&A != &S");
}

void sub_101918AE0()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7191, "&A != &V");
}

void sub_101918B08()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7192, "&Acopy != &Work");
}

void sub_101918B30()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7193, "&Acopy != &U");
}

void sub_101918B58()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7194, "&Acopy != &S");
}

void sub_101918B80()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7195, "&Acopy != &V");
}

void sub_101918BA8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7196, "&Work != &U");
}

void sub_101918BD0()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7197, "&Work != &S");
}

void sub_101918BF8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7198, "&Work != &V");
}

void sub_101918C20()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7199, "&U != &S");
}

void sub_101918C48()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7200, "&U != &V");
}

void sub_101918C70()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7201, "&S != &V");
}

void sub_101918C98()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7204, "ne >= 1");
}

void sub_101918CC0()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7205, "ne >= 3*minnrnc + maxnrnc");
}

void sub_101918CE8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7206, "ne >= 5*minnrnc");
}

void sub_101918D10()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7208, "Acopy.max_num_rows_ >= nrA");
}

void sub_101918D38()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7209, "Acopy.max_num_cols_ >= ncA");
}

void sub_101918D60()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7210, "U.max_num_rows_ >= nrA");
}

void sub_101918D88()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7211, "U.max_num_cols_ >= nrA");
}

void sub_101918DB0()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7212, "S.max_num_rows_ >= nrA");
}

void sub_101918DD8()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7213, "S.max_num_cols_ >= ncA");
}

void sub_101918E00()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7214, "V.max_num_rows_ >= ncA");
}

void sub_101918E28()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7215, "V.max_num_cols_ >= ncA");
}

void sub_101918E50()
{
  __assert_rtn("Svd", "cnmatrixbase.h", 7283, "info == 0");
}

void sub_101918E78()
{
  __assert_rtn("TransposeInPlace", "cnmatrixbase.h", 5054, "A.max_num_rows_ >= A.num_cols_");
}

void sub_101918EA0()
{
  __assert_rtn("TransposeInPlace", "cnmatrixbase.h", 5055, "A.max_num_cols_ >= A.num_rows_");
}

void sub_101918EC8()
{
  __assert_rtn("operator()", "cnmatrix.h", 1039, "strcmp(c, \":\") == 0");
}

void sub_101918EF0()
{
  __assert_rtn("Dot", "cnmatrixbase.h", 4076, "a.num_rows_ == 1 || a.num_cols_ == 1");
}

void sub_101918F18()
{
  __assert_rtn("Dot", "cnmatrixbase.h", 4077, "b.num_rows_ == 1 || b.num_cols_ == 1");
}

void sub_101918F40()
{
  __assert_rtn("Dot", "cnmatrixbase.h", 4079, "a.num_elements_ == b.num_elements_");
}

void sub_101918F68()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4504, "&A != &Acopy");
}

void sub_101918F90()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4505, "&A != &Work");
}

void sub_101918FB8()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4506, "&A != &S");
}

void sub_101918FE0()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4507, "&Acopy != &Work");
}

void sub_101919008()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4508, "&Acopy != &S");
}

void sub_101919030()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4509, "&Work != &S");
}

void sub_101919058()
{
  __assert_rtn("Norm", "cnmatrixbase.h", 4512, "Acopy.num_elements_ >= A.num_elements_");
}

void sub_101919080()
{
  sub_100AA0DE0();
  __assert_rtn("Norm", "cnmatrixbase.h", 4640, "false");
}

void sub_1019190CC()
{
  sub_100AA0DE0();
  __assert_rtn("Norm", "cnmatrixbase.h", 4716, "ret == 1");
}

void sub_101919118()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7028, "&A != &Acopy");
}

void sub_101919140()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7029, "&A != &Work");
}

void sub_101919168()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7030, "&A != &S");
}

void sub_101919190()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7031, "&Acopy != &Work");
}

void sub_1019191B8()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7032, "&Acopy != &S");
}

void sub_1019191E0()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7033, "&Work != &S");
}

void sub_101919208()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7036, "ne >= 1");
}

void sub_101919230()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7037, "ne >= 3*minnrnc + maxnrnc");
}

void sub_101919258()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7038, "ne >= 5*minnrnc");
}

void sub_101919280()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7040, "Acopy.max_num_rows_ >= nrA");
}

void sub_1019192A8()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7041, "Acopy.max_num_cols_ >= ncA");
}

void sub_1019192D0()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7042, "S.max_num_rows_ >= minnrnc");
}

void sub_1019192F8()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7043, "S.max_num_cols_ >= 1");
}

void sub_101919320()
{
  __assert_rtn("SingularValues", "cnmatrixbase.h", 7111, "info == 0");
}

void sub_101919348()
{
  __assert_rtn("Transpose", "cnmatrixbase.h", 5010, "&(A) != &(B)");
}

void sub_101919370()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 815, "data_ != __null");
}

void sub_101919398()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 816, "idx >= 0");
}

void sub_1019193C0()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 817, "idx < num_elements_");
}

void sub_1019193E8()
{
  __assert_rtn("Colon", "cnmatrixbase.h", 1762, "idx.MaxNumRows() > 0");
}

void sub_101919410()
{
  __assert_rtn("Colon", "cnmatrixbase.h", 1763, "idx.MaxNumCols() > 0");
}

void sub_101919438()
{
  __assert_rtn("Colon", "cnmatrixbase.h", 1788, "static_cast<s32>(idx.MaxNumCols()) >= n");
}

void sub_101919460()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 848, "data_ != __null");
}

void sub_101919488()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 849, "idx >= 0");
}

void sub_1019194B0()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 850, "idx < num_elements_");
}

void sub_1019194D8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Event is nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021678E0);
    }
    v1 = qword_1022A02A8;
    if (os_signpost_enabled((os_log_t)qword_1022A02A8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Event is nil", "{\"msg%{public}.0s\":\"Event is nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021678E0);
    }
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Event is nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Duet/CLDuetMonitor.mm", 223, "-[CLDuetMonitor eventTypeFromNSNumber:]");
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_1021678E0);
  }
}

void sub_1019196A4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100AAAA14())
    {
      sub_100346064();
      sub_1004B7B10((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Invalid event value\", \"eventType\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021678E0);
    }
    if (sub_100AAAA38())
    {
      sub_100346064();
      sub_1004B7ADC((void *)&_mh_execute_header, v6, v7, v8, "Invalid event value", "{\"msg%{public}.0s\":\"Invalid event value\", \"eventType\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021678E0);
    }
    if (sub_100AAAA28())
    {
      sub_100346064();
      sub_1004B7B24((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Invalid event value\", \"eventType\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Duet/CLDuetMonitor.mm", 226, "-[CLDuetMonitor eventTypeFromNSNumber:]");
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_1021678E0);
  }
}

void sub_101919814()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8770, "::CLP::LogEntry::PrivateData::LocationProviderNotification_NotificationType_IsValid(value)");
}

void sub_10191983C()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7196, "::CLP::LogEntry::PrivateData::BluetoothServiceNotification_NotificationType_IsValid(value)");
}

void sub_101919864()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7313, "::CLP::LogEntry::PrivateData::CompanionNotifierNotification_NotificationType_IsValid(value)");
}

void sub_10191988C()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7450, "::CLP::LogEntry::PrivateData::MotionStateNotification_NotificationType_IsValid(value)");
}

void sub_1019198B4()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7724, "::CLP::LogEntry::PrivateData::SignalEnvironmentNotification_NotificationType_IsValid(value)");
}

void sub_1019198DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100ABE4B0("set_settled_state", "CLPRegionMonitoringLogEntry.pb.h", a3, "::CLP::LogEntry::RegionMonitoring::ScenarioTriggerSettledState_IsValid(value)");
}

void sub_101919900()
{
  __assert_rtn("set_notification", "CLPTropicalSavannaLogEntry.pb.h", 617, "::CLP::LogEntry::TropicalSavanna::TropicalSavannaHint_Notification_IsValid(value)");
}

void sub_101919928(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 136446210;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s", (uint8_t *)&v2, 0xCu);
}

void sub_10191999C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021690B0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021690B0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/VDR/CLVDRNotifier.mm", 26, "-[CLVDRNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021690B0);
  }
}

#error "101919B9C: call analysis failed (funcsize=72)"

#error "101919D08: call analysis failed (funcsize=72)"

#error "101919E74: call analysis failed (funcsize=72)"

#error "101919FE0: call analysis failed (funcsize=72)"

#error "10191A14C: call analysis failed (funcsize=72)"

void sub_10191A240()
{
  __assert_rtn("getSize", "CLBinaryLogTypes.h", 1588, "false && \"changing version requires setting kSize accordingly\"");
}

void sub_10191A268()
{
  __assert_rtn("getSize", "CLBinaryLogTypes.h", 1659, "false && \"changing version requires setting kSize accordingly\"");
}

void sub_10191A290()
{
  __assert_rtn("getSize", "CLBinaryLogTypes.h", 1717, "false && \"changing version requires setting kSize accordingly\"");
}

void sub_10191A2B8()
{
  __assert_rtn("getSize", "CLBinaryLogTypes.h", 1882, "false && \"changing version requires setting kSize accordingly\"");
}

void sub_10191A2E0()
{
  __assert_rtn("set_tracking_state", "CLPVisionEvent.pb.h", 3498, "::CLP::LogEntry::Vision::VIOTrackingState_IsValid(value)");
}

void sub_10191A308()
{
  __assert_rtn("set_global_reference_frame", "CLPVisionEvent.pb.h", 4307, "::CLP::LogEntry::Vision::LSLGlobalReferenceFrame_IsValid(value)");
}

void sub_10191A330()
{
  __assert_rtn("set_status", "CLPVisionEvent.pb.h", 4563, "::CLP::LogEntry::Vision::LSLHeadingStatus_IsValid(value)");
}

void sub_10191A358()
{
  __assert_rtn("set_status_deprecated", "CLPVisionEvent.pb.h", 4515, "::CLP::LogEntry::Vision::LSLStatus_DEPRECATED_IsValid(value)");
}

void sub_10191A380()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor Unable to determine the path to store conditions\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021739A0);
    }
    v1 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor Unable to determine the path to store conditions", "{\"msg%{public}.0s\":\"#monitor Unable to determine the path to store conditions\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021739A0);
    }
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor Unable to determine the path to store conditions\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm", 199, "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021739A0);
  }
}

void sub_10191A54C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100B566EC())
    {
      sub_100B566B4();
      sub_1004B7B10((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#monitor Unable to create dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021739A0);
    }
    if (sub_100B56710())
    {
      sub_100B566B4();
      sub_1004B7ADC((void *)&_mh_execute_header, v6, v7, v8, "#monitor Unable to create dir", "{\"msg%{public}.0s\":\"#monitor Unable to create dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021739A0);
    }
    if (sub_100B56700())
    {
      sub_100B566B4();
      sub_1004B7B24((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#monitor Unable to create dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm", 195, "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021739A0);
  }
}

void sub_10191A6BC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100B566EC())
    {
      sub_100B566B4();
      sub_1004B7B10((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#monitor Unable to create intermediate dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021739A0);
    }
    if (sub_100B56710())
    {
      sub_100B566B4();
      sub_1004B7ADC((void *)&_mh_execute_header, v6, v7, v8, "#monitor Unable to create intermediate dir", "{\"msg%{public}.0s\":\"#monitor Unable to create intermediate dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021739A0);
    }
    if (sub_100B56700())
    {
      sub_100B566B4();
      sub_1004B7B24((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#monitor Unable to create intermediate dir\", \"path\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Framework/CoreLocation/CLConditionLedger.mm", 186, "-[CLConditionLedger setLedgerForType:domain:monitor:client:path:]");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021739A0);
  }
}

void sub_10191A82C(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0070, &stru_102173AD0);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
  }
  v2 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
  }
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

#error "10191AA60: call analysis failed (funcsize=72)"

#error "10191ABCC: call analysis failed (funcsize=72)"

#error "10191AD38: call analysis failed (funcsize=72)"

#error "10191AEA4: call analysis failed (funcsize=72)"

#error "10191B010: call analysis failed (funcsize=72)"

#error "10191B278: call analysis failed (funcsize=94)"

#error "10191B344: call analysis failed (funcsize=76)"

#error "10191B4C0: call analysis failed (funcsize=76)"

#error "10191B63C: call analysis failed (funcsize=76)"

void sub_10191B738()
{
  __assert_rtn("apply", "has_valid_self_turns.hpp", 94, "! boost::empty(turns)");
}

void sub_10191B760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100B903F4("front", "range.hpp", a3, "!boost::empty(rng)");
}

void sub_10191B784()
{
  __assert_rtn("special_cases", "envelope_segment.hpp", 260, "!is_pole1 && !is_pole2");
}

void sub_10191B7AC()
{
  __assert_rtn("compute_box_corners", "envelope_segment.hpp", 161, "lon1 <= lon2");
}

void sub_10191B7D4()
{
  __assert_rtn("contains_pi_half", "envelope_segment.hpp", 128, "! math::equals(a1, a2)");
}

void sub_10191B7FC()
{
  __assert_rtn("apply", "normalize_spheroidal_box_coordinates.hpp", 95, "! math::larger(longitude2 - longitude1, constants::period())");
}

void sub_10191B824()
{
  __assert_rtn("apply", "normalize_spheroidal_box_coordinates.hpp", 93, "! math::smaller(longitude1, constants::min_longitude())");
}

void sub_10191B84C()
{
  __assert_rtn("apply", "normalize_spheroidal_box_coordinates.hpp", 92, "! math::larger(longitude1, longitude2)");
}

void sub_10191B874()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 140, "! math::smaller(max_gap_left, constants::min_longitude())");
}

void sub_10191B89C()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 138, "! math::larger(max_gap_right, constants::max_longitude())");
}

void sub_10191B8C4()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 136, "! math::larger(max_gap_left, max_gap_right)");
}

void sub_10191B8EC()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 133, "! math::smaller(lon_min, constants::min_longitude())");
}

void sub_10191B914()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 131, "! math::larger(lon_max, constants::max_longitude())");
}

void sub_10191B93C()
{
  __assert_rtn("apply", "range_of_boxes.hpp", 129, "! math::larger(lon_min, lon_max)");
}

void sub_10191B964()
{
  __assert_rtn("apply", "max_interval_gap.hpp", 106, "queue.empty()");
}

void sub_10191B98C()
{
  __assert_rtn("apply", "max_interval_gap.hpp", 143, "queue.top().is_start_event()");
}

void sub_10191B9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100B903EC("pos", "range.hpp", a3, "i <= boost::size(rng)");
}

void sub_10191B9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100B903B8("assign_point", "get_turn_info.hpp", a3, "index < info.count");
}

void sub_10191B9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100B903E4("apply", "segment_ratio.hpp", a3, "lhs.denominator() != Type(0)");
}

void sub_10191BA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100B903DC("apply", "segment_ratio.hpp", a3, "rhs.denominator() != Type(0)");
}

void sub_10191BA44()
{
  __assert_rtn("apply", "get_turn_info.hpp", 1033, "arrival_p != 0");
}

void sub_10191BA6C()
{
  __assert_rtn("get", "pointing_segment.hpp", 101, "s.first != __null");
}

void sub_10191BA94()
{
  __assert_rtn("get", "pointing_segment.hpp", 124, "s.second != __null");
}

void sub_10191BABC()
{
  __assert_rtn("apply", "segment_ratio.hpp", 89, "lhs.denominator() != Type(0)");
}

void sub_10191BAE4()
{
  __assert_rtn("apply", "segment_ratio.hpp", 90, "rhs.denominator() != Type(0)");
}

#error "10191BB8C: call analysis failed (funcsize=76)"

#error "10191BD08: call analysis failed (funcsize=72)"

void sub_10191BDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_100BCBC50(v27);
  if (!v28)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  if (sub_100903220())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v29, v30, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 448) != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
  }
  if (sub_100903244())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v31, v32, v33, "dynamic_pointer_cast must never fail in this context", "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 448) != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
  }
  if (sub_100903234())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v34, v35, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "10191BFA4: call analysis failed (funcsize=71)"

#error "10191C10C: call analysis failed (funcsize=71)"

#error "10191C280: call analysis failed (funcsize=76)"

#error "10191C3F0: call analysis failed (funcsize=71)"

#error "10191C558: call analysis failed (funcsize=71)"

#error "10191C6C0: call analysis failed (funcsize=70)"

#error "10191C820: call analysis failed (funcsize=70)"

#error "10191C980: call analysis failed (funcsize=71)"

#error "10191CAE8: call analysis failed (funcsize=71)"

#error "10191CC50: call analysis failed (funcsize=71)"

#error "10191CDB8: call analysis failed (funcsize=71)"

#error "10191CF20: call analysis failed (funcsize=71)"

#error "10191D088: call analysis failed (funcsize=71)"

#error "10191D1F0: call analysis failed (funcsize=71)"

#error "10191D358: call analysis failed (funcsize=71)"

#error "10191D4C0: call analysis failed (funcsize=71)"

#error "10191D628: call analysis failed (funcsize=71)"

#error "10191D790: call analysis failed (funcsize=71)"

#error "10191D8F8: call analysis failed (funcsize=71)"

#error "10191DA60: call analysis failed (funcsize=71)"

#error "10191DBC8: call analysis failed (funcsize=71)"

#error "10191DD30: call analysis failed (funcsize=71)"

#error "10191DE98: call analysis failed (funcsize=71)"

#error "10191E000: call analysis failed (funcsize=71)"

#error "10191E168: call analysis failed (funcsize=71)"

#error "10191E2D0: call analysis failed (funcsize=71)"

#error "10191E438: call analysis failed (funcsize=71)"

#error "10191E5A0: call analysis failed (funcsize=71)"

#error "10191E708: call analysis failed (funcsize=71)"

#error "10191E870: call analysis failed (funcsize=71)"

#error "10191E9D8: call analysis failed (funcsize=71)"

#error "10191EB40: call analysis failed (funcsize=71)"

#error "10191ECA8: call analysis failed (funcsize=71)"

#error "10191EE10: call analysis failed (funcsize=71)"

#error "10191EF78: call analysis failed (funcsize=71)"

#error "10191F0E0: call analysis failed (funcsize=71)"

#error "10191F248: call analysis failed (funcsize=71)"

#error "10191F3B0: call analysis failed (funcsize=71)"

#error "10191F518: call analysis failed (funcsize=71)"

#error "10191F680: call analysis failed (funcsize=71)"

#error "10191F7E8: call analysis failed (funcsize=71)"

#error "10191F950: call analysis failed (funcsize=71)"

#error "10191FAB8: call analysis failed (funcsize=71)"

#error "10191FC20: call analysis failed (funcsize=71)"

#error "10191FD88: call analysis failed (funcsize=71)"

#error "10191FEF0: call analysis failed (funcsize=71)"

#error "101920058: call analysis failed (funcsize=71)"

#error "1019201C0: call analysis failed (funcsize=71)"

#error "101920328: call analysis failed (funcsize=71)"

#error "101920490: call analysis failed (funcsize=71)"

#error "1019205F8: call analysis failed (funcsize=71)"

#error "101920760: call analysis failed (funcsize=71)"

#error "1019208C8: call analysis failed (funcsize=71)"

#error "101920A30: call analysis failed (funcsize=71)"

#error "101920B98: call analysis failed (funcsize=71)"

#error "101920D00: call analysis failed (funcsize=71)"

#error "101920E68: call analysis failed (funcsize=71)"

#error "101920FD0: call analysis failed (funcsize=71)"

#error "101921138: call analysis failed (funcsize=71)"

#error "1019212A0: call analysis failed (funcsize=71)"

#error "101921408: call analysis failed (funcsize=71)"

#error "101921570: call analysis failed (funcsize=71)"

#error "1019216D8: call analysis failed (funcsize=71)"

void sub_1019217CC()
{
  unint64_t *v0;
  uint64_t v1;
  int v2;

  sub_100BCBBAC();
  do
    sub_10085FB98(v0);
  while (v2);
  if (!v1)
  {
    sub_1002908D4();
    sub_100BCBBBC();
  }
  sub_100BCBBC4();
  sub_10085FBCC();
}

#error "101921870: call analysis failed (funcsize=70)"

void sub_10192195C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Received unknown type. CLAccessoryMonitor should be validating this for us!\", \"type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
    }
    v1 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      sub_100299F04();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Received unknown type. CLAccessoryMonitor should be validating this for us!", "{\"msg%{public}.0s\":\"Received unknown type. CLAccessoryMonitor should be validating this for us!\", \"type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021788E8);
    }
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received unknown type. CLAccessoryMonitor should be validating this for us!\", \"type\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Utilities/CLMotionLogger.mm", 4047, "onAccessoryMonitorLogEvent");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_1021788E8);
  }
}

void sub_101921B40()
{
  __assert_rtn("set_ar_session_state", "CLPVisionLogEntry.pb.h", 184, "::CLP::LogEntry::Vision::ARSessionState_IsValid(value)");
}

void sub_101921B68()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102179EE8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102179EE8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/BluetoothService/CLBluetoothService.mm", 25, "-[CLBluetoothServiceAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102179EE8);
  }
}

#error "101921D68: call analysis failed (funcsize=79)"

#error "101921EE0: call analysis failed (funcsize=71)"

#error "101922044: call analysis failed (funcsize=71)"

#error "1019221A8: call analysis failed (funcsize=71)"

#error "10192230C: call analysis failed (funcsize=71)"

#error "101922470: call analysis failed (funcsize=71)"

#error "1019225D4: call analysis failed (funcsize=71)"

#error "101922738: call analysis failed (funcsize=71)"

#error "10192289C: call analysis failed (funcsize=71)"

void sub_10192298C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_100C1DCE4();
  if (!v1)
    dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  if (sub_100C1DCA0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err config_dict\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 128) != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  }
  if (sub_100C1DCC4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "#nilr,#supl,#udp,mem_err config_dict", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err config_dict\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 128) != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  }
  if (sub_100C1DCB4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err config_dict\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_101922ADC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_100C1DCE4();
  if (!v1)
    dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  if (sub_100C1DCA0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err params\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 128) != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  }
  if (sub_100C1DCC4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "#nilr,#supl,#udp,mem_err params", "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err params\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 128) != -1)
      dispatch_once(&qword_1022A0080, &stru_10217A2F8);
  }
  if (sub_100C1DCB4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"#nilr,#supl,#udp,mem_err params\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

#error "101922CA0: call analysis failed (funcsize=72)"

#error "101922E0C: call analysis failed (funcsize=72)"

void sub_101922F04(uint64_t a1, void **a2)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*a2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_101922F40()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[56];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (sub_100290880())
    {
      sub_100C1FBA8();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Invalid assertion level\", \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_100C1FBA8();
      sub_100B90364((void *)&_mh_execute_header, v1, v2, v3, "#CLIUA Invalid assertion level", "{\"msg%{public}.0s\":\"#CLIUA Invalid assertion level\", \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v4 = qword_1022A01D8;
    if (sub_10029088C())
    {
      sub_100C1FBA8();
      sub_100C1FBE0((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Invalid assertion level\", \"AssertionLevel\":%{public, location:CLClientInUseLevel}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm", 248, "markBalancedClientInUseTransition");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  }
}

void sub_1019230E8()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[56];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_100B566B4();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Records should not be stored unless they have active assertions\", \"key\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_100B566B4();
      sub_100B90364((void *)&_mh_execute_header, v1, v2, v3, "#CLIUA Records should not be stored unless they have active assertions", "{\"msg%{public}.0s\":\"#CLIUA Records should not be stored unless they have active assertions\", \"key\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_100B566B4();
      sub_100C1FBE0((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Records should not be stored unless they have active assertions\", \"key\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm", 177, "getAssertedInUseLevelForClient");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  }
}

void sub_1019232A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (sub_100290880())
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLIUA Over-release detected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CLIUA Over-release detected", "{\"msg%{public}.0s\":\"#CLIUA Over-release detected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10217A980);
    }
    v2 = qword_1022A01D8;
    if (sub_10029088C())
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLIUA Over-release detected\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLInUseLevelTracker.mm", 305, "decrementCountForLevel");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_10217A980);
  }
}

uint64_t sub_101923460(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = *a1;
  *a1 = 0;
  if (v8)
    sub_100C21B98(v8);
  v9 = *a2;
  *a2 = 0;
  if (v9)
    sub_100C21B98(v9);
  v10 = *a3;
  *a3 = 0;
  if (v10)
    sub_100C21B98(v10);
  result = *a4;
  *a4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1019234E4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217AD18);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217AD18);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/OnBody/CLOnBodyNotifier.mm", 28, "-[CLOnBodyNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10217AD18);
  }
}

void sub_10192366C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10217AE40);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10217AE40);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10217AE40);
  }
}

void sub_1019237DC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217B2D8);
  v0 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#monitor should be all cleared for migration but it isn't\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217B2D8);
  }
  v1 = qword_1022A01D8;
  if (os_signpost_enabled((os_log_t)qword_1022A01D8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#monitor should be all cleared for migration but it isn't", "{\"msg%{public}.0s\":\"#monitor should be all cleared for migration but it isn't\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10217B2D8);
  }
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#monitor should be all cleared for migration but it isn't\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_1019239A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_t v6;
  uint8_t *v7;

  sub_100C3B4EC();
  sub_100C3B504(1.7165e-36, v1, v2);
  sub_100C3B518(v3, v4);
  *(_QWORD *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(_QWORD *)(v5 + 40) = "subPath";
  sub_100C3B4DC((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#monitor unable to get identifiable name from client key\", \"name\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  if (*(char *)(v0 + 23) < 0)
    operator delete(*(void **)v0);
}

uint64_t sub_101923A1C(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t result;

  v10 = *a1;
  *a1 = 0;
  if (v10)
    sub_100C21B98(v10);
  result = *a2;
  *a2 = 0;
  if (result)
    result = sub_100C21B98(result);
  *(_QWORD *)a5 = a3;
  *(_DWORD *)(a5 + 8) = a4;
  return result;
}

void sub_101923A78()
{
  __assert_rtn("-[CLCompanionSyncAuthObject writeTo:]", "CLCompanionSyncAuthObject.m", 347, "nil != self->_clientKey");
}

#error "101923B20: call analysis failed (funcsize=75)"

#error "101923C94: call analysis failed (funcsize=76)"

#error "101923E10: call analysis failed (funcsize=76)"

#error "101923F8C: call analysis failed (funcsize=75)"

void sub_101924080()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10217C430);
  v0 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"FenceCal: Where did you come from\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
  }
  v1 = qword_1022A0068;
  if (os_signpost_enabled((os_log_t)qword_1022A0068))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FenceCal: Where did you come from", "{\"msg%{public}.0s\":\"FenceCal: Where did you come from\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10217C430);
  }
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"FenceCal: Where did you come from\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101924244()
{
  __assert_rtn("calculateWeightedScore", "CLWifiFenceCalculator.mm", 1259, "uncertainty > 0.0f");
}

void sub_10192426C()
{
  __assert_rtn("calculateWeightedScore", "CLWifiFenceCalculator.mm", 1260, "score > -1.0f");
}

void sub_101924294()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_100C97EB8();
  if (!v1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  if (sub_100C97E88())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 160) != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
  if (sub_100C97EAC())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 160) != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
  if (sub_100C97E9C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_1019243E4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_100C97EB8();
  if (!v1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  if (sub_100C97E88())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 160) != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
  if (sub_100C97EAC())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 160) != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
  if (sub_100C97E9C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_101924534()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_100C97EB8();
  if (!v1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  if (sub_100C97E88())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 160) != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
  if (sub_100C97EAC())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 160) != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
  if (sub_100C97E9C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_101924684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A00A0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100C97E88())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    }
    if (sub_100C97EAC())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    }
    if (sub_100C97E9C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Raven/CLRavenController.mm", 1474, "ChangeState");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  }
}

void sub_101924804()
{
  __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
}

void sub_10192482C()
{
  __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
}

void sub_101924854()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3887, "&(A) != &(C)");
}

void sub_10192487C()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3888, "&(B) != &(C)");
}

void sub_1019248A4()
{
  __assert_rtn("Multiply", "cnmatrixbase.h", 3885, "A.num_cols_ == B.num_rows_");
}

void sub_1019248CC()
{
  __assert_rtn("WriteValue", "cnmatrixbase.h", 1104, "data_ != __null");
}

void sub_1019248F4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217CB70);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217CB70);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLSignificantChangeManager.mm", 60, "-[CLSignificantChangeManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10217CB70);
  }
}

#error "101924B40: call analysis failed (funcsize=76)"

#error "101924CAC: call analysis failed (funcsize=70)"

uint64_t sub_101924D98(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return sub_100C21B98(result);
  return result;
}

#error "101924E30: call analysis failed (funcsize=71)"

#error "101924F98: call analysis failed (funcsize=71)"

#error "101925104: call analysis failed (funcsize=72)"

#error "101925270: call analysis failed (funcsize=72)"

#error "1019253DC: call analysis failed (funcsize=72)"

#error "101925548: call analysis failed (funcsize=72)"

#error "1019256B4: call analysis failed (funcsize=72)"

void sub_1019257A8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217EB90);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10217EB90);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLMagneticAccessory.mm", 56, "-[CLMagneticAccessoryAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10217EB90);
  }
}

void sub_101925930()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10217ED40);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10217ED40);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10217ED40);
  }
}

void sub_101925AA0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217F3D8);
    }
    if (sub_100496720())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217F3D8);
    }
    if (sub_100496710())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService_Type.mm", 199, "toHostedNetwork");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10217F3D8);
  }
}

void sub_101925C14()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217F3D8);
    }
    if (sub_100496720())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217F3D8);
    }
    if (sub_100496710())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiService_Type.mm", 200, "toHostedNetwork");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10217F3D8);
  }
}

#error "101925E00: call analysis failed (funcsize=72)"

#error "101925F6C: call analysis failed (funcsize=72)"

#error "1019260D8: call analysis failed (funcsize=72)"

#error "101926244: call analysis failed (funcsize=72)"

#error "1019263B0: call analysis failed (funcsize=72)"

#error "10192651C: call analysis failed (funcsize=72)"

#error "101926688: call analysis failed (funcsize=72)"

#error "1019267F4: call analysis failed (funcsize=72)"

#error "101926960: call analysis failed (funcsize=72)"

#error "101926ACC: call analysis failed (funcsize=72)"

#error "101926C38: call analysis failed (funcsize=72)"

#error "101926DA4: call analysis failed (funcsize=72)"

#error "101926F10: call analysis failed (funcsize=72)"

#error "10192707C: call analysis failed (funcsize=72)"

#error "1019271E8: call analysis failed (funcsize=72)"

#error "101927354: call analysis failed (funcsize=72)"

#error "1019274C0: call analysis failed (funcsize=72)"

#error "10192762C: call analysis failed (funcsize=72)"

#error "101927798: call analysis failed (funcsize=72)"

#error "101927904: call analysis failed (funcsize=72)"

void sub_1019279F8(char a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint8_t v6[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0060, &stru_102181C50);
  v1 = qword_1022A0068;
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"addFencesForDataDownload fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
  }
  if (os_signpost_enabled((os_log_t)qword_1022A0068))
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "addFencesForDataDownload fence without key", "{\"msg%{public}.0s\":\"addFencesForDataDownload fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102181C50);
  }
  v5 = qword_1022A0068;
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_1002908CC((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"addFencesForDataDownload fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
}

#error "101927CC4: call analysis failed (funcsize=81)"

#error "101927E50: call analysis failed (funcsize=82)"

void sub_101927EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_100D44528();
  if (!v27)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  if (sub_100D44514())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44544())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44534())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(569);
  sub_100299FDC();
}

void sub_101928008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_100D44528();
  if (!v27)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  if (sub_100D44514())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44544())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44534())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(551);
  sub_100299FDC();
}

void sub_10192816C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_100D44528();
  if (!v27)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  if (sub_100D44514())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44544())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44534())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(411);
  sub_100299FDC();
}

void sub_1019282D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_100D44528();
  if (!v27)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  if (sub_100D44514())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44544())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44534())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(376);
  sub_100299FDC();
}

void sub_101928434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_100D44528();
  if (!v27)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  if (sub_100D44514())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Auth notification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44544())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Auth notification fence without key", "{\"msg%{public}.0s\":\"Auth notification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44534())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Auth notification fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(461);
  sub_100299FDC();
}

void sub_101928598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_100D44528();
  if (!v27)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  if (sub_100D44514())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Auth notification same bundle fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44544())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v24, v28, v29, "Auth notification same bundle fence without key", "{\"msg%{public}.0s\":\"Auth notification same bundle fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_100D44528();
    if (!v27)
      dispatch_once(&qword_1022A0060, &stru_102182050);
  }
  if (sub_100D44534())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Auth notification same bundle fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_10042AE30(455);
  sub_100299FDC();
}

#error "10192883C: call analysis failed (funcsize=81)"

#error "1019289C8: call analysis failed (funcsize=82)"

#error "101928A90: call analysis failed (funcsize=71)"

#error "101928BF8: call analysis failed (funcsize=71)"

#error "101928D74: call analysis failed (funcsize=81)"

#error "101928EF0: call analysis failed (funcsize=71)"

#error "101929058: call analysis failed (funcsize=71)"

#error "1019291C0: call analysis failed (funcsize=71)"

#error "101929328: call analysis failed (funcsize=70)"

void sub_101929414()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0060 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Wifi startMonitoring fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
    }
    v1 = qword_1022A0068;
    if (os_signpost_enabled((os_log_t)qword_1022A0068))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Wifi startMonitoring fence without key", "{\"msg%{public}.0s\":\"Wifi startMonitoring fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0060 != -1)
        dispatch_once(&qword_1022A0060, &stru_102183140);
    }
    v2 = qword_1022A0068;
    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wifi startMonitoring fence without key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLFenceMonitorWifi.mm", 93, "addFence");
LABEL_11:
    dispatch_once(&qword_1022A0060, &stru_102183140);
  }
}

void sub_1019295E0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_101929600()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102183210);
  v0 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"invalid db pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102183210);
  }
  v1 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "invalid db pointer", "{\"msg%{public}.0s\":\"invalid db pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102183210);
  }
  v2 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid db pointer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_1019297C4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183610);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183610);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Compass/CLGeomagneticModelProvider.mm", 33, "-[CLGeomagneticModelProviderLocationdAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102183610);
  }
}

void sub_10192994C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183AA8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102183AA8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/SignalEnvironment/CLSignalEnvironmentProvider.mm", 47, "-[CLSignalEnvironmentProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102183AA8);
  }
}

void sub_101929ACC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102183FE8);
  v0 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"indeterminate wifi power state\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
  }
  v1 = qword_1022A0058;
  if (os_signpost_enabled((os_log_t)qword_1022A0058))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "indeterminate wifi power state", "{\"msg%{public}.0s\":\"indeterminate wifi power state\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102183FE8);
  }
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"indeterminate wifi power state\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101929C90()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021846B8);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021846B8);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Cell/CLUnifiedCellLocationProvider.mm", 48, "-[CLUnifiedCellLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021846B8);
  }
}

void sub_101929E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_10229FD30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100804608())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021848B8);
    }
    if (sub_10080462C())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021848B8);
    }
    if (sub_10080461C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorCalibrationStaticDetector.mm", 60, "CLSensorCalibrationStaticDetectorMotionCoprocessor");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FD30, &stru_1021848B8);
  }
}

void sub_101929FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_1021848B8);
  if (sub_100804608())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021848B8);
  }
  if (sub_10080462C())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021848B8);
  }
  if (sub_10080461C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_10192A14C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_10229FD30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100804608())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021848B8);
    }
    if (sub_10080462C())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021848B8);
    }
    if (sub_10080461C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/DeviceMotion/CLSensorCalibrationStaticDetector.mm", 255, "onAccelerometerData");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FD30, &stru_1021848B8);
  }
}

void sub_10192A2CC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FCA0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
    }
    v1 = qword_10229FCA8;
    if (os_signpost_enabled((os_log_t)qword_10229FCA8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FCA0 != -1)
        dispatch_once(&qword_10229FCA0, &stru_102184A20);
    }
    v2 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimLapDetect.cpp", 301, "prctile");
LABEL_11:
    dispatch_once(&qword_10229FCA0, &stru_102184A20);
  }
}

void sub_10192A498()
{
  __assert_rtn("set_slot_source", "CLPGnssMeasApi.pb.h", 6606, "::CLP::LogEntry::PrivateData::GlonassSlotSource_IsValid(value)");
}

void sub_10192A4C0()
{
  __assert_rtn("set_band", "CLPGnssMeasApi.pb.h", 7929, "::CLP::LogEntry::PrivateData::Band_IsValid(value)");
}

void sub_10192A4E8()
{
  __assert_rtn("set_full_sv_time_source", "CLPGnssMeasApi.pb.h", 8876, "::CLP::LogEntry::PrivateData::FullSvTimeSource_IsValid(value)");
}

void sub_10192A510()
{
  __assert_rtn("set_frequency_detection_method", "CLPGnssMeasApi.pb.h", 9252, "::CLP::LogEntry::PrivateData::MeasurementDetectionMethod_IsValid(value)");
}

void sub_10192A538()
{
  __assert_rtn("set_sv_time_detection_method", "CLPGnssMeasApi.pb.h", 9229, "::CLP::LogEntry::PrivateData::MeasurementDetectionMethod_IsValid(value)");
}

void sub_10192A560()
{
  __assert_rtn("set_multipath_indicator", "CLPGnssMeasApi.pb.h", 9802, "::CLP::LogEntry::PrivateData::MultipathIndicator_IsValid(value)");
}

void sub_10192A588()
{
  __assert_rtn("set_ionospheric_model", "CLPGnssMeasApi.pb.h", 10659, "::CLP::LogEntry::PrivateData::IonosphericCorrectionSource_IsValid(value)");
}

void sub_10192A5B0()
{
  __assert_rtn("set_band", "CLPGnssMeasApi.pb.h", 10570, "::CLP::LogEntry::PrivateData::Band_IsValid(value)");
}

void sub_10192A5D8()
{
  __assert_rtn("set_sv_reference_point", "CLPGnssMeasApi.pb.h", 11418, "::CLP::LogEntry::PrivateData::SvReferencePoint_IsValid(value)");
}

void sub_10192A600()
{
  __assert_rtn("set_integrity_health_l5", "CLPGnssMeasApi.pb.h", 11373, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A628()
{
  __assert_rtn("set_ms_based_health_l5", "CLPGnssMeasApi.pb.h", 11350, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A650()
{
  __assert_rtn("set_assistance_file_health_l5", "CLPGnssMeasApi.pb.h", 11327, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A678()
{
  __assert_rtn("set_over_the_air_from_other_sv_health_l5", "CLPGnssMeasApi.pb.h", 11304, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A6A0()
{
  __assert_rtn("set_over_the_air_from_sv_health_l5", "CLPGnssMeasApi.pb.h", 11281, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A6C8()
{
  __assert_rtn("set_integrity_health_l1", "CLPGnssMeasApi.pb.h", 11191, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A6F0()
{
  __assert_rtn("set_ms_based_health_l1", "CLPGnssMeasApi.pb.h", 11168, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A718()
{
  __assert_rtn("set_assistance_file_health_l1", "CLPGnssMeasApi.pb.h", 11145, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A740()
{
  __assert_rtn("set_over_the_air_from_other_sv_health_l1", "CLPGnssMeasApi.pb.h", 11122, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A768()
{
  __assert_rtn("set_over_the_air_from_sv_health_l1", "CLPGnssMeasApi.pb.h", 11099, "::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
}

void sub_10192A790()
{
  __assert_rtn("set_position_source", "CLPGnssMeasApi.pb.h", 10941, "::CLP::LogEntry::PrivateData::SvPositionSource_IsValid(value)");
}

void sub_10192A7B8()
{
  __assert_rtn("set_band", "CLPGnssMeasApi.pb.h", 11445, "::CLP::LogEntry::PrivateData::Band_IsValid(value)");
}

void sub_10192A7E0()
{
  __assert_rtn("set_change_knowledge", "CLPGnssMeasApi.pb.h", 11608, "::CLP::LogEntry::PrivateData::LeapSecondChangeKnowledge_IsValid(value)");
}

void sub_10192A808()
{
  __assert_rtn("set_leap_second_deprecated", "CLPGnssMeasApi.pb.h", 11971, "::CLP::LogEntry::PrivateData::GlonassLeapSecondDeprecated_IsValid(value)");
}

void sub_10192A830()
{
  __assert_rtn("set_sv_reference_point", "CLPGnssMeasApi.pb.h", 13159, "::CLP::LogEntry::PrivateData::SvReferencePoint_IsValid(value)");
}

void sub_10192A858()
{
  __assert_rtn("set_band", "CLPGnssMeasApi.pb.h", 13136, "::CLP::LogEntry::PrivateData::Band_IsValid(value)");
}

#error "10192A908: call analysis failed (funcsize=81)"

#error "10192AA88: call analysis failed (funcsize=72)"

#error "10192ABF4: call analysis failed (funcsize=72)"

#error "10192AD60: call analysis failed (funcsize=72)"

#error "10192AECC: call analysis failed (funcsize=72)"

#error "10192B038: call analysis failed (funcsize=72)"

void sub_10192B12C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FE60 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100DE1254())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
    }
    if (sub_100DE1278())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?", "{\"msg%{public}.0s\":\"In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102187B78);
    }
    if (sub_100DE1268())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"In order to retract a stop alert we need the sessionId to not have been cleared out, did something change?\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/Algorithm/CLWorkoutPredictor.mm", 1102, "retractStopAlert");
LABEL_11:
    dispatch_once(&qword_10229FE60, &stru_102187B78);
  }
}

void sub_10192B298()
{
  __assert_rtn("startAutoStopTimer", "CLEphemeralGNSSController.mm", 54, "!fAutoStopTimer.handler");
}

void sub_10192B2C0()
{
  __assert_rtn("onLocationNotification", "CLEphemeralGNSSController.mm", 131, "notification == CLLocationProvider_Type::kNotificationLocation");
}

void sub_10192B2E8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102188780);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102188780);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Skiing/CLSkiNotifierAdapter.mm", 20, "-[CLSkiNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102188780);
  }
}

#error "10192B52C: call analysis failed (funcsize=72)"

#error "10192B698: call analysis failed (funcsize=72)"

#error "10192B804: call analysis failed (funcsize=72)"

#error "10192B970: call analysis failed (funcsize=72)"

#error "10192BADC: call analysis failed (funcsize=72)"

void sub_10192BBD0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLGnssProviderAdapter,beginService,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
    }
    v1 = qword_1022A0078;
    if (os_signpost_enabled((os_log_t)qword_1022A0078))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLGnssProviderAdapter,beginService,Assertion failed", "{\"msg%{public}.0s\":\"CLGnssProviderAdapter,beginService,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
    }
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLGnssProviderAdapter,beginService,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGnssProvider.mm", 70, "-[CLGnssProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  }
}

void sub_10192BD9C(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218A2C8);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A2C8);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A2C8);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 112;
  sub_100299FDC();
}

void sub_10192BF0C(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218A2C8);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A2C8);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A2C8);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 107;
  sub_100299FDC();
}

void sub_10192C07C()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218A2E8);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218A2E8);
    }
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h", 258, "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10218A2E8);
  }
}

void sub_10192C234(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218A358);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A358);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A358);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 112;
  sub_100299FDC();
}

void sub_10192C3A4(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218A358);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A358);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A358);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 107;
  sub_100299FDC();
}

void sub_10192C514()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218A378);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218A378);
    }
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h", 258, "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10218A378);
  }
}

void sub_10192C6CC(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218A408);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A408);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A408);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 112;
  sub_100299FDC();
}

void sub_10192C83C(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218A408);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A408);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218A408);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 107;
  sub_100299FDC();
}

void sub_10192C9AC()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218A428);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218A428);
    }
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h", 258, "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10218A428);
  }
}

#error "10192CBDC: call analysis failed (funcsize=72)"

#error "10192CD48: call analysis failed (funcsize=72)"

#error "10192CEB4: call analysis failed (funcsize=72)"

#error "10192D020: call analysis failed (funcsize=72)"

#error "10192D18C: call analysis failed (funcsize=72)"

void sub_10192D280(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218AA50);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218AA50);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218AA50);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 112;
  sub_100299FDC();
}

void sub_10192D3F0(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_1005E1CE8();
  if (!v3)
    dispatch_once(&qword_1022A0020, &stru_10218AA50);
  if (sub_1005E1CF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218AA50);
  }
  if (sub_1005E1D18())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_1005E1CE8();
    if (!v3)
      dispatch_once(&qword_1022A0020, &stru_10218AA50);
  }
  if (sub_1005E1D08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 107;
  sub_100299FDC();
}

void sub_10192D560()
{
  NSObject *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218AA70);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218AA70);
    }
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLManagedLocationDatabase.h", 258, "beginInMemoryTransaction");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10218AA70);
  }
}

void sub_10192D718()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FE60 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Requested end index must not exceed end of array - 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218AAB0);
    }
    v1 = qword_10229FE68;
    if (os_signpost_enabled((os_log_t)qword_10229FE68))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Requested end index must not exceed end of array - 1", "{\"msg%{public}.0s\":\"Requested end index must not exceed end of array - 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10218AAB0);
    }
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Requested end index must not exceed end of array - 1\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/Algorithm/CLWorkoutOutdoorCyclingClassifierFeaturesCalculator.cpp", 52, "findIndexOfMaxPeak");
LABEL_11:
    dispatch_once(&qword_10229FE60, &stru_10218AAB0);
  }
}

#error "10192D95C: call analysis failed (funcsize=72)"

#error "10192DAC8: call analysis failed (funcsize=72)"

#error "10192DC34: call analysis failed (funcsize=72)"

#error "10192DDA0: call analysis failed (funcsize=72)"

#error "10192DF0C: call analysis failed (funcsize=72)"

void sub_10192E000()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B0E8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/DataProtectionManager/CLDataProtectionManager.mm", 44, "-[CLDataProtectionManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10218B0E8);
  }
}

void sub_10192E188()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10218B278);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10218B278);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10218B278);
  }
}

void sub_10192E2F8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CLStatusBarIconManagerNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B708);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "CLStatusBarIconManagerNotifier Assertion failed", "{\"msg%{public}.0s\":\"CLStatusBarIconManagerNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218B708);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CLStatusBarIconManagerNotifier Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/StatusBarIcon/CLStatusBarIconManager.mm", 95, "-[CLStatusBarIconManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10218B708);
  }
}

void sub_10192E480()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10218B878);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10218B878);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10218B878);
  }
}

void sub_10192E5F0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02A0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The capabilities cache has been accessed before being populated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218BA28);
    }
    v1 = qword_1022A02A8;
    if (os_signpost_enabled((os_log_t)qword_1022A02A8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The capabilities cache has been accessed before being populated!", "{\"msg%{public}.0s\":\"The capabilities cache has been accessed before being populated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_10218BA28);
    }
    v2 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The capabilities cache has been accessed before being populated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Utilities/CLLocationDictionaryUtilities.mm", 524, "_CLLocationDictionaryUtilitiesHasCapability");
LABEL_11:
    dispatch_once(&qword_1022A02A0, &stru_10218BA28);
  }
}

void sub_10192E7BC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"I must have already been invalidated by CLDaemonInUseAssertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "I must have already been invalidated by CLDaemonInUseAssertion", "{\"msg%{public}.0s\":\"I must have already been invalidated by CLDaemonInUseAssertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
    }
    if (sub_100903234())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"I must have already been invalidated by CLDaemonInUseAssertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonInUseAssertion.mm", 33, "-[CLDaemonInUseAssertionAdapter dealloc]");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_10218BB70);
  }
}

void sub_10192E928()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion", "{\"msg%{public}.0s\":\"#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218BB70);
    }
    if (sub_100903234())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#CLIUA expecting that fInUseAssertionContainer is nil, but it appears to have already been set! This is potentially a major privacy leak and is likely indicative of a memory leak or a double-assertion\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLDaemonInUseAssertion.mm", 145, "handleMessageInUseAssertion_block_invoke");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_10218BB70);
  }
}

void sub_10192EA94()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218BF30);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10218BF30);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Streaming/CLStreamingAwareLocationProvider.mm", 65, "-[CLStreamingAwareLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10218BF30);
  }
}

void sub_10192EC60()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A01E0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid location source\", \"source\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    }
    v1 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      sub_100299EA0();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid location source", "{\"msg%{public}.0s\":\"Invalid location source\", \"source\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    }
    v2 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid location source\", \"source\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Streaming/CLStreamingAwareLocationProvider.mm", 420, "setLocationRegistration");
LABEL_11:
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  }
}

void sub_10192EE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  if (sub_100903220())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#transcriptSession fSavedPromptedCoordinates not be zero, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  }
  if (sub_100903244())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "#transcriptSession fSavedPromptedCoordinates not be zero, here", "{\"msg%{public}.0s\":\"#transcriptSession fSavedPromptedCoordinates not be zero, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#transcriptSession fSavedPromptedCoordinates not be zero, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_10192EFA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#transcriptSession setCommencementDate should not be nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "#transcriptSession setCommencementDate should not be nil, here", "{\"msg%{public}.0s\":\"#transcriptSession setCommencementDate should not be nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#transcriptSession setCommencementDate should not be nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLTranscriptSubscription.mm", 301, "setCommencementDate");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_10218C5C8);
  }
}

void sub_10192F138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#transcriptSession should not be valid since the session has stopped\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "#transcriptSession should not be valid since the session has stopped", "{\"msg%{public}.0s\":\"#transcriptSession should not be valid since the session has stopped\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#transcriptSession should not be valid since the session has stopped\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLTranscriptSubscription.mm", 365, "onInvalidate");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  }
}

void sub_10192F2B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Using a persistent subscription that has been invalidated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Using a persistent subscription that has been invalidated!", "{\"msg%{public}.0s\":\"Using a persistent subscription that has been invalidated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Using a persistent subscription that has been invalidated!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLPersistentSubscription.h", 196, "assertValid");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_10218C5A8);
  }
}

uint64_t sub_10192F430(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_100E61008(a2);
}

void sub_10192F470()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218CA30);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218CA30);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabaseManager.mm", 82, "openDatabase");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_10218CA30);
  }
}

#error "10192F6BC: call analysis failed (funcsize=72)"

#error "10192F828: call analysis failed (funcsize=72)"

#error "10192F994: call analysis failed (funcsize=72)"

#error "10192FB00: call analysis failed (funcsize=72)"

#error "10192FC6C: call analysis failed (funcsize=72)"

#error "10192FDD8: call analysis failed (funcsize=72)"

#error "10192FF44: call analysis failed (funcsize=72)"

#error "1019300B0: call analysis failed (funcsize=72)"

#error "10193021C: call analysis failed (funcsize=72)"

#error "101930388: call analysis failed (funcsize=72)"

void sub_10193047C(char a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  int v4;

  if ((a1 & 1) == 0)
  {
    v2 = (unint64_t *)(a2 + 8);
    do
      sub_10085FB98(v2);
    while (v4);
    if (!v3)
    {
      sub_10085FB88();
      sub_10085FBD4();
    }
  }
}

void sub_1019304B4(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = (unint64_t *)(a1 + 8);
  do
    sub_10085FB98(v1);
  while (v3);
  if (!v2)
  {
    sub_10085FB88();
    sub_10085FBD4();
  }
  sub_10085FBCC();
}

void sub_1019304E4(std::__shared_weak_count *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  do
    sub_100E88A50();
  while (v3);
  if (!v2)
  {
    sub_10085FB88();
    sub_10085FBD4();
  }
  do
    sub_100E88A50();
  while (v5);
  if (v4)
  {
    sub_10085FBCC();
  }
  else
  {
    sub_10085FB88();
    sub_100E88A60(a1);
  }
}

void sub_101930530()
{
  __assert_rtn("set_fusion_state", "CLPLocationController.pb.h", 5875, "::CLP::LogEntry::PrivateData::LCFusionState_IsValid(value)");
}

void sub_101930558()
{
  __assert_rtn("set_original_location_type", "CLPLocationController.pb.h", 5830, "::CLP::LogEntry::PrivateData::LocationType_IsValid(value)");
}

void sub_101930580()
{
  __assert_rtn("set_io_derived_motion_activity", "CLPLocationController.pb.h", 5785, "::CLP::LogEntry::PrivateData::IODerivedMotionActivity_IsValid(value)");
}

void sub_1019305A8()
{
  __assert_rtn("set_motion_activity", "CLPLocationController.pb.h", 5762, "::CLP::LogEntry::PrivateData::DominantMotionModeType_IsValid(value)");
}

void sub_1019305D0()
{
  __assert_rtn("set_dynamics_mode", "CLPLocationController.pb.h", 5739, "::CLP::LogEntry::PrivateData::DynamicsMode_IsValid(value)");
}

void sub_1019305F8()
{
  __assert_rtn("set_filter_type", "CLPLocationController.pb.h", 6059, "::CLP::LogEntry::PrivateData::SystemNotification_FilterType_IsValid(value)");
}

void sub_101930620()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6220, "::CLP::LogEntry::PrivateData::SystemNotification_NotificationType_IsValid(value)");
}

void sub_101930648()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6553, "::CLP::LogEntry::PrivateData::DeviceStatus_NotificationType_IsValid(value)");
}

void sub_101930670()
{
  __assert_rtn("set_location_enabled", "CLPLocationController.pb.h", 6622, "::CLP::LogEntry::PrivateData::LocationServicesEnabled_IsValid(value)");
}

void sub_101930698()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6671, "::CLP::LogEntry::PrivateData::ClientManagerNotification_NotificationType_IsValid(value)");
}

void sub_1019306C0()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 6961, "::CLP::LogEntry::PrivateData::WifiNotificationType_IsValid(value)");
}

void sub_1019306E8()
{
  __assert_rtn("set_availability", "CLPLocationController.pb.h", 7030, "::CLP::LogEntry::PrivateData::DataAvailability_IsValid(value)");
}

void sub_101930710()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7079, "::CLP::LogEntry::PrivateData::DataProtectionManagerNotification_NotificationType_IsValid(value)");
}

void sub_101930738()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7587, "::CLP::LogEntry::PrivateData::MotionStateObserverNotification_NotificationType_IsValid(value)");
}

void sub_101930760()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7815, "::CLP::LogEntry::PrivateData::TelephonyServiceNotification_NotificationType_IsValid(value)");
}

void sub_101930788()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 7938, "::CLP::LogEntry::PrivateData::AppMonitorNotification_NotificationType_IsValid(value)");
}

void sub_1019307B0()
{
  __assert_rtn("set_pipeline_operating_mode", "CLPLocationController.pb.h", 8721, "::CLP::LogEntry::PrivateData::PipelineOperatingMode_IsValid(value)");
}

void sub_1019307D8()
{
  __assert_rtn("set_operating_mode", "CLPLocationController.pb.h", 8698, "::CLP::LogEntry::PrivateData::OperatingMode_IsValid(value)");
}

void sub_101930800()
{
  __assert_rtn("set_mode_deprecated", "CLPLocationController.pb.h", 8675, "::CLP::LogEntry::PrivateData::BatchMode_IsValid(value)");
}

void sub_101930828()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 8949, "::CLP::LogEntry::PrivateData::OutdoorServiceNotification_NotificationType_IsValid(value)");
}

void sub_101930850()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9086, "::CLP::LogEntry::PrivateData::RoutineVisitNotification_NotificationType_IsValid(value)");
}

void sub_101930878()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9206, "::CLP::LogEntry::PrivateData::InertialOdometryNotification_NotificationType_IsValid(value)");
}

void sub_1019308A0()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9385, "::CLP::LogEntry::PrivateData::MotionStateMediatorNotification_NotificationType_IsValid(value)");
}

void sub_1019308C8()
{
  __assert_rtn("set_notification_type", "CLPLocationController.pb.h", 9522, "::CLP::LogEntry::PrivateData::MapRouteHintNotification_NotificationType_IsValid(value)");
}

void sub_1019308F0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021904B0);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021904B0);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Loi/CLLoiLocationProvider.mm", 64, "-[CLLoiLocationProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021904B0);
  }
}

void sub_101930ABC(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
  }
  v2 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
  }
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101930C78(char a1, std::__shared_weak_count *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;

  if ((a1 & 1) == 0)
  {
    p_shared_owners = (unint64_t *)&a2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      sub_10085FB88();
      std::__shared_weak_count::__release_weak(a2);
    }
  }
}

#error "101930D3C: call analysis failed (funcsize=75)"

#error "101930EA4: call analysis failed (funcsize=71)"

#error "10193100C: call analysis failed (funcsize=71)"

#error "101931174: call analysis failed (funcsize=71)"

#error "1019312DC: call analysis failed (funcsize=71)"

#error "101931444: call analysis failed (funcsize=70)"

#error "1019315A4: call analysis failed (funcsize=70)"

#error "101931704: call analysis failed (funcsize=70)"

#error "101931864: call analysis failed (funcsize=70)"

#error "1019319C8: call analysis failed (funcsize=74)"

#error "101931B38: call analysis failed (funcsize=71)"

#error "101931CA0: call analysis failed (funcsize=71)"

#error "101931E08: call analysis failed (funcsize=71)"

#error "101931F7C: call analysis failed (funcsize=75)"

void sub_101932070()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1008B9EF8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Can't have a scan of no channels\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F1C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Can't have a scan of no channels", "{\"msg%{public}.0s\":\"Can't have a scan of no channels\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F0C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Can't have a scan of no channels\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm", 143, "setChannels");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_102191978);
  }
}

void sub_1019321E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t v3[56];

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1008B9EF8())
    {
      sub_100EF142C(CFSTR("SCAN_CHANNELS"));
      sub_100EF13E4();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F1C())
    {
      sub_100EF142C(CFSTR("SCAN_CHANNELS"));
      sub_100EF13E4();
      sub_100B90364((void *)&_mh_execute_header, v0, v1, v2, "Expected key in the dictionary", "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F0C())
    {
      sub_100EF142C(CFSTR("SCAN_CHANNELS"));
      sub_100EF13E4();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm", 187, "fromDictionary");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_102191978);
  }
}

void sub_10193239C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t v3[56];

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100EF1418())
    {
      sub_100EF1378();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_100EF1448())
    {
      sub_100EF1378();
      sub_100B90364((void *)&_mh_execute_header, v0, v1, v2, "Expected key in the dictionary", "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_100EF1438())
    {
      sub_100EF1378();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expected key in the dictionary\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm", 173, "operator()");
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_102191978);
  }
}

void sub_10193252C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t v3[56];

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100EF1418())
    {
      sub_100EF1378();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Expected to be able to get an int value from the CFNumber\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_100EF1448())
    {
      sub_100EF1378();
      sub_100B90364((void *)&_mh_execute_header, v0, v1, v2, "Expected to be able to get an int value from the CFNumber", "{\"msg%{public}.0s\":\"Expected to be able to get an int value from the CFNumber\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_100EF1438())
    {
      sub_100EF1378();
      sub_100C1FBE0((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Expected to be able to get an int value from the CFNumber\", \"key\":%{private, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm", 178, "operator()");
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_102191978);
  }
}

void sub_1019326BC(float a1)
{
  NSObject *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5[56];

  *(float *)&v2 = a1;
  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    v2 = *(float *)&v2;
    if (sub_1008B9EF8())
    {
      sub_100EF13AC();
      sub_100C1FBE0((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Duty cycle percentage should be between 0 and 1\", \"dutyCycle\":\"%{private}f\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F1C())
    {
      sub_100EF13AC();
      sub_100B90364((void *)&_mh_execute_header, v1, v3, v4, "Duty cycle percentage should be between 0 and 1", "{\"msg%{public}.0s\":\"Duty cycle percentage should be between 0 and 1\", \"dutyCycle\":\"%{private}f\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F0C())
    {
      sub_100EF13AC();
      sub_100C1FBE0((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Duty cycle percentage should be between 0 and 1\", \"dutyCycle\":\"%{private}f\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm", 15, "computeExpectedScanDelay");
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_102191978);
  }
}

void sub_101932854()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1008B9EF8())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Duty cycle is NaN\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F1C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Duty cycle is NaN", "{\"msg%{public}.0s\":\"Duty cycle is NaN\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102191978);
    }
    if (sub_1008B9F0C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Duty cycle is NaN\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/WifiService/CLWifiServiceScanParameters.mm", 17, "computeExpectedScanDelay");
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_102191978);
  }
}

void sub_1019329C0()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      sub_100EF815C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"maxHarvestAge is too high\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102191BE8);
    }
    v1 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      sub_100EF815C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "maxHarvestAge is too high", "{\"msg%{public}.0s\":\"maxHarvestAge is too high\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102191BE8);
    }
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_100EF815C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"maxHarvestAge is too high\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Subharvesters/Realtime/CLSubHarvesterRealtime.mm", 158, "getMaxHarvestAge");
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_102191BE8);
  }
}

void sub_101932B8C()
{
  __assert_rtn("set_encodingtype", "CLPKnownAC.pb.h", 586, "::CLP::LogEntry::ColdCoffee::EncodingType_IsValid(value)");
}

void sub_101932BB4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"attempting to access moving ap info when never set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102192028);
    }
    v1 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "attempting to access moving ap info when never set", "{\"msg%{public}.0s\":\"attempting to access moving ap info when never set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102192028);
    }
    v2 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"attempting to access moving ap info when never set\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/CLWifi1Types.mm", 78, "isMovingAp");
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_102192028);
  }
}

void sub_101932D80()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102192628);
  v0 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
  }
  if (os_signpost_enabled((os_log_t)qword_1022A0208))
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "trying to make neighbor out of non-neighbor cell", "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102192628);
  }
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "101932FB4: call analysis failed (funcsize=80)"

void sub_1019330B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1002F53E0();
  if (!v27)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Create service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "Create service - No error code but response descriptor not available ", "{\"msg%{public}.0s\":\"Create service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Create service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101933270: call analysis failed (funcsize=71)"

void sub_101933364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1002F53E0();
  if (!v27)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Delete service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "Delete service - No error code but response descriptor not available ", "{\"msg%{public}.0s\":\"Delete service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Delete service - No error code but response descriptor not available \", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101933520: call analysis failed (funcsize=71)"

#error "101933688: call analysis failed (funcsize=71)"

#error "1019337F0: call analysis failed (funcsize=71)"

#error "101933958: call analysis failed (funcsize=71)"

#error "101933AC0: call analysis failed (funcsize=71)"

#error "101933C28: call analysis failed (funcsize=71)"

#error "101933D90: call analysis failed (funcsize=71)"

#error "101933EF8: call analysis failed (funcsize=71)"

#error "101934060: call analysis failed (funcsize=70)"

#error "1019341C0: call analysis failed (funcsize=70)"

#error "101934320: call analysis failed (funcsize=70)"

#error "101934480: call analysis failed (funcsize=70)"

#error "1019345E0: call analysis failed (funcsize=70)"

#error "101934740: call analysis failed (funcsize=70)"

#error "1019348A0: call analysis failed (funcsize=70)"

void sub_10193498C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1002F53E0();
  if (!v27)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"request removing labels without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "request removing labels without request identifier", "{\"msg%{public}.0s\":\"request removing labels without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"request removing labels without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101934B48: call analysis failed (funcsize=71)"

#error "101934CB0: call analysis failed (funcsize=71)"

#error "101934E18: call analysis failed (funcsize=71)"

#error "101934F80: call analysis failed (funcsize=71)"

#error "1019350E8: call analysis failed (funcsize=71)"

void sub_1019351DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1002F53E0();
  if (!v27)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  if (sub_10026AFD0())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"request stop updateing MicroLocation without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFF4())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "request stop updateing MicroLocation without request identifier", "{\"msg%{public}.0s\":\"request stop updateing MicroLocation without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 240) != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  }
  if (sub_10026AFE4())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"request stop updateing MicroLocation without request identifier\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101935398: call analysis failed (funcsize=70)"

#error "1019354F8: call analysis failed (funcsize=70)"

#error "101935658: call analysis failed (funcsize=70)"

#error "1019357B8: call analysis failed (funcsize=71)"

#error "101935920: call analysis failed (funcsize=71)"

#error "101935A88: call analysis failed (funcsize=71)"

uint64_t sub_101935B7C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    sub_100F4AF98();
  return result;
}

void sub_101935B8C()
{
  __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
}

void sub_101935BB4()
{
  __assert_rtn("set_position_assist_type", "GpsdProtocol.pb.h", 9462, "::proto::gnss::PositionAssistType_IsValid(value)");
}

void sub_101935BDC()
{
  __assert_rtn("set_motion_reliability", "GpsdProtocol.pb.h", 10170, "::proto::gnss::Reliability_IsValid(value)");
}

void sub_101935C04()
{
  __assert_rtn("set_moving_state", "GpsdProtocol.pb.h", 10147, "::proto::gnss::MovingState_IsValid(value)");
}

void sub_101935C2C()
{
  __assert_rtn("set_context", "GpsdProtocol.pb.h", 10124, "::proto::gnss::MotionActivityContext_IsValid(value)");
}

void sub_101935C54()
{
  __assert_rtn("set_mount_state", "GpsdProtocol.pb.h", 10219, "::proto::gnss::DeviceMountState_IsValid(value)");
}

void sub_101935C7C()
{
  __assert_rtn("set_signal_environment_type", "GpsdProtocol.pb.h", 10246, "::proto::gnss::SignalEnvironmentType_IsValid(value)");
}

void sub_101935CA4()
{
  __assert_rtn("set_compression_type", "GpsdProtocol.pb.h", 9290, "::proto::gpsd::CompressionType_IsValid(value)");
}

void sub_101935CCC()
{
  __assert_rtn("set_info_type", "GpsdProtocol.pb.h", 11666, "::proto::gpsd::LtlInfoType_IsValid(value)");
}

void sub_101935CF4()
{
  __assert_rtn("set_status", "GpsdProtocol.pb.h", 11861, "::proto::gpsd::CntinStatus_IsValid(value)");
}

void sub_101935D1C()
{
  __assert_rtn("set_result_code", "GpsdProtocol.pb.h", 7806, "::proto::gnss::Result_IsValid(value)");
}

void sub_101935D44()
{
  __assert_rtn("set_request_type", "GpsdProtocol.pb.h", 7761, "::proto::gpsd::Request_Type_IsValid(value)");
}

void sub_101935D6C()
{
  __assert_rtn("set_supl_init_decode_result", "GpsdProtocol.pb.h", 8879, "::proto::gpsd::SuplInitDecodeResult_IsValid(value)");
}

void sub_101935D94()
{
  __assert_rtn("set_stop_status", "GpsdProtocol.pb.h", 8302, "::proto::gnss::Result_IsValid(value)");
}

void sub_101935DBC()
{
  __assert_rtn("set_start_status", "GpsdProtocol.pb.h", 8279, "::proto::gnss::Result_IsValid(value)");
}

void sub_101935DE4()
{
  __assert_rtn("set_request_type", "GpsdProtocol.pb.h", 7856, "::proto::gpsd::Request_Type_IsValid(value)");
}

void sub_101935E0C()
{
  __assert_rtn("set_type", "GpsdProtocol.pb.h", 7833, "::proto::gpsd::Indication_Type_IsValid(value)");
}

void sub_101935E34()
{
  __assert_rtn("set_info_type", "GpsdProtocol.pb.h", 11130, "::proto::gpsd::LtlInfoType_IsValid(value)");
}

void sub_101935E5C()
{
  __assert_rtn("-[ALSWirelessAP writeTo:]", "ALSWirelessAP.m", 154, "nil != self->_macID");
}

#error "101935EFC: call analysis failed (funcsize=72)"

#error "101936068: call analysis failed (funcsize=72)"

#error "1019361D4: call analysis failed (funcsize=71)"

#error "101936338: call analysis failed (funcsize=72)"

#error "1019364B4: call analysis failed (funcsize=80)"

void sub_1019365B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  os_log_t v6;
  uint8_t *v7;

  sub_100F5A25C(1.7165e-36, a1, a2);
  sub_100F5A270(v2, v3, v4);
  *(_QWORD *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(_QWORD *)(v5 + 40) = "ledgerName";
  sub_100C3B4DC((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#monitor missing ledger name\", \"LedgerName\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
}

void sub_101936614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  os_log_t v6;
  uint8_t *v7;

  sub_100F5A25C(1.7165e-36, a1, a2);
  sub_100F5A270(v2, v3, v4);
  *(_QWORD *)(v5 + 30) = "assert";
  *(_WORD *)(v5 + 38) = 2081;
  *(_QWORD *)(v5 + 40) = "clientStorageToken";
  sub_100C3B4DC((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#monitor client doesn't have the storage token\", \"clientKey\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
}

#error "1019366F0: call analysis failed (funcsize=72)"

#error "101936858: call analysis failed (funcsize=73)"

#error "1019369C8: call analysis failed (funcsize=73)"

#error "101936B38: call analysis failed (funcsize=73)"

#error "101936CA8: call analysis failed (funcsize=72)"

void sub_101936D94(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(char *)(a1 + 223) < 0)
    operator delete(*(void **)(a1 + 200));
  if (*(char *)(a1 + 199) < 0)
    operator delete(*(void **)(a1 + 176));
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
}

void sub_101936DFC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102196E90);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102196E90);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Autopause/CLAutopauseProvider.mm", 20, "-[CLAutopauseProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102196E90);
  }
}

void sub_101936F84()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102196FB8);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102196FB8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102196FB8);
  }
}

#error "101937174: call analysis failed (funcsize=75)"

#error "1019372DC: call analysis failed (funcsize=71)"

#error "101937444: call analysis failed (funcsize=71)"

#error "1019375AC: call analysis failed (funcsize=71)"

#error "101937714: call analysis failed (funcsize=71)"

#error "10193787C: call analysis failed (funcsize=71)"

#error "1019379E4: call analysis failed (funcsize=71)"

#error "101937B4C: call analysis failed (funcsize=70)"

#error "101937CAC: call analysis failed (funcsize=71)"

#error "101937E14: call analysis failed (funcsize=71)"

#error "101937F7C: call analysis failed (funcsize=70)"

#error "1019380DC: call analysis failed (funcsize=71)"

void sub_1019381D0(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0020, &stru_102197858);
  v1 = qword_1022A0028;
  if (sub_100290880())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
  }
  v2 = qword_1022A0028;
  if (sub_100343324())
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
  }
  v3 = qword_1022A0028;
  if (sub_10029088C())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

#error "1019383EC: call analysis failed (funcsize=71)"

#error "101938554: call analysis failed (funcsize=71)"

void sub_101938648()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197BF0);
  v0 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"No root directory set for tile type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197BF0);
  }
  v1 = qword_1022A0048;
  if (os_signpost_enabled((os_log_t)qword_1022A0048))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "No root directory set for tile type", "{\"msg%{public}.0s\":\"No root directory set for tile type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197BF0);
  }
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"No root directory set for tile type\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_10193880C()
{
  operator delete((void *)qword_10230B3A8);
}

void sub_101938818()
{
  operator delete((void *)qword_10230B358);
}

void sub_101938824()
{
  operator delete((void *)qword_10230B308);
}

void sub_101938830()
{
  operator delete((void *)qword_10230B2B8);
}

void sub_10193883C()
{
  operator delete((void *)qword_10230B268);
}

void sub_101938848()
{
  operator delete((void *)qword_10230B218);
}

void sub_101938854()
{
  operator delete((void *)qword_10230B1C8);
}

void sub_101938860()
{
  operator delete((void *)qword_10230B178);
}

void sub_10193886C()
{
  operator delete((void *)qword_10230B128);
}

void sub_101938878()
{
  operator delete((void *)qword_10230B0D8);
}

void sub_101938884()
{
  operator delete((void *)qword_10230B088);
}

void sub_101938890()
{
  operator delete((void *)qword_10230B038);
}

void sub_10193889C()
{
  operator delete((void *)qword_10230AFE8);
}

void sub_1019388A8()
{
  operator delete((void *)qword_10230AF98);
}

void sub_1019388B4()
{
  operator delete((void *)qword_10230AF48);
}

void sub_1019388C0()
{
  operator delete((void *)qword_10230AEF8);
}

void sub_1019388CC()
{
  operator delete((void *)qword_10230AEA8);
}

void sub_1019388D8()
{
  operator delete((void *)qword_10230AE58);
}

void sub_1019388E4()
{
  operator delete((void *)qword_10230AE08);
}

void sub_1019388F0()
{
  operator delete((void *)qword_10230ADB8);
}

void sub_1019388FC()
{
  operator delete((void *)qword_10230AD68);
}

void sub_101938908()
{
  operator delete((void *)qword_10230AD18);
}

void sub_101938914()
{
  operator delete((void *)qword_10230ACC8);
}

void sub_101938920()
{
  operator delete((void *)qword_10230AC78);
}

void sub_10193892C()
{
  operator delete((void *)qword_10230AC28);
}

void sub_101938938()
{
  operator delete((void *)qword_10230ABD8);
}

void sub_101938944()
{
  operator delete((void *)qword_10230AB88);
}

void sub_101938950()
{
  operator delete((void *)qword_10230AB38);
}

void sub_10193895C()
{
  operator delete((void *)qword_10230AAE8);
}

void sub_101938968()
{
  operator delete((void *)qword_10230AA98);
}

void sub_101938974()
{
  operator delete((void *)qword_10230AA48);
}

void sub_101938980()
{
  operator delete((void *)qword_10230A9F8);
}

void sub_10193898C()
{
  operator delete((void *)qword_10230A9A8);
}

void sub_101938998()
{
  operator delete((void *)qword_10230A958);
}

void sub_1019389A4()
{
  operator delete((void *)qword_10230A908);
}

void sub_1019389B0()
{
  operator delete((void *)qword_10230A8B8);
}

void sub_1019389BC()
{
  operator delete((void *)qword_10230A868);
}

void sub_1019389C8()
{
  operator delete((void *)qword_10230A818);
}

void sub_1019389D4()
{
  operator delete((void *)qword_10230A7C8);
}

void sub_1019389E0()
{
  operator delete((void *)qword_10230A778);
}

void sub_1019389EC()
{
  operator delete((void *)qword_10230A728);
}

void sub_1019389F8()
{
  operator delete((void *)qword_10230A6D8);
}

void sub_101938A04()
{
  operator delete((void *)qword_10230A688);
}

void sub_101938A10()
{
  operator delete((void *)qword_10230A638);
}

void sub_101938A1C()
{
  operator delete((void *)qword_10230A5E8);
}

void sub_101938A28()
{
  operator delete((void *)qword_10230A598);
}

void sub_101938A34()
{
  operator delete((void *)qword_10230A548);
}

void sub_101938A40()
{
  operator delete((void *)qword_10230A4F8);
}

void sub_101938A4C()
{
  operator delete((void *)qword_10230A4A8);
}

void sub_101938A58()
{
  operator delete((void *)qword_10230A458);
}

void sub_101938A64()
{
  operator delete((void *)qword_10230A408);
}

void sub_101938A70()
{
  operator delete((void *)qword_10230A3B8);
}

void sub_101938A7C()
{
  operator delete((void *)qword_10230A368);
}

void sub_101938A88()
{
  operator delete((void *)qword_10230A318);
}

void sub_101938A94()
{
  operator delete((void *)qword_10230A2C8);
}

void sub_101938AA0()
{
  operator delete((void *)qword_10230A278);
}

void sub_101938AAC()
{
  operator delete((void *)qword_10230A228);
}

void sub_101938AB8()
{
  operator delete((void *)qword_10230A1D8);
}

void sub_101938AC4()
{
  operator delete((void *)qword_10230A188);
}

void sub_101938AD0()
{
  operator delete((void *)qword_10230A138);
}

void sub_101938ADC()
{
  operator delete((void *)qword_10230A0E8);
}

void sub_101938AE8()
{
  operator delete((void *)qword_10230A098);
}

void sub_101938AF4()
{
  operator delete((void *)qword_10230A048);
}

void sub_101938B00()
{
  operator delete((void *)qword_102309FF8);
}

void sub_101938B0C()
{
  operator delete((void *)qword_102309FA8);
}

void sub_101938B18()
{
  operator delete((void *)qword_102309F58);
}

void sub_101938B24()
{
  operator delete((void *)qword_102309F08);
}

void sub_101938B30()
{
  operator delete((void *)qword_102309EB8);
}

void sub_101938B3C()
{
  operator delete((void *)qword_102309E68);
}

void sub_101938B48()
{
  operator delete((void *)qword_102309E18);
}

void sub_101938B54()
{
  operator delete((void *)qword_102309DC8);
}

void sub_101938B60()
{
  operator delete((void *)qword_102309D78);
}

void sub_101938B6C()
{
  operator delete((void *)qword_102309D28);
}

void sub_101938B78()
{
  operator delete((void *)qword_102309CD8);
}

void sub_101938B84()
{
  operator delete((void *)qword_102309C88);
}

void sub_101938B90()
{
  operator delete((void *)qword_102309C38);
}

void sub_101938B9C()
{
  operator delete((void *)qword_102309BE8);
}

void sub_101938BA8()
{
  operator delete((void *)qword_102309B98);
}

void sub_101938BB4()
{
  operator delete((void *)qword_102309B48);
}

void sub_101938BC0()
{
  operator delete((void *)qword_102309AF8);
}

void sub_101938BCC()
{
  operator delete((void *)qword_102309AA8);
}

void sub_101938BD8()
{
  operator delete((void *)qword_102309A58);
}

void sub_101938BE4()
{
  operator delete((void *)qword_102309A08);
}

void sub_101938BF0()
{
  operator delete((void *)qword_1023099B8);
}

void sub_101938BFC()
{
  operator delete((void *)qword_102309968);
}

void sub_101938C08()
{
  operator delete((void *)qword_102309918);
}

void sub_101938C14()
{
  operator delete((void *)qword_1023098C8);
}

void sub_101938C20()
{
  operator delete((void *)qword_102309878);
}

void sub_101938C2C()
{
  operator delete((void *)qword_102309828);
}

void sub_101938C38()
{
  operator delete((void *)qword_1023097D8);
}

void sub_101938C44()
{
  operator delete((void *)qword_102309788);
}

void sub_101938C50()
{
  operator delete((void *)qword_102309738);
}

void sub_101938C5C()
{
  operator delete((void *)qword_1023096E8);
}

void sub_101938C68()
{
  operator delete((void *)qword_102309698);
}

void sub_101938C74()
{
  operator delete((void *)qword_102309648);
}

void sub_101938C80()
{
  operator delete((void *)qword_10230B8A8);
}

void sub_101938C8C()
{
  operator delete((void *)qword_10230B858);
}

void sub_101938C98()
{
  operator delete((void *)qword_10230B808);
}

void sub_101938CA4()
{
  operator delete((void *)qword_10230B7B8);
}

void sub_101938CB0()
{
  operator delete((void *)qword_10230B768);
}

void sub_101938CBC()
{
  operator delete((void *)qword_10230B718);
}

void sub_101938CC8()
{
  operator delete((void *)qword_10230B6C8);
}

void sub_101938CD4()
{
  operator delete((void *)qword_10230B678);
}

void sub_101938CE0()
{
  operator delete((void *)qword_10230B628);
}

void sub_101938CEC()
{
  operator delete((void *)qword_10230B5D8);
}

void sub_101938CF8()
{
  operator delete((void *)qword_10230B588);
}

void sub_101938D04()
{
  operator delete((void *)qword_10230B538);
}

void sub_101938D10()
{
  operator delete((void *)qword_10230B4E8);
}

void sub_101938D1C()
{
  operator delete((void *)qword_10230B498);
}

void sub_101938D28()
{
  operator delete((void *)qword_10230B448);
}

void sub_101938D34()
{
  operator delete((void *)qword_10230B3F8[0]);
}

#error "101938DC8: call analysis failed (funcsize=80)"

#error "101938F40: call analysis failed (funcsize=72)"

#error "1019390AC: call analysis failed (funcsize=72)"

#error "101939218: call analysis failed (funcsize=72)"

#error "101939384: call analysis failed (funcsize=72)"

#error "1019394F0: call analysis failed (funcsize=72)"

void sub_1019395E4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102198198);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
  }
  v1 = qword_1022A02D8;
  if (os_signpost_enabled((os_log_t)qword_1022A02D8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102198198);
  }
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "101939828: call analysis failed (funcsize=75)"

#error "10193999C: call analysis failed (funcsize=75)"

#error "101939B10: call analysis failed (funcsize=75)"

#error "101939C84: call analysis failed (funcsize=75)"

void sub_101939D78()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102198550);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWifiScanner.mm", 150, "onWifiNotification");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_102198550);
  }
}

#error "101939FC4: call analysis failed (funcsize=73)"

#error "10193A134: call analysis failed (funcsize=73)"

void sub_10193A22C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A00D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
    }
    v1 = qword_1022A00D8;
    if (os_signpost_enabled((os_log_t)qword_1022A00D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_102199258);
    }
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLGeoMapFeatureAccessGeometry.mm", 46, "initializeMapsAPI");
LABEL_11:
    dispatch_once(&qword_1022A00D0, &stru_102199258);
  }
}

void sub_10193A3F8(_QWORD *a1)
{
  _QWORD *v2;

  do
  {
    v2 = (_QWORD *)*a1;
    sub_100261F44((uint64_t)(a1 + 2));
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

void sub_10193A430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_10229FD00 != -1)
    dispatch_once(&qword_10229FD00, &stru_102199A20);
  if (sub_1010178B8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Service required to send command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
  }
  if (sub_1010178DC())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Service required to send command", "{\"msg%{public}.0s\":\"Service required to send command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_10229FD00 != -1)
      dispatch_once(&qword_10229FD00, &stru_102199A20);
  }
  if (sub_1010178CC())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Service required to send command\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_10193A5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_10229FD00 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1010178B8())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
    }
    if (sub_1010178DC())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FD00 != -1)
        dispatch_once(&qword_10229FD00, &stru_102199A20);
    }
    if (sub_1010178CC())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLGestureService.mm", 346, "numberOfSpectatorsChanged");
LABEL_11:
    dispatch_once(&qword_10229FD00, &stru_102199A20);
  }
}

void sub_10193A718()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102199E18);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102199E18);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/SensorCalibration/CLPressureBias.mm", 23, "-[CLPressureBiasAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_102199E18);
  }
}

void sub_10193A8A0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102199F88);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_102199F88);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_102199F88);
  }
}

#error "10193AA90: call analysis failed (funcsize=76)"

#error "10193AC04: call analysis failed (funcsize=73)"

#error "10193AD78: call analysis failed (funcsize=76)"

#error "10193AEF4: call analysis failed (funcsize=75)"

#error "10193B068: call analysis failed (funcsize=75)"

void sub_10193B15C()
{
  __assert_rtn("startAutoStopTimer", "CLMotionCuesVehicleConfidenceBooster.mm", 106, "!fAutoStopTimer.handler");
}

void sub_10193B184()
{
  __assert_rtn("onMotionStateUpdate", "CLMotionCuesVehicleConfidenceBooster.mm", 128, "notification == CLMotionState_Type::kNotificationContext");
}

void sub_10193B1AC()
{
  __assert_rtn("onDisplayStateUpdate", "CLMotionCuesVehicleConfidenceBooster.mm", 134, "notification == CLDaemonStatus_Type::kNotificationDisplay");
}

#error "10193B24C: call analysis failed (funcsize=72)"

#error "10193B3B8: call analysis failed (funcsize=72)"

#error "10193B524: call analysis failed (funcsize=72)"

#error "10193B690: call analysis failed (funcsize=72)"

#error "10193B7FC: call analysis failed (funcsize=72)"

void sub_10193B8F0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219BE50);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219BE50);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/ProxPDPAndALSPhone/CLProxPDPAndALSPhoneNotifier.mm", 13, "-[CLProxPDPAndALSPhoneNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10219BE50);
  }
}

void sub_10193BA78()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10219BFC0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10219BFC0);
  }
}

void sub_10193BBE8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10219C0F8);
  v0 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Got a different mac from database query!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10219C0F8);
  }
  v1 = off_1022A0288;
  if (os_signpost_enabled((os_log_t)off_1022A0288))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Got a different mac from database query!", "{\"msg%{public}.0s\":\"Got a different mac from database query!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10219C0F8);
  }
  v2 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Got a different mac from database query!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_10193BDAC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FF40 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Iterator indices are outside of the buffer range.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10219C118);
    }
    if (os_signpost_enabled((os_log_t)qword_10229FF48))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Iterator indices are outside of the buffer range.", "{\"msg%{public}.0s\":\"Iterator indices are outside of the buffer range.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FF40 != -1)
        dispatch_once(&qword_10229FF40, &stru_10219C118);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Iterator indices are outside of the buffer range.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/IndoorOutdoor/CLIndoorOutdoorGPSModel.mm", 349, "computeScalarDistanceFromFixedQueue");
LABEL_11:
    dispatch_once(&qword_10229FF40, &stru_10219C118);
  }
}

void sub_10193BF2C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"We should have picked at least one of the windows.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219C138);
    }
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "We should have picked at least one of the windows.", "{\"msg%{public}.0s\":\"We should have picked at least one of the windows.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219C138);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"We should have picked at least one of the windows.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/IndoorOutdoor/CLIndoorOutdoorGPSModel.mm", 511, "calculateDirectionResiduals");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_10219C138);
  }
}

void sub_10193C0AC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FD10 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
    }
    v1 = qword_10229FD18;
    if (os_signpost_enabled((os_log_t)qword_10229FD18))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLMagicMountInterface] Service required", "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FD10 != -1)
        dispatch_once(&qword_10229FD10, &stru_10219C620);
    }
    v2 = qword_10229FD18;
    if (os_log_type_enabled((os_log_t)qword_10229FD18, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLMagicMountInterface] Service required\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/MagicMount/CLSPUMagicMountInterface.mm", 29, "sendCommand");
LABEL_11:
    dispatch_once(&qword_10229FD10, &stru_10219C620);
  }
}

#error "10193C2F0: call analysis failed (funcsize=72)"

#error "10193C45C: call analysis failed (funcsize=72)"

#error "10193C5C8: call analysis failed (funcsize=72)"

#error "10193C734: call analysis failed (funcsize=72)"

#error "10193C8A0: call analysis failed (funcsize=72)"

void sub_10193C994()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10219D928);
  v0 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219D928);
  }
  v1 = qword_1022A02D8;
  if (os_signpost_enabled((os_log_t)qword_1022A02D8))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10219D928);
  }
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "10193CBE0: call analysis failed (funcsize=80)"

#error "10193CD58: call analysis failed (funcsize=72)"

#error "10193CEC4: call analysis failed (funcsize=72)"

#error "10193D030: call analysis failed (funcsize=72)"

#error "10193D19C: call analysis failed (funcsize=72)"

#error "10193D308: call analysis failed (funcsize=72)"

void sub_10193D3FC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004F6CF4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
    }
    if (sub_1004F6D18())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#proactive Could not release power assertion.", "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
    }
    if (sub_1004F6D08())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Policies/Proactive/CLPolicyProactive.mm", 232, "proactiveHarvesting");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_10219DE40);
  }
}

void sub_10193D570()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004F6CF4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
    }
    if (sub_1004F6D18())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "#proactive Could not release power assertion.", "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
    }
    if (sub_1004F6D08())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"#proactive Could not release power assertion.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Policies/Proactive/CLPolicyProactive.mm", 131, "extendProactiveAttempt");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_10219DE40);
  }
}

void sub_10193D6E4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100427E1C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DFE0);
    }
    if (sub_100427E40())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "[FastPathDevice] initializeFastPath should be running on motion thread", "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10219DFE0);
    }
    if (sub_100427E30())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidFastPathDevice.mm", 24, "initializeFastPath");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_10219DFE0);
  }
}

void sub_10193D850()
{
  __assert_rtn("operator()", "cnmatrix.h", 992, "strcmp(c, \":\") == 0");
}

void sub_10193D878()
{
  __assert_rtn("AllocateMemoryBacking", "cnmatrix.h", 284, "this->allocated_data_");
}

void sub_10193D8A0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219E9F0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/RayTracingTileManager/CLRayTracingTileManager.mm", 32, "-[CLRayTracingTileManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10219E9F0);
  }
}

_QWORD *sub_10193DA20(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)result[3];
  if (v1 == result)
  {
    v2 = 4;
  }
  else
  {
    if (!v1)
      return result;
    v2 = 5;
    result = (_QWORD *)result[3];
  }
  return (_QWORD *)sub_1010AB898(result, v2);
}

_QWORD *sub_10193DA54(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)result[3];
  if (v1 == result)
  {
    v2 = 4;
  }
  else
  {
    if (!v1)
      return result;
    v2 = 5;
    result = (_QWORD *)result[3];
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v2))();
}

void sub_10193DA84()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F290);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F290);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Vehicle/CLVehicleConnectionNotifier.mm", 240, "-[CLVehicleConnectionNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10219F290);
  }
}

void sub_10193DC0C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10219F430);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10219F430);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10219F430);
  }
}

void sub_10193DD7C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F660);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F660);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/MotionSync/CLMotionSyncStore.mm", 28, "-[CLMotionSyncStoreAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10219F660);
  }
}

void sub_10193DEFC(void *a1, _QWORD *a2)
{
  id v3;
  NSObject *v4;
  int v5;
  id v6;

  v3 = objc_begin_catch(a1);
  *a2 = v3;
  if (qword_10229FDC0 != -1)
    dispatch_once(&qword_10229FDC0, &stru_10219F6A0);
  v4 = qword_10229FDC8;
  if (os_log_type_enabled((os_log_t)qword_10229FDC8, OS_LOG_TYPE_FAULT))
  {
    v5 = 138543362;
    v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unable to decode pedometer data: %{public}@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10193DFCC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F928);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219F928);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Awareness/CLLocationAwarenessProvider.mm", 16, "-[CLLocationAwarenessProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10219F928);
  }
}

void sub_10193E198()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219FD78);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10219FD78);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/FitnessMachine/CLFitnessMachineNotifier.mm", 24, "-[CLFitnessMachineNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_10219FD78);
  }
}

void sub_10193E320()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10219FEC8);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_10219FEC8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_10219FEC8);
  }
}

void sub_10193E490()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021A0000);
  v0 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
  }
  if (os_signpost_enabled((os_log_t)qword_1022A0208))
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "trying to make neighbor out of non-neighbor cell", "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021A0000);
  }
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trying to make neighbor out of non-neighbor cell\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

void sub_10193E63C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021A0260);
  if (sub_100903220())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#luHistorical routine monitor should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A0260);
  }
  if (sub_100903244())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "#luHistorical routine monitor should not be empty", "{\"msg%{public}.0s\":\"#luHistorical routine monitor should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A0260);
  }
  if (sub_100903234())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#luHistorical routine monitor should not be empty\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
  }
}

void sub_10193E7AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for wilderness entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A0260);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "#luHistorical entitlementDict for wilderness entitlement should not be nil", "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for wilderness entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A0260);
    }
    if (sub_100903234())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for wilderness entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemonLocationUpdaterHistorical.mm", 324, "rehydrationPayload");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021A0260);
  }
}

void sub_10193E924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100903220())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for transcriptSession entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A0260);
    }
    if (sub_100903244())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "#luHistorical entitlementDict for transcriptSession entitlement should not be nil", "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for transcriptSession entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A0260);
    }
    if (sub_100903234())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"#luHistorical entitlementDict for transcriptSession entitlement should not be nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemonLocationUpdaterHistorical.mm", 325, "rehydrationPayload");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021A0260);
  }
}

#error "10193EB24: call analysis failed (funcsize=80)"

#error "10193EC9C: call analysis failed (funcsize=72)"

#error "10193EE08: call analysis failed (funcsize=72)"

#error "10193EF74: call analysis failed (funcsize=72)"

#error "10193F0E0: call analysis failed (funcsize=72)"

#error "10193F24C: call analysis failed (funcsize=72)"

void sub_10193F340()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#dic fConnection should not be nil when checking entitlements\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    }
    v1 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic fConnection should not be nil when checking entitlements", "{\"msg%{public}.0s\":\"#dic fConnection should not be nil when checking entitlements\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
    }
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#dic fConnection should not be nil when checking entitlements\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/DaemonIdentifiableClients/CLDaemonIdentifiableClient.mm", 363, "isEntitled");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021A1E60);
  }
}

void sub_10193F50C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2270);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A2270);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLPencilState.mm", 35, "-[CLPencilStateAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021A2270);
  }
}

void sub_10193F694()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021A2400);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021A2400);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_1021A2400);
  }
}

void sub_10193F804()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A00D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLMMLE,LaneEstimator,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    }
    v1 = qword_1022A00D8;
    if (os_signpost_enabled((os_log_t)qword_1022A00D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLMMLE,LaneEstimator,Assertion failed", "{\"msg%{public}.0s\":\"CLMMLE,LaneEstimator,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021A2610);
    }
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLMMLE,LaneEstimator,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLMapMatchingEngine.mm", 45, "setEnableLaneEstimation");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00D0, &stru_1021A2610);
  }
}

#error "10193FA48: call analysis failed (funcsize=65)"

#error "10193FB8C: call analysis failed (funcsize=65)"

#error "10193FCD0: call analysis failed (funcsize=65)"

#error "10193FE14: call analysis failed (funcsize=65)"

#error "10193FF58: call analysis failed (funcsize=65)"

#error "10194009C: call analysis failed (funcsize=65)"

#error "1019401E0: call analysis failed (funcsize=65)"

void sub_1019402B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_101137880();
  if (!v27)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  if (sub_1008B9EF8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"mismatch of mac addresses\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 80) != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
  }
  if (sub_1008B9F1C())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "mismatch of mac addresses", "{\"msg%{public}.0s\":\"mismatch of mac addresses\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 80) != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
  }
  if (sub_1008B9F0C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"mismatch of mac addresses\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_1019403FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_101137880();
  if (!v27)
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
  if (sub_1008B9EF8())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"size of batched locations and scan buffer groups must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 80) != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
  }
  if (sub_1008B9F1C())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "size of batched locations and scan buffer groups must be equal", "{\"msg%{public}.0s\":\"size of batched locations and scan buffer groups must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 80) != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
  }
  if (sub_1008B9F0C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"size of batched locations and scan buffer groups must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "1019405B8: call analysis failed (funcsize=71)"

void sub_1019406A8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100427E1C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of aggregateRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    }
    if (sub_100427E40())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Need to override getTableName in order to use default definition of aggregateRecords", "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of aggregateRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    }
    if (sub_100427E30())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of aggregateRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm", 191, "aggregateRecords");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_1021A26E0);
  }
}

void sub_10194081C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100427E1C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of getNumberOfRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    }
    if (sub_100427E40())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Need to override getTableName in order to use default definition of getNumberOfRecords", "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of getNumberOfRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    }
    if (sub_100427E30())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of getNumberOfRecords\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm", 217, "getNumberOfRecords");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_1021A26E0);
  }
}

void sub_101940990()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100427E1C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of deleteAllRecordsUL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    }
    if (sub_100427E40())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Need to override getTableName in order to use default definition of deleteAllRecordsUL", "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of deleteAllRecordsUL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    }
    if (sub_100427E30())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Need to override getTableName in order to use default definition of deleteAllRecordsUL\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Activity/CLActivityRecorderBaseDb.mm", 239, "deleteAllRecordsUL");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_1021A26E0);
  }
}

void sub_101940B04(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 168) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 136) = v6;
    operator delete(v6);
  }
}

#error "101940BCC: call analysis failed (funcsize=76)"

#error "101940D3C: call analysis failed (funcsize=72)"

#error "101940EA4: call analysis failed (funcsize=73)"

#error "101941014: call analysis failed (funcsize=73)"

#error "101941184: call analysis failed (funcsize=73)"

void sub_10194127C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_100B566B4();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"_CFBundleCreateUnique returned a nil result\", \"url\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_100B566B4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "_CFBundleCreateUnique returned a nil result", "{\"msg%{public}.0s\":\"_CFBundleCreateUnique returned a nil result\", \"url\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    }
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_100B566B4();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"_CFBundleCreateUnique returned a nil result\", \"url\":%{public, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/AppMonitor/CLAppMonitor.mm", 1480, "bundleFromBundleId");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  }
}

#error "1019414D4: call analysis failed (funcsize=80)"

#error "10194164C: call analysis failed (funcsize=72)"

#error "1019417B8: call analysis failed (funcsize=72)"

#error "101941924: call analysis failed (funcsize=72)"

#error "101941A90: call analysis failed (funcsize=72)"

#error "101941BFC: call analysis failed (funcsize=72)"

void sub_101941CF0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A3410);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A3410);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/MotionState/CLMotionStateObserver.mm", 33, "-[CLMotionStateObserverAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021A3410);
  }
}

void sub_101941E78()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"This callback should only be invoked once\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A3578);
    }
    v1 = qword_1022A0058;
    if (os_signpost_enabled((os_log_t)qword_1022A0058))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "This callback should only be invoked once", "{\"msg%{public}.0s\":\"This callback should only be invoked once\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A3578);
    }
    v2 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"This callback should only be invoked once\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiTileDataRepository.mm", 95, "operator()");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_1021A3578);
  }
}

void sub_10194204C(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  _BOOL4 v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  _BOOL4 v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;

  v2 = (uint64_t)&qword_1022A0000;
  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    v3 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      sub_1011681A0();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Can't swap status bar assertions when both sides have values\", \"newValue\":%{public}hhd, \"oldValue\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (*(_QWORD *)(v2 + 448) != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    }
    v4 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      sub_1011681A0();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Can't swap status bar assertions when both sides have values", "{\"msg%{public}.0s\":\"Can't swap status bar assertions when both sides have values\", \"newValue\":%{public}hhd, \"oldValue\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (*(_QWORD *)(v2 + 448) != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    }
    v5 = qword_1022A01C8;
    v2 = 1;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      v6 = *a1 != 0;
      *(_DWORD *)buf = 68290051;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = 1;
      v13 = 1026;
      v14 = v6;
      v15 = 2082;
      v16 = "assert";
      v17 = 2081;
      v18 = "(!!value) != (!!fVisibilityAssertion)";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Can't swap status bar assertions when both sides have values\", \"newValue\":%{public}hhd, \"oldValue\":%{public}hhd, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLLocationSubscription.mm", 1004, "swapVisibilityAssertion");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  }
}

void sub_101942274()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01C0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"swapVisibilityAssertion should return nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    }
    v1 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "swapVisibilityAssertion should return nil, here", "{\"msg%{public}.0s\":\"swapVisibilityAssertion should return nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    }
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"swapVisibilityAssertion should return nil, here\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/Subscriptions/CLLocationSubscription.mm", 1158, "updateVisibilityAssertion");
LABEL_11:
    dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
  }
}

#error "1019424C0: call analysis failed (funcsize=75)"

#error "101942628: call analysis failed (funcsize=71)"

#error "101942798: call analysis failed (funcsize=76)"

#error "101942908: call analysis failed (funcsize=72)"

#error "101942A74: call analysis failed (funcsize=72)"

void sub_101942B6C()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  if (sub_1004966FC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  }
  if (sub_100496720())
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  }
  v2 = *(NSObject **)(v1 + 728);
  if (sub_10029088C())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

#error "101942D84: call analysis failed (funcsize=71)"

#error "101942EEC: call analysis failed (funcsize=71)"

#error "101943054: call analysis failed (funcsize=71)"

#error "1019431BC: call analysis failed (funcsize=71)"

#error "101943324: call analysis failed (funcsize=71)"

#error "10194348C: call analysis failed (funcsize=71)"

#error "101943600: call analysis failed (funcsize=79)"

void sub_101943708()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[56];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A4908);
  v0 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    sub_1011927EC();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempting to assert invalid tile type.\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x2Cu);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A4908);
  }
  v1 = qword_1022A0048;
  if (os_signpost_enabled((os_log_t)qword_1022A0048))
  {
    sub_1011927EC();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempting to assert invalid tile type.", "{\"msg%{public}.0s\":\"Attempting to assert invalid tile type.\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x2Cu);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A4908);
  }
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    sub_1011927EC();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Attempting to assert invalid tile type.\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x2Cu);
  }
}

#error "1019439F8: call analysis failed (funcsize=76)"

#error "101943B70: call analysis failed (funcsize=76)"

#error "101943CF0: call analysis failed (funcsize=78)"

void sub_101943D3C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_101195B28();
  if (!v1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3360) != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Device motion service 3 is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3360) != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Device motion service 3 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_101943E9C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_101195B28();
  if (!v1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3360) != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Device motion service 6 is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3360) != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_101943FFC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_101195B28();
  if (!v1)
    dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3360) != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Device motion service is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3360) != -1)
      dispatch_once(&qword_10229FD20, &stru_1021A49C0);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_10194415C(_QWORD *a1)
{
  do
  {
    if (*((char *)a1 - 1) < 0)
      operator delete((void *)*(a1 - 3));
    a1 -= 3;
  }
  while (a1 != qword_10230D2A8);
}

#error "1019442D0: call analysis failed (funcsize=78)"

void sub_10194431C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1005CA060();
  if (!v27)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  if (sub_1004966FC())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
  if (sub_100496720())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
  if (sub_100496710())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101944584: call analysis failed (funcsize=74)"

uint64_t sub_1019445D8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result)
    return sub_100C21B98(result);
  return result;
}

#error "101944714: call analysis failed (funcsize=74)"

#error "10194489C: call analysis failed (funcsize=79)"

void sub_1019448F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_10029A040();
  a23 = v25;
  a24 = v26;
  sub_1005CA060();
  if (!v27)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  if (sub_1004966FC())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v28, v29, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
  if (sub_100496720())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v30, v31, v32, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(_QWORD *)(v24 + 720) != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
  if (sub_100496710())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v33, v34, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101944B58: call analysis failed (funcsize=74)"

void sub_101944BAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_10029A040();
  a23 = v24;
  a24 = v25;
  if ((v26 & 1) == 0)
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v27, v28, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v29, v30, v31, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

#error "101944E28: call analysis failed (funcsize=74)"

#error "101944F9C: call analysis failed (funcsize=74)"

void sub_101944FF0(void *a1, uint64_t a2, uint64_t *a3)
{
  NSObject *v4;
  uint64_t *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t *v10;

  __cxa_begin_catch(a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021A5428);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a3 + 23) >= 0)
      v5 = a3;
    else
      v5 = (uint64_t *)*a3;
    v6[0] = 68289283;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2081;
    v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"invalid wifi #tile encountered. now deleting.\", \"filepath\":%{private, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
}

#error "101945208: call analysis failed (funcsize=74)"

void sub_10194525C()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5708);
    }
    if (sub_100496720())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5708);
    }
    if (sub_100496710())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Logging/CLBinaryLog.mm", 192, "close");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021A5708);
  }
}

void sub_1019453C8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5708);
    }
    if (sub_100496720())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "CSI assertion failed", "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5708);
    }
    if (sub_100496710())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"CSI assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Logging/CLBinaryLog.mm", 182, "open");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021A5708);
  }
}

void sub_101945534()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Calorimetry/CLNatalimetryNotifier.mm", 77, "-[CLNatalimetryNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021A5F48);
  }
}

void sub_1019456B4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD50 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"AOP/SPU gyro bias not available on this platform\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "AOP/SPU gyro bias not available on this platform", "{\"msg%{public}.0s\":\"AOP/SPU gyro bias not available on this platform\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"AOP/SPU gyro bias not available on this platform\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLGyroBiasEstimator.mm", 336, "prepareSPUGyroBiasAndVarianceDispatcher");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FD50, &stru_1021A7678);
  }
}

_QWORD *sub_101945840(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;

  if ((_QWORD *)*result == a2)
  {
    v2 = 4;
  }
  else
  {
    if (!*result)
      return result;
    v2 = 5;
    a2 = (_QWORD *)*result;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*a2 + 8 * v2))(a2);
}

void sub_101945880()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A7C70);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A7C70);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLRunningBufferStats.h", 169, "getMax");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021A7C70);
  }
}

void sub_1019459F4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004966FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A7C70);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A7C70);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLRunningBufferStats.h", 175, "getMin");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021A7C70);
  }
}

void sub_101945B68()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FC80 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    }
    v1 = qword_10229FC88;
    if (os_signpost_enabled((os_log_t)qword_10229FC88))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLSPUHIDDriverInterface calls must be made on motion thread", "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_1021A7C90);
    }
    v2 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLSPUHIDDriverInterface calls must be made on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLSPUHIDDriverInterface.mm", 185, "assertOnMotionThread");
LABEL_11:
    dispatch_once(&qword_10229FC80, &stru_1021A7C90);
  }
}

#error "101945DAC: call analysis failed (funcsize=71)"

#error "101945F10: call analysis failed (funcsize=71)"

#error "101946074: call analysis failed (funcsize=71)"

#error "1019461D8: call analysis failed (funcsize=71)"

#error "10194633C: call analysis failed (funcsize=72)"

#error "1019464A8: call analysis failed (funcsize=72)"

#error "101946614: call analysis failed (funcsize=72)"

#error "101946780: call analysis failed (funcsize=72)"

#error "1019468EC: call analysis failed (funcsize=72)"

void sub_1019469E0()
{
  __assert_rtn("set_confidence", "CLPOutdoorEstimatorLogEntry.pb.h", 2250, "::CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorConfidence_IsValid(value)");
}

void sub_101946A08()
{
  __assert_rtn("set_type", "CLPOutdoorEstimatorLogEntry.pb.h", 2227, "::CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorType_IsValid(value)");
}

void sub_101946A30()
{
  __assert_rtn("set_type", "CLPOutdoorEstimatorLogEntry.pb.h", 2363, "::CLP::LogEntry::OutdoorEstimator::SignalEnvironment_SignalEnvironmentType_IsValid(value)");
}

void sub_101946A58()
{
  __assert_rtn("set_meas_source", "CLPOutdoorEstimatorLogEntry.pb.h", 2455, "::CLP::LogEntry::OutdoorEstimator::GnssAvailabilityPredictorData_MeasurementSource_IsValid(value)");
}

void sub_101946A80()
{
  __assert_rtn("set_state", "CLPOutdoorEstimatorLogEntry.pb.h", 2432, "::CLP::LogEntry::OutdoorEstimator::GnssAvailabilityPredictorData_PredictionType_IsValid(value)");
}

void sub_101946AA8()
{
  __assert_rtn("set_motion_type", "CLPOutdoorEstimatorLogEntry.pb.h", 3031, "::CLP::LogEntry::OutdoorEstimator::MotionActivityType_MotionType_IsValid(value)");
}

#error "101946B48: call analysis failed (funcsize=74)"

#error "101946CBC: call analysis failed (funcsize=73)"

#error "101946E2C: call analysis failed (funcsize=74)"

#error "101946FA0: call analysis failed (funcsize=73)"

#error "101947110: call analysis failed (funcsize=73)"

#error "101947280: call analysis failed (funcsize=73)"

#error "1019473F0: call analysis failed (funcsize=73)"

void sub_1019474E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021A9268);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021A9268);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_101947670()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SubArchiving not enabled. Inactive sub-archives cannot be determined.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A93A0);
    }
    v1 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SubArchiving not enabled. Inactive sub-archives cannot be determined.", "{\"msg%{public}.0s\":\"#SubArchiving not enabled. Inactive sub-archives cannot be determined.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021A93A0);
    }
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SubArchiving not enabled. Inactive sub-archives cannot be determined.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHRequestStore.m", 582, "-[CLHRequestArchive inactiveSubArchives]");
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_1021A93A0);
  }
}

uint64_t sub_10194783C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  *a1 = 0;
  if (v4)
    sub_100C21B98(v4);
  result = *a2;
  *a2 = 0;
  if (result)
    return sub_100C21B98(result);
  return result;
}

void sub_10194787C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9838);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A9838);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLAppTileDataProvider.mm", 224, "-[CLAppTileDataProvider fetchAppsForAreaAtLatitude:longitude:radius:includeRegionalApps:marqueeAppsOnly:withReply:]");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021A9838);
  }
}

void sub_101947A48()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A9968);
    }
    v1 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLAccessoryNotifier] getConfig should be running on motion thread", "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A9968);
    }
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLAccessoryNotifier] getConfig should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/Notifiers/CLAccessoryNotifier.mm", 313, "getConfig");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_1021A9968);
  }
}

void sub_101947C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101233240("onTraversingSection", "CLKeyLatLonTileTemplate.h", a3, "offsetEntries + numOfEntries <= entriesHeader.numOfEntries");
}

void sub_101947C38()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A0020 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
    {
      sub_1012457D4();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Invalid TileType value.\", \"tileType\":%{private}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AA438);
    }
    v1 = qword_1022A0028;
    if (os_signpost_enabled((os_log_t)qword_1022A0028))
    {
      sub_1012457D4();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid TileType value.", "{\"msg%{public}.0s\":\"Invalid TileType value.\", \"tileType\":%{private}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021AA438);
    }
    v2 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      sub_1012457D4();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Invalid TileType value.\", \"tileType\":%{private}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTilesSet.mm", 121, "getTilesSet");
LABEL_11:
    dispatch_once(&qword_1022A0020, &stru_1021AA438);
  }
}

void sub_101947E08()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/SensorRecorder/CLSensorRecorderNotifier.mm", 55, "-[CLSensorRecorderNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021AA7D8);
  }
}

void sub_101947F90()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021AA998);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021AA998);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_1021AA998);
  }
}

void sub_101948100()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AAB90);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/BTLEBeaconProvider/CLBTLEBeaconProviderMock.mm", 17, "-[CLBTLEBeaconProviderMockAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021AAB90);
  }
}

void sub_101948280(_QWORD *a1)
{
  _QWORD *v2;

  do
  {
    v2 = (_QWORD *)*a1;
    sub_1007A1C58((uint64_t)(a1 + 2));
    sub_1012551CC();
    a1 = v2;
  }
  while (v2);
  sub_10085FBCC();
}

void sub_1019482B0(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_101256420();
  if (!v3)
    dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "GPSODOM, windowSize is nonpositive", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 40;
  sub_100299FDC();
}

void sub_101948420(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6[40];

  sub_101256420();
  if (!v3)
    dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  if (sub_10085FBF4())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  }
  if (sub_10085FC4C())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v4, v5, "GPSODOM, windowSize is larger than the max", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
    sub_101256420();
    if (!v3)
      dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  }
  if (sub_10085FC08())
  {
    sub_100299ED8();
    sub_1002908CC((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6);
  }
  *a1 = 41;
  sub_100299FDC();
}

void sub_101948590()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t v3[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v0, v1, v2, "GPSODOM, windowSize is larger than the max", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is larger than the max\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Odometry/CLGpsOdometrySubsampler.mm", 179, "changeWindowSize");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  }
}

void sub_10194871C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint8_t v3[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v0, v1, v2, "GPSODOM, windowSize is nonpositive", "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AAD20);
    }
    if (sub_10085FBBC())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GPSODOM, windowSize is nonpositive\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/Odometry/CLGpsOdometrySubsampler.mm", 180, "changeWindowSize");
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021AAD20);
  }
}

void sub_1019488A8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AB008);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AB008);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLBTLEFenceManager.mm", 18, "-[CLBTLEFenceManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021AB008);
  }
}

#error "101948AF4: call analysis failed (funcsize=75)"

#error "101948C68: call analysis failed (funcsize=76)"

#error "101948DE4: call analysis failed (funcsize=75)"

#error "101948F60: call analysis failed (funcsize=80)"

#error "1019490D8: call analysis failed (funcsize=72)"

#error "101949244: call analysis failed (funcsize=72)"

#error "1019493B0: call analysis failed (funcsize=72)"

#error "10194951C: call analysis failed (funcsize=72)"

#error "101949688: call analysis failed (funcsize=72)"

void sub_10194977C(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18[40];

  sub_101279608();
  if (!v3)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  if (sub_1012795F4())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Just cofirming definitionMask on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v18[0]);
    sub_101279608();
    if (!v3)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  }
  if (sub_101279624())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v10, v11, "Just cofirming definitionMask on fault", "{\"msg%{public}.0s\":\"Just cofirming definitionMask on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v18);
    sub_101279608();
    if (!v3)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  }
  if (sub_101279614())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Just cofirming definitionMask on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18[0]);
  }
  *a1 = 266;
  sub_100299FDC();
}

void sub_1019498D4(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18[40];

  sub_101279608();
  if (!v3)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  if (sub_1012795F4())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Just cofirming minor on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v18[0]);
    sub_101279608();
    if (!v3)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  }
  if (sub_101279624())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v10, v11, "Just cofirming minor on fault", "{\"msg%{public}.0s\":\"Just cofirming minor on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v18);
    sub_101279608();
    if (!v3)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  }
  if (sub_101279614())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Just cofirming minor on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18[0]);
  }
  *a1 = 265;
  sub_100299FDC();
}

void sub_101949A2C(_DWORD *a1)
{
  NSObject *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t v18[40];

  sub_101279608();
  if (!v3)
    dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  if (sub_1012795F4())
  {
    sub_100299ED8();
    sub_1002B4564((void *)&_mh_execute_header, v4, v5, "{\"msg%{public}.0s\":\"Just cofirming major on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v6, v7, v8, v9, v18[0]);
    sub_101279608();
    if (!v3)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  }
  if (sub_101279624())
  {
    sub_100299ED8();
    sub_100299E88((void *)&_mh_execute_header, v1, v10, v11, "Just cofirming major on fault", "{\"msg%{public}.0s\":\"Just cofirming major on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v18);
    sub_101279608();
    if (!v3)
      dispatch_once(&qword_1022A0030, &stru_1021ABCC8);
  }
  if (sub_101279614())
  {
    sub_100299ED8();
    sub_1002B4578((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Just cofirming major on fault\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18[0]);
  }
  *a1 = 264;
  sub_100299FDC();
}

void sub_101949B84()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004F6CF4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"HTTP header val must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021ABD30);
    }
    if (sub_1004F6D18())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "HTTP header val must be string", "{\"msg%{public}.0s\":\"HTTP header val must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021ABD30);
    }
    if (sub_1004F6D08())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"HTTP header val must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHNetworkController.m", 77, "-[CLHUploadRequest URLRequest]_block_invoke");
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_1021ABD30);
  }
}

void sub_101949CF0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004F6CF4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"HTTP header key must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021ABD30);
    }
    if (sub_1004F6D18())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "HTTP header key must be string", "{\"msg%{public}.0s\":\"HTTP header key must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021ABD30);
    }
    if (sub_1004F6D08())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"HTTP header key must be string\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHNetworkController.m", 76, "-[CLHUploadRequest URLRequest]_block_invoke");
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_1021ABD30);
  }
}

void sub_101949E5C(void **a1, uint64_t a2, void **a3, uint64_t a4)
{
  void *v7;
  void *v8;

  v7 = *a1;
  if (v7)
  {
    *(_QWORD *)(a4 + 216) = v7;
    operator delete(v7);
  }
  sub_100261F44(a2);
  v8 = *a3;
  if (*a3)
  {
    *(_QWORD *)(a4 + 96) = v8;
    operator delete(v8);
  }
}

void sub_101949EBC(_QWORD *a1)
{
  _QWORD *v2;

  do
  {
    v2 = (_QWORD *)*a1;
    sub_100261F44((uint64_t)(a1 + 4));
    operator delete(a1);
    a1 = v2;
  }
  while (v2);
}

void sub_101949EF4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
  v0 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"expecting results to correspond one-to-one with input\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
  }
  v1 = qword_1022A0058;
  if (os_signpost_enabled((os_log_t)qword_1022A0058))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "expecting results to correspond one-to-one with input", "{\"msg%{public}.0s\":\"expecting results to correspond one-to-one with input\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021ABEA0);
  }
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"expecting results to correspond one-to-one with input\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_10194A0B8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0030 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1012A113C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"If zone specified minor, the entry minor must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABF80);
    }
    if (sub_1012A1160())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "If zone specified minor, the entry minor must be equal", "{\"msg%{public}.0s\":\"If zone specified minor, the entry minor must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABF80);
    }
    if (sub_1012A1150())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"If zone specified minor, the entry minor must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWPBridge.mm", 458, "-[CLWPBridge _didTransitionZoneWithData:trueMajor:trueMinor:state:]_block_invoke");
LABEL_11:
    dispatch_once(&qword_1022A0030, &stru_1021ABF80);
  }
}

void sub_10194A224()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0030 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1012A113C())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"If zone specified major, the entry major must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABF80);
    }
    if (sub_1012A1160())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "If zone specified major, the entry major must be equal", "{\"msg%{public}.0s\":\"If zone specified major, the entry major must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ABF80);
    }
    if (sub_1012A1150())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"If zone specified major, the entry major must be equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Utilities/CLWPBridge.mm", 456, "-[CLWPBridge _didTransitionZoneWithData:trueMajor:trueMinor:state:]_block_invoke");
LABEL_11:
    dispatch_once(&qword_1022A0030, &stru_1021ABF80);
  }
}

void sub_10194A390()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/CLGpsAssistant.mm", 26, "-[CLGpsAssistantAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
  }
}

void sub_10194A518()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021AC318);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021AC318);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_1021AC318);
  }
}

void sub_10194A688(char a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t v22;

  if ((a1 & 1) == 0)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v1, v2, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, v4, v5, v6, v18, v19, v20, v21, v22);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC520);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v7, v8, v9, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v10, v11, v18, v19, v20, v21, v22);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC520);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v12, v13, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v14, v15, v16, v17, v18, v19, v20, v21, v22);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm", 60, "-[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:]");
LABEL_11:
    dispatch_once(&qword_10229FCC0, &stru_1021AC520);
  }
}

void sub_10194A7FC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FCC0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC520);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC520);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm", 97, "-[CMActivityAlarmLocal initWithTrigger:duration:onQueue:forClient:withHandler:]");
LABEL_11:
    dispatch_once(&qword_10229FCC0, &stru_1021AC520);
  }
}

void sub_10194A978()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FCC0 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC520);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FCC0 != -1)
        dispatch_once(&qword_10229FCC0, &stru_1021AC520);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/ActivityAlarm/CMActivityAlarmLocal.mm", 127, "-[CMActivityAlarmLocal initWithTrigger:duration:onRunLoop:withHandler:]");
LABEL_11:
    dispatch_once(&qword_10229FCC0, &stru_1021AC520);
  }
}

#error "10194AB6C: call analysis failed (funcsize=72)"

#error "10194ACD8: call analysis failed (funcsize=72)"

#error "10194AE44: call analysis failed (funcsize=72)"

#error "10194AFB0: call analysis failed (funcsize=72)"

#error "10194B11C: call analysis failed (funcsize=72)"

void sub_10194B210()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACB68);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACB68);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/BTLEBeaconProvider/CLBTLEBeaconProvider.mm", 18, "-[CLBTLEBeaconProviderAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021ACB68);
  }
}

void sub_10194B3DC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACD38);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ACD38);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/DarwinNotifier/CLDarwinNotifier.mm", 56, "-[CLDarwinNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021ACD38);
  }
}

void sub_10194B564()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021ACF00);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_1021ACF00);
  }
}

void sub_10194B6D4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A00D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    }
    v1 = qword_1022A00D8;
    if (os_signpost_enabled((os_log_t)qword_1022A00D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00D0 != -1)
        dispatch_once(&qword_1022A00D0, &stru_1021AD038);
    }
    v2 = qword_1022A00D8;
    if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/MapMatching/CLGeoMapFeatureAccessGeometryPedestrian.mm", 50, "initializeMapsAPI");
LABEL_11:
    dispatch_once(&qword_1022A00D0, &stru_1021AD038);
  }
}

#error "10194B918: call analysis failed (funcsize=74)"

#error "10194BA8C: call analysis failed (funcsize=73)"

#error "10194BBFC: call analysis failed (funcsize=74)"

#error "10194BD70: call analysis failed (funcsize=73)"

#error "10194BEE0: call analysis failed (funcsize=73)"

#error "10194C050: call analysis failed (funcsize=73)"

#error "10194C1C0: call analysis failed (funcsize=73)"

void sub_10194C2B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
  if (sub_10085FBA8())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
  }
  if (sub_10085FBE8())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AD1C8);
  }
  if (sub_10085FBBC())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_10194C440()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLBeaconFenceAuthorizationManager.mm", 19, "-[CLBeaconFenceAuthorizationManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021ADA80);
  }
}

void sub_10194C60C(void (***a1)(uint64_t))
{
  void (**v2)(uint64_t);

  do
  {
    v2 = *a1;
    (*a1[2])((uint64_t)(a1 + 2));
    operator delete(a1);
    a1 = (void (***)(uint64_t))v2;
  }
  while (v2);
}

void sub_10194C64C(_QWORD *a1)
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *NanoRegistryLibrary()"), CFSTR("CLCardioChangeService.mm"), 29, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_10194C6B0()
{
  -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](+[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler"), "handleFailureInFunction:file:lineNumber:description:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getNRPairedDeviceRegistryClass()_block_invoke"), CFSTR("CLCardioChangeService.mm"), 30, CFSTR("Unable to find class %s"), "NRPairedDeviceRegistry");
  __break(1u);
}

void sub_10194C714()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AE398);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AE398);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/Fence/CLBTLERangeManager.mm", 16, "-[CLBTLERangeManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021AE398);
  }
}

void sub_10194C8E0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AEB38);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021AEB38);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Context/CLTurnState.mm", 28, "-[CLTurnStateAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021AEB38);
  }
}

void sub_10194CA68()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021AECA8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_1021AECA8);
  }
}

void sub_10194CBD8()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD50 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100A9C3FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021AED38);
    }
    if (sub_100A9C420())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021AED38);
    }
    if (sub_100A9C410())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.cpp", 47, "nearestSample");
LABEL_11:
    dispatch_once(&qword_10229FD50, &stru_1021AED38);
  }
}

void sub_10194CD44()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD50 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100A9C3FC())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021AED38);
    }
    if (sub_100A9C420())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021AED38);
    }
    if (sub_100A9C410())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.cpp", 198, "windowFit");
LABEL_11:
    dispatch_once(&qword_10229FD50, &stru_1021AED38);
  }
}

#error "10194CF24: call analysis failed (funcsize=70)"

#error "10194D084: call analysis failed (funcsize=70)"

#error "10194D1E4: call analysis failed (funcsize=70)"

#error "10194D344: call analysis failed (funcsize=70)"

#error "10194D4A4: call analysis failed (funcsize=70)"

#error "10194D604: call analysis failed (funcsize=70)"

#error "10194D764: call analysis failed (funcsize=70)"

void sub_10194D850(char a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[40];

  if ((a1 & 1) == 0)
    dispatch_once(&qword_1022A0070, &stru_1021AF638);
  v1 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
  }
  v2 = qword_1022A0078;
  if (os_signpost_enabled((os_log_t)qword_1022A0078))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
  }
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, 0x26u);
  }
}

void sub_10194DA0C()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_10229FE60 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#gfc Failed to stop monitoring before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
    }
    v1 = qword_10229FE68;
    if (os_signpost_enabled((os_log_t)qword_10229FE68))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#gfc Failed to stop monitoring before dealloc", "{\"msg%{public}.0s\":\"#gfc Failed to stop monitoring before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
    }
    v2 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#gfc Failed to stop monitoring before dealloc\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Workout/Prediction/Algorithm/Stop/CLWorkoutGeoFenceController.m", 124, "-[CLWorkoutGeoFenceController dealloc]");
LABEL_11:
    dispatch_once(&qword_10229FE60, &stru_1021AF6F8);
  }
}

void sub_10194DBD8()
{
  __assert_rtn("operator[]", "iterator_range_core.hpp", 389, "at >= 0");
}

void sub_10194DC00()
{
  __assert_rtn("operator[]", "iterator_range_core.hpp", 390, "static_cast<typename base_type::size_type>(at) < size()");
}

#error "10194DCA0: call analysis failed (funcsize=72)"

#error "10194DE0C: call analysis failed (funcsize=72)"

#error "10194DF78: call analysis failed (funcsize=72)"

#error "10194E0E4: call analysis failed (funcsize=72)"

#error "10194E250: call analysis failed (funcsize=72)"

#error "10194E3B8: call analysis failed (funcsize=70)"

#error "10194E518: call analysis failed (funcsize=71)"

#error "10194E680: call analysis failed (funcsize=71)"

#error "10194E7E8: call analysis failed (funcsize=71)"

#error "10194E950: call analysis failed (funcsize=71)"

#error "10194EAB8: call analysis failed (funcsize=71)"

void sub_10194EBAC()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0200 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"missing completion handler\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    }
    v1 = qword_1022A0208;
    if (os_signpost_enabled((os_log_t)qword_1022A0208))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "missing completion handler", "{\"msg%{public}.0s\":\"missing completion handler\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021B0B38);
    }
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"missing completion handler\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Harvester/Collection/CLHLocationClassifier.m", 118, "-[CLHLocationClassifier fetchLocationsOfInterestIfPossibleWithCompletionHandler:]");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0200, &stru_1021B0B38);
  }
}

void sub_10194ED80()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD90 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_101361550())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Wrist State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B0B58);
    }
    if (sub_101361574())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Wrist State History should always be guaranteed to be non-empty.", "{\"msg%{public}.0s\":\"Wrist State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B0B58);
    }
    if (sub_101361564())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Wrist State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallWristState.mm", 44, "updateChargerAndWristState");
LABEL_11:
    dispatch_once(&qword_10229FD90, &stru_1021B0B58);
  }
}

void sub_10194EEEC()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD90 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_101361550())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Lock State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B0B58);
    }
    if (sub_101361574())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Lock State History should always be guaranteed to be non-empty.", "{\"msg%{public}.0s\":\"Lock State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_1021B0B58);
    }
    if (sub_101361564())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Lock State History should always be guaranteed to be non-empty.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Fall/CLFallWristState.mm", 67, "updateLockState");
LABEL_11:
    dispatch_once(&qword_10229FD90, &stru_1021B0B58);
  }
}

void sub_10194F058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_10029A040();
  a23 = v24;
  a24 = v25;
  sub_10136DFC8();
  if (!v26)
    dispatch_once(&qword_1022A0020, &stru_1021B1900);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v27, v28, "{\"msg%{public}.0s\":\"expecting mac to be in intermediate_results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_10136DFC8();
    if (!v26)
      dispatch_once(&qword_1022A0020, &stru_1021B1900);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v29, v30, v31, "expecting mac to be in intermediate_results", "{\"msg%{public}.0s\":\"expecting mac to be in intermediate_results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_10136DFC8();
    if (!v26)
      dispatch_once(&qword_1022A0020, &stru_1021B1900);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"expecting mac to be in intermediate_results\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_10194F1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_10029A040();
  a23 = v24;
  a24 = v25;
  sub_10136DFC8();
  if (!v26)
    dispatch_once(&qword_1022A0020, &stru_1021B1900);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v27, v28, "{\"msg%{public}.0s\":\"input-output lengths are not equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_10136DFC8();
    if (!v26)
      dispatch_once(&qword_1022A0020, &stru_1021B1900);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v29, v30, v31, "input-output lengths are not equal", "{\"msg%{public}.0s\":\"input-output lengths are not equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    sub_10136DFC8();
    if (!v26)
      dispatch_once(&qword_1022A0020, &stru_1021B1900);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"input-output lengths are not equal\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_10194F308()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t v19;

  sub_10136DFD4();
  if (!v1)
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  if (sub_100EF1418())
  {
    sub_100BCBB74();
    sub_100BCBC28((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Invalid tile type\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4, v5, v6, v7, v19);
    sub_10136DFD4();
    if (!v1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  }
  if (sub_100EF1448())
  {
    sub_100BCBB74();
    sub_100BCBBE0((void *)&_mh_execute_header, v8, v9, v10, "Invalid tile type", "{\"msg%{public}.0s\":\"Invalid tile type\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v11, v12, v19);
    sub_10136DFD4();
    if (!v1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  }
  if (sub_100299F70(*(NSObject **)(v0 + 88)))
  {
    sub_100BCBB74();
    sub_100BCBC3C((void *)&_mh_execute_header, v13, v14, "{\"msg%{public}.0s\":\"Invalid tile type\", \"tileType\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v15, v16, v17, v18, v19);
  }
  sub_100BCBC10();
}

void sub_10194F464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_1022A0050 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Fence key vector must have content\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    if (sub_100343324())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Fence key vector must have content", "{\"msg%{public}.0s\":\"Fence key vector must have content\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021B18E0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Fence key vector must have content\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm", 544, "saveAlsAccessPoints");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  }
}

void sub_10194F5F4(void *a1, void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a2 = __cxa_begin_catch(a1);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  if (sub_1002908E4())
  {
    sub_1002908D4();
    sub_1002908B8((void *)&_mh_execute_header, v2, v3, "sqlite error, %{private}s", v4, v5, v6, v7, 3u);
  }
  sub_1002908F0();
}

void sub_10194F6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  sub_10029A040();
  a23 = v24;
  a24 = v25;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  if (sub_100290880())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v26, v27, "{\"msg%{public}.0s\":\"invalid #tile header table connection.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v28, v29, v30, "invalid #tile header table connection.", "{\"msg%{public}.0s\":\"invalid #tile header table connection.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021B18E0);
  }
  if (sub_10029088C())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v31, v32, "{\"msg%{public}.0s\":\"invalid #tile header table connection.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100299FDC();
}

void sub_10194F80C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E00("set_full_sv_time_source", "CLPGnssMeasApi.pb.h", a3, "::CLP::LogEntry::PrivateData::FullSvTimeSource_IsValid(value)");
}

void sub_10194F830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E18("set_multipath_indicator", "CLPGnssMeasApi.pb.h", a3, "::CLP::LogEntry::PrivateData::MultipathIndicator_IsValid(value)");
}

void sub_10194F854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384DF0("set_band", "CLPGnssMeasApi.pb.h", a3, "::CLP::LogEntry::PrivateData::Band_IsValid(value)");
}

void sub_10194F878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E08("set_position_source", "CLPGnssMeasApi.pb.h", a3, "::CLP::LogEntry::PrivateData::SvPositionSource_IsValid(value)");
}

void sub_10194F89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E10("set_change_knowledge", "CLPGnssMeasApi.pb.h", a3, "::CLP::LogEntry::PrivateData::LeapSecondChangeKnowledge_IsValid(value)");
}

void sub_10194F8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E58("set_on_wrist_confidence", "CLPPrivateDataShared.pb.h", a3, "::CLP::LogEntry::PrivateData::WristState_WristStateConfidenceType_IsValid(value)");
}

void sub_10194F8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E50("set_on_wrist_sensor", "CLPPrivateDataShared.pb.h", a3, "::CLP::LogEntry::PrivateData::WristState_WristStateType_IsValid(value)");
}

void sub_10194F908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E48("set_on_wrist", "CLPPrivateDataShared.pb.h", a3, "::CLP::LogEntry::PrivateData::WristState_WristStateType_IsValid(value)");
}

void sub_10194F92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E40("set_wrist_orientation", "CLPPrivateDataShared.pb.h", a3, "::CLP::LogEntry::PrivateData::WatchOrientation_WatchOrientationType_IsValid(value)");
}

void sub_10194F950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E38("set_crown_orientation", "CLPPrivateDataShared.pb.h", a3, "::CLP::LogEntry::PrivateData::WatchOrientation_WatchOrientationType_IsValid(value)");
}

void sub_10194F974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E30("set_branch_type", "CLPPrivateDataShared.pb.h", a3, "::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavannaBranch_BranchType_IsValid(value)");
}

void sub_10194F998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E28("set_tree_type", "CLPPrivateDataShared.pb.h", a3, "::CLP::LogEntry::PrivateData::GEOMapFeatureTropicalSavanna_TreeType_IsValid(value)");
}

void sub_10194F9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384E20("set_gnss_band_support", "CLPRavenLogEntry.pb.h", a3, "::CLP::LogEntry::Raven::RavenPlatformInfo_GnssBandSupport_IsValid(value)");
}

void sub_10194F9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101384DF8("set_product_category", "CLPRavenLogEntry.pb.h", a3, "::CLP::LogEntry::Raven::RavenPlatformInfo_ProductCategory_IsValid(value)");
}

#error "10194FA8C: call analysis failed (funcsize=80)"

#error "10194FC04: call analysis failed (funcsize=72)"

#error "10194FD70: call analysis failed (funcsize=72)"

#error "10194FEDC: call analysis failed (funcsize=72)"

#error "101950048: call analysis failed (funcsize=72)"

#error "1019501B4: call analysis failed (funcsize=72)"

void sub_1019502A8(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
    sub_1006CD618((uint64_t)a1, v1);
}

void sub_1019502C8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_1013AC714();
  if (!v1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  if (sub_1013AC6E4())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3152) != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  }
  if (sub_1013AC708())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3152) != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  }
  if (sub_1013AC6F8())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_101950418()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9[40];

  sub_1013AC714();
  if (!v1)
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  if (sub_1013AC6E4())
  {
    sub_10025CD44();
    sub_10025CD84((void *)&_mh_execute_header, v2, v3, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3152) != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  }
  if (sub_1013AC708())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v4, v5, v6, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
    if (*(_QWORD *)(v0 + 3152) != -1)
      dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  }
  if (sub_1013AC6F8())
  {
    sub_10025CD44();
    sub_10025CD94((void *)&_mh_execute_header, v7, v8, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9);
  }
  sub_100299FDC();
}

void sub_101950568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[40];

  if (qword_10229FC50 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1013AC6E4())
    {
      sub_10025CCFC();
      sub_10025CD84((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    }
    if (sub_1013AC708())
    {
      sub_10025CCFC();
      sub_10025CD28((void *)&_mh_execute_header, v2, v3, v4, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_10229FC50 != -1)
        dispatch_once(&qword_10229FC50, &stru_1021B27D8);
    }
    if (sub_1013AC6F8())
    {
      sub_10025CCFC();
      sub_10025CD94((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/TrackRun/CLTrackRunController.mm", 637, "ChangeState");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_10229FC50, &stru_1021B27D8);
  }
}

void sub_1019506E8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B29B0);
    }
    v1 = qword_1022A0228;
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B29B0);
    }
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierClientAdapter.mm", 48, "-[CLNotifierClientAdapter onNotification:withData:]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021B29B0);
  }
}

void sub_1019508B4()
{
  __assert_rtn("set_constellation", "CLPRavenGnssAssistanceFile.pb.h", 1313, "::CLP::LogEntry::RavenGnssAssistanceFile::Constellation_IsValid(value)");
}

void sub_1019508DC()
{
  __assert_rtn("set_signal_type", "CLPRavenGnssAssistanceFile.pb.h", 1522, "::CLP::LogEntry::RavenGnssAssistanceFile::SignalType_IsValid(value)");
}

void sub_101950904()
{
  __assert_rtn("set_constellation", "CLPRavenGnssAssistanceFile.pb.h", 1832, "::CLP::LogEntry::RavenGnssAssistanceFile::Constellation_IsValid(value)");
}

void sub_10195092C()
{
  __assert_rtn("set_geomagnetic_storm_scale", "CLPRavenGnssAssistanceFile.pb.h", 2012, "::CLP::LogEntry::RavenGnssAssistanceFile::StormScale_IsValid(value)");
}

void sub_101950954()
{
  __assert_rtn("set_solar_radiation_storm_scale", "CLPRavenGnssAssistanceFile.pb.h", 1945, "::CLP::LogEntry::RavenGnssAssistanceFile::StormScale_IsValid(value)");
}

void sub_10195097C()
{
  __assert_rtn("set_layer_number", "CLPRavenGnssAssistanceFile.pb.h", 2105, "::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereLayer_IsValid(value)");
}

void sub_1019509A4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100804608())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021B3040);
    }
    if (sub_10080462C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Invalid child event payload!", "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021B3040);
    }
    if (sub_10080461C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Invalid child event payload!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidUtils.mm", 28, "sensorTimeFromHidChildEvent");
LABEL_11:
    dispatch_once(&qword_10229FD30, &stru_1021B3040);
  }
}

void sub_101950B10()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FD30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100804608())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021B3040);
    }
    if (sub_10080462C())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Unexpected sensor time length!", "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FD30 != -1)
        dispatch_once(&qword_10229FD30, &stru_1021B3040);
    }
    if (sub_10080461C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Unexpected sensor time length!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Motion/IO/CLIoHidUtils.mm", 29, "sensorTimeFromHidChildEvent");
LABEL_11:
    dispatch_once(&qword_10229FD30, &stru_1021B3040);
  }
}

#error "101950CF0: call analysis failed (funcsize=71)"

#error "101950E58: call analysis failed (funcsize=71)"

#error "101950FC0: call analysis failed (funcsize=71)"

#error "101951128: call analysis failed (funcsize=71)"

#error "101951290: call analysis failed (funcsize=71)"

#error "1019513F8: call analysis failed (funcsize=71)"

#error "101951564: call analysis failed (funcsize=72)"

#error "1019516D0: call analysis failed (funcsize=72)"

#error "10195183C: call analysis failed (funcsize=72)"

#error "1019519A8: call analysis failed (funcsize=72)"

#error "101951B14: call analysis failed (funcsize=72)"

void sub_101951C08()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_100290880())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B45A8);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B45A8);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/MobileAsset/CLMobileAssetManager.mm", 19, "-[CLMobileAssetManagerAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021B45A8);
  }
}

void sub_101951D88()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1013FC5F0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B4D78);
    }
    if (sub_1013FC614())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B4D78);
    }
    if (sub_1013FC604())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm", 58, "-[CLNotifierServiceAdapter setAdaptedNotifier:]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021B4D78);
  }
}

void sub_101951EF4()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1013FC5F0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B4D78);
    }
    if (sub_1013FC614())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B4D78);
    }
    if (sub_1013FC604())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm", 48, "-[CLNotifierServiceAdapter setAdaptedNotifier:]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021B4D78);
  }
}

void sub_101952060()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1013FC5F0())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B4D78);
    }
    if (sub_1013FC614())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B4D78);
    }
    if (sub_1013FC604())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLNotifierServiceAdapter.mm", 100, "-[CLNotifierServiceAdapter notifierClientNumForCoparty:]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021B4D78);
  }
}

void sub_1019521CC()
{
  __assert_rtn("operator()", "CLOrientationStatisticsLogger.mm", 65, "false");
}

void sub_1019521F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101403144("operator()", "CLOrientationStatisticsLogger.mm", a3, "false");
}

#error "1019522A0: call analysis failed (funcsize=80)"

#error "101952418: call analysis failed (funcsize=72)"

#error "101952584: call analysis failed (funcsize=72)"

#error "1019526F0: call analysis failed (funcsize=72)"

#error "10195285C: call analysis failed (funcsize=72)"

#error "1019529C8: call analysis failed (funcsize=72)"

void sub_101952ABC(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  NSObject *v5;
  int v6;
  id v7;

  v4 = objc_begin_catch(a1);
  *a3 = v4;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_1021B5B78);
  v5 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
  {
    v6 = 138477827;
    v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unable to parse response! Exception: %{private}@", (uint8_t *)&v6, 0xCu);
  }
}

#error "101952C04: call analysis failed (funcsize=72)"

#error "101952D70: call analysis failed (funcsize=72)"

#error "101952EDC: call analysis failed (funcsize=72)"

#error "101953048: call analysis failed (funcsize=72)"

#error "1019531B4: call analysis failed (funcsize=72)"

void sub_1019532A8()
{
  __assert_rtn("Initialize", "hmm.h", 345, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_1019532D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101424F18("operator double", "cnmatrixbase.h", a3, "num_elements_ == 1");
}

void sub_1019532F4()
{
  __assert_rtn("Initialize", "hmm.h", 341, "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_10195331C()
{
  __assert_rtn("Update", "hmm.h", 637, "nx > 0");
}

void sub_101953344()
{
  __assert_rtn("Update", "hmm.h", 654, "ne > 0");
}

void sub_10195336C()
{
  __assert_rtn("SetMatrixSize", "cnmatrixbase.h", 422, "this->max_num_rows_ >= num_rows");
}

void sub_101953394()
{
  __assert_rtn("Update", "hmm.h", 669, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_1019533BC()
{
  __assert_rtn("Update", "hmm.h", 657, "Length(eArgs) == ne_u32");
}

void sub_1019533E4()
{
  __assert_rtn("Update", "hmm.h", 656, "Length(eFuncs) == ne_u32");
}

void sub_10195340C()
{
  __assert_rtn("Update", "hmm.h", 650, "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_101953434()
{
  __assert_rtn("Update", "hmm.h", 641, "Length(xbar) == nx_u32");
}

void sub_10195345C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101424EF8("operator()", "cnmatrixbase.h", a3, "data_ != __null");
}

void sub_101953480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101424EF0("operator()", "cnmatrixbase.h", a3, "idx >= 0");
}

void sub_1019534A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101424EE8("operator()", "cnmatrixbase.h", a3, "idx < num_elements_");
}

void sub_1019534C8()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4900, "d == 1 || d == 2");
}

void sub_1019534F0()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4904, "B.max_num_cols_ >= A.num_cols_");
}

void sub_101953518()
{
  __assert_rtn("Sum", "cnmatrixbase.h", 4908, "B.max_num_rows_ >= A.num_rows_");
}

void sub_101953540()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2294, "in_nr >= 0");
}

void sub_101953568()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2295, "in_nc >= 0");
}

void sub_101953590()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2300, "in_nr <= max_nr");
}

void sub_1019535B8()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2302, "in_nc <= max_nc");
}

void sub_1019535E0()
{
  __assert_rtn("FastReshape", "cnmatrixbase.h", 2297, "in_nr*in_nc == A.num_elements_");
}

void sub_101953608()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2378, "in_nr <= max_nr");
}

void sub_101953630()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2379, "in_nc >= 0");
}

void sub_101953658()
{
  __assert_rtn("FastResize", "cnmatrixbase.h", 2381, "in_nc <= max_nc");
}

void sub_101953680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101424F10("operator()", "cnmatrixbase.h", a3, "data_ != __null");
}

void sub_1019536A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101424F08("operator()", "cnmatrixbase.h", a3, "idx >= 0");
}

void sub_1019536C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101424F00("operator()", "cnmatrixbase.h", a3, "idx < num_elements_");
}

void sub_1019536EC()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 881, "data_ != __null");
}

void sub_101953714()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 882, "idx >= 0");
}

void sub_10195373C()
{
  __assert_rtn("operator()", "cnmatrixbase.h", 883, "idx < num_elements_");
}

void sub_101953764()
{
  __assert_rtn("Predict", "hmm.h", 412, "nx > 0");
}

void sub_10195378C()
{
  __assert_rtn("Predict", "hmm.h", 438, "cnisnan(sum) == false && sum > static_cast<T>(0.0)");
}

void sub_1019537B4()
{
  __assert_rtn("Predict", "hmm.h", 425, "cnisnan(val) == false && val >= static_cast<T>(0.0) && val <= static_cast<T>(1.0)");
}

void sub_1019537DC()
{
  __assert_rtn("Predict", "hmm.h", 416, "Length(x) == nx_u32");
}

void sub_101953804()
{
  __assert_rtn("TransitionProbabilitiesAreValid", "hmm.h", 111, "nx > 0");
}

void sub_10195382C()
{
  __assert_rtn("TransitionProbabilitiesAreValid", "hmm.h", 113, "tMat.NumRows() == nx_u32 && tMat.NumCols() == nx_u32");
}

void sub_101953854()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v0, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
    }
    v0 = *(NSObject **)(v1 + 120);
    if (sub_100299F70(v0))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/PedometerAssistance/CLGNSSPedometerAssistanceController.mm", 571, "HandleStateEntry");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  }
}

void sub_1019539F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v0, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
    }
    v0 = *(NSObject **)(v1 + 120);
    if (sub_100299F70(v0))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/PedometerAssistance/CLGNSSPedometerAssistanceController.mm", 1283, "ChangeState");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  }
}

#error "101953BFC: call analysis failed (funcsize=67)"

#error "101953D48: call analysis failed (funcsize=67)"

#error "101953E94: call analysis failed (funcsize=67)"

#error "101953FE0: call analysis failed (funcsize=67)"

#error "10195412C: call analysis failed (funcsize=67)"

void sub_101954208()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[40];

  if (qword_1022A0070 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_10085FBA8())
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
    }
    if (sub_10085FBE8())
    {
      sub_10025CCFC();
      sub_100299E88((void *)&_mh_execute_header, v0, v2, v3, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
    }
    v0 = *(NSObject **)(v1 + 120);
    if (sub_100299F70(v0))
    {
      sub_10025CCFC();
      sub_1002908CC((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v4);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/PedometerAssistance/CLGNSSPedometerAssistanceController.mm", 1801, "Reset");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  }
}

void sub_1019543A4()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"unknown in-useness level enum passed to encodeInUseLevelAsInteger\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B6768);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "unknown in-useness level enum passed to encodeInUseLevelAsInteger", "{\"msg%{public}.0s\":\"unknown in-useness level enum passed to encodeInUseLevelAsInteger\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B6768);
    }
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"unknown in-useness level enum passed to encodeInUseLevelAsInteger\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Type.mm", 380, "encodeInUseLevelAsInteger");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_1021B6768);
  }
}

void sub_101954570()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_1022A01D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"level int is out of range for in-use level\", \"level\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B6768);
    }
    v1 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      sub_100299EA0();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "level int is out of range for in-use level", "{\"msg%{public}.0s\":\"level int is out of range for in-use level\", \"level\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B6768);
    }
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      sub_100299EA0();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"level int is out of range for in-use level\", \"level\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Core/ClientManagement/CLClientManager_Type.mm", 385, "decodeInUseLevelFromInteger");
LABEL_11:
    dispatch_once(&qword_1022A01D0, &stru_1021B6768);
  }
}

void sub_101954740()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint8_t v5[40];

  if (qword_10229FDA0 != -1)
    dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  v0 = qword_10229FDA8;
  if (sub_100290880())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLServiceLocationProvider_Type add client failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  }
  if (sub_100343324())
  {
    sub_10025CD44();
    sub_10025CD28((void *)&_mh_execute_header, v1, v2, v3, "CLServiceLocationProvider_Type add client failed", "{\"msg%{public}.0s\":\"CLServiceLocationProvider_Type add client failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5);
    if (qword_10229FDA0 != -1)
      dispatch_once(&qword_10229FDA0, &stru_1021B6A88);
  }
  v4 = qword_10229FDA8;
  if (sub_10029088C())
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLServiceLocationProvider_Type add client failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v5, 0x26u);
  }
}

#error "101954958: call analysis failed (funcsize=76)"

#error "101954AD0: call analysis failed (funcsize=76)"

#error "101954C48: call analysis failed (funcsize=76)"

void sub_101954D40()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t v3[40];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_1021B6E18);
  v0 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Fence: combined, no key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
  }
  v1 = qword_1022A0068;
  if (os_signpost_enabled((os_log_t)qword_1022A0068))
  {
    sub_10025CD44();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Fence: combined, no key", "{\"msg%{public}.0s\":\"Fence: combined, no key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_1021B6E18);
  }
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_INFO))
  {
    sub_10025CD44();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Fence: combined, no key\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void sub_101954F04()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A02D0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B6EF8);
    }
    v1 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021B6EF8);
    }
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Transit/CLTransitTilePreloaderExternal.mm", 37, "requestTileDownload");
LABEL_11:
    dispatch_once(&qword_1022A02D0, &stru_1021B6EF8);
  }
}

void sub_1019550D0()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_1022A0220 != -1)
    goto LABEL_11;
  while (1)
  {
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    }
    if (os_signpost_enabled((os_log_t)qword_1022A0228))
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021B70C0);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Vehicle/CLVehicleStateNotifier.mm", 108, "-[CLVehicleStateNotifierAdapter beginService]");
LABEL_11:
    dispatch_once(&qword_1022A0220, &stru_1021B70C0);
  }
}

void sub_101955258()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t v21;

  if (qword_10229FC30 != -1)
    goto LABEL_11;
  while (1)
  {
    if (sub_1004FC9E4())
    {
      sub_10025CCFC();
      sub_10026AFA8((void *)&_mh_execute_header, v0, v1, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v2, v3, v4, v5, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021B7308);
    }
    if (sub_1004A6E30())
    {
      sub_10025CCFC();
      sub_10026AF88((void *)&_mh_execute_header, v6, v7, v8, "The total size of the POD types on the 2 architectures is expected to be the same.", "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v9, v10, v17, v18, v19, v20, v21);
      if (qword_10229FC30 != -1)
        dispatch_once(&qword_10229FC30, &stru_1021B7308);
    }
    if (sub_10029088C())
    {
      sub_10025CCFC();
      sub_10026AFBC((void *)&_mh_execute_header, v11, v12, "{\"msg%{public}.0s\":\"The total size of the POD types on the 2 architectures is expected to be the same.\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v13, v14, v15, v16, v17, v18, v19, v20, v21);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h", 244, "operator()");
LABEL_11:
    dispatch_once(&qword_10229FC30, &stru_1021B7308);
  }
}

void sub_1019553C8()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[40];

  if (qword_1022A00B0 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_FAULT))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"null fStopCompletedTimer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    }
    v1 = qword_1022A00B8;
    if (os_signpost_enabled((os_log_t)qword_1022A00B8))
    {
      sub_10025CCFC();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "null fStopCompletedTimer", "{\"msg%{public}.0s\":\"null fStopCompletedTimer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00B0 != -1)
        dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
    }
    v2 = qword_1022A00B8;
    if (os_log_type_enabled((os_log_t)qword_1022A00B8, OS_LOG_TYPE_INFO))
    {
      sub_10025CCFC();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"null fStopCompletedTimer\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Smoother/CLSmootherMonitor.mm", 498, "-[CLSmootherMonitor smoothLocations:workoutActivity:shouldReconstructRoute:timeIntervalsThatNeedPopulated:handler:]_block_invoke");
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1022A00B0, &stru_1021B7A80);
  }
}

void sub_10195559C()
{
  __assert_rtn("onTraversingSection", "CLKeyLatLonTileTemplate.h", 1073, "offsetEntries + numOfEntries <= entriesHeader.numOfEntries");
}

#error "101955638: call analysis failed (funcsize=71)"

#error "1019557A0: call analysis failed (funcsize=70)"

#error "101955900: call analysis failed (funcsize=70)"

#error "101955A60: call analysis failed (funcsize=70)"

#error "101955BC0: call analysis failed (funcsize=70)"

#error "101955D20: call analysis failed (funcsize=70)"

#error "101955E80: call analysis failed (funcsize=70)"

#error "101955FF4: call analysis failed (funcsize=80)"

#error "10195616C: call analysis failed (funcsize=72)"

#error "1019562D8: call analysis failed (funcsize=72)"

#error "101956444: call analysis failed (funcsize=72)"

#error "1019565B0: call analysis failed (funcsize=72)"

#error "10195671C: call analysis failed (funcsize=72)"

#error "101956890: call analysis failed (funcsize=75)"

void sub_101956984()
{
  __assert_rtn("addAggregationRule", "CLActivityAggregator.h", 62, "fRules.back().timeFromCurrentS < timeFromCurrentS");
}

void sub_1019569AC()
{
  __assert_rtn("addAggregationRule", "CLActivityAggregator.h", 63, "fRules.back().minimumIntervalS < minimumIntervalS");
}

#error "101956A54: call analysis failed (funcsize=75)"

#error "101956BC8: call analysis failed (funcsize=75)"

#error "101956D3C: call analysis failed (funcsize=75)"

#error "101956EB0: call analysis failed (funcsize=75)"

#error "101957024: call analysis failed (funcsize=75)"

#error "101957198: call analysis failed (funcsize=75)"

#error "10195730C: call analysis failed (funcsize=75)"

void sub_101957400()
{
  NSObject *v0;
  NSObject *v1;
  NSObject *v2;
  uint8_t buf[56];

  if (qword_10229FC70 != -1)
    goto LABEL_11;
  while (1)
  {
    v0 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B9010);
    }
    v1 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      sub_100299F04();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Wiring bug, should not be subscribed to ", "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B9010);
    }
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      sub_100299F04();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Wiring bug, should not be subscribed to \", \"notification\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Motion/Swimming/CLSwimNotifier.mm", 720, "onWatchOrientationSettingsNotification");
LABEL_11:
    dispatch_once(&qword_10229FC70, &stru_1021B9010);
  }
}

#error "10195765C: call analysis failed (funcsize=75)"

void sub_101957750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1014B2728(__stack_chk_guard);
  sub_1014B2714();
  sub_1014B2704((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",fForestSize is 0\n", v1, v2, v3, v4, v5);
  sub_1014B2730();
}

void sub_1019577C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1014B2728(__stack_chk_guard);
  sub_1014B2714();
  sub_1014B2704((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid decision tree, feature index exceeds feature array\n", v1, v2, v3, v4, v5);
  sub_1014B2730();
}

void sub_101957838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1014B2728(__stack_chk_guard);
  sub_1014B2714();
  sub_1014B2704((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid decision tree, child index exceeds node array\n", v1, v2, v3, v4, v5);
  sub_1014B2730();
}

void sub_1019578AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1014B2728(__stack_chk_guard);
  sub_1014B2714();
  sub_1014B2704((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Index exceeds ensemble size\n", v1, v2, v3, v4, v5);
  sub_1014B2730();
}

void sub_101957920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint8_t v5;

  sub_1014B2728(__stack_chk_guard);
  sub_1014B2714();
  sub_1014B2704((void *)&_mh_execute_header, &_os_log_default, v0, "ERROR,Die,Time,%.3f,Function,\"%s\",Invalid decision tree, regression index exceeds array length\n", v1, v2, v3, v4, v5);
  sub_1014B2730();
}

#error "101957A0C: call analysis failed (funcsize=72)"

#error "101957B78: call analysis failed (funcsize=72)"

#error "101957CE4: call analysis failed (funcsize=72)"

#error "101957E50: call analysis failed (funcsize=72)"

#error "101957FBC: call analysis failed (funcsize=72)"

void sub_1019580B0()
{
  __assert_rtn("setFlushTimeoutSeconds_block_invoke", "MSLWriter.cpp", 56, "(fFd == -1) && (\"Writer::setFlushTimeout() must be called before ::open().\")");
}

void sub_1019580D8(uint64_t a1, _QWORD *a2, os_log_t log)
{
  int v3;
  _QWORD *v4;

  if (*(char *)(a1 + 39) < 0)
    a2 = (_QWORD *)*a2;
  v3 = 136446210;
  v4 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to create directory at path: %{public}s", (uint8_t *)&v3, 0xCu);
}

uint64_t sub_10195815C(os_log_t log)
{
  int v2;
  const char *v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  const char *v7;

  v2 = 136315650;
  v3 = "assert";
  v4 = 2080;
  v5 = "fValid";
  v6 = 2080;
  v7 = "On call to writeItem client should check if the logger was opened";
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Event: %s\n Condition: %s\n Message: %s", (uint8_t *)&v2, 0x20u);
  if (qword_10230F958 == -1)
    return 1;
  dispatch_once(&qword_10230F958, &stru_1021C1AB8);
  return 0;
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

id objc_msgSend_App(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "App");
}

id objc_msgSend_BMIFromHeight_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BMIFromHeight:weight:");
}

id objc_msgSend_BandInfoTypeAsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BandInfoTypeAsString:");
}

id objc_msgSend_CFAbsoluteTimeToNSStringKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CFAbsoluteTimeToNSStringKey:");
}

id objc_msgSend_CLFenceHandoffTypetoString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CLFenceHandoffTypetoString:");
}

id objc_msgSend_CLMotionActivityTypeFromCMWorkoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CLMotionActivityTypeFromCMWorkoutType:");
}

id objc_msgSend_CLMotionTimeRangeFromCMMotionTimeRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CLMotionTimeRangeFromCMMotionTimeRange:");
}

id objc_msgSend_CMSwimWorkoutLocationFromCMWorkoutLocationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CMSwimWorkoutLocationFromCMWorkoutLocationType:");
}

id objc_msgSend_CMWorkoutTypeFromCLMotionActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CMWorkoutTypeFromCLMotionActivityType:");
}

id objc_msgSend_CellularQualityStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CellularQualityStatus");
}

id objc_msgSend_DSLPublisher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "DSLPublisher");
}

id objc_msgSend_Device(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "Device");
}

id objc_msgSend_F01(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "F01");
}

id objc_msgSend_ID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ID");
}

id objc_msgSend_IMEI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "IMEI");
}

id objc_msgSend_IMSI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "IMSI");
}

id objc_msgSend_ISOcountryCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ISOcountryCode");
}

id objc_msgSend_InFocus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "InFocus");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_Location(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "Location");
}

id objc_msgSend_Media(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "Media");
}

id objc_msgSend_MicroLocationVisit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "MicroLocationVisit");
}

id objc_msgSend_MotionFitnessDailyStructToNSDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "MotionFitnessDailyStructToNSDictionary:");
}

id objc_msgSend_NSDateToNSStringKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "NSDateToNSStringKey:");
}

id objc_msgSend_NSDictionaryToMotionFitnessDailyStruct_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "NSDictionaryToMotionFitnessDailyStruct:");
}

id objc_msgSend_NowPlaying(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "NowPlaying");
}

id objc_msgSend_RSSI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "RSSI");
}

id objc_msgSend_SOSTriggerClickCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SOSTriggerClickCount");
}

id objc_msgSend_SleepMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SleepMode");
}

id objc_msgSend_TASPAdvertisementDeviceTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "TASPAdvertisementDeviceTypeToString:");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLBagForContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLBagForContext:");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLQueryAllowedCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLQueryAllowedCharacterSet");
}

id objc_msgSend_URLRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLRequest");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLWithString_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:relativeToURL:");
}

id objc_msgSend_URLsForDirectory_inDomains_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLsForDirectory:inDomains:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend_UUIDWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDWithString:");
}

id objc_msgSend_UserFocus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UserFocus");
}

id objc_msgSend_VO2MaxInputFromCMVO2MaxInputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "VO2MaxInputFromCMVO2MaxInputs:");
}

id objc_msgSend_WakeOnWiFiStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "WakeOnWiFiStatus");
}

id objc_msgSend_WiFiAvailabilityStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "WiFiAvailabilityStatus");
}

id objc_msgSend_Wireless(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "Wireless");
}

id objc_msgSend_X(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "X");
}

id objc_msgSend_Y(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "Y");
}

id objc_msgSend_Z(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "Z");
}

id objc_msgSend__CLCommonIsBundleSystemService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_CLCommonIsBundleSystemService:");
}

id objc_msgSend___imHexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "__imHexString");
}

id objc_msgSend__addLogger_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addLogger:type:");
}

id objc_msgSend__alignElevationArray_andLocationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alignElevationArray:andLocationArray:");
}

id objc_msgSend__armPeriodicScanTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_armPeriodicScanTimer");
}

id objc_msgSend__attachTAUnknownBeaconToDurianDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attachTAUnknownBeaconToDurianDevice:");
}

id objc_msgSend__backwardProcessingWithKFEstimatesBuffer_andKSEstimatesBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backwardProcessingWithKFEstimatesBuffer:andKSEstimatesBuffer:");
}

id objc_msgSend__beatsPerMinute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beatsPerMinute");
}

id objc_msgSend__blePeripheralSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_blePeripheralSource");
}

id objc_msgSend__cacheAlternativeIdentities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheAlternativeIdentities");
}

id objc_msgSend__cacheSystemServicesMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheSystemServicesMap");
}

id objc_msgSend__calculateTimeStartEndDistanceGpsPed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_calculateTimeStartEndDistanceGpsPed");
}

id objc_msgSend__cancelApSleepWakeCallBack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelApSleepWakeCallBack");
}

id objc_msgSend__cancelExistingStopScanningBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelExistingStopScanningBlock");
}

id objc_msgSend__cancelICloudMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelICloudMonitor");
}

id objc_msgSend__cancelPeriodicScanTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelPeriodicScanTimer");
}

id objc_msgSend__ckpToAccessGivenKey_andInputKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ckpToAccessGivenKey:andInputKeyPath:");
}

id objc_msgSend__cl_BtTxPowerCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_BtTxPowerCharacteristicUUID");
}

id objc_msgSend__cl_BtTxPowerServiceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_BtTxPowerServiceUUID");
}

id objc_msgSend__cl_DurianDebugServiceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_DurianDebugServiceUUID");
}

id objc_msgSend__cl_DurianFeatureNotSupportedError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_DurianFeatureNotSupportedError");
}

id objc_msgSend__cl_DurianKeyIndexCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_DurianKeyIndexCharacteristicUUID");
}

id objc_msgSend__cl_DurianLoggingCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_DurianLoggingCharacteristicUUID");
}

id objc_msgSend__cl_DurianUnauthorizedConnectionServiceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_DurianUnauthorizedConnectionServiceUUID");
}

id objc_msgSend__cl_DurianUnauthorizedPrecisionFindingCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_DurianUnauthorizedPrecisionFindingCharacteristicUUID");
}

id objc_msgSend__cl_DurianUnauthorizedSoundCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_DurianUnauthorizedSoundCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryFirmwareUpdateMsgCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryFirmwareUpdateMsgCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryFirmwareUpdateServiceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryFirmwareUpdateServiceUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceAccessoryCapabilitiesCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceAccessoryCapabilitiesCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceAccessoryCategoryCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceAccessoryCategoryCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceBatteryLevelCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceBatteryLevelCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceBatteryTypeCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceBatteryTypeCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceFindMyVersionCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceFindMyVersionCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceFirmwareVersionCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceFirmwareVersionCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceManufacturerNameCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceManufacturerNameCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceModelColorCodeCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceModelColorCodeCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceModelNameCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceModelNameCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceProductDataCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceProductDataCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeAccessoryInformationServiceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeAccessoryInformationServiceUUID");
}

id objc_msgSend__cl_HawkeyeConfigurationCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeConfigurationCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeDebugCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeDebugCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyeFindMyNetworkServiceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeFindMyNetworkServiceUUID");
}

id objc_msgSend__cl_HawkeyeNonOwnerCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyeNonOwnerCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyePairedOwnerInformationCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyePairedOwnerInformationCharacteristicUUID");
}

id objc_msgSend__cl_HawkeyePreciseFindingCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_HawkeyePreciseFindingCharacteristicUUID");
}

id objc_msgSend__cl_PoshAccessoryNonOwnerCharacteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_PoshAccessoryNonOwnerCharacteristicUUID");
}

id objc_msgSend__cl_PoshAccessoryNonOwnerServiceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_PoshAccessoryNonOwnerServiceUUID");
}

id objc_msgSend__cl_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_initWithFileDescriptor:");
}

id objc_msgSend__cl_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cl_isEqual:");
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanup");
}

id objc_msgSend__clearBuffers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearBuffers");
}

id objc_msgSend__closeCurrentTrack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeCurrentTrack");
}

id objc_msgSend__closeTrackCheckGpsLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeTrackCheckGpsLocation");
}

id objc_msgSend__closeTrackCheckGpsOdometer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeTrackCheckGpsOdometer");
}

id objc_msgSend__closeTrackCheckPedometer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_closeTrackCheckPedometer");
}

id objc_msgSend__completeJourney(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_completeJourney");
}

id objc_msgSend__convertTASPAdvertisementDeviceTypeToSPBeaconType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_convertTASPAdvertisementDeviceTypeToSPBeaconType:");
}

id objc_msgSend__countPerMinuteUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countPerMinuteUnit");
}

id objc_msgSend__countPerSecondUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countPerSecondUnit");
}

id objc_msgSend__createErrorForDownloadStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createErrorForDownloadStatus:");
}

id objc_msgSend__createKeyValuePairsDict_metaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createKeyValuePairsDict:metaData:");
}

id objc_msgSend__currentFilename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentFilename");
}

id objc_msgSend__decimateElevationsWithStartTime_andEndTime_andLocationArray_andElevationArray_andAggregatedLocationArray_andRawElevationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decimateElevationsWithStartTime:andEndTime:andLocationArray:andElevationArray:andAggregatedLocationArray:andRawElevationArray:");
}

id objc_msgSend__decimateLocationsWithStartTime_andEndTime_andLocationArray_andElevationArray_andRawLocationArray_andRawElevationArray_andTaskType_andVisitArray_andVisitSearchStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decimateLocationsWithStartTime:andEndTime:andLocationArray:andElevationArray:andRawLocationArray:andRawElevationArray:andTaskType:andVisitArray:andVisitSearchStartIndex:");
}

id objc_msgSend__deriveAndCacheSystemServicesMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deriveAndCacheSystemServicesMap");
}

id objc_msgSend__dictionaryForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dictionaryForKey:atKeyPath:");
}

id objc_msgSend__didTransitionZoneWithData_trueMajor_trueMinor_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didTransitionZoneWithData:trueMajor:trueMinor:state:");
}

id objc_msgSend__doSigningWhenReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doSigningWhenReady");
}

id objc_msgSend__elevationBatchProcessingWithStartTime_andEndTime_andLocationBuffer_andKSEstimatesBuffer_andTaskType_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_elevationBatchProcessingWithStartTime:andEndTime:andLocationBuffer:andKSEstimatesBuffer:andTaskType:andCompletionBlock:");
}

id objc_msgSend__enableDataCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableDataCollection");
}

id objc_msgSend__encryptData_metaData_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_encryptData:metaData:start:end:");
}

id objc_msgSend__endDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endDate");
}

id objc_msgSend__extremaRemovedMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_extremaRemovedMean:");
}

id objc_msgSend__feedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_feedLocation:");
}

id objc_msgSend__fetchContinuousPlaceInferencesWithFidelityPolicy_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchContinuousPlaceInferencesWithFidelityPolicy:handler:");
}

id objc_msgSend__fetchPlaceInferencesWithFidelityPolicy_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchPlaceInferencesWithFidelityPolicy:handler:");
}

id objc_msgSend__filterGpsLocationBuffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_filterGpsLocationBuffer");
}

id objc_msgSend__firmwareAssetTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firmwareAssetTypeToString:");
}

id objc_msgSend__firmwareDownloadCommandToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firmwareDownloadCommandToString:");
}

id objc_msgSend__firmwareDownloadStatusToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firmwareDownloadStatusToString:");
}

id objc_msgSend__flightsClimbed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flightsClimbed");
}

id objc_msgSend__forEachLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forEachLogger:");
}

id objc_msgSend__forEachLoggerWithType_logItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forEachLoggerWithType:logItem:");
}

id objc_msgSend__forwardProcessingWithLocationArray_andElevationArray_andKFEstimatesBuffer_andKeepAllLocations_andTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forwardProcessingWithLocationArray:andElevationArray:andKFEstimatesBuffer:andKeepAllLocations:andTaskType:");
}

id objc_msgSend__gatherLocationArray_andElevationArray_andTaskType_withStartTime_andEndTime_andVisitArray_andVisitSearchStartIndex_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_gatherLocationArray:andElevationArray:andTaskType:withStartTime:andEndTime:andVisitArray:andVisitSearchStartIndex:andCompletionBlock:");
}

id objc_msgSend__getDefaultDeniedSystemServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getDefaultDeniedSystemServices");
}

id objc_msgSend__getElevationStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getElevationStartIndex:");
}

id objc_msgSend__getLastPredictionIndexWithKFEstimatesBuffer_fromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getLastPredictionIndexWithKFEstimatesBuffer:fromIndex:");
}

id objc_msgSend__getTimestampWithElevationArray_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getTimestampWithElevationArray:atIndex:");
}

id objc_msgSend__getTimestampWithLocationArray_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getTimestampWithLocationArray:atIndex:");
}

id objc_msgSend__hasFirstPartyBundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasFirstPartyBundleID");
}

id objc_msgSend__initKalmanFilter_withLocationArray_andElevationArray_andTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initKalmanFilter:withLocationArray:andElevationArray:andTaskType:");
}

id objc_msgSend__initWithRTPlaceInference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithRTPlaceInference:");
}

id objc_msgSend__initWithUUID_major_minor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initWithUUID:major:minor:");
}

id objc_msgSend__initializeMescalWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeMescalWithCompletion:");
}

id objc_msgSend__initializeValueForKey_withDefault_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeValueForKey:withDefault:");
}

id objc_msgSend__insertSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertSample:");
}

id objc_msgSend__installICloudMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installICloudMonitor");
}

id objc_msgSend__installScreenWakeMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installScreenWakeMonitor");
}

id objc_msgSend__internalMigrationClearUnknownKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_internalMigrationClearUnknownKeys");
}

id objc_msgSend__internalMigrationLegacyKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_internalMigrationLegacyKeys");
}

id objc_msgSend__internalMigrationRegisterAllClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_internalMigrationRegisterAllClients");
}

id objc_msgSend__interpolatePressureValuesWithElevationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_interpolatePressureValuesWithElevationArray:");
}

id objc_msgSend__invalidateSpeedEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_invalidateSpeedEstimate");
}

id objc_msgSend__isBundlePathReachable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBundlePathReachable:");
}

id objc_msgSend__isSignedIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSignedIn");
}

id objc_msgSend__isStoreConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isStoreConnected");
}

id objc_msgSend__isValidAuthLimitedKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isValidAuthLimitedKeyPath:");
}

id objc_msgSend__kalmanSmootherUpdateWithKFEstimatesBuffer_andKSEstimatesBuffer_andCurrPredictionIndex_andNextPredictionIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_kalmanSmootherUpdateWithKFEstimatesBuffer:andKSEstimatesBuffer:andCurrPredictionIndex:andNextPredictionIndex:");
}

id objc_msgSend__loadSubjectAuth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSubjectAuth");
}

id objc_msgSend__loadSubjectUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSubjectUUID");
}

id objc_msgSend__logValuesOfFilteredLocations_andTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logValuesOfFilteredLocations:andTaskType:");
}

id objc_msgSend__logValuesOfLocationArray_andElevationArray_andTaskType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_logValuesOfLocationArray:andElevationArray:andTaskType:");
}

id objc_msgSend__loiIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loiIdentifier");
}

id objc_msgSend__measurementUpdate_withLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_measurementUpdate:withLocation:");
}

id objc_msgSend__mescalSignerNSURLSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mescalSignerNSURLSession");
}

id objc_msgSend__onBluetoothServiceNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onBluetoothServiceNotification:data:");
}

id objc_msgSend__onDaemonStatusNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onDaemonStatusNotification:data:");
}

id objc_msgSend__onWifiServiceNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onWifiServiceNotification:data:");
}

id objc_msgSend__outputStream(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_outputStream");
}

id objc_msgSend__placeInference(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_placeInference");
}

id objc_msgSend__predicateForObjectsFromAppleWatches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predicateForObjectsFromAppleWatches");
}

id objc_msgSend__predictionUpdate_withElevation_withNextElevation_withTravelVelocity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_predictionUpdate:withElevation:withNextElevation:withTravelVelocity:");
}

id objc_msgSend__prepareForFirmwareDownload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForFirmwareDownload");
}

id objc_msgSend__productType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_productType");
}

id objc_msgSend__queryVisitStateByTimestamp_withHistoricalVisits_andVisitSearchStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_queryVisitStateByTimestamp:withHistoricalVisits:andVisitSearchStartIndex:");
}

id objc_msgSend__readPersonalizationInformation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_readPersonalizationInformation");
}

id objc_msgSend__recomputeCoexImpactedStateAndNotifyClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recomputeCoexImpactedStateAndNotifyClients");
}

id objc_msgSend__registerForLinkChangedNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForLinkChangedNotifications");
}

id objc_msgSend__registerForLqmScoreNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForLqmScoreNotifications");
}

id objc_msgSend__registerForNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForNotifications");
}

id objc_msgSend__registerForWowChangeNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForWowChangeNotifications");
}

id objc_msgSend__rejectOutlyingLocation_withKFEstimates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rejectOutlyingLocation:withKFEstimates:");
}

id objc_msgSend__removeAdditionalInconsistentSpeedPedometerEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAdditionalInconsistentSpeedPedometerEntries");
}

id objc_msgSend__removeDictionaryAtKeyPath_shouldLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDictionaryAtKeyPath:shouldLog:");
}

id objc_msgSend__removeInVisitLocation_withVisitArray_andVisitSearchStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeInVisitLocation:withVisitArray:andVisitSearchStartIndex:");
}

id objc_msgSend__retrievePeripheralForMaterial_isFindMyNetwork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrievePeripheralForMaterial:isFindMyNetwork:");
}

id objc_msgSend__runAdv(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runAdv");
}

id objc_msgSend__runScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_runScan");
}

id objc_msgSend__saveSubjectAuth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveSubjectAuth:");
}

id objc_msgSend__saveSubjectUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveSubjectUUID:");
}

id objc_msgSend__scheduleWifiArtifactsAllocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scheduleWifiArtifactsAllocation:");
}

id objc_msgSend__sendCommandToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendCommandToDevice:");
}

id objc_msgSend__sendElevationsFromEstimates_startIndex_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendElevationsFromEstimates:startIndex:withCompletionBlock:");
}

id objc_msgSend__sendFirmwareAsset_assetData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendFirmwareAsset:assetData:");
}

id objc_msgSend__sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendHistoricalMeanSeaLevelPressureWithKSEstimatesBuffer:andCompletionBlock:");
}

id objc_msgSend__sendMessage_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendMessage:identifier:error:");
}

id objc_msgSend__sendNextAsset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendNextAsset");
}

id objc_msgSend__sendNextPacketToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendNextPacketToDevice:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__setResponseSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setResponseSilo:");
}

id objc_msgSend__setUpDefaultDeniedSystemServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUpDefaultDeniedSystemServices");
}

id objc_msgSend__setXPCCriteriaForActivity_withDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setXPCCriteriaForActivity:withDescription:");
}

id objc_msgSend__setupMonitoringEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupMonitoringEvent");
}

id objc_msgSend__setupSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupSettings");
}

id objc_msgSend__setupSystemServiceDictionaries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupSystemServiceDictionaries");
}

id objc_msgSend__shouldLogValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldLogValueForKey:");
}

id objc_msgSend__shouldRotate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRotate");
}

id objc_msgSend__shouldRotateToHour_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldRotateToHour:date:");
}

id objc_msgSend__startDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startDate");
}

id objc_msgSend__startPermanentScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startPermanentScanning");
}

id objc_msgSend__startTimedScanningWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startTimedScanningWithReason:");
}

id objc_msgSend__stopAdvertising(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopAdvertising");
}

id objc_msgSend__stopFetchingContinuousPlaceInferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopFetchingContinuousPlaceInferences");
}

id objc_msgSend__stopLoggingOnQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopLoggingOnQueue");
}

id objc_msgSend__stopScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopScanning");
}

id objc_msgSend__stopScanningWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopScanningWithReason:");
}

id objc_msgSend__unboostingRemoteObjectProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unboostingRemoteObjectProxy");
}

id objc_msgSend__unregisterForEventsNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterForEventsNotification");
}

id objc_msgSend__unregisterForLinkChangedNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterForLinkChangedNotifications");
}

id objc_msgSend__unregisterForLqmScoreNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterForLqmScoreNotifications");
}

id objc_msgSend__unregisterForNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterForNotifications");
}

id objc_msgSend__unregisterForWowChangeNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterForWowChangeNotifications");
}

id objc_msgSend__updateGpsLocationBufferFiltered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateGpsLocationBufferFiltered:");
}

id objc_msgSend__updateLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLocation:");
}

id objc_msgSend__value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_value");
}

id objc_msgSend__valueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKey:atKeyPath:");
}

id objc_msgSend__visitWithVisit_authDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visitWithVisit:authDate:");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isManagedAppleID");
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_personID");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_abortFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abortFirmwareUpdate");
}

id objc_msgSend_abortFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "abortFirmwareUpdate:");
}

id objc_msgSend_absoluteAltitudeUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteAltitudeUpdate:");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_absoluteTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteTimestamp");
}

id objc_msgSend_acceleration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceleration");
}

id objc_msgSend_accelerometerDataFromDate_toDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accelerometerDataFromDate:toDate:");
}

id objc_msgSend_accessoryCategory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryCategory");
}

id objc_msgSend_accessoryHasNMEASentencesAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryHasNMEASentencesAvailable");
}

id objc_msgSend_accessoryInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryInfo");
}

id objc_msgSend_accessoryList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryList");
}

id objc_msgSend_accessoryMeta(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryMeta");
}

id objc_msgSend_accessoryReachable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryReachable:");
}

id objc_msgSend_accessoryTypeName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryTypeName");
}

id objc_msgSend_accessoryUnreachable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryUnreachable:");
}

id objc_msgSend_accountChangeEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountChangeEvent");
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountInfoWithCompletionHandler:");
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStatus");
}

id objc_msgSend_accountTypeWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeWithIdentifier:completion:");
}

id objc_msgSend_accountsWithAccountType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsWithAccountType:completion:");
}

id objc_msgSend_accumulateMaintainedReasonCountWithReason_andCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accumulateMaintainedReasonCountWithReason:andCategory:");
}

id objc_msgSend_accuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accuracy");
}

id objc_msgSend_acknowledgeAlarm_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeAlarm:withReply:");
}

id objc_msgSend_acknowledgeNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgeNotification:");
}

id objc_msgSend_acquire(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquire");
}

id objc_msgSend_acquireMutexForTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireMutexForTask:");
}

id objc_msgSend_acquireTokenWithSettings_publisher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireTokenWithSettings:publisher:");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_acquireWithHandler_invalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithHandler:invalidationHandler:");
}

id objc_msgSend_acquireWithHandler_onQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithHandler:onQueue:");
}

id objc_msgSend_actOnPendingDeleteForClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actOnPendingDeleteForClientKey:");
}

id objc_msgSend_actionWithLabel_url_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithLabel:url:");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activate");
}

id objc_msgSend_activateClientDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateClientDevice:");
}

id objc_msgSend_activatePendingConnectionAttemptForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activatePendingConnectionAttemptForDevice:");
}

id objc_msgSend_activateRapportLinkIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateRapportLinkIfNecessary");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activeAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeAccessory");
}

id objc_msgSend_activeClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeClients");
}

id objc_msgSend_activeConnectionAttempt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeConnectionAttempt");
}

id objc_msgSend_activeContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeContexts");
}

id objc_msgSend_activeDeviceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDeviceId");
}

id objc_msgSend_activeDeviceNearbyStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDeviceNearbyStatus");
}

id objc_msgSend_activeDeviceSelectorBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDeviceSelectorBlock");
}

id objc_msgSend_activeDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDevices");
}

id objc_msgSend_activeFenceSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeFenceSessions");
}

id objc_msgSend_activeIntervalEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeIntervalEvents");
}

id objc_msgSend_activeOdometryClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeOdometryClients");
}

id objc_msgSend_activePeripheral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activePeripheral");
}

id objc_msgSend_activePeripheralMaterial(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activePeripheralMaterial");
}

id objc_msgSend_activePeripheralReady(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activePeripheralReady");
}

id objc_msgSend_activeRequestCleanupTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeRequestCleanupTimer");
}

id objc_msgSend_activeRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeRequests");
}

id objc_msgSend_activeStreamingClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeStreamingClients");
}

id objc_msgSend_activeSyncSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeSyncSession");
}

id objc_msgSend_activeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeTask");
}

id objc_msgSend_activeTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeTime");
}

id objc_msgSend_activeWatchSyncSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeWatchSyncSession");
}

id objc_msgSend_activity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activity");
}

id objc_msgSend_activityAlarmAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityAlarmAvailable");
}

id objc_msgSend_activityAttribution(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityAttribution");
}

id objc_msgSend_activityDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityDuration");
}

id objc_msgSend_activityEndTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityEndTime");
}

id objc_msgSend_activityLoggerLogStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityLoggerLogStrideCalEntry:");
}

id objc_msgSend_activityOverrideMsg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityOverrideMsg");
}

id objc_msgSend_adamId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adamId");
}

id objc_msgSend_adaptee(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adaptee");
}

id objc_msgSend_adapter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adapter");
}

id objc_msgSend_addAccessPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccessPoints:");
}

id objc_msgSend_addAccessory_assetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccessory:assetID:");
}

id objc_msgSend_addAccessoryLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccessoryLocation:");
}

id objc_msgSend_addAlarm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAlarm:");
}

id objc_msgSend_addAttribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribution:");
}

id objc_msgSend_addAzimuths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAzimuths:");
}

id objc_msgSend_addBackgroundInertialOdometrySamples_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBackgroundInertialOdometrySamples:handler:");
}

id objc_msgSend_addCarryingItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCarryingItem:");
}

id objc_msgSend_addCdmaCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCdmaCellTower:");
}

id objc_msgSend_addCdmaEvdoTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCdmaEvdoTower:");
}

id objc_msgSend_addCdmaNeighbors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCdmaNeighbors:");
}

id objc_msgSend_addCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCellTower:");
}

id objc_msgSend_addClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClient:");
}

id objc_msgSend_addClient_prepareSessionEndForSessionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addClient:prepareSessionEndForSessionType:");
}

id objc_msgSend_addCnos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCnos:");
}

id objc_msgSend_addConditionForMonitoring_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConditionForMonitoring:identifier:");
}

id objc_msgSend_addConfigForIsoList_config_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConfigForIsoList:config:error:");
}

id objc_msgSend_addDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDataSource:");
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:queue:");
}

id objc_msgSend_addDiscoveryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDiscoveryType:");
}

id objc_msgSend_addElevations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addElevations:");
}

id objc_msgSend_addElevations_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addElevations:handler:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntry:");
}

id objc_msgSend_addFakeNPLOIDataForTesting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFakeNPLOIDataForTesting:");
}

id objc_msgSend_addFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFence:");
}

id objc_msgSend_addGeoMapDataSubscriptionForType_latitude_longitude_config_nploiIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGeoMapDataSubscriptionForType:latitude:longitude:config:nploiIndex:");
}

id objc_msgSend_addGsmNeighbors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGsmNeighbors:");
}

id objc_msgSend_addHawkeyeTestModeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHawkeyeTestModeTask");
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIndex:");
}

id objc_msgSend_addInertialData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInertialData:");
}

id objc_msgSend_addInputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInputs:");
}

id objc_msgSend_addInterestZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInterestZones:");
}

id objc_msgSend_addInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInterval:");
}

id objc_msgSend_addInterval_type_confidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInterval:type:confidence:");
}

id objc_msgSend_addIsUsedInFixes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addIsUsedInFixes:");
}

id objc_msgSend_addKeyValuePair_with_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKeyValuePair:with:");
}

id objc_msgSend_addLatestCalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLatestCalData:");
}

id objc_msgSend_addLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocation:");
}

id objc_msgSend_addLocationFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocationFingerprint:");
}

id objc_msgSend_addLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLocations:");
}

id objc_msgSend_addLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLogger:");
}

id objc_msgSend_addLteCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLteCellTower:");
}

id objc_msgSend_addLteNeighbors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLteNeighbors:");
}

id objc_msgSend_addMacModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMacModes:");
}

id objc_msgSend_addMacs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMacs:");
}

id objc_msgSend_addMarkets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMarkets:");
}

id objc_msgSend_addModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addModes:");
}

id objc_msgSend_addMonitoredRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitoredRegion:");
}

id objc_msgSend_addMonitoringPeriodFrom_until_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitoringPeriodFrom:until:");
}

id objc_msgSend_addMonitoringRecord_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMonitoringRecord:forIdentifier:");
}

id objc_msgSend_addNr5GCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNr5GCellTower:");
}

id objc_msgSend_addNrNeighbors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNrNeighbors:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObject_withSyncSessionReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:withSyncSessionReason:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addPendingDatabaseChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingDatabaseChanges:");
}

id objc_msgSend_addPendingRecordChanges_forZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordChanges:forZoneName:");
}

id objc_msgSend_addPendingRecordDeleteChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordDeleteChanges:");
}

id objc_msgSend_addPendingRecordSaveChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordSaveChanges:");
}

id objc_msgSend_addPendingRecordZoneChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPendingRecordZoneChanges:");
}

id objc_msgSend_addPersistentStoreWithDescription_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPersistentStoreWithDescription:completionHandler:");
}

id objc_msgSend_addPossiblePeripheral_withConnectionMaterial_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPossiblePeripheral:withConnectionMaterial:");
}

id objc_msgSend_addPossiblePeripheralsForDevice_usingMaterials_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPossiblePeripheralsForDevice:usingMaterials:");
}

id objc_msgSend_addPrbOnFloorEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrbOnFloorEstimate:");
}

id objc_msgSend_addRecipient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecipient:");
}

id objc_msgSend_addRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecord:");
}

id objc_msgSend_addRecordIDsForSessionId_shouldUploadToOutputZone_shouldUploadToInputZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordIDsForSessionId:shouldUploadToOutputZone:shouldUploadToInputZone:");
}

id objc_msgSend_addRecordIDsToSave_recordIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordIDsToSave:recordIDsToDelete:");
}

id objc_msgSend_addRecordZonesToSave_recordZoneIDsToDelete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecordZonesToSave:recordZoneIDsToDelete:");
}

id objc_msgSend_addRegulatoryDomainEstimates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRegulatoryDomainEstimates:");
}

id objc_msgSend_addRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequest:");
}

id objc_msgSend_addRequesterWithOutstandingRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRequesterWithOutstandingRequest:");
}

id objc_msgSend_addResponseListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResponseListener:");
}

id objc_msgSend_addRhythmicGnssClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRhythmicGnssClient:");
}

id objc_msgSend_addSatIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSatIds:");
}

id objc_msgSend_addScanResultAtDate_address_advertisementData_rssi_maintenanceReason_reserved_reconciledInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScanResultAtDate:address:advertisementData:rssi:maintenanceReason:reserved:reconciledInformation:");
}

id objc_msgSend_addScanResultAtDate_address_maintenanceReason_reconciledUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScanResultAtDate:address:maintenanceReason:reconciledUUID:");
}

id objc_msgSend_addScdmaCellTower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScdmaCellTower:");
}

id objc_msgSend_addScdmaNeighbors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addScdmaNeighbors:");
}

id objc_msgSend_addSubscriptionWithIdentifier_dataTypes_policy_region_expirationDate_callbackQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubscriptionWithIdentifier:dataTypes:policy:region:expirationDate:callbackQueue:completionHandler:");
}

id objc_msgSend_addSummaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSummaries:");
}

id objc_msgSend_addSurroundingWifiBands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSurroundingWifiBands:");
}

id objc_msgSend_addText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addText:");
}

id objc_msgSend_addTiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTiles:");
}

id objc_msgSend_addVectorClocks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addVectorClocks:");
}

id objc_msgSend_addWifiBands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWifiBands:");
}

id objc_msgSend_addWirelessAP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWirelessAP:");
}

id objc_msgSend_additionalInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalInfo");
}

id objc_msgSend_additionalInformation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalInformation");
}

id objc_msgSend_address(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "address");
}

id objc_msgSend_addressData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addressData");
}

id objc_msgSend_addressFromUnknownBeacon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addressFromUnknownBeacon");
}

id objc_msgSend_adjustMonitoringAccordingToClientLedgerDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustMonitoringAccordingToClientLedgerDictionary:");
}

id objc_msgSend_adjustedDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedDistance");
}

id objc_msgSend_adjustedDistanceToFenceBoundary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedDistanceToFenceBoundary");
}

id objc_msgSend_administrativeArea(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "administrativeArea");
}

id objc_msgSend_advertiseEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advertiseEnabled");
}

id objc_msgSend_advertisePeriod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advertisePeriod");
}

id objc_msgSend_advertisement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advertisement");
}

id objc_msgSend_advertisementData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "advertisementData");
}

id objc_msgSend_afterInterval_async_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "afterInterval:async:");
}

id objc_msgSend_age(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "age");
}

id objc_msgSend_ageOutCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageOutCache:");
}

id objc_msgSend_ageOutElevationArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageOutElevationArray");
}

id objc_msgSend_ageOutFormMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageOutFormMetrics");
}

id objc_msgSend_ageOutMotionStateArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageOutMotionStateArray");
}

id objc_msgSend_ageOutStepArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ageOutStepArray");
}

id objc_msgSend_aggregateFilteredLocations_andAddTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateFilteredLocations:andAddTo:");
}

id objc_msgSend_aggregateRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateRecords");
}

id objc_msgSend_aggregateStatsFromPacket_to_useAOPDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aggregateStatsFromPacket:to:useAOPDuration:");
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airplaneMode");
}

id objc_msgSend_airplaySolo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airplaySolo");
}

id objc_msgSend_alarmId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alarmId");
}

id objc_msgSend_alertElevationAlertClientsOnChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertElevationAlertClientsOnChange");
}

id objc_msgSend_algorithmVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "algorithmVersion");
}

id objc_msgSend_alignClockWithCurrentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alignClockWithCurrentIndex:");
}

id objc_msgSend_alignmentIntervalOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alignmentIntervalOverride");
}

id objc_msgSend_aliveAgainThrottleTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aliveAgainThrottleTimer");
}

id objc_msgSend_allArchiveURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allArchiveURLs");
}

id objc_msgSend_allDayHeartRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDayHeartRate");
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allHeaderFields");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allKeysForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeysForObject:");
}

id objc_msgSend_allMonitoringIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allMonitoringIdentifiers");
}

id objc_msgSend_allMonitoringRecordsByIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allMonitoringRecordsByIdentifier");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSessions");
}

id objc_msgSend_allSuccess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSuccess");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allergyInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allergyInfo");
}

id objc_msgSend_allergyInfoModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allergyInfoModifiedDate");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowBeaconsChangedPopup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowBeaconsChangedPopup");
}

id objc_msgSend_allowFetchingRSRP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowFetchingRSRP");
}

id objc_msgSend_allowFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowFirmwareUpdate");
}

id objc_msgSend_allowMonitoringWhileNearby(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowMonitoringWhileNearby");
}

id objc_msgSend_allowNetworkTileLoad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowNetworkTileLoad");
}

id objc_msgSend_allowSimulatedLocations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowSimulatedLocations");
}

id objc_msgSend_allowStaleData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowStaleData");
}

id objc_msgSend_allowedServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowedServices");
}

id objc_msgSend_alternateIdentitiesMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateIdentitiesMap");
}

id objc_msgSend_altimeterEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "altimeterEndpoint");
}

id objc_msgSend_altitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "altitude");
}

id objc_msgSend_altitudeAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "altitudeAccuracy");
}

id objc_msgSend_analyticsManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsManager");
}

id objc_msgSend_anchorKeyPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anchorKeyPath");
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_announceMostRecentForcedGPS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceMostRecentForcedGPS:");
}

id objc_msgSend_anyChangeToNewRequestsComparedTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyChangeToNewRequestsComparedTo:");
}

id objc_msgSend_anySubscribedToSensorRecorder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anySubscribedToSensorRecorder");
}

id objc_msgSend_aopSubmersionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aopSubmersionState");
}

id objc_msgSend_apHarvestCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apHarvestCount");
}

id objc_msgSend_appClipMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appClipMetadata");
}

id objc_msgSend_appEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appEndpoint");
}

id objc_msgSend_appId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appId");
}

id objc_msgSend_appLaunchedByAppLifecycleManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appLaunchedByAppLifecycleManager:");
}

id objc_msgSend_appState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appState");
}

id objc_msgSend_append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "append:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:error:");
}

id objc_msgSend_appendDataFromFileURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendDataFromFileURL:error:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendNordicCrashData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendNordicCrashData:");
}

id objc_msgSend_appendPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendPayload:");
}

id objc_msgSend_appendRecievedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendRecievedData:");
}

id objc_msgSend_appendRoseCrashData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendRoseCrashData:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appendUserStatsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendUserStatsData:");
}

id objc_msgSend_appleEffortScoreUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleEffortScoreUnit");
}

id objc_msgSend_appleExerciseTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleExerciseTime");
}

id objc_msgSend_appleManufacturerData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleManufacturerData");
}

id objc_msgSend_applicationExtensionRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationExtensionRecords");
}

id objc_msgSend_applicationIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationIdentifier");
}

id objc_msgSend_applicationIsInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationIsInstalled:");
}

id objc_msgSend_applicationIsInstalledOnAnyPairedDeviceWithBundleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationIsInstalledOnAnyPairedDeviceWithBundleID:completion:");
}

id objc_msgSend_applicationIsInstalledOnAnyPairedDeviceWithCompanionBundleID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationIsInstalledOnAnyPairedDeviceWithCompanionBundleID:completion:");
}

id objc_msgSend_applicationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationType");
}

id objc_msgSend_applicationWithBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWithBundleID:");
}

id objc_msgSend_applicationWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWithPath:");
}

id objc_msgSend_applyFilterToLocationObservations_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyFilterToLocationObservations:options:");
}

id objc_msgSend_applyStagedFirmwareOnAccessoryList_withUserIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyStagedFirmwareOnAccessoryList:withUserIntent:");
}

id objc_msgSend_applySyncMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySyncMessage:");
}

id objc_msgSend_appsWithClientKeysAreInstalledOnAPairedDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appsWithClientKeysAreInstalledOnAPairedDevice:");
}

id objc_msgSend_apsConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsConnection");
}

id objc_msgSend_apsdQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "apsdQueue");
}

id objc_msgSend_archive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archive");
}

id objc_msgSend_archiveForHarvester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveForHarvester:");
}

id objc_msgSend_archiveForHarvester_withSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveForHarvester:withSuffix:");
}

id objc_msgSend_archiveWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveWithIdentifier:");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_areCentroidDbAndMetadataDbValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areCentroidDbAndMetadataDbValid");
}

id objc_msgSend_areWalkingSteadinessNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areWalkingSteadinessNotificationsEnabled");
}

id objc_msgSend_areasOfInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "areasOfInterest");
}

id objc_msgSend_arfcn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arfcn");
}

id objc_msgSend_armed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "armed");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByApplyingDifference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByApplyingDifference:");
}

id objc_msgSend_arrayForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_arrayForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:defaultValue:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithContentsOfFile:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_arrivalDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrivalDate");
}

id objc_msgSend_assembleCommonConnectionEventDataWithMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assembleCommonConnectionEventDataWithMetrics:forDevice:");
}

id objc_msgSend_assertCommCenter_with_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertCommCenter:with:");
}

id objc_msgSend_assertCommCenterBaseBand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertCommCenterBaseBand:");
}

id objc_msgSend_assertInside(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertInside");
}

id objc_msgSend_assertOutside(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertOutside");
}

id objc_msgSend_assertionDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertionDuration");
}

id objc_msgSend_assertionWithStatusBarStyleOverrides_forPID_exclusive_showsWhenForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertionWithStatusBarStyleOverrides:forPID:exclusive:showsWhenForeground:");
}

id objc_msgSend_assetData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetData");
}

id objc_msgSend_assetDataCRC(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetDataCRC");
}

id objc_msgSend_assetId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetId");
}

id objc_msgSend_assetPacketizerQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetPacketizerQueue");
}

id objc_msgSend_assetTargetHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetTargetHeader");
}

id objc_msgSend_assetType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetType");
}

id objc_msgSend_assetVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assetVersion");
}

id objc_msgSend_associatedTo2GHzWiFi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedTo2GHzWiFi");
}

id objc_msgSend_async_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "async:");
}

id objc_msgSend_attachProgressCallBack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachProgressCallBack:");
}

id objc_msgSend_attached(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attached");
}

id objc_msgSend_attemptConnectToDevice_onCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptConnectToDevice:onCondition:");
}

id objc_msgSend_attemptConnectionToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptConnectionToDevice:");
}

id objc_msgSend_attemptDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptDuration");
}

id objc_msgSend_attemptForcedLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptForcedLocation");
}

id objc_msgSend_attemptMaintenanceOnDevice_onCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptMaintenanceOnDevice:onCondition:");
}

id objc_msgSend_attemptReconciliationWithAddress_advertisementData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptReconciliationWithAddress:advertisementData:");
}

id objc_msgSend_attemptSendCoreAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptSendCoreAnalytics");
}

id objc_msgSend_attitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attitude");
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeWithDomain:name:");
}

id objc_msgSend_attributedEntity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedEntity");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributes");
}

id objc_msgSend_attributesOfFileSystemForPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfFileSystemForPath:error:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_attributionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributionIdentifier");
}

id objc_msgSend_attributionTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributionTimer");
}

id objc_msgSend_attributions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributions");
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auditToken");
}

id objc_msgSend_authMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authMask");
}

id objc_msgSend_authStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authStatus");
}

id objc_msgSend_authSyncStoreState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authSyncStoreState");
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationMethod");
}

id objc_msgSend_authorizationContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationContext");
}

id objc_msgSend_authorizationContextByANDingServiceMaskTuple_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationContextByANDingServiceMaskTuple:");
}

id objc_msgSend_authorizationDatabaseWithFilename_withDataProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationDatabaseWithFilename:withDataProtectionClass:");
}

id objc_msgSend_authorizationDateForClientWithKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationDateForClientWithKey:");
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationStatus");
}

id objc_msgSend_authorizationStatusForBundlePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationStatusForBundlePath:");
}

id objc_msgSend_authorizeLocationInReplay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizeLocationInReplay");
}

id objc_msgSend_authorized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorized");
}

id objc_msgSend_authorizedForWidgetUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizedForWidgetUpdates");
}

id objc_msgSend_automotive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "automotive");
}

id objc_msgSend_autoupdatingCurrentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoupdatingCurrentLocale");
}

id objc_msgSend_availabilityTileParams(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availabilityTileParams");
}

id objc_msgSend_availabilityZScoreConfidenceInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availabilityZScoreConfidenceInterval");
}

id objc_msgSend_availableData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableData");
}

id objc_msgSend_availableVenuesState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableVenuesState");
}

id objc_msgSend_averageIntensity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "averageIntensity");
}

id objc_msgSend_averageQuantity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "averageQuantity");
}

id objc_msgSend_averageRSRP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "averageRSRP");
}

id objc_msgSend_avlTilePathOverrideForTest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "avlTilePathOverrideForTest");
}

id objc_msgSend_awdLogDistance_status_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awdLogDistance:status:description:");
}

id objc_msgSend_awdMotionFitnessStrideCalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awdMotionFitnessStrideCalibration:");
}

id objc_msgSend_azimuth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "azimuth");
}

id objc_msgSend_backgroundLocationAssertionForPID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundLocationAssertionForPID:");
}

id objc_msgSend_backgroundSessionConfigurationWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundSessionConfigurationWithIdentifier:");
}

id objc_msgSend_bandAsString_forRAT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bandAsString:forRAT:");
}

id objc_msgSend_bandclass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bandclass");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseHeight");
}

id objc_msgSend_batchEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchEndpoint");
}

id objc_msgSend_batteryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryData");
}

id objc_msgSend_batteryLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryLevel");
}

id objc_msgSend_batterySaverModeEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batterySaverModeEnabled");
}

id objc_msgSend_beacon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beacon");
}

id objc_msgSend_beaconForUUID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beaconForUUID:completion:");
}

id objc_msgSend_beaconGroupForIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beaconGroupForIdentifier:completion:");
}

id objc_msgSend_beaconPayloadCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beaconPayloadCache");
}

id objc_msgSend_beaconsChangedPopupBackoff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beaconsChangedPopupBackoff");
}

id objc_msgSend_becameFatallyBlocked_index_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becameFatallyBlocked:index:");
}

id objc_msgSend_beepOnMoveHigh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beepOnMoveHigh");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_beginIntervalForAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginIntervalForAccess:");
}

id objc_msgSend_beginTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTime");
}

id objc_msgSend_beginWorkoutSession_withOverview_enableWorkoutChangeDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginWorkoutSession:withOverview:enableWorkoutChangeDetection:");
}

id objc_msgSend_betaBlockerUse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "betaBlockerUse");
}

id objc_msgSend_biasInMeters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "biasInMeters");
}

id objc_msgSend_bikeableSide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bikeableSide");
}

id objc_msgSend_binAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binAccuracy:");
}

id objc_msgSend_binArrayToArchivedData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binArrayToArchivedData:");
}

id objc_msgSend_binForAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForAccuracy:");
}

id objc_msgSend_binForAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForAge:");
}

id objc_msgSend_binForConvergingSessionCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForConvergingSessionCount:");
}

id objc_msgSend_binForConvergingSessionDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForConvergingSessionDuration:");
}

id objc_msgSend_binForDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForDistance:");
}

id objc_msgSend_binForFenceRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForFenceRadius:");
}

id objc_msgSend_binForNumber_bins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForNumber:bins:");
}

id objc_msgSend_binForSteps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForSteps:");
}

id objc_msgSend_binForTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binForTimeInterval:");
}

id objc_msgSend_binIndexForValueIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binIndexForValueIn:");
}

id objc_msgSend_binIntervalForRawSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binIntervalForRawSpeed:");
}

id objc_msgSend_binLocationAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binLocationAge:");
}

id objc_msgSend_binRatio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binRatio:");
}

id objc_msgSend_binTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binTimeInterval:");
}

id objc_msgSend_binarySampleRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binarySampleRepresentation");
}

id objc_msgSend_binaryVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binaryVersion");
}

id objc_msgSend_bins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bins");
}

id objc_msgSend_binsSortedByInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "binsSortedByInterval");
}

id objc_msgSend_bleAdvertisementTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bleAdvertisementTimestamp");
}

id objc_msgSend_bleChannel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bleChannel");
}

id objc_msgSend_bleRSSI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bleRSSI");
}

id objc_msgSend_bloodType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bloodType");
}

id objc_msgSend_bluetoothAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothAddress");
}

id objc_msgSend_bluetoothAudioActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothAudioActive");
}

id objc_msgSend_bluetoothState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bluetoothState");
}

id objc_msgSend_bodyMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bodyMetrics");
}

id objc_msgSend_bomScanEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bomScanEnabled");
}

id objc_msgSend_bomSoundCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bomSoundCount");
}

id objc_msgSend_BOOLForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_BOOLForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:defaultValue:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bootR1Time(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootR1Time");
}

id objc_msgSend_bootstrapAdvertisements(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bootstrapAdvertisements");
}

id objc_msgSend_boundaryType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundaryType");
}

id objc_msgSend_boundedIncrementBetweenStart_andStop_withCurrent_withIncrement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundedIncrementBetweenStart:andStop:withCurrent:withIncrement:");
}

id objc_msgSend_boundingBox(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundingBox");
}

id objc_msgSend_boutClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boutClients");
}

id objc_msgSend_boutType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boutType");
}

id objc_msgSend_bsid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bsid");
}

id objc_msgSend_btAddressData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btAddressData");
}

id objc_msgSend_btFindingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "btFindingState");
}

id objc_msgSend_buffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buffer");
}

id objc_msgSend_bufferedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bufferedDevices");
}

id objc_msgSend_buildEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildEvent");
}

id objc_msgSend_buildEventWithAdvWithFirstTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildEventWithAdvWithFirstTimeStamp:");
}

id objc_msgSend_buildEventWithLocationWithFirstTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildEventWithLocationWithFirstTimeStamp:");
}

id objc_msgSend_buildEventWithMotionWithFirstTimeStamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildEventWithMotionWithFirstTimeStamp:");
}

id objc_msgSend_buildNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildNumber");
}

id objc_msgSend_buildingID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildingID");
}

id objc_msgSend_bulkUploadRecordIDsShouldReupload_shouldUploadToOutputZone_shouldUploadToInputZone_shouldThrottle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bulkUploadRecordIDsShouldReupload:shouldUploadToOutputZone:shouldUploadToInputZone:shouldThrottle:");
}

id objc_msgSend_bundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundle");
}

id objc_msgSend_bundleContainerURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleContainerURL");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleId");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleIds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIds");
}

id objc_msgSend_bundlePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundlePath");
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleURL");
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_bundleWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithURL:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cacheEmergencyAWDStatistics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheEmergencyAWDStatistics:");
}

id objc_msgSend_cacheInfoPlistKeysForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheInfoPlistKeysForClient:");
}

id objc_msgSend_cachedPlaceInferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedPlaceInferences");
}

id objc_msgSend_cadence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cadence");
}

id objc_msgSend_cadenceMean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cadenceMean");
}

id objc_msgSend_calTrackHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calTrackHandler");
}

id objc_msgSend_calculateAndSendAltitudeFromLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateAndSendAltitudeFromLocation");
}

id objc_msgSend_calculateDepthFromPressure_withSurfacePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateDepthFromPressure:withSurfacePressure:");
}

id objc_msgSend_calculateDispersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateDispersion:");
}

id objc_msgSend_calculateDistance_b_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateDistance:b:");
}

id objc_msgSend_calculateFilterSurfaceCal_withSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calculateFilterSurfaceCal:withSuccess:");
}

id objc_msgSend_calendarWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calendarWithIdentifier:");
}

id objc_msgSend_calibration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibration");
}

id objc_msgSend_calibrationDataVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibrationDataVersion");
}

id objc_msgSend_calibrationTrackCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calibrationTrackCallback");
}

id objc_msgSend_callStatusHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callStatusHandler:");
}

id objc_msgSend_callUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callUUID");
}

id objc_msgSend_callbackAdapter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callbackAdapter");
}

id objc_msgSend_callbackHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callbackHandler");
}

id objc_msgSend_calls(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calls");
}

id objc_msgSend_calorieData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "calorieData");
}

id objc_msgSend_cameraImageResolution(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cameraImageResolution");
}

id objc_msgSend_cameraIntrinsics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cameraIntrinsics");
}

id objc_msgSend_cameraPose(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cameraPose");
}

id objc_msgSend_canAccumulateForSecs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAccumulateForSecs:");
}

id objc_msgSend_canAddToMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddToMonitor");
}

id objc_msgSend_canPublish(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canPublish");
}

id objc_msgSend_canStartRecording_settings_publisher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canStartRecording:settings:publisher:");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAISFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAISFetchTimeoutForDevice:");
}

id objc_msgSend_cancelAnyPendingPlaySound(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAnyPendingPlaySound");
}

id objc_msgSend_cancelConnectionAttemptToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelConnectionAttemptToDevice:");
}

id objc_msgSend_cancelConnectionEvaluationForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelConnectionEvaluationForDevice:");
}

id objc_msgSend_cancelConnectionTimeoutForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelConnectionTimeoutForPeripheral:");
}

id objc_msgSend_cancelDeferredStartTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDeferredStartTimer");
}

id objc_msgSend_cancelDeferredStopTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDeferredStopTimer");
}

id objc_msgSend_cancelDisconnectionOnMissingBeaconWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDisconnectionOnMissingBeaconWithUUID:");
}

id objc_msgSend_cancelFirmwareStagingForAccessory_assetID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelFirmwareStagingForAccessory:assetID:");
}

id objc_msgSend_cancelPeripheralConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPeripheralConnection:");
}

id objc_msgSend_cancelPeripheralConnection_forUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPeripheralConnection:forUUID:");
}

id objc_msgSend_cancelTimeoutForTask_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTimeoutForTask:dictionary:");
}

id objc_msgSend_cancelTimers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTimers");
}

id objc_msgSend_cancelTokenFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelTokenFetchTimeoutForDevice:");
}

id objc_msgSend_capAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capAccuracy:");
}

id objc_msgSend_capabilityChangeClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capabilityChangeClients");
}

id objc_msgSend_carryingItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "carryingItems");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_catalogWorkoutId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catalogWorkoutId");
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "category");
}

id objc_msgSend_categorySampleWithType_value_startDate_endDate_device_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categorySampleWithType:value:startDate:endDate:device:metadata:");
}

id objc_msgSend_categoryTypeForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "categoryTypeForIdentifier:");
}

id objc_msgSend_catherine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "catherine");
}

id objc_msgSend_cdmaCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaCellTowerAtIndex:");
}

id objc_msgSend_cdmaCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaCellTowers");
}

id objc_msgSend_cdmaCellTowersCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaCellTowersCount");
}

id objc_msgSend_cdmaEvdoTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaEvdoTowerAtIndex:");
}

id objc_msgSend_cdmaEvdoTowersCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaEvdoTowersCount");
}

id objc_msgSend_cellAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellAvailable");
}

id objc_msgSend_cellID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellID");
}

id objc_msgSend_cellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellTowerAtIndex:");
}

id objc_msgSend_cellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellTowers");
}

id objc_msgSend_cellTowersCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellTowersCount");
}

id objc_msgSend_cellWifiEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellWifiEndpoint");
}

id objc_msgSend_cellular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellular");
}

id objc_msgSend_cellularBand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularBand");
}

id objc_msgSend_cellularDataPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularDataPossible");
}

id objc_msgSend_cellularRAT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularRAT");
}

id objc_msgSend_celsius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "celsius");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_centralManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centralManager");
}

id objc_msgSend_centroidOfLocationVector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centroidOfLocationVector:");
}

id objc_msgSend_cfAbsTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cfAbsTimestamp");
}

id objc_msgSend_cfAbsoluteTimeS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cfAbsoluteTimeS");
}

id objc_msgSend_changeFencesStateMatchingHandoffTags_forDeviceID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeFencesStateMatchingHandoffTags:forDeviceID:completion:");
}

id objc_msgSend_changeReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeReason");
}

id objc_msgSend_changeRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeRequest");
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changeType");
}

id objc_msgSend_changedDueToSimRemoval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changedDueToSimRemoval");
}

id objc_msgSend_channel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "channel");
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterAtIndex:");
}

id objc_msgSend_characteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristic");
}

id objc_msgSend_characteristicPayload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicPayload");
}

id objc_msgSend_characteristicUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristicUUID");
}

id objc_msgSend_characteristics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characteristics");
}

id objc_msgSend_checkAllNotificationStatuses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAllNotificationStatuses");
}

id objc_msgSend_checkAndRestartRsrpTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAndRestartRsrpTimer");
}

id objc_msgSend_checkAndSendMitigation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAndSendMitigation");
}

id objc_msgSend_checkAppInstallationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAppInstallationStatus");
}

id objc_msgSend_checkApplications_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkApplications:withReply:");
}

id objc_msgSend_checkAuthorization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAuthorization");
}

id objc_msgSend_checkCoreAnalyticsPermissions_rawPaceForLUT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkCoreAnalyticsPermissions:rawPaceForLUT:");
}

id objc_msgSend_checkCrashesCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkCrashesCommand");
}

id objc_msgSend_checkCrashesTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkCrashesTask");
}

id objc_msgSend_checkDailyResetEligible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDailyResetEligible:");
}

id objc_msgSend_checkDeferMobilityCompanionSyncActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDeferMobilityCompanionSyncActivity:");
}

id objc_msgSend_checkDeferRequestForBoutsActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDeferRequestForBoutsActivity:");
}

id objc_msgSend_checkDeferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDeferral:");
}

id objc_msgSend_checkDiminishedMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkDiminishedMode");
}

id objc_msgSend_checkEmergencyCallStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkEmergencyCallStatus");
}

id objc_msgSend_checkForBoutsReadyToProcessWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForBoutsReadyToProcessWithCompletion:activity:");
}

id objc_msgSend_checkForDeletionOfVO2MaxData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForDeletionOfVO2MaxData:");
}

id objc_msgSend_checkForHistoricalComputeTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForHistoricalComputeTrigger:");
}

id objc_msgSend_checkForLocationStateTransition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForLocationStateTransition");
}

id objc_msgSend_checkForMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForMonitoring");
}

id objc_msgSend_checkHawkeyeDataValidity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkHawkeyeDataValidity:");
}

id objc_msgSend_checkHelloMaintenanceTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkHelloMaintenanceTask:");
}

id objc_msgSend_checkIfAllDevicesLastRecentlyDisconnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkIfAllDevicesLastRecentlyDisconnected");
}

id objc_msgSend_checkIfIndexIsNewAndSubmit_forNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkIfIndexIsNewAndSubmit:forNow:");
}

id objc_msgSend_checkIfTwoDevicesHaveSamePeripheral_device_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkIfTwoDevicesHaveSamePeripheral:device:");
}

id objc_msgSend_checkInForActivityWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkInForActivityWithIdentifier:");
}

id objc_msgSend_checkLocationAuthorization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkLocationAuthorization");
}

id objc_msgSend_checkLocationServicesStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkLocationServicesStatus");
}

id objc_msgSend_checkMaintainableDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkMaintainableDevices:");
}

id objc_msgSend_checkNearOrAtHome_horizontalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkNearOrAtHome:horizontalAccuracy:");
}

id objc_msgSend_checkPoshDataValidity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkPoshDataValidity:");
}

id objc_msgSend_checkPreHelloConditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkPreHelloConditions");
}

id objc_msgSend_checkPrepareRanging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkPrepareRanging");
}

id objc_msgSend_checkResourceIsReachableAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkResourceIsReachableAndReturnError:");
}

id objc_msgSend_checkSyncStoreState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSyncStoreState");
}

id objc_msgSend_checkSyncStoreStateAfterBoot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSyncStoreStateAfterBoot");
}

id objc_msgSend_checkSyncStoreStateAfterQuickSwitch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSyncStoreStateAfterQuickSwitch");
}

id objc_msgSend_checkSyncStoreStateAftreRestrictionChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSyncStoreStateAftreRestrictionChange");
}

id objc_msgSend_checkSyncStoreStateOnCompanion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSyncStoreStateOnCompanion");
}

id objc_msgSend_checkSyncStoreStateWhenDevicesConnectAfterDisconnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkSyncStoreStateWhenDevicesConnectAfterDisconnection");
}

id objc_msgSend_checkToSendDistancePercentageCoreAnalytics_mobilityDistance_rawSpeed_rawDist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkToSendDistancePercentageCoreAnalytics:mobilityDistance:rawSpeed:rawDist:");
}

id objc_msgSend_checkValidTrack_associatedEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkValidTrack:associatedEntry:");
}

id objc_msgSend_checkVehicleConnectionStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkVehicleConnectionStatus");
}

id objc_msgSend_checkWeakPersistentClientWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkWeakPersistentClientWithIdentifier:");
}

id objc_msgSend_checkforLeashEligibilityChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkforLeashEligibilityChanges");
}

id objc_msgSend_chooseUncertaintyDuringWorkout_withAltitude_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chooseUncertaintyDuringWorkout:withAltitude:atTime:");
}

id objc_msgSend_choreaDetectionService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choreaDetectionService");
}

id objc_msgSend_ci(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ci");
}

id objc_msgSend_ckp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ckp");
}

id objc_msgSend_clVisionNotificationAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clVisionNotificationAvailable:");
}

id objc_msgSend_cl_deepCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cl_deepCopy");
}

id objc_msgSend_cl_deepMutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cl_deepMutableCopy");
}

id objc_msgSend_cl_hexadecimalString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cl_hexadecimalString");
}

id objc_msgSend_classNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classNamed:");
}

id objc_msgSend_classifyLoiTypeForLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifyLoiTypeForLocation:");
}

id objc_msgSend_classifySteadinessWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifySteadinessWithCompletion:activity:");
}

id objc_msgSend_classifyingStoreForHarvester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifyingStoreForHarvester:");
}

id objc_msgSend_classifyingStoreForHarvesterWithSubArchiving_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classifyingStoreForHarvesterWithSubArchiving:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_cleanCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanCache");
}

id objc_msgSend_cleanHistoricalMslpArrayForForceRebase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanHistoricalMslpArrayForForceRebase:");
}

id objc_msgSend_cleanUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUp");
}

id objc_msgSend_cleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUp:");
}

id objc_msgSend_cleanUpIncludingDerivedFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpIncludingDerivedFeatures:");
}

id objc_msgSend_cleanUpTAUnknownBeaconRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanUpTAUnknownBeaconRecord:");
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanup");
}

id objc_msgSend_cleanupPackets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cleanupPackets");
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clear");
}

id objc_msgSend_clearAllLogs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllLogs");
}

id objc_msgSend_clearAllTiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAllTiles");
}

id objc_msgSend_clearAndRemoveAlarm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAndRemoveAlarm:");
}

id objc_msgSend_clearBuildingTiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearBuildingTiles");
}

id objc_msgSend_clearCalibrations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCalibrations");
}

id objc_msgSend_clearCdmaCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCdmaCellTowers");
}

id objc_msgSend_clearCdmaEvdoTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCdmaEvdoTowers");
}

id objc_msgSend_clearCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearCellTowers");
}

id objc_msgSend_clearClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearClient");
}

id objc_msgSend_clearConfigurationsForUninstalledApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearConfigurationsForUninstalledApps:");
}

id objc_msgSend_clearConnectionAttemptReasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearConnectionAttemptReasons");
}

id objc_msgSend_clearData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearData");
}

id objc_msgSend_clearDataForHarvester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDataForHarvester:");
}

id objc_msgSend_clearExitAndEntryScanNetworks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearExitAndEntryScanNetworks:");
}

id objc_msgSend_clearFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFence");
}

id objc_msgSend_clearFence_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFence:forClient:");
}

id objc_msgSend_clearFence_inSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearFence:inSession:");
}

id objc_msgSend_clearInVisitRebasedMslpInPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearInVisitRebasedMslpInPlist");
}

id objc_msgSend_clearInputs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearInputs");
}

id objc_msgSend_clearInterestZones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearInterestZones");
}

id objc_msgSend_clearLastFix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLastFix");
}

id objc_msgSend_clearLatencyTimeoutAndCancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLatencyTimeoutAndCancel:");
}

id objc_msgSend_clearLocationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLocationData");
}

id objc_msgSend_clearLocationFingerprints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLocationFingerprints");
}

id objc_msgSend_clearLocationGroups(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLocationGroups");
}

id objc_msgSend_clearLogs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLogs");
}

id objc_msgSend_clearLongAggressiveTimeoutBlockForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLongAggressiveTimeoutBlockForClient:");
}

id objc_msgSend_clearLteCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearLteCellTowers");
}

id objc_msgSend_clearMacModes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearMacModes");
}

id objc_msgSend_clearMacs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearMacs");
}

id objc_msgSend_clearMarkets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearMarkets");
}

id objc_msgSend_clearMeanSeaLevelPressureArrayInPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearMeanSeaLevelPressureArrayInPlist");
}

id objc_msgSend_clearModes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearModes");
}

id objc_msgSend_clearNr5GCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearNr5GCellTowers");
}

id objc_msgSend_clearPendingFollowUpItemsWithUniqueIdentifiers_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPendingFollowUpItemsWithUniqueIdentifiers:completion:");
}

id objc_msgSend_clearPersistentStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearPersistentStore:");
}

id objc_msgSend_clearRecentMeanSeaLevelPressureArrayInPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRecentMeanSeaLevelPressureArrayInPlist");
}

id objc_msgSend_clearRegulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRegulatoryDomainEstimates");
}

id objc_msgSend_clearReunionSyncList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearReunionSyncList");
}

id objc_msgSend_clearRoadTiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRoadTiles");
}

id objc_msgSend_clearRunningTrackTiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearRunningTrackTiles");
}

id objc_msgSend_clearScdmaCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearScdmaCellTowers");
}

id objc_msgSend_clearShouldAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearShouldAlert");
}

id objc_msgSend_clearStatusBarColorAndText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearStatusBarColorAndText");
}

id objc_msgSend_clearStepArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearStepArray");
}

id objc_msgSend_clearSummaries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSummaries");
}

id objc_msgSend_clearSurroundingWifiBands(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearSurroundingWifiBands");
}

id objc_msgSend_clearTiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearTiles");
}

id objc_msgSend_clearTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearTimer");
}

id objc_msgSend_clearUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearUUID");
}

id objc_msgSend_clearVectorClocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearVectorClocks");
}

id objc_msgSend_clearWifiBands(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearWifiBands");
}

id objc_msgSend_clearWirelessAPs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearWirelessAPs");
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client");
}

id objc_msgSend_client_didChangeUsageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:didChangeUsageData:");
}

id objc_msgSend_client_didChangeUsageDataInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client:didChangeUsageDataInternal:");
}

id objc_msgSend_clientAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientAnchor");
}

id objc_msgSend_clientAnchorWithType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientAnchorWithType");
}

id objc_msgSend_clientAuthDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientAuthDate");
}

id objc_msgSend_clientAuthorizationCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientAuthorizationCache");
}

id objc_msgSend_clientCondition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientCondition");
}

id objc_msgSend_clientConnected_withNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientConnected:withNotification:");
}

id objc_msgSend_clientCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientCount");
}

id objc_msgSend_clientDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientDevices");
}

id objc_msgSend_clientEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientEvent");
}

id objc_msgSend_clientIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientIdentifier");
}

id objc_msgSend_clientInfoHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInfoHeader");
}

id objc_msgSend_clientInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInterest");
}

id objc_msgSend_clientInterestStoreSetValueForClientKey_parameterKey_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInterestStoreSetValueForClientKey:parameterKey:value:");
}

id objc_msgSend_clientKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKey");
}

id objc_msgSend_clientKeyPathFromName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathFromName:");
}

id objc_msgSend_clientKeyPathFromName_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathFromName:subIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyPathWithClientAnchor_anchorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithClientAnchor:anchorType:");
}

id objc_msgSend_clientKeyPathWithClientAnchor_anchorType_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithClientAnchor:anchorType:subIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyPathWithClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithClientKey:");
}

id objc_msgSend_clientKeyPathWithLegacyClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithLegacyClientKey:");
}

id objc_msgSend_clientKeyPathWithReplacementSubIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithReplacementSubIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyPathWithUserName_clientAnchor_anchorType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithUserName:clientAnchor:anchorType:");
}

id objc_msgSend_clientKeyPathWithUserName_clientAnchor_anchorType_subIdentityId_subIdentityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyPathWithUserName:clientAnchor:anchorType:subIdentityId:subIdentityType:");
}

id objc_msgSend_clientKeyToAuthContextMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyToAuthContextMap");
}

id objc_msgSend_clientKeyToClientInfoMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientKeyToClientInfoMap");
}

id objc_msgSend_clientLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientLocation");
}

id objc_msgSend_clientManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientManager");
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientName");
}

id objc_msgSend_clientRegistry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientRegistry");
}

id objc_msgSend_clientState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientState");
}

id objc_msgSend_clientname(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientname");
}

id objc_msgSend_clients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clients");
}

id objc_msgSend_clientsInSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientsInSession");
}

id objc_msgSend_clockWithClockIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clockWithClockIdentifier:");
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "close");
}

id objc_msgSend_closeAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeAndReturnError:");
}

id objc_msgSend_closeFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeFile");
}

id objc_msgSend_closeSessionWithState_fromClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closeSessionWithState:fromClient:");
}

id objc_msgSend_closestDistance2DFromCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "closestDistance2DFromCoordinate:");
}

id objc_msgSend_clpOutdoorEstimatorLogEntryNotificationAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clpOutdoorEstimatorLogEntryNotificationAvailable:");
}

id objc_msgSend_cmAttitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cmAttitude");
}

id objc_msgSend_cmPedometer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cmPedometer");
}

id objc_msgSend_coarseElevation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coarseElevation");
}

id objc_msgSend_coarseMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coarseMetadata");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_coefficientsUpdated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coefficientsUpdated");
}

id objc_msgSend_coex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coex");
}

id objc_msgSend_coexImpactState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coexImpactState");
}

id objc_msgSend_collect_isLocal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collect:isLocal:");
}

id objc_msgSend_collectLocationData_outputLocation_deviceLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectLocationData:outputLocation:deviceLocation:");
}

id objc_msgSend_collectMapDataOfType_aroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_callSynchronously_WithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectMapDataOfType:aroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:callSynchronously:WithReply:");
}

id objc_msgSend_collectSecondGeotagMetricWithResult_firstHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectSecondGeotagMetricWithResult:firstHorizontalAccuracy:");
}

id objc_msgSend_collectSecondGeotagMetricWithResult_firstHorizontalAccuracy_secondHorizontalAccuracy_distance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectSecondGeotagMetricWithResult:firstHorizontalAccuracy:secondHorizontalAccuracy:distance:");
}

id objc_msgSend_collectWithSubmersionQuantities_shouldLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "collectWithSubmersionQuantities:shouldLog:");
}

id objc_msgSend_columns(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "columns");
}

id objc_msgSend_combinedFavorableConditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combinedFavorableConditions");
}

id objc_msgSend_combinedSecret(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combinedSecret");
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "command");
}

id objc_msgSend_commandWithOpcode_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandWithOpcode:payload:");
}

id objc_msgSend_commandedLatency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commandedLatency");
}

id objc_msgSend_companionAppBundleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionAppBundleID");
}

id objc_msgSend_companionHeartbeat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionHeartbeat:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compatibilityInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compatibilityInfo");
}

id objc_msgSend_compatibilityObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compatibilityObject");
}

id objc_msgSend_complete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "complete");
}

id objc_msgSend_completeActivity_withNextEstimateTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeActivity:withNextEstimateTime:");
}

id objc_msgSend_completeCurrentTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeCurrentTask");
}

id objc_msgSend_completeIntervalEventForClient_endingAt_setNew_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeIntervalEventForClient:endingAt:setNew:");
}

id objc_msgSend_completeJourney(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeJourney");
}

id objc_msgSend_completeMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeMigration");
}

id objc_msgSend_completeRangingConfigure_client_data_opcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeRangingConfigure:client:data:opcode:");
}

id objc_msgSend_completeRangingDeinit_client_data_opcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeRangingDeinit:client:data:opcode:");
}

id objc_msgSend_completeRangingInit_client_data_opcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeRangingInit:client:data:opcode:");
}

id objc_msgSend_completeRangingStart_client_data_opcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeRangingStart:client:data:opcode:");
}

id objc_msgSend_completeTokenFetchForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeTokenFetchForDevice:");
}

id objc_msgSend_completedSessionsAwaitingPackets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completedSessionsAwaitingPackets");
}

id objc_msgSend_completionTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionTime");
}

id objc_msgSend_components_fromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:");
}

id objc_msgSend_components_fromDate_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "components:fromDate:toDate:options:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByCharactersInSet:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_computeAllowableAuthorizationMaskForApplication_pairingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeAllowableAuthorizationMaskForApplication:pairingID:");
}

id objc_msgSend_computeBOMScanBackoffOfDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeBOMScanBackoffOfDate:");
}

id objc_msgSend_computeCircleIntersectionAreaWithDistance_firstRadius_secondRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeCircleIntersectionAreaWithDistance:firstRadius:secondRadius:");
}

id objc_msgSend_computeCoarseLocationAndStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeCoarseLocationAndStore:");
}

id objc_msgSend_computeCoarseLocationAndStoreForType_latitude_longitude_altitude_horizontalAccuracy_verticalAccuracy_referenceFrame_config_nploiIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeCoarseLocationAndStoreForType:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:referenceFrame:config:nploiIndex:");
}

id objc_msgSend_computeHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:");
}

id objc_msgSend_computeIntervalDistributionsForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeIntervalDistributionsForKey:");
}

id objc_msgSend_computeLocalDaytimeDurationForDate_latitude_longitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeLocalDaytimeDurationForDate:latitude:longitude:");
}

id objc_msgSend_computeMD5_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeMD5:");
}

id objc_msgSend_computeMeanSeaLevelPressureWithRebasingLocationData_referenceMap_andLocationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeMeanSeaLevelPressureWithRebasingLocationData:referenceMap:andLocationType:");
}

id objc_msgSend_computePowerLevelDurationForCA(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computePowerLevelDurationForCA");
}

id objc_msgSend_computeThermalLevelDurationForCA(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeThermalLevelDurationForCA");
}

id objc_msgSend_computeWalkRunSigma_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "computeWalkRunSigma:");
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "condition");
}

id objc_msgSend_conditionLimitExceeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conditionLimitExceeded");
}

id objc_msgSend_conditionUnsupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conditionUnsupported");
}

id objc_msgSend_conditionsSatisfiedForFalseExitFromNotification_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conditionsSatisfiedForFalseExitFromNotification:handler:");
}

id objc_msgSend_confidence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confidence");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configureInitializeAndStartRavenSupervisorWithPlatformInfo_withParametersOverrideString_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureInitializeAndStartRavenSupervisorWithPlatformInfo:withParametersOverrideString:withCompletion:");
}

id objc_msgSend_configureRangingHawkeyeTaskWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureRangingHawkeyeTaskWithPayload:");
}

id objc_msgSend_configureRangingNonOwnerTaskWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureRangingNonOwnerTaskWithPayload:");
}

id objc_msgSend_configureRangingWithMacAddress_countryCode_uwbChannel_acqPreamble_trackingPreamble_interval_onTag_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureRangingWithMacAddress:countryCode:uwbChannel:acqPreamble:trackingPreamble:interval:onTag:forClient:");
}

id objc_msgSend_configureSeparatedStateHawkeyeTaskWithConfiguration_currentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureSeparatedStateHawkeyeTaskWithConfiguration:currentIndex:");
}

id objc_msgSend_conformanceMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformanceMode");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connect");
}

id objc_msgSend_connectFailedToDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectFailedToDevice:withError:");
}

id objc_msgSend_connectToDevice_withPeripheral_forcedTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToDevice:withPeripheral:forcedTimeout:");
}

id objc_msgSend_connectToDeviceWithAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToDeviceWithAddress:");
}

id objc_msgSend_connectToDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToDevices:");
}

id objc_msgSend_connectToMediaService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToMediaService");
}

id objc_msgSend_connectToMediaService_uploadConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToMediaService:uploadConfig:");
}

id objc_msgSend_connectToPeripheral_withOptions_andTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToPeripheral:withOptions:andTimeout:");
}

id objc_msgSend_connectToServiceForClient_withServiceIdentifier_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:");
}

id objc_msgSend_connectToStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectToStore");
}

id objc_msgSend_connectableDeviceCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectableDeviceCount");
}

id objc_msgSend_connectedAccessories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedAccessories");
}

id objc_msgSend_connectedVehicleAccessories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedVehicleAccessories");
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connection");
}

id objc_msgSend_connectionAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionAllowed");
}

id objc_msgSend_connectionAttemptCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionAttemptCount");
}

id objc_msgSend_connectionMaterialsForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionMaterialsForPeripheral:");
}

id objc_msgSend_connectionPriority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionPriority");
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionState");
}

id objc_msgSend_connectionToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionToken");
}

id objc_msgSend_connectionTokensForBeaconUUID_criteria_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTokensForBeaconUUID:criteria:completion:");
}

id objc_msgSend_connectionUpdateHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionUpdateHandler");
}

id objc_msgSend_consecutiveAndDistinctFromPrevVisitCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consecutiveAndDistinctFromPrevVisitCount");
}

id objc_msgSend_consecutiveVisitCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consecutiveVisitCount");
}

id objc_msgSend_conservativeEntry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conservativeEntry");
}

id objc_msgSend_considerPerformingAForcedFullSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "considerPerformingAForcedFullSync");
}

id objc_msgSend_considerPromptingForTranscriptSession_dictionary_requestType_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "considerPromptingForTranscriptSession:dictionary:requestType:withReply:");
}

id objc_msgSend_constructController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructController");
}

id objc_msgSend_constructMonitors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructMonitors");
}

id objc_msgSend_constructPolicies(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructPolicies");
}

id objc_msgSend_constructSubHarvesters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructSubHarvesters");
}

id objc_msgSend_contactID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contactID");
}

id objc_msgSend_containerIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerIdentifier");
}

id objc_msgSend_containerURLForClientWithClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerURLForClientWithClientKey:");
}

id objc_msgSend_containerWithObject_destructor_binaryVersion_typeSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerWithObject:destructor:binaryVersion:typeSize:");
}

id objc_msgSend_containingBundleRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containingBundleRecord");
}

id objc_msgSend_containsCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsCoordinate:");
}

id objc_msgSend_containsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsDate:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_containsValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsValueForKey:");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:");
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "context");
}

id objc_msgSend_continueSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueSync:");
}

id objc_msgSend_controlFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controlFlags");
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controller");
}

id objc_msgSend_convert_andObservationAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convert:andObservationAction:");
}

id objc_msgSend_convertAPToWifiData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertAPToWifiData:");
}

id objc_msgSend_convertBatteryStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertBatteryStatus:");
}

id objc_msgSend_convertCLAvengerScannerPolicyScanTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertCLAvengerScannerPolicyScanTypeToString:");
}

id objc_msgSend_convertCLAvengerScannerScanParametersToWPObjectDiscoveryOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertCLAvengerScannerScanParametersToWPObjectDiscoveryOptions:");
}

id objc_msgSend_convertCLConnectionStateChangeFromState_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertCLConnectionStateChangeFromState:toState:");
}

id objc_msgSend_convertDataBlob_toBoundStatement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertDataBlob:toBoundStatement:");
}

id objc_msgSend_convertFromDomainToMachAbsoluteTime_withFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertFromDomainToMachAbsoluteTime:withFlags:");
}

id objc_msgSend_convertLocationResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertLocationResult:");
}

id objc_msgSend_convertLoiTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertLoiTypeToString:");
}

id objc_msgSend_convertMonitoringEventToGeofenceState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertMonitoringEventToGeofenceState:");
}

id objc_msgSend_convertPocketStateToDeviceProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertPocketStateToDeviceProximity:");
}

id objc_msgSend_convertRTLocationOfInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRTLocationOfInterest:");
}

id objc_msgSend_convertSPDetectedDeviceTypeToTADeviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertSPDetectedDeviceTypeToTADeviceType:");
}

id objc_msgSend_convertSPTrackingAvoidanceErrorToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertSPTrackingAvoidanceErrorToString:");
}

id objc_msgSend_convertSPUnauthorizedTrackingObservationActionToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertSPUnauthorizedTrackingObservationActionToString:");
}

id objc_msgSend_convertStatementToDataBlobs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertStatementToDataBlobs:");
}

id objc_msgSend_convertTADetectionTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertTADetectionTypeToString:");
}

id objc_msgSend_convertToCLFitnessMachineData_deviceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToCLFitnessMachineData:deviceId:");
}

id objc_msgSend_convertToCMPedometerBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToCMPedometerBins:");
}

id objc_msgSend_convertToCMStrideCalibrationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToCMStrideCalibrationData:");
}

id objc_msgSend_convertToHexString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToHexString:");
}

id objc_msgSend_convertToLatencyFromConnectionInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToLatencyFromConnectionInterval:");
}

id objc_msgSend_convertToMaxIntervalMsFromConnectionLatency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToMaxIntervalMsFromConnectionLatency:");
}

id objc_msgSend_convertToObjectDiscoveryDataWithAdvertisementData_rssi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToObjectDiscoveryDataWithAdvertisementData:rssi:");
}

id objc_msgSend_convertToSkiEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToSkiEntry:");
}

id objc_msgSend_convertToSpringTrackerEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToSpringTrackerEntry:");
}

id objc_msgSend_convertToSwimEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertToSwimEntry:");
}

id objc_msgSend_coordinate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinate");
}

id objc_msgSend_coordinateCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinateCount");
}

id objc_msgSend_coordinates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinates");
}

id objc_msgSend_coordinates3d(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coordinates3d");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyAdrPublicKeyData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyAdrPublicKeyData:");
}

id objc_msgSend_copyBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyBins");
}

id objc_msgSend_copyBundleIdentifier_bundleType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyBundleIdentifier:bundleType:completion:");
}

id objc_msgSend_copyBundleVersion_bundleType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyBundleVersion:bundleType:completion:");
}

id objc_msgSend_copyCarrierBundleValue_key_bundleType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCarrierBundleValue:key:bundleType:error:");
}

id objc_msgSend_copyCarrierBundleValue_keyHierarchy_bundleType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCarrierBundleValue:keyHierarchy:bundleType:completion:");
}

id objc_msgSend_copyCarrierBundleValueWithDefault_key_bundleType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCarrierBundleValueWithDefault:key:bundleType:completion:");
}

id objc_msgSend_copyCellInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCellInfo:completion:");
}

id objc_msgSend_copyCurrentBias(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCurrentBias");
}

id objc_msgSend_copyDataBuffersForTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDataBuffersForTrack:");
}

id objc_msgSend_copyDataFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyDataFrom:to:");
}

id objc_msgSend_copyEmergencyMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyEmergencyMode:");
}

id objc_msgSend_copyHistory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyHistory");
}

id objc_msgSend_copyIsInHomeCountry_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyIsInHomeCountry:completion:");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyItemAtURL_toURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtURL:toURL:error:");
}

id objc_msgSend_copyMobileCountryCode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileCountryCode:completion:");
}

id objc_msgSend_copyMobileEquipmentInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileEquipmentInfo:");
}

id objc_msgSend_copyMobileNetworkCode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileNetworkCode:completion:");
}

id objc_msgSend_copyMobileSubscriberCountryCode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberCountryCode:completion:");
}

id objc_msgSend_copyMobileSubscriberNetworkCode_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberNetworkCode:completion:");
}

id objc_msgSend_copyNearbyAssetSettingsOfAccessoryFile_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyNearbyAssetSettingsOfAccessoryFile:withReply:");
}

id objc_msgSend_copyNearbyAssetSettingsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyNearbyAssetSettingsWithReply:");
}

id objc_msgSend_copyPublicKeyFromPrivateKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyPublicKeyFromPrivateKey:");
}

id objc_msgSend_copyRadioAccessTechnology_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRadioAccessTechnology:error:");
}

id objc_msgSend_copyRegistrationDisplayStatus_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRegistrationDisplayStatus:completion:");
}

id objc_msgSend_copyRegistrationIMSTransportInfo_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRegistrationIMSTransportInfo:completion:");
}

id objc_msgSend_copyRegistrationStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRegistrationStatus:error:");
}

id objc_msgSend_copyRoutineAssetSettingsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyRoutineAssetSettingsWithReply:");
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyWithZone:");
}

id objc_msgSend_core(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "core");
}

id objc_msgSend_correctiveCompensationMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "correctiveCompensationMask");
}

id objc_msgSend_correspondingApplicationRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "correspondingApplicationRecord");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForFetchRequest:error:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countHeleMaintainableDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countHeleMaintainableDevices");
}

id objc_msgSend_countLeashableDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countLeashableDevices");
}

id objc_msgSend_countMaintainableDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countMaintainableDevices");
}

id objc_msgSend_countUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countUnit");
}

id objc_msgSend_countriesAreUnchanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countriesAreUnchanged:");
}

id objc_msgSend_country(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "country");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countryCode");
}

id objc_msgSend_countryCodeDebounceInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countryCodeDebounceInterval");
}

id objc_msgSend_course(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "course");
}

id objc_msgSend_courseAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "courseAccuracy");
}

id objc_msgSend_covariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "covariance");
}

id objc_msgSend_covertLocationToString_withFirstLocationTimeStamp_withPublicKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "covertLocationToString:withFirstLocationTimeStamp:withPublicKey:");
}

id objc_msgSend_cppClientKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cppClientKey");
}

id objc_msgSend_cppObjectPtr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cppObjectPtr");
}

id objc_msgSend_crashAlertEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crashAlertEnabled");
}

id objc_msgSend_crashString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crashString");
}

id objc_msgSend_createActivityRefreshBeaconPayloadIfNeededWithLocation_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createActivityRefreshBeaconPayloadIfNeededWithLocation:payload:");
}

id objc_msgSend_createCKRecordForInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCKRecordForInput:");
}

id objc_msgSend_createCKRecordForOutput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCKRecordForOutput:");
}

id objc_msgSend_createCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCache");
}

id objc_msgSend_createCoexMetricDictForCASubmission_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCoexMetricDictForCASubmission:");
}

id objc_msgSend_createConfigureRangingTaskWithMacAddress_countryCode_uwbChannel_acqPreamble_trackingPreamble_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createConfigureRangingTaskWithMacAddress:countryCode:uwbChannel:acqPreamble:trackingPreamble:interval:");
}

id objc_msgSend_createConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createConnection");
}

id objc_msgSend_createDeinitRangingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDeinitRangingTask");
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createDumpLogsTaskOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDumpLogsTaskOfType:");
}

id objc_msgSend_createFetchAISAccessoryCapabilitiesTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISAccessoryCapabilitiesTask");
}

id objc_msgSend_createFetchAISAccessoryCategoryTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISAccessoryCategoryTask");
}

id objc_msgSend_createFetchAISBatteryLevelTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISBatteryLevelTask");
}

id objc_msgSend_createFetchAISBatteryTypeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISBatteryTypeTask");
}

id objc_msgSend_createFetchAISFindMyVersionTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISFindMyVersionTask");
}

id objc_msgSend_createFetchAISFirmwareVersionTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISFirmwareVersionTask");
}

id objc_msgSend_createFetchAISManufacturerNameTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISManufacturerNameTask");
}

id objc_msgSend_createFetchAISModelColorCodeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISModelColorCodeTask");
}

id objc_msgSend_createFetchAISModelNameTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISModelNameTask");
}

id objc_msgSend_createFetchAISNetworkIdTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISNetworkIdTask");
}

id objc_msgSend_createFetchAISProductDataTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISProductDataTask");
}

id objc_msgSend_createFetchAISProtocolImplementationTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISProtocolImplementationTask");
}

id objc_msgSend_createFetchAISSerialNumberTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAISSerialNumberTask");
}

id objc_msgSend_createFetchAccelerometerModeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAccelerometerModeTask");
}

id objc_msgSend_createFetchAccelerometerOrientationModeTaskWithConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAccelerometerOrientationModeTaskWithConfiguration");
}

id objc_msgSend_createFetchAccelerometerSlopeModeTaskWithConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchAccelerometerSlopeModeTaskWithConfiguration");
}

id objc_msgSend_createFetchBatteryStatusTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchBatteryStatusTask");
}

id objc_msgSend_createFetchCurrentPrimaryKeyTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchCurrentPrimaryKeyTask");
}

id objc_msgSend_createFetchFirmwareVersionTaskWithCrashLogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchFirmwareVersionTaskWithCrashLogs:");
}

id objc_msgSend_createFetchTxPowerTaskAsOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchTxPowerTaskAsOwner:");
}

id objc_msgSend_createFetchUserStatsTaskWithPersistence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchUserStatsTaskWithPersistence:");
}

id objc_msgSend_createFetchiCloudIdentifierTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFetchiCloudIdentifierTask");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createGetGroupStatusTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGetGroupStatusTask");
}

id objc_msgSend_createGetMultiStatusTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createGetMultiStatusTask");
}

id objc_msgSend_createInduceCrashTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createInduceCrashTask");
}

id objc_msgSend_createInitRangingTaskWithMacAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createInitRangingTaskWithMacAddress:");
}

id objc_msgSend_createIntervalEventStartingAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createIntervalEventStartingAt:");
}

id objc_msgSend_createKeyFromExternalRepresentationString_keyClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createKeyFromExternalRepresentationString:keyClass:");
}

id objc_msgSend_createKeyReconcilerWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createKeyReconcilerWithCompletion:");
}

id objc_msgSend_createLongAggressiveTimeoutBlockForClient_seconds_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createLongAggressiveTimeoutBlockForClient:seconds:withBlock:");
}

id objc_msgSend_createManagedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createManagedObjectContext");
}

id objc_msgSend_createMetricsDict_isInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMetricsDict:isInternal:");
}

id objc_msgSend_createNewBeaconPayloadwithNewLocation_oldBeaconPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewBeaconPayloadwithNewLocation:oldBeaconPayload:");
}

id objc_msgSend_createNewModules_universe_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewModules:universe:settings:");
}

id objc_msgSend_createNonPoshDeviceWithUUID_beaconType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNonPoshDeviceWithUUID:beaconType:");
}

id objc_msgSend_createPeripheralWithAddress_andIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPeripheralWithAddress:andIdentifier:");
}

id objc_msgSend_createPlaySoundTaskWithSequence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPlaySoundTaskWithSequence:");
}

id objc_msgSend_createPlayUnauthorizedSoundTaskWithSequence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPlayUnauthorizedSoundTaskWithSequence:");
}

id objc_msgSend_createPoshDeviceWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPoshDeviceWithUUID:");
}

id objc_msgSend_createPrivacyTimeOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPrivacyTimeOffset");
}

id objc_msgSend_createRandomP256PrivateKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRandomP256PrivateKey");
}

id objc_msgSend_createRangeSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRangeSession");
}

id objc_msgSend_createRequestFromCachedDict_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestFromCachedDict:error:");
}

id objc_msgSend_createRequestFromDict_baseURL_sessionID_partnerAdrPublicKeyData_deviceSessionPrivateKey_deviceSessionSecret_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRequestFromDict:baseURL:sessionID:partnerAdrPublicKeyData:deviceSessionPrivateKey:deviceSessionSecret:error:");
}

id objc_msgSend_createRollWildKeyTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createRollWildKeyTask");
}

id objc_msgSend_createServiceForClient_withServiceType_locationTypes_connectionToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createServiceForClient:withServiceType:locationTypes:connectionToken:forUser:");
}

id objc_msgSend_createSetAccelerometerOrientationModeTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetAccelerometerOrientationModeTaskWithConfiguration:");
}

id objc_msgSend_createSetAccelerometerSlopeModeTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetAccelerometerSlopeModeTaskWithConfiguration:");
}

id objc_msgSend_createSetBatteryStatusTaskWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetBatteryStatusTaskWithStatus:");
}

id objc_msgSend_createSetKeyRollTimeoutTaskWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetKeyRollTimeoutTaskWithInterval:");
}

id objc_msgSend_createSetMaxConnectionsTaskWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetMaxConnectionsTaskWithCount:");
}

id objc_msgSend_createSetNearOwnerTimeoutTaskInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetNearOwnerTimeoutTaskInSeconds:");
}

id objc_msgSend_createSetObfuscatedIdentifierTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetObfuscatedIdentifierTaskWithIdentifier:");
}

id objc_msgSend_createSetPersistentConnectionTaskWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetPersistentConnectionTaskWithState:");
}

id objc_msgSend_createSetTagTypeTaskWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetTagTypeTaskWithType:");
}

id objc_msgSend_createSetTestModeTaskWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetTestModeTaskWithMode:");
}

id objc_msgSend_createSetUnauthorizedPlaySoundRateLimitTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetUnauthorizedPlaySoundRateLimitTask:");
}

id objc_msgSend_createSetWildModeTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSetWildModeTaskWithConfiguration:");
}

id objc_msgSend_createStartAggressiveAdvertisingTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createStartAggressiveAdvertisingTaskWithTimeout:");
}

id objc_msgSend_createStartRangingTaskWithTargetEventCounter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createStartRangingTaskWithTargetEventCounter:");
}

id objc_msgSend_createStartUnauthorizedAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createStartUnauthorizedAggressiveAdvertisingTask");
}

id objc_msgSend_createStopAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createStopAggressiveAdvertisingTask");
}

id objc_msgSend_createStopPlayingSoundTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createStopPlayingSoundTask");
}

id objc_msgSend_createStopPlayingUnauthorizedSoundTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createStopPlayingUnauthorizedSoundTask");
}

id objc_msgSend_createStopRangingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createStopRangingTask");
}

id objc_msgSend_createSyncStoreState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSyncStoreState");
}

id objc_msgSend_createUnpairDeviceTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createUnpairDeviceTask");
}

id objc_msgSend_createVO2MaxInputZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createVO2MaxInputZone");
}

id objc_msgSend_createVO2MaxOutputZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createVO2MaxOutputZone");
}

id objc_msgSend_createWorkingDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createWorkingDirectory");
}

id objc_msgSend_createZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createZone:");
}

id objc_msgSend_credential(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credential");
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_credentialItemForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialItemForKey:");
}

id objc_msgSend_crossEntropyOfreference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "crossEntropyOfreference:");
}

id objc_msgSend_csgNetworkIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "csgNetworkIdentifier");
}

id objc_msgSend_cumulateReference_andRefAltitude_andRefVariance_andBaroElevation_andType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cumulateReference:andRefAltitude:andRefVariance:andBaroElevation:andType:");
}

id objc_msgSend_currentAssetPacketizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentAssetPacketizer");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentCalls(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalls");
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentConnection");
}

id objc_msgSend_currentCountrySupportsFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCountrySupportsFeature:");
}

id objc_msgSend_currentDCAwareValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDCAwareValue");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentDirectoryPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDirectoryPath");
}

id objc_msgSend_currentEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentEstimate");
}

id objc_msgSend_currentEstimates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentEstimates");
}

id objc_msgSend_currentFilename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentFilename");
}

id objc_msgSend_currentGranularity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentGranularity");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentIndex");
}

id objc_msgSend_currentInterVisitMetric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentInterVisitMetric");
}

id objc_msgSend_currentLatchedAbsoluteTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLatchedAbsoluteTimestamp");
}

id objc_msgSend_currentLatency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLatency");
}

id objc_msgSend_currentLatitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLatitude");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocation");
}

id objc_msgSend_currentLocationRequests(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocationRequests");
}

id objc_msgSend_currentLongitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLongitude");
}

id objc_msgSend_currentMitigation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentMitigation");
}

id objc_msgSend_currentPowerLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentPowerLevel");
}

id objc_msgSend_currentSOSInteractiveState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSOSInteractiveState");
}

id objc_msgSend_currentScanParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentScanParameters");
}

id objc_msgSend_currentScanType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentScanType");
}

id objc_msgSend_currentSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentSession");
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentState");
}

id objc_msgSend_currentTaskName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTaskName");
}

id objc_msgSend_currentThermalLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentThermalLevel");
}

id objc_msgSend_currentThermalLevelStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentThermalLevelStartTime");
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentThread");
}

id objc_msgSend_currentTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTicks");
}

id objc_msgSend_currentToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentToken");
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentUser");
}

id objc_msgSend_currentVisitHorizontalUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentVisitHorizontalUncertainty");
}

id objc_msgSend_currentVisitLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentVisitLocation");
}

id objc_msgSend_currentWPState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentWPState");
}

id objc_msgSend_currentWorkoutActiveStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentWorkoutActiveStateWithReply:");
}

id objc_msgSend_currentWorkoutSnapshotWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentWorkoutSnapshotWithCompletion:");
}

id objc_msgSend_currentlyActiveDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyActiveDevice");
}

id objc_msgSend_currentlyScheduled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyScheduled");
}

id objc_msgSend_currentpeakPowerStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentpeakPowerStartTime");
}

id objc_msgSend_cycleTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cycleTime");
}

id objc_msgSend_cycling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cycling");
}

id objc_msgSend_cyclingToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cyclingToNonFitnessSeconds");
}

id objc_msgSend_daemonCondition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonCondition");
}

id objc_msgSend_daemonControl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonControl");
}

id objc_msgSend_daemonEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonEvent");
}

id objc_msgSend_daemonLocationPrivate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonLocationPrivate");
}

id objc_msgSend_daemonState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonState");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataFieldKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataFieldKey");
}

id objc_msgSend_dataForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_dataIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataIdentifier");
}

id objc_msgSend_dataPayload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataPayload");
}

id objc_msgSend_dataPlanSignalingReductionOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataPlanSignalingReductionOverride");
}

id objc_msgSend_dataProtection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataProtection");
}

id objc_msgSend_dataSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSize");
}

id objc_msgSend_dataSubType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSubType");
}

id objc_msgSend_dataTaskWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataType");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:options:error:");
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithData:");
}

id objc_msgSend_dataWithHexString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithHexString:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromComponents:");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateInterval");
}

id objc_msgSend_dateSaved(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateSaved");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceNow:");
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_day(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "day");
}

id objc_msgSend_daysToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daysToDate:");
}

id objc_msgSend_debounceInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debounceInterval");
}

id objc_msgSend_debounceTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debounceTime");
}

id objc_msgSend_debounceTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debounceTimer");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_debugInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugInfo");
}

id objc_msgSend_decimalDigitCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decimalDigitCharacterSet");
}

id objc_msgSend_decimateDoulbe_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decimateDoulbe:");
}

id objc_msgSend_decimateInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decimateInteger:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeBoolForKey:");
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDoubleForKey:");
}

id objc_msgSend_decodeFloatForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeFloatForKey:");
}

id objc_msgSend_decodeInt32ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt32ForKey:");
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeInt64ForKey:");
}

id objc_msgSend_decodeIntForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntForKey:");
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeIntegerForKey:");
}

id objc_msgSend_decodeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectForKey:");
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decrementAttributionCountForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decrementAttributionCountForServiceType:");
}

id objc_msgSend_deepThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deepThreshold");
}

id objc_msgSend_deepestDepthForHK(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deepestDepthForHK");
}

id objc_msgSend_defaultBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultBins");
}

id objc_msgSend_defaultCStringEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCStringEncoding");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultFileManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultFileManager");
}

id objc_msgSend_defaultForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultForKey:defaultValue:");
}

id objc_msgSend_defaultIDSOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultIDSOptions");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultModelsDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultModelsDirectory");
}

id objc_msgSend_defaultSequence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSequence");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultStore");
}

id objc_msgSend_defaultStoresDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultStoresDirectory");
}

id objc_msgSend_defaultUseCase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultUseCase");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_deferXpcActivityIfNecessary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deferXpcActivityIfNecessary:");
}

id objc_msgSend_degreeCelsiusUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "degreeCelsiusUnit");
}

id objc_msgSend_deinitRangingHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deinitRangingHawkeyeTask");
}

id objc_msgSend_deinitRangingNonOwnerTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deinitRangingNonOwnerTask");
}

id objc_msgSend_deinitRangingOnTag_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deinitRangingOnTag:forClient:");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegateQueue");
}

id objc_msgSend_deleteAllRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteAllRecords");
}

id objc_msgSend_deleteCloudKitRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCloudKitRecords");
}

id objc_msgSend_deleteCurrentAssetFor_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCurrentAssetFor:withReply:");
}

id objc_msgSend_deleteDefaultStoreFileFromDisk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteDefaultStoreFileFromDisk");
}

id objc_msgSend_deleteHealthKitSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteHealthKitSamples:");
}

id objc_msgSend_deleteInterestZoneWithId_registeredForClientKey_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteInterestZoneWithId:registeredForClientKey:withReply:");
}

id objc_msgSend_deleteLedgerFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLedgerFile");
}

id objc_msgSend_deleteLocalVO2MaxData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteLocalVO2MaxData");
}

id objc_msgSend_deleteObject_withSyncSessionReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObject:withSyncSessionReason:");
}

id objc_msgSend_deleteObjectsOfType_predicate_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteObjectsOfType:predicate:withCompletion:");
}

id objc_msgSend_deleteRecordByMac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordByMac:");
}

id objc_msgSend_deleteRecordByMacString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordByMacString:");
}

id objc_msgSend_deleteRecordsOlderThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordsOlderThan:");
}

id objc_msgSend_deleteRecordsWithEntityName_byAndPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRecordsWithEntityName:byAndPredicates:");
}

id objc_msgSend_deleteServiceForClient_withServiceIdentifier_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteServiceForClient:withServiceIdentifier:withConnectionToken:forUser:");
}

id objc_msgSend_deleteSessionsFromHealthKit_withRetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSessionsFromHealthKit:withRetry:");
}

id objc_msgSend_deleteStoreFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteStoreFile:");
}

id objc_msgSend_deleteSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSyncEngineMetadata");
}

id objc_msgSend_deleteZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteZone:");
}

id objc_msgSend_deletedRecordIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedRecordIDs");
}

id objc_msgSend_deletedZoneIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletedZoneIDs");
}

id objc_msgSend_deletions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deletions");
}

id objc_msgSend_deliverAndReleaseNotification_withFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverAndReleaseNotification:withFlags:");
}

id objc_msgSend_deliverVisit_toClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deliverVisit:toClient:");
}

id objc_msgSend_deltaActiveTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaActiveTime");
}

id objc_msgSend_deltaDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaDistance");
}

id objc_msgSend_deltaDistanceAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaDistanceAccuracy");
}

id objc_msgSend_deltaElevation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaElevation");
}

id objc_msgSend_deltaPositionX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaPositionX");
}

id objc_msgSend_deltaPositionY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaPositionY");
}

id objc_msgSend_deltaPositionZ(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaPositionZ");
}

id objc_msgSend_deltaPosition_m(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaPosition_m");
}

id objc_msgSend_deltaSteps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaSteps");
}

id objc_msgSend_deltaSyncDidComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaSyncDidComplete:");
}

id objc_msgSend_deltaSyncObjectsInCompanionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaSyncObjectsInCompanionQueue");
}

id objc_msgSend_deltaSyncObjectsInGizmoQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaSyncObjectsInGizmoQueue");
}

id objc_msgSend_deltaVelocityX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaVelocityX");
}

id objc_msgSend_deltaVelocityY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaVelocityY");
}

id objc_msgSend_deltaVelocityZ(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deltaVelocityZ");
}

id objc_msgSend_demoDepthUpdate_bounce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "demoDepthUpdate_bounce");
}

id objc_msgSend_departureDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "departureDate");
}

id objc_msgSend_depth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "depth");
}

id objc_msgSend_deregisterForVisionNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deregisterForVisionNotifications:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionDictionary");
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptor");
}

id objc_msgSend_descriptorDimension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorDimension");
}

id objc_msgSend_descriptorWithSubscriptionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorWithSubscriptionContext:");
}

id objc_msgSend_deserializeMeta_fromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deserializeMeta:fromData:");
}

id objc_msgSend_desiredAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredAccuracy");
}

id objc_msgSend_desiredAggressiveDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredAggressiveDiscoveryScanParameters:");
}

id objc_msgSend_desiredBTFindingDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredBTFindingDiscoveryScanParameters:");
}

id objc_msgSend_desiredCoexFriendlyAggressiveDiscoveryScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredCoexFriendlyAggressiveDiscoveryScanParameters:");
}

id objc_msgSend_desiredDefaultScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredDefaultScanParameters:");
}

id objc_msgSend_desiredHawkeyeLowEnergyScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredHawkeyeLowEnergyScanParameters:");
}

id objc_msgSend_desiredKeyRollDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredKeyRollDate");
}

id objc_msgSend_desiredLatency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredLatency");
}

id objc_msgSend_desiredWatchAdvertisementBufferScanParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "desiredWatchAdvertisementBufferScanParameters:");
}

id objc_msgSend_destination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destination");
}

id objc_msgSend_destinationDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationDevice");
}

id objc_msgSend_destinationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "destinationName");
}

id objc_msgSend_detailsBitmask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailsBitmask");
}

id objc_msgSend_detectionDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectionDate");
}

id objc_msgSend_detectionMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectionMetrics");
}

id objc_msgSend_detectionSummary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectionSummary");
}

id objc_msgSend_detectionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detectionType");
}

id objc_msgSend_determineCandidateLatency_forceCandidateLatency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineCandidateLatency:forceCandidateLatency:");
}

id objc_msgSend_determineStateWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "determineStateWithContext:");
}

id objc_msgSend_developerType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "developerType");
}

id objc_msgSend_device(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device");
}

id objc_msgSend_device_checkForEchoOfOpcode_fromAck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:checkForEchoOfOpcode:fromAck:");
}

id objc_msgSend_device_didAcknowledgeCommandForTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didAcknowledgeCommandForTask:");
}

id objc_msgSend_device_didCompleteTask_withCompletionCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didCompleteTask:withCompletionCommand:");
}

id objc_msgSend_device_didFailToCompleteTask_withError_andDisconnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didFailToCompleteTask:withError:andDisconnect:");
}

id objc_msgSend_device_didPrepareForRangingWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didPrepareForRangingWithError:");
}

id objc_msgSend_device_didReceiveGroupRelationStatus_andMainteanceStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didReceiveGroupRelationStatus:andMainteanceStatus:");
}

id objc_msgSend_device_didReceiveInvalidDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didReceiveInvalidDataWithError:");
}

id objc_msgSend_device_didReceiveKeyRollIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didReceiveKeyRollIndex:");
}

id objc_msgSend_device_didReceiveRangingResponse_withOpcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didReceiveRangingResponse:withOpcode:");
}

id objc_msgSend_device_didUpdateActivePeripheral_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "device:didUpdateActivePeripheral:withError:");
}

id objc_msgSend_deviceBackedWithBeacon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceBackedWithBeacon:");
}

id objc_msgSend_deviceCapabilities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceCapabilities");
}

id objc_msgSend_deviceFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceFlags");
}

id objc_msgSend_deviceForNRDevice_fromIDSDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceForNRDevice:fromIDSDevices:");
}

id objc_msgSend_deviceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceId");
}

id objc_msgSend_deviceIdentifer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIdentifer");
}

id objc_msgSend_deviceJourneyCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceJourneyCount");
}

id objc_msgSend_deviceManagerContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagerContext");
}

id objc_msgSend_deviceObservationDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceObservationDelegate");
}

id objc_msgSend_deviceStateToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceStateToString:");
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceType");
}

id objc_msgSend_deviceTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceTypeToString:");
}

id objc_msgSend_deviceTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceTypes");
}

id objc_msgSend_deviceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceUUID");
}

id objc_msgSend_deviceUndergoingFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceUndergoingFirmwareUpdate:");
}

id objc_msgSend_deviceWithActivePeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithActivePeripheral:");
}

id objc_msgSend_deviceWithEffectiveID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithEffectiveID:");
}

id objc_msgSend_deviceWithPossiblePeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithPossiblePeripheral:");
}

id objc_msgSend_deviceWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithUUID:");
}

id objc_msgSend_deviceWithUUID_beaconType_isPosh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithUUID:beaconType:isPosh:");
}

id objc_msgSend_deviceWithUUID_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceWithUUID:withCompletion:");
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "devices");
}

id objc_msgSend_diagnosticMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticMask");
}

id objc_msgSend_diagnosticMaskIfMonitoringIsNonFunctional(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticMaskIfMonitoringIsNonFunctional");
}

id objc_msgSend_diagnosticMaskIfNonFunctional(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticMaskIfNonFunctional");
}

id objc_msgSend_diagnosticReport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticReport");
}

id objc_msgSend_dictAddIntAsArray_ofProp_withInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictAddIntAsArray:ofProp:withInt:");
}

id objc_msgSend_dictAddStringAsArray_ofProp_withStr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictAddStringAsArray:ofProp:withStr:");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryExistsAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryExistsAtKeyPath:");
}

id objc_msgSend_dictionaryForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_dictionaryForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:defaultValue:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryToSecItemFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryToSecItemFormat:");
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithCapacity:");
}

id objc_msgSend_dictionaryWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfFile:");
}

id objc_msgSend_dictionaryWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithContentsOfURL:error:");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObject:forKey:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dictionaryWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjectsAndKeys:");
}

id objc_msgSend_didAbortFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAbortFirmwareUpdate");
}

id objc_msgSend_didCauseWake(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCauseWake");
}

id objc_msgSend_didChangeConnectionStateForDevice_fromState_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didChangeConnectionStateForDevice:fromState:toState:");
}

id objc_msgSend_didCompleteAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteAggressiveAdvertisingOnDevice:withError:");
}

id objc_msgSend_didCompleteFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteFirmwareUpdate:");
}

id objc_msgSend_didCompleteHawkeyeTaskWithOpcode_fromDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteHawkeyeTaskWithOpcode:fromDevice:withError:");
}

id objc_msgSend_didCompletePlayingSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompletePlayingSoundOnTag:withError:");
}

id objc_msgSend_didCompletePlayingUnauthorizedSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompletePlayingUnauthorizedSoundOnTag:withError:");
}

id objc_msgSend_didCompleteRangingOnTag_withStatus_endReason_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteRangingOnTag:withStatus:endReason:error:");
}

id objc_msgSend_didConfigureRangingOnTag_withStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didConfigureRangingOnTag:withStatus:error:");
}

id objc_msgSend_didConnectToTag_withMacAddress_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didConnectToTag:withMacAddress:withError:");
}

id objc_msgSend_didDeinitRangingOnTag_withStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didDeinitRangingOnTag:withStatus:error:");
}

id objc_msgSend_didDisconnectFromTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didDisconnectFromTag:withError:");
}

id objc_msgSend_didDumpLogs_ofType_fromTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didDumpLogs:ofType:fromTag:withError:");
}

id objc_msgSend_didExitFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didExitFence:");
}

id objc_msgSend_didExitGeoFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didExitGeoFence");
}

id objc_msgSend_didFailFirmwareUpdateForDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFailFirmwareUpdateForDevice:withError:");
}

id objc_msgSend_didFailRangingEventCounterActionForTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFailRangingEventCounterActionForTag:error:");
}

id objc_msgSend_didFailToConnectDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFailToConnectDevice:withError:");
}

id objc_msgSend_didFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFailWithError:");
}

id objc_msgSend_didFetchAISAccessoryCapabilitiesFromDevice_accessoryCapabilities_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISAccessoryCapabilitiesFromDevice:accessoryCapabilities:error:");
}

id objc_msgSend_didFetchAISAccessoryCategoryFromDevice_accessoryCategory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISAccessoryCategoryFromDevice:accessoryCategory:error:");
}

id objc_msgSend_didFetchAISBatteryLevelFromDevice_batteryLevel_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISBatteryLevelFromDevice:batteryLevel:error:");
}

id objc_msgSend_didFetchAISBatteryTypeFromDevice_batteryType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISBatteryTypeFromDevice:batteryType:error:");
}

id objc_msgSend_didFetchAISFirmwareVersionFromDevice_firmwareVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISFirmwareVersionFromDevice:firmwareVersion:error:");
}

id objc_msgSend_didFetchAISManufacturerNameFromDevice_manufacturerName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISManufacturerNameFromDevice:manufacturerName:error:");
}

id objc_msgSend_didFetchAISModelNameFromDevice_modelName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISModelNameFromDevice:modelName:error:");
}

id objc_msgSend_didFetchAISNetworkIDFromDevice_networkID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISNetworkIDFromDevice:networkID:error:");
}

id objc_msgSend_didFetchAISProductDataFromDevice_productData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISProductDataFromDevice:productData:error:");
}

id objc_msgSend_didFetchAISProtocolImplementationFromDevice_protocolImplementation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISProtocolImplementationFromDevice:protocolImplementation:error:");
}

id objc_msgSend_didFetchAISSerialNumberFromDevice_serialNumber_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAISSerialNumberFromDevice:serialNumber:error:");
}

id objc_msgSend_didFetchAccelerometerMode_onTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAccelerometerMode:onTag:error:");
}

id objc_msgSend_didFetchAccelerometerOrientationModeConfiguration_onTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAccelerometerOrientationModeConfiguration:onTag:error:");
}

id objc_msgSend_didFetchAccelerometerSlopeModeConfiguration_onTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAccelerometerSlopeModeConfiguration:onTag:error:");
}

id objc_msgSend_didFetchAllDurians_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchAllDurians:");
}

id objc_msgSend_didFetchBatteryStatus_fromTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchBatteryStatus:fromTag:withError:");
}

id objc_msgSend_didFetchConnectionMaterial_criteria_forDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchConnectionMaterial:criteria:forDevice:error:");
}

id objc_msgSend_didFetchFirmwareVersion_fromTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchFirmwareVersion:fromTag:withError:");
}

id objc_msgSend_didFetchHawkeyeAISAccessoryCapabilitiesFromDevice_accessoryCapabilities_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISAccessoryCapabilitiesFromDevice:accessoryCapabilities:error:");
}

id objc_msgSend_didFetchHawkeyeAISAccessoryCategoryFromDevice_accessoryCategory_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISAccessoryCategoryFromDevice:accessoryCategory:error:");
}

id objc_msgSend_didFetchHawkeyeAISBatteryTypeFromDevice_batteryType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISBatteryTypeFromDevice:batteryType:error:");
}

id objc_msgSend_didFetchHawkeyeAISFindMyVersionFromDevice_findMyVersion_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISFindMyVersionFromDevice:findMyVersion:error:");
}

id objc_msgSend_didFetchHawkeyeAISManufacturerNameFromDevice_manufacturerName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISManufacturerNameFromDevice:manufacturerName:error:");
}

id objc_msgSend_didFetchHawkeyeAISModelColorCodeFromDevice_modelColorCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISModelColorCodeFromDevice:modelColorCode:error:");
}

id objc_msgSend_didFetchHawkeyeAISModelNameFromDevice_modelName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISModelNameFromDevice:modelName:error:");
}

id objc_msgSend_didFetchHawkeyeAISProductDataFromDevice_productData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeAISProductDataFromDevice:productData:error:");
}

id objc_msgSend_didFetchHawkeyeCurrentPrimaryKeyFromDevice_currentPrimaryKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeCurrentPrimaryKeyFromDevice:currentPrimaryKey:error:");
}

id objc_msgSend_didFetchHawkeyeSerialNumberFromDevice_serialNumber_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeSerialNumberFromDevice:serialNumber:error:");
}

id objc_msgSend_didFetchHawkeyeiCloudIdentifierFromDevice_iCloudIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchHawkeyeiCloudIdentifierFromDevice:iCloudIdentifier:error:");
}

id objc_msgSend_didFetchRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchRecordZoneChangesEvent");
}

id objc_msgSend_didFetchSignficantLocationsStatus_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchSignficantLocationsStatus:forClient:");
}

id objc_msgSend_didFetchStatusOfUTEnablementRequirementsWithStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchStatusOfUTEnablementRequirementsWithStatus:");
}

id objc_msgSend_didFetchTxPower_fromDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchTxPower:fromDevice:withError:");
}

id objc_msgSend_didFetchUnknownBeacons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchUnknownBeacons:");
}

id objc_msgSend_didFetchUserStats_fromTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchUserStats:fromTag:withError:");
}

id objc_msgSend_didFetchUserStats_Deprecated_fromTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchUserStats_Deprecated:fromTag:withError:");
}

id objc_msgSend_didFetchWhetherLocalFirmwareAssetIsInUseForProductGroup_andProductNumber_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didFetchWhetherLocalFirmwareAssetIsInUseForProductGroup:andProductNumber:withResult:");
}

id objc_msgSend_didGetMultiStatus_forTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didGetMultiStatus:forTag:withError:");
}

id objc_msgSend_didGetPersonalizationInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didGetPersonalizationInformation:");
}

id objc_msgSend_didInitRangingOnTag_withStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didInitRangingOnTag:withStatus:error:");
}

id objc_msgSend_didObserveScanForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didObserveScanForDevice:");
}

id objc_msgSend_didObserveUnauthorizedTrackingWithCompletion_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didObserveUnauthorizedTrackingWithCompletion:completion:");
}

id objc_msgSend_didPublishRecording_settings_publisher_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didPublishRecording:settings:publisher:");
}

id objc_msgSend_didReceiveAdvertisement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveAdvertisement:");
}

id objc_msgSend_didReceiveBeaconDifference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveBeaconDifference:");
}

id objc_msgSend_didReceiveData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveData:");
}

id objc_msgSend_didReceiveGroupRelationStatus_maintenanceStatus_onTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveGroupRelationStatus:maintenanceStatus:onTag:withError:");
}

id objc_msgSend_didReceiveHawkeyeData_withCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveHawkeyeData:withCharacteristic:error:");
}

id objc_msgSend_didReceiveHawkeyeDataFragment_withOpcode_fromDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveHawkeyeDataFragment:withOpcode:fromDevice:error:");
}

id objc_msgSend_didReceiveKeyRollIndex_onTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveKeyRollIndex:onTag:");
}

id objc_msgSend_didReceivePoshData_withCharacteristic_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceivePoshData:withCharacteristic:error:");
}

id objc_msgSend_didReceiveUarpMessage_fromDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReceiveUarpMessage:fromDevice:");
}

id objc_msgSend_didRetrievePersonalizationInfo_forDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRetrievePersonalizationInfo:forDevice:error:");
}

id objc_msgSend_didRetrievePersonalizationInformation_forTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRetrievePersonalizationInformation:forTag:error:");
}

id objc_msgSend_didRollWildKeyOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRollWildKeyOnTag:withError:");
}

id objc_msgSend_didSendChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSendChangesEvent");
}

id objc_msgSend_didSetAccelerometerOrientationModeConfigurationOnTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetAccelerometerOrientationModeConfigurationOnTag:error:");
}

id objc_msgSend_didSetAccelerometerSlopeModeConfigurationOnTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetAccelerometerSlopeModeConfigurationOnTag:error:");
}

id objc_msgSend_didSetBatteryStatusOnTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetBatteryStatusOnTag:error:");
}

id objc_msgSend_didSetHawkeyeUTMotionConfigForDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetHawkeyeUTMotionConfigForDevice:withError:");
}

id objc_msgSend_didSetNearOwnerTimeoutOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetNearOwnerTimeoutOnTag:withError:");
}

id objc_msgSend_didSetObfuscatedIdentifierOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetObfuscatedIdentifierOnTag:withError:");
}

id objc_msgSend_didSetTagTypeOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetTagTypeOnTag:withError:");
}

id objc_msgSend_didSetUnauthorizedPlaySoundRateLimitFromTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetUnauthorizedPlaySoundRateLimitFromTag:error:");
}

id objc_msgSend_didSetWildModeConfigruationOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetWildModeConfigruationOnTag:withError:");
}

id objc_msgSend_didStartAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStartAggressiveAdvertisingOnDevice:withError:");
}

id objc_msgSend_didStartPlayingSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStartPlayingSoundOnTag:withError:");
}

id objc_msgSend_didStartPlayingUnauthorizedSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStartPlayingUnauthorizedSoundOnTag:withError:");
}

id objc_msgSend_didStartRangingOnTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStartRangingOnTag:error:");
}

id objc_msgSend_didStartUnauthorizedAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStartUnauthorizedAggressiveAdvertisingOnDevice:withError:");
}

id objc_msgSend_didStopAggressiveAdvertisingOnDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStopAggressiveAdvertisingOnDevice:withError:");
}

id objc_msgSend_didStopPlayingSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStopPlayingSoundOnTag:withError:");
}

id objc_msgSend_didStopPlayingUnauthorizedSoundOnTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didStopPlayingUnauthorizedSoundOnTag:withError:");
}

id objc_msgSend_didSuccessfullyPlayUnauthorizedSound_address_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSuccessfullyPlayUnauthorizedSound:address:");
}

id objc_msgSend_didTimeoutGeoFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didTimeoutGeoFence");
}

id objc_msgSend_didUnpairFromTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUnpairFromTag:withError:");
}

id objc_msgSend_didUnsuccessfullyPlayUnauthorizedSound_address_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUnsuccessfullyPlayUnauthorizedSound:address:");
}

id objc_msgSend_didUpdateConnectionInterval_latency_supervisionTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateConnectionInterval:latency:supervisionTimeout:");
}

id objc_msgSend_didUpdateDataBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateDataBuffer:");
}

id objc_msgSend_didUpdateFireTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateFireTime");
}

id objc_msgSend_didUpdateFirmwareForDevice_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateFirmwareForDevice:error:");
}

id objc_msgSend_didUpdateFirmwareForTag_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateFirmwareForTag:error:");
}

id objc_msgSend_didUpdateInertialData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateInertialData:");
}

id objc_msgSend_didUpdateLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateLocations:");
}

id objc_msgSend_didUpdateLocations_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateLocations:withReply:");
}

id objc_msgSend_didUpdateMTUForDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateMTUForDevice");
}

id objc_msgSend_didUpdateRSSI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateRSSI:");
}

id objc_msgSend_didUpdateSource_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateSource:withData:");
}

id objc_msgSend_didUpdateWeather_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUpdateWeather:");
}

id objc_msgSend_didUseDefaultFirmwareAssetRequestForProductGroup_andProductNumber_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUseDefaultFirmwareAssetRequestForProductGroup:andProductNumber:withError:");
}

id objc_msgSend_didUseLocalFirmwareAssetRequestForProductGroup_andProductNumber_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didUseLocalFirmwareAssetRequestForProductGroup:andProductNumber:withError:");
}

id objc_msgSend_diminishedMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diminishedMode");
}

id objc_msgSend_dingAllActiveTranscriptSubscriptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dingAllActiveTranscriptSubscriptions");
}

id objc_msgSend_direction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "direction");
}

id objc_msgSend_directory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directory");
}

id objc_msgSend_directoryExists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directoryExists:");
}

id objc_msgSend_dirty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dirty");
}

id objc_msgSend_disable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disable");
}

id objc_msgSend_disableHandoffDictionaryForDeviceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableHandoffDictionaryForDeviceId:");
}

id objc_msgSend_disableSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableSource");
}

id objc_msgSend_disableSources_forContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableSources:forContext:");
}

id objc_msgSend_disabledReasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disabledReasons");
}

id objc_msgSend_disabledVenues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disabledVenues");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnect");
}

id objc_msgSend_disconnectDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectDevice:");
}

id objc_msgSend_disconnectToServiceForClient_withServiceIdentifier_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectToServiceForClient:withServiceIdentifier:withConnectionToken:forUser:");
}

id objc_msgSend_disconnectedReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectedReason");
}

id objc_msgSend_discoverCharacteristics_forService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverCharacteristics:forService:");
}

id objc_msgSend_discoverHawkeyeService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverHawkeyeService");
}

id objc_msgSend_discoverPoshService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverPoshService");
}

id objc_msgSend_discoverServices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverServices:");
}

id objc_msgSend_discoveryFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveryFlags");
}

id objc_msgSend_discoveryToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoveryToken");
}

id objc_msgSend_dispatchCompleteTokenFetchOnUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchCompleteTokenFetchOnUUID:");
}

id objc_msgSend_dispatchConnectionEvaluationOnDevice_withConnectionEvaluationTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchConnectionEvaluationOnDevice:withConnectionEvaluationTimeout:");
}

id objc_msgSend_dispatchEnableBomScanAfterBackoff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchEnableBomScanAfterBackoff");
}

id objc_msgSend_dispatchProactiveMaintenanceOnDevice_maintenanceReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchProactiveMaintenanceOnDevice:maintenanceReason:");
}

id objc_msgSend_dispatchQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchQueue");
}

id objc_msgSend_dispatchRecheckDevicesAfterDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispatchRecheckDevicesAfterDiscovery");
}

id objc_msgSend_disputedTerritoryName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disputedTerritoryName");
}

id objc_msgSend_dist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dist");
}

id objc_msgSend_distance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distance");
}

id objc_msgSend_distance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distance:");
}

id objc_msgSend_distanceFromLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceFromLocation:");
}

id objc_msgSend_distanceFromNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceFromNMinusOneStateChange");
}

id objc_msgSend_distanceFromNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceFromNMinusTwoStateChange");
}

id objc_msgSend_distanceGPS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceGPS");
}

id objc_msgSend_distanceGps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceGps");
}

id objc_msgSend_distanceMeasurementQuality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceMeasurementQuality");
}

id objc_msgSend_distanceRawPed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceRawPed");
}

id objc_msgSend_distanceToFenceBoundary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceToFenceBoundary");
}

id objc_msgSend_distanceToPreviousSeenVisit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceToPreviousSeenVisit");
}

id objc_msgSend_distanceToPreviousVisit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceToPreviousVisit");
}

id objc_msgSend_distanceUnc_m(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distanceUnc_m");
}

id objc_msgSend_distance_m(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distance_m");
}

id objc_msgSend_distantFuture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantFuture");
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "distantPast");
}

id objc_msgSend_doAsync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doAsync:");
}

id objc_msgSend_doAsync_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doAsync:withReply:");
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_doesPeripheral_haveAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesPeripheral:haveAddress:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_dominantMotionActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dominantMotionActivity");
}

id objc_msgSend_dominantMotionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dominantMotionState");
}

id objc_msgSend_dominantUserActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dominantUserActivity");
}

id objc_msgSend_donateTruthTagLabelForClient_truthLabelUUID_betweenDate_andDate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateTruthTagLabelForClient:truthLabelUUID:betweenDate:andDate:withReply:");
}

id objc_msgSend_donateTruthTagLabelForClient_truthLabelUUID_recordingTriggerUUID_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateTruthTagLabelForClient:truthLabelUUID:recordingTriggerUUID:withReply:");
}

id objc_msgSend_doneSendingPayload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doneSendingPayload");
}

id objc_msgSend_dontcollect_isLocal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dontcollect:isLocal:");
}

id objc_msgSend_doubleForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_doubleForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleForKey:defaultValue:");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_doubleValueForUnit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValueForUnit:");
}

id objc_msgSend_downgradedDuringCoexFriendlyAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downgradedDuringCoexFriendlyAggressiveDiscoveryScan");
}

id objc_msgSend_downloadAndDecompressFrom_toDecompressedDestination_withTimeout_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadAndDecompressFrom:toDecompressedDestination:withTimeout:withCompletionHandler:");
}

id objc_msgSend_downloadAvailableFirmwareUpdate_assetID_withUserIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadAvailableFirmwareUpdate:assetID:withUserIntent:");
}

id objc_msgSend_downloadIfNeeded_signalQuality_allowCenterOverCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeeded:signalQuality:allowCenterOverCellular:");
}

id objc_msgSend_downloadIfNeeded_signalQuality_allowCenterOverCellular_ringsToDownloadOverCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadIfNeeded:signalQuality:allowCenterOverCellular:ringsToDownloadOverCellular:");
}

id objc_msgSend_downloadPayloadSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadPayloadSize");
}

id objc_msgSend_downloadStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadStatus");
}

id objc_msgSend_downloadTaskWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadTaskWithRequest:");
}

id objc_msgSend_downloadTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadTaskWithRequest:completionHandler:");
}

id objc_msgSend_downloadTilesOnXPCFire(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadTilesOnXPCFire");
}

id objc_msgSend_drain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drain");
}

id objc_msgSend_driftModelConnectionEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driftModelConnectionEnabled");
}

id objc_msgSend_driftModeledCriteria(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "driftModeledCriteria");
}

id objc_msgSend_dropStreaming(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dropStreaming");
}

id objc_msgSend_dualConnTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dualConnTime");
}

id objc_msgSend_dualLeashedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dualLeashedTime");
}

id objc_msgSend_dumpDatabase_onCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpDatabase:onCompletion:");
}

id objc_msgSend_dumpLogWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpLogWithReason:");
}

id objc_msgSend_dumpNordicCrashesCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpNordicCrashesCommand");
}

id objc_msgSend_dumpNordicCrashesTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpNordicCrashesTask");
}

id objc_msgSend_dumpNordicLogsCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpNordicLogsCommand");
}

id objc_msgSend_dumpNordicLogsTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpNordicLogsTask");
}

id objc_msgSend_dumpRoseCrashesCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpRoseCrashesCommand");
}

id objc_msgSend_dumpRoseCrashesTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpRoseCrashesTask");
}

id objc_msgSend_dumpRoseLogsCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpRoseLogsCommand");
}

id objc_msgSend_dumpRoseLogsTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dumpRoseLogsTask");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_durationInSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "durationInSeconds");
}

id objc_msgSend_durationOfVisitEntryConsideration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "durationOfVisitEntryConsideration");
}

id objc_msgSend_durationOfVisitExitConsideration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "durationOfVisitExitConsideration");
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "earlierDate:");
}

id objc_msgSend_eastLng(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eastLng");
}

id objc_msgSend_ecef(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ecef");
}

id objc_msgSend_ecn0(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ecn0");
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBoolValueForSetting:");
}

id objc_msgSend_effectiveBundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBundleIdentifier");
}

id objc_msgSend_effectiveIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveIdentifier");
}

id objc_msgSend_effectiveRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveRadius");
}

id objc_msgSend_effectiveServiceMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveServiceMask");
}

id objc_msgSend_elevation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elevation");
}

id objc_msgSend_elevationAscended(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elevationAscended");
}

id objc_msgSend_elevationDescended(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "elevationDescended");
}

id objc_msgSend_eligibleForCalorimetry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleForCalorimetry");
}

id objc_msgSend_eligibleForDataCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleForDataCollection");
}

id objc_msgSend_eligibleForHealthKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleForHealthKit");
}

id objc_msgSend_emergency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergency");
}

id objc_msgSend_emergencyContacts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyContacts");
}

id objc_msgSend_emergencyContactsModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyContactsModifiedDate");
}

id objc_msgSend_emergencyEnablementAssertionActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyEnablementAssertionActive");
}

id objc_msgSend_emergencySettingsChange_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencySettingsChange:withReason:");
}

id objc_msgSend_emergencyStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyStateChange:");
}

id objc_msgSend_enable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enable");
}

id objc_msgSend_enableCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableCollection");
}

id objc_msgSend_enableMiLoAtCurrentLocationWithServiceIdentifier_withRequestIdentifier_connectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableMiLoAtCurrentLocationWithServiceIdentifier:withRequestIdentifier:connectionToken:");
}

id objc_msgSend_enablePersistentConnectionsHawkeyeTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enablePersistentConnectionsHawkeyeTask:");
}

id objc_msgSend_enableSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableSource");
}

id objc_msgSend_enableSources_forContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableSources:forContext:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enabled");
}

id objc_msgSend_encodeBinaryLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBinaryLog:");
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeBool:forKey:");
}

id objc_msgSend_encodeConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeConfiguration");
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeDouble:forKey:");
}

id objc_msgSend_encodeFilteredPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeFilteredPressure:");
}

id objc_msgSend_encodeFloat_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeFloat:forKey:");
}

id objc_msgSend_encodeHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeHeartRate:");
}

id objc_msgSend_encodeInt32_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt32:forKey:");
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt64:forKey:");
}

id objc_msgSend_encodeInt_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInt:forKey:");
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeInteger:forKey:");
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeObject:forKey:");
}

id objc_msgSend_encodePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodePressure:");
}

id objc_msgSend_encodeSystemFieldsWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeSystemFieldsWithCoder:");
}

id objc_msgSend_encodeTransmitPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeTransmitPower:");
}

id objc_msgSend_encodeWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeWithCoder:");
}

id objc_msgSend_encodedBytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedBytes");
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedData");
}

id objc_msgSend_encodedSequence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedSequence");
}

id objc_msgSend_encryptData_metaData_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptData:metaData:start:end:");
}

id objc_msgSend_encryptedValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedValues");
}

id objc_msgSend_encryptedValuesByKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedValuesByKey");
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "end");
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDate");
}

id objc_msgSend_endJunction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endJunction");
}

id objc_msgSend_endPairedSyncSessionWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endPairedSyncSessionWithError:");
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSession");
}

id objc_msgSend_endSessionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionForClient:");
}

id objc_msgSend_endSessionForClient_startingAtTime_stoppingAtTime_sequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionForClient:startingAtTime:stoppingAtTime:sequenceNumber:");
}

id objc_msgSend_endSessionMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSessionMetrics:");
}

id objc_msgSend_endTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endTime");
}

id objc_msgSend_endWorkoutSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endWorkoutSession:");
}

id objc_msgSend_endpointSelector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endpointSelector");
}

id objc_msgSend_endpointWithHostname_port_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endpointWithHostname:port:");
}

id objc_msgSend_enhancedLinkQuality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enhancedLinkQuality");
}

id objc_msgSend_enqueueTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enqueueTask:");
}

id objc_msgSend_ensureMonitoringWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureMonitoringWithType:");
}

id objc_msgSend_ensureServiceIsRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureServiceIsRunning:");
}

id objc_msgSend_ensureStop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureStop");
}

id objc_msgSend_enterFirmwareUpdateMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enterFirmwareUpdateMode");
}

id objc_msgSend_entityClass_didChangeArrowState_dueToDeauthorization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityClass:didChangeArrowState:dueToDeauthorization:");
}

id objc_msgSend_entityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entityForName:inManagedObjectContext:");
}

id objc_msgSend_entry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entry");
}

id objc_msgSend_entryDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entryDate");
}

id objc_msgSend_entryRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entryRadius");
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateKeysAndObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_enumerateObjectsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateStatisticsFromDate_toDate_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateStatisticsFromDate:toDate:withBlock:");
}

id objc_msgSend_enumerateStoredLocationsWithOptions_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateStoredLocationsWithOptions:usingBlock:");
}

id objc_msgSend_enumerateStoredLocationsWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateStoredLocationsWithOptions:withReply:");
}

id objc_msgSend_enumeratorAtURL_includingPropertiesForKeys_options_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:");
}

id objc_msgSend_eraseAllData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseAllData");
}

id objc_msgSend_eraseEverything(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseEverything");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "error");
}

id objc_msgSend_errorBackoffDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorBackoffDuration");
}

id objc_msgSend_errorMergePolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorMergePolicy");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_estimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimate");
}

id objc_msgSend_estimatedDueDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedDueDate");
}

id objc_msgSend_estimatedHRRecoveryParam(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedHRRecoveryParam");
}

id objc_msgSend_estimatedHRResponseParam(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedHRResponseParam");
}

id objc_msgSend_estimatedVo2Max(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedVo2Max");
}

id objc_msgSend_evalScanForceScreenOffOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evalScanForceScreenOffOnly");
}

id objc_msgSend_evaluateConnectionStateForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateConnectionStateForDevice:");
}

id objc_msgSend_evaluateDisconnectedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateDisconnectedDevices");
}

id objc_msgSend_evaluateLastLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateLastLocation");
}

id objc_msgSend_evaluateMotionAlarmState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateMotionAlarmState");
}

id objc_msgSend_evaluatePossibleFalseExitFromNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluatePossibleFalseExitFromNotification:");
}

id objc_msgSend_evaluator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluator");
}

id objc_msgSend_eventBody(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventBody");
}

id objc_msgSend_eventLatency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventLatency");
}

id objc_msgSend_eventToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventToString:");
}

id objc_msgSend_eventType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventType");
}

id objc_msgSend_eventTypeNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventTypeNMinusOneStateChange");
}

id objc_msgSend_eventTypeNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventTypeNMinusTwoStateChange");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_executable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executable");
}

id objc_msgSend_executableIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executableIdentity");
}

id objc_msgSend_executablePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executablePath");
}

id objc_msgSend_executableURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executableURL");
}

id objc_msgSend_executeCardioChangeEstimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeCardioChangeEstimation:");
}

id objc_msgSend_executeDailyAggregateFeatureCompute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeDailyAggregateFeatureCompute:");
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeFetchRequest:error:");
}

id objc_msgSend_executeQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeQuery:");
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRequest:error:");
}

id objc_msgSend_executeRetrocomputePreprocessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRetrocomputePreprocessing:");
}

id objc_msgSend_executeRiskModelFeatureCompute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeRiskModelFeatureCompute");
}

id objc_msgSend_executeTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executeTask:");
}

id objc_msgSend_executionDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "executionDuration");
}

id objc_msgSend_exit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exit");
}

id objc_msgSend_exitDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitDate");
}

id objc_msgSend_exitFirmwareUpdateMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitFirmwareUpdateMode");
}

id objc_msgSend_exitRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitRadius");
}

id objc_msgSend_exitVisitTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitVisitTimestamp");
}

id objc_msgSend_expectedEndDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectedEndDate");
}

id objc_msgSend_expectsResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expectsResponse");
}

id objc_msgSend_expensivelyGetIdentifyingInformation_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expensivelyGetIdentifyingInformation:forClient:");
}

id objc_msgSend_expirationAgeSecs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expirationAgeSecs");
}

id objc_msgSend_exportMicroLocationDataForMigrationWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exportMicroLocationDataForMigrationWithReply:");
}

id objc_msgSend_exportMicroLocationDatabaseTablesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exportMicroLocationDatabaseTablesWithReply:");
}

id objc_msgSend_exportedInterface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exportedInterface");
}

id objc_msgSend_extendSelectorInfoWithProtocol_bases_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendSelectorInfoWithProtocol:bases:");
}

id objc_msgSend_extensionItemForDict_withName_withPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionItemForDict:withName:withPayload:");
}

id objc_msgSend_extensionPointIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extensionPointIdentifier");
}

id objc_msgSend_externalSubmersionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externalSubmersionState");
}

id objc_msgSend_extractAnalyticsFromNotification_isInternal_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractAnalyticsFromNotification:isInternal:handler:");
}

id objc_msgSend_extractComponentFromCharPtr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractComponentFromCharPtr:");
}

id objc_msgSend_fADR(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fADR");
}

id objc_msgSend_fAPNSMessageCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fAPNSMessageCallback");
}

id objc_msgSend_fAPNSReconnectedCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fAPNSReconnectedCallback");
}

id objc_msgSend_fAPNSTokenCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fAPNSTokenCallback");
}

id objc_msgSend_fAggregateRecordsTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fAggregateRecordsTimer");
}

id objc_msgSend_fCoexCellularForCA(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fCoexCellularForCA");
}

id objc_msgSend_fCoexMetricUpdateCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fCoexMetricUpdateCallback");
}

id objc_msgSend_fCoexPowerForCA(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fCoexPowerForCA");
}

id objc_msgSend_fCoexTermalForCA(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fCoexTermalForCA");
}

id objc_msgSend_fCovariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fCovariance");
}

id objc_msgSend_fEndTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fEndTime");
}

id objc_msgSend_fH(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fH");
}

id objc_msgSend_fIsRegisteredForTileDownload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fIsRegisteredForTileDownload");
}

id objc_msgSend_fLocationCoordinates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fLocationCoordinates");
}

id objc_msgSend_fLocationHorizontalUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fLocationHorizontalUncertainty");
}

id objc_msgSend_fNextTrackStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fNextTrackStartTime");
}

id objc_msgSend_fNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fNotification");
}

id objc_msgSend_fP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fP");
}

id objc_msgSend_fQ(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fQ");
}

id objc_msgSend_fSensorRecorderQueryTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fSensorRecorderQueryTimer");
}

id objc_msgSend_fSensorRecorderSubscribeTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fSensorRecorderSubscribeTimer");
}

id objc_msgSend_fSpectatingLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fSpectatingLocation");
}

id objc_msgSend_fStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fStartTime");
}

id objc_msgSend_fState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fState");
}

id objc_msgSend_fType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fType");
}

id objc_msgSend_fUniverse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fUniverse");
}

id objc_msgSend_failAllTasksWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failAllTasksWithError:");
}

id objc_msgSend_failedRecordDeletes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedRecordDeletes");
}

id objc_msgSend_failedRecordSaves(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedRecordSaves");
}

id objc_msgSend_failedToConnectToPossiblePeripheral_withErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedToConnectToPossiblePeripheral:withErrorCode:");
}

id objc_msgSend_failedZoneDeletes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedZoneDeletes");
}

id objc_msgSend_failedZoneSaves(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedZoneSaves");
}

id objc_msgSend_fakeLastFix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fakeLastFix");
}

id objc_msgSend_favorableCellularConditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "favorableCellularConditions");
}

id objc_msgSend_features(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "features");
}

id objc_msgSend_feedAccelSample_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedAccelSample:time:");
}

id objc_msgSend_feedBodyMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedBodyMetrics:");
}

id objc_msgSend_feedElevationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedElevationData:");
}

id objc_msgSend_feedFitnessMachineData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedFitnessMachineData:");
}

id objc_msgSend_feedGyroSample_time_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedGyroSample:time:");
}

id objc_msgSend_feedInertialOdometryPacket_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedInertialOdometryPacket:atTime:");
}

id objc_msgSend_feedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedLocation:");
}

id objc_msgSend_feedStepCountUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedStepCountUpdate:");
}

id objc_msgSend_feedWeatherData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedWeatherData:");
}

id objc_msgSend_feedWorkoutEffortEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feedWorkoutEffortEstimate:");
}

id objc_msgSend_feelsLikeTemperature(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "feelsLikeTemperature");
}

id objc_msgSend_fenceCategoryForFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceCategoryForFence:");
}

id objc_msgSend_fenceCategoryType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceCategoryType");
}

id objc_msgSend_fenceEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceEventType:");
}

id objc_msgSend_fenceHistoryPerSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceHistoryPerSession");
}

id objc_msgSend_fenceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceID");
}

id objc_msgSend_fenceIDToIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceIDToIndex");
}

id objc_msgSend_fenceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceIdentifier");
}

id objc_msgSend_fenceMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceMetadata");
}

id objc_msgSend_fenceNotifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceNotifier");
}

id objc_msgSend_fenceRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceRadius");
}

id objc_msgSend_fenceSizeForFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceSizeForFence:");
}

id objc_msgSend_fenceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fenceType");
}

id objc_msgSend_fetchAISAccessoryCapabilitiesForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISAccessoryCapabilitiesForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISAccessoryCategoryForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISAccessoryCategoryForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISBatteryLevelForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISBatteryLevelForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISBatteryTypeForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISBatteryTypeForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISFirmwareVersionForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISFirmwareVersionForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISInfoForNonPoshTAUnknownBeacon_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISInfoForNonPoshTAUnknownBeacon:client:");
}

id objc_msgSend_fetchAISInfoForPoshTAUnknownBeacon_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISInfoForPoshTAUnknownBeacon:client:");
}

id objc_msgSend_fetchAISInfoForTAUnknownBeacon_client_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISInfoForTAUnknownBeacon:client:");
}

id objc_msgSend_fetchAISManufacturerNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISManufacturerNameForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISModelNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISModelNameForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISNetworkIDForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISNetworkIDForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISProductDataForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISProductDataForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISProtocolImplementationForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISProtocolImplementationForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAISSerialNumberForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAISSerialNumberForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchAccelerometerModeCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccelerometerModeCommand");
}

id objc_msgSend_fetchAccelerometerModeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccelerometerModeTask");
}

id objc_msgSend_fetchAccelerometerOrientationModeConfigurationCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccelerometerOrientationModeConfigurationCommand");
}

id objc_msgSend_fetchAccelerometerOrientationModeConfigurationTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccelerometerOrientationModeConfigurationTask");
}

id objc_msgSend_fetchAccelerometerSlopeModeConfigurationCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccelerometerSlopeModeConfigurationCommand");
}

id objc_msgSend_fetchAccelerometerSlopeModeConfigurationTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccelerometerSlopeModeConfigurationTask");
}

id objc_msgSend_fetchAccessoryBitSetWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccessoryBitSetWithReply:");
}

id objc_msgSend_fetchAccessoryCapabilitiesGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccessoryCapabilitiesGATTTask");
}

id objc_msgSend_fetchAccessoryCategoryGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccessoryCategoryGATTTask");
}

id objc_msgSend_fetchAccessoryPASCDTransmissionStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccessoryPASCDTransmissionStateWithReply:");
}

id objc_msgSend_fetchAllBeaconsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllBeaconsWithCompletion:");
}

id objc_msgSend_fetchAllBleAdvertisements(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllBleAdvertisements");
}

id objc_msgSend_fetchAllDuriansWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllDuriansWithCompletion:");
}

id objc_msgSend_fetchAllFencesCountWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllFencesCountWithReply:");
}

id objc_msgSend_fetchAllRecordZonesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllRecordZonesWithCompletionHandler:");
}

id objc_msgSend_fetchAllRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllRecords");
}

id objc_msgSend_fetchAllRecordsForMac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllRecordsForMac:");
}

id objc_msgSend_fetchAllUnknownBeaconsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAllUnknownBeaconsWithCompletion:");
}

id objc_msgSend_fetchAutomaticDNDTriggerPreferenceWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAutomaticDNDTriggerPreferenceWithReply:");
}

id objc_msgSend_fetchBackgroundInertialOdometrySamplesWithOptions_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBackgroundInertialOdometrySamplesWithOptions:handler:");
}

id objc_msgSend_fetchBackgroundInertialOdometrySamplesWithStartTime_endTime_intervalIndex_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBackgroundInertialOdometrySamplesWithStartTime:endTime:intervalIndex:completionBlock:");
}

id objc_msgSend_fetchBatteryLevelGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatteryLevelGATTTask");
}

id objc_msgSend_fetchBatteryStatusCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatteryStatusCommand");
}

id objc_msgSend_fetchBatteryStatusTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatteryStatusTask");
}

id objc_msgSend_fetchBatteryTypeGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBatteryTypeGATTTask");
}

id objc_msgSend_fetchCachedPlaceInferencesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCachedPlaceInferencesWithReply:");
}

id objc_msgSend_fetchChangesForZoneIDs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchChangesForZoneIDs:completionHandler:");
}

id objc_msgSend_fetchClientStaticRegistrationResult_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchClientStaticRegistrationResult:withReply:");
}

id objc_msgSend_fetchCoarseEquivalentForLocation_callbackQueue_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCoarseEquivalentForLocation:callbackQueue:callback:");
}

id objc_msgSend_fetchCoarseLocationForNextLOI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCoarseLocationForNextLOI:");
}

id objc_msgSend_fetchCoarseSignalEnvironmentForLatitude_longitude_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCoarseSignalEnvironmentForLatitude:longitude:withReply:");
}

id objc_msgSend_fetchConnectionTokensForDevice_onCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConnectionTokensForDevice:onCondition:");
}

id objc_msgSend_fetchConnectionTokensForDevice_usingReconciledUUID_andCriteria_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchConnectionTokensForDevice:usingReconciledUUID:andCriteria:");
}

id objc_msgSend_fetchCurrentKeyIndexCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCurrentKeyIndexCommand");
}

id objc_msgSend_fetchCurrentKeyIndexTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCurrentKeyIndexTask");
}

id objc_msgSend_fetchCurrentLocationWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchCurrentLocationWithHandler:");
}

id objc_msgSend_fetchDataAvailabilityWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDataAvailabilityWithReply:");
}

id objc_msgSend_fetchDedupedLocationOfInterestIdentifiersWithIdentifier_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDedupedLocationOfInterestIdentifiersWithIdentifier:withReply:");
}

id objc_msgSend_fetchDominantMotionActivityInInterval_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchDominantMotionActivityInInterval:handler:");
}

id objc_msgSend_fetchElevationsWithStartTime_andEndTime_andBatchSize_andElevationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchElevationsWithStartTime:andEndTime:andBatchSize:andElevationArray:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEstimatedLocationAtDate:handler:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEstimatedLocationAtDate:options:handler:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_options_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEstimatedLocationAtDate:options:withReply:");
}

id objc_msgSend_fetchEstimatedLocationAtDate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEstimatedLocationAtDate:withReply:");
}

id objc_msgSend_fetchFilteredLocations_withElevationArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFilteredLocations:withElevationArray:");
}

id objc_msgSend_fetchFindMyVersionGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFindMyVersionGATTTask");
}

id objc_msgSend_fetchFirmwareVersionGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFirmwareVersionGATTTask");
}

id objc_msgSend_fetchFirmwareVersionTaskWithCrashLogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFirmwareVersionTaskWithCrashLogs:");
}

id objc_msgSend_fetchFormattedAddress_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFormattedAddress:queue:");
}

id objc_msgSend_fetchFormattedPostalAddressesFromMeCardWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFormattedPostalAddressesFromMeCardWithReply:");
}

id objc_msgSend_fetchFromStatisticsNumberOfAdvs_accumulatedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchFromStatisticsNumberOfAdvs:accumulatedTime:");
}

id objc_msgSend_fetchGEOBuildingDataAroundCoordinate_inRadius_tileSetStyle_allowNetwork_clearTiles_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchGEOBuildingDataAroundCoordinate:inRadius:tileSetStyle:allowNetwork:clearTiles:withReply:");
}

id objc_msgSend_fetchGEORoadDataAroundCoordinate_inRadius_allowNetwork_isPedestrianOrCycling_clearTiles_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchGEORoadDataAroundCoordinate:inRadius:allowNetwork:isPedestrianOrCycling:clearTiles:withReply:");
}

id objc_msgSend_fetchGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchGroup");
}

id objc_msgSend_fetchHasConnectedDevicesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHasConnectedDevicesWithReply:");
}

id objc_msgSend_fetchHawkeyeAISAccessoryCapabilitiesForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHawkeyeAISAccessoryCapabilitiesForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISAccessoryCategoryForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHawkeyeAISAccessoryCategoryForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISFirmwareVersionForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHawkeyeAISFirmwareVersionForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISManufacturerNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHawkeyeAISManufacturerNameForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISModelNameForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHawkeyeAISModelNameForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchHawkeyeAISProductDataForTAUnknownBeacon_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchHawkeyeAISProductDataForTAUnknownBeacon:forClient:");
}

id objc_msgSend_fetchInfoForLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchInfoForLocation:withReply:");
}

id objc_msgSend_fetchIsAccessoryConnectedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsAccessoryConnectedWithReply:");
}

id objc_msgSend_fetchIsAirplaneModeEnabledWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsAirplaneModeEnabledWithReply:");
}

id objc_msgSend_fetchIsAssociatedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsAssociatedWithReply:");
}

id objc_msgSend_fetchIsBatteryConnectedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsBatteryConnectedWithReply:");
}

id objc_msgSend_fetchIsCellAvailableWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsCellAvailableWithReply:");
}

id objc_msgSend_fetchIsDeviceVehicle_deviceType_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsDeviceVehicle:deviceType:withReply:");
}

id objc_msgSend_fetchIsSaewEnabledOnQueue_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsSaewEnabledOnQueue:withReply:");
}

id objc_msgSend_fetchIsWifiAvailableWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchIsWifiAvailableWithReply:");
}

id objc_msgSend_fetchLOIForType_isSecondTry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLOIForType:isSecondTry:");
}

id objc_msgSend_fetchLOIFromCoreRoutine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLOIFromCoreRoutine");
}

id objc_msgSend_fetchLOIVisitAtStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLOIVisitAtStart");
}

id objc_msgSend_fetchLastSignificantLocationDistanceAndLatencyWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLastSignificantLocationDistanceAndLatencyWithReply:");
}

id objc_msgSend_fetchLocationClientKeysWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationClientKeysWithReply:");
}

id objc_msgSend_fetchLocationOfInterestAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestAtLocation:");
}

id objc_msgSend_fetchLocationOfInterestAtLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestAtLocation:withReply:");
}

id objc_msgSend_fetchLocationOfInterestForFence_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestForFence:handler:");
}

id objc_msgSend_fetchLocationOfInterestForRegion_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestForRegion:handler:");
}

id objc_msgSend_fetchLocationOfInterestForRegion_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestForRegion:withReply:");
}

id objc_msgSend_fetchLocationOfInterestWithIdentifier_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationOfInterestWithIdentifier:withReply:");
}

id objc_msgSend_fetchLocationSystemStateWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationSystemStateWithHandler:");
}

id objc_msgSend_fetchLocationWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationWithReply:");
}

id objc_msgSend_fetchLocationsOfInterestIfPossibleWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsOfInterestIfPossibleWithCompletionHandler:");
}

id objc_msgSend_fetchLocationsOfInterestOfType_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsOfInterestOfType:withReply:");
}

id objc_msgSend_fetchLocationsOfInterestWithinDistance_ofLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsOfInterestWithinDistance:ofLocation:withReply:");
}

id objc_msgSend_fetchLocationsWithStartTime_andEndTime_andBatchSize_andLocationArray_andVisitSearchStartIndex_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsWithStartTime:andEndTime:andBatchSize:andLocationArray:andVisitSearchStartIndex:andCompletionBlock:");
}

id objc_msgSend_fetchLocationsWithStartTime_endTime_intervalIndex_locationArray_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLocationsWithStartTime:endTime:intervalIndex:locationArray:completionBlock:");
}

id objc_msgSend_fetchLoiFromId_atTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLoiFromId:atTimestamp:");
}

id objc_msgSend_fetchLookbackWindowStartDateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchLookbackWindowStartDateWithReply:");
}

id objc_msgSend_fetchMacAddressesAmong_nearLatitude_longitude_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMacAddressesAmong:nearLatitude:longitude:withReply:");
}

id objc_msgSend_fetchManufacturerNameGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchManufacturerNameGATTTask");
}

id objc_msgSend_fetchMedicalIDDataWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMedicalIDDataWithCompletion:");
}

id objc_msgSend_fetchModelColorCodeGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchModelColorCodeGATTTask");
}

id objc_msgSend_fetchModelNameGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchModelNameGATTTask");
}

id objc_msgSend_fetchMostRecentConnectionWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMostRecentConnectionWithReply:");
}

id objc_msgSend_fetchMostRecentInVehicleStartAndExitTimesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMostRecentInVehicleStartAndExitTimesWithReply:");
}

id objc_msgSend_fetchMotionActivitiesInInterval_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMotionActivitiesInInterval:handler:");
}

id objc_msgSend_fetchMultiStatusTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMultiStatusTask");
}

id objc_msgSend_fetchNPLOI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNPLOI");
}

id objc_msgSend_fetchNextPredictedLocationsOfInterestFromLocation_startDate_timeInterval_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNextPredictedLocationsOfInterestFromLocation:startDate:timeInterval:withReply:");
}

id objc_msgSend_fetchNonOwnerAccessoryCapabilitiesPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerAccessoryCapabilitiesPoshTask");
}

id objc_msgSend_fetchNonOwnerAccessoryCapabilitiesTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerAccessoryCapabilitiesTask");
}

id objc_msgSend_fetchNonOwnerAccessoryCategoryPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerAccessoryCategoryPoshTask");
}

id objc_msgSend_fetchNonOwnerAccessoryCategoryTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerAccessoryCategoryTask");
}

id objc_msgSend_fetchNonOwnerBatteryLevelPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerBatteryLevelPoshTask");
}

id objc_msgSend_fetchNonOwnerBatteryTypePoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerBatteryTypePoshTask");
}

id objc_msgSend_fetchNonOwnerFindMyVersionTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerFindMyVersionTask");
}

id objc_msgSend_fetchNonOwnerFirmwareVersionPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerFirmwareVersionPoshTask");
}

id objc_msgSend_fetchNonOwnerFirmwareVersionTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerFirmwareVersionTask");
}

id objc_msgSend_fetchNonOwnerManufacturerNamePoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerManufacturerNamePoshTask");
}

id objc_msgSend_fetchNonOwnerManufacturerNameTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerManufacturerNameTask");
}

id objc_msgSend_fetchNonOwnerModelNamePoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerModelNamePoshTask");
}

id objc_msgSend_fetchNonOwnerModelNameTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerModelNameTask");
}

id objc_msgSend_fetchNonOwnerNetworkIdPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerNetworkIdPoshTask");
}

id objc_msgSend_fetchNonOwnerProductDataPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerProductDataPoshTask");
}

id objc_msgSend_fetchNonOwnerProductDataTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerProductDataTask");
}

id objc_msgSend_fetchNonOwnerProtocolImplementationPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerProtocolImplementationPoshTask");
}

id objc_msgSend_fetchNonOwnerSerialNumberPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerSerialNumberPoshTask");
}

id objc_msgSend_fetchNonOwnerTxPowerTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchNonOwnerTxPowerTask");
}

id objc_msgSend_fetchOdometryBatchedLocationsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchOdometryBatchedLocationsWithReply:");
}

id objc_msgSend_fetchPlaceInferenceAtCurrentLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPlaceInferenceAtCurrentLocation");
}

id objc_msgSend_fetchPlaceInferencesWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPlaceInferencesWithOptions:withReply:");
}

id objc_msgSend_fetchPossibleTerritoriesForLocation_responseQueue_responseBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPossibleTerritoriesForLocation:responseQueue:responseBlock:");
}

id objc_msgSend_fetchPredictedLocationsOfInterestBetweenStartDate_endDate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchPredictedLocationsOfInterestBetweenStartDate:endDate:withReply:");
}

id objc_msgSend_fetchProductDataGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchProductDataGATTTask");
}

id objc_msgSend_fetchQueryLocationsForWifis_useCache_piggyback_config_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchQueryLocationsForWifis:useCache:piggyback:config:withReply:");
}

id objc_msgSend_fetchReachabilityWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchReachabilityWithReply:");
}

id objc_msgSend_fetchRecentLocationsOfInterestWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecentLocationsOfInterestWithReply:");
}

id objc_msgSend_fetchRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecord:");
}

id objc_msgSend_fetchRecordsWithEntityName_byAndPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRecordsWithEntityName:byAndPredicates:");
}

id objc_msgSend_fetchRelatedLoisForLoi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRelatedLoisForLoi:");
}

id objc_msgSend_fetchRemoteStatusWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRemoteStatusWithReply:");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRequestWithEntityName:");
}

id objc_msgSend_fetchRoutineModeFromLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchRoutineModeFromLocation:withReply:");
}

id objc_msgSend_fetchScanResultWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchScanResultWithReply:");
}

id objc_msgSend_fetchSignalStrengthMeasurementForSim_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSignalStrengthMeasurementForSim:withReply:");
}

id objc_msgSend_fetchSignalStrengthMeasurements(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSignalStrengthMeasurements");
}

id objc_msgSend_fetchStepCountInInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchStepCountInInterval:");
}

id objc_msgSend_fetchStoredVisitsWithOptions_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchStoredVisitsWithOptions:handler:");
}

id objc_msgSend_fetchStoredVisitsWithOptions_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchStoredVisitsWithOptions:withReply:");
}

id objc_msgSend_fetchTxPowerGATTTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTxPowerGATTTask");
}

id objc_msgSend_fetchTxPowerTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTxPowerTask");
}

id objc_msgSend_fetchUmtsApnForInstance_WithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUmtsApnForInstance:WithReply:");
}

id objc_msgSend_fetchUmtsApnWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUmtsApnWithReply:");
}

id objc_msgSend_fetchUserRecordIDWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserRecordIDWithCompletionHandler:");
}

id objc_msgSend_fetchUserStatsCommandWithPersistence_v0_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserStatsCommandWithPersistence_v0:");
}

id objc_msgSend_fetchUserStatsCommandWithPersistence_v1_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserStatsCommandWithPersistence_v1:");
}

id objc_msgSend_fetchUserStatsTaskWithPersistence_v0_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserStatsTaskWithPersistence_v0:");
}

id objc_msgSend_fetchUserStatsTaskWithPersistence_v1_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserStatsTaskWithPersistence_v1:");
}

id objc_msgSend_fetchUserStatsTaskWithPersistence_v2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchUserStatsTaskWithPersistence_v2:");
}

id objc_msgSend_fetchVehicularDndOperatorStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularDndOperatorStateWithReply:");
}

id objc_msgSend_fetchVehicularDndStateAndHintsAndOperatorStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularDndStateAndHintsAndOperatorStateWithReply:");
}

id objc_msgSend_fetchVehicularDndStateAndHintsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularDndStateAndHintsWithReply:");
}

id objc_msgSend_fetchVehicularFalsePositiveSuppressionStatusWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVehicularFalsePositiveSuppressionStatusWithReply:");
}

id objc_msgSend_fetchVisitStatusAtStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchVisitStatusAtStart");
}

id objc_msgSend_fetchWhetherLocalFirmwareAssetIsInUseForProductGroup_andProductNumber_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchWhetherLocalFirmwareAssetIsInUseForProductGroup:andProductNumber:forClient:");
}

id objc_msgSend_fetchWirelessModemClientCountWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchWirelessModemClientCountWithReply:");
}

id objc_msgSend_fetchWorkoutCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchWorkoutCount:");
}

id objc_msgSend_fetchedDatabaseChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchedDatabaseChangesEvent");
}

id objc_msgSend_fetchedRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchedRecordZoneChangesEvent");
}

id objc_msgSend_fileDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileDescriptor");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileHandleForReadWrite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadWrite");
}

id objc_msgSend_fileHandleForReadingAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingAtPath:");
}

id objc_msgSend_fileHandleForReadingFromURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForReadingFromURL:error:");
}

id objc_msgSend_fileHandleForUpdatingURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForUpdatingURL:error:");
}

id objc_msgSend_fileHandleForWritingAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileHandleForWritingAtPath:");
}

id objc_msgSend_fileManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileManager");
}

id objc_msgSend_fileModificationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileModificationDate");
}

id objc_msgSend_filePosixPermissions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filePosixPermissions");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSize");
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileSystemRepresentation");
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_fileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:");
}

id objc_msgSend_fileURLWithPath_isDirectory_relativeToURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:isDirectory:relativeToURL:");
}

id objc_msgSend_fileURLWithPathComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPathComponents:");
}

id objc_msgSend_filename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filename");
}

id objc_msgSend_fillFallThresholds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillFallThresholds:");
}

id objc_msgSend_fillOtherFallModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillOtherFallModel:");
}

id objc_msgSend_fillSlipFallModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillSlipFallModel:");
}

id objc_msgSend_fillTripFallModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fillTripFallModel:");
}

id objc_msgSend_filterUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filterUsingPredicate:");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredElevation_absAltUncertainty_withTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredElevation:absAltUncertainty:withTimestamp:");
}

id objc_msgSend_filteredPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredPressure");
}

id objc_msgSend_filteredVo2Max(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredVo2Max");
}

id objc_msgSend_finalizeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finalizeWithError:");
}

id objc_msgSend_findBuildingsNear_radius_tileSetStyle_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findBuildingsNear:radius:tileSetStyle:handler:completionHandler:");
}

id objc_msgSend_findCandidateServersWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findCandidateServersWithCompletion:");
}

id objc_msgSend_findComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findComponent:");
}

id objc_msgSend_findMyAppDidBackgroundOrExitHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findMyAppDidBackgroundOrExitHandler");
}

id objc_msgSend_findNearestDeviceLocationWithBALocationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findNearestDeviceLocationWithBALocationTime:");
}

id objc_msgSend_findRaytracingDataNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findRaytracingDataNear:radius:handler:completionHandler:");
}

id objc_msgSend_findRoadsNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findRoadsNear:radius:handler:completionHandler:");
}

id objc_msgSend_findRunningTrackFlagsNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findRunningTrackFlagsNear:radius:handler:completionHandler:");
}

id objc_msgSend_findRunningTracksNear_radius_handler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "findRunningTracksNear:radius:handler:completionHandler:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finish");
}

id objc_msgSend_finishDecoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishDecoding");
}

id objc_msgSend_finishEncoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishEncoding");
}

id objc_msgSend_finishMaintainingDevice_withReason_andCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishMaintainingDevice:withReason:andCategory:");
}

id objc_msgSend_finishTasksAndInvalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishTasksAndInvalidate");
}

id objc_msgSend_finishUnlocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishUnlocked");
}

id objc_msgSend_finishWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishWithCompletion:");
}

id objc_msgSend_finished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finished");
}

id objc_msgSend_finished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finished:");
}

id objc_msgSend_fire(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fire");
}

id objc_msgSend_fireAlarm_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireAlarm:error:");
}

id objc_msgSend_fireEventAlarm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireEventAlarm:");
}

id objc_msgSend_fireInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireInterval");
}

id objc_msgSend_fireMotionAlarm(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireMotionAlarm");
}

id objc_msgSend_fireTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fireTime");
}

id objc_msgSend_firmwareDownloadAssetsCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareDownloadAssetsCharacteristic");
}

id objc_msgSend_firmwareDownloadAssetsReadyCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareDownloadAssetsReadyCharacteristic");
}

id objc_msgSend_firmwareDownloadCommandCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareDownloadCommandCharacteristic");
}

id objc_msgSend_firmwareRevision(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareRevision");
}

id objc_msgSend_firmwareUpdateMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareUpdateMode");
}

id objc_msgSend_firmwareUpdateReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareUpdateReboot");
}

id objc_msgSend_firmwareUpdateSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareUpdateSession");
}

id objc_msgSend_firmwareVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firmwareVersion");
}

id objc_msgSend_firstAlarm(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstAlarm");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstStepTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstStepTime");
}

id objc_msgSend_firwmareDownloadStatusCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firwmareDownloadStatusCharacteristic");
}

id objc_msgSend_fitnessModeStateMachine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fitnessModeStateMachine");
}

id objc_msgSend_fitnessPlusWorkoutInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fitnessPlusWorkoutInstance:");
}

id objc_msgSend_fitnessTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fitnessTracking");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_floor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floor");
}

id objc_msgSend_flowlineOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowlineOffset");
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flush");
}

id objc_msgSend_flushAll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushAll");
}

id objc_msgSend_flushAuthDates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushAuthDates");
}

id objc_msgSend_flushData_userProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushData:userProfile:");
}

id objc_msgSend_flushInMemoryDataWithCompletionQueue_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushInMemoryDataWithCompletionQueue:completionBlock:");
}

id objc_msgSend_flushInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushInterest");
}

id objc_msgSend_flushToFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushToFile");
}

id objc_msgSend_fm_hexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fm_hexString");
}

id objc_msgSend_forceCompanionHeartbeat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceCompanionHeartbeat");
}

id objc_msgSend_forceEnableLeash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceEnableLeash");
}

id objc_msgSend_forceEnablePosh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceEnablePosh");
}

id objc_msgSend_forceGPSIfSurfaceCalStale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceGPSIfSurfaceCalStale");
}

id objc_msgSend_forceLocationAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceLocationAtTime:");
}

id objc_msgSend_forceMaintenanceConnectionsOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceMaintenanceConnectionsOverride");
}

id objc_msgSend_forceNonAppleConnections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceNonAppleConnections");
}

id objc_msgSend_forcePoshAirPods(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcePoshAirPods");
}

id objc_msgSend_forceSurfaceReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSurfaceReason");
}

id objc_msgSend_forceTriggerIgneous_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceTriggerIgneous:");
}

id objc_msgSend_forcedVenues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcedVenues");
}

id objc_msgSend_forget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forget:");
}

id objc_msgSend_formOfWay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formOfWay");
}

id objc_msgSend_formattedAddressLines(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedAddressLines");
}

id objc_msgSend_formattedText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedText");
}

id objc_msgSend_fractionalGrade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fractionalGrade");
}

id objc_msgSend_frameCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frameCount");
}

id objc_msgSend_fromID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fromID");
}

id objc_msgSend_fromOwnerDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fromOwnerDevice");
}

id objc_msgSend_fsm_didTransitionFromState_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fsm:didTransitionFromState:toState:");
}

id objc_msgSend_fsm_didUpdateLocationAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fsm:didUpdateLocationAtTime:");
}

id objc_msgSend_fsm_didUpdateSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fsm:didUpdateSource:");
}

id objc_msgSend_fullPathForSyncState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullPathForSyncState");
}

id objc_msgSend_fullSyncClientsList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullSyncClientsList");
}

id objc_msgSend_fullSyncDidComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullSyncDidComplete");
}

id objc_msgSend_fullSyncObjectsInCompanionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullSyncObjectsInCompanionQueue");
}

id objc_msgSend_fullSyncObjectsInGizmoQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fullSyncObjectsInGizmoQueue");
}

id objc_msgSend_fwdlAbortTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fwdlAbortTask");
}

id objc_msgSend_gaussianProcess_withMslpArray_withType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gaussianProcess:withMslpArray:withType:");
}

id objc_msgSend_generalDetectionMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generalDetectionMetrics");
}

id objc_msgSend_generateGeofenceUpdateToClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateGeofenceUpdateToClient:");
}

id objc_msgSend_generateLocationManagerNotAvailableError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateLocationManagerNotAvailableError");
}

id objc_msgSend_generateNewSubArchive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateNewSubArchive");
}

id objc_msgSend_generateRegionMonitorNotAvailableError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateRegionMonitorNotAvailableError");
}

id objc_msgSend_generateTheRecording_universe_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generateTheRecording:universe:settings:");
}

id objc_msgSend_generationTimeSecs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generationTimeSecs");
}

id objc_msgSend_genericEventDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genericEventDescription");
}

id objc_msgSend_genericPasswordQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genericPasswordQuery");
}

id objc_msgSend_genericWorkoutInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genericWorkoutInstance:");
}

id objc_msgSend_geoCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geoCenter");
}

id objc_msgSend_geoMapItemHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geoMapItemHandle");
}

id objc_msgSend_geoNavHint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geoNavHint");
}

id objc_msgSend_geoRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geoRadius");
}

id objc_msgSend_geoReferenceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geoReferenceFrame");
}

id objc_msgSend_geocodeAddressString_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geocodeAddressString:completionHandler:");
}

id objc_msgSend_geodeticAltitudeM(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geodeticAltitudeM");
}

id objc_msgSend_geofenceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "geofenceID");
}

id objc_msgSend_getAbsoluteAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAbsoluteAltitudeUncertainty");
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getActivePairedDevice");
}

id objc_msgSend_getActivityStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getActivityStats");
}

id objc_msgSend_getAddressForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAddressForDevice:");
}

id objc_msgSend_getAdvType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAdvType:");
}

id objc_msgSend_getAggregateIndexForSecondsIntoDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAggregateIndexForSecondsIntoDay:");
}

id objc_msgSend_getAllDevicesWithArchivedDevicesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAllDevicesWithArchivedDevicesMatching:");
}

id objc_msgSend_getAllowGPGGAOnlyAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAllowGPGGAOnlyAccessory");
}

id objc_msgSend_getAndSendCurrentEstimateMeanSeaLevelPressureFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAndSendCurrentEstimateMeanSeaLevelPressureFrom:");
}

id objc_msgSend_getAppsForAreaAtLatitude_longitude_radius_includeRegionalApps_marqueeAppsOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppsForAreaAtLatitude:longitude:radius:includeRegionalApps:marqueeAppsOnly:");
}

id objc_msgSend_getArraySettingsKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getArraySettingsKeys");
}

id objc_msgSend_getAssetVersionInfoFor_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAssetVersionInfoFor:withReply:");
}

id objc_msgSend_getAsyncResponseSilo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAsyncResponseSilo");
}

id objc_msgSend_getAuthorizationContextOfNonZonalClient_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAuthorizationContextOfNonZonalClient:withReply:");
}

id objc_msgSend_getBasicInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBasicInfo");
}

id objc_msgSend_getBeaconRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBeaconRegion");
}

id objc_msgSend_getBeaconType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBeaconType");
}

id objc_msgSend_getBiasFitWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBiasFitWithReply:");
}

id objc_msgSend_getBinIndexForSecondsIntoDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBinIndexForSecondsIntoDay:");
}

id objc_msgSend_getBlockSetIsCycling(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBlockSetIsCycling");
}

id objc_msgSend_getBooleanSettingsKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBooleanSettingsKeys");
}

id objc_msgSend_getBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBoutMetrics:");
}

id objc_msgSend_getBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBuild:");
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:length:");
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBytes:range:");
}

id objc_msgSend_getCKSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCKSyncEngineMetadata");
}

id objc_msgSend_getCLAvengerScannerPolicyPlatformType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCLAvengerScannerPolicyPlatformType");
}

id objc_msgSend_getCallIDFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCallIDFromDict:");
}

id objc_msgSend_getClientDeviceMatchingDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientDeviceMatchingDict:");
}

id objc_msgSend_getClientDeviceMatchingHIDDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientDeviceMatchingHIDDevice:");
}

id objc_msgSend_getClientManagerInternalStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getClientManagerInternalStateWithReply:");
}

id objc_msgSend_getConfigFromMobileAssets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConfigFromMobileAssets");
}

id objc_msgSend_getConfiguredApns_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConfiguredApns:completion:");
}

id objc_msgSend_getConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConnection");
}

id objc_msgSend_getConnectionReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConnectionReason");
}

id objc_msgSend_getCountryCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCountryCode");
}

id objc_msgSend_getCourseUncertaintyForCarPlayDRModeAtLowSpeedsInDeg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCourseUncertaintyForCarPlayDRModeAtLowSpeedsInDeg");
}

id objc_msgSend_getCurrentDataSubscriptionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentDataSubscriptionContext:");
}

id objc_msgSend_getCurrentLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentLocation");
}

id objc_msgSend_getCurrentMitigation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentMitigation");
}

id objc_msgSend_getCurrentPrimaryKeyTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentPrimaryKeyTask");
}

id objc_msgSend_getDataStatus_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDataStatus:completion:");
}

id objc_msgSend_getDbDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDbDetails:");
}

id objc_msgSend_getDeltaSecondsFromMachTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeltaSecondsFromMachTime:");
}

id objc_msgSend_getDerivedKeyWithLength_secretData_additionalInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDerivedKeyWithLength:secretData:additionalInfo:");
}

id objc_msgSend_getDeviceLocationsWithinBeaconingInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeviceLocationsWithinBeaconingInterval");
}

id objc_msgSend_getDeviceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeviceType");
}

id objc_msgSend_getDeviceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDeviceUUID:");
}

id objc_msgSend_getDevicesForProductGroup_andProductNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDevicesForProductGroup:andProductNumber:");
}

id objc_msgSend_getDevicesWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDevicesWithBlock:");
}

id objc_msgSend_getDictionaryFromMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDictionaryFromMessage:");
}

id objc_msgSend_getDoubleSettingsKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDoubleSettingsKeys");
}

id objc_msgSend_getDualSimCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDualSimCapability:");
}

id objc_msgSend_getECIESEncryptedData_key_sharedInfo_prependKeyFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getECIESEncryptedData:key:sharedInfo:prependKeyFingerprint:");
}

id objc_msgSend_getEEDAPNSEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEEDAPNSEnvironment");
}

id objc_msgSend_getEEDAPNSTopic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEEDAPNSTopic");
}

id objc_msgSend_getEEDCloakingKeyWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEEDCloakingKeyWithReply:");
}

id objc_msgSend_getEEDEmergencyContactNamesWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEEDEmergencyContactNamesWithReply:");
}

id objc_msgSend_getEffectiveClientName_bundlePath_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEffectiveClientName:bundlePath:name:");
}

id objc_msgSend_getElevationThresholdProxyMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getElevationThresholdProxyMap");
}

id objc_msgSend_getEnableAggressiveLocationScreening(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEnableAggressiveLocationScreening");
}

id objc_msgSend_getEnableCourseScreening(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEnableCourseScreening");
}

id objc_msgSend_getEnablementStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEnablementStatus");
}

id objc_msgSend_getEnclosureMaterial(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEnclosureMaterial");
}

id objc_msgSend_getEphemerisExpirationInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEphemerisExpirationInterval:");
}

id objc_msgSend_getEphemerisRecommendRefreshInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEphemerisRecommendRefreshInterval:");
}

id objc_msgSend_getEphemerisURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEphemerisURL:");
}

id objc_msgSend_getEstimatedMeanSeaLevelPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEstimatedMeanSeaLevelPressure");
}

id objc_msgSend_getFencesForBundleID_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFencesForBundleID:withReply:");
}

id objc_msgSend_getFitnessModeDebounceParamsWithOptionalAvailabilityTile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFitnessModeDebounceParamsWithOptionalAvailabilityTile:");
}

id objc_msgSend_getFlightOfStairsIn24Hr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFlightOfStairsIn24Hr");
}

id objc_msgSend_getFullSyncObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFullSyncObjects");
}

id objc_msgSend_getGroupId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getGroupId");
}

id objc_msgSend_getGroupStatusHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getGroupStatusHawkeyeTask");
}

id objc_msgSend_getHandoffTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHandoffTags");
}

id objc_msgSend_getHealthColdStorageDbCleanupActivityInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHealthColdStorageDbCleanupActivityInterval");
}

id objc_msgSend_getHidDeviceFromEnumeratedDevicesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHidDeviceFromEnumeratedDevicesMatching:");
}

id objc_msgSend_getHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_andCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:andCompletionBlock:");
}

id objc_msgSend_getIMSRegistrationStatus_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIMSRegistrationStatus:completion:");
}

id objc_msgSend_getIdentifierFromMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIdentifierFromMessage:");
}

id objc_msgSend_getIncidentalUseModeForClient_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIncidentalUseModeForClient:withReply:");
}

id objc_msgSend_getIndexInHealthKitSamples_forSessionAttributes_withStartIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIndexInHealthKitSamples:forSessionAttributes:withStartIndex:");
}

id objc_msgSend_getInsideOutSpiralMatrixIndicesForSection_matrixSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getInsideOutSpiralMatrixIndicesForSection:matrixSize:");
}

id objc_msgSend_getIntegerSettingsKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIntegerSettingsKeys");
}

id objc_msgSend_getIntersiloDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getIntersiloDelegate");
}

id objc_msgSend_getKVStoreDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKVStoreDictionary");
}

id objc_msgSend_getKappaThirdPartyActiveAppBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKappaThirdPartyActiveAppBundle");
}

id objc_msgSend_getKappaThirdPartyDisplayNameForApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKappaThirdPartyDisplayNameForApp");
}

id objc_msgSend_getKeyExternalRepresentation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKeyExternalRepresentation:");
}

id objc_msgSend_getKeyFingerprint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getKeyFingerprint:");
}

id objc_msgSend_getLastAltitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLastAltitude");
}

id objc_msgSend_getLastAltitudeAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLastAltitudeAccuracy");
}

id objc_msgSend_getLastAltitudeTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLastAltitudeTime");
}

id objc_msgSend_getLastPressureSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLastPressureSample:");
}

id objc_msgSend_getLatestAdvTypeToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLatestAdvTypeToString:");
}

id objc_msgSend_getLocalFileUrl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalFileUrl");
}

id objc_msgSend_getLocalPairingDataWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalPairingDataWithCompletion:");
}

id objc_msgSend_getLocalSecondsIntoDay_andLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalSecondsIntoDay:andLog:");
}

id objc_msgSend_getLocalUrl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocalUrl");
}

id objc_msgSend_getLocationBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationBlock");
}

id objc_msgSend_getLocationDiffThresholdForAggressiveScreening(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationDiffThresholdForAggressiveScreening");
}

id objc_msgSend_getLocationForBundleID_orBundlePath_dynamicAccuracyReductionEnabled_allowsAlteredAccessoryLocations_replyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationForBundleID:orBundlePath:dynamicAccuracyReductionEnabled:allowsAlteredAccessoryLocations:replyBlock:");
}

id objc_msgSend_getLocationIds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationIds");
}

id objc_msgSend_getLocationSampleAltitudeAndUncertainty_andRefAltitude_andRefUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationSampleAltitudeAndUncertainty:andRefAltitude:andRefUncertainty:");
}

id objc_msgSend_getLocationUsageDescriptionKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationUsageDescriptionKeys:");
}

id objc_msgSend_getLocationsOfInterestFetchTimeInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getLocationsOfInterestFetchTimeInterval");
}

id objc_msgSend_getMachContinuousTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMachContinuousTime");
}

id objc_msgSend_getMaintReasonForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMaintReasonForDevice:");
}

id objc_msgSend_getMaintenanceAssertionDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMaintenanceAssertionDuration");
}

id objc_msgSend_getMajor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMajor:");
}

id objc_msgSend_getMaxFileCountForRecording_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMaxFileCountForRecording:");
}

id objc_msgSend_getMeanSeaLevelArrayCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMeanSeaLevelArrayCount");
}

id objc_msgSend_getMinContinuousFailureCountForBlockingAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMinContinuousFailureCountForBlockingAccessory");
}

id objc_msgSend_getMinContinuousSuccessCountForUnblockingAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMinContinuousSuccessCountForUnblockingAccessory");
}

id objc_msgSend_getMinor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMinor:");
}

id objc_msgSend_getMitigationForCurrentlevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMitigationForCurrentlevel");
}

id objc_msgSend_getMonitoringRecordToNotifyClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMonitoringRecordToNotifyClient");
}

id objc_msgSend_getMslpDriftRate_withLastMslp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMslpDriftRate:withLastMslp:");
}

id objc_msgSend_getMultiStatusFromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMultiStatusFromData:");
}

id objc_msgSend_getMultiStatusHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMultiStatusHawkeyeTask");
}

id objc_msgSend_getNMEASentence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNMEASentence:");
}

id objc_msgSend_getNVPFromStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNVPFromStats");
}

id objc_msgSend_getNearOwnerTimeoutForDevice_checkingForNetwork_checkingHele_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNearOwnerTimeoutForDevice:checkingForNetwork:checkingHele:");
}

id objc_msgSend_getNearbyLocationGroups_withUpdatedPos_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNearbyLocationGroups:withUpdatedPos:");
}

id objc_msgSend_getNearbyLocationGroups_withUpdatedPos_nearLocationsOfInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNearbyLocationGroups:withUpdatedPos:nearLocationsOfInterest:");
}

id objc_msgSend_getNextPacket(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNextPacket");
}

id objc_msgSend_getNumberFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNumberFromString:");
}

id objc_msgSend_getNumberOfInputApsUsedInWifiTileForCoordinate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getNumberOfInputApsUsedInWifiTileForCoordinate:withReply:");
}

id objc_msgSend_getOperatorName_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOperatorName:error:");
}

id objc_msgSend_getOptedIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getOptedIn");
}

id objc_msgSend_getPairedDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPairedDevices");
}

id objc_msgSend_getPartnerIDFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPartnerIDFromDict:");
}

id objc_msgSend_getPedometerBinsAndHistoryWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPedometerBinsAndHistoryWithReply:");
}

id objc_msgSend_getPedometerCalibrationBins_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPedometerCalibrationBins:withReply:");
}

id objc_msgSend_getPendingTasks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPendingTasks");
}

id objc_msgSend_getPersistentStoreDataCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPersistentStoreDataCount");
}

id objc_msgSend_getPersistentStoreDataCountForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPersistentStoreDataCountForType:");
}

id objc_msgSend_getPersonalizationInformation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPersonalizationInformation");
}

id objc_msgSend_getPhoneNumberWithCompletion_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPhoneNumberWithCompletion:completion:");
}

id objc_msgSend_getPowerAssertionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPowerAssertionIdentifier");
}

id objc_msgSend_getPredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPredictedWalkDistanceBout:");
}

id objc_msgSend_getPrivateNetworkSimInfoForContext_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPrivateNetworkSimInfoForContext:error:");
}

id objc_msgSend_getQuarterHour(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getQuarterHour");
}

id objc_msgSend_getRandomBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRandomBytes:");
}

id objc_msgSend_getRangeEndReasonForOpcode_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRangeEndReasonForOpcode:data:");
}

id objc_msgSend_getRangingStatusForOpcode_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRangingStatusForOpcode:data:");
}

id objc_msgSend_getRavenSolutionAtMCTime_WithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRavenSolutionAtMCTime:WithReply:");
}

id objc_msgSend_getRavenSolutionWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRavenSolutionWithReply:");
}

id objc_msgSend_getRecentLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRecentLocation");
}

id objc_msgSend_getRecentWeatherData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRecentWeatherData");
}

id objc_msgSend_getRecordEventBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRecordEventBlock");
}

id objc_msgSend_getRegionFromMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRegionFromMessage:");
}

id objc_msgSend_getRequestDict(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getRequestDict");
}

id objc_msgSend_getResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResourceValue:forKey:error:");
}

id objc_msgSend_getResponseDataDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResponseDataDictionary");
}

id objc_msgSend_getResponseDictionary_forMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getResponseDictionary:forMessage:");
}

id objc_msgSend_getReturnValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getReturnValue:");
}

id objc_msgSend_getSampleCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSampleCount");
}

id objc_msgSend_getSectionCoordinate_aroundLatitude_longitude_radius_sectionRadius_useInsideOutDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSectionCoordinate:aroundLatitude:longitude:radius:sectionRadius:useInsideOutDownload:");
}

id objc_msgSend_getSectionNotDownloadedYet_maxSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSectionNotDownloadedYet:maxSections:");
}

id objc_msgSend_getSectionToBeRefreshed_maxSections_refreshPeriod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSectionToBeRefreshed:maxSections:refreshPeriod:");
}

id objc_msgSend_getSerialNumberTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSerialNumberTask");
}

id objc_msgSend_getSessionIDWithPhoneNumber_sessionStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSessionIDWithPhoneNumber:sessionStartTime:");
}

id objc_msgSend_getSessionStartTimeFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSessionStartTimeFromDict:");
}

id objc_msgSend_getSettingsResetFollowUpState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSettingsResetFollowUpState");
}

id objc_msgSend_getSharedInfoPrefixFromSessionID_partnerID_partnerAdrPublicKeyData_deviceSessionPrivateKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSharedInfoPrefixFromSessionID:partnerID:partnerAdrPublicKeyData:deviceSessionPrivateKey:");
}

id objc_msgSend_getSignalStrengthMeasurements_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSignalStrengthMeasurements:error:");
}

id objc_msgSend_getSixMinuteWalkDistancePrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSixMinuteWalkDistancePrediction:");
}

id objc_msgSend_getSpeedThresholdForCarPlayDRModeCourseUncSettingInMPS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSpeedThresholdForCarPlayDRModeCourseUncSettingInMPS");
}

id objc_msgSend_getStartLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStartLocation");
}

id objc_msgSend_getStateForCentral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStateForCentral:");
}

id objc_msgSend_getStateSummary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStateSummary");
}

id objc_msgSend_getStewieSupportWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStewieSupportWithCompletion:");
}

id objc_msgSend_getStoreURLFromDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStoreURLFromDirectory:");
}

id objc_msgSend_getStoredLocationsBetweenStartTime_endTime_apartFromEachOther_lyingWithinTimeIntervals_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStoredLocationsBetweenStartTime:endTime:apartFromEachOther:lyingWithinTimeIntervals:withReply:");
}

id objc_msgSend_getStoredVisit_betweenStartTime_andEndTime_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStoredVisit:betweenStartTime:andEndTime:withCompletionBlock:");
}

id objc_msgSend_getStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStrideCalEntry:");
}

id objc_msgSend_getStringFromNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStringFromNumber:");
}

id objc_msgSend_getStringSessionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStringSessionId:");
}

id objc_msgSend_getStringSettingsKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStringSettingsKeys");
}

id objc_msgSend_getStructSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStructSetting:");
}

id objc_msgSend_getSubscriptionInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSubscriptionInfo:");
}

id objc_msgSend_getSyncEngineMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSyncEngineMetadata");
}

id objc_msgSend_getSynchronousRemoteObjectProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSynchronousRemoteObjectProxy");
}

id objc_msgSend_getSysdiagnoseOutputFilename(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSysdiagnoseOutputFilename");
}

id objc_msgSend_getSysdiagnoseOutputPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSysdiagnoseOutputPath");
}

id objc_msgSend_getSystemFieldsFromCKRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSystemFieldsFromCKRecord:");
}

id objc_msgSend_getTasksWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTasksWithCompletionHandler:");
}

id objc_msgSend_getTimeOfDayForAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTimeOfDayForAnalytics");
}

id objc_msgSend_getTotalDBSizeInMB(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTotalDBSizeInMB");
}

id objc_msgSend_getTrackLengthSecondsForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTrackLengthSecondsForSource:");
}

id objc_msgSend_getTrackingAvoidanceSettingsWithOTASettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTrackingAvoidanceSettingsWithOTASettings:");
}

id objc_msgSend_getTranslatedGizmoKeyForCompanionClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTranslatedGizmoKeyForCompanionClient:");
}

id objc_msgSend_getTravelVelocity_withCurrLocation_andNextLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getTravelVelocity:withCurrLocation:andNextLocation:");
}

id objc_msgSend_getUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUID");
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUUIDBytes:");
}

id objc_msgSend_getUarpAccessoryForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUarpAccessoryForDevice:");
}

id objc_msgSend_getUnsignedIntegerSettingsKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUnsignedIntegerSettingsKeys");
}

id objc_msgSend_getUserRecordIDName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUserRecordIDName");
}

id objc_msgSend_getVoiceLinkQualityMetric_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getVoiceLinkQualityMetric:completion:");
}

id objc_msgSend_getWalkingSpeedStrideCal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getWalkingSpeedStrideCal:");
}

id objc_msgSend_getWorkingDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getWorkingDirectory");
}

id objc_msgSend_getiCloudIdentifierTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getiCloudIdentifierTask");
}

id objc_msgSend_gizmoDeltaSyncObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gizmoDeltaSyncObjects");
}

id objc_msgSend_gizmoDeltaSyncObjectsWaitingForAck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gizmoDeltaSyncObjectsWaitingForAck");
}

id objc_msgSend_gmtBirthdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gmtBirthdate");
}

id objc_msgSend_gnssOdometerInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gnssOdometerInfo");
}

id objc_msgSend_goodSurfaceCalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "goodSurfaceCalibration:");
}

id objc_msgSend_gpsAssistanceRequested(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsAssistanceRequested");
}

id objc_msgSend_gpsEstimateAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsEstimateAvailable:");
}

id objc_msgSend_gpsFusionRequested(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsFusionRequested");
}

id objc_msgSend_gpsLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsLocation");
}

id objc_msgSend_gpsLocationBuffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsLocationBuffer");
}

id objc_msgSend_gpsLocationBufferFiltered(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsLocationBufferFiltered");
}

id objc_msgSend_gpsOdometerBuffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsOdometerBuffer");
}

id objc_msgSend_gpsSignalQualityAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsSignalQualityAvailable:");
}

id objc_msgSend_gpsSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gpsSource");
}

id objc_msgSend_grade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "grade");
}

id objc_msgSend_gradeMean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gradeMean");
}

id objc_msgSend_gradeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gradeType");
}

id objc_msgSend_gradeVariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gradeVariance");
}

id objc_msgSend_gradient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gradient");
}

id objc_msgSend_gradientValidity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gradientValidity");
}

id objc_msgSend_gregorianBirthdayModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gregorianBirthdayModifiedDate");
}

id objc_msgSend_groundAltitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groundAltitude");
}

id objc_msgSend_groundAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groundAltitudeUncertainty");
}

id objc_msgSend_groupId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupId");
}

id objc_msgSend_groupMaintDeltas(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupMaintDeltas");
}

id objc_msgSend_groupPartNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupPartNumber");
}

id objc_msgSend_groupUuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "groupUuid");
}

id objc_msgSend_guidanceLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guidanceLevel");
}

id objc_msgSend_gyroDataFromDate_toDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gyroDataFromDate:toDate:");
}

id objc_msgSend_handleAverageRsrpUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleAverageRsrpUpdate:");
}

id objc_msgSend_handleBoutResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBoutResults:");
}

id objc_msgSend_handleCompanionConnectionUpdateWithState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCompanionConnectionUpdateWithState:");
}

id objc_msgSend_handleCompletionForPoshTask_withCompletionCommand_onDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleCompletionForPoshTask:withCompletionCommand:onDevice:");
}

id objc_msgSend_handleConfigurationResponse_data_url_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConfigurationResponse:data:url:didCompleteWithError:");
}

id objc_msgSend_handleConnectedPeripheral_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectedPeripheral:forDevice:");
}

id objc_msgSend_handleConnectionFailureForPeripheral_withErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleConnectionFailureForPeripheral:withErrorCode:");
}

id objc_msgSend_handleDisconnectionDuringFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDisconnectionDuringFirmwareUpdate");
}

id objc_msgSend_handleDurianData_opcode_ackOpcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDurianData:opcode:ackOpcode:");
}

id objc_msgSend_handleEntryExitDelegateCallbackForRegion_withState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleEntryExitDelegateCallbackForRegion:withState:");
}

id objc_msgSend_handleError_inSyncSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleError:inSyncSession:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handleFailureToConnectWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureToConnectWithError:");
}

id objc_msgSend_handleFetchedInputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedInputRecord:");
}

id objc_msgSend_handleFetchedOutputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedOutputRecord:");
}

id objc_msgSend_handleFetchedRecordDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedRecordDeletion:");
}

id objc_msgSend_handleFetchedRecordModification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFetchedRecordModification:");
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleForIdentifier:error:");
}

id objc_msgSend_handleFoundDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFoundDevice:");
}

id objc_msgSend_handleGetRegionStateOnCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleGetRegionStateOnCompanion:");
}

id objc_msgSend_handleGroupStatusReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleGroupStatusReply:");
}

id objc_msgSend_handleHandoffTagsOnCompanion_forDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleHandoffTagsOnCompanion:forDeviceID:");
}

id objc_msgSend_handleIngestResponse_data_url_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleIngestResponse:data:url:didCompleteWithError:");
}

id objc_msgSend_handleInvalidData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleInvalidData:");
}

id objc_msgSend_handleKeyFetchFailureForDevice_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKeyFetchFailureForDevice:withError:");
}

id objc_msgSend_handleKeyRollData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleKeyRollData:");
}

id objc_msgSend_handleLiveActivityUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleLiveActivityUpdate:");
}

id objc_msgSend_handleLocationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleLocationData:");
}

id objc_msgSend_handleMessageError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageError:");
}

id objc_msgSend_handleMessageSendError_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageSendError:identifier:");
}

id objc_msgSend_handleMessageSendSuccessForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMessageSendSuccessForIdentifier:");
}

id objc_msgSend_handleMultiDownloading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMultiDownloading");
}

id objc_msgSend_handleMultiStatusReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMultiStatusReply:");
}

id objc_msgSend_handleMutexAlreadyHeldOnTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMutexAlreadyHeldOnTask:");
}

id objc_msgSend_handleMutexErrorOnAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleMutexErrorOnAction:");
}

id objc_msgSend_handleNewLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNewLocation:");
}

id objc_msgSend_handleNotificationMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleNotificationMetrics:");
}

id objc_msgSend_handleOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleOdometer:");
}

id objc_msgSend_handlePair(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePair");
}

id objc_msgSend_handlePairToDeviceWithPairingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePairToDeviceWithPairingID:");
}

id objc_msgSend_handlePairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePairing");
}

id objc_msgSend_handleProvisionalIntermediationForService_forClientKey_at_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleProvisionalIntermediationForService:forClientKey:at:withReply:");
}

id objc_msgSend_handlePublisherResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handlePublisherResponse:");
}

id objc_msgSend_handleQuickSwitch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleQuickSwitch");
}

id objc_msgSend_handleReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleReachability:");
}

id objc_msgSend_handleRegisterWithController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRegisterWithController:");
}

id objc_msgSend_handleRegistrationResponse_data_url_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRegistrationResponse:data:url:didCompleteWithError:");
}

id objc_msgSend_handleResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleResponse:");
}

id objc_msgSend_handleRetryHealthKitDeleteSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleRetryHealthKitDeleteSamples:");
}

id objc_msgSend_handleServerRecordChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleServerRecordChanged:");
}

id objc_msgSend_handleTokenFetchForDevice_onCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleTokenFetchForDevice:onCondition:");
}

id objc_msgSend_handleUnRegisterController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnRegisterController");
}

id objc_msgSend_handleUnknownItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnknownItem:");
}

id objc_msgSend_handleUnpair(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnpair");
}

id objc_msgSend_handleUnpairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUnpairing");
}

id objc_msgSend_handleUpdatesToSim_Rat_WifiEmergency_bandInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUpdatesToSim:Rat:WifiEmergency:bandInfo:");
}

id objc_msgSend_handleUplinkFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleUplinkFrequency:");
}

id objc_msgSend_handleVlqmForActiveCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleVlqmForActiveCall:");
}

id objc_msgSend_handleZeroActiveWatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleZeroActiveWatch");
}

id objc_msgSend_handleZoneDeleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleZoneDeleted:");
}

id objc_msgSend_handleZoneNotFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleZoneNotFound:");
}

id objc_msgSend_handleZonePurge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleZonePurge:");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler");
}

id objc_msgSend_handoffTag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handoffTag");
}

id objc_msgSend_hardwareRevision(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareRevision");
}

id objc_msgSend_hardwareType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareType");
}

id objc_msgSend_hardwareVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hardwareVersion");
}

id objc_msgSend_hasActiveAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasActiveAggressiveScan");
}

id objc_msgSend_hasActiveBTFindingScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasActiveBTFindingScan");
}

id objc_msgSend_hasAltitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAltitude");
}

id objc_msgSend_hasAopPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAopPath");
}

id objc_msgSend_hasArfcn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasArfcn");
}

id objc_msgSend_hasArrivalDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasArrivalDate");
}

id objc_msgSend_hasAtLeastOneClientWithCLActivityTypeFitness(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAtLeastOneClientWithCLActivityTypeFitness");
}

id objc_msgSend_hasAuthMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAuthMask");
}

id objc_msgSend_hasBandclass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBandclass");
}

id objc_msgSend_hasBsid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBsid");
}

id objc_msgSend_hasBytesAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBytesAvailable");
}

id objc_msgSend_hasCellID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCellID");
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChanges");
}

id objc_msgSend_hasChannel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasChannel");
}

id objc_msgSend_hasConfidence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConfidence");
}

id objc_msgSend_hasCoordinate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCoordinate");
}

id objc_msgSend_hasCorrectiveCompensationMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCorrectiveCompensationMask");
}

id objc_msgSend_hasCyclingToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCyclingToNonFitnessSeconds");
}

id objc_msgSend_hasDeltaDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDeltaDistance");
}

id objc_msgSend_hasDeltaDistanceAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDeltaDistanceAccuracy");
}

id objc_msgSend_hasDeltaPositionX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDeltaPositionX");
}

id objc_msgSend_hasDeltaPositionY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDeltaPositionY");
}

id objc_msgSend_hasDepartureDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDepartureDate");
}

id objc_msgSend_hasDestination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDestination");
}

id objc_msgSend_hasDestinationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDestinationName");
}

id objc_msgSend_hasEastLng(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEastLng");
}

id objc_msgSend_hasEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEstimate");
}

id objc_msgSend_hasExecutedScheduleFromCellularConnectivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasExecutedScheduleFromCellularConnectivity");
}

id objc_msgSend_hasExecutedScheduleFromWifiConnectivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasExecutedScheduleFromWifiConnectivity");
}

id objc_msgSend_hasExpirationAgeSecs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasExpirationAgeSecs");
}

id objc_msgSend_hasGPS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasGPS");
}

id objc_msgSend_hasGenerationTimeSecs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasGenerationTimeSecs");
}

id objc_msgSend_hasGroundAltitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasGroundAltitude");
}

id objc_msgSend_hasGroundAltitudeUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasGroundAltitudeUncertainty");
}

id objc_msgSend_hasGuidanceLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasGuidanceLevel");
}

id objc_msgSend_hasInfoMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasInfoMask");
}

id objc_msgSend_hasIsAllowOverCellular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasIsAllowOverCellular");
}

id objc_msgSend_hasKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKey");
}

id objc_msgSend_hasLineID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasLineID");
}

id objc_msgSend_hasLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasLocation");
}

id objc_msgSend_hasLoiAtFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasLoiAtFence");
}

id objc_msgSend_hasMaxAbsSlope(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMaxAbsSlope");
}

id objc_msgSend_hasMcc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMcc");
}

id objc_msgSend_hasMnc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMnc");
}

id objc_msgSend_hasMoreData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMoreData");
}

id objc_msgSend_hasMotionActivityDebounceParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMotionActivityDebounceParameters");
}

id objc_msgSend_hasNavigationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNavigationState");
}

id objc_msgSend_hasNid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNid");
}

id objc_msgSend_hasNonFitnessToCyclingSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNonFitnessToCyclingSeconds");
}

id objc_msgSend_hasNonFitnessToRunningSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNonFitnessToRunningSeconds");
}

id objc_msgSend_hasNorthLat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNorthLat");
}

id objc_msgSend_hasNorthWestLatitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNorthWestLatitude");
}

id objc_msgSend_hasNorthWestLongitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNorthWestLongitude");
}

id objc_msgSend_hasNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNotification");
}

id objc_msgSend_hasNrarfcn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNrarfcn");
}

id objc_msgSend_hasNumZaxisHarvestTraces(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasNumZaxisHarvestTraces");
}

id objc_msgSend_hasOdometer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOdometer");
}

id objc_msgSend_hasOrigin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasOrigin");
}

id objc_msgSend_hasPid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPid");
}

id objc_msgSend_hasPnoffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPnoffset");
}

id objc_msgSend_hasPowerAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPowerAssertion");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasPreparedForFirmwareDownload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPreparedForFirmwareDownload");
}

id objc_msgSend_hasPressureChangeFrom_to_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPressureChangeFrom:to:");
}

id objc_msgSend_hasPsc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPsc");
}

id objc_msgSend_hasRawCoordinateLatitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRawCoordinateLatitude");
}

id objc_msgSend_hasRawCoordinateLongitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRawCoordinateLongitude");
}

id objc_msgSend_hasReach(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasReach");
}

id objc_msgSend_hasRegionalPrefetchMaxFloorCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRegionalPrefetchMaxFloorCount");
}

id objc_msgSend_hasRegisteredForCellularConnectivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRegisteredForCellularConnectivity");
}

id objc_msgSend_hasRegisteredForWifiConnectivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRegisteredForWifiConnectivity");
}

id objc_msgSend_hasRouteSharingPolicyLongFormVideo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRouteSharingPolicyLongFormVideo:");
}

id objc_msgSend_hasRunningToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRunningToNonFitnessSeconds");
}

id objc_msgSend_hasScheduledArrival(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasScheduledArrival");
}

id objc_msgSend_hasScheduledDeparture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasScheduledDeparture");
}

id objc_msgSend_hasScore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasScore");
}

id objc_msgSend_hasSentAssetData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSentAssetData");
}

id objc_msgSend_hasSentCRCPacket(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSentCRCPacket");
}

id objc_msgSend_hasSessionAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSessionAttributes");
}

id objc_msgSend_hasSessionTimedOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSessionTimedOut:");
}

id objc_msgSend_hasSid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSid");
}

id objc_msgSend_hasSignificantPrior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSignificantPrior");
}

id objc_msgSend_hasSlope(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSlope");
}

id objc_msgSend_hasSouthEastLatitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSouthEastLatitude");
}

id objc_msgSend_hasSouthEastLongitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSouthEastLongitude");
}

id objc_msgSend_hasSouthLat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSouthLat");
}

id objc_msgSend_hasStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStartTime");
}

id objc_msgSend_hasStopFrom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStopFrom");
}

id objc_msgSend_hasStopID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStopID");
}

id objc_msgSend_hasStopTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStopTime");
}

id objc_msgSend_hasStopTo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStopTo");
}

id objc_msgSend_hasStrideCal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStrideCal");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasSuppressShowingInSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuppressShowingInSettings");
}

id objc_msgSend_hasTacID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTacID");
}

id objc_msgSend_hasTerrainElevation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTerrainElevation");
}

id objc_msgSend_hasTileType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTileType");
}

id objc_msgSend_hasTileX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTileX");
}

id objc_msgSend_hasTileY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTileY");
}

id objc_msgSend_hasTimestampGps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTimestampGps");
}

id objc_msgSend_hasTrackedTransportType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTrackedTransportType");
}

id objc_msgSend_hasTransportType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTransportType");
}

id objc_msgSend_hasTravelTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTravelTime");
}

id objc_msgSend_hasTropicalSavannaBranchCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTropicalSavannaBranchCount");
}

id objc_msgSend_hasTropicalSavannaProximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTropicalSavannaProximity");
}

id objc_msgSend_hasTropicalSavannaTreeId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTropicalSavannaTreeId");
}

id objc_msgSend_hasUarfcn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUarfcn");
}

id objc_msgSend_hasValidData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValidData");
}

id objc_msgSend_hasValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValue");
}

id objc_msgSend_hasValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValueForKey:");
}

id objc_msgSend_hasValueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValueForKey:atKeyPath:");
}

id objc_msgSend_hasVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVersion");
}

id objc_msgSend_hasVerticalAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVerticalAccuracy");
}

id objc_msgSend_hasWestLng(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasWestLng");
}

id objc_msgSend_hasZoneid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasZoneid");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hashedPublicKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashedPublicKey");
}

id objc_msgSend_hawkeyeOpcode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hawkeyeOpcode");
}

id objc_msgSend_hawkeyePayload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hawkeyePayload");
}

id objc_msgSend_hawkeyeTestMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hawkeyeTestMode");
}

id objc_msgSend_healthWrapConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "healthWrapConfiguration");
}

id objc_msgSend_height(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "height");
}

id objc_msgSend_heightModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightModifiedDate");
}

id objc_msgSend_hexString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hexString");
}

id objc_msgSend_hidDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hidDevice");
}

id objc_msgSend_hint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hint");
}

id objc_msgSend_hints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hints");
}

id objc_msgSend_historicalFenceStateForFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historicalFenceStateForFence:");
}

id objc_msgSend_historicalFenceStateForFenceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historicalFenceStateForFenceName:");
}

id objc_msgSend_historicalFenceStates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "historicalFenceStates");
}

id objc_msgSend_homeArchive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeArchive");
}

id objc_msgSend_horizontalAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalAccuracy");
}

id objc_msgSend_horizontalUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalUncertainty");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_hour(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hour");
}

id objc_msgSend_hr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hr");
}

id objc_msgSend_hrCadenceAgreementMean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrCadenceAgreementMean");
}

id objc_msgSend_hrCadenceAgreementVariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrCadenceAgreementVariance");
}

id objc_msgSend_hrConfidence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrConfidence");
}

id objc_msgSend_hrConfidenceMean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrConfidenceMean");
}

id objc_msgSend_hrConfidenceVariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrConfidenceVariance");
}

id objc_msgSend_hrMax(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrMax");
}

id objc_msgSend_hrMean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrMean");
}

id objc_msgSend_hrMin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrMin");
}

id objc_msgSend_hrMinAdjusted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrMinAdjusted");
}

id objc_msgSend_hrRecovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrRecovery");
}

id objc_msgSend_hrRecoveryReference(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrRecoveryReference");
}

id objc_msgSend_hrTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrTime");
}

id objc_msgSend_hrVariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hrVariance");
}

id objc_msgSend_hwSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hwSupport");
}

id objc_msgSend_hydrateBeacons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hydrateBeacons");
}

id objc_msgSend_iAPTimeSyncEnable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iAPTimeSyncEnable");
}

id objc_msgSend_iCloudManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudManagedAppleID");
}

id objc_msgSend_iOSSourceVersionNewEnough_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iOSSourceVersionNewEnough:");
}

id objc_msgSend_iTunesManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iTunesManagedAppleID");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierWithPid:");
}

id objc_msgSend_idsDeviceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceID");
}

id objc_msgSend_idsDeviceIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsDeviceIdentifier");
}

id objc_msgSend_idsOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsOptions");
}

id objc_msgSend_idsService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsService");
}

id objc_msgSend_idsStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "idsStatus");
}

id objc_msgSend_immutableData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "immutableData");
}

id objc_msgSend_inHomeCountry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inHomeCountry");
}

id objc_msgSend_inOutdoorPedestrianSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inOutdoorPedestrianSession");
}

id objc_msgSend_inOutdoorWorkout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inOutdoorWorkout");
}

id objc_msgSend_inUseAssertionInvalidatedDueToWatchConnectivityForClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseAssertionInvalidatedDueToWatchConnectivityForClientKey:");
}

id objc_msgSend_inUseLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseLevel");
}

id objc_msgSend_inUseLevelIsAtLeast_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inUseLevelIsAtLeast:");
}

id objc_msgSend_inVisitStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inVisitStatus");
}

id objc_msgSend_inactiveSubArchives(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inactiveSubArchives");
}

id objc_msgSend_includeRegionalApps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeRegionalApps");
}

id objc_msgSend_incomingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incomingResponseIdentifier");
}

id objc_msgSend_incrementAttributionCountForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementAttributionCountForServiceType:");
}

id objc_msgSend_incrementCountBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementCountBy:");
}

id objc_msgSend_incrementNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementNotifications");
}

id objc_msgSend_incrementTowardsTarget_andCurrent_withIncrement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "incrementTowardsTarget:andCurrent:withIncrement:");
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "index");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObject_inSortedRange_options_usingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:inSortedRange:options:usingComparator:");
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSet");
}

id objc_msgSend_indicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indicator");
}

id objc_msgSend_indicatorOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indicatorOverride");
}

id objc_msgSend_indices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indices");
}

id objc_msgSend_indoorAvailabilityTilesServerUrl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorAvailabilityTilesServerUrl");
}

id objc_msgSend_indoorBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorBundle");
}

id objc_msgSend_indoorEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorEndpoint");
}

id objc_msgSend_indoorLocationOfInterestMergeRadiusKM(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorLocationOfInterestMergeRadiusKM");
}

id objc_msgSend_indoorPrefetchClusterMergeRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorPrefetchClusterMergeRadius");
}

id objc_msgSend_indoorPrefetchMaxFloorCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorPrefetchMaxFloorCount");
}

id objc_msgSend_indoorPrefetchMaxFloorsPerPrefetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorPrefetchMaxFloorsPerPrefetch");
}

id objc_msgSend_indoorPrefetchRadiusKM(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorPrefetchRadiusKM");
}

id objc_msgSend_indoorPrefetchRadiusMeters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorPrefetchRadiusMeters");
}

id objc_msgSend_indoorTilePrefetchMaxCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorTilePrefetchMaxCount");
}

id objc_msgSend_indoorTilePrefetchRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoorTilePrefetchRadius");
}

id objc_msgSend_indoord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indoord");
}

id objc_msgSend_induceCrashCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "induceCrashCommand");
}

id objc_msgSend_induceCrashTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "induceCrashTask");
}

id objc_msgSend_inertCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inertCopy");
}

id objc_msgSend_inertialCovariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inertialCovariance");
}

id objc_msgSend_inertialCovarianceInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inertialCovarianceInfo");
}

id objc_msgSend_inertialOdometry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inertialOdometry");
}

id objc_msgSend_inertialSamples(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inertialSamples");
}

id objc_msgSend_inertialState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inertialState");
}

id objc_msgSend_inertialStateInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inertialStateInfo");
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "info");
}

id objc_msgSend_infoMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoMask");
}

id objc_msgSend_informCoreUarpOfAssetChangeForProductGroup_andProductNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informCoreUarpOfAssetChangeForProductGroup:andProductNumber:");
}

id objc_msgSend_informFirmwareUpdateFailureToClientWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "informFirmwareUpdateFailureToClientWithError:");
}

id objc_msgSend_ingestBTLEAdvertisement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ingestBTLEAdvertisement:");
}

id objc_msgSend_ingestTAEventIfSAServiceRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ingestTAEventIfSAServiceRunning:");
}

id objc_msgSend_ingestTAEventIfTAServiceRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ingestTAEventIfTAServiceRunning:");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_initActivityHistogramWithActivities_dateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initActivityHistogramWithActivities:dateInterval:");
}

id objc_msgSend_initAllDayContextManagers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initAllDayContextManagers");
}

id objc_msgSend_initAnalyticsCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initAnalyticsCache");
}

id objc_msgSend_initAnalyticsTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initAnalyticsTimer");
}

id objc_msgSend_initAndMarkScanningStarted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initAndMarkScanningStarted:");
}

id objc_msgSend_initAndStartWithQueue_andController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initAndStartWithQueue:andController:");
}

id objc_msgSend_initCentroidDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initCentroidDatabase");
}

id objc_msgSend_initCentroidDbAndMetadataDb(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initCentroidDbAndMetadataDb");
}

id objc_msgSend_initContextManagersForNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initContextManagersForNotification:");
}

id objc_msgSend_initDataDictForDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initDataDictForDay:");
}

id objc_msgSend_initFileURLWithPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFileURLWithPath:isDirectory:");
}

id objc_msgSend_initFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFor:");
}

id objc_msgSend_initForReadingFromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForReadingFromData:error:");
}

id objc_msgSend_initFromClientCondition_clientKeyPath_authorizationContext_universe_identifier_callbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:callbackHandler:");
}

id objc_msgSend_initFromClientCondition_clientKeyPath_authorizationContext_universe_identifier_removePersistingFenceFromMonitoring_callbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromClientCondition:clientKeyPath:authorizationContext:universe:identifier:removePersistingFenceFromMonitoring:callbackHandler:");
}

id objc_msgSend_initFromLOI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromLOI:");
}

id objc_msgSend_initFromLatLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initFromLatLon:");
}

id objc_msgSend_initInSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInSilo:");
}

id objc_msgSend_initInSilo_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInSilo:withIdentifier:");
}

id objc_msgSend_initInSilo_withIdentifier_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInSilo:withIdentifier:state:");
}

id objc_msgSend_initInUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:");
}

id objc_msgSend_initInUniverse_andIdentifier_andRadiusInMeters_andCallback_andStatusCallback_andErrorCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:andIdentifier:andRadiusInMeters:andCallback:andStatusCallback:andErrorCallback:");
}

id objc_msgSend_initInUniverse_stepCountDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:stepCountDb:");
}

id objc_msgSend_initInUniverse_withDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:withDelegate:");
}

id objc_msgSend_initInUniverse_withExternal_andSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:withExternal:andSettings:");
}

id objc_msgSend_initInUniverse_withExternal_withSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:withExternal:withSettings:");
}

id objc_msgSend_initInUniverse_withSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initInUniverse:withSettings:");
}

id objc_msgSend_initKeyReconciler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initKeyReconciler");
}

id objc_msgSend_initNearbyAllowedWithCenter_radius_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initNearbyAllowedWithCenter:radius:identifier:");
}

id objc_msgSend_initOnQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initOnQueue:");
}

id objc_msgSend_initOnSilo_hour_minute_second_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initOnSilo:hour:minute:second:block:");
}

id objc_msgSend_initRangingHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRangingHawkeyeTask");
}

id objc_msgSend_initRecordWithCondition_options_event_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRecordWithCondition:options:event:");
}

id objc_msgSend_initRecordWithMonitoringRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRecordWithMonitoringRecord:");
}

id objc_msgSend_initRequiringSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRequiringSecureCoding:");
}

id objc_msgSend_initRoseCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRoseCommandWithParameters:");
}

id objc_msgSend_initRoseNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRoseNonOwnerCommandWithParameters:");
}

id objc_msgSend_initRoseNonOwnerTaskWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRoseNonOwnerTaskWithParameters:");
}

id objc_msgSend_initRoseTaskWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initRoseTaskWithParameters:");
}

id objc_msgSend_initToDirectory_prefix_rotation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initToDirectory:prefix:rotation:");
}

id objc_msgSend_initToFileAtPath_append_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initToFileAtPath:append:");
}

id objc_msgSend_initToMemory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initToMemory");
}

id objc_msgSend_initUnknown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initUnknown");
}

id objc_msgSend_initWith_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWith:");
}

id objc_msgSend_initWith_conformanceMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWith:conformanceMode:");
}

id objc_msgSend_initWithADRPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithADRPointer:");
}

id objc_msgSend_initWithARSessionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithARSessionState:");
}

id objc_msgSend_initWithAbsoluteTimeStamp_clientBundleIdentifier_maxProbabilityLabelIdentifier_maxProbability_probabilityVector_numDevicesVector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAbsoluteTimeStamp:clientBundleIdentifier:maxProbabilityLabelIdentifier:maxProbability:probabilityVector:numDevicesVector:");
}

id objc_msgSend_initWithAccessor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessor:");
}

id objc_msgSend_initWithAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccessory:");
}

id objc_msgSend_initWithAction_type_trackingIdentifier_observedLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAction:type:trackingIdentifier:observedLocations:");
}

id objc_msgSend_initWithActivityType_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityType:date:");
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:");
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_channel_didCauseWake_detailsBitmask_protocolID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:channel:didCauseWake:detailsBitmask:protocolID:");
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_detailsBitmask_uuid_protocolID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:detailsBitmask:uuid:protocolID:");
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_isPosh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:isPosh:");
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_isPosh_networkID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:isPosh:networkID:");
}

id objc_msgSend_initWithAddress_advertisementData_status_reserved_rssi_scanDate_uuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:advertisementData:status:reserved:rssi:scanDate:uuid:");
}

id objc_msgSend_initWithAddress_connectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:connectionToken:");
}

id objc_msgSend_initWithAddress_contactId_flags_eFlags_authTag_iTag_rssi_count_unixTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:contactId:flags:eFlags:authTag:iTag:rssi:count:unixTime:");
}

id objc_msgSend_initWithAddress_ltk_primaryIndex_secondaryIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAddress:ltk:primaryIndex:secondaryIndex:");
}

id objc_msgSend_initWithAdvertisement_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAdvertisement:location:");
}

id objc_msgSend_initWithAdvertisement_maxActivityBasedSpeedSinceAdvertisement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAdvertisement:maxActivityBasedSpeedSinceAdvertisement:");
}

id objc_msgSend_initWithAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAltitude:");
}

id objc_msgSend_initWithAltitude_accuracy_precision_status_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAltitude:accuracy:precision:status:timestamp:");
}

id objc_msgSend_initWithAnalyticsEvent_binPeriod_atCurrentTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsEvent:binPeriod:atCurrentTime:");
}

id objc_msgSend_initWithApiKey_onServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApiKey:onServer:");
}

id objc_msgSend_initWithAppMonitor_inUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppMonitor:inUniverse:");
}

id objc_msgSend_initWithAppMonitorProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAppMonitorProxy:");
}

id objc_msgSend_initWithApplicationBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithApplicationBundleIdentifier:");
}

id objc_msgSend_initWithArchive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArchive:");
}

id objc_msgSend_initWithArchive_index_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArchive:index:");
}

id objc_msgSend_initWithArchive_index_score_apHarvestCount_macsNotInALSDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArchive:index:score:apHarvestCount:macsNotInALSDatabase:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAscending_confidence_dateInterval_labelVisit_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAscending:confidence:dateInterval:labelVisit:limit:");
}

id objc_msgSend_initWithAscending_confidence_dateInterval_labelVisit_limit_sources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAscending:confidence:dateInterval:labelVisit:limit:sources:");
}

id objc_msgSend_initWithAscending_confidence_dateInterval_limit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAscending:confidence:dateInterval:limit:");
}

id objc_msgSend_initWithAssetType_assetData_maxPacketSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAssetType:assetData:maxPacketSize:");
}

id objc_msgSend_initWithAttributedEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedEntity:");
}

id objc_msgSend_initWithAttributionId_andTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributionId:andTimer:");
}

id objc_msgSend_initWithAverageSpeed_enableFallbackModel_timeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAverageSpeed:enableFallbackModel:timeInterval:");
}

id objc_msgSend_initWithBackgroundActivityIdentifier_activityAttribution_showsWhenForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackgroundActivityIdentifier:activityAttribution:showsWhenForeground:");
}

id objc_msgSend_initWithBarometricAltimeter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarometricAltimeter:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBatchedSensorSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBatchedSensorSubscription:");
}

id objc_msgSend_initWithBeaconIdentifier_type_date_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBeaconIdentifier:type:date:location:");
}

id objc_msgSend_initWithBeaconType_transmitPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBeaconType:transmitPower:");
}

id objc_msgSend_initWithBeaconUUID_address_deviceType_withAccessoryInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBeaconUUID:address:deviceType:withAccessoryInfo:");
}

id objc_msgSend_initWithBegin_end_state_kValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBegin:end:state:kValue:");
}

id objc_msgSend_initWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBool:");
}

id objc_msgSend_initWithBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBoutMetrics:");
}

id objc_msgSend_initWithBoutMetricsRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBoutMetricsRecorderDb:");
}

id objc_msgSend_initWithBufferAndLength_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBufferAndLength:length:");
}

id objc_msgSend_initWithBundleIDs_states_elevatedPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIDs:states:elevatedPriority:");
}

id objc_msgSend_initWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:error:");
}

id objc_msgSend_initWithBundleIdentifier_flags_reason_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:flags:reason:name:");
}

id objc_msgSend_initWithBundleLocationProvider_inSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleLocationProvider:inSilo:");
}

id objc_msgSend_initWithBundlePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundlePath:");
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleType:");
}

id objc_msgSend_initWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:");
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytes:length:encoding:");
}

id objc_msgSend_initWithBytesNoCopy_length_deallocator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:deallocator:");
}

id objc_msgSend_initWithBytesNoCopy_length_encoding_freeWhenDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBytesNoCopy:length:encoding:freeWhenDone:");
}

id objc_msgSend_initWithCLBacklightStateNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLBacklightStateNotifier:");
}

id objc_msgSend_initWithCLMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLMotionActivity:");
}

id objc_msgSend_initWithCLPIOSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLPIOSample:");
}

id objc_msgSend_initWithCLSWOLFSummary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLSWOLFSummary:");
}

id objc_msgSend_initWithCLStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLStrideCalEntry:");
}

id objc_msgSend_initWithCLWorkoutMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCLWorkoutMets:");
}

id objc_msgSend_initWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCString:encoding:");
}

id objc_msgSend_initWithCalendarIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalendarIdentifier:");
}

id objc_msgSend_initWithCalibrationTracks_rawSpeedToKValueBins_stepCadenceToStrideLengthBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCalibrationTracks:rawSpeedToKValueBins:stepCadenceToStrideLengthBins:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCenter_radius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCenter:radius:");
}

id objc_msgSend_initWithCenter_radius_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCenter:radius:identifier:");
}

id objc_msgSend_initWithCenter_radius_referenceFrame_allowMonitoringWhenNearby_lowPower_identifier_onBehalfOfBundleId_notifyOnEntry_notifyOnExit_conservativeEntry_emergency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCenter:radius:referenceFrame:allowMonitoringWhenNearby:lowPower:identifier:onBehalfOfBundleId:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:");
}

id objc_msgSend_initWithCenter_radius_referenceFrame_allowMonitoringWhenNearby_lowPower_identifier_onBehalfOfBundleId_notifyOnEntry_notifyOnExit_conservativeEntry_emergency_deviceId_handoffTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCenter:radius:referenceFrame:allowMonitoringWhenNearby:lowPower:identifier:onBehalfOfBundleId:notifyOnEntry:notifyOnExit:conservativeEntry:emergency:deviceId:handoffTag:");
}

id objc_msgSend_initWithClassifier_rootDirectory_basename_requestCode_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClassifier:rootDirectory:basename:requestCode:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_initWithClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:");
}

id objc_msgSend_initWithClient_identifier_atTime_atMonotonicTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:identifier:atTime:atMonotonicTime:");
}

id objc_msgSend_initWithClient_withIdentifier_usingReferenceFrame_atMachContinuousTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClient:withIdentifier:usingReferenceFrame:atMachContinuousTime:");
}

id objc_msgSend_initWithClientCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientCoordinate:");
}

id objc_msgSend_initWithClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientIdentifier:");
}

id objc_msgSend_initWithClientLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientLocation:");
}

id objc_msgSend_initWithClientLocation_clientLocationPrivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientLocation:clientLocationPrivate:");
}

id objc_msgSend_initWithClientLocation_coarseMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientLocation:coarseMetaData:");
}

id objc_msgSend_initWithClientManagerPointer_andUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientManagerPointer:andUniverse:");
}

id objc_msgSend_initWithClientMonitoringRecord_clientKeyPath_authorizationContext_universe_identifier_initForStopMonitoring_callbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClientMonitoringRecord:clientKeyPath:authorizationContext:universe:identifier:initForStopMonitoring:callbackHandler:");
}

id objc_msgSend_initWithCloseDeviceList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCloseDeviceList:");
}

id objc_msgSend_initWithCoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoder:");
}

id objc_msgSend_initWithCoexMetricDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoexMetricDict:");
}

id objc_msgSend_initWithColdStorageManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithColdStorageManager:");
}

id objc_msgSend_initWithCommand_desiredLatency_expectsResponse_completeOnPreemption_requiresMutex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommand:desiredLatency:expectsResponse:completeOnPreemption:requiresMutex:");
}

id objc_msgSend_initWithCommand_serviceUUID_characteristicUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommand:serviceUUID:characteristicUUID:");
}

id objc_msgSend_initWithCommand_serviceUUID_characteristicUUID_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCommand:serviceUUID:characteristicUUID:payload:");
}

id objc_msgSend_initWithCompanionNotifierCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCompanionNotifierCompanion:");
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConcurrencyType:");
}

id objc_msgSend_initWithConfidenceReasonEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfidenceReasonEnum:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConfiguration_clientKeyPath_authorizationContext_universe_hasClassCAccess_callbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:clientKeyPath:authorizationContext:universe:hasClassCAccess:callbackHandler:");
}

id objc_msgSend_initWithConfiguration_currentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:currentIndex:");
}

id objc_msgSend_initWithConnectionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnectionState:");
}

id objc_msgSend_initWithContainerID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerID:");
}

id objc_msgSend_initWithContainerIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:");
}

id objc_msgSend_initWithContainerIdentifier_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContainerIdentifier:environment:");
}

id objc_msgSend_initWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfFile:");
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentsOfURL:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithContextManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextManager:");
}

id objc_msgSend_initWithContextManager_andUniverse_andDelegate_andBuffers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextManager:andUniverse:andDelegate:andBuffers:");
}

id objc_msgSend_initWithContextType_forNotification_startTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContextType:forNotification:startTime:");
}

id objc_msgSend_initWithController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithController:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_courseAccuracy_speed_speedAccuracy_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_course_speed_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:");
}

id objc_msgSend_initWithCoordinate_altitude_horizontalAccuracy_verticalAccuracy_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:");
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:");
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_confidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:confidence:");
}

id objc_msgSend_initWithCoordinate_horizontalAccuracy_arrivalDate_departureDate_detectionDate_placeInference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:placeInference:");
}

id objc_msgSend_initWithCoordinateRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCoordinateRegion:");
}

id objc_msgSend_initWithDaemonClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemonClient:");
}

id objc_msgSend_initWithDaemonLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemonLocation:");
}

id objc_msgSend_initWithDaemonLocation_rawMotionActivity_motionActivity_dominantMotionActivity_vehicleConnected_vehicleConnectionStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemonLocation:rawMotionActivity:motionActivity:dominantMotionActivity:vehicleConnected:vehicleConnectionStateChanged:");
}

id objc_msgSend_initWithDaemonLocationPrivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDaemonLocationPrivate:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDataType:");
}

id objc_msgSend_initWithDatabase_dataSource_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabase:dataSource:metadata:");
}

id objc_msgSend_initWithDatabase_stateSerialization_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDatabase:stateSerialization:delegate:");
}

id objc_msgSend_initWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDate:");
}

id objc_msgSend_initWithDate_distance_averageSpeed_verticalDescent_runCount_maximumSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDate:distance:averageSpeed:verticalDescent:runCount:maximumSpeed:");
}

id objc_msgSend_initWithDateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateInterval:");
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:");
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:type:");
}

id objc_msgSend_initWithDateInterval_horizontalAccuracy_batchSize_boundingBoxLocation_type_downsampleRequired_smoothingErrorThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDateInterval:horizontalAccuracy:batchSize:boundingBoxLocation:type:downsampleRequired:smoothingErrorThreshold:");
}

id objc_msgSend_initWithDefaultDirectories_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDefaultDirectories:");
}

id objc_msgSend_initWithDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDefaults");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_andUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:andUniverse:");
}

id objc_msgSend_initWithDelegate_centralManager_optedIn_reconciler_queue_powerAssertionDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:centralManager:optedIn:reconciler:queue:powerAssertionDelegate:");
}

id objc_msgSend_initWithDelegate_peripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:peripheral:");
}

id objc_msgSend_initWithDelegate_platformType_supportsPerTypeDuplicateFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:platformType:supportsPerTypeDuplicateFilter:");
}

id objc_msgSend_initWithDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:");
}

id objc_msgSend_initWithDelegate_queue_matching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:matching:");
}

id objc_msgSend_initWithDelegate_queue_optedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:optedIn:");
}

id objc_msgSend_initWithDelegate_queue_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:options:");
}

id objc_msgSend_initWithDelegate_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:settings:");
}

id objc_msgSend_initWithDelegate_universe_moduleDictionary_setting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:universe:moduleDictionary:setting:");
}

id objc_msgSend_initWithDelegate_universeCopy_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:universeCopy:settings:");
}

id objc_msgSend_initWithDelegate_withSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:withSilo:");
}

id objc_msgSend_initWithDelegate_withUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:withUniverse:");
}

id objc_msgSend_initWithDeltaDistance_startDate_endDate_accuracy_rawSpeed_gpsSpeedAccuracy_timestampGps_deltaGroundAltitude_groundAltitudeUncertainty_originDevice_slope_maxAbsSlope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeltaDistance:startDate:endDate:accuracy:rawSpeed:gpsSpeedAccuracy:timestampGps:deltaGroundAltitude:groundAltitudeUncertainty:originDevice:slope:maxAbsSlope:");
}

id objc_msgSend_initWithDeltaPositionX_deltaPositionY_deltaPositionZ_deltaVelocityX_deltaVelocityY_deltaVelocityZ_quaternionX_quaternionY_quaternionZ_quaternionW_rotationArbitraryToTrueNorth_staticFlag_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeltaPositionX:deltaPositionY:deltaPositionZ:deltaVelocityX:deltaVelocityY:deltaVelocityZ:quaternionX:quaternionY:quaternionZ:quaternionW:rotationArbitraryToTrueNorth:staticFlag:timestamp:");
}

id objc_msgSend_initWithDepth_andPressure_andSurfacePressure_andState_andDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDepth:andPressure:andSurfacePressure:andState:andDate:");
}

id objc_msgSend_initWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDescription:");
}

id objc_msgSend_initWithDesiredNextKeyRollDate_nextWildIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDesiredNextKeyRollDate:nextWildIndex:");
}

id objc_msgSend_initWithDeviceIdentifier_uwbRange_bleRSSI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceIdentifier:uwbRange:bleRSSI:");
}

id objc_msgSend_initWithDeviceUUID_deviceType_productData_manufacturerName_modelName_firmwareVersion_accessoryCategory_accessoryCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceUUID:deviceType:productData:manufacturerName:modelName:firmwareVersion:accessoryCategory:accessoryCapabilities:");
}

id objc_msgSend_initWithDeviceUUID_deviceType_productData_manufacturerName_modelName_firmwareVersion_accessoryCategory_accessoryCapabilities_serialNumber_protocolImplementation_networkID_batteryType_batteryLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceUUID:deviceType:productData:manufacturerName:modelName:firmwareVersion:accessoryCategory:accessoryCapabilities:serialNumber:protocolImplementation:networkID:batteryType:batteryLevel:");
}

id objc_msgSend_initWithDeviceUUID_state_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceUUID:state:date:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDictionary_copyItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:copyItems:");
}

id objc_msgSend_initWithDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:");
}

id objc_msgSend_initWithDirectory_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_initWithDirectory_requestCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:requestCode:");
}

id objc_msgSend_initWithDirectory_requestCode_itemCountThresholdForAutoCleanUp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDirectory:requestCode:itemCountThresholdForAutoCleanUp:");
}

id objc_msgSend_initWithDistance_inUniverse_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDistance:inUniverse:handler:");
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:code:userInfo:");
}

id objc_msgSend_initWithDomain_maxProbabilityMicroLocationIdentifier_maxProbability_probabilityVector_isStable_numDevicesVector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:maxProbabilityMicroLocationIdentifier:maxProbability:probabilityVector:isStable:numDevicesVector:");
}

id objc_msgSend_initWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDouble:");
}

id objc_msgSend_initWithDoubleValue_unit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDoubleValue:unit:");
}

id objc_msgSend_initWithEffectiveBundlePath_delegate_onQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEffectiveBundlePath:delegate:onQueue:");
}

id objc_msgSend_initWithElevation_dateInterval_elevationUncertainty_estimationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElevation:dateInterval:elevationUncertainty:estimationStatus:");
}

id objc_msgSend_initWithElevationGradeEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElevationGradeEntry:");
}

id objc_msgSend_initWithElevationSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithElevationSubscription:");
}

id objc_msgSend_initWithEndpoint_parameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEndpoint:parameters:");
}

id objc_msgSend_initWithEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEntityName:");
}

id objc_msgSend_initWithEnvironmentName_namedDelegatePort_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironmentName:namedDelegatePort:queue:");
}

id objc_msgSend_initWithEvent_andDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEvent:andDate:");
}

id objc_msgSend_initWithEventDate_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventDate:type:");
}

id objc_msgSend_initWithEventType_withDescription_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEventType:withDescription:withError:");
}

id objc_msgSend_initWithExecutableIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExecutableIdentity:");
}

id objc_msgSend_initWithExecutableIdentity_website_systemService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExecutableIdentity:website:systemService:");
}

id objc_msgSend_initWithExecutablePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExecutablePath:");
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplanation:target:attributes:");
}

id objc_msgSend_initWithExportDatabaseTablesResult_requestIdentifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExportDatabaseTablesResult:requestIdentifier:error:");
}

id objc_msgSend_initWithExportDir_fileName_sandboxExtensionTok_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExportDir:fileName:sandboxExtensionTok:");
}

id objc_msgSend_initWithFenceMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFenceMonitor:");
}

id objc_msgSend_initWithFetchRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFetchRequest:");
}

id objc_msgSend_initWithFidelityPolicy_locations_accessPoints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFidelityPolicy:locations:accessPoints:");
}

id objc_msgSend_initWithFidelityPolicy_locations_accessPoints_clientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFidelityPolicy:locations:accessPoints:clientIdentifier:");
}

id objc_msgSend_initWithFileDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:");
}

id objc_msgSend_initWithFileDescriptor_closeOnDealloc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileDescriptor:closeOnDealloc:");
}

id objc_msgSend_initWithFilename_withDataProtectionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFilename:withDataProtectionClass:");
}

id objc_msgSend_initWithFilteredElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFilteredElevation:");
}

id objc_msgSend_initWithFingerprintErrorEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFingerprintErrorEnum:");
}

id objc_msgSend_initWithFireTime_timeInterval_serviceIdentifier_wakeDevice_clTimer_silo_minimumEarlyFireProportion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireTime:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:");
}

id objc_msgSend_initWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFloat:");
}

id objc_msgSend_initWithFloor_inVenue_lastRelevant_locationContext_ranking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFloor:inVenue:lastRelevant:locationContext:ranking:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithGEOCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGEOCoordinate:");
}

id objc_msgSend_initWithGaitMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGaitMetrics:");
}

id objc_msgSend_initWithGnssAWD_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithGnssAWD:");
}

id objc_msgSend_initWithHRRecoveryInputHR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHRRecoveryInputHR:");
}

id objc_msgSend_initWithHRRecoveryInputWR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHRRecoveryInputWR:");
}

id objc_msgSend_initWithHRRecoverySession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHRRecoverySession:");
}

id objc_msgSend_initWithHarvesterExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHarvesterExternal:");
}

id objc_msgSend_initWithHarvesterExternal_andSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHarvesterExternal:andSilo:");
}

id objc_msgSend_initWithHealthStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHealthStore:");
}

id objc_msgSend_initWithHealthStore_bundleIdentifier_quantityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHealthStore:bundleIdentifier:quantityType:");
}

id objc_msgSend_initWithHeartRate_confidence_timestamp_startDate_error_dataSource_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHeartRate:confidence:timestamp:startDate:error:dataSource:mode:");
}

id objc_msgSend_initWithHeartRateData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHeartRateData:");
}

id objc_msgSend_initWithHidDevice_matchingDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHidDevice:matchingDict:");
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:");
}

id objc_msgSend_initWithIdentifier_absoluteTimestamp_updateTimestamp_state_response_resolution_sosState_operatingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:absoluteTimestamp:updateTimestamp:state:response:resolution:sosState:operatingMode:");
}

id objc_msgSend_initWithIdentifier_andType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:andType:");
}

id objc_msgSend_initWithIdentifier_dateInterval_quantity_resumeContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:dateInterval:quantity:resumeContext:");
}

id objc_msgSend_initWithIdentifier_keyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:keyType:");
}

id objc_msgSend_initWithIdentifier_refinement_state_date_diagnostics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:refinement:state:date:diagnostics:");
}

id objc_msgSend_initWithIdentifier_targetQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:targetQueue:");
}

id objc_msgSend_initWithIdentifier_targetQueue_waking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIdentifier:targetQueue:waking:");
}

id objc_msgSend_initWithInUseLevel_registrationResult_transientAwareRegistrationResult_serviceMaskTuple_diagnosticMask_authorizedForWidgetUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:");
}

id objc_msgSend_initWithIncludeCrashLogs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIncludeCrashLogs:");
}

id objc_msgSend_initWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInt:");
}

id objc_msgSend_initWithInternalName_binPeriod_aggregationPeriod_atCurrentTime_andSubmit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInternalName:binPeriod:aggregationPeriod:atCurrentTime:andSubmit:");
}

id objc_msgSend_initWithInterval_motionActivityType_motionActivityConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInterval:motionActivityType:motionActivityConfidence:");
}

id objc_msgSend_initWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKey:ascending:");
}

id objc_msgSend_initWithKeyPointerFunctions_valuePointerFunctions_capacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyPointerFunctions:valuePointerFunctions:capacity:");
}

id objc_msgSend_initWithLabelIdentifier_probability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLabelIdentifier:probability:");
}

id objc_msgSend_initWithLatitude_longitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLatitude:longitude:");
}

id objc_msgSend_initWithLatitude_longitude_andAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLatitude:longitude:andAltitude:");
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLength:");
}

id objc_msgSend_initWithListener_silo_timeSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithListener:silo:timeSync:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithLocation_addressDictionary_region_areasOfInterest_mapItemSource_geoMapItemHandle_category_meCardAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:category:meCardAddress:");
}

id objc_msgSend_initWithLocation_addressDictionary_region_areasOfInterest_mapItemSource_geoMapItemHandle_meCardAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocation:addressDictionary:region:areasOfInterest:mapItemSource:geoMapItemHandle:meCardAddress:");
}

id objc_msgSend_initWithLocation_andPrivateLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocation:andPrivateLocation:");
}

id objc_msgSend_initWithLocationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocationController:");
}

id objc_msgSend_initWithLocationType_remotePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocationType:remotePath:");
}

id objc_msgSend_initWithLocationTypeEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocationTypeEnum:");
}

id objc_msgSend_initWithLoiLocationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLoiLocationProvider:");
}

id objc_msgSend_initWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLong:");
}

id objc_msgSend_initWithMac_latitude_longitude_altitude_horizontalAccuracy_verticalAccuracy_reach_stationaryTimeInSeconds_loiType_lastUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMac:latitude:longitude:altitude:horizontalAccuracy:verticalAccuracy:reach:stationaryTimeInSeconds:loiType:lastUpdated:");
}

id objc_msgSend_initWithMac_rssi_channel_age_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMac:rssi:channel:age:date:");
}

id objc_msgSend_initWithMacAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMacAddress:");
}

id objc_msgSend_initWithMacAddress_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMacAddress:timestamp:");
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:");
}

id objc_msgSend_initWithMachServiceName_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMachServiceName:options:");
}

id objc_msgSend_initWithMagneticAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMagneticAccessory:");
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManagedObjectModel:");
}

id objc_msgSend_initWithManufacturer_modelName_serialNumber_firmwareVersion_productGroup_productNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithManufacturer:modelName:serialNumber:firmwareVersion:productGroup:productNumber:");
}

id objc_msgSend_initWithMediator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMediator:");
}

id objc_msgSend_initWithMemoryCapacity_diskCapacity_diskPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMemoryCapacity:diskCapacity:diskPath:");
}

id objc_msgSend_initWithMiLoConnectionSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMiLoConnectionSubscription:");
}

id objc_msgSend_initWithMicroLocationIdentifier_probability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMicroLocationIdentifier:probability:");
}

id objc_msgSend_initWithMicroLocationNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMicroLocationNotifier:");
}

id objc_msgSend_initWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMode:");
}

id objc_msgSend_initWithMonitorGpsExternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMonitorGpsExternal:");
}

id objc_msgSend_initWithMotion_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotion:timestamp:");
}

id objc_msgSend_initWithMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionActivity:");
}

id objc_msgSend_initWithMotionActivity_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionActivity:endDate:");
}

id objc_msgSend_initWithMotionAlarmSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionAlarmSubscription:");
}

id objc_msgSend_initWithMotionLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMotionLogger:");
}

id objc_msgSend_initWithMovedBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMovedBuffer:");
}

id objc_msgSend_initWithNSDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNSDictionary:");
}

id objc_msgSend_initWithNVP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNVP:");
}

id objc_msgSend_initWithName_managedObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:managedObjectModel:");
}

id objc_msgSend_initWithName_path_onQueue_eventHandler_useMonitorQueueForVendingMonitor_vendingHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:path:onQueue:eventHandler:useMonitorQueueForVendingMonitor:vendingHandler:");
}

id objc_msgSend_initWithName_type_duration_repeats_alarmId_bundleId_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:type:duration:repeats:alarmId:bundleId:state:");
}

id objc_msgSend_initWithNonOwnerInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNonOwnerInformation:");
}

id objc_msgSend_initWithNumClustersLearnedInModel_numRecordingTriggersAtCurrentLOI_numInputValidFingerprints_numInputValidFingerprintsLabeled_numInputValidFingerprintsUnlabeled_numFingerprintsBeforePruning_numFingerprintsAfterPruning_numWiFiAccessPoints_numBLESources_numUWBSources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNumClustersLearnedInModel:numRecordingTriggersAtCurrentLOI:numInputValidFingerprints:numInputValidFingerprintsLabeled:numInputValidFingerprintsUnlabeled:numFingerprintsBeforePruning:numFingerprintsAfterPruning:numWiFiAccessPoints:numBLESources:numUWBSources:");
}

id objc_msgSend_initWithNumInflightUploads_maxUploadFileSizeMB_maxUploadQuotaMB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNumInflightUploads:maxUploadFileSizeMB:maxUploadQuotaMB:");
}

id objc_msgSend_initWithNumWiFiAccessPoints_numBLESources_numUWBSources_requestIdentifier_errors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNumWiFiAccessPoints:numBLESources:numUWBSources:requestIdentifier:errors:");
}

id objc_msgSend_initWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjects:");
}

id objc_msgSend_initWithObjectsAndKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithObjectsAndKeys:");
}

id objc_msgSend_initWithOdometerEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOdometerEntry:");
}

id objc_msgSend_initWithOdometerSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOdometerSubscription:");
}

id objc_msgSend_initWithOnBodyResult_confidence_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOnBodyResult:confidence:timestamp:");
}

id objc_msgSend_initWithOpcode_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOpcode:payload:");
}

id objc_msgSend_initWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOptions:");
}

id objc_msgSend_initWithOverviewId_workouts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOverviewId:workouts:");
}

id objc_msgSend_initWithOwnerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOwnerClass:");
}

id objc_msgSend_initWithOwnerInformation_matchedIndex_sequence_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOwnerInformation:matchedIndex:sequence:error:");
}

id objc_msgSend_initWithParameters_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:delegate:");
}

id objc_msgSend_initWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPath:");
}

id objc_msgSend_initWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:");
}

id objc_msgSend_initWithPayload_requestTypeCode_endpoint_headers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayload:requestTypeCode:endpoint:headers:");
}

id objc_msgSend_initWithPayloadV1_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayloadV1:");
}

id objc_msgSend_initWithPayloadV2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPayloadV2:");
}

id objc_msgSend_initWithPedestrianFenceClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPedestrianFenceClient:");
}

id objc_msgSend_initWithPencilState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPencilState:");
}

id objc_msgSend_initWithPendingChanges_recordProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPendingChanges:recordProvider:");
}

id objc_msgSend_initWithPersistence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistence:");
}

id objc_msgSend_initWithPersistenceBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPersistenceBytes:");
}

id objc_msgSend_initWithPid_name_queue_backgrounded_registration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPid:name:queue:backgrounded:registration:");
}

id objc_msgSend_initWithPlaceIdentifier_score_confidence_placeMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlaceIdentifier:score:confidence:placeMetadata:");
}

id objc_msgSend_initWithPlacePredictions_locationSimilarityList_closeDeviceList_error_requestIdentifier_predictionTime_confidence_placeConfidenceReasons_localizationFingerprintMetaInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlacePredictions:locationSimilarityList:closeDeviceList:error:requestIdentifier:predictionTime:confidence:placeConfidenceReasons:localizationFingerprintMetaInfo:");
}

id objc_msgSend_initWithPlaces_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlaces:");
}

id objc_msgSend_initWithPlaces_serviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlaces:serviceType:");
}

id objc_msgSend_initWithPredicate_anchor_options_resultsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredicate:anchor:options:resultsHandler:");
}

id objc_msgSend_initWithPredicate_resultsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredicate:resultsHandler:");
}

id objc_msgSend_initWithPredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredictedWalkDistanceBout:");
}

id objc_msgSend_initWithPredictedWalkDistanceBoutEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredictedWalkDistanceBoutEntry:");
}

id objc_msgSend_initWithPredictedWalkDistanceBoutRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPredictedWalkDistanceBoutRecorderDb:");
}

id objc_msgSend_initWithPressure_stdDeviation_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPressure:stdDeviation:timestamp:");
}

id objc_msgSend_initWithProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProperties:");
}

id objc_msgSend_initWithProtobufData_type_isResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProtobufData:type:isResponse:");
}

id objc_msgSend_initWithProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProvider:");
}

id objc_msgSend_initWithProvider_onSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProvider:onSilo:");
}

id objc_msgSend_initWithProximityUUID_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProximityUUID:identifier:");
}

id objc_msgSend_initWithProximityUUID_major_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProximityUUID:major:identifier:");
}

id objc_msgSend_initWithProximityUUID_major_minor_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProximityUUID:major:minor:identifier:");
}

id objc_msgSend_initWithQuality_andReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQuality:andReasons:");
}

id objc_msgSend_initWithQualityReasonEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQualityReasonEnum:");
}

id objc_msgSend_initWithQuantityType_quantitySamplePredicate_options_anchorDate_intervalComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQuantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:");
}

id objc_msgSend_initWithQuantityType_quantitySamplePredicate_options_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQuantityType:quantitySamplePredicate:options:completionHandler:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithQueue_andController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:andController:");
}

id objc_msgSend_initWithQueue_decisionTreeObj_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:decisionTreeObj:");
}

id objc_msgSend_initWithQueue_defaultConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:defaultConfig:");
}

id objc_msgSend_initWithQueue_helperObj_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:helperObj:");
}

id objc_msgSend_initWithQueue_mitigationConfig_cachedCoexMetricData_eventCB_coexMetricUpdateCB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:");
}

id objc_msgSend_initWithQueue_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:settings:");
}

id objc_msgSend_initWithQueue_settings_advStore_btClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:settings:advStore:btClient:");
}

id objc_msgSend_initWithQueue_withSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:withSettings:");
}

id objc_msgSend_initWithQueue_withSettings_withPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:withSettings:withPolicy:");
}

id objc_msgSend_initWithRadius_radialDisplacement_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRadius:radialDisplacement:duration:");
}

id objc_msgSend_initWithRecordID_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordID:type:");
}

id objc_msgSend_initWithRecordName_zoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordName:zoneID:");
}

id objc_msgSend_initWithRecordType_recordID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRecordType:recordID:");
}

id objc_msgSend_initWithRegion_eventType_eventDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRegion:eventType:eventDate:");
}

id objc_msgSend_initWithRequestTimestamp_hints_replyBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestTimestamp:hints:replyBlock:");
}

id objc_msgSend_initWithRequester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequester:");
}

id objc_msgSend_initWithRootDirectory_classifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootDirectory:classifier:");
}

id objc_msgSend_initWithSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSample:");
}

id objc_msgSend_initWithSampleType_predicate_limit_sortDescriptors_resultsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:");
}

id objc_msgSend_initWithSampleType_samplePredicate_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSampleType:samplePredicate:completionHandler:");
}

id objc_msgSend_initWithSerializedOutdoorEstimatorLogEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerializedOutdoorEstimatorLogEntry:");
}

id objc_msgSend_initWithSerializedVIOEstimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerializedVIOEstimation:");
}

id objc_msgSend_initWithSerializedVLLocalizationResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSerializedVLLocalizationResult:");
}

id objc_msgSend_initWithService_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:delegate:queue:");
}

id objc_msgSend_initWithService_priority_asMasterStore_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithService:priority:asMasterStore:options:");
}

id objc_msgSend_initWithServiceIdentifier_serviceType_locationTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceIdentifier:serviceType:locationTypes:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithServiceState_suspendReasons_serviceDescriptor_currentLocationOfInterestUuid_currentLocationOfInterestType_error_serviceQualityInfo_places_metaInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceState:suspendReasons:serviceDescriptor:currentLocationOfInterestUuid:currentLocationOfInterestType:error:serviceQualityInfo:places:metaInfo:");
}

id objc_msgSend_initWithSessionId_locationType_poolLength_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionId:locationType:poolLength:startDate:endDate:");
}

id objc_msgSend_initWithSessionId_type_locationType_mode_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSessionId:type:locationType:mode:startDate:endDate:");
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSet:");
}

id objc_msgSend_initWithSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettings:");
}

id objc_msgSend_initWithSignalQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSignalQuality:");
}

id objc_msgSend_initWithSignificantElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSignificantElevation:");
}

id objc_msgSend_initWithSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:");
}

id objc_msgSend_initWithSilo_andMonitorRegion_andOnRegionChangedCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:andMonitorRegion:andOnRegionChangedCallback:");
}

id objc_msgSend_initWithSilo_iDSService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:iDSService:");
}

id objc_msgSend_initWithSilo_provider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:provider:");
}

id objc_msgSend_initWithSilo_vendor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSilo:vendor:");
}

id objc_msgSend_initWithSkiEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSkiEntry:");
}

id objc_msgSend_initWithSlot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSlot:");
}

id objc_msgSend_initWithSpeeds_speedUB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSpeeds:speedUB:");
}

id objc_msgSend_initWithSpringEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSpringEntry:");
}

id objc_msgSend_initWithStart_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStart:end:");
}

id objc_msgSend_initWithStart_stop_distanceGps_distanceRawPed_steps_gpsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStart:stop:distanceGps:distanceRawPed:steps:gpsSource:");
}

id objc_msgSend_initWithStartDate_duration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:duration:");
}

id objc_msgSend_initWithStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:");
}

id objc_msgSend_initWithStartDate_endDate_elevationAscended_elevationDescended_source_recordId_sourceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:elevationAscended:elevationDescended:source:recordId:sourceId:");
}

id objc_msgSend_initWithStartDate_endDate_steps_distance_floorsAscended_floorsDescended_recordID_currentPace_currentCadence_firstStepTime_activeTime_sourceId_isOdometerDistance_isOdometerPace_pushes_workoutType_elevationAscended_elevationDescended_distanceSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:");
}

id objc_msgSend_initWithStartDate_eventType_action_reason_workoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:eventType:action:reason:workoutType:");
}

id objc_msgSend_initWithStartDate_firedDate_alarmType_didWake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:firedDate:alarmType:didWake:");
}

id objc_msgSend_initWithStartDate_recordId_activityType_mets_natalies_basalNatalies_sourceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:recordId:activityType:mets:natalies:basalNatalies:sourceId:");
}

id objc_msgSend_initWithStartDate_recordId_sourceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:recordId:sourceId:");
}

id objc_msgSend_initWithStartDate_suitableForRunning_suitableForWalking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:suitableForRunning:suitableForWalking:");
}

id objc_msgSend_initWithStartDate_type_confidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStartDate:type:confidence:");
}

id objc_msgSend_initWithStarting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStarting:");
}

id objc_msgSend_initWithStarting_isWiFiSwitchOn_quality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStarting:isWiFiSwitchOn:quality:");
}

id objc_msgSend_initWithStarting_rat_deviceRegistrationState_quality_rrcStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStarting:rat:deviceRegistrationState:quality:rrcStatus:");
}

id objc_msgSend_initWithState_confidence_observationInterval_additionalInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:confidence:observationInterval:additionalInfo:");
}

id objc_msgSend_initWithState_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:date:");
}

id objc_msgSend_initWithState_startTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:startTime:");
}

id objc_msgSend_initWithState_workout_entryDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithState:workout:entryDate:");
}

id objc_msgSend_initWithStatus_startDate_endDate_meanDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStatus:startDate:endDate:meanDelta:");
}

id objc_msgSend_initWithStepCountSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStepCountSubscription:");
}

id objc_msgSend_initWithStepEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStepEntry:");
}

id objc_msgSend_initWithStoreIdentifier_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStoreIdentifier:type:");
}

id objc_msgSend_initWithStreamingAllowed_framerateFps_bitrateKbps_dropStreaming_uploadAllowed_uploadMitigation_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStreamingAllowed:framerateFps:bitrateKbps:dropStreaming:uploadAllowed:uploadMitigation:source:");
}

id objc_msgSend_initWithStrideCalEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStrideCalEntry:");
}

id objc_msgSend_initWithStrideCalRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStrideCalRecorderDb:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithSubjectUUID_studyUUID_channel_payloadType_certificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubjectUUID:studyUUID:channel:payloadType:certificate:");
}

id objc_msgSend_initWithSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSubscription:");
}

id objc_msgSend_initWithSuspendReasonEnum_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSuspendReasonEnum:");
}

id objc_msgSend_initWithSwimEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSwimEntry:");
}

id objc_msgSend_initWithSyncManager_silo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSyncManager:silo:");
}

id objc_msgSend_initWithSystemStateType_isOn_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSystemStateType:isOn:date:");
}

id objc_msgSend_initWithTASPAdvertisement_deviceType_notificationState_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTASPAdvertisement:deviceType:notificationState:date:");
}

id objc_msgSend_initWithTCCIdentity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTCCIdentity:");
}

id objc_msgSend_initWithTechnology_numDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTechnology:numDevices:");
}

id objc_msgSend_initWithTemperature_andTemperatureUncertainty_andDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTemperature:andTemperatureUncertainty:andDate:");
}

id objc_msgSend_initWithTestMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTestMode:");
}

id objc_msgSend_initWithThreshold_sampleCount_sampleRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithThreshold:sampleCount:sampleRate:");
}

id objc_msgSend_initWithTime_dataPeriodSec_deltaCourseRad_deltaSpeedMps_deltaCourseVarRad2_deltaSpeedVarMps2_deltaCourseSpeedCovarRadMps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTime:dataPeriodSec:deltaCourseRad:deltaSpeedMps:deltaCourseVarRad2:deltaSpeedVarMps2:deltaCourseSpeedCovarRadMps:");
}

id objc_msgSend_initWithTime_latitude_longitude_horizontalAccuracy_course_courseAccuracy_speed_speedAccuracy_altitude_altitudeAccuracy_locType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTime:latitude:longitude:horizontalAccuracy:course:courseAccuracy:speed:speedAccuracy:altitude:altitudeAccuracy:locType:");
}

id objc_msgSend_initWithTimeInterval_serviceIdentifier_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:serviceIdentifier:target:selector:userInfo:");
}

id objc_msgSend_initWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeInterval:sinceDate:");
}

id objc_msgSend_initWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeIntervalSinceReferenceDate:");
}

id objc_msgSend_initWithTimeRange_vehicleName_vehicleModelName_vehicleBluetoothAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeRange:vehicleName:vehicleModelName:vehicleBluetoothAddress:");
}

id objc_msgSend_initWithTimeZone_zoneBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimeZone:zoneBoundary:");
}

id objc_msgSend_initWithTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:");
}

id objc_msgSend_initWithTimestamp_RSSI_uuid_ipv4_channel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:RSSI:uuid:ipv4:channel:");
}

id objc_msgSend_initWithTimestamp_illumination_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:illumination:");
}

id objc_msgSend_initWithTimestamp_intensity_intensityCalDelta_intensityBaselineDelta_ambient_pocketProbability_baselineConfidence_rxNtcC_scanFlags_pocketFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:intensity:intensityCalDelta:intensityBaselineDelta:ambient:pocketProbability:baselineConfidence:rxNtcC:scanFlags:pocketFlag:");
}

id objc_msgSend_initWithTimestamp_latitude_longitude_horizontalAccuracy_altitude_verticalAccuracy_speed_speedAccuracy_course_courseAccuracy_deltaDistance_deltaDistanceAccuracy_groundAltitude_groundAltitudeUncertainty_pressure_pressureUncertainty_isSimulatedOrSpoofed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:latitude:longitude:horizontalAccuracy:altitude:verticalAccuracy:speed:speedAccuracy:course:courseAccuracy:deltaDistance:deltaDistanceAccuracy:groundAltitude:groundAltitudeUncertainty:pressure:pressureUncertainty:isSimulatedOrSpoofed:");
}

id objc_msgSend_initWithTimestamp_latitude_longitude_horizontalAccuracy_altitude_verticalAccuracy_speed_speedAccuracy_course_courseAccuracy_floorLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:latitude:longitude:horizontalAccuracy:altitude:verticalAccuracy:speed:speedAccuracy:course:courseAccuracy:floorLevel:");
}

id objc_msgSend_initWithTimestamp_machContinuousTimestamp_sampleInterval_deltaPosition_deltaVelocity_quaternion_referenceFrameContinuity_referenceFrame_staticFlag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:machContinuousTimestamp:sampleInterval:deltaPosition:deltaVelocity:quaternion:referenceFrameContinuity:referenceFrame:staticFlag:");
}

id objc_msgSend_initWithTimestamp_state_hints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTimestamp:state:hints:");
}

id objc_msgSend_initWithTrack_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrack:session:");
}

id objc_msgSend_initWithTrackRunController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrackRunController:");
}

id objc_msgSend_initWithTracksData_andLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTracksData:andLocation:");
}

id objc_msgSend_initWithTransportType_andNavigationState_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTransportType:andNavigationState:date:");
}

id objc_msgSend_initWithTrigger_duration_onQueue_forClient_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrigger:duration:onQueue:forClient:withHandler:");
}

id objc_msgSend_initWithTrigger_duration_onQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTrigger:duration:onQueue:withHandler:");
}

id objc_msgSend_initWithTripSegmentID_isFinalPart_modeOfTransport_tripLocations_startTripLocation_stopTripLocation_inertialOdometryData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTripSegmentID:isFinalPart:modeOfTransport:tripLocations:startTripLocation:stopTripLocation:inertialOdometryData:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithType_dataCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:dataCollection:");
}

id objc_msgSend_initWithType_latitude_longitude_horizontalAccuracy_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:latitude:longitude:horizontalAccuracy:date:");
}

id objc_msgSend_initWithType_latitude_longitude_horizontalAccuracy_referenceFrame_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:latitude:longitude:horizontalAccuracy:referenceFrame:date:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_delegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:delegate:queue:");
}

id objc_msgSend_initWithURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:error:");
}

id objc_msgSend_initWithURL_useCloudKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:useCloudKit:");
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUTF8String:");
}

id objc_msgSend_initWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:");
}

id objc_msgSend_initWithUUID_address_successType_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:address:successType:date:");
}

id objc_msgSend_initWithUUID_deviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:deviceType:");
}

id objc_msgSend_initWithUUID_major_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:major:");
}

id objc_msgSend_initWithUUID_major_minor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:major:minor:");
}

id objc_msgSend_initWithUUID_queue_centralManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:queue:centralManager:");
}

id objc_msgSend_initWithUUID_withAISInfo_successType_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUID:withAISInfo:successType:date:");
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDBytes:");
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUUIDString:");
}

id objc_msgSend_initWithUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnderlyingQueue:");
}

id objc_msgSend_initWithUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:");
}

id objc_msgSend_initWithUniverse_andDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:andDelegate:");
}

id objc_msgSend_initWithUniverse_andStateMachine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:andStateMachine:");
}

id objc_msgSend_initWithUniverse_apnsTokenCallback_apnsMessageCallback_apnsReconnectedCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:apnsTokenCallback:apnsMessageCallback:apnsReconnectedCallback:");
}

id objc_msgSend_initWithUniverse_buffers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:buffers:");
}

id objc_msgSend_initWithUniverse_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:delegate:");
}

id objc_msgSend_initWithUniverse_delegate_buffers_contextManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:delegate:buffers:contextManager:");
}

id objc_msgSend_initWithUniverse_delegate_withBuffer_withSourceAggregator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:delegate:withBuffer:withSourceAggregator:");
}

id objc_msgSend_initWithUniverse_fenceAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:fenceAnalyticsManager:");
}

id objc_msgSend_initWithUniverse_initialMitigation_mitigationConfig_activeSim_Rat_wifiEmergency_cachedCoexMetricData_mitigationCB_coexMetricUpdateCB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:initialMitigation:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:mitigationCB:coexMetricUpdateCB:");
}

id objc_msgSend_initWithUniverse_mitigationConfig_activeSim_Rat_wifiEmergency_cachedCoexMetricData_eventCB_coexMetricUpdateCB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:mitigationConfig:activeSim:Rat:wifiEmergency:cachedCoexMetricData:eventCB:coexMetricUpdateCB:");
}

id objc_msgSend_initWithUniverse_pendingRequestsCB_streamingRequestCB_uploadRequestCB_streamingEndCB_uploadListCB_handleResponseCB_mitigationsCB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:pendingRequestsCB:streamingRequestCB:uploadRequestCB:streamingEndCB:uploadListCB:handleResponseCB:mitigationsCB:");
}

id objc_msgSend_initWithUniverse_serviceCompletionCB_getMitigationCB_getUploadConfigCB_errorCB_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUniverse:serviceCompletionCB:getMitigationCB:getUploadConfigCB:errorCB:");
}

id objc_msgSend_initWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnsignedShort:");
}

id objc_msgSend_initWithUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUpdateHandler:");
}

id objc_msgSend_initWithUpdateRate_withDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUpdateRate:withDuration:");
}

id objc_msgSend_initWithUserType_placeType_placemark_referenceLocation_confidence_preferredName_loiIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUserType:placeType:placemark:referenceLocation:confidence:preferredName:loiIdentifier:");
}

id objc_msgSend_initWithValue_dirty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValue:dirty:");
}

id objc_msgSend_initWithValueOut_begin_end_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithValueOut:begin:end:state:");
}

id objc_msgSend_initWithVehicleStateNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVehicleStateNotifier:");
}

id objc_msgSend_initWithVehicularState_andVehicularHints_andOperatorState_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVehicularState:andVehicularHints:andOperatorState:date:");
}

id objc_msgSend_initWithVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithVisit:");
}

id objc_msgSend_initWithWalkingSpeedCalRecorderDb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWalkingSpeedCalRecorderDb:");
}

id objc_msgSend_initWithWalkingSpeedStrideCal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWalkingSpeedStrideCal:");
}

id objc_msgSend_initWithWaterSubmersionClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWaterSubmersionClient:");
}

id objc_msgSend_initWithWindowSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindowSize:");
}

id objc_msgSend_initWithWindowSize_andCadence_andVerticalAccuracyThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindowSize:andCadence:andVerticalAccuracyThreshold:");
}

id objc_msgSend_initWithWorkoutDistanceMeasures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWorkoutDistanceMeasures:");
}

id objc_msgSend_initWithWorkoutSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWorkoutSubscription:");
}

id objc_msgSend_initWithX_Y_Z_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithX:Y:Z:");
}

id objc_msgSend_initWithX_Y_Z_W_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithX:Y:Z:W:");
}

id objc_msgSend_initWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZone:");
}

id objc_msgSend_initWithZoneID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneID:");
}

id objc_msgSend_initWithZoneName_ownerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithZoneName:ownerName:");
}

id objc_msgSend_initialCellParamsDeemedReceived(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialCellParamsDeemedReceived");
}

id objc_msgSend_initializeClientRequestsViewsWithZeroValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeClientRequestsViewsWithZeroValues:");
}

id objc_msgSend_initializeCloudKitSchemaWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeCloudKitSchemaWithOptions:error:");
}

id objc_msgSend_initializeKeychainItemWithIdentifier_keyType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeKeychainItemWithIdentifier:keyType:");
}

id objc_msgSend_initializeScanTypeChangeViewsWithZeroValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeScanTypeChangeViewsWithZeroValues");
}

id objc_msgSend_initializeSyncEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeSyncEngine");
}

id objc_msgSend_initializeTheSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeTheSettings:");
}

id objc_msgSend_initializeThresholds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeThresholds");
}

id objc_msgSend_initializeThresholdsGivenAltitude_andAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initializeThresholdsGivenAltitude:andAccuracy:");
}

id objc_msgSend_inlandWater(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inlandWater");
}

id objc_msgSend_inlierIndices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inlierIndices");
}

id objc_msgSend_inliersCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inliersCount");
}

id objc_msgSend_inputReportForDevice_report_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputReportForDevice:report:length:");
}

id objc_msgSend_inputStreamWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputStreamWithURL:");
}

id objc_msgSend_inputs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputs");
}

id objc_msgSend_inputsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputsAtIndex:");
}

id objc_msgSend_inputsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inputsCount");
}

id objc_msgSend_insertClient_withThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertClient:withThreshold:");
}

id objc_msgSend_insertDatums_device_metadata_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertDatums:device:metadata:completion:");
}

id objc_msgSend_insertFence_inSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertFence:inSession:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_installFenceWithCenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installFenceWithCenter:");
}

id objc_msgSend_installedEducationProfile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedEducationProfile");
}

id objc_msgSend_installedProfileIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedProfileIdentifiers");
}

id objc_msgSend_installedProfileWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedProfileWithIdentifier:");
}

id objc_msgSend_installedRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedRegion");
}

id objc_msgSend_instanceMethodSignatureForSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceMethodSignatureForSelector:");
}

id objc_msgSend_instancesRespondToSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instancesRespondToSelector:");
}

id objc_msgSend_intForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_intForKey_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intForKey:defaultValue:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_interVisitMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interVisitMetrics");
}

id objc_msgSend_interestForClientKey_outInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestForClientKey:outInterest:");
}

id objc_msgSend_interestTypeForClientKey_outType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestTypeForClientKey:outType:");
}

id objc_msgSend_interestZones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestZones");
}

id objc_msgSend_interestZonesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestZonesAtIndex:");
}

id objc_msgSend_interestZonesCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestZonesCount");
}

id objc_msgSend_interestedPartyIso3166CountryCodes2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interestedPartyIso3166CountryCodes2");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interface");
}

id objc_msgSend_interfaceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceName");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalRoadName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalRoadName");
}

id objc_msgSend_interpPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interpPressure");
}

id objc_msgSend_interpolateWithStartTime_andStartValue_andEndTime_andEndValue_atTargetTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interpolateWithStartTime:andStartValue:andEndTime:andEndValue:atTargetTime:");
}

id objc_msgSend_intersectsDateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intersectsDateInterval:");
}

id objc_msgSend_interval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interval");
}

id objc_msgSend_intervalSinceLastSearchPartyKeyObservation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalSinceLastSearchPartyKeyObservation");
}

id objc_msgSend_intervalTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalTimer");
}

id objc_msgSend_invalid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalid");
}

id objc_msgSend_invalidGradePercentage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidGradePercentage");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate:");
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateAndCancel");
}

id objc_msgSend_invalidateFetchPlaceInferenceTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateFetchPlaceInferenceTimer");
}

id objc_msgSend_invalidateRangingSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateRangingSession");
}

id objc_msgSend_invertedSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invertedSet");
}

id objc_msgSend_invocationWithMethodSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invocationWithMethodSignature:");
}

id objc_msgSend_invoke(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invoke");
}

id objc_msgSend_ionosphereEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ionosphereEndpoint");
}

id objc_msgSend_ipv4(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ipv4");
}

id objc_msgSend_isAFire6OrOlderWatchPaired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAFire6OrOlderWatchPaired");
}

id objc_msgSend_isARSessionActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isARSessionActive");
}

id objc_msgSend_isAckTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAckTask:");
}

id objc_msgSend_isAcknowledgement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAcknowledgement");
}

id objc_msgSend_isActiveDeviceNearby(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActiveDeviceNearby");
}

id objc_msgSend_isActiveSubArchive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActiveSubArchive");
}

id objc_msgSend_isActiveTaskOpcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActiveTaskOpcode:");
}

id objc_msgSend_isAdvertising(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAdvertising");
}

id objc_msgSend_isAggAdvCompleteTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAggAdvCompleteTask:");
}

id objc_msgSend_isAggressiveLongScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAggressiveLongScanning");
}

id objc_msgSend_isAggressiveScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAggressiveScanning");
}

id objc_msgSend_isAggressiveSettingDataDownloadLimitCrossed_building_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAggressiveSettingDataDownloadLimitCrossed:building:");
}

id objc_msgSend_isAirPodsProBuds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAirPodsProBuds:");
}

id objc_msgSend_isAirPodsProCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAirPodsProCase:");
}

id objc_msgSend_isAirTag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAirTag");
}

id objc_msgSend_isAllowOverCellular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAllowOverCellular");
}

id objc_msgSend_isAlwaysOnEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAlwaysOnEnabled");
}

id objc_msgSend_isAnySessionActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAnySessionActive");
}

id objc_msgSend_isAppInstalled_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppInstalled:completion:");
}

id objc_msgSend_isApple(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isApple");
}

id objc_msgSend_isApplePersonalHotspot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isApplePersonalHotspot");
}

id objc_msgSend_isAttemptingConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAttemptingConnection");
}

id objc_msgSend_isAuthLimited(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthLimited");
}

id objc_msgSend_isAuthSharingSubIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthSharingSubIdentity");
}

id objc_msgSend_isAuthorized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorized");
}

id objc_msgSend_isAuthorizedForLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorizedForLocation");
}

id objc_msgSend_isAuthorizedForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorizedForServiceType:");
}

id objc_msgSend_isAuthorizedForServiceTypeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAuthorizedForServiceTypeMask:");
}

id objc_msgSend_isAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAvailable");
}

id objc_msgSend_isBin_sameActivityAsBin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBin:sameActivityAsBin:");
}

id objc_msgSend_isBinaryLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBinaryLogging");
}

id objc_msgSend_isBridge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBridge");
}

id objc_msgSend_isCalibrationAvailableForStepCadence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCalibrationAvailableForStepCadence:");
}

id objc_msgSend_isCalibrationConvergedStdForBinWithSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCalibrationConvergedStdForBinWithSpeed:");
}

id objc_msgSend_isCallWithSideButtonPressesEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCallWithSideButtonPressesEnabled");
}

id objc_msgSend_isCallWithVolumeLockHoldEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCallWithVolumeLockHoldEnabled");
}

id objc_msgSend_isCancellablePlaySoundTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancellablePlaySoundTask:");
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCancelled");
}

id objc_msgSend_isCapableOfAllHawkeyeServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCapableOfAllHawkeyeServices");
}

id objc_msgSend_isCapableOfDynamicConnectionLatency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCapableOfDynamicConnectionLatency");
}

id objc_msgSend_isCapableOfFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCapableOfFirmwareUpdate");
}

id objc_msgSend_isCentroidDatabaseValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCentroidDatabaseValid");
}

id objc_msgSend_isClassicallyConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isClassicallyConnected");
}

id objc_msgSend_isClassificationAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isClassificationAvailable");
}

id objc_msgSend_isClientActivityTypeAirborneActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isClientActivityTypeAirborneActive");
}

id objc_msgSend_isClientActivityTypeFitnessActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isClientActivityTypeFitnessActive");
}

id objc_msgSend_isClientWithKeyInterested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isClientWithKeyInterested:");
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isComplete");
}

id objc_msgSend_isConfigurationControlPointTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConfigurationControlPointTask");
}

id objc_msgSend_isConflictResolutionMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConflictResolutionMode");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnected");
}

id objc_msgSend_isConservativeEntry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConservativeEntry");
}

id objc_msgSend_isCorrectiveCompensationSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCorrectiveCompensationSupported");
}

id objc_msgSend_isCurrentActiveDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentActiveDevice:");
}

id objc_msgSend_isDataCollectionAuthorized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDataCollectionAuthorized");
}

id objc_msgSend_isDate_inSameDayAsDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDate:inSameDayAsDate:");
}

id objc_msgSend_isDebugControlPointTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDebugControlPointTask");
}

id objc_msgSend_isDefaultPairedDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDefaultPairedDevice");
}

id objc_msgSend_isDefaultScanType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDefaultScanType:");
}

id objc_msgSend_isDenyListAccessory_name_model_serialNumber_firmware_hardwareRevision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDenyListAccessory:name:model:serialNumber:firmware:hardwareRevision:");
}

id objc_msgSend_isDeparture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeparture:");
}

id objc_msgSend_isDeviceNearbyAndConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeviceNearbyAndConnected");
}

id objc_msgSend_isDeviceSatellitePaired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeviceSatellitePaired");
}

id objc_msgSend_isDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDisabled");
}

id objc_msgSend_isDiscoveryRequiredForDevice_onCondition_withPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDiscoveryRequiredForDevice:onCondition:withPeripheral:");
}

id objc_msgSend_isDisputed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDisputed");
}

id objc_msgSend_isDrivable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDrivable");
}

id objc_msgSend_isDurianConnectionLatency_lowerThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDurianConnectionLatency:lowerThan:");
}

id objc_msgSend_isEligibleForPreProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEligibleForPreProcessing:");
}

id objc_msgSend_isEmergency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmergency");
}

id objc_msgSend_isEmergencyFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmergencyFence");
}

id objc_msgSend_isEmergencySetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmergencySetup");
}

id objc_msgSend_isEmergencyText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEmergencyText");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEndpointOnCurrentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEndpointOnCurrentDevice");
}

id objc_msgSend_isEndpointTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEndpointTask:");
}

id objc_msgSend_isEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEntry:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToAdvertisement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToAdvertisement:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToData:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDateInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDateInterval:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToPayload:");
}

id objc_msgSend_isEqualToSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToSet:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isEqualToTargetAdv_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToTargetAdv:");
}

id objc_msgSend_isFileURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFileURL");
}

id objc_msgSend_isFindMyNetwork(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFindMyNetwork");
}

id objc_msgSend_isFirmwareVersionCrashTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFirmwareVersionCrashTask:");
}

id objc_msgSend_isFreeWake(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFreeWake");
}

id objc_msgSend_isFwdlAbortTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFwdlAbortTask:");
}

id objc_msgSend_isGeoFenceAuthorizedAndPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isGeoFenceAuthorizedAndPossible");
}

id objc_msgSend_isGroupStatusResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isGroupStatusResponse:");
}

id objc_msgSend_isHawkeyeAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHawkeyeAccessory");
}

id objc_msgSend_isHealthDataAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHealthDataAvailable");
}

id objc_msgSend_isHealthDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHealthDataSubmissionAllowed");
}

id objc_msgSend_isHeleAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHeleAccessory");
}

id objc_msgSend_isHelperFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHelperFence");
}

id objc_msgSend_isIHAAuthorized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIHAAuthorized");
}

id objc_msgSend_isInDisputedArea(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInDisputedArea");
}

id objc_msgSend_isInEmegencyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInEmegencyState:");
}

id objc_msgSend_isInHomeCountry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInHomeCountry");
}

id objc_msgSend_isInIndia(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInIndia");
}

id objc_msgSend_isInMidRangeRssi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInMidRangeRssi:");
}

id objc_msgSend_isInOutdoorWorkout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInOutdoorWorkout");
}

id objc_msgSend_isInOutdoorWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInOutdoorWorkout:");
}

id objc_msgSend_isInVehicleNavigation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInVehicleNavigation");
}

id objc_msgSend_isInVisit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInVisit");
}

id objc_msgSend_isInZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInZone");
}

id objc_msgSend_isInZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInZone:");
}

id objc_msgSend_isIndoor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIndoor:");
}

id objc_msgSend_isInitialCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInitialCache");
}

id objc_msgSend_isInsideSanctionedFloorTransitionPolygon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInsideSanctionedFloorTransitionPolygon:");
}

id objc_msgSend_isInsideSanctionedPolygon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInsideSanctionedPolygon:");
}

id objc_msgSend_isInternalInstall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isInternalInstall");
}

id objc_msgSend_isKappaVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKappaVisible");
}

id objc_msgSend_isKeyPathRegisteredSystemService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyPathRegisteredSystemService:");
}

id objc_msgSend_isKeyRollTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isKeyRollTask:");
}

id objc_msgSend_isLeashSlotInUse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLeashSlotInUse");
}

id objc_msgSend_isLeashable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLeashable");
}

id objc_msgSend_isLegacyAggressiveOrDefaultScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLegacyAggressiveOrDefaultScanning");
}

id objc_msgSend_isLegacyAggressiveScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLegacyAggressiveScanning");
}

id objc_msgSend_isLinkDown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLinkDown");
}

id objc_msgSend_isLinkEncrypted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLinkEncrypted");
}

id objc_msgSend_isLocaleValidOnLocalDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocaleValidOnLocalDevice");
}

id objc_msgSend_isLocation_validOnDate_maxHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocation:validOnDate:maxHorizontalAccuracy:");
}

id objc_msgSend_isLocationShiftEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocationShiftEnabled");
}

id objc_msgSend_isLocationShiftRequiredForCoordinate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocationShiftRequiredForCoordinate:");
}

id objc_msgSend_isLocationUsefulForCalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocationUsefulForCalibration:");
}

id objc_msgSend_isLocationUsefulForSmoothing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLocationUsefulForSmoothing:");
}

id objc_msgSend_isLoggingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLoggingEnabled");
}

id objc_msgSend_isLowLatency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLowLatency");
}

id objc_msgSend_isLowPower(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLowPower");
}

id objc_msgSend_isMaintenanceActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMaintenanceActive");
}

id objc_msgSend_isMeasurement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMeasurement");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMessageOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMessageOfType:");
}

id objc_msgSend_isMetadataDatabaseValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMetadataDatabaseValid");
}

id objc_msgSend_isModified(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isModified");
}

id objc_msgSend_isMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMonitoring");
}

id objc_msgSend_isMonitoringAvailableForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMonitoringAvailableForClass:");
}

id objc_msgSend_isMultiConnectionEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMultiConnectionEnabled");
}

id objc_msgSend_isMultiStatusResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMultiStatusResponse:");
}

id objc_msgSend_isMutexProtectedRangingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMutexProtectedRangingTask");
}

id objc_msgSend_isMutexProtectedSoundTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMutexProtectedSoundTask");
}

id objc_msgSend_isMutexTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMutexTask:");
}

id objc_msgSend_isNackTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNackTask:");
}

id objc_msgSend_isNearOwner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNearOwner");
}

id objc_msgSend_isNearby(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNearby");
}

id objc_msgSend_isNewPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNewPayload:");
}

id objc_msgSend_isNonHeleMaintenanceActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonHeleMaintenanceActive");
}

id objc_msgSend_isNonOwnerControlPointTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonOwnerControlPointTask");
}

id objc_msgSend_isNonOwnerSoundCompleteTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonOwnerSoundCompleteTask:");
}

id objc_msgSend_isNonOwnerSoundTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonOwnerSoundTask:");
}

id objc_msgSend_isNonProvisionallyAuthorizedForServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonProvisionallyAuthorizedForServiceType:");
}

id objc_msgSend_isNonProvisionallyAuthorizedForServiceTypeMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNonProvisionallyAuthorizedForServiceTypeMask:");
}

id objc_msgSend_isNordicCrashTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNordicCrashTask:");
}

id objc_msgSend_isNotificationSupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNotificationSupported:");
}

id objc_msgSend_isOnDenyList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOnDenyList:");
}

id objc_msgSend_isOnTileBorder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOnTileBorder");
}

id objc_msgSend_isOnlyRemainingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOnlyRemainingTask");
}

id objc_msgSend_isOrganDonor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOrganDonor");
}

id objc_msgSend_isPaired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPaired");
}

id objc_msgSend_isPairedOwnerInformationControlPointTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPairedOwnerInformationControlPointTask");
}

id objc_msgSend_isPairedSyncSessionActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPairedSyncSessionActive");
}

id objc_msgSend_isPlayingSound(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPlayingSound");
}

id objc_msgSend_isPocketStateAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPocketStateAvailable");
}

id objc_msgSend_isPosh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPosh");
}

id objc_msgSend_isPoshAccessory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPoshAccessory");
}

id objc_msgSend_isPoshOptionalOpcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPoshOptionalOpcode:");
}

id objc_msgSend_isPoshTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPoshTask:");
}

id objc_msgSend_isPreciseFindingControlPointTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPreciseFindingControlPointTask");
}

id objc_msgSend_isProactiveLocationSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProactiveLocationSession");
}

id objc_msgSend_isQueryValidWithStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isQueryValidWithStartTime:andEndTime:");
}

id objc_msgSend_isQuickSwitchInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isQuickSwitchInProgress");
}

id objc_msgSend_isQuickSwitchModeOn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isQuickSwitchModeOn");
}

id objc_msgSend_isR1CrashTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isR1CrashTask:");
}

id objc_msgSend_isRail(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRail");
}

id objc_msgSend_isRanging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRanging");
}

id objc_msgSend_isRangingCompleteTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRangingCompleteTask:");
}

id objc_msgSend_isRangingSessionTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRangingSessionTask:");
}

id objc_msgSend_isRangingStartTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRangingStartTask:");
}

id objc_msgSend_isRawSpeedRun_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRawSpeedRun:");
}

id objc_msgSend_isRawSpeedValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRawSpeedValid:");
}

id objc_msgSend_isReadyToVacuumEncryptionClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isReadyToVacuumEncryptionClass:");
}

id objc_msgSend_isRecording(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRecording");
}

id objc_msgSend_isRefDataAvailableBetweenStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRefDataAvailableBetweenStartTime:andEndTime:");
}

id objc_msgSend_isRegional_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRegional:");
}

id objc_msgSend_isRegisteredForSMS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRegisteredForSMS");
}

id objc_msgSend_isRegisteredForVoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRegisteredForVoice");
}

id objc_msgSend_isRegistrationForcedHome(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRegistrationForcedHome");
}

id objc_msgSend_isRegulatorySyncSupportedOnWatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRegulatorySyncSupportedOnWatch:");
}

id objc_msgSend_isRemoteWatchStreamingCompatible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRemoteWatchStreamingCompatible");
}

id objc_msgSend_isResetNotificationQueued(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isResetNotificationQueued");
}

id objc_msgSend_isResetSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isResetSync");
}

id objc_msgSend_isResubmitNeededwithOldLocationHacc_newLocationHacc_distance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isResubmitNeededwithOldLocationHacc:newLocationHacc:distance:");
}

id objc_msgSend_isRoadPedestrianNavigable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRoadPedestrianNavigable");
}

id objc_msgSend_isRoseInitialized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRoseInitialized");
}

id objc_msgSend_isRunCalibrationAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunCalibrationAvailable");
}

id objc_msgSend_isRunningStateInWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningStateInWindow");
}

id objc_msgSend_isSOS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSOS");
}

id objc_msgSend_isSafetyDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSafetyDataSubmissionAllowed");
}

id objc_msgSend_isSameMaintQuarterHourForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSameMaintQuarterHourForDevice:");
}

id objc_msgSend_isScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScanning");
}

id objc_msgSend_isSending(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSending");
}

id objc_msgSend_isServiceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isServiceEnabled:");
}

id objc_msgSend_isServiceRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isServiceRunning:");
}

id objc_msgSend_isSetMaxConnectionsTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSetMaxConnectionsTask:");
}

id objc_msgSend_isSimPresent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSimPresent");
}

id objc_msgSend_isSimulatedBySoftware(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSimulatedBySoftware");
}

id objc_msgSend_isSoundCompleteTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSoundCompleteTask:");
}

id objc_msgSend_isStable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStable");
}

id objc_msgSend_isStarting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStarting");
}

id objc_msgSend_isStatusBarAssertionAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStatusBarAssertionAvailable");
}

id objc_msgSend_isStepLengthValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStepLengthValid");
}

id objc_msgSend_isStewieActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStewieActive");
}

id objc_msgSend_isStreamingClientInFitnessSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStreamingClientInFitnessSession");
}

id objc_msgSend_isString_prefixedBy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isString:prefixedBy:");
}

id objc_msgSend_isStroller(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStroller");
}

id objc_msgSend_isSubscribedForMotion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubscribedForMotion");
}

id objc_msgSend_isSubscriptionActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubscriptionActive");
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupervised");
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupported");
}

id objc_msgSend_isSupportedForDerivedSpeedEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedForDerivedSpeedEstimate");
}

id objc_msgSend_isSupportedForHardware_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedForHardware:");
}

id objc_msgSend_isSupportedWithExplicitDisable_withIHAOverride_withIHAOptIn_withHwSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupportedWithExplicitDisable:withIHAOverride:withIHAOptIn:withHwSupport:");
}

id objc_msgSend_isTAAISDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTAAISDevice");
}

id objc_msgSend_isTaskQueueEmpty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTaskQueueEmpty");
}

id objc_msgSend_isTestingEnvironment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTestingEnvironment");
}

id objc_msgSend_isThereAWatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isThereAWatch");
}

id objc_msgSend_isThrottledFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isThrottledFence");
}

id objc_msgSend_isTinkerWatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTinkerWatch");
}

id objc_msgSend_isTunnel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTunnel");
}

id objc_msgSend_isUserAloneAt_withHints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserAloneAt:withHints:");
}

id objc_msgSend_isUserCurrentlyAloneWithHints_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserCurrentlyAloneWithHints:withReply:");
}

id objc_msgSend_isUserStatsV2Opcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUserStatsV2Opcode:");
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValid");
}

id objc_msgSend_isValidCKP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidCKP");
}

id objc_msgSend_isValidMslp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValidMslp:");
}

id objc_msgSend_isValueInRun_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isValueInRun:");
}

id objc_msgSend_isVehicleConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isVehicleConnected");
}

id objc_msgSend_isWalkCalibrationAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWalkCalibrationAvailable");
}

id objc_msgSend_isWalkingSpeedValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWalkingSpeedValid");
}

id objc_msgSend_isWalkingSteadinessAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWalkingSteadinessAvailable");
}

id objc_msgSend_isWatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWatch");
}

id objc_msgSend_isWatchBuildVersionPriorTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWatchBuildVersionPriorTo:");
}

id objc_msgSend_isWaterStateON(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWaterStateON");
}

id objc_msgSend_isWheelchairDataSubmissionAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWheelchairDataSubmissionAllowed");
}

id objc_msgSend_isWheelchairMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWheelchairMode");
}

id objc_msgSend_isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode_withCurrentSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWorkoutEndReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:");
}

id objc_msgSend_isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode_withCurrentSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWorkoutResumeReminderEnabledWhenDeviceIsInMoveTimeMode:withCurrentSetting:");
}

id objc_msgSend_isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired_isInMoveTimeMode_withCurrentSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isWorkoutStartReminderEnabledWhenDeviceIsSatellitePaired:isInMoveTimeMode:withCurrentSetting:");
}

id objc_msgSend_iso3166CountryCode2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iso3166CountryCode2");
}

id objc_msgSend_itemJourneyStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemJourneyStats");
}

id objc_msgSend_iterateAllAnchorKeyPathsWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateAllAnchorKeyPathsWithBlock:");
}

id objc_msgSend_iterateIdentitiesRelatedToKeyPath_withBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateIdentitiesRelatedToKeyPath:withBlock:");
}

id objc_msgSend_iterateSecondaryData_forField_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateSecondaryData:forField:withHandler:");
}

id objc_msgSend_iterateSubArchivesWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iterateSubArchivesWithHandler:");
}

id objc_msgSend_jacksonData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jacksonData");
}

id objc_msgSend_journeyCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "journeyCount");
}

id objc_msgSend_jsonObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonObject");
}

id objc_msgSend_junctionIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "junctionIndex");
}

id objc_msgSend_kValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kValue");
}

id objc_msgSend_kValueForRawSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kValueForRawSpeed:");
}

id objc_msgSend_kappaTriggersEmergencySOS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kappaTriggersEmergencySOS");
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "key");
}

id objc_msgSend_keyCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyCount");
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyEnumerator");
}

id objc_msgSend_keyForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyForClient:");
}

id objc_msgSend_keyFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyFromDate:");
}

id objc_msgSend_keyPath_sharesAuthWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyPath:sharesAuthWithKeyPath:");
}

id objc_msgSend_keyRollInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyRollInterval");
}

id objc_msgSend_keySyncRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keySyncRecord");
}

id objc_msgSend_keychainItemData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainItemData");
}

id objc_msgSend_keysRemaining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysRemaining");
}

id objc_msgSend_keysRemainingUntilWildRoll(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysRemainingUntilWildRoll");
}

id objc_msgSend_keysSortedByValueUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysSortedByValueUsingSelector:");
}

id objc_msgSend_kilocalorieUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kilocalorieUnit");
}

id objc_msgSend_kilopascals(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kilopascals");
}

id objc_msgSend_krMaterials(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "krMaterials");
}

id objc_msgSend_kvStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "kvStore");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "label");
}

id objc_msgSend_lac(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lac");
}

id objc_msgSend_lacID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lacID");
}

id objc_msgSend_lambda(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lambda");
}

id objc_msgSend_laneCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laneCount");
}

id objc_msgSend_lanes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lanes");
}

id objc_msgSend_largeCalorieUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "largeCalorieUnit");
}

id objc_msgSend_lastARKitUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastARKitUpdate");
}

id objc_msgSend_lastARSessionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastARSessionState");
}

id objc_msgSend_lastAdvertisementDelta(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAdvertisementDelta");
}

id objc_msgSend_lastAlertDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastAlertDate");
}

id objc_msgSend_lastClear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastClear");
}

id objc_msgSend_lastCountryCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastCountryCode");
}

id objc_msgSend_lastEvaluationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastEvaluationDate");
}

id objc_msgSend_lastEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastEvent");
}

id objc_msgSend_lastFix(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastFix");
}

id objc_msgSend_lastGroupClassicDisconnectionDelta(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastGroupClassicDisconnectionDelta");
}

id objc_msgSend_lastGroupClassicDisconnectionTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastGroupClassicDisconnectionTime");
}

id objc_msgSend_lastGroupMaintenance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastGroupMaintenance");
}

id objc_msgSend_lastHKUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastHKUpdate");
}

id objc_msgSend_lastHandledLocationAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastHandledLocationAccuracy");
}

id objc_msgSend_lastHandledLocationAge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastHandledLocationAge");
}

id objc_msgSend_lastHandledLocationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastHandledLocationProvider");
}

id objc_msgSend_lastIndexObservationDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastIndexObservationDate");
}

id objc_msgSend_lastIndexObserved(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastIndexObserved");
}

id objc_msgSend_lastIndoorError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastIndoorError");
}

id objc_msgSend_lastIntervalMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastIntervalMetrics");
}

id objc_msgSend_lastKnownIndoorOutdoorStateWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKnownIndoorOutdoorStateWithReply:");
}

id objc_msgSend_lastKnownLocationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKnownLocationEnabled");
}

id objc_msgSend_lastKnownMotionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastKnownMotionState");
}

id objc_msgSend_lastLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastLocation");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastObservationTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObservationTime");
}

id objc_msgSend_lastObservedBeacon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObservedBeacon");
}

id objc_msgSend_lastObservedIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObservedIndex");
}

id objc_msgSend_lastObservedType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObservedType");
}

id objc_msgSend_lastOdometer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastOdometer");
}

id objc_msgSend_lastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPathComponent");
}

id objc_msgSend_lastPercentageMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPercentageMetrics");
}

id objc_msgSend_lastPrefetchTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPrefetchTimestamp");
}

id objc_msgSend_lastProcessedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastProcessedTime");
}

id objc_msgSend_lastPublishDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastPublishDate");
}

id objc_msgSend_lastReconciledCriteria(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastReconciledCriteria");
}

id objc_msgSend_lastReconciliationTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastReconciliationTime");
}

id objc_msgSend_lastScanBufferEmptyDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastScanBufferEmptyDate");
}

id objc_msgSend_lastStepTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastStepTime");
}

id objc_msgSend_lastUpdateTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastUpdateTime");
}

id objc_msgSend_lastUpdated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastUpdated");
}

id objc_msgSend_lastValidLocationWithHorizontalAccuracy_evaluationDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastValidLocationWithHorizontalAccuracy:evaluationDate:error:");
}

id objc_msgSend_lat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lat");
}

id objc_msgSend_latLng(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latLng");
}

id objc_msgSend_latchSeparatedKeyHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latchSeparatedKeyHawkeyeTask");
}

id objc_msgSend_laterDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "laterDate:");
}

id objc_msgSend_latestAbsoluteAltitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestAbsoluteAltitude");
}

id objc_msgSend_latestAdvertisement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestAdvertisement");
}

id objc_msgSend_latestData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestData");
}

id objc_msgSend_latestNavModeEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestNavModeEstimate");
}

id objc_msgSend_latestPosition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestPosition");
}

id objc_msgSend_latestReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestReason");
}

id objc_msgSend_latitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latitude");
}

id objc_msgSend_latitudeDeg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latitudeDeg");
}

id objc_msgSend_latlon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latlon");
}

id objc_msgSend_launchApplication_requiringAuthForServiceMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchApplication:requiringAuthForServiceMask:");
}

id objc_msgSend_launchDaemon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchDaemon:");
}

id objc_msgSend_launchReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchReason");
}

id objc_msgSend_launchRemoteApplication_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchRemoteApplication:withReply:");
}

id objc_msgSend_launchWatchApplicationForCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchWatchApplicationForCompanion:");
}

id objc_msgSend_leashDisableTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leashDisableTask");
}

id objc_msgSend_leashNeedsConfiguring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leashNeedsConfiguring");
}

id objc_msgSend_leashSlotsInUse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leashSlotsInUse");
}

id objc_msgSend_leashState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leashState");
}

id objc_msgSend_leashTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leashTask");
}

id objc_msgSend_leashable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leashable");
}

id objc_msgSend_leashedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leashedTime");
}

id objc_msgSend_ledgerFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ledgerFile");
}

id objc_msgSend_ledgerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ledgerName");
}

id objc_msgSend_ledgerVersionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ledgerVersionNumber");
}

id objc_msgSend_leechClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leechClients");
}

id objc_msgSend_leeching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leeching");
}

id objc_msgSend_legacyClientKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legacyClientKey");
}

id objc_msgSend_legacyInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "legacyInfo");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lengthOfBytesUsingEncoding:");
}

id objc_msgSend_level(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "level");
}

id objc_msgSend_limitStart_andEnd_maxDuration_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "limitStart:andEnd:maxDuration:from:");
}

id objc_msgSend_limitingCKP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "limitingCKP");
}

id objc_msgSend_lineID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lineID");
}

id objc_msgSend_linkQuality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkQuality");
}

id objc_msgSend_linkedDevicesWithRelationship_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkedDevicesWithRelationship:");
}

id objc_msgSend_listenForStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenForStatus:");
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listener");
}

id objc_msgSend_listenerBeginService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenerBeginService");
}

id objc_msgSend_listenerDealloc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenerDealloc");
}

id objc_msgSend_listenerEndService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenerEndService");
}

id objc_msgSend_listenerInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "listenerInit");
}

id objc_msgSend_lng(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lng");
}

id objc_msgSend_loadAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAndReturnError:");
}

id objc_msgSend_loadCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadCache");
}

id objc_msgSend_loadLastAWDTimestamps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadLastAWDTimestamps");
}

id objc_msgSend_loadPersistentStoresWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadPersistentStoresWithCompletionHandler:");
}

id objc_msgSend_loadStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadStats");
}

id objc_msgSend_loadWithCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadWithCompletionBlock:");
}

id objc_msgSend_loadWithCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadWithCoordinator:");
}

id objc_msgSend_locManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locManager");
}

id objc_msgSend_locType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locType");
}

id objc_msgSend_localDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localDevice");
}

id objc_msgSend_localEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localEndpoint");
}

id objc_msgSend_localTimeZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localTimeZone");
}

id objc_msgSend_locality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locality");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedFailureReason");
}

id objc_msgSend_localizedInfoPlistStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedInfoPlistStrings");
}

id objc_msgSend_localizedName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedName");
}

id objc_msgSend_localizedNameWithPreferredLocalizations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedNameWithPreferredLocalizations:");
}

id objc_msgSend_localizedStringForLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForLabel:");
}

id objc_msgSend_localizedStringFromDate_dateStyle_timeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringFromDate:dateStyle:timeStyle:");
}

id objc_msgSend_location(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "location");
}

id objc_msgSend_locationAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationAccuracy");
}

id objc_msgSend_locationContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationContext");
}

id objc_msgSend_locationFingerprintAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationFingerprintAtIndex:");
}

id objc_msgSend_locationFingerprintsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationFingerprintsCount");
}

id objc_msgSend_locationGroups(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationGroups");
}

id objc_msgSend_locationGroupsLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationGroupsLoaded");
}

id objc_msgSend_locationHistory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationHistory");
}

id objc_msgSend_locationId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationId");
}

id objc_msgSend_locationIsInZoneWithLatitude_longitude_horizontalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationIsInZoneWithLatitude:longitude:horizontalAccuracy:");
}

id objc_msgSend_locationIsUsable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationIsUsable:");
}

id objc_msgSend_locationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationManager");
}

id objc_msgSend_locationOfInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationOfInterest");
}

id objc_msgSend_locationPrivate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationPrivate");
}

id objc_msgSend_locationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationProvider");
}

id objc_msgSend_locationRestricted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationRestricted");
}

id objc_msgSend_locationServicesEnabledStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationServicesEnabledStatus");
}

id objc_msgSend_locationServicesToggleAsNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationServicesToggleAsNotification");
}

id objc_msgSend_locationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationState");
}

id objc_msgSend_locationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationType");
}

id objc_msgSend_locationUpdatesIncludeMotionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationUpdatesIncludeMotionState");
}

id objc_msgSend_locations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locations");
}

id objc_msgSend_lock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lock");
}

id objc_msgSend_lockState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockState");
}

id objc_msgSend_logAccel800_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAccel800:");
}

id objc_msgSend_logAnalytics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAnalytics:");
}

id objc_msgSend_logBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logBins");
}

id objc_msgSend_logCollectionData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logCollectionData");
}

id objc_msgSend_logCoreAnalytics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logCoreAnalytics:");
}

id objc_msgSend_logData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logData:");
}

id objc_msgSend_logDeviceMotion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logDeviceMotion:");
}

id objc_msgSend_logFalsePositiveSuppressionFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logFalsePositiveSuppressionFeatures:");
}

id objc_msgSend_logFinalCoreAnalytics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logFinalCoreAnalytics:");
}

id objc_msgSend_logGyro200_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logGyro200:");
}

id objc_msgSend_logHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logHeartRate:");
}

id objc_msgSend_logImpactEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logImpactEvent:");
}

id objc_msgSend_logImpactEventState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logImpactEventState:");
}

id objc_msgSend_logImpactSensorData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logImpactSensorData:");
}

id objc_msgSend_logLatencyMetricsInternal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logLatencyMetricsInternal");
}

id objc_msgSend_logOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logOdometer:");
}

id objc_msgSend_logPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logPressure:");
}

id objc_msgSend_logRTLocationOfInterest_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logRTLocationOfInterest:type:");
}

id objc_msgSend_logRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logRoute:");
}

id objc_msgSend_logSessionStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSessionStats:");
}

id objc_msgSend_logState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logState:");
}

id objc_msgSend_logSuppressionFeartures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logSuppressionFeartures:");
}

id objc_msgSend_logTaskCounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logTaskCounts:");
}

id objc_msgSend_logTransitRoute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logTransitRoute:");
}

id objc_msgSend_loggerDataTypeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggerDataTypeFrom:");
}

id objc_msgSend_loggerDataTypeString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggerDataTypeString:");
}

id objc_msgSend_loggingEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggingEnabled");
}

id objc_msgSend_loggingPersistentEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggingPersistentEnabled");
}

id objc_msgSend_loggingPersistentInTempFolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggingPersistentInTempFolder");
}

id objc_msgSend_loggingPersistentMaxAge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggingPersistentMaxAge");
}

id objc_msgSend_loggingVolatileMaxAge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loggingVolatileMaxAge");
}

id objc_msgSend_loiDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loiDistance");
}

id objc_msgSend_loiIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loiIdentifier");
}

id objc_msgSend_loiRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loiRadius");
}

id objc_msgSend_loiType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loiType");
}

id objc_msgSend_lon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lon");
}

id objc_msgSend_longAggressiveScanCoexImpactedDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longAggressiveScanCoexImpactedDuration");
}

id objc_msgSend_longAggressiveScanNonCoexImpactedDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longAggressiveScanNonCoexImpactedDuration");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longLongValue");
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longValue");
}

id objc_msgSend_longitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longitude");
}

id objc_msgSend_longitudeDeg(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "longitudeDeg");
}

id objc_msgSend_lookupStatsWithDate_stats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lookupStatsWithDate:stats:");
}

id objc_msgSend_lowConfidenceVisitLeechClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowConfidenceVisitLeechClients");
}

id objc_msgSend_lowerQuartile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowerQuartile");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_lteCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lteCellTowerAtIndex:");
}

id objc_msgSend_lteCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lteCellTowers");
}

id objc_msgSend_lteCellTowersCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lteCellTowersCount");
}

id objc_msgSend_ltk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ltk");
}

id objc_msgSend_luxUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "luxUnit");
}

id objc_msgSend_mac(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mac");
}

id objc_msgSend_macAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macAddress");
}

id objc_msgSend_macID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macID");
}

id objc_msgSend_macModesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macModesAtIndex:");
}

id objc_msgSend_macModesCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macModesCount");
}

id objc_msgSend_macOSSourceVersionNewEnough_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macOSSourceVersionNewEnough:");
}

id objc_msgSend_macs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macs");
}

id objc_msgSend_macsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macsAtIndex:");
}

id objc_msgSend_macsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macsCount");
}

id objc_msgSend_macsNotInALSDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "macsNotInALSDatabase");
}

id objc_msgSend_main(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "main");
}

id objc_msgSend_mainArchive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainArchive");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_maintainAllDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maintainAllDevices:");
}

id objc_msgSend_maintainedCategoryCountDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maintainedCategoryCountDictionary");
}

id objc_msgSend_maintainedReasonCountDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maintainedReasonCountDictionary");
}

id objc_msgSend_maintenanceIntervalOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maintenanceIntervalOverride");
}

id objc_msgSend_maintenanceOnWildObservationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maintenanceOnWildObservationEnabled");
}

id objc_msgSend_maintenanceOnlyCondition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maintenanceOnlyCondition");
}

id objc_msgSend_maintenanceTimerFiredWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maintenanceTimerFiredWithInterval:");
}

id objc_msgSend_major(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "major");
}

id objc_msgSend_makeObjectsPerformSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:withObject:");
}

id objc_msgSend_makeSafeAbsoluteElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeSafeAbsoluteElevation:");
}

id objc_msgSend_makeSafeCFAbsoluteTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeSafeCFAbsoluteTime:");
}

id objc_msgSend_managedObjectContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedObjectContext");
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager");
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manufacturer");
}

id objc_msgSend_manufacturerData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manufacturerData");
}

id objc_msgSend_manufacturerName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manufacturerName");
}

id objc_msgSend_mapItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapItem");
}

id objc_msgSend_mapWorkoutTypeToHKWorkoutActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mapWorkoutTypeToHKWorkoutActivityType:");
}

id objc_msgSend_mappedDataByDestructivelyCombiningPrimaryAndSecondaryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mappedDataByDestructivelyCombiningPrimaryAndSecondaryData");
}

id objc_msgSend_mappedSecondaryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mappedSecondaryData");
}

id objc_msgSend_mappedSecondaryDataByDestructivelyCombiningAllSecondaryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mappedSecondaryDataByDestructivelyCombiningAllSecondaryData");
}

id objc_msgSend_maps488Details(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maps488Details");
}

id objc_msgSend_markClientEmergencyEnablementTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markClientEmergencyEnablementTransition:");
}

id objc_msgSend_markClientEmergencyEnablementTransition_shouldOverrideDeauthorization_forBeneficiary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markClientEmergencyEnablementTransition:shouldOverrideDeauthorization:forBeneficiary:");
}

id objc_msgSend_markClientTemporaryAuthorizationGranted_forClientKey_andAuditToken_byLocationButton_voiceInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markClientTemporaryAuthorizationGranted:forClientKey:andAuditToken:byLocationButton:voiceInteractionEnabled:");
}

id objc_msgSend_markModifiedClean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markModifiedClean");
}

id objc_msgSend_markModifiedDirty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markModifiedDirty");
}

id objc_msgSend_markReceivingLocationInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markReceivingLocationInformation:");
}

id objc_msgSend_markScanEndTimeFromBoot_withReason_withPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markScanEndTimeFromBoot:withReason:withPolicy:");
}

id objc_msgSend_markScanStartTimeFromBoot_withReason_withRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markScanStartTimeFromBoot:withReason:withRate:");
}

id objc_msgSend_markScanningStopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markScanningStopped");
}

id objc_msgSend_markTemporaryPreciseAuthorizationGranted_forClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markTemporaryPreciseAuthorizationGranted:forClientKey:");
}

id objc_msgSend_markXpcActivityDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markXpcActivityDone:");
}

id objc_msgSend_markets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markets");
}

id objc_msgSend_marketsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "marketsAtIndex:");
}

id objc_msgSend_marketsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "marketsCount");
}

id objc_msgSend_marqueeAppsOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "marqueeAppsOnly");
}

id objc_msgSend_masqueradeBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "masqueradeBundleId:");
}

id objc_msgSend_matchPrimaryIndices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchPrimaryIndices:");
}

id objc_msgSend_matchSequence_index_hint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchSequence:index:hint:");
}

id objc_msgSend_matchedIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchedIndex");
}

id objc_msgSend_matchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesInString:options:range:");
}

id objc_msgSend_matching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matching");
}

id objc_msgSend_maxAbsSlope(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxAbsSlope");
}

id objc_msgSend_maxActivityBasedSpeedSinceAdvertisement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxActivityBasedSpeedSinceAdvertisement");
}

id objc_msgSend_maxBaseHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxBaseHeight");
}

id objc_msgSend_maxCellularRSRP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxCellularRSRP");
}

id objc_msgSend_maxExerciseMinuteDataEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxExerciseMinuteDataEntries");
}

id objc_msgSend_maxNatalieEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxNatalieEntries");
}

id objc_msgSend_maxPayloadSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxPayloadSize");
}

id objc_msgSend_maxPeakPowerInCall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxPeakPowerInCall");
}

id objc_msgSend_maxPedometerEntries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxPedometerEntries");
}

id objc_msgSend_maxPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxPressure");
}

id objc_msgSend_maxThermalLevelInCall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maxThermalLevelInCall");
}

id objc_msgSend_maximumCountryLocationChangeAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumCountryLocationChangeAccuracy");
}

id objc_msgSend_maximumCountryLocationChangeSpeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumCountryLocationChangeSpeed");
}

id objc_msgSend_maximumDailyScans(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumDailyScans");
}

id objc_msgSend_maximumWriteValueLengthForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maximumWriteValueLengthForType:");
}

id objc_msgSend_mcc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mcc");
}

id objc_msgSend_meCardMapItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meCardMapItem");
}

id objc_msgSend_meCardString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meCardString");
}

id objc_msgSend_meInfoList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meInfoList");
}

id objc_msgSend_mean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mean");
}

id objc_msgSend_meanMaxMets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meanMaxMets");
}

id objc_msgSend_meanPaceFinalFused(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meanPaceFinalFused");
}

id objc_msgSend_meanPaceStepCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meanPaceStepCount");
}

id objc_msgSend_meanSeaLevelPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meanSeaLevelPressure");
}

id objc_msgSend_mecardAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mecardAddress");
}

id objc_msgSend_mediaList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaList");
}

id objc_msgSend_mediaType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaType");
}

id objc_msgSend_medicalConditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "medicalConditions");
}

id objc_msgSend_medicalConditionsModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "medicalConditionsModifiedDate");
}

id objc_msgSend_medicalNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "medicalNotes");
}

id objc_msgSend_medicalNotesModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "medicalNotesModifiedDate");
}

id objc_msgSend_medicationInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "medicationInfo");
}

id objc_msgSend_medicationInfoModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "medicationInfoModifiedDate");
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "member:");
}

id objc_msgSend_mergeFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeFrom:");
}

id objc_msgSend_mergeIntoDaemonLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeIntoDaemonLocation:");
}

id objc_msgSend_mergeLocationOfInterest_clusterRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mergeLocationOfInterest:clusterRadius:");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "message");
}

id objc_msgSend_messageFailedToSend_withError_recoverable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageFailedToSend:withError:recoverable:");
}

id objc_msgSend_messageType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageType");
}

id objc_msgSend_messagesWaitingForAck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messagesWaitingForAck");
}

id objc_msgSend_metSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metSource");
}

id objc_msgSend_meta(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meta");
}

id objc_msgSend_metaIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metaIdentifier");
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadata");
}

id objc_msgSend_meterUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meterUnit");
}

id objc_msgSend_meters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "meters");
}

id objc_msgSend_metricDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricDictionary");
}

id objc_msgSend_mets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mets");
}

id objc_msgSend_microLocationIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "microLocationIdentifier");
}

id objc_msgSend_midRangRssiDeviceThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "midRangRssiDeviceThreshold");
}

id objc_msgSend_midRangRssiLowerBound(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "midRangRssiLowerBound");
}

id objc_msgSend_midRangRssiUpperBound(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "midRangRssiUpperBound");
}

id objc_msgSend_migrateClientInterestData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateClientInterestData");
}

id objc_msgSend_migrateDictionaryAtKeyPath_toKeyPath_forceMigrationOnAuthCollision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateDictionaryAtKeyPath:toKeyPath:forceMigrationOnAuthCollision:");
}

id objc_msgSend_migrationSyncResetVersionNumbersNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationSyncResetVersionNumbersNotification");
}

id objc_msgSend_migrationVersionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationVersionNumber");
}

id objc_msgSend_minBaseHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minBaseHeight");
}

id objc_msgSend_minCellularRSRP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minCellularRSRP");
}

id objc_msgSend_minPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minPressure");
}

id objc_msgSend_minimumConfidence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumConfidence");
}

id objc_msgSend_minimumMoveDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumMoveDistance");
}

id objc_msgSend_minor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minor");
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minusSet:");
}

id objc_msgSend_minute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minute");
}

id objc_msgSend_minuteUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minuteUnit");
}

id objc_msgSend_mnc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mnc");
}

id objc_msgSend_mobileCrashReporterPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mobileCrashReporterPath");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mode");
}

id objc_msgSend_modeIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeIndicator");
}

id objc_msgSend_modeIndicatorAsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeIndicatorAsString:");
}

id objc_msgSend_modeOfTransport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeOfTransport");
}

id objc_msgSend_modeOfTransportation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeOfTransportation");
}

id objc_msgSend_modeSemanticType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeSemanticType");
}

id objc_msgSend_modeUpdateReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeUpdateReason");
}

id objc_msgSend_modeUpdateSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeUpdateSource");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_modelIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelIdentifier");
}

id objc_msgSend_modelName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelName");
}

id objc_msgSend_modelNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelNumber");
}

id objc_msgSend_modesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modesAtIndex:");
}

id objc_msgSend_modesCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modesCount");
}

id objc_msgSend_modifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modifications");
}

id objc_msgSend_monitorKinesiasExpiration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorKinesiasExpiration");
}

id objc_msgSend_monitorKinesiasStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorKinesiasStart");
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_monitoredIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitoredIdentifier");
}

id objc_msgSend_monitoredIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitoredIdentifiers");
}

id objc_msgSend_monitoredRegions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitoredRegions");
}

id objc_msgSend_monitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitoring");
}

id objc_msgSend_monitoringRecordForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitoringRecordForIdentifier:");
}

id objc_msgSend_month(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "month");
}

id objc_msgSend_mostRecentLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostRecentLocation");
}

id objc_msgSend_motion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motion");
}

id objc_msgSend_motionActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionActivity");
}

id objc_msgSend_motionActivityConfidence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionActivityConfidence");
}

id objc_msgSend_motionActivityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionActivityType");
}

id objc_msgSend_motionAlarmActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionAlarmActive");
}

id objc_msgSend_motionAlarmClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionAlarmClients");
}

id objc_msgSend_motionAlarmSubscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionAlarmSubscription");
}

id objc_msgSend_motionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionState");
}

id objc_msgSend_motionStateAfterNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionStateAfterNMinusOneStateChange");
}

id objc_msgSend_motionStateAfterNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionStateAfterNMinusTwoStateChange");
}

id objc_msgSend_motionStateBeforeNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionStateBeforeNMinusOneStateChange");
}

id objc_msgSend_motionStateBeforeStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionStateBeforeStateChange");
}

id objc_msgSend_motionTypeFromCLMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionTypeFromCLMotionActivity:");
}

id objc_msgSend_motionTypeFromMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionTypeFromMotionActivity:");
}

id objc_msgSend_motionVehicleConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionVehicleConnected");
}

id objc_msgSend_motionVehicleConnectedStateChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "motionVehicleConnectedStateChanged");
}

id objc_msgSend_moveItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveItemAtPath:toPath:error:");
}

id objc_msgSend_muid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "muid");
}

id objc_msgSend_multiLeashedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiLeashedTime");
}

id objc_msgSend_multiTimeV2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiTimeV2");
}

id objc_msgSend_mungedUsageDataForPotentiallyOldUsageData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mungedUsageDataForPotentiallyOldUsageData:");
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableBytes");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_mutexState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutexState");
}

id objc_msgSend_nMinusOneState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusOneState");
}

id objc_msgSend_nMinusOneStateChangeLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusOneStateChangeLocation");
}

id objc_msgSend_nMinusOneStateChangeLocationAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusOneStateChangeLocationAccuracy");
}

id objc_msgSend_nMinusOneStateChangeLocationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusOneStateChangeLocationProvider");
}

id objc_msgSend_nMinusThreeState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusThreeState");
}

id objc_msgSend_nMinusTwoState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusTwoState");
}

id objc_msgSend_nMinusTwoStateChangeLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusTwoStateChangeLocation");
}

id objc_msgSend_nMinusTwoStateChangeLocationAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusTwoStateChangeLocationAccuracy");
}

id objc_msgSend_nMinusTwoStateChangeLocationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nMinusTwoStateChangeLocationProvider");
}

id objc_msgSend_nSigmaBetweenVisits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nSigmaBetweenVisits");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nameForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameForClient:");
}

id objc_msgSend_nameModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameModifiedDate");
}

id objc_msgSend_navModeEstimator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navModeEstimator");
}

id objc_msgSend_navigationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationState");
}

id objc_msgSend_nearDepthLimitThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearDepthLimitThreshold");
}

id objc_msgSend_nearOwnerTimeV2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearOwnerTimeV2");
}

id objc_msgSend_nearOwnerTimeoutOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearOwnerTimeoutOverride");
}

id objc_msgSend_nearbyActionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyActionType");
}

id objc_msgSend_nearbyActivityLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyActivityLevel");
}

id objc_msgSend_nearbyDeviceListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyDeviceListener");
}

id objc_msgSend_nearbyFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyFlags");
}

id objc_msgSend_nearbyInfoV2AuthIntegrityTagData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInfoV2AuthIntegrityTagData");
}

id objc_msgSend_nearbyInfoV2AuthTagData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInfoV2AuthTagData");
}

id objc_msgSend_nearbyInfoV2DecryptedFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInfoV2DecryptedFlags");
}

id objc_msgSend_nearbyInfoV2Flags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyInfoV2Flags");
}

id objc_msgSend_nearbyPairUniqueID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearbyPairUniqueID");
}

id objc_msgSend_nearestVenues_availableVenues_latestPosition_availabilityZScoreConfidenceInterval_settings_isAllowedMultipleVenues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nearestVenues:availableVenues:latestPosition:availabilityZScoreConfidenceInterval:settings:isAllowedMultipleVenues:");
}

id objc_msgSend_neededDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "neededDiscovery");
}

id objc_msgSend_needsRequestStateUpdateComparedTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "needsRequestStateUpdateComparedTo:");
}

id objc_msgSend_nestedBundlePath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nestedBundlePath");
}

id objc_msgSend_networkIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "networkIdentifier");
}

id objc_msgSend_newAssertionForBundle_withReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAssertionForBundle:withReason:");
}

id objc_msgSend_newAssertionWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newAssertionWithReason:");
}

id objc_msgSend_newMitigationDict(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newMitigationDict");
}

id objc_msgSend_newMitigationFromDict_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newMitigationFromDict:");
}

id objc_msgSend_newSharedVendorUniverseWithSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newSharedVendorUniverseWithSilo:");
}

id objc_msgSend_newStreamingAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newStreamingAllowed");
}

id objc_msgSend_newTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newTimer");
}

id objc_msgSend_newUploadAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newUploadAllowed");
}

id objc_msgSend_newlineCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "newlineCharacterSet");
}

id objc_msgSend_nextAlignedKeyRollDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextAlignedKeyRollDate");
}

id objc_msgSend_nextConnectionMaterialForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextConnectionMaterialForPeripheral:");
}

id objc_msgSend_nextDateAfterDate_matchingHour_minute_second_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextDateAfterDate:matchingHour:minute:second:options:");
}

id objc_msgSend_nextEntryTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextEntryTime");
}

id objc_msgSend_nextFireDelay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextFireDelay");
}

id objc_msgSend_nextFireTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextFireTime");
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextObject");
}

id objc_msgSend_nextPacketOfMaxSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextPacketOfMaxSize:");
}

id objc_msgSend_nextWildIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nextWildIndex");
}

id objc_msgSend_nid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nid");
}

id objc_msgSend_nonFitnessToCyclingSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonFitnessToCyclingSeconds");
}

id objc_msgSend_nonFitnessToRunningSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nonFitnessToRunningSeconds");
}

id objc_msgSend_northLat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "northLat");
}

id objc_msgSend_northWestLatitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "northWestLatitude");
}

id objc_msgSend_northWestLongitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "northWestLongitude");
}

id objc_msgSend_notification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notification");
}

id objc_msgSend_notificationAcknowledged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationAcknowledged:");
}

id objc_msgSend_notificationSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationSettings");
}

id objc_msgSend_notificationStatusWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationStatusWithError:");
}

id objc_msgSend_notificationThrottleHours(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationThrottleHours");
}

id objc_msgSend_notificationThrottleMaxPerPeriod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationThrottleMaxPerPeriod");
}

id objc_msgSend_notificationUnavailableReasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationUnavailableReasons");
}

id objc_msgSend_notificationsInCompanionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsInCompanionQueue");
}

id objc_msgSend_notificationsInGizmoQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notificationsInGizmoQueue");
}

id objc_msgSend_notifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifier");
}

id objc_msgSend_notifierClientNumForCoparty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifierClientNumForCoparty:");
}

id objc_msgSend_notifyClientsAggressiveScanEnded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyClientsAggressiveScanEnded");
}

id objc_msgSend_notifyClientsOfVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyClientsOfVisit:");
}

id objc_msgSend_notifyCrucialStates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyCrucialStates");
}

id objc_msgSend_notifyFromLastInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyFromLastInfo");
}

id objc_msgSend_notifyHKUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyHKUpdates:");
}

id objc_msgSend_notifyMigrationPerformed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyMigrationPerformed");
}

id objc_msgSend_notifyMitigationNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyMitigationNeeded:");
}

id objc_msgSend_notifyNewRequestAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyNewRequestAvailable");
}

id objc_msgSend_notifyOnEntry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyOnEntry");
}

id objc_msgSend_notifyOnExit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyOnExit");
}

id objc_msgSend_notifyPassKitPayment_transaction_info_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyPassKitPayment:transaction:info:");
}

id objc_msgSend_notifyTAWithDeviceInformation_type_state_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyTAWithDeviceInformation:type:state:date:");
}

id objc_msgSend_notifyWhenCacheIsPopulatedWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "notifyWhenCacheIsPopulatedWithReply:");
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "now");
}

id objc_msgSend_nr5GCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nr5GCellTowerAtIndex:");
}

id objc_msgSend_nr5GCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nr5GCellTowers");
}

id objc_msgSend_nr5GCellTowersCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nr5GCellTowersCount");
}

id objc_msgSend_nrarfcn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nrarfcn");
}

id objc_msgSend_nsuuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nsuuid");
}

id objc_msgSend_null(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "null");
}

id objc_msgSend_nullClientKeyPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nullClientKeyPath");
}

id objc_msgSend_numDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numDevices");
}

id objc_msgSend_numDevicesVector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numDevicesVector");
}

id objc_msgSend_numDuplicateMediaSelections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numDuplicateMediaSelections");
}

id objc_msgSend_numMediaSelectIterations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numMediaSelectIterations");
}

id objc_msgSend_numPendingTasks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numPendingTasks");
}

id objc_msgSend_numPossiblePeripherals(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numPossiblePeripherals");
}

id objc_msgSend_numProactiveAttempts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numProactiveAttempts");
}

id objc_msgSend_numProactiveConnects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numProactiveConnects");
}

id objc_msgSend_numWorkoutsContrToEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numWorkoutsContrToEstimate");
}

id objc_msgSend_numZaxisHarvestTraces(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numZaxisHarvestTraces");
}

id objc_msgSend_number(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "number");
}

id objc_msgSend_numberOfConsecutiveSyncSessionRetries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfConsecutiveSyncSessionRetries");
}

id objc_msgSend_numberOfRebaseBtwRefresh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfRebaseBtwRefresh");
}

id objc_msgSend_numberOfSteps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSteps");
}

id objc_msgSend_numberOfSurroundingCdmaCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSurroundingCdmaCells");
}

id objc_msgSend_numberOfSurroundingCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSurroundingCells");
}

id objc_msgSend_numberOfSurroundingLteCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSurroundingLteCells");
}

id objc_msgSend_numberOfSurroundingNr5GCells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSurroundingNr5GCells");
}

id objc_msgSend_numberOfSurroundingWifis(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfSurroundingWifis");
}

id objc_msgSend_numberOfTrackEndedBtwRefresh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberOfTrackEndedBtwRefresh");
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithChar:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithFloat:");
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInt:");
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithInteger:");
}

id objc_msgSend_numberWithLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLong:");
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithLongLong:");
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithShort:");
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedChar:");
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInt:");
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedInteger:");
}

id objc_msgSend_numberWithUnsignedLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLong:");
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedLongLong:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "object");
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndex:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectDiscoveryMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectDiscoveryMode");
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectEnumerator");
}

id objc_msgSend_objectForInfoDictionaryKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForInfoDictionaryKey:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_objectSetupFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectSetupFlags");
}

id objc_msgSend_objectType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectType");
}

id objc_msgSend_objectsForKeys_notFoundMarker_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectsForKeys:notFoundMarker:");
}

id objc_msgSend_observationInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observationInterval");
}

id objc_msgSend_observeContentUpdatesWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeContentUpdatesWithHandler:");
}

id objc_msgSend_observeDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observeDevice:");
}

id objc_msgSend_observedTransitAccessPointsCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observedTransitAccessPointsCache");
}

id objc_msgSend_observerSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "observerSession");
}

id objc_msgSend_ocean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ocean");
}

id objc_msgSend_odometer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "odometer");
}

id objc_msgSend_odometerTarget(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "odometerTarget");
}

id objc_msgSend_odometryClient_requestInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "odometryClient:requestInterval:");
}

id objc_msgSend_odometryClient_requestInterval_sequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "odometryClient:requestInterval:sequenceNumber:");
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offset");
}

id objc_msgSend_offsetInFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "offsetInFile");
}

id objc_msgSend_onAbsoluteAltitudeUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAbsoluteAltitudeUpdate:");
}

id objc_msgSend_onAddBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAddBout:");
}

id objc_msgSend_onAdvertisementBufferEmptied(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAdvertisementBufferEmptied");
}

id objc_msgSend_onAggressiveScanEnded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAggressiveScanEnded");
}

id objc_msgSend_onAggressiveScanStarted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAggressiveScanStarted");
}

id objc_msgSend_onAppMonitorNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAppMonitorNotification:data:");
}

id objc_msgSend_onAppUninstallationCheckActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAppUninstallationCheckActivity:");
}

id objc_msgSend_onApplicationStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onApplicationStateChange:");
}

id objc_msgSend_onAvengerAdvertisement_reconciledInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onAvengerAdvertisement:reconciledInformation:");
}

id objc_msgSend_onBackgroundInertialOdometryState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBackgroundInertialOdometryState:");
}

id objc_msgSend_onBarometerCalibrationNotification_track_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBarometerCalibrationNotification:track:data:");
}

id objc_msgSend_onBatchedAccelerometerData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBatchedAccelerometerData:");
}

id objc_msgSend_onBatchedDeviceMotionData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBatchedDeviceMotionData:");
}

id objc_msgSend_onBehalfOfBundleId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBehalfOfBundleId");
}

id objc_msgSend_onBluetoothServiceNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onBluetoothServiceNotification:data:");
}

id objc_msgSend_onCLEmergencyEnablementAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCLEmergencyEnablementAssertion:");
}

id objc_msgSend_onCalorieAggregationActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCalorieAggregationActivity:");
}

id objc_msgSend_onCapabilityChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCapabilityChange");
}

id objc_msgSend_onCardioChangeEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCardioChangeEvent");
}

id objc_msgSend_onCatherineNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCatherineNotification:data:");
}

id objc_msgSend_onChangeEstimationActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onChangeEstimationActivity:");
}

id objc_msgSend_onCharger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCharger:");
}

id objc_msgSend_onClassATimerActivity_withAlarmId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onClassATimerActivity:withAlarmId:");
}

id objc_msgSend_onClientAnomalyEventSubscriptionRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onClientAnomalyEventSubscriptionRequest:");
}

id objc_msgSend_onClientManagerNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onClientManagerNotification:data:");
}

id objc_msgSend_onCompanionConnectionNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCompanionConnectionNotification:data:");
}

id objc_msgSend_onCompanionNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCompanionNotification:data:");
}

id objc_msgSend_onCompanionObservationWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCompanionObservationWithType:");
}

id objc_msgSend_onConditionUpdateCallbackHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onConditionUpdateCallbackHandler");
}

id objc_msgSend_onConnectionStateChangeForDeviceWithUUID_fromState_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onConnectionStateChangeForDeviceWithUUID:fromState:toState:");
}

id objc_msgSend_onCyclingDistanceUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onCyclingDistanceUpdate:");
}

id objc_msgSend_onDaemonStatusNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDaemonStatusNotification:data:");
}

id objc_msgSend_onDailyAggregateFeatureComputeActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDailyAggregateFeatureComputeActivity:");
}

id objc_msgSend_onDataCollectionChangedNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDataCollectionChangedNotification");
}

id objc_msgSend_onDataCollectionRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDataCollectionRequested:");
}

id objc_msgSend_onDbCleanupActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDbCleanupActivity:");
}

id objc_msgSend_onDeepSubmersion_withStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDeepSubmersion:withStateChanged:");
}

id objc_msgSend_onDeferredStopTimerShouldPublish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDeferredStopTimerShouldPublish:");
}

id objc_msgSend_onDeferredStopTimerShouldPublish_recordSubsequentSession_isMultiSportSession_withEvent_triggerDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDeferredStopTimerShouldPublish:recordSubsequentSession:isMultiSportSession:withEvent:triggerDelay:");
}

id objc_msgSend_onElevationThresold_direction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onElevationThresold:direction:");
}

id objc_msgSend_onEnableEasySubmersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onEnableEasySubmersion:");
}

id objc_msgSend_onFallSnippetNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onFallSnippetNotification:data:");
}

id objc_msgSend_onFirstUnlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onFirstUnlock");
}

id objc_msgSend_onForcedLocationNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onForcedLocationNotification:data:");
}

id objc_msgSend_onForcedLocationNotificationSub_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onForcedLocationNotificationSub:data:");
}

id objc_msgSend_onGnssNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onGnssNotification:data:");
}

id objc_msgSend_onHRRecoveryEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onHRRecoveryEstimate:");
}

id objc_msgSend_onHRRecoveryRegisterHRNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onHRRecoveryRegisterHRNotification");
}

id objc_msgSend_onHRRecoverySessionEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onHRRecoverySessionEnd");
}

id objc_msgSend_onHRRecoverySessionStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onHRRecoverySessionStart");
}

id objc_msgSend_onHRRecoveryUnregisterHRNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onHRRecoveryUnregisterHRNotification");
}

id objc_msgSend_onImpactedFrequency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onImpactedFrequency");
}

id objc_msgSend_onIntervalTimerCreateEventAndIncrementPacket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onIntervalTimerCreateEventAndIncrementPacket:");
}

id objc_msgSend_onLeechedNotification_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onLeechedNotification:withData:");
}

id objc_msgSend_onLocationNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onLocationNotification:data:");
}

id objc_msgSend_onLocationUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onLocationUpdate:");
}

id objc_msgSend_onLowConfidenceVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onLowConfidenceVisit:");
}

id objc_msgSend_onMiLoConnectionStatusEventUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoConnectionStatusEventUpdate:");
}

id objc_msgSend_onMiLoDebugResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoDebugResponse:");
}

id objc_msgSend_onMiLoGenericEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoGenericEvent:");
}

id objc_msgSend_onMiLoObservationMetaInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoObservationMetaInfo:");
}

id objc_msgSend_onMiLoPredictionEventUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoPredictionEventUpdate:");
}

id objc_msgSend_onMiLoServiceEventUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMiLoServiceEventUpdate:");
}

id objc_msgSend_onMobileAssetNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobileAssetNotification:data:");
}

id objc_msgSend_onMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityBoutMetrics:");
}

id objc_msgSend_onMobilityClassificationActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityClassificationActivity:");
}

id objc_msgSend_onMobilityCompanionSyncActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityCompanionSyncActivity:");
}

id objc_msgSend_onMobilityProcessBoutsActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMobilityProcessBoutsActivity:");
}

id objc_msgSend_onMonitorNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMonitorNotification:data:");
}

id objc_msgSend_onMotionStateMediatorData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateMediatorData:");
}

id objc_msgSend_onMotionStateMediatorNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateMediatorNotification:data:");
}

id objc_msgSend_onMotionStateNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateNotification:data:");
}

id objc_msgSend_onMotionStateObserverNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onMotionStateObserverNotification:data:");
}

id objc_msgSend_onNatalimetryNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onNatalimetryNotification:data:");
}

id objc_msgSend_onNetworkConnectivityChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onNetworkConnectivityChanged:");
}

id objc_msgSend_onNotSubmerged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onNotSubmerged");
}

id objc_msgSend_onNotification_withData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onNotification:withData:");
}

id objc_msgSend_onObjectDiscoveryUpdatedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onObjectDiscoveryUpdatedState:");
}

id objc_msgSend_onObservationForDeviceWithIdentifier_type_date_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onObservationForDeviceWithIdentifier:type:date:");
}

id objc_msgSend_onObservationForDeviceWithUUID_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onObservationForDeviceWithUUID:type:");
}

id objc_msgSend_onOdometerNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onOdometerNotification:data:");
}

id objc_msgSend_onOneShotQueryResult_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onOneShotQueryResult:withError:");
}

id objc_msgSend_onOutdoorUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onOutdoorUpdate:");
}

id objc_msgSend_onP6MWDActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onP6MWDActivity:");
}

id objc_msgSend_onResultAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onResultAvailable:");
}

id objc_msgSend_onRetrocomputeHealthKitSampleFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetrocomputeHealthKitSampleFailed:");
}

id objc_msgSend_onRetrocomputeHealthKitSampleSavedWithStartTime_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetrocomputeHealthKitSampleSavedWithStartTime:activity:");
}

id objc_msgSend_onRetrocomputePreprocessingActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetrocomputePreprocessingActivity:");
}

id objc_msgSend_onRetrocomputeStatusUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetrocomputeStatusUpdate:");
}

id objc_msgSend_onRetryHealthKitDeleteSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetryHealthKitDeleteSamples:");
}

id objc_msgSend_onRetryTriggerRetrocompute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onRetryTriggerRetrocompute:");
}

id objc_msgSend_onScenarioTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onScenarioTrigger:");
}

id objc_msgSend_onScheduledTileDownloadWithReachabilityRequirement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onScheduledTileDownloadWithReachabilityRequirement:");
}

id objc_msgSend_onShallowSubmersion_withStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onShallowSubmersion:withStateChanged:");
}

id objc_msgSend_onSignificantEventDetected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSignificantEventDetected:");
}

id objc_msgSend_onSignificantLocationVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSignificantLocationVisit:");
}

id objc_msgSend_onStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStateUpdate:");
}

id objc_msgSend_onStatusBarIconChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStatusBarIconChange:");
}

id objc_msgSend_onStatusBarIconChangeInternal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStatusBarIconChangeInternal:");
}

id objc_msgSend_onStepNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onStepNotification:data:");
}

id objc_msgSend_onSubmersionMeasurementUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSubmersionMeasurementUpdate:");
}

id objc_msgSend_onSubmersionStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSubmersionStateUpdate:");
}

id objc_msgSend_onSubmersionTemperatureUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSubmersionTemperatureUpdate:");
}

id objc_msgSend_onSyncActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onSyncActivity:");
}

id objc_msgSend_onTelephonyNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onTelephonyNotification:data:");
}

id objc_msgSend_onTileWasDownloadedNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onTileWasDownloadedNotification:data:");
}

id objc_msgSend_onTransitStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onTransitStateUpdate:");
}

id objc_msgSend_onUpdatedSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onUpdatedSettings:");
}

id objc_msgSend_onUsageMetricsEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onUsageMetricsEvent:");
}

id objc_msgSend_onVdrNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onVdrNotification:data:");
}

id objc_msgSend_onVehicleStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onVehicleStateUpdate:");
}

id objc_msgSend_onVehicularState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onVehicularState");
}

id objc_msgSend_onVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onVisit:");
}

id objc_msgSend_onWalkingSteadinessClassification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWalkingSteadinessClassification:");
}

id objc_msgSend_onWifiServiceNotification_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWifiServiceNotification:data:");
}

id objc_msgSend_onWorkoutEffortScoreUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWorkoutEffortScoreUpdate:");
}

id objc_msgSend_onWorkoutSessionUpdate_withOverview_andPriors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onWorkoutSessionUpdate:withOverview:andPriors:");
}

id objc_msgSend_onboardingStatusWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onboardingStatusWithError:");
}

id objc_msgSend_onboardingUnavailableReasons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onboardingUnavailableReasons");
}

id objc_msgSend_onlyHeleMaintainableDevices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onlyHeleMaintainableDevices");
}

id objc_msgSend_opcode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opcode");
}

id objc_msgSend_opcodeDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "opcodeDescription");
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "open");
}

id objc_msgSend_openAdvertisementsFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openAdvertisementsFile");
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openApplication:withOptions:completion:");
}

id objc_msgSend_openSensitiveURL_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openSensitiveURL:withOptions:");
}

id objc_msgSend_openURL_configuration_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "openURL:configuration:completionHandler:");
}

id objc_msgSend_operatingMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operatingMode");
}

id objc_msgSend_operatingSystemVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operatingSystemVersion");
}

id objc_msgSend_operatingSystemVersionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operatingSystemVersionString");
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "operationQueue");
}

id objc_msgSend_optInScreenOffScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optInScreenOffScan");
}

id objc_msgSend_optedIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optedIn");
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "options");
}

id objc_msgSend_optionsDictCreate_mtu_perform_nud_ipv6_ll_enable_dad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionsDictCreate:mtu:perform_nud:ipv6_ll:enable_dad:");
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "optionsWithDictionary:");
}

id objc_msgSend_orPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orPredicateWithSubpredicates:");
}

id objc_msgSend_orientedBoundingRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "orientedBoundingRegion");
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "origin");
}

id objc_msgSend_originDeviceToGpsSource_locationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originDeviceToGpsSource:locationType:");
}

id objc_msgSend_originTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originTimestamp");
}

id objc_msgSend_originalRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originalRequest");
}

id objc_msgSend_originatingUIType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "originatingUIType");
}

id objc_msgSend_outOfSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outOfSession");
}

id objc_msgSend_outdoorLocationAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outdoorLocationAvailable:");
}

id objc_msgSend_outdoorUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outdoorUpdate");
}

id objc_msgSend_outgoingResponseIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outgoingResponseIdentifier");
}

id objc_msgSend_outputDeviceIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "outputDeviceIDs");
}

id objc_msgSend_overrideWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overrideWithConfiguration:");
}

id objc_msgSend_overviewId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overviewId");
}

id objc_msgSend_overwritePrimaryObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "overwritePrimaryObject:");
}

id objc_msgSend_ownerLongSoundCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerLongSoundCount");
}

id objc_msgSend_ownerShortSoundCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownerShortSoundCount");
}

id objc_msgSend_ownership(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ownership");
}

id objc_msgSend_pace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pace");
}

id objc_msgSend_packageMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "packageMessage:");
}

id objc_msgSend_pairedDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairedDevice");
}

id objc_msgSend_pairedDeviceID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairedDeviceID");
}

id objc_msgSend_pairedDeviceLastSeenTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairedDeviceLastSeenTimestamp");
}

id objc_msgSend_pairedDeviceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairedDeviceUUID");
}

id objc_msgSend_pairingID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pairingID");
}

id objc_msgSend_parseAndNotifyDelegateOnDiscoveredPeripheral_RSSI_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "parseAndNotifyDelegateOnDiscoveredPeripheral:RSSI:");
}

id objc_msgSend_partIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "partIdentifier");
}

id objc_msgSend_partnerID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "partnerID");
}

id objc_msgSend_passEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passEndpoint");
}

id objc_msgSend_passcodeLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "passcodeLocked");
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "path");
}

id objc_msgSend_pathComponents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathComponents");
}

id objc_msgSend_pathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathExtension");
}

id objc_msgSend_pathForDate_withBasePath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForDate:withBasePath:");
}

id objc_msgSend_pathForPrimaryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForPrimaryData");
}

id objc_msgSend_pathForResource_ofType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForResource:ofType:");
}

id objc_msgSend_pathForSecondaryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathForSecondaryData");
}

id objc_msgSend_pathInfoWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathInfoWithURL:");
}

id objc_msgSend_pathWithComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pathWithComponents:");
}

id objc_msgSend_pause(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pause");
}

id objc_msgSend_pauseEvent_bounce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseEvent_bounce");
}

id objc_msgSend_pauseResetAndFreeRavenSupervisorWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseResetAndFreeRavenSupervisorWithCompletion:");
}

id objc_msgSend_pauseWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pauseWorkout:");
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payload");
}

id objc_msgSend_payloadIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadIdentifier");
}

id objc_msgSend_payloadOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadOffset");
}

id objc_msgSend_payloads(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloads");
}

id objc_msgSend_pc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pc");
}

id objc_msgSend_pdState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pdState");
}

id objc_msgSend_peakHR(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakHR");
}

id objc_msgSend_peakPowerAtEndOfCall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakPowerAtEndOfCall");
}

id objc_msgSend_peakPowerAtStartOfCall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakPowerAtStartOfCall");
}

id objc_msgSend_peakPowerCriticalDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakPowerCriticalDuration");
}

id objc_msgSend_peakPowerHeavyDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakPowerHeavyDuration");
}

id objc_msgSend_peakPowerLightDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakPowerLightDuration");
}

id objc_msgSend_peakPowerModerateDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakPowerModerateDuration");
}

id objc_msgSend_peakPowerNominalDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peakPowerNominalDuration");
}

id objc_msgSend_pedometerArmConstrainedState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pedometerArmConstrainedState");
}

id objc_msgSend_pedometerBuffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pedometerBuffer");
}

id objc_msgSend_pendingConnectionAttempt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingConnectionAttempt");
}

id objc_msgSend_pendingDisconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingDisconnect");
}

id objc_msgSend_pendingRecordZoneChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pendingRecordZoneChanges");
}

id objc_msgSend_peopleDensityState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peopleDensityState");
}

id objc_msgSend_perFrameCalibrationMatrices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "perFrameCalibrationMatrices");
}

id objc_msgSend_perFrameDistortion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "perFrameDistortion");
}

id objc_msgSend_perFrameVioPoses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "perFrameVioPoses");
}

id objc_msgSend_perFrameVioStatusCodes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "perFrameVioStatusCodes");
}

id objc_msgSend_percentUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "percentUnit");
}

id objc_msgSend_percentageRemoteGPSSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "percentageRemoteGPSSource");
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockAndWait:");
}

id objc_msgSend_performBlockWhenArmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performBlockWhenArmed:");
}

id objc_msgSend_performDbCleanUpOnActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performDbCleanUpOnActivity:");
}

id objc_msgSend_performFullSystemServiceSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performFullSystemServiceSetup");
}

id objc_msgSend_performMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigration");
}

id objc_msgSend_performMigrationWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performMigrationWithReply:");
}

id objc_msgSend_performNotOptedInBOMScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performNotOptedInBOMScan");
}

id objc_msgSend_performSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:");
}

id objc_msgSend_performSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSelector:withObject:");
}

id objc_msgSend_performSyncWithCompletion_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performSyncWithCompletion:activity:");
}

id objc_msgSend_performTask_forClient_onDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTask:forClient:onDevice:");
}

id objc_msgSend_performTemporaryAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTemporaryAggressiveScan");
}

id objc_msgSend_performTemporaryAggressiveScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTemporaryAggressiveScan:");
}

id objc_msgSend_performTemporaryAggressiveScanForFindMyAccessoryManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTemporaryAggressiveScanForFindMyAccessoryManager:");
}

id objc_msgSend_performTemporaryHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTemporaryHawkeyeLowEnergyScan");
}

id objc_msgSend_performTemporaryHawkeyeLowEnergyScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTemporaryHawkeyeLowEnergyScan:");
}

id objc_msgSend_performTemporaryLongAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTemporaryLongAggressiveScan");
}

id objc_msgSend_performTemporaryLongAggressiveScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "performTemporaryLongAggressiveScan:");
}

id objc_msgSend_peripheral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peripheral");
}

id objc_msgSend_peripheralDataWithMeasuredPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "peripheralDataWithMeasuredPower:");
}

id objc_msgSend_persist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persist");
}

id objc_msgSend_persistAnalyticsCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistAnalyticsCache");
}

id objc_msgSend_persistLostEstimateToStagingTables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistLostEstimateToStagingTables:");
}

id objc_msgSend_persistRetrocomputeResultsToStagingTables_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistRetrocomputeResultsToStagingTables:");
}

id objc_msgSend_persistenceDirectory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistenceDirectory");
}

id objc_msgSend_persistenceUnavailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistenceUnavailable");
}

id objc_msgSend_persistentStoreCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreCoordinator");
}

id objc_msgSend_persistentStoreDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStoreDescription");
}

id objc_msgSend_persistentStores(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "persistentStores");
}

id objc_msgSend_personalizationBVERCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationBVERCharacteristic");
}

id objc_msgSend_personalizationBoardIDCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationBoardIDCharacteristic");
}

id objc_msgSend_personalizationBootNonceHashCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationBootNonceHashCharacteristic");
}

id objc_msgSend_personalizationChipIDCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationChipIDCharacteristic");
}

id objc_msgSend_personalizationECIDCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationECIDCharacteristic");
}

id objc_msgSend_personalizationInformation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationInformation");
}

id objc_msgSend_personalizationProdModeCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationProdModeCharacteristic");
}

id objc_msgSend_personalizationSecDomainCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationSecDomainCharacteristic");
}

id objc_msgSend_personalizationSecModeCharacteristic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "personalizationSecModeCharacteristic");
}

id objc_msgSend_phoneNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneNumber");
}

id objc_msgSend_phoneNumberLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "phoneNumberLabel");
}

id objc_msgSend_pictureData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pictureData");
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pid");
}

id objc_msgSend_pipelinedDidStartLocalizing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pipelinedDidStartLocalizing");
}

id objc_msgSend_pipelinedEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pipelinedEnabled");
}

id objc_msgSend_pipelinedSeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pipelinedSeeded");
}

id objc_msgSend_pipelinedVenues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pipelinedVenues");
}

id objc_msgSend_placeInference(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeInference");
}

id objc_msgSend_placeType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeType");
}

id objc_msgSend_placeholderHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placeholderHawkeyeTask");
}

id objc_msgSend_placemark(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "placemark");
}

id objc_msgSend_platterTargetBundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "platterTargetBundleIdentifier");
}

id objc_msgSend_pnoffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pnoffset");
}

id objc_msgSend_poiEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "poiEndpoint");
}

id objc_msgSend_pointCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pointCount");
}

id objc_msgSend_points2D(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "points2D");
}

id objc_msgSend_points3D(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "points3D");
}

id objc_msgSend_poolLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "poolLength");
}

id objc_msgSend_popConnectionMaterialForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "popConnectionMaterialForPeripheral:");
}

id objc_msgSend_port(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "port");
}

id objc_msgSend_possiblePeripherals(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "possiblePeripherals");
}

id objc_msgSend_possibleStops(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "possibleStops");
}

id objc_msgSend_postFollowUpItem_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postFollowUpItem:completion:");
}

id objc_msgSend_postalCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "postalCode");
}

id objc_msgSend_power(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "power");
}

id objc_msgSend_poweredOn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "poweredOn");
}

id objc_msgSend_ppid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ppid");
}

id objc_msgSend_preDaytonaMapping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preDaytonaMapping");
}

id objc_msgSend_precipitationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "precipitationType");
}

id objc_msgSend_precision(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "precision");
}

id objc_msgSend_predicateForActivitySummariesBetweenStartDateComponents_endDateComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForActivitySummariesBetweenStartDateComponents:endDateComponents:");
}

id objc_msgSend_predicateForObjectsFromSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForObjectsFromSource:");
}

id objc_msgSend_predicateForObjectsFromSources_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForObjectsFromSources:");
}

id objc_msgSend_predicateForObjectsWithDeviceProperty_allowedValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForObjectsWithDeviceProperty:allowedValues:");
}

id objc_msgSend_predicateForObjectsWithMetadataKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForObjectsWithMetadataKey:");
}

id objc_msgSend_predicateForObjectsWithMetadataKey_allowedValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForObjectsWithMetadataKey:allowedValues:");
}

id objc_msgSend_predicateForSamplesWithStartDate_endDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForSamplesWithStartDate:endDate:options:");
}

id objc_msgSend_predicateForWorkoutActivitiesWithWorkoutActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForWorkoutActivitiesWithWorkoutActivityType:");
}

id objc_msgSend_predicateForWorkoutsWithActivityPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateForWorkoutsWithActivityPredicate:");
}

id objc_msgSend_predicateMatchingBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateMatchingBundleIdentifier:");
}

id objc_msgSend_predicateWithBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithBlock:");
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "predicateWithFormat:");
}

id objc_msgSend_preemptFirmwareUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preemptFirmwareUpdate");
}

id objc_msgSend_preferredLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredLanguages");
}

id objc_msgSend_preferredName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preferredName");
}

id objc_msgSend_prefetch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prefetch:");
}

id objc_msgSend_pregnancyDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pregnancyDuration");
}

id objc_msgSend_pregnancyEndDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pregnancyEndDate");
}

id objc_msgSend_pregnancyStartDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pregnancyStartDate");
}

id objc_msgSend_preloadBuildingTilesNear_radius_tileSetStyle_preloadToDiskOnly_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preloadBuildingTilesNear:radius:tileSetStyle:preloadToDiskOnly:completionHandler:");
}

id objc_msgSend_preloadRoadTilesNear_radius_preloadToDiskOnly_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preloadRoadTilesNear:radius:preloadToDiskOnly:completionHandler:");
}

id objc_msgSend_preloadSectionTilesAtLatitude_longitude_config_type_building_section_numberOfsectionsToDownload_loiSectionData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preloadSectionTilesAtLatitude:longitude:config:type:building:section:numberOfsectionsToDownload:loiSectionData:");
}

id objc_msgSend_preloadTilesAPICallForSection_sectionDownloadRadius_maxSectionIndex_building_matcherLOIType_config_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preloadTilesAPICallForSection:sectionDownloadRadius:maxSectionIndex:building:matcherLOIType:config:completionHandler:");
}

id objc_msgSend_preloadTilesAPICallForSectionWithSECheck_sectionDownloadRadius_maxSectionIndex_building_matcherLOIType_config_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preloadTilesAPICallForSectionWithSECheck:sectionDownloadRadius:maxSectionIndex:building:matcherLOIType:config:completionHandler:");
}

id objc_msgSend_prepareBTLEScanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareBTLEScanner");
}

id objc_msgSend_prepareToDoFullSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareToDoFullSync");
}

id objc_msgSend_prepareToDoMigrationSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareToDoMigrationSync");
}

id objc_msgSend_prepareToDoReunionSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prepareToDoReunionSync");
}

id objc_msgSend_preprocessTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "preprocessTask:");
}

id objc_msgSend_pressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pressure");
}

id objc_msgSend_pressureEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pressureEndpoint");
}

id objc_msgSend_pressureMeasurement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pressureMeasurement");
}

id objc_msgSend_prettyBeaconType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prettyBeaconType");
}

id objc_msgSend_prevLoc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prevLoc");
}

id objc_msgSend_previousCountries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousCountries");
}

id objc_msgSend_previousCountryCodeTimeStamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousCountryCodeTimeStamp");
}

id objc_msgSend_previousLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousLocation");
}

id objc_msgSend_previousLocationAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousLocationAccuracy");
}

id objc_msgSend_previousLocationAge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousLocationAge");
}

id objc_msgSend_previousLocationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "previousLocationProvider");
}

id objc_msgSend_primaryDataSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryDataSize");
}

id objc_msgSend_primaryIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryIndex");
}

id objc_msgSend_primaryKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryKey");
}

id objc_msgSend_primaryKeyPathForAuthLimitedKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryKeyPathForAuthLimitedKeyPath:");
}

id objc_msgSend_primaryLanguageCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryLanguageCode");
}

id objc_msgSend_primaryLanguageCodeModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "primaryLanguageCodeModifiedDate");
}

id objc_msgSend_principalClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "principalClass");
}

id objc_msgSend_printCurrentStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printCurrentStats");
}

id objc_msgSend_printMeanSeaLevelPressureArray_withPrePhrase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printMeanSeaLevelPressureArray:withPrePhrase:");
}

id objc_msgSend_printMeanSeaLevelPressureElement_withPrePhrase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "printMeanSeaLevelPressureElement:withPrePhrase:");
}

id objc_msgSend_prior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "prior");
}

id objc_msgSend_priority(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "priority");
}

id objc_msgSend_privateCloudDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateCloudDatabase");
}

id objc_msgSend_privateOwnerSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "privateOwnerSession");
}

id objc_msgSend_proactiveMaintenanceCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proactiveMaintenanceCount");
}

id objc_msgSend_probability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "probability");
}

id objc_msgSend_probabilityVector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "probabilityVector");
}

id objc_msgSend_probeClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "probeClients");
}

id objc_msgSend_processAcknowledgedTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processAcknowledgedTask");
}

id objc_msgSend_processActiveScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processActiveScan:");
}

id objc_msgSend_processAverageRSRPForCA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processAverageRSRPForCA:");
}

id objc_msgSend_processCells_inRange_timeReceived_requestType_tag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processCells:inRange:timeReceived:requestType:tag:");
}

id objc_msgSend_processCompletedTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processCompletedTask");
}

id objc_msgSend_processDataWithMaxDuration_endTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processDataWithMaxDuration:endTime:");
}

id objc_msgSend_processEventTime_atCurrentTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEventTime:atCurrentTime:");
}

id objc_msgSend_processEventTimes_atCurrentTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processEventTimes:atCurrentTime:");
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processIdentifier");
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processInfo");
}

id objc_msgSend_processMediaEndOfExtendedSessionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMediaEndOfExtendedSessionNotification");
}

id objc_msgSend_processMediaForMitigations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMediaForMitigations:");
}

id objc_msgSend_processMediaForRequestID_callUUID_uploadURL_sharedInfoPrefix_combinedSecret_token_mediaList_mitigation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMediaForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:");
}

id objc_msgSend_processMediaServicesEndOfExtendedSessionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMediaServicesEndOfExtendedSessionNotification");
}

id objc_msgSend_processMediaServicesForRequestID_callUUID_uploadURL_sharedInfoPrefix_combinedSecret_token_mediaList_mitigation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMediaServicesForRequestID:callUUID:uploadURL:sharedInfoPrefix:combinedSecret:token:mediaList:mitigation:completion:");
}

id objc_msgSend_processMediaServicesMitigations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processMediaServicesMitigations:");
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processName");
}

id objc_msgSend_processNextIntervalWithRemainingDurationToProcess_endTime_updateCanContinue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processNextIntervalWithRemainingDurationToProcess:endTime:updateCanContinue:");
}

id objc_msgSend_processNextTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processNextTask:");
}

id objc_msgSend_processPowerLevelForCA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processPowerLevelForCA:");
}

id objc_msgSend_processReceivedWiFiDeviceLinkScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processReceivedWiFiDeviceLinkScore:");
}

id objc_msgSend_processScanCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processScanCache:");
}

id objc_msgSend_processScdmaCells_inRange_timeReceived_requestType_tag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processScdmaCells:inRange:timeReceived:requestType:tag:");
}

id objc_msgSend_processSingleFenceAnalyticsData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processSingleFenceAnalyticsData:");
}

id objc_msgSend_processThermalLevelForCA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processThermalLevelForCA:");
}

id objc_msgSend_processTripSegmentData_withOptions_outputHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processTripSegmentData:withOptions:outputHandler:completionHandler:");
}

id objc_msgSend_processUARPMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processUARPMessage:");
}

id objc_msgSend_processWireless_inRange_timeReceived_requestType_tag_surroundingWifiBands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processWireless:inRange:timeReceived:requestType:tag:surroundingWifiBands:");
}

id objc_msgSend_processingCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingCellTowers");
}

id objc_msgSend_processingWirelessAPs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "processingWirelessAPs");
}

id objc_msgSend_productData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productData");
}

id objc_msgSend_productGroup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productGroup");
}

id objc_msgSend_productId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productId");
}

id objc_msgSend_productNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productNumber");
}

id objc_msgSend_productType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "productType");
}

id objc_msgSend_programEntryScanNetworks_andExitScanNetworks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "programEntryScanNetworks:andExitScanNetworks:");
}

id objc_msgSend_promoteStagingData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promoteStagingData:");
}

id objc_msgSend_promptPossibleFalseExitDetectionUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "promptPossibleFalseExitDetectionUI");
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "properties");
}

id objc_msgSend_propertyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyForKey:");
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_protectionSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protectionSpace");
}

id objc_msgSend_protocolID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolID");
}

id objc_msgSend_protocolVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "protocolVersion");
}

id objc_msgSend_provenance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provenance");
}

id objc_msgSend_provideIntervalDistributions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideIntervalDistributions:");
}

id objc_msgSend_provideMetricDimensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideMetricDimensions:");
}

id objc_msgSend_provideSample_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideSample:");
}

id objc_msgSend_provideSampleBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provideSampleBytes:length:");
}

id objc_msgSend_provider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provider");
}

id objc_msgSend_providerDealloc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providerDealloc");
}

id objc_msgSend_providerInit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providerInit");
}

id objc_msgSend_providerOnVehicleStateNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providerOnVehicleStateNotification:");
}

id objc_msgSend_providerQueryMotionDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providerQueryMotionDataType:");
}

id objc_msgSend_providerSubscribeToMotionDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providerSubscribeToMotionDataType:");
}

id objc_msgSend_providerUnsubscribeToMotionDataType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "providerUnsubscribeToMotionDataType:");
}

id objc_msgSend_provisionalServiceMask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "provisionalServiceMask");
}

id objc_msgSend_proximityPairingSubType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityPairingSubType");
}

id objc_msgSend_proximityUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proximityUUID");
}

id objc_msgSend_proxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxy");
}

id objc_msgSend_proxyForRecipientObject_inSilo_recipientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForRecipientObject:inSilo:recipientName:");
}

id objc_msgSend_proxyForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForService:");
}

id objc_msgSend_proxyForService_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "proxyForService:forClient:");
}

id objc_msgSend_pruneActivityBasedBeaconPayloadCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneActivityBasedBeaconPayloadCache");
}

id objc_msgSend_pruneAndGetSecondaryDataOlderThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneAndGetSecondaryDataOlderThan:");
}

id objc_msgSend_pruneCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneCache");
}

id objc_msgSend_pruneCacheWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneCacheWithSize:");
}

id objc_msgSend_pruneLocationCacheAfterAdv(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneLocationCacheAfterAdv");
}

id objc_msgSend_pruneLocationCacheBeforeAdv(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneLocationCacheBeforeAdv");
}

id objc_msgSend_pruneMotionCacheAfterAdv(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneMotionCacheAfterAdv");
}

id objc_msgSend_pruneMotionCacheBeforeAdv(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneMotionCacheBeforeAdv");
}

id objc_msgSend_pruneOldStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneOldStats");
}

id objc_msgSend_pruneScanCacheToQuarterHour(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneScanCacheToQuarterHour");
}

id objc_msgSend_pruneSecondaryDataOlderThan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pruneSecondaryDataOlderThan:");
}

id objc_msgSend_psapID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "psapID");
}

id objc_msgSend_psc(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "psc");
}

id objc_msgSend_publishDataFiles_metadata_startDate_endDate_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publishDataFiles:metadata:startDate:endDate:settings:");
}

id objc_msgSend_publishRecording(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publishRecording");
}

id objc_msgSend_publishSeparationEventForBeacons_eventType_region_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publishSeparationEventForBeacons:eventType:region:completion:");
}

id objc_msgSend_publisher(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "publisher");
}

id objc_msgSend_pullDataFromPersistentStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pullDataFromPersistentStore");
}

id objc_msgSend_purge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purge:");
}

id objc_msgSend_purgeAllMicroLocationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeAllMicroLocationData");
}

id objc_msgSend_purgeMicroLocationSemiSupervisedDataForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeMicroLocationSemiSupervisedDataForClient:");
}

id objc_msgSend_purgeOlderRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "purgeOlderRecords");
}

id objc_msgSend_pushElevationsFromTime_toTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "pushElevationsFromTime:toTime:");
}

id objc_msgSend_quantity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantity");
}

id objc_msgSend_quantitySampleWithType_quantity_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantitySampleWithType:quantity:startDate:endDate:");
}

id objc_msgSend_quantitySampleWithType_quantity_startDate_endDate_device_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantitySampleWithType:quantity:startDate:endDate:device:metadata:");
}

id objc_msgSend_quantitySampleWithType_quantity_startDate_endDate_metadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantitySampleWithType:quantity:startDate:endDate:metadata:");
}

id objc_msgSend_quantityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantityType");
}

id objc_msgSend_quantityTypeForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantityTypeForIdentifier:");
}

id objc_msgSend_quantityWithUnit_doubleValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quantityWithUnit:doubleValue:");
}

id objc_msgSend_quarterHourDisconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quarterHourDisconnect");
}

id objc_msgSend_quaternion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quaternion");
}

id objc_msgSend_quaternionW(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quaternionW");
}

id objc_msgSend_quaternionX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quaternionX");
}

id objc_msgSend_quaternionY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quaternionY");
}

id objc_msgSend_quaternionZ(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quaternionZ");
}

id objc_msgSend_queryActivityStartingFromDate_toDate_toQueue_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryActivityStartingFromDate:toDate:toQueue:withHandler:");
}

id objc_msgSend_queryCalories_endDate_hkIdentifier_sources_caloriesHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryCalories:endDate:hkIdentifier:sources:caloriesHandler:");
}

id objc_msgSend_queryCaloriesFromWorkouts_endDate_sources_workoutsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryCaloriesFromWorkouts:endDate:sources:workoutsHandler:");
}

id objc_msgSend_queryElevationsFromDate_toDate_withBatchSize_fromRecordId_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryElevationsFromDate:toDate:withBatchSize:fromRecordId:withReply:");
}

id objc_msgSend_queryExerciseMinutes_endDate_sources_exerciseMinutesHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryExerciseMinutes:endDate:sources:exerciseMinutesHandler:");
}

id objc_msgSend_queryFlightsClimbed_endDate_sources_flightsClimbedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryFlightsClimbed:endDate:sources:flightsClimbedHandler:");
}

id objc_msgSend_queryForProximity_monitorInterval_withTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryForProximity:monitorInterval:withTimeout:");
}

id objc_msgSend_queryHRSource_workoutEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryHRSource:workoutEndTime:");
}

id objc_msgSend_queryHealthKitWithGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryHealthKitWithGroup:");
}

id objc_msgSend_queryMetMinutesInTimeRange_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryMetMinutesInTimeRange:withReply:");
}

id objc_msgSend_queryMetaData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryMetaData:");
}

id objc_msgSend_queryMiloConnectionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryMiloConnectionStatus:");
}

id objc_msgSend_queryMotionStatesWithStartTime_endTime_isFromInternalClient_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryMotionStatesWithStartTime:endTime:isFromInternalClient:withReply:");
}

id objc_msgSend_queryParams(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryParams");
}

id objc_msgSend_queryPedDistance_endDate_sources_distanceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryPedDistance:endDate:sources:distanceHandler:");
}

id objc_msgSend_queryRemoteStepCadenceToStrideLengthBinsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryRemoteStepCadenceToStrideLengthBinsWithHandler:");
}

id objc_msgSend_queryServicesForClient_withConnectionToken_forUser_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryServicesForClient:withConnectionToken:forUser:");
}

id objc_msgSend_querySessionSWOLF_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "querySessionSWOLF:withReply:");
}

id objc_msgSend_querySignificantElevationDeltaFromDate_toDate_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "querySignificantElevationDeltaFromDate:toDate:withReply:");
}

id objc_msgSend_querySinceRecord_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "querySinceRecord:withReply:");
}

id objc_msgSend_querySources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "querySources");
}

id objc_msgSend_queryStateOntoQueue_andMonitorFor_withTimeout_andHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryStateOntoQueue:andMonitorFor:withTimeout:andHandler:");
}

id objc_msgSend_queryStepCadenceToStrideLengthBinsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryStepCadenceToStrideLengthBinsWithHandler:");
}

id objc_msgSend_queryStepCount_endDate_sources_stepCountHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryStepCount:endDate:sources:stepCountHandler:");
}

id objc_msgSend_queryTimeInDaylight_endDate_sources_timeInDaylightHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryTimeInDaylight:endDate:sources:timeInDaylightHandler:");
}

id objc_msgSend_queryTimeInDaylightMetadata_endDate_sources_timeInDaylightMetadataHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryTimeInDaylightMetadata:endDate:sources:timeInDaylightMetadataHandler:");
}

id objc_msgSend_queryTimeNonStatic_endDate_TimeNonStaticHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryTimeNonStatic:endDate:TimeNonStaticHandler:");
}

id objc_msgSend_queryTrustedCrashVerification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryTrustedCrashVerification");
}

id objc_msgSend_queryUsingRecord_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryUsingRecord:withReply:");
}

id objc_msgSend_queryVO2MaxInputsFromRecord_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryVO2MaxInputsFromRecord:withReply:");
}

id objc_msgSend_queryVO2MaxRetrocomputeStatusWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryVO2MaxRetrocomputeStatusWithReply:");
}

id objc_msgSend_queryWorkoutMets_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queryWorkoutMets:withReply:");
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queue");
}

id objc_msgSend_queueDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "queueDuration");
}

id objc_msgSend_quitForcedLocationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "quitForcedLocationState");
}

id objc_msgSend_radialDisplacement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "radialDisplacement");
}

id objc_msgSend_radioTechnology(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "radioTechnology");
}

id objc_msgSend_radius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "radius");
}

id objc_msgSend_radiusMeters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "radiusMeters");
}

id objc_msgSend_raise(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise");
}

id objc_msgSend_raise_format_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raise:format:");
}

id objc_msgSend_raiseRavenEventsFromData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "raiseRavenEventsFromData:");
}

id objc_msgSend_rampType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rampType");
}

id objc_msgSend_randomDoubleWithMin_max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "randomDoubleWithMin:max:");
}

id objc_msgSend_range(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "range");
}

id objc_msgSend_rangeOfCharacterFromSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfCharacterFromSet:");
}

id objc_msgSend_rangeOfString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:");
}

id objc_msgSend_rangeOfString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangeOfString:options:");
}

id objc_msgSend_rangingTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rangingTime");
}

id objc_msgSend_rapportDiscoveryLink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rapportDiscoveryLink");
}

id objc_msgSend_rapportLink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rapportLink");
}

id objc_msgSend_rapportLinkActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rapportLinkActive");
}

id objc_msgSend_rapportStreamingLink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rapportStreamingLink");
}

id objc_msgSend_rat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rat");
}

id objc_msgSend_ratAsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ratAsString:");
}

id objc_msgSend_rate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rate");
}

id objc_msgSend_rateDurationInSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rateDurationInSeconds");
}

id objc_msgSend_rawCoordinateLatitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawCoordinateLatitude");
}

id objc_msgSend_rawCoordinateLongitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawCoordinateLongitude");
}

id objc_msgSend_rawMotionActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawMotionActivity");
}

id objc_msgSend_rawRSSI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rawRSSI");
}

id objc_msgSend_reInitializeDatabasesAndSyncEngineIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reInitializeDatabasesAndSyncEngineIfNeeded");
}

id objc_msgSend_reach(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reach");
}

id objc_msgSend_reachability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachability");
}

id objc_msgSend_reachabilityStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reachabilityStatus");
}

id objc_msgSend_reactivate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reactivate");
}

id objc_msgSend_read_maxLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "read:maxLength:");
}

id objc_msgSend_readAllStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readAllStats");
}

id objc_msgSend_readConditionsFromFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readConditionsFromFile");
}

id objc_msgSend_readData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readData");
}

id objc_msgSend_readDataOfLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataOfLength:");
}

id objc_msgSend_readDataWithOptions_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readDataWithOptions:error:");
}

id objc_msgSend_readFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readFrom:");
}

id objc_msgSend_readHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readHandler");
}

id objc_msgSend_readMobileAssetConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readMobileAssetConfiguration:");
}

id objc_msgSend_readTag_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readTag:type:");
}

id objc_msgSend_readValueForCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readValueForCharacteristic:");
}

id objc_msgSend_readonlyStoreAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readonlyStoreAtKeyPath:");
}

id objc_msgSend_ready(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ready");
}

id objc_msgSend_readyToFilter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "readyToFilter");
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reason");
}

id objc_msgSend_rebaseSignificantElevationWithEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rebaseSignificantElevationWithEndTime:");
}

id objc_msgSend_receiveAdvertisement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveAdvertisement:");
}

id objc_msgSend_receiveBeaconPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveBeaconPayload:");
}

id objc_msgSend_receiveColdStorageDataUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveColdStorageDataUpdate:");
}

id objc_msgSend_receiveLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveLocation:");
}

id objc_msgSend_receiveMobilityDataFromCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveMobilityDataFromCompanion:");
}

id objc_msgSend_receiveMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveMotionActivity:");
}

id objc_msgSend_receivePredictedWalkDistanceBout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivePredictedWalkDistanceBout:");
}

id objc_msgSend_receiveSignalEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveSignalEnvironment:");
}

id objc_msgSend_receiveVO2MaxCloudKitDailyStatsFromWatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveVO2MaxCloudKitDailyStatsFromWatch:");
}

id objc_msgSend_receiveWorkoutDistanceAnalyticsMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receiveWorkoutDistanceAnalyticsMessage:");
}

id objc_msgSend_receivedMessageHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedMessageHandler");
}

id objc_msgSend_receivedTimeToAcceptTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedTimeToAcceptTime");
}

id objc_msgSend_receivedTimeToFirstUserResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivedTimeToFirstUserResponse");
}

id objc_msgSend_receivingEndUnacknowledgedMessages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "receivingEndUnacknowledgedMessages");
}

id objc_msgSend_recentVisits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recentVisits");
}

id objc_msgSend_reconcileKey_matchedIndex_sequence_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconcileKey:matchedIndex:sequence:error:");
}

id objc_msgSend_reconciledConnectionEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconciledConnectionEnabled");
}

id objc_msgSend_reconciler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconciler");
}

id objc_msgSend_reconfigureRavenIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconfigureRavenIfNeeded");
}

id objc_msgSend_reconnectAfterLeashFailure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconnectAfterLeashFailure");
}

id objc_msgSend_reconnectDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconnectDevice:");
}

id objc_msgSend_reconnecting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reconnecting");
}

id objc_msgSend_record(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "record");
}

id objc_msgSend_recordChangeTag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordChangeTag");
}

id objc_msgSend_recordFallEventInHealthKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordFallEventInHealthKit:");
}

id objc_msgSend_recordID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordID");
}

id objc_msgSend_recordIDsToDelete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIDsToDelete");
}

id objc_msgSend_recordId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordId");
}

id objc_msgSend_recordIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordIdentifier");
}

id objc_msgSend_recordName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordName");
}

id objc_msgSend_recordType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordType");
}

id objc_msgSend_recordWeatherData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWeatherData:");
}

id objc_msgSend_recordWorkoutSessionEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWorkoutSessionEvent:");
}

id objc_msgSend_recordWorkoutSessionPriors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordWorkoutSessionPriors:");
}

id objc_msgSend_recordZone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordZone");
}

id objc_msgSend_recordingURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordingURLs");
}

id objc_msgSend_recordsToSave(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recordsToSave");
}

id objc_msgSend_recoveryOnsetTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recoveryOnsetTime");
}

id objc_msgSend_recoverySession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recoverySession");
}

id objc_msgSend_recoverySyncInProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recoverySyncInProgress");
}

id objc_msgSend_recreateKeyReconciler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recreateKeyReconciler");
}

id objc_msgSend_recvDataFromAccessory_data_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "recvDataFromAccessory:data:error:");
}

id objc_msgSend_reduceAccuracy_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reduceAccuracy:withReply:");
}

id objc_msgSend_reevaluateMotionSubscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reevaluateMotionSubscription");
}

id objc_msgSend_referenceFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceFrame");
}

id objc_msgSend_referenceLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceLocation");
}

id objc_msgSend_referenceTicks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceTicks");
}

id objc_msgSend_referenceTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceTime");
}

id objc_msgSend_referenceWallTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "referenceWallTime");
}

id objc_msgSend_refillAwaitingMonitoringConditions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refillAwaitingMonitoringConditions:");
}

id objc_msgSend_refresh(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refresh");
}

id objc_msgSend_refreshCellMonitor_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshCellMonitor:completion:");
}

id objc_msgSend_refreshHistoricalMeanSeaLevelPressureWithStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshHistoricalMeanSeaLevelPressureWithStartTime:andEndTime:");
}

id objc_msgSend_refreshMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshMetrics");
}

id objc_msgSend_refreshSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshSettings");
}

id objc_msgSend_refreshState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "refreshState");
}

id objc_msgSend_regeotagBeaconPayloads(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regeotagBeaconPayloads");
}

id objc_msgSend_regionCenterLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionCenterLocation");
}

id objc_msgSend_regionChangeCallback(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionChangeCallback");
}

id objc_msgSend_regionForFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionForFence:");
}

id objc_msgSend_regionId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionId");
}

id objc_msgSend_regionalLocationOfInterestMergeRadiusKM(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionalLocationOfInterestMergeRadiusKM");
}

id objc_msgSend_regionalPrefetchMaxFloorCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionalPrefetchMaxFloorCount");
}

id objc_msgSend_regionalPrefetchMaxFloorsPerPrefetch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionalPrefetchMaxFloorsPerPrefetch");
}

id objc_msgSend_regionalPrefetchRadiusKM(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionalPrefetchRadiusKM");
}

id objc_msgSend_regionalTilePrefetchMaxCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regionalTilePrefetchMaxCount");
}

id objc_msgSend_register_forNotification_registrationInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "register:forNotification:registrationInfo:");
}

id objc_msgSend_registerAlarm_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerAlarm:withReply:");
}

id objc_msgSend_registerAndRunXPCActivity_withActivityIdentifier_andDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerAndRunXPCActivity:withActivityIdentifier:andDescription:");
}

id objc_msgSend_registerCircularInterestZoneForClientKey_withId_latitude_longitude_serviceMaskOperator_provenanceType_radius_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerCircularInterestZoneForClientKey:withId:latitude:longitude:serviceMaskOperator:provenanceType:radius:withReply:");
}

id objc_msgSend_registerClient_adapter_systemClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:adapter:systemClient:");
}

id objc_msgSend_registerClient_forElevationThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:forElevationThreshold:");
}

id objc_msgSend_registerClient_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:forNotification:");
}

id objc_msgSend_registerClient_fromAuthSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:fromAuthSync:");
}

id objc_msgSend_registerClient_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerClient:queue:");
}

id objc_msgSend_registerDatabaseAtURL_tableName_isClassB_sourceDevice_cloudKitDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDatabaseAtURL:tableName:isClassB:sourceDevice:cloudKitDelegate:");
}

id objc_msgSend_registerDelegate_inSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDelegate:inSilo:");
}

id objc_msgSend_registerDelegate_withFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDelegate:withFilter:");
}

id objc_msgSend_registerDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerDevice");
}

id objc_msgSend_registerEventID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerEventID:options:handler:");
}

id objc_msgSend_registerForAlgorithmSources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForAlgorithmSources");
}

id objc_msgSend_registerForAppMonitorNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForAppMonitorNotification");
}

id objc_msgSend_registerForAvengerScanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForAvengerScanner");
}

id objc_msgSend_registerForBluetoothPowerNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForBluetoothPowerNotification");
}

id objc_msgSend_registerForBluetoothServiceNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForBluetoothServiceNotification");
}

id objc_msgSend_registerForClientManagerNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForClientManagerNotification");
}

id objc_msgSend_registerForCompanionConnectionUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForCompanionConnectionUpdate");
}

id objc_msgSend_registerForCompanionConnectionUpdateWithUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForCompanionConnectionUpdateWithUniverse:");
}

id objc_msgSend_registerForCompanionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForCompanionNotification");
}

id objc_msgSend_registerForCyclingWorkoutDistanceUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForCyclingWorkoutDistanceUpdates:");
}

id objc_msgSend_registerForDaemonStatusNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDaemonStatusNotification");
}

id objc_msgSend_registerForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForData:");
}

id objc_msgSend_registerForDataProtectionManagerNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDataProtectionManagerNotification");
}

id objc_msgSend_registerForDataProtectionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDataProtectionNotification");
}

id objc_msgSend_registerForDeviceMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDeviceMatching:");
}

id objc_msgSend_registerForDevicesMatching_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDevicesMatching:options:");
}

id objc_msgSend_registerForDurianConnectionStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDurianConnectionStateChange");
}

id objc_msgSend_registerForDurianService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForDurianService");
}

id objc_msgSend_registerForEventsNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForEventsNotification");
}

id objc_msgSend_registerForGeoCountryCodeConfigurationNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForGeoCountryCodeConfigurationNotification");
}

id objc_msgSend_registerForGeoNavListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForGeoNavListener");
}

id objc_msgSend_registerForGnssNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForGnssNotification");
}

id objc_msgSend_registerForHKNanoLifestylePrivacyPreferencesChangedNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForHKNanoLifestylePrivacyPreferencesChangedNotification");
}

id objc_msgSend_registerForLocalNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForLocalNotifications");
}

id objc_msgSend_registerForLocationNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForLocationNotification");
}

id objc_msgSend_registerForMiloPredictionEventUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMiloPredictionEventUpdates:");
}

id objc_msgSend_registerForMiloServiceEventUpdatesForClient_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMiloServiceEventUpdatesForClient:withToken:");
}

id objc_msgSend_registerForMobileAssetNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMobileAssetNotification");
}

id objc_msgSend_registerForMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMobilityBoutMetrics:");
}

id objc_msgSend_registerForMotionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMotionNotification");
}

id objc_msgSend_registerForMotionStateMediatorNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForMotionStateMediatorNotification");
}

id objc_msgSend_registerForNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForNotifications");
}

id objc_msgSend_registerForOTASettingsNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForOTASettingsNotification");
}

id objc_msgSend_registerForPushToken_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForPushToken:completion:");
}

id objc_msgSend_registerForRSSIUpdatesForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForRSSIUpdatesForClient:");
}

id objc_msgSend_registerForRetrocomputeStatusUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForRetrocomputeStatusUpdates:");
}

id objc_msgSend_registerForRoutineMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForRoutineMonitor");
}

id objc_msgSend_registerForSignalEnvironmentNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForSignalEnvironmentNotification");
}

id objc_msgSend_registerForStateUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForStateUpdates:");
}

id objc_msgSend_registerForTelephonyNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTelephonyNotification");
}

id objc_msgSend_registerForTrackRunEnablementNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForTrackRunEnablementNotifications");
}

id objc_msgSend_registerForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForUpdates:");
}

id objc_msgSend_registerForUsageMetricsUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForUsageMetricsUpdates:");
}

id objc_msgSend_registerForVehicleStateNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForVehicleStateNotification");
}

id objc_msgSend_registerForVisionNotifications_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForVisionNotifications:");
}

id objc_msgSend_registerForWalkingSteadiness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWalkingSteadiness:");
}

id objc_msgSend_registerForWeatherUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWeatherUpdates:");
}

id objc_msgSend_registerForWifiScanResultsWithQueue_error_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWifiScanResultsWithQueue:error:callback:");
}

id objc_msgSend_registerForWifiServiceNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWifiServiceNotification");
}

id objc_msgSend_registerForWorkoutSessionUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForWorkoutSessionUpdates:");
}

id objc_msgSend_registerForZoneChangesMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerForZoneChangesMatching:");
}

id objc_msgSend_registerNotificationBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerNotificationBlock:");
}

id objc_msgSend_registerNotificationBlock_forProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerNotificationBlock:forProperties:");
}

id objc_msgSend_registerPaths_forBundleID_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerPaths:forBundleID:completionHandler:");
}

id objc_msgSend_registerPhenolicInterestZoneForClientKey_withId_phenolicLocation_serviceMaskOperator_provenanceType_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerPhenolicInterestZoneForClientKey:withId:phenolicLocation:serviceMaskOperator:provenanceType:withReply:");
}

id objc_msgSend_registerRequestHandlers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestHandlers");
}

id objc_msgSend_registerRequestID_options_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerRequestID:options:handler:");
}

id objc_msgSend_registerSmartCoverStateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSmartCoverStateObserver:");
}

id objc_msgSend_registerStrideCalDbForColdStorage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerStrideCalDbForColdStorage:");
}

id objc_msgSend_registerSubIdentity_withType_forAnchorKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerSubIdentity:withType:forAnchorKeyPath:");
}

id objc_msgSend_registerWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registerWithCompletionHandler:");
}

id objc_msgSend_registeredFiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredFiles");
}

id objc_msgSend_registeredKeyPathForClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredKeyPathForClientIdentifier:");
}

id objc_msgSend_registeredXPCTaskElevationProfile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredXPCTaskElevationProfile");
}

id objc_msgSend_registeredXPCTaskMSLP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registeredXPCTaskMSLP");
}

id objc_msgSend_registrationDisplayStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registrationDisplayStatus");
}

id objc_msgSend_registrationResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "registrationResult");
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_regulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regulatoryDomainEstimates");
}

id objc_msgSend_relationship(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relationship");
}

id objc_msgSend_releaseAccuracyEnablementAssertionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseAccuracyEnablementAssertionForClient:");
}

id objc_msgSend_releaseAllContextManagers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseAllContextManagers");
}

id objc_msgSend_releaseAndClearManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseAndClearManager:");
}

id objc_msgSend_releaseAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseAssertion");
}

id objc_msgSend_releaseBlocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseBlocks");
}

id objc_msgSend_releaseContextManagersForNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseContextManagersForNotification:");
}

id objc_msgSend_releaseData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseData");
}

id objc_msgSend_releaseExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseExtension:");
}

id objc_msgSend_releaseMaintenancePowerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseMaintenancePowerAssertion:");
}

id objc_msgSend_releaseMapHelperServiceOSTransaction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseMapHelperServiceOSTransaction");
}

id objc_msgSend_releaseMutexWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseMutexWithReason:");
}

id objc_msgSend_releaseOSTransaction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releaseOSTransaction");
}

id objc_msgSend_releasePowerAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releasePowerAssertion");
}

id objc_msgSend_releasePowerAssertion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releasePowerAssertion:");
}

id objc_msgSend_releasePowerAssertions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "releasePowerAssertions");
}

id objc_msgSend_relevancy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "relevancy:");
}

id objc_msgSend_remainingBOMScans(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remainingBOMScans");
}

id objc_msgSend_remoteDeviceMotionUpdate_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteDeviceMotionUpdate:atTime:");
}

id objc_msgSend_remoteObjectInterface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectInterface");
}

id objc_msgSend_remoteObjectProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxy");
}

id objc_msgSend_remoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_remoteTimeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "remoteTimeout");
}

id objc_msgSend_removeAllCarryingItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllCarryingItems");
}

id objc_msgSend_removeAllDiscoveryTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllDiscoveryTypes");
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllObjects");
}

id objc_msgSend_removeAllPossiblePeripherals(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAllPossiblePeripherals");
}

id objc_msgSend_removeAttribution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeAttribution:");
}

id objc_msgSend_removeClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeClient:");
}

id objc_msgSend_removeClient_prepareSessionEndForSessionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeClient:prepareSessionEndForSessionType:");
}

id objc_msgSend_removeConditionFromMonitoringWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConditionFromMonitoringWithIdentifier:");
}

id objc_msgSend_removeConditionsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeConditionsWithIdentifiers:");
}

id objc_msgSend_removeDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDataSource:");
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDelegate:");
}

id objc_msgSend_removeDictionaryAtKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDictionaryAtKeyPath:");
}

id objc_msgSend_removeDisableModules_setting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeDisableModules:setting:");
}

id objc_msgSend_removeFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeFence:");
}

id objc_msgSend_removeGeofenceWithRegionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGeofenceWithRegionId:");
}

id objc_msgSend_removeGeofencesNearLocationWithLatitude_andLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeGeofencesNearLocationWithLatitude:andLongitude:");
}

id objc_msgSend_removeInterestForClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeInterestForClientKey:");
}

id objc_msgSend_removeItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtPath:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeLastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeLastObject");
}

id objc_msgSend_removeMonitoredRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeMonitoredRegion:");
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObject:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsAtIndexes:");
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsForKeys:");
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectsInRange:");
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:forKeyPath:");
}

id objc_msgSend_removeObserver_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObserver:name:object:");
}

id objc_msgSend_removeOldVisits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeOldVisits");
}

id objc_msgSend_removePersistentStore_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePersistentStore:error:");
}

id objc_msgSend_removePossiblePeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removePossiblePeripheral:");
}

id objc_msgSend_removeRecordFromMonitoringWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRecordFromMonitoringWithIdentifier:");
}

id objc_msgSend_removeResponseListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeResponseListener:");
}

id objc_msgSend_removeRhythmicGnssClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeRhythmicGnssClient:");
}

id objc_msgSend_removeSubscriptionWithIdentifier_callbackQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeSubscriptionWithIdentifier:callbackQueue:completionHandler:");
}

id objc_msgSend_removeTrackRunSubscriptionForType_nploiIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeTrackRunSubscriptionForType:nploiIndex:");
}

id objc_msgSend_removeValueForKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeValueForKey:atKeyPath:");
}

id objc_msgSend_repeats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "repeats");
}

id objc_msgSend_replaceBytesInRange_withBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceBytesInRange:withBytes:length:");
}

id objc_msgSend_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
}

id objc_msgSend_replaceObjectAtIndex_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceObjectAtIndex:withObject:");
}

id objc_msgSend_replaceOccurrencesOfString_withString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replaceOccurrencesOfString:withString:options:range:");
}

id objc_msgSend_reply(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reply");
}

id objc_msgSend_replyRequestsWithErrorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replyRequestsWithErrorCode:");
}

id objc_msgSend_replyRequestsWithResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "replyRequestsWithResult");
}

id objc_msgSend_reportCalibratedPressureCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportCalibratedPressureCollection:");
}

id objc_msgSend_reportLocationUtilityEvent_atDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportLocationUtilityEvent:atDate:");
}

id objc_msgSend_reportRealtimeLocationCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportRealtimeLocationCollection:");
}

id objc_msgSend_requestAnchorValueStatisticsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestAnchorValueStatisticsWithReply:");
}

id objc_msgSend_requestArchivesForHarvester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestArchivesForHarvester:");
}

id objc_msgSend_requestCarScanTimeViaDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCarScanTimeViaDevice:");
}

id objc_msgSend_requestChangeFencesStateMatchingHandoffTags_forDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestChangeFencesStateMatchingHandoffTags:forDeviceID:");
}

id objc_msgSend_requestCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCode");
}

id objc_msgSend_requestConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestConfiguration");
}

id objc_msgSend_requestCurrentMicroLocationForClient_withAdditionalInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCurrentMicroLocationForClient:withAdditionalInformation:");
}

id objc_msgSend_requestCurrentMicroLocationForClient_withAdditionalInformation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestCurrentMicroLocationForClient:withAdditionalInformation:withReply:");
}

id objc_msgSend_requestDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestDate");
}

id objc_msgSend_requestDisconnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestDisconnection:");
}

id objc_msgSend_requestDisconnectionForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestDisconnectionForDevice:");
}

id objc_msgSend_requestDiscoveryScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestDiscoveryScan");
}

id objc_msgSend_requestDiscoveryViaDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestDiscoveryViaDevice:");
}

id objc_msgSend_requestExportMiLoDatabaseTablesFromClient_withRequestIdentifier_connectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestExportMiLoDatabaseTablesFromClient:withRequestIdentifier:connectionToken:");
}

id objc_msgSend_requestForSchedulingTileDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestForSchedulingTileDownload:");
}

id objc_msgSend_requestFullResync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestFullResync");
}

id objc_msgSend_requestGuidanceState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestGuidanceState");
}

id objc_msgSend_requestHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestHawkeyeLowEnergyScan");
}

id objc_msgSend_requestImportantLoisIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestImportantLoisIfNeeded");
}

id objc_msgSend_requestLabelObservationsForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_betweenStartDate_endDate_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLabelObservationsForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:betweenStartDate:endDate:withConnectionToken:");
}

id objc_msgSend_requestLabelSingleObservationForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_withObservationRequestIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLabelSingleObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withObservationRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLocation");
}

id objc_msgSend_requestLocationUpdateWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLocationUpdateWithParameters:");
}

id objc_msgSend_requestLocationWithDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLocationWithDesiredAccuracy:");
}

id objc_msgSend_requestLoiRelatedTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestLoiRelatedTo:");
}

id objc_msgSend_requestMicroLocationLearningForClient_withServiceIdentifier_withRequestIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMicroLocationLearningForClient:withServiceIdentifier:withRequestIdentifier:");
}

id objc_msgSend_requestMicroLocationLearningForClient_Legacy_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMicroLocationLearningForClient_Legacy:withReply:");
}

id objc_msgSend_requestMicroLocationRecordingScanForClient_withAdditionalInformation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMicroLocationRecordingScanForClient:withAdditionalInformation:withReply:");
}

id objc_msgSend_requestMonitorWithConfiguration_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestMonitorWithConfiguration:completion:");
}

id objc_msgSend_requestObservationForClient_withServiceIdentifier_withRequestIdentifier_withPlaceIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestObservationForClient:withServiceIdentifier:withRequestIdentifier:withPlaceIdentifier:withConnectionToken:");
}

id objc_msgSend_requestPurgeAllMiLoDataFromClient_withRequestIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestPurgeAllMiLoDataFromClient:withRequestIdentifier:");
}

id objc_msgSend_requestQ(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestQ");
}

id objc_msgSend_requestRTTiles_longitude_numberOfTiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRTTiles:longitude:numberOfTiles:");
}

id objc_msgSend_requestReceivedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestReceivedTime");
}

id objc_msgSend_requestRegionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRegionState:");
}

id objc_msgSend_requestRemoveCustomLoiWithServiceIdentifier_withRequestIdentifier_withLoiIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRemoveCustomLoiWithServiceIdentifier:withRequestIdentifier:withLoiIdentifier:withConnectionToken:");
}

id objc_msgSend_requestRemoveLabelsForClient_withServiceIdentifier_withRequestIdentifier_withLabels_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRemoveLabelsForClient:withServiceIdentifier:withRequestIdentifier:withLabels:withConnectionToken:");
}

id objc_msgSend_requestRouteSummary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestRouteSummary");
}

id objc_msgSend_requestScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestScan");
}

id objc_msgSend_requestSingleShotMiLoPredictionForClient_withServiceIdentifier_withRequestIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestSingleShotMiLoPredictionForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestStartUpdatingMicroLocationForClient_withServiceIdentifier_withRequestIdentifier_withConfiguration_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestStartUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConfiguration:withConnectionToken:");
}

id objc_msgSend_requestStateForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestStateForRegion:");
}

id objc_msgSend_requestStatusAtFirstUserResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestStatusAtFirstUserResponse");
}

id objc_msgSend_requestStopUpdatingMicroLocationForClient_withServiceIdentifier_withRequestIdentifier_withConnectionToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestStopUpdatingMicroLocationForClient:withServiceIdentifier:withRequestIdentifier:withConnectionToken:");
}

id objc_msgSend_requestTileDownloadByType_lat_lon_seckey_details_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTileDownloadByType:lat:lon:seckey:details:");
}

id objc_msgSend_requestTileDownloadByType_path_details_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTileDownloadByType:path:details:");
}

id objc_msgSend_requestTileDownloadForLat_lon_details_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTileDownloadForLat:lon:details:");
}

id objc_msgSend_requestTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTimestamp");
}

id objc_msgSend_requestTokenForTopic_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTokenForTopic:identifier:");
}

id objc_msgSend_requestTransitSummary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTransitSummary");
}

id objc_msgSend_requestTransitionToLocationState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTransitionToLocationState:");
}

id objc_msgSend_requestTransmissionTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTransmissionTime");
}

id objc_msgSend_requestTypeCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestTypeCode");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requestedScanType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestedScanType");
}

id objc_msgSend_requestsGpsAssistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestsGpsAssistance");
}

id objc_msgSend_requireNetworkAgentWithDomain_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requireNetworkAgentWithDomain:type:");
}

id objc_msgSend_requiresMutex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresMutex");
}

id objc_msgSend_requiresSecureCoding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requiresSecureCoding");
}

id objc_msgSend_rereadConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rereadConfiguration:");
}

id objc_msgSend_reregisterDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reregisterDevice");
}

id objc_msgSend_reschedule(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reschedule");
}

id objc_msgSend_resendMotionStateTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resendMotionStateTimer");
}

id objc_msgSend_resendTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resendTimer");
}

id objc_msgSend_reserved(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reserved");
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset");
}

id objc_msgSend_reset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reset:");
}

id objc_msgSend_resetAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetAnalytics");
}

id objc_msgSend_resetAnalyticsCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetAnalyticsCache");
}

id objc_msgSend_resetAsNotifcation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetAsNotifcation");
}

id objc_msgSend_resetBOMScanIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetBOMScanIfNeeded");
}

id objc_msgSend_resetBodyMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetBodyMetrics");
}

id objc_msgSend_resetBytesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetBytesInRange:");
}

id objc_msgSend_resetCardioChangeEstimationActivity_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCardioChangeEstimationActivity:withDelay:");
}

id objc_msgSend_resetClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetClient:");
}

id objc_msgSend_resetClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetClients");
}

id objc_msgSend_resetControlPlaneStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetControlPlaneStatus");
}

id objc_msgSend_resetCoreAnalyticsTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetCoreAnalyticsTimer");
}

id objc_msgSend_resetDaemonPartOfCondition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDaemonPartOfCondition");
}

id objc_msgSend_resetDailyStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDailyStats");
}

id objc_msgSend_resetDeviceConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetDeviceConnections:");
}

id objc_msgSend_resetHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetHawkeyeTask");
}

id objc_msgSend_resetHeleMaintMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetHeleMaintMetrics");
}

id objc_msgSend_resetHistoricalStates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetHistoricalStates");
}

id objc_msgSend_resetInVisitRebasedMslp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetInVisitRebasedMslp");
}

id objc_msgSend_resetKeychainItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetKeychainItem");
}

id objc_msgSend_resetLeashState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetLeashState");
}

id objc_msgSend_resetModemWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetModemWithReason:");
}

id objc_msgSend_resetNavModeEstimator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetNavModeEstimator");
}

id objc_msgSend_resetNotificationConsumedForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetNotificationConsumedForIdentifier:");
}

id objc_msgSend_resetQueryState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetQueryState");
}

id objc_msgSend_resetRecoveryMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetRecoveryMode");
}

id objc_msgSend_resetRetrocomputePreProcessingActivity_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetRetrocomputePreProcessingActivity:withDelay:");
}

id objc_msgSend_resetRetryCounters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetRetryCounters:");
}

id objc_msgSend_resetStats(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetStats");
}

id objc_msgSend_resetStoredCalibrations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetStoredCalibrations");
}

id objc_msgSend_resetSyncActivity_withDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSyncActivity:withDelay:");
}

id objc_msgSend_resetSyncStateKeysRetainingResetKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetSyncStateKeysRetainingResetKeys:");
}

id objc_msgSend_resetUserProfileForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetUserProfileForKeys:");
}

id objc_msgSend_resetVehicularFalsePositiveSuppressionDnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetVehicularFalsePositiveSuppressionDnd");
}

id objc_msgSend_resetWeeklyRiskModuleComputeTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetWeeklyRiskModuleComputeTime");
}

id objc_msgSend_resetWithDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetWithDate:");
}

id objc_msgSend_resetWithTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resetWithTime:");
}

id objc_msgSend_residualDistanceToPreviousVisit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "residualDistanceToPreviousVisit");
}

id objc_msgSend_resolution(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolution");
}

id objc_msgSend_resolveAndUpdateTADeviceRecordStatusFor_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveAndUpdateTADeviceRecordStatusFor:withCompletion:");
}

id objc_msgSend_resolveNewScanTypeWithNewContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resolveNewScanTypeWithNewContext:");
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "response");
}

id objc_msgSend_responseWithAck_forMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "responseWithAck:forMessage:");
}

id objc_msgSend_restartConnectionAttemptToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restartConnectionAttemptToDevice:");
}

id objc_msgSend_restartMaintenanceConnections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restartMaintenanceConnections");
}

id objc_msgSend_restartTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restartTimer");
}

id objc_msgSend_restrictedMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "restrictedMode");
}

id objc_msgSend_resultPoseRotation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultPoseRotation");
}

id objc_msgSend_resultPoseTranslation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultPoseTranslation");
}

id objc_msgSend_resultProviderID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resultProviderID");
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "results");
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume");
}

id objc_msgSend_resume_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resume:");
}

id objc_msgSend_resumeAfterPendingStepCountNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeAfterPendingStepCountNotifications");
}

id objc_msgSend_resumeEvent_bounce(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeEvent_bounce");
}

id objc_msgSend_resumeWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeWithCompletion:");
}

id objc_msgSend_resumeWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "resumeWorkout:");
}

id objc_msgSend_retireClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retireClient:");
}

id objc_msgSend_retireServiceWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retireServiceWithName:");
}

id objc_msgSend_retrieveAllActiveGeofences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveAllActiveGeofences");
}

id objc_msgSend_retrieveBiasInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveBiasInfo");
}

id objc_msgSend_retrieveCachedSubmersionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveCachedSubmersionState");
}

id objc_msgSend_retrieveCachedSurfacePressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveCachedSurfacePressure");
}

id objc_msgSend_retrieveLastPushedTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveLastPushedTime");
}

id objc_msgSend_retrieveLocationRelevancyDurationWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveLocationRelevancyDurationWithCompletionHandler:");
}

id objc_msgSend_retrieveLogsHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveLogsHawkeyeTask");
}

id objc_msgSend_retrieveMeanSeaLevelPressureEstimatorState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveMeanSeaLevelPressureEstimatorState");
}

id objc_msgSend_retrieveOwnerLocationsDuringValidationPeriod_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveOwnerLocationsDuringValidationPeriod:completion:");
}

id objc_msgSend_retrievePeripheralWithAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrievePeripheralWithAddress:");
}

id objc_msgSend_retrievePeripheralsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrievePeripheralsWithIdentifiers:");
}

id objc_msgSend_retrieveSupportedResources_subKey_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveSupportedResources:subKey:completion:");
}

id objc_msgSend_retrieveSymmetricKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrieveSymmetricKey:");
}

id objc_msgSend_retrocomputeForSamples_withRetrocomputeHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrocomputeForSamples:withRetrocomputeHistory:");
}

id objc_msgSend_retrocomputeSession_withHealthKitSample_withRetrocomputeHistory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrocomputeSession:withHealthKitSample:withRetrocomputeHistory:");
}

id objc_msgSend_retrocomputeStatusClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retrocomputeStatusClients");
}

id objc_msgSend_retryActivityForEncryptionClass_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryActivityForEncryptionClass:reason:");
}

id objc_msgSend_retryHealthKitDeleteSamples(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryHealthKitDeleteSamples");
}

id objc_msgSend_retryTriggerRetrocompute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "retryTriggerRetrocompute");
}

id objc_msgSend_returnTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "returnTypes");
}

id objc_msgSend_returnTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "returnTypes:");
}

id objc_msgSend_reunionSyncDidComplete_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reunionSyncDidComplete:");
}

id objc_msgSend_reunionSyncListPaths(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reunionSyncListPaths");
}

id objc_msgSend_reunionSyncLists(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reunionSyncLists");
}

id objc_msgSend_reverseObjectEnumerator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reverseObjectEnumerator");
}

id objc_msgSend_revertToUnknownTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "revertToUnknownTimer");
}

id objc_msgSend_roadClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roadClass");
}

id objc_msgSend_roadID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roadID");
}

id objc_msgSend_roamAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roamAllowed");
}

id objc_msgSend_rollWildKeyCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollWildKeyCommand");
}

id objc_msgSend_rollWildKeyTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rollWildKeyTask");
}

id objc_msgSend_roseAPVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roseAPVersion");
}

id objc_msgSend_roseDSPVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "roseDSPVersion");
}

id objc_msgSend_rotateArbitraryToTrueNorth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateArbitraryToTrueNorth");
}

id objc_msgSend_rotateSecondaryFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateSecondaryFile");
}

id objc_msgSend_rotateWithAxis_angle_originVector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotateWithAxis:angle:originVector:");
}

id objc_msgSend_rotationRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rotationRate");
}

id objc_msgSend_routeHintWatchdogTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routeHintWatchdogTimer");
}

id objc_msgSend_routineManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routineManager");
}

id objc_msgSend_routineMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "routineMonitor");
}

id objc_msgSend_rowingModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rowingModel");
}

id objc_msgSend_rscp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rscp");
}

id objc_msgSend_rsrp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rsrp");
}

id objc_msgSend_rssi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rssi");
}

id objc_msgSend_rtKitVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "rtKitVersion");
}

id objc_msgSend_run(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "run");
}

id objc_msgSend_runAggregationForStagingTables(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runAggregationForStagingTables");
}

id objc_msgSend_runNextPendingQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runNextPendingQuery");
}

id objc_msgSend_runWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runWithConfiguration:");
}

id objc_msgSend_running(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "running");
}

id objc_msgSend_runningFindMyCertificationAssistant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runningFindMyCertificationAssistant");
}

id objc_msgSend_runningToNonFitnessSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "runningToNonFitnessSeconds");
}

id objc_msgSend_sampleCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleCount");
}

id objc_msgSend_sampleInterval_s(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleInterval_s");
}

id objc_msgSend_sampleRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleRate");
}

id objc_msgSend_sampleShouldBeWrittenToHK_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleShouldBeWrittenToHK:");
}

id objc_msgSend_sampleType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sampleType");
}

id objc_msgSend_samples(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "samples");
}

id objc_msgSend_saveBeaconPayloads_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBeaconPayloads:completion:");
}

id objc_msgSend_saveBiasInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveBiasInfo");
}

id objc_msgSend_saveCachedSubmersionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCachedSubmersionState:");
}

id objc_msgSend_saveCachedSurfacePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCachedSurfacePressure:");
}

id objc_msgSend_saveCardioFitnessEventWithValue_threshold_dateInterval_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCardioFitnessEventWithValue:threshold:dateInterval:options:completion:");
}

id objc_msgSend_saveCurrentSyncProgress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveCurrentSyncProgress");
}

id objc_msgSend_saveFeaturesToCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveFeaturesToCache:");
}

id objc_msgSend_saveInVisitRebasedMslpToPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveInVisitRebasedMslpToPlist");
}

id objc_msgSend_saveInVisitStateToPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveInVisitStateToPlist");
}

id objc_msgSend_saveInputsAndOutputsForSessionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveInputsAndOutputsForSessionId:");
}

id objc_msgSend_saveLastPushedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveLastPushedTime:");
}

id objc_msgSend_saveMeanSeaLevelPressureArrayToPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveMeanSeaLevelPressureArrayToPlist");
}

id objc_msgSend_saveObject_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveObject:withCompletion:");
}

id objc_msgSend_saveObjects_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveObjects:withCompletion:");
}

id objc_msgSend_saveRecentMeanSeaLevelPressureArrayToPlist(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRecentMeanSeaLevelPressureArrayToPlist");
}

id objc_msgSend_saveRetrocomputedOutputs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveRetrocomputedOutputs");
}

id objc_msgSend_saveStagingOutputToHealthKit_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveStagingOutputToHealthKit:activity:");
}

id objc_msgSend_saveStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveStats:");
}

id objc_msgSend_savedRecords(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedRecords");
}

id objc_msgSend_savedZones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "savedZones");
}

id objc_msgSend_scanAonDutyCycle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanAonDutyCycle");
}

id objc_msgSend_scanBackoffTimeout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanBackoffTimeout");
}

id objc_msgSend_scanDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanDate");
}

id objc_msgSend_scanDeliveryDelayTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanDeliveryDelayTimer");
}

id objc_msgSend_scanDutyCycle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanDutyCycle");
}

id objc_msgSend_scanEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanEnabled");
}

id objc_msgSend_scanFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanFlags");
}

id objc_msgSend_scanForPeripheralsWithServices_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanForPeripheralsWithServices:options:completion:");
}

id objc_msgSend_scanForceNoAopPolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanForceNoAopPolicy");
}

id objc_msgSend_scanForceScreenOffOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanForceScreenOffOnly");
}

id objc_msgSend_scanHexInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanHexInt:");
}

id objc_msgSend_scanPeriodicInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanPeriodicInterval");
}

id objc_msgSend_scanSessionStartTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanSessionStartTimestamp");
}

id objc_msgSend_scanTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanTimer");
}

id objc_msgSend_scanTypeUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanTypeUpdated:");
}

id objc_msgSend_scanWithDuplicates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scanWithDuplicates");
}

id objc_msgSend_scannerWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scannerWithString:");
}

id objc_msgSend_scdmaCellTowerAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scdmaCellTowerAtIndex:");
}

id objc_msgSend_scdmaCellTowers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scdmaCellTowers");
}

id objc_msgSend_scdmaCellTowersCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scdmaCellTowersCount");
}

id objc_msgSend_scenarioTriggerClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scenarioTriggerClients");
}

id objc_msgSend_scheduleAISFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleAISFetchTimeoutForDevice:");
}

id objc_msgSend_scheduleActiveTaskTimeout_forTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleActiveTaskTimeout:forTask:");
}

id objc_msgSend_scheduleAppUninstallationCheck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleAppUninstallationCheck");
}

id objc_msgSend_scheduleChangeEstimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleChangeEstimation");
}

id objc_msgSend_scheduleConnectionEvaluationForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleConnectionEvaluationForDevice:");
}

id objc_msgSend_scheduleConnectionTimeout_toDevice_forPeripeheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleConnectionTimeout:toDevice:forPeripeheral:");
}

id objc_msgSend_scheduleDailyAggregateFeatureCompute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleDailyAggregateFeatureCompute");
}

id objc_msgSend_scheduleDailyResetBOMScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleDailyResetBOMScan");
}

id objc_msgSend_scheduleDisconnectionOnMissingBeaconWithUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleDisconnectionOnMissingBeaconWithUUID:");
}

id objc_msgSend_scheduleDownloadsWithCellularConnectivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleDownloadsWithCellularConnectivity");
}

id objc_msgSend_scheduleDownloadsWithWifiConnectivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleDownloadsWithWifiConnectivity");
}

id objc_msgSend_scheduleEstimate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleEstimate");
}

id objc_msgSend_scheduleInQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleInQueue:");
}

id objc_msgSend_scheduleInRunLoop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleInRunLoop:");
}

id objc_msgSend_scheduleLatencyTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleLatencyTimeout:");
}

id objc_msgSend_schedulePreemptedTaskTimeout_forTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "schedulePreemptedTaskTimeout:forTask:");
}

id objc_msgSend_scheduleRetrocomputePreprocessing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleRetrocomputePreprocessing");
}

id objc_msgSend_scheduleStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleStart");
}

id objc_msgSend_scheduleStop_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleStop:withHandler:");
}

id objc_msgSend_scheduleTimeout_forTaskUuid_withBlock_dictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleTimeout:forTaskUuid:withBlock:dictionary:");
}

id objc_msgSend_scheduleTokenFetchTimeoutForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleTokenFetchTimeoutForDevice:");
}

id objc_msgSend_scheduleWeeklyRiskModelCompute(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduleWeeklyRiskModelCompute");
}

id objc_msgSend_scheduledArrival(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledArrival");
}

id objc_msgSend_scheduledDeparture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledDeparture");
}

id objc_msgSend_scheduledLinks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledLinks");
}

id objc_msgSend_scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:");
}

id objc_msgSend_scheme(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "scheme");
}

id objc_msgSend_score(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "score");
}

id objc_msgSend_secItemFormatToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secItemFormatToDictionary:");
}

id objc_msgSend_second(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "second");
}

id objc_msgSend_secondUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondUnit");
}

id objc_msgSend_secondaryDataSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryDataSize");
}

id objc_msgSend_secondaryFileHandle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryFileHandle");
}

id objc_msgSend_secondaryFileURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryFileURLs");
}

id objc_msgSend_secondaryIndex(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondaryIndex");
}

id objc_msgSend_secondsFromGMT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsFromGMT");
}

id objc_msgSend_secondsFromGMTForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsFromGMTForDate:");
}

id objc_msgSend_secondsFromLastQuarterHour(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsFromLastQuarterHour");
}

id objc_msgSend_secondsSinceLastDisconnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsSinceLastDisconnection");
}

id objc_msgSend_secondsSinceLastProactiveMaintenanceAttempt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "secondsSinceLastProactiveMaintenanceAttempt");
}

id objc_msgSend_sections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sections");
}

id objc_msgSend_sedentaryAlarmData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sedentaryAlarmData");
}

id objc_msgSend_seekToEndOfFile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seekToEndOfFile");
}

id objc_msgSend_seekToFileOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "seekToFileOffset:");
}

id objc_msgSend_selectModels(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectModels");
}

id objc_msgSend_selectReferenceWithReference_withBaroElevation_betweenStartTime_andEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "selectReferenceWithReference:withBaroElevation:betweenStartTime:andEndTime:");
}

id objc_msgSend_semanticModeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "semanticModeIdentifier");
}

id objc_msgSend_sendARSessionState_fromClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendARSessionState:fromClient:");
}

id objc_msgSend_sendAliveAgainMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAliveAgainMessage");
}

id objc_msgSend_sendAllUsageSyncData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAllUsageSyncData");
}

id objc_msgSend_sendAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalytics");
}

id objc_msgSend_sendAnalyticsBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsBoutMetrics:");
}

id objc_msgSend_sendAnalyticsEventForId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsEventForId:");
}

id objc_msgSend_sendAnalyticsEventWithXpcTaskWaitingTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsEventWithXpcTaskWaitingTime:");
}

id objc_msgSend_sendAnalyticsForAllReadySessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsForAllReadySessions");
}

id objc_msgSend_sendAnalyticsSteadinessResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsSteadinessResult:");
}

id objc_msgSend_sendAnalyticsWeeklyEstimate_strideCalInfo_walkingWorkoutPaceStats_runningWorkoutPaceStats_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendAnalyticsWeeklyEstimate:strideCalInfo:walkingWorkoutPaceStats:runningWorkoutPaceStats:userInfo:");
}

id objc_msgSend_sendBinarySMS_trackingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBinarySMS:trackingID:");
}

id objc_msgSend_sendBufferedScanNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendBufferedScanNotifications");
}

id objc_msgSend_sendCAMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCAMetric:");
}

id objc_msgSend_sendClientRegisterAnalyticsWithCurrentUncertainty_andTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendClientRegisterAnalyticsWithCurrentUncertainty:andTime:");
}

id objc_msgSend_sendCompanionData_activity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCompanionData:activity:");
}

id objc_msgSend_sendCompanionSyncAnalyticsWithMsgSize_isSuccess_isActivityDeferred_isActivityValid_isWatchPaired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCompanionSyncAnalyticsWithMsgSize:isSuccess:isActivityDeferred:isActivityValid:isWatchPaired:");
}

id objc_msgSend_sendConnectionMetric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectionMetric");
}

id objc_msgSend_sendConnectionMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendConnectionMetrics:forDevice:");
}

id objc_msgSend_sendCoreAnalyticsEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendCoreAnalyticsEvent:");
}

id objc_msgSend_sendData_metaData_start_end_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:metaData:start:end:");
}

id objc_msgSend_sendData_toPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendData:toPeripheral:");
}

id objc_msgSend_sendDictionaryMessage_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDictionaryMessage:withOptions:");
}

id objc_msgSend_sendDisconnectionMetric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDisconnectionMetric");
}

id objc_msgSend_sendDistancePercentageCoreAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendDistancePercentageCoreAnalytics");
}

id objc_msgSend_sendElevationsFromEstimates_withCompletionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendElevationsFromEstimates:withCompletionBlock:");
}

id objc_msgSend_sendEphemeris_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEphemeris:");
}

id objc_msgSend_sendEphemerisPointDataGpsWeek_gpsTOW_latitude_longitude_accuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEphemerisPointDataGpsWeek:gpsTOW:latitude:longitude:accuracy:");
}

id objc_msgSend_sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation_newLocation_secondEstimatedLocation_error_timeOfInterest_referenceTime_responseTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation:newLocation:secondEstimatedLocation:error:timeOfInterest:referenceTime:responseTime:");
}

id objc_msgSend_sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation_estimationError_timeOfInterest_referenceTime_responseTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation:estimationError:timeOfInterest:referenceTime:responseTime:");
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEvent:");
}

id objc_msgSend_sendEventID_event_destinationID_options_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendEventID:event:destinationID:options:completion:");
}

id objc_msgSend_sendFirmwareUpdateMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFirmwareUpdateMetrics:forDevice:");
}

id objc_msgSend_sendFitnessAnalytics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendFitnessAnalytics:");
}

id objc_msgSend_sendGPRMCDataStatusValueA_ValueV_ValueX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGPRMCDataStatusValueA:ValueV:ValueX:");
}

id objc_msgSend_sendGPRMCDataStatusValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGPRMCDataStatusValues:");
}

id objc_msgSend_sendGPSCoreAnalyticsAndUpdateTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGPSCoreAnalyticsAndUpdateTime");
}

id objc_msgSend_sendGlobalAuthStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGlobalAuthStatus:");
}

id objc_msgSend_sendGpsWeek_gpsTOW_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendGpsWeek:gpsTOW:");
}

id objc_msgSend_sendHelloSequence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendHelloSequence");
}

id objc_msgSend_sendInVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendInVisit:");
}

id objc_msgSend_sendLastLocation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendLastLocation:error:");
}

id objc_msgSend_sendLocations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendLocations");
}

id objc_msgSend_sendLocationsWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendLocationsWithReply:");
}

id objc_msgSend_sendMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:");
}

id objc_msgSend_sendMessage_forTag_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:forTag:withError:");
}

id objc_msgSend_sendMessage_forTag_withPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:forTag:withPayload:");
}

id objc_msgSend_sendMessage_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendMessage_type_priority_fireAndForget_encrypt_bypassConnectionCheck_timeout_nonWaking_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:nonWaking:completionHandler:");
}

id objc_msgSend_sendMessage_withReplyClassesSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessage:withReplyClassesSync:");
}

id objc_msgSend_sendMessageToWatch_identifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageToWatch:identifier:");
}

id objc_msgSend_sendMessageWithMessageType_dataPayload_priority_idsOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMessageWithMessageType:dataPayload:priority:idsOptions:");
}

id objc_msgSend_sendMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMetrics");
}

id objc_msgSend_sendMonitorUpdateForDevice_added_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMonitorUpdateForDevice:added:");
}

id objc_msgSend_sendMotionAlarmRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMotionAlarmRequest");
}

id objc_msgSend_sendMotionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendMotionState");
}

id objc_msgSend_sendNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendNotification:");
}

id objc_msgSend_sendNotificationToClients_notificationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendNotificationToClients:notificationData:");
}

id objc_msgSend_sendObservationForDevice_type_includeLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendObservationForDevice:type:includeLocation:");
}

id objc_msgSend_sendObservationForIdentifier_type_date_location_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendObservationForIdentifier:type:date:location:");
}

id objc_msgSend_sendObservationForIdentifier_type_date_locationDate_includeLocation_locationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendObservationForIdentifier:type:date:locationDate:includeLocation:locationHandler:");
}

id objc_msgSend_sendProtobuf_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendProtobuf:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendRebaseAnalyticsWithAltitudeError_andUncertainty_andRefUncertainty_andDemAvailable_andWorkout_andReferenceSource_andCorrection_andDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRebaseAnalyticsWithAltitudeError:andUncertainty:andRefUncertainty:andDemAvailable:andWorkout:andReferenceSource:andCorrection:andDistance:");
}

id objc_msgSend_sendReferenceTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendReferenceTime:");
}

id objc_msgSend_sendReferenceTime_locationLatitude_longitude_accuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendReferenceTime:locationLatitude:longitude:accuracy:");
}

id objc_msgSend_sendRegionEvent_forRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRegionEvent:forRegion:");
}

id objc_msgSend_sendRequestID_request_destinationID_options_responseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRequestID:request:destinationID:options:responseHandler:");
}

id objc_msgSend_sendRetroComputeAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendRetroComputeAnalytics");
}

id objc_msgSend_sendSMS_withMoreToFollow_trackingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSMS:withMoreToFollow:trackingID:");
}

id objc_msgSend_sendSeparationStateForDevice_state_includeLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSeparationStateForDevice:state:includeLocation:");
}

id objc_msgSend_sendSimulatedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSimulatedLocation:");
}

id objc_msgSend_sendSimulatedLocationUnavailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSimulatedLocationUnavailable");
}

id objc_msgSend_sendStatusForFences_setBefore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendStatusForFences:setBefore:");
}

id objc_msgSend_sendSurfacePressureToAOP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendSurfacePressureToAOP:");
}

id objc_msgSend_sendTimeInDaylightAnayltics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTimeInDaylightAnayltics:");
}

id objc_msgSend_sendToCoreAnalyticsWeeklyEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendToCoreAnalyticsWeeklyEstimate:");
}

id objc_msgSend_sendTrackAndScheduleNextTick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTrackAndScheduleNextTick:");
}

id objc_msgSend_sendTrackFrom_to_location_horrUnc_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendTrackFrom:to:location:horrUnc:type:");
}

id objc_msgSend_sendUARPMessageTaskWithPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendUARPMessageTaskWithPayload:");
}

id objc_msgSend_sendUpdateToRDIfAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendUpdateToRDIfAllowed:");
}

id objc_msgSend_sendVIOEstimation_fromClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVIOEstimation:fromClient:");
}

id objc_msgSend_sendVLLocalizationResult_fromClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVLLocalizationResult:fromClient:");
}

id objc_msgSend_sendVehicleState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVehicleState");
}

id objc_msgSend_sendVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVisit:");
}

id objc_msgSend_sendVisitExitAnalyticsWithDuration_andRebaseEvent_andUncertaintyAtEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVisitExitAnalyticsWithDuration:andRebaseEvent:andUncertaintyAtEntry:");
}

id objc_msgSend_sendVisitExitWifiImprovementAnalyticsEventWithDuration_uncertaintyAtVisitEntry_uncertaintyAtVisitExit_timeDiffBtwArrivalAndLastRebase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVisitExitWifiImprovementAnalyticsEventWithDuration:uncertaintyAtVisitEntry:uncertaintyAtVisitExit:timeDiffBtwArrivalAndLastRebase:");
}

id objc_msgSend_sendVisitsToClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sendVisitsToClient:");
}

id objc_msgSend_sensorErrorThreshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sensorErrorThreshold");
}

id objc_msgSend_sensorRecorder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sensorRecorder");
}

id objc_msgSend_sentDatabaseChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sentDatabaseChangesEvent");
}

id objc_msgSend_sentRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sentRecordZoneChangesEvent");
}

id objc_msgSend_sentRefreshMslpAnalyticsWithAltitudeCorrection_uncertaintyBeforeCurrentRefresh_uncertaintyAfterCurrentRefresh_refreshDuration_xpcWaitingTime_timeDiffBtwRefresh_pressureDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sentRefreshMslpAnalyticsWithAltitudeCorrection:uncertaintyBeforeCurrentRefresh:uncertaintyAfterCurrentRefresh:refreshDuration:xpcWaitingTime:timeDiffBtwRefresh:pressureDelta:");
}

id objc_msgSend_sequence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sequence");
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialNumber");
}

id objc_msgSend_serializeMeta_toData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeMeta:toData:");
}

id objc_msgSend_serialized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serialized");
}

id objc_msgSend_serveClientsStateUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serveClientsStateUpdate");
}

id objc_msgSend_serverTrust(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serverTrust");
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service");
}

id objc_msgSend_service_nearbyDevicesChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "service:nearbyDevicesChanged:");
}

id objc_msgSend_serviceMaskOperator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceMaskOperator");
}

id objc_msgSend_serviceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceUUID");
}

id objc_msgSend_serviceWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serviceWithIdentifier:completion:");
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "services");
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "session");
}

id objc_msgSend_sessionAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionAttributes");
}

id objc_msgSend_sessionEndPowerLog_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionEndPowerLog:");
}

id objc_msgSend_sessionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionForClient:");
}

id objc_msgSend_sessionForFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionForFence:");
}

id objc_msgSend_sessionHrRecovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionHrRecovery");
}

id objc_msgSend_sessionID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionID");
}

id objc_msgSend_sessionId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionId");
}

id objc_msgSend_sessionIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionIdentifier");
}

id objc_msgSend_sessionMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionMetadata");
}

id objc_msgSend_sessionStalenessInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStalenessInterval");
}

id objc_msgSend_sessionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionState");
}

id objc_msgSend_sessionStatusReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionStatusReport:");
}

id objc_msgSend_sessionTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionTimer");
}

id objc_msgSend_sessionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionType");
}

id objc_msgSend_sessionVo2Max(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionVo2Max");
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set");
}

id objc_msgSend_setAbsoluteWildModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAbsoluteWildModeConfigurationTaskWithConfiguration:");
}

id objc_msgSend_setAccelSampleRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccelSampleRate:");
}

id objc_msgSend_setAccelerometerOrientationModeConfigurationCommandWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccelerometerOrientationModeConfigurationCommandWithConfiguration:");
}

id objc_msgSend_setAccelerometerOrientationModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccelerometerOrientationModeConfigurationTaskWithConfiguration:");
}

id objc_msgSend_setAccelerometerSlopeModeConfigurationCommandWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccelerometerSlopeModeConfigurationCommandWithConfiguration:");
}

id objc_msgSend_setAccelerometerSlopeModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccelerometerSlopeModeConfigurationTaskWithConfiguration:");
}

id objc_msgSend_setAccessoryCapabilities_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryCapabilities:");
}

id objc_msgSend_setAccessoryCategory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryCategory:");
}

id objc_msgSend_setAccessoryMeta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryMeta:");
}

id objc_msgSend_setAccessoryName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryName:");
}

id objc_msgSend_setAccessoryUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccessoryUUID:");
}

id objc_msgSend_setAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccount:");
}

id objc_msgSend_setAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAccuracy:");
}

id objc_msgSend_setActionSetName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionSetName:");
}

id objc_msgSend_setActionSetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionSetType:");
}

id objc_msgSend_setActionSetUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActionSetUUID:");
}

id objc_msgSend_setActions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActions:");
}

id objc_msgSend_setActiveAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveAccessory:");
}

id objc_msgSend_setActiveClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveClients:");
}

id objc_msgSend_setActiveConnectionAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveConnectionAttempt:");
}

id objc_msgSend_setActiveDeviceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveDeviceId:");
}

id objc_msgSend_setActiveDeviceNearbyStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveDeviceNearbyStatus:");
}

id objc_msgSend_setActiveDisplayModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveDisplayModes:");
}

id objc_msgSend_setActivePairingID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivePairingID:");
}

id objc_msgSend_setActivePeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivePeripheral:");
}

id objc_msgSend_setActivePeripheral_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivePeripheral:withError:");
}

id objc_msgSend_setActivePeripheralMaterial_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivePeripheralMaterial:");
}

id objc_msgSend_setActivePeripheralReady_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivePeripheralReady:");
}

id objc_msgSend_setActiveRequestCleanupTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveRequestCleanupTimer:");
}

id objc_msgSend_setActiveRequests_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveRequests:");
}

id objc_msgSend_setActiveTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveTask:");
}

id objc_msgSend_setActiveTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveTime:");
}

id objc_msgSend_setActiveVo2maxOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveVo2maxOverride:");
}

id objc_msgSend_setActiveWatchSyncSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActiveWatchSyncSession:");
}

id objc_msgSend_setActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivity:");
}

id objc_msgSend_setActivityAsDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityAsDone:");
}

id objc_msgSend_setActivityDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityDuration:");
}

id objc_msgSend_setActivityOverrideMsg_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityOverrideMsg:");
}

id objc_msgSend_setActivityType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setActivityType:");
}

id objc_msgSend_setAdamId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdamId:");
}

id objc_msgSend_setAdaptedNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdaptedNotifier:");
}

id objc_msgSend_setAdapter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdapter:");
}

id objc_msgSend_setAdjustedDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustedDistance:");
}

id objc_msgSend_setAdjustedDistanceToFenceBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdjustedDistanceToFenceBoundary:");
}

id objc_msgSend_setAdvertiseRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAdvertiseRate:");
}

id objc_msgSend_setAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAge:");
}

id objc_msgSend_setAgeRating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAgeRating:");
}

id objc_msgSend_setAggressiveAdvertisingTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAggressiveAdvertisingTimeout:");
}

id objc_msgSend_setAirplaneMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirplaneMode:");
}

id objc_msgSend_setAirplaneModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirplaneModeEnabled:");
}

id objc_msgSend_setAirplaySolo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAirplaySolo:");
}

id objc_msgSend_setAlarmId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlarmId:");
}

id objc_msgSend_setAlgorithmVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlgorithmVersion:");
}

id objc_msgSend_setAlignmentUncertainty_atIndex_date_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlignmentUncertainty:atIndex:date:forBeacon:completion:");
}

id objc_msgSend_setAlignmentUncertainty_atIndex_date_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlignmentUncertainty:atIndex:date:forDevice:");
}

id objc_msgSend_setAliveAgainThrottleTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAliveAgainThrottleTimer:");
}

id objc_msgSend_setAllDayHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllDayHeartRate:");
}

id objc_msgSend_setAllMaterials_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllMaterials:");
}

id objc_msgSend_setAllSessions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllSessions:");
}

id objc_msgSend_setAllSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllSuccess:");
}

id objc_msgSend_setAllowNetworkTileLoad_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowNetworkTileLoad:");
}

id objc_msgSend_setAllowOfflineData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowOfflineData:");
}

id objc_msgSend_setAllowStaleData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowStaleData:");
}

id objc_msgSend_setAllowableAuthorizationMask_forClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowableAuthorizationMask:forClientKey:");
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsCellularAccess:");
}

id objc_msgSend_setAllowsExpensiveAccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAllowsExpensiveAccess:");
}

id objc_msgSend_setAlternateIdentitiesMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlternateIdentitiesMap:");
}

id objc_msgSend_setAltimeterReleaseTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltimeterReleaseTimer");
}

id objc_msgSend_setAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltitude:");
}

id objc_msgSend_setAltitudeHAEM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltitudeHAEM:");
}

id objc_msgSend_setAltitudeHAEUncM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAltitudeHAEUncM:");
}

id objc_msgSend_setAlwaysBeaconWildState_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAlwaysBeaconWildState:completion:");
}

id objc_msgSend_setAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAnalyticsManager:");
}

id objc_msgSend_setApHarvestCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApHarvestCount:");
}

id objc_msgSend_setAppBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppBundleId:");
}

id objc_msgSend_setAppBundleIdIndices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppBundleIdIndices:");
}

id objc_msgSend_setAppBundleIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppBundleIds:");
}

id objc_msgSend_setAppState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAppState:");
}

id objc_msgSend_setApplicableTimeSec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApplicableTimeSec:");
}

id objc_msgSend_setApsConnectionMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsConnectionMachServiceName:");
}

id objc_msgSend_setApsMachServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setApsMachServiceName:");
}

id objc_msgSend_setArSessionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArSessionActive:");
}

id objc_msgSend_setArchive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArchive:");
}

id objc_msgSend_setAreLocationAccessoriesEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAreLocationAccessoriesEnabled:");
}

id objc_msgSend_setArfcn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArfcn:");
}

id objc_msgSend_setArgument_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArgument:atIndex:");
}

id objc_msgSend_setArmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArmed:");
}

id objc_msgSend_setArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:");
}

id objc_msgSend_setArray_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:forKey:");
}

id objc_msgSend_setArray_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setArray:forKey:atKeyPath:");
}

id objc_msgSend_setAssertionDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssertionDuration:");
}

id objc_msgSend_setAssetData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetData:");
}

id objc_msgSend_setAssetDataCRC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetDataCRC:");
}

id objc_msgSend_setAssetPacketizerQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetPacketizerQueue:");
}

id objc_msgSend_setAssetTargetHeader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetTargetHeader:");
}

id objc_msgSend_setAssetType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssetType:");
}

id objc_msgSend_setAssociatedStoreIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedStoreIds:");
}

id objc_msgSend_setAssociatedTo2GHzWiFi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAssociatedTo2GHzWiFi:");
}

id objc_msgSend_setAttitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttitude:");
}

id objc_msgSend_setAttribute_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttribute:forKey:error:");
}

id objc_msgSend_setAttributes_ofItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributes:ofItemAtPath:error:");
}

id objc_msgSend_setAttributionIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributionIdentifier:");
}

id objc_msgSend_setAttributionTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAttributionTimer:");
}

id objc_msgSend_setAuthHeaderValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthHeaderValue:");
}

id objc_msgSend_setAuthMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthMask:");
}

id objc_msgSend_setAuthSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthSession:");
}

id objc_msgSend_setAuthStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthStatus:");
}

id objc_msgSend_setAuthSyncStoreState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthSyncStoreState:");
}

id objc_msgSend_setAuthorizationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorizationContext:");
}

id objc_msgSend_setAuthorized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAuthorized:");
}

id objc_msgSend_setAvailabilityTiles_withZScoreConfidenceInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAvailabilityTiles:withZScoreConfidenceInterval:");
}

id objc_msgSend_setAverageRSRP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAverageRSRP:");
}

id objc_msgSend_setAverageSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setAverageSpeed:");
}

id objc_msgSend_setBackgrounded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBackgrounded:");
}

id objc_msgSend_setBandInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBandInfo:");
}

id objc_msgSend_setBandclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBandclass:");
}

id objc_msgSend_setBandwidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBandwidth:");
}

id objc_msgSend_setBaroCalibrationIndication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBaroCalibrationIndication:");
}

id objc_msgSend_setBarometricAltitudeAWDData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarometricAltitudeAWDData:");
}

id objc_msgSend_setBarometricAltitudeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBarometricAltitudeData:");
}

id objc_msgSend_setBatteryData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatteryData:");
}

id objc_msgSend_setBatterySaverModeEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatterySaverModeEnabled:");
}

id objc_msgSend_setBatteryStatusTaskWithBatteryStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBatteryStatusTaskWithBatteryStatus:");
}

id objc_msgSend_setBeacon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBeacon:");
}

id objc_msgSend_setBetaBlockerUse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBetaBlockerUse:");
}

id objc_msgSend_setBiasInMeters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBiasInMeters:");
}

id objc_msgSend_setBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBins:");
}

id objc_msgSend_setBleRSSIThresholdHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleRSSIThresholdHint:");
}

id objc_msgSend_setBleScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleScanRate:");
}

id objc_msgSend_setBleScanRateScreenOff_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBleScanRateScreenOff:");
}

id objc_msgSend_setBlockUpdateIsCycling_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBlockUpdateIsCycling:");
}

id objc_msgSend_setBluetoothPhyStatisticsNotifications_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBluetoothPhyStatisticsNotifications:options:");
}

id objc_msgSend_setBluetoothStateChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBluetoothStateChangedHandler:");
}

id objc_msgSend_setBodyMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBodyMetrics:");
}

id objc_msgSend_setBomScanEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBomScanEnabled:");
}

id objc_msgSend_setBool_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBool:forKey:atKeyPath:");
}

id objc_msgSend_setBoutClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBoutClients:");
}

id objc_msgSend_setBsLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBsLatitude:");
}

id objc_msgSend_setBsLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBsLongitude:");
}

id objc_msgSend_setBsid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBsid:");
}

id objc_msgSend_setBufferedDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBufferedDevices:");
}

id objc_msgSend_setBundleId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleId:");
}

id objc_msgSend_setBundleIds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleIds:");
}

id objc_msgSend_setBwpSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBwpSupport:");
}

id objc_msgSend_setBypassSupportedMessageModesCheck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBypassSupportedMessageModesCheck:");
}

id objc_msgSend_setCachedPlaceInferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCachedPlaceInferences:");
}

id objc_msgSend_setCadence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCadence:");
}

id objc_msgSend_setCadenceMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCadenceMean:");
}

id objc_msgSend_setCalTrackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalTrackHandler:");
}

id objc_msgSend_setCalendar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalendar:");
}

id objc_msgSend_setCalibratedPressurePa_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalibratedPressurePa:");
}

id objc_msgSend_setCalibratedPressureUncPa_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalibratedPressureUncPa:");
}

id objc_msgSend_setCalibrationTrackCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalibrationTrackCallback:");
}

id objc_msgSend_setCallbackAdapter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallbackAdapter:");
}

id objc_msgSend_setCallbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCallbackHandler:");
}

id objc_msgSend_setCalorieData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalorieData:");
}

id objc_msgSend_setCalorieDataDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCalorieDataDeprecated:");
}

id objc_msgSend_setCanDownloadOverCelullar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCanDownloadOverCelullar:");
}

id objc_msgSend_setCapabilityChangeClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCapabilityChangeClients:");
}

id objc_msgSend_setCarryingItems_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCarryingItems:");
}

id objc_msgSend_setCbManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCbManager:");
}

id objc_msgSend_setCdmaCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCdmaCellTowers:");
}

id objc_msgSend_setCdmaEvdoTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCdmaEvdoTowers:");
}

id objc_msgSend_setCellAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellAvailable:");
}

id objc_msgSend_setCellID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellID:");
}

id objc_msgSend_setCellLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellLatitude:");
}

id objc_msgSend_setCellLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellLongitude:");
}

id objc_msgSend_setCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellTowers:");
}

id objc_msgSend_setCelltype_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCelltype:");
}

id objc_msgSend_setCellularBand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellularBand:");
}

id objc_msgSend_setCellularRAT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCellularRAT:");
}

id objc_msgSend_setCentralReferenceTimeCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCentralReferenceTimeCommand");
}

id objc_msgSend_setCentralReferenceTimeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCentralReferenceTimeTask");
}

id objc_msgSend_setCfAbsoluteTimeS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCfAbsoluteTimeS:");
}

id objc_msgSend_setChangeFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeFlags:");
}

id objc_msgSend_setChangeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChangeType:");
}

id objc_msgSend_setChannel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChannel:");
}

id objc_msgSend_setCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristic:");
}

id objc_msgSend_setCharacteristicType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristicType:");
}

id objc_msgSend_setCharacteristicUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCharacteristicUUID:");
}

id objc_msgSend_setChoreaDetectionService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setChoreaDetectionService:");
}

id objc_msgSend_setCi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCi:");
}

id objc_msgSend_setCkp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCkp:");
}

id objc_msgSend_setClass_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClass:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setClearClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClearClient:");
}

id objc_msgSend_setClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClient:");
}

id objc_msgSend_setClientActivityTypeAirborneActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientActivityTypeAirborneActive:");
}

id objc_msgSend_setClientActivityTypeFitnessActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientActivityTypeFitnessActive:");
}

id objc_msgSend_setClientAuthDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientAuthDate:");
}

id objc_msgSend_setClientAuthorization_zoneIdentifier_subIdentityIdentifier_status_correctiveCompensation_mayIncreaseAuth_entity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientAuthorization:zoneIdentifier:subIdentityIdentifier:status:correctiveCompensation:mayIncreaseAuth:entity:");
}

id objc_msgSend_setClientAuthorizationCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientAuthorizationCache:");
}

id objc_msgSend_setClientBackgroundIndicator_enabled_entity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientBackgroundIndicator:enabled:entity:");
}

id objc_msgSend_setClientIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientIdentifier:");
}

id objc_msgSend_setClientInterest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientInterest:");
}

id objc_msgSend_setClientKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientKey:");
}

id objc_msgSend_setClientKeyToAuthContextMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientKeyToAuthContextMap:");
}

id objc_msgSend_setClientKeyToClientInfoMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientKeyToClientInfoMap:");
}

id objc_msgSend_setClientManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientManager:");
}

id objc_msgSend_setClientMapMatchingActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientMapMatchingActive:");
}

id objc_msgSend_setClientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientName:");
}

id objc_msgSend_setClientRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientRegistry:");
}

id objc_msgSend_setClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:");
}

id objc_msgSend_setClients_locationPushTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:locationPushTo:");
}

id objc_msgSend_setClients_significantLocationChangeTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:significantLocationChangeTo:");
}

id objc_msgSend_setClients_significantLocationVisitTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:significantLocationVisitTo:");
}

id objc_msgSend_setClients_transcriptSessionChangeTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClients:transcriptSessionChangeTo:");
}

id objc_msgSend_setClientsAuthorizationMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientsAuthorizationMap:");
}

id objc_msgSend_setClientsInSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClientsInSession:");
}

id objc_msgSend_setCloudKitContainerOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCloudKitContainerOptions:");
}

id objc_msgSend_setCmAttitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCmAttitude:");
}

id objc_msgSend_setCmPedometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCmPedometer:");
}

id objc_msgSend_setCoarseCoordinatesFromDefaultsWriteEntry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoarseCoordinatesFromDefaultsWriteEntry");
}

id objc_msgSend_setCoarseElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoarseElevation:");
}

id objc_msgSend_setCoarseElevationDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCoarseElevationDeprecated:");
}

id objc_msgSend_setCollectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCollectionType:");
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCommand:");
}

id objc_msgSend_setCompanionPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompanionPeripheral:");
}

id objc_msgSend_setCompanionSyncActivityAsDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCompanionSyncActivityAsDone:");
}

id objc_msgSend_setConditionLimitExceeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConditionLimitExceeded:");
}

id objc_msgSend_setConditionUnsupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConditionUnsupported:");
}

id objc_msgSend_setConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConfidence:");
}

id objc_msgSend_setConformanceMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConformanceMode:");
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnection:");
}

id objc_msgSend_setConnectionAttemptCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionAttemptCount:");
}

id objc_msgSend_setConnectionReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionReason:");
}

id objc_msgSend_setConnectionStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionStatus:");
}

id objc_msgSend_setConnectionUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setConnectionUpdateHandler:");
}

id objc_msgSend_setContainerOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContainerOptions:");
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setContext:");
}

id objc_msgSend_setControlFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setControlFlags:");
}

id objc_msgSend_setController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setController:");
}

id objc_msgSend_setCorrectiveCompensationMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCorrectiveCompensationMask:");
}

id objc_msgSend_setCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCount:");
}

id objc_msgSend_setCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCountryCode:");
}

id objc_msgSend_setCourse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCourse:");
}

id objc_msgSend_setCourseAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCourseAccuracy:");
}

id objc_msgSend_setCppObjectPtr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCppObjectPtr:");
}

id objc_msgSend_setCsgId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCsgId:");
}

id objc_msgSend_setCsgIndication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCsgIndication:");
}

id objc_msgSend_setCumulativeStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCumulativeStartTime:");
}

id objc_msgSend_setCurrentAssetPacketizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentAssetPacketizer:");
}

id objc_msgSend_setCurrentDCAwareValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentDCAwareValue:");
}

id objc_msgSend_setCurrentEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentEstimate:");
}

id objc_msgSend_setCurrentGranularity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentGranularity:");
}

id objc_msgSend_setCurrentIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentIndex:");
}

id objc_msgSend_setCurrentKeyIndex_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentKeyIndex:forDevice:");
}

id objc_msgSend_setCurrentLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLatitude:");
}

id objc_msgSend_setCurrentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLocation:");
}

id objc_msgSend_setCurrentLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentLongitude:");
}

id objc_msgSend_setCurrentPowerLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentPowerLevel:");
}

id objc_msgSend_setCurrentSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSpeed:");
}

id objc_msgSend_setCurrentState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentState:");
}

id objc_msgSend_setCurrentSyncSessionCollidedWithResetSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentSyncSessionCollidedWithResetSync:");
}

id objc_msgSend_setCurrentThermalLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentThermalLevel:");
}

id objc_msgSend_setCurrentThermalLevelStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentThermalLevelStartTime:");
}

id objc_msgSend_setCurrentVisitHorizontalUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentVisitHorizontalUncertainty:");
}

id objc_msgSend_setCurrentVisitLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentVisitLocation:");
}

id objc_msgSend_setCurrentWPState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWPState:");
}

id objc_msgSend_setCurrentWildKeyIndex_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWildKeyIndex:forBeacon:completion:");
}

id objc_msgSend_setCurrentWildKeyIndex_forDevice_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWildKeyIndex:forDevice:forEvent:");
}

id objc_msgSend_setCurrentWorkoutType_isManualTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentWorkoutType:isManualTransition:");
}

id objc_msgSend_setCurrentlyScheduled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentlyScheduled:");
}

id objc_msgSend_setCurrentpeakPowerStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setCurrentpeakPowerStartTime:");
}

id objc_msgSend_setD2vtecDphi2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setD2vtecDphi2:");
}

id objc_msgSend_setD2vtecDtheta2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setD2vtecDtheta2:");
}

id objc_msgSend_setD2vtecDthetaphi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setD2vtecDthetaphi:");
}

id objc_msgSend_setDEPRECATEDFingerprints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDEPRECATEDFingerprints:");
}

id objc_msgSend_setDaemonCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemonCondition:");
}

id objc_msgSend_setDaemonControl_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemonControl:");
}

id objc_msgSend_setDaemonEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDaemonEvent:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:");
}

id objc_msgSend_setData_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:forKey:atKeyPath:");
}

id objc_msgSend_setDataIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataIdentifier:");
}

id objc_msgSend_setDataPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataPayload:");
}

id objc_msgSend_setDataSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSize:");
}

id objc_msgSend_setDataSubType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDataSubType:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDateStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateStyle:");
}

id objc_msgSend_setDay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDay:");
}

id objc_msgSend_setDayLightSavings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDayLightSavings:");
}

id objc_msgSend_setDebounceTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebounceTimer:");
}

id objc_msgSend_setDebugIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDebugIdentifier:");
}

id objc_msgSend_setDeepEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeepEnabled:");
}

id objc_msgSend_setDeepestDepthForHK_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeepestDepthForHK:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setDelegate_queue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:queue:");
}

id objc_msgSend_setDelegateEntityName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateEntityName:");
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegateQueue:");
}

id objc_msgSend_setDeltaDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaDistance:");
}

id objc_msgSend_setDeltaDistanceAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaDistanceAccuracy:");
}

id objc_msgSend_setDeltaElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaElevation:");
}

id objc_msgSend_setDeltaPositionX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaPositionX:");
}

id objc_msgSend_setDeltaPositionY_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaPositionY:");
}

id objc_msgSend_setDeltaPositionZ_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaPositionZ:");
}

id objc_msgSend_setDeltaSyncObjectsInCompanionQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaSyncObjectsInCompanionQueue:");
}

id objc_msgSend_setDeltaSyncObjectsInGizmoQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaSyncObjectsInGizmoQueue:");
}

id objc_msgSend_setDeltaVelocityX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaVelocityX:");
}

id objc_msgSend_setDeltaVelocityY_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaVelocityY:");
}

id objc_msgSend_setDeltaVelocityZ_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeltaVelocityZ:");
}

id objc_msgSend_setDeploymentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeploymentType:");
}

id objc_msgSend_setDepth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDepth:");
}

id objc_msgSend_setDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredAccuracy:");
}

id objc_msgSend_setDesiredConnectionLatency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredConnectionLatency");
}

id objc_msgSend_setDesiredConnectionLatency_forPeripheral_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredConnectionLatency:forPeripheral:completion:");
}

id objc_msgSend_setDesiredEnablementState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDesiredEnablementState:");
}

id objc_msgSend_setDestinationAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationAddress:");
}

id objc_msgSend_setDestinationDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinationDevice:");
}

id objc_msgSend_setDestinations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDestinations:");
}

id objc_msgSend_setDeviceChangedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceChangedHandler:");
}

id objc_msgSend_setDeviceDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceDelegate:");
}

id objc_msgSend_setDeviceFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFilter:");
}

id objc_msgSend_setDeviceFoundHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceFoundHandler:");
}

id objc_msgSend_setDeviceJourneyCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceJourneyCount:");
}

id objc_msgSend_setDeviceLostHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceLostHandler:");
}

id objc_msgSend_setDeviceMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceMatching:");
}

id objc_msgSend_setDeviceNotificationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceNotificationHandler:");
}

id objc_msgSend_setDeviceObservationDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceObservationDelegate:");
}

id objc_msgSend_setDevicePressurePa_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevicePressurePa:");
}

id objc_msgSend_setDevicePressureUncPa_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevicePressureUncPa:");
}

id objc_msgSend_setDeviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceType:");
}

id objc_msgSend_setDeviceTypes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceTypes:");
}

id objc_msgSend_setDeviceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDeviceUUID:");
}

id objc_msgSend_setDevicesBufferedHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDevicesBufferedHandler:");
}

id objc_msgSend_setDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:");
}

id objc_msgSend_setDictionary_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDictionary:forKey:atKeyPath:");
}

id objc_msgSend_setDidUpdateFireTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidUpdateFireTime:");
}

id objc_msgSend_setDidWake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDidWake:");
}

id objc_msgSend_setDimensionInt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDimensionInt:");
}

id objc_msgSend_setDirectionOfTravelAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirectionOfTravelAssistance:");
}

id objc_msgSend_setDirty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDirty:");
}

id objc_msgSend_setDisableSystemWaking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisableSystemWaking:");
}

id objc_msgSend_setDisconnectHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnectHandler:");
}

id objc_msgSend_setDisconnectionReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisconnectionReason:");
}

id objc_msgSend_setDiscoveryFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscoveryFlags:");
}

id objc_msgSend_setDiscretionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDiscretionary:");
}

id objc_msgSend_setDispatchQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDispatchQueue:");
}

id objc_msgSend_setDisplayStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDisplayStyle:");
}

id objc_msgSend_setDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistance:");
}

id objc_msgSend_setDistanceFromNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistanceFromNMinusOneStateChange:");
}

id objc_msgSend_setDistanceFromNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistanceFromNMinusTwoStateChange:");
}

id objc_msgSend_setDistanceGps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistanceGps:");
}

id objc_msgSend_setDistanceRawPed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistanceRawPed:");
}

id objc_msgSend_setDistanceToFenceBoundary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDistanceToFenceBoundary:");
}

id objc_msgSend_setDoNotBlockBeforeFirstUnlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDoNotBlockBeforeFirstUnlock:");
}

id objc_msgSend_setDominantMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDominantMotionActivity:");
}

id objc_msgSend_setDominantMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDominantMotionState:");
}

id objc_msgSend_setDouble_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDouble:forKey:atKeyPath:");
}

id objc_msgSend_setDownlinkBandwidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDownlinkBandwidth:");
}

id objc_msgSend_setDstPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDstPort:");
}

id objc_msgSend_setDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDuration:");
}

id objc_msgSend_setDurationInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDurationInSeconds:");
}

id objc_msgSend_setDurianNonOwnerPreciseFindingCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDurianNonOwnerPreciseFindingCharacteristic:");
}

id objc_msgSend_setDvtecDphi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDvtecDphi:");
}

id objc_msgSend_setDvtecDtheta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDvtecDtheta:");
}

id objc_msgSend_setE911Active_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setE911Active:");
}

id objc_msgSend_setEcn0_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEcn0:");
}

id objc_msgSend_setEffectiveRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEffectiveRadius:");
}

id objc_msgSend_setEffectiveRadiusMetersIfInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEffectiveRadiusMetersIfInstalled:");
}

id objc_msgSend_setElevation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevation:");
}

id objc_msgSend_setElevationAscended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevationAscended:");
}

id objc_msgSend_setElevationDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevationDeprecated:");
}

id objc_msgSend_setElevationDescended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setElevationDescended:");
}

id objc_msgSend_setEligibleForCalorimetry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEligibleForCalorimetry:");
}

id objc_msgSend_setEligibleForDataCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEligibleForDataCollection:");
}

id objc_msgSend_setEligibleForHealthKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEligibleForHealthKit:");
}

id objc_msgSend_setEmergencyEnablementAssertionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEmergencyEnablementAssertionActive:");
}

id objc_msgSend_setEnableCriticalReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnableCriticalReliability:");
}

id objc_msgSend_setEnabledTopics_ignoredTopics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnabledTopics:ignoredTopics:");
}

id objc_msgSend_setEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEnd:");
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndDate:");
}

id objc_msgSend_setEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndTime:");
}

id objc_msgSend_setEndpoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndpoint:");
}

id objc_msgSend_setEndpointSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEndpointSelector:");
}

id objc_msgSend_setEntity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntity:");
}

id objc_msgSend_setEntryRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEntryRadius:");
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setError:");
}

id objc_msgSend_setErrorQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setErrorQueue:");
}

id objc_msgSend_setEstExitTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstExitTime:");
}

id objc_msgSend_setEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimate:");
}

id objc_msgSend_setEstimatedHRRecoveryParam_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedHRRecoveryParam:");
}

id objc_msgSend_setEstimatedHRResponseParam_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedHRResponseParam:");
}

id objc_msgSend_setEstimatedMeanSeaLevelPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedMeanSeaLevelPressure:");
}

id objc_msgSend_setEstimatedStateProbabilityOutdoor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedStateProbabilityOutdoor:");
}

id objc_msgSend_setEstimatedUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedUncertainty:");
}

id objc_msgSend_setEstimatedVo2Max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatedVo2Max:");
}

id objc_msgSend_setEstimatorAgeSec_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEstimatorAgeSec:");
}

id objc_msgSend_setEvaluator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEvaluator:");
}

id objc_msgSend_setEventHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventHandler:");
}

id objc_msgSend_setEventLatency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventLatency:");
}

id objc_msgSend_setEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventType:");
}

id objc_msgSend_setEventTypeNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventTypeNMinusOneStateChange:");
}

id objc_msgSend_setEventTypeNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEventTypeNMinusTwoStateChange:");
}

id objc_msgSend_setExerciseMinute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExerciseMinute:");
}

id objc_msgSend_setExitRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitRadius:");
}

id objc_msgSend_setExitState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitState:");
}

id objc_msgSend_setExitVisitTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExitVisitTimestamp:");
}

id objc_msgSend_setExpectsResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExpectsResponse:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setF01_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setF01:");
}

id objc_msgSend_setFADR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFADR:");
}

id objc_msgSend_setFAggregateRecordsTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFAggregateRecordsTimer:");
}

id objc_msgSend_setFCarrierBundleChangeCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFCarrierBundleChangeCb:");
}

id objc_msgSend_setFCellInfoCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFCellInfoCb:");
}

id objc_msgSend_setFCovariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFCovariance:");
}

id objc_msgSend_setFDataStatusCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFDataStatusCb:");
}

id objc_msgSend_setFDefaultBundleChangeCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFDefaultBundleChangeCb:");
}

id objc_msgSend_setFDisplayStatusCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFDisplayStatusCb:");
}

id objc_msgSend_setFEmergModeCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFEmergModeCb:");
}

id objc_msgSend_setFEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFEndTime:");
}

id objc_msgSend_setFH_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFH:");
}

id objc_msgSend_setFImsRegStatusCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFImsRegStatusCb:");
}

id objc_msgSend_setFIsRegisteredForTileDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFIsRegisteredForTileDownload:");
}

id objc_msgSend_setFLinkQualityCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFLinkQualityCb:");
}

id objc_msgSend_setFLocationCoordinates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFLocationCoordinates:");
}

id objc_msgSend_setFLocationHorizontalUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFLocationHorizontalUncertainty:");
}

id objc_msgSend_setFNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFNextTrackStartTime:");
}

id objc_msgSend_setFNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFNotification:");
}

id objc_msgSend_setFOperatorBundleChangeCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFOperatorBundleChangeCb:");
}

id objc_msgSend_setFP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFP:");
}

id objc_msgSend_setFPal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFPal:");
}

id objc_msgSend_setFPhoneNumberInfoCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFPhoneNumberInfoCb:");
}

id objc_msgSend_setFQ_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFQ:");
}

id objc_msgSend_setFSensorRecorderQueryTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSensorRecorderQueryTimer:");
}

id objc_msgSend_setFSensorRecorderSubscribeTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSensorRecorderSubscribeTimer:");
}

id objc_msgSend_setFServingCellChangedCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFServingCellChangedCb:");
}

id objc_msgSend_setFServingNetworkChangedCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFServingNetworkChangedCb:");
}

id objc_msgSend_setFSimStatusCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSimStatusCb:");
}

id objc_msgSend_setFSmsSentCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSmsSentCb:");
}

id objc_msgSend_setFSpectatingLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSpectatingLocation:");
}

id objc_msgSend_setFStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFStartTime:");
}

id objc_msgSend_setFState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFState:");
}

id objc_msgSend_setFStewieSupportChangedCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFStewieSupportChangedCb:");
}

id objc_msgSend_setFSubscriberMccCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSubscriberMccCb:");
}

id objc_msgSend_setFSubscriptionInfoCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSubscriptionInfoCb:");
}

id objc_msgSend_setFSuplSmsCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFSuplSmsCb:");
}

id objc_msgSend_setFTandemCapabilityChangeCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFTandemCapabilityChangeCb:");
}

id objc_msgSend_setFType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFType:");
}

id objc_msgSend_setFVoiceLinkQualityCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFVoiceLinkQualityCb:");
}

id objc_msgSend_setFeelsLikeTemperature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFeelsLikeTemperature:");
}

id objc_msgSend_setFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFence");
}

id objc_msgSend_setFence_forClient_withRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFence:forClient:withRadius:");
}

id objc_msgSend_setFenceAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceAnalyticsManager:");
}

id objc_msgSend_setFenceCategoryType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceCategoryType:");
}

id objc_msgSend_setFenceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceID:");
}

id objc_msgSend_setFenceIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceIdentifier:");
}

id objc_msgSend_setFenceRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceRadius:");
}

id objc_msgSend_setFenceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFenceType:");
}

id objc_msgSend_setFileHandleForReadWrite_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFileHandleForReadWrite:");
}

id objc_msgSend_setFilteredPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilteredPressure:");
}

id objc_msgSend_setFilteredVo2Max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFilteredVo2Max:");
}

id objc_msgSend_setFindMyAppDidBackgroundOrExitHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFindMyAppDidBackgroundOrExitHandler:");
}

id objc_msgSend_setFingerprints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFingerprints:");
}

id objc_msgSend_setFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFinished:");
}

id objc_msgSend_setFireInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFireInterval:");
}

id objc_msgSend_setFiredTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFiredTime:");
}

id objc_msgSend_setFirmwareDownloadAssetsCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirmwareDownloadAssetsCharacteristic:");
}

id objc_msgSend_setFirmwareDownloadAssetsReadyCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirmwareDownloadAssetsReadyCharacteristic:");
}

id objc_msgSend_setFirmwareDownloadCommandCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirmwareDownloadCommandCharacteristic:");
}

id objc_msgSend_setFirmwareVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirmwareVersion:");
}

id objc_msgSend_setFirstRefreshAfterVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstRefreshAfterVisit:");
}

id objc_msgSend_setFirstStepTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirstStepTime:");
}

id objc_msgSend_setFirwmareDownloadStatusCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFirwmareDownloadStatusCharacteristic:");
}

id objc_msgSend_setFitnessTracking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFitnessTracking:");
}

id objc_msgSend_setFitnessTrackingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFitnessTrackingEnabled:");
}

id objc_msgSend_setFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlags:");
}

id objc_msgSend_setFlipNegativeTravelDirectionRoads_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFlipNegativeTravelDirectionRoads:");
}

id objc_msgSend_setFloor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFloor:");
}

id objc_msgSend_setFloorsAscended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFloorsAscended:");
}

id objc_msgSend_setFloorsDescended_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFloorsDescended:");
}

id objc_msgSend_setForceReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setForceReason:");
}

id objc_msgSend_setFormatterBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFormatterBehavior:");
}

id objc_msgSend_setFprefDataSimChangedCb_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFprefDataSimChangedCb:");
}

id objc_msgSend_setFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFrequency:");
}

id objc_msgSend_setFromOwnerDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFromOwnerDevice:");
}

id objc_msgSend_setFullPathForSyncState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullPathForSyncState:");
}

id objc_msgSend_setFullSessionTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullSessionTimeout:");
}

id objc_msgSend_setFullSyncObjectsInCompanionQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullSyncObjectsInCompanionQueue:");
}

id objc_msgSend_setFullSyncObjectsInGizmoQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setFullSyncObjectsInGizmoQueue:");
}

id objc_msgSend_setGalileo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGalileo:");
}

id objc_msgSend_setGender_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGender:");
}

id objc_msgSend_setGeoReferenceFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeoReferenceFrame:");
}

id objc_msgSend_setGeodeticAltitudeM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeodeticAltitudeM:");
}

id objc_msgSend_setGeofenceAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGeofenceAtLocation:");
}

id objc_msgSend_setGetStartLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGetStartLocation:");
}

id objc_msgSend_setGlobalConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlobalConfiguration:");
}

id objc_msgSend_setGlonass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGlonass:");
}

id objc_msgSend_setGps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGps:");
}

id objc_msgSend_setGpsAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsAltitude:");
}

id objc_msgSend_setGpsAssistanceRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsAssistanceRequested:");
}

id objc_msgSend_setGpsAssistantHasClients_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsAssistantHasClients:forNotification:");
}

id objc_msgSend_setGpsCourseAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsCourseAccuracy:");
}

id objc_msgSend_setGpsCourseRadians_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsCourseRadians:");
}

id objc_msgSend_setGpsFusionRequested_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsFusionRequested:");
}

id objc_msgSend_setGpsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsSource:");
}

id objc_msgSend_setGpsSpeedAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGpsSpeedAccuracy:");
}

id objc_msgSend_setGrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGrade:");
}

id objc_msgSend_setGradeMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradeMean:");
}

id objc_msgSend_setGradeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradeType:");
}

id objc_msgSend_setGradeVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradeVariance:");
}

id objc_msgSend_setGradient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGradient:");
}

id objc_msgSend_setGroundAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroundAltitude:");
}

id objc_msgSend_setGroundAltitudeUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroundAltitudeUncertainty:");
}

id objc_msgSend_setGroupIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupIdentifier:");
}

id objc_msgSend_setGroupMaintDelta_forUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGroupMaintDelta:forUUID:");
}

id objc_msgSend_setGscn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGscn:");
}

id objc_msgSend_setGymLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGymLocations:");
}

id objc_msgSend_setGyroSampleRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setGyroSampleRate:");
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPBody:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHandler:");
}

id objc_msgSend_setHardwareType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHardwareType:");
}

id objc_msgSend_setHarvestingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHarvestingEnabled:");
}

id objc_msgSend_setHasAtLeastOneClientWithCLActivityTypeFitness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasAtLeastOneClientWithCLActivityTypeFitness:");
}

id objc_msgSend_setHasChangesAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasChangesAvailable");
}

id objc_msgSend_setHasExecutedScheduleFromCellularConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasExecutedScheduleFromCellularConnectivity:");
}

id objc_msgSend_setHasExecutedScheduleFromWifiConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasExecutedScheduleFromWifiConnectivity:");
}

id objc_msgSend_setHasGPS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasGPS:");
}

id objc_msgSend_setHasLoiAtFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasLoiAtFence:");
}

id objc_msgSend_setHasPreparedForFirmwareDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasPreparedForFirmwareDownload:");
}

id objc_msgSend_setHasRegisteredForCellularConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasRegisteredForCellularConnectivity:");
}

id objc_msgSend_setHasRegisteredForWifiConnectivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasRegisteredForWifiConnectivity:");
}

id objc_msgSend_setHasSentAssetData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasSentAssetData:");
}

id objc_msgSend_setHasSentCRCPacket_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasSentCRCPacket:");
}

id objc_msgSend_setHasSignificantPrior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasSignificantPrior:");
}

id objc_msgSend_setHasStrideCal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasStrideCal:");
}

id objc_msgSend_setHasWifiFallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHasWifiFallback:");
}

id objc_msgSend_setHashFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHashFunction:");
}

id objc_msgSend_setHawkeyeConfigurationCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyeConfigurationCharacteristic:");
}

id objc_msgSend_setHawkeyeDebugCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyeDebugCharacteristic:");
}

id objc_msgSend_setHawkeyeFirmwareUpdateCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyeFirmwareUpdateCharacteristic:");
}

id objc_msgSend_setHawkeyeNonOwnerCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyeNonOwnerCharacteristic:");
}

id objc_msgSend_setHawkeyeOpcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyeOpcode:");
}

id objc_msgSend_setHawkeyePairedOwnerInformationCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyePairedOwnerInformationCharacteristic:");
}

id objc_msgSend_setHawkeyePayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyePayload:");
}

id objc_msgSend_setHawkeyePreciseFindingCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyePreciseFindingCharacteristic:");
}

id objc_msgSend_setHawkeyeTestMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyeTestMode:");
}

id objc_msgSend_setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds_separatedUTBackoffTimeoutSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHawkeyeUTMotionConfigWithSeparatedUTTimeoutSeconds:separatedUTBackoffTimeoutSeconds:");
}

id objc_msgSend_setHeartRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeartRate:");
}

id objc_msgSend_setHeartRateRecoveryEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeartRateRecoveryEndTime:");
}

id objc_msgSend_setHeartRateRecoveryStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeartRateRecoveryStartTime:");
}

id objc_msgSend_setHeightM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeightM:");
}

id objc_msgSend_setHeroAppRankInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeroAppRankInstalled:");
}

id objc_msgSend_setHeroAppRankUnInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHeroAppRankUnInstalled:");
}

id objc_msgSend_setHgalCaptureMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHgalCaptureMode:");
}

id objc_msgSend_setHidDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidDevice:");
}

id objc_msgSend_setHidden_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHidden:");
}

id objc_msgSend_setHintForRegionState_significantRegion_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHintForRegionState:significantRegion:withReply:");
}

id objc_msgSend_setHmaxKm_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHmaxKm:");
}

id objc_msgSend_setHomeLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeLocations:");
}

id objc_msgSend_setHomeUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHomeUUID:");
}

id objc_msgSend_setHorizontalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalAccuracy:");
}

id objc_msgSend_setHorizontalUncM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorizontalUncM:");
}

id objc_msgSend_setHorzUncSemiMaj_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorzUncSemiMaj:");
}

id objc_msgSend_setHorzUncSemiMajAz_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorzUncSemiMajAz:");
}

id objc_msgSend_setHorzUncSemiMin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHorzUncSemiMin:");
}

id objc_msgSend_setHour_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHour:");
}

id objc_msgSend_setHr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHr:");
}

id objc_msgSend_setHrCadenceAgreementMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrCadenceAgreementMean:");
}

id objc_msgSend_setHrCadenceAgreementVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrCadenceAgreementVariance:");
}

id objc_msgSend_setHrConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrConfidence:");
}

id objc_msgSend_setHrConfidenceMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrConfidenceMean:");
}

id objc_msgSend_setHrConfidenceVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrConfidenceVariance:");
}

id objc_msgSend_setHrMax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrMax:");
}

id objc_msgSend_setHrMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrMean:");
}

id objc_msgSend_setHrMin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrMin:");
}

id objc_msgSend_setHrTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrTime:");
}

id objc_msgSend_setHrVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrVariance:");
}

id objc_msgSend_setHrmax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrmax:");
}

id objc_msgSend_setHrmin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHrmin:");
}

id objc_msgSend_setHronset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHronset:");
}

id objc_msgSend_setHttpRequestHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHttpRequestHeaders:");
}

id objc_msgSend_setIAPTimeSyncParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIAPTimeSyncParams:");
}

id objc_msgSend_setICloudManagedAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setICloudManagedAppleID:");
}

id objc_msgSend_setITunesManagedAppleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setITunesManagedAppleID:");
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdentifier:");
}

id objc_msgSend_setIdsOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsOptions:");
}

id objc_msgSend_setIdsService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsService:");
}

id objc_msgSend_setIdsStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIdsStatus:");
}

id objc_msgSend_setInOutdoorWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInOutdoorWorkout:");
}

id objc_msgSend_setInVisitStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInVisitStatus:");
}

id objc_msgSend_setIncidentalUseMode_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncidentalUseMode:forClient:");
}

id objc_msgSend_setIncludeRegionalApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIncludeRegionalApps:");
}

id objc_msgSend_setIndoorBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndoorBundle:");
}

id objc_msgSend_setIndoord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIndoord:");
}

id objc_msgSend_setInertialOdometry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInertialOdometry:");
}

id objc_msgSend_setInertialSamples_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInertialSamples:");
}

id objc_msgSend_setInformativeText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInformativeText:");
}

id objc_msgSend_setInitialResultsHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInitialResultsHandler:");
}

id objc_msgSend_setInputReportHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputReportHandler:");
}

id objc_msgSend_setInputs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInputs:");
}

id objc_msgSend_setInstalledEducationProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstalledEducationProfile:");
}

id objc_msgSend_setInstalledRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInstalledRegion:");
}

id objc_msgSend_setInt_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInt:forKey:");
}

id objc_msgSend_setInt_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInt:forKey:atKeyPath:");
}

id objc_msgSend_setInterestZones_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterestZones:");
}

id objc_msgSend_setInternalKeyMigrationComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInternalKeyMigrationComplete");
}

id objc_msgSend_setInterpPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterpPressure:");
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInterruptionHandler:");
}

id objc_msgSend_setIntervalOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalOverride:");
}

id objc_msgSend_setIntervalTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIntervalTimer:");
}

id objc_msgSend_setInvalid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalid:");
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInvalidationHandler:");
}

id objc_msgSend_setIsCalibratedBarometricAlt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCalibratedBarometricAlt:");
}

id objc_msgSend_setIsClassicallyConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsClassicallyConnected:");
}

id objc_msgSend_setIsConflictResolutionMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConflictResolutionMode:");
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConnected:");
}

id objc_msgSend_setIsConservativeEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsConservativeEntry:");
}

id objc_msgSend_setIsCorrectiveCompensationSupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsCorrectiveCompensationSupported:");
}

id objc_msgSend_setIsDeviceNearbyAndConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsDeviceNearbyAndConnected:");
}

id objc_msgSend_setIsEmergencyFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsEmergencyFence:");
}

id objc_msgSend_setIsFreeWake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFreeWake:");
}

id objc_msgSend_setIsFromLocationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsFromLocationController:");
}

id objc_msgSend_setIsHelperFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsHelperFence:");
}

id objc_msgSend_setIsInDisputedArea_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInDisputedArea:");
}

id objc_msgSend_setIsInVehicleNavigation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInVehicleNavigation:");
}

id objc_msgSend_setIsInitialCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsInitialCache:");
}

id objc_msgSend_setIsLimitedService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsLimitedService:");
}

id objc_msgSend_setIsLowPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsLowPower:");
}

id objc_msgSend_setIsMapMatched_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMapMatched:");
}

id objc_msgSend_setIsMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMeasurement:");
}

id objc_msgSend_setIsMonitoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMonitoring:");
}

id objc_msgSend_setIsMotorcycle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsMotorcycle:");
}

id objc_msgSend_setIsOutdoorContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsOutdoorContext:");
}

id objc_msgSend_setIsProactiveAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsProactiveAttempt:");
}

id objc_msgSend_setIsProactiveLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsProactiveLocation:");
}

id objc_msgSend_setIsProactiveLocationSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsProactiveLocationSession:");
}

id objc_msgSend_setIsQuickSwitchInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsQuickSwitchInProgress:");
}

id objc_msgSend_setIsQuickSwitchModeOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsQuickSwitchModeOn:");
}

id objc_msgSend_setIsSimPresent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSimPresent:");
}

id objc_msgSend_setIsStalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsStalled:");
}

id objc_msgSend_setIsStanding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsStanding:");
}

id objc_msgSend_setIsStreamingClientInFitnessSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsStreamingClientInFitnessSession:");
}

id objc_msgSend_setIsStroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsStroller:");
}

id objc_msgSend_setIsSubscribedForMotion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsSubscribedForMotion:");
}

id objc_msgSend_setIsThereAWatch_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsThereAWatch:");
}

id objc_msgSend_setIsThrottledFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsThrottledFence:");
}

id objc_msgSend_setIsVehicleConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setIsVehicleConnected:");
}

id objc_msgSend_setItemJourneyStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setItemJourneyStats:");
}

id objc_msgSend_setJacksonData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJacksonData:");
}

id objc_msgSend_setJourneyCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setJourneyCount:");
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKey:");
}

id objc_msgSend_setKeyRollInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyRollInterval:");
}

id objc_msgSend_setKeyRollInterval_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyRollInterval:forBeacon:completion:");
}

id objc_msgSend_setKeyRollIntervalForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyRollIntervalForDevice:");
}

id objc_msgSend_setKeyRollTimeout_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyRollTimeout:forDevice:");
}

id objc_msgSend_setKeyRotationTimeoutCommandWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyRotationTimeoutCommandWithTimeout:");
}

id objc_msgSend_setKeyRotationTimeoutHawkeyeTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyRotationTimeoutHawkeyeTaskWithTimeout:");
}

id objc_msgSend_setKeyRotationTimeoutTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyRotationTimeoutTaskWithTimeout:");
}

id objc_msgSend_setKeyValuePairs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeyValuePairs:");
}

id objc_msgSend_setKeychainItemData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKeychainItemData:");
}

id objc_msgSend_setKrMaterials_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKrMaterials:");
}

id objc_msgSend_setKvalue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKvalue:");
}

id objc_msgSend_setKvalueTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setKvalueTrack:");
}

id objc_msgSend_setLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLabel:");
}

id objc_msgSend_setLac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLac:");
}

id objc_msgSend_setLacID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLacID:");
}

id objc_msgSend_setLastARKitUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastARKitUpdate:");
}

id objc_msgSend_setLastARSessionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastARSessionState:");
}

id objc_msgSend_setLastAdvertisementDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAdvertisementDelta:");
}

id objc_msgSend_setLastAlertDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastAlertDate:");
}

id objc_msgSend_setLastCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastCountryCode:");
}

id objc_msgSend_setLastDisconnectionTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastDisconnectionTime:");
}

id objc_msgSend_setLastEvaluationDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastEvaluationDate:");
}

id objc_msgSend_setLastGroupClassicDisconnectionDelta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastGroupClassicDisconnectionDelta:");
}

id objc_msgSend_setLastGroupClassicDisconnectionTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastGroupClassicDisconnectionTime:");
}

id objc_msgSend_setLastHKUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastHKUpdate:");
}

id objc_msgSend_setLastHandledLocationAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastHandledLocationAccuracy:");
}

id objc_msgSend_setLastHandledLocationAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastHandledLocationAge:");
}

id objc_msgSend_setLastHandledLocationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastHandledLocationProvider:");
}

id objc_msgSend_setLastIndoorError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastIndoorError:");
}

id objc_msgSend_setLastKnownMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastKnownMotionState:");
}

id objc_msgSend_setLastLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastLocation:");
}

id objc_msgSend_setLastLocationSettingsEventSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastLocationSettingsEventSource:");
}

id objc_msgSend_setLastMonitoringState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastMonitoringState:");
}

id objc_msgSend_setLastObservationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastObservationTime:");
}

id objc_msgSend_setLastObservedBeacon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastObservedBeacon:");
}

id objc_msgSend_setLastObservedIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastObservedIndex:");
}

id objc_msgSend_setLastObservedType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastObservedType:");
}

id objc_msgSend_setLastOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastOdometer:");
}

id objc_msgSend_setLastPrefetchTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastPrefetchTimestamp:");
}

id objc_msgSend_setLastProactiveMaintenanceTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastProactiveMaintenanceTime:");
}

id objc_msgSend_setLastProcessedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastProcessedTime:");
}

id objc_msgSend_setLastReconciledAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReconciledAddress:");
}

id objc_msgSend_setLastReconciledCriteria_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReconciledCriteria:");
}

id objc_msgSend_setLastReconciliationTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastReconciliationTime:");
}

id objc_msgSend_setLastScanBufferEmptyDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastScanBufferEmptyDate:");
}

id objc_msgSend_setLastUpdateTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastUpdateTime:");
}

id objc_msgSend_setLastlocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLastlocation:");
}

id objc_msgSend_setLat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLat:");
}

id objc_msgSend_setLatency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatency:");
}

id objc_msgSend_setLatestData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestData:");
}

id objc_msgSend_setLatestNavModeEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestNavModeEstimate:");
}

id objc_msgSend_setLatestPosition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestPosition:");
}

id objc_msgSend_setLatestReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatestReason:");
}

id objc_msgSend_setLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatitude:");
}

id objc_msgSend_setLatitudeDeg_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLatitudeDeg:");
}

id objc_msgSend_setLaunchReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLaunchReason:");
}

id objc_msgSend_setLeashState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeashState:");
}

id objc_msgSend_setLedgerForType_domain_monitor_client_path_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLedgerForType:domain:monitor:client:path:");
}

id objc_msgSend_setLeechClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeechClients:");
}

id objc_msgSend_setLeeching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLeeching:");
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLength:");
}

id objc_msgSend_setListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setListener:");
}

id objc_msgSend_setLocManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocManager:");
}

id objc_msgSend_setLocalAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocalAddress:");
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocale:");
}

id objc_msgSend_setLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation:");
}

id objc_msgSend_setLocationAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationAccuracy:");
}

id objc_msgSend_setLocationButtonUseMode_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationButtonUseMode:forClient:");
}

id objc_msgSend_setLocationFingerprints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationFingerprints:");
}

id objc_msgSend_setLocationId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationId:");
}

id objc_msgSend_setLocationManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationManager:");
}

id objc_msgSend_setLocationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationProvider:");
}

id objc_msgSend_setLocationPushesActive_forAppBundleIdentifier_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationPushesActive:forAppBundleIdentifier:completion:");
}

id objc_msgSend_setLocationRestricted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationRestricted:");
}

id objc_msgSend_setLocationServicesEnabledStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationServicesEnabledStatus:");
}

id objc_msgSend_setLocationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationType:");
}

id objc_msgSend_setLocationUpdatesIncludeMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocationUpdatesIncludeMotionState:");
}

id objc_msgSend_setLocation_CDMA_forCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation_CDMA:forCell:");
}

id objc_msgSend_setLocation_GSM_forCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation_GSM:forCell:");
}

id objc_msgSend_setLocation_LTE_forCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation_LTE:forCell:");
}

id objc_msgSend_setLocation_NR_forCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation_NR:forCell:");
}

id objc_msgSend_setLocation_SCDMA_forCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocation_SCDMA:forCell:");
}

id objc_msgSend_setLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLocations:");
}

id objc_msgSend_setLogRequestToFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogRequestToFile:");
}

id objc_msgSend_setLogResponseToFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLogResponseToFile:");
}

id objc_msgSend_setLoggingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoggingEnabled:");
}

id objc_msgSend_setLoiDistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoiDistance:");
}

id objc_msgSend_setLoiRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoiRadius:");
}

id objc_msgSend_setLoiType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLoiType:");
}

id objc_msgSend_setLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLon:");
}

id objc_msgSend_setLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongitude:");
}

id objc_msgSend_setLongitudeDeg_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLongitudeDeg:");
}

id objc_msgSend_setLowConfidenceVisitLeechClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLowConfidenceVisitLeechClients:");
}

id objc_msgSend_setLsest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLsest:");
}

id objc_msgSend_setLteCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLteCellTowers:");
}

id objc_msgSend_setLtmOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setLtmOffset:");
}

id objc_msgSend_setMac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMac:");
}

id objc_msgSend_setMacID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacID:");
}

id objc_msgSend_setMacModes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacModes:");
}

id objc_msgSend_setMachineFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMachineFrequency:");
}

id objc_msgSend_setMacs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacs:");
}

id objc_msgSend_setMacsNotInALSDatabase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMacsNotInALSDatabase:");
}

id objc_msgSend_setMagneticAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMagneticAccuracy:");
}

id objc_msgSend_setMagneticCalibration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMagneticCalibration:");
}

id objc_msgSend_setMaintenanceOnlyCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaintenanceOnlyCondition:");
}

id objc_msgSend_setMake_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMake:");
}

id objc_msgSend_setManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManager:");
}

id objc_msgSend_setManufacturerName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setManufacturerName:");
}

id objc_msgSend_setMapMatchRoadType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMapMatchRoadType:");
}

id objc_msgSend_setMapMatchedPositionAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMapMatchedPositionAssistance:");
}

id objc_msgSend_setMarkets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarkets:");
}

id objc_msgSend_setMarqueeAppsOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMarqueeAppsOnly:");
}

id objc_msgSend_setMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMatching:");
}

id objc_msgSend_setMaxAbsSlope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxAbsSlope:");
}

id objc_msgSend_setMaxActivityBasedSpeedSinceAdvertisement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxActivityBasedSpeedSinceAdvertisement:");
}

id objc_msgSend_setMaxCellularRSRP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxCellularRSRP:");
}

id objc_msgSend_setMaxConcurrentMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConcurrentMessages:");
}

id objc_msgSend_setMaxConnectionsHawkeyeTaskWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConnectionsHawkeyeTaskWithCount:");
}

id objc_msgSend_setMaxConnectionsTaskWithCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxConnectionsTaskWithCount:");
}

id objc_msgSend_setMaxPayloadSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxPayloadSize:");
}

id objc_msgSend_setMaxPeakPowerInCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxPeakPowerInCall:");
}

id objc_msgSend_setMaxPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxPressure:");
}

id objc_msgSend_setMaxThermalLevelInCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxThermalLevelInCall:");
}

id objc_msgSend_setMaxThroughput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxThroughput:");
}

id objc_msgSend_setMcc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMcc:");
}

id objc_msgSend_setMctTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMctTimestamp:");
}

id objc_msgSend_setMeCardMapItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeCardMapItem:");
}

id objc_msgSend_setMeCardString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeCardString:");
}

id objc_msgSend_setMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMean:");
}

id objc_msgSend_setMeanMaxMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeanMaxMets:");
}

id objc_msgSend_setMeanSeaLevelPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeanSeaLevelPressure:");
}

id objc_msgSend_setMeasurements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeasurements:");
}

id objc_msgSend_setMemoryCacheCountLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMemoryCacheCountLimit:");
}

id objc_msgSend_setMemoryCacheTotalCostLimit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMemoryCacheTotalCostLimit:");
}

id objc_msgSend_setMergePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMergePolicy:");
}

id objc_msgSend_setMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessage:");
}

id objc_msgSend_setMessageType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessageType:");
}

id objc_msgSend_setMessagesWaitingForAck_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMessagesWaitingForAck:");
}

id objc_msgSend_setMetSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetSource:");
}

id objc_msgSend_setMeta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMeta:");
}

id objc_msgSend_setMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMets:");
}

id objc_msgSend_setMetsFM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetsFM:");
}

id objc_msgSend_setMetsHR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetsHR:");
}

id objc_msgSend_setMetsWR_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMetsWR:");
}

id objc_msgSend_setMicroLocationLoiClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMicroLocationLoiClient:");
}

id objc_msgSend_setMigrationVersionNumber(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMigrationVersionNumber");
}

id objc_msgSend_setMinCellularRSRP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinCellularRSRP:");
}

id objc_msgSend_setMinPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinPressure:");
}

id objc_msgSend_setMinimumEarlyFireProportion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumEarlyFireProportion:");
}

id objc_msgSend_setMinimumPreferredUpdatedRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinimumPreferredUpdatedRate:");
}

id objc_msgSend_setMinute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMinute:");
}

id objc_msgSend_setMirroringDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMirroringDelegate:");
}

id objc_msgSend_setMnc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMnc:");
}

id objc_msgSend_setMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMode:");
}

id objc_msgSend_setModeIndicator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModeIndicator:");
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModel:");
}

id objc_msgSend_setModelName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setModelName:");
}

id objc_msgSend_setMonitoring_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonitoring:");
}

id objc_msgSend_setMonth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMonth:");
}

id objc_msgSend_setMostRecentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMostRecentLocation:");
}

id objc_msgSend_setMotion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotion:");
}

id objc_msgSend_setMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionActivity:");
}

id objc_msgSend_setMotionAlarmActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionAlarmActive:");
}

id objc_msgSend_setMotionAlarmClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionAlarmClients:");
}

id objc_msgSend_setMotionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionState:");
}

id objc_msgSend_setMotionStateAfterNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionStateAfterNMinusOneStateChange:");
}

id objc_msgSend_setMotionStateAfterNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionStateAfterNMinusTwoStateChange:");
}

id objc_msgSend_setMotionStateBeforeNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionStateBeforeNMinusOneStateChange:");
}

id objc_msgSend_setMotionStateBeforeStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionStateBeforeStateChange:");
}

id objc_msgSend_setMotionStateFunction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionStateFunction:");
}

id objc_msgSend_setMotionVehicleConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionVehicleConnected:");
}

id objc_msgSend_setMotionVehicleConnectedStateChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMotionVehicleConnectedStateChanged:");
}

id objc_msgSend_setMountedConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMountedConfidence:");
}

id objc_msgSend_setMountedState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMountedState:");
}

id objc_msgSend_setMuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMuid:");
}

id objc_msgSend_setMutexAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMutexAction:");
}

id objc_msgSend_setMutexAction_withLatency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMutexAction:withLatency:");
}

id objc_msgSend_setMutexState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMutexState:");
}

id objc_msgSend_setNMEASentencesToFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMEASentencesToFilter:");
}

id objc_msgSend_setNMinusOneState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusOneState:");
}

id objc_msgSend_setNMinusOneStateChangeLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusOneStateChangeLocation:");
}

id objc_msgSend_setNMinusOneStateChangeLocationAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusOneStateChangeLocationAccuracy:");
}

id objc_msgSend_setNMinusOneStateChangeLocationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusOneStateChangeLocationProvider:");
}

id objc_msgSend_setNMinusThreeState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusThreeState:");
}

id objc_msgSend_setNMinusTwoState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusTwoState:");
}

id objc_msgSend_setNMinusTwoStateChangeLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusTwoStateChangeLocation:");
}

id objc_msgSend_setNMinusTwoStateChangeLocationAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusTwoStateChangeLocationAccuracy:");
}

id objc_msgSend_setNMinusTwoStateChangeLocationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNMinusTwoStateChangeLocationProvider:");
}

id objc_msgSend_setNPairs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNPairs:");
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setName:");
}

id objc_msgSend_setNatalieData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNatalieData:");
}

id objc_msgSend_setNatalieFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNatalieFeatures:");
}

id objc_msgSend_setNearOwnerTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearOwnerTimeout:");
}

id objc_msgSend_setNearOwnerTimeoutCommandWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearOwnerTimeoutCommandWithTimeout:");
}

id objc_msgSend_setNearOwnerTimeoutOverride_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearOwnerTimeoutOverride:");
}

id objc_msgSend_setNearOwnerTimeoutTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearOwnerTimeoutTaskWithTimeout:");
}

id objc_msgSend_setNearbyInfoV2DecryptedFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyInfoV2DecryptedFlags:");
}

id objc_msgSend_setNearbyPairUniqueID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyPairUniqueID:");
}

id objc_msgSend_setNearbyTimeoutHawkeyeTaskWithTimeout_asHele_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNearbyTimeoutHawkeyeTaskWithTimeout:asHele:");
}

id objc_msgSend_setNeedCellsTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedCellsTowers:");
}

id objc_msgSend_setNeededDiscovery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeededDiscovery:");
}

id objc_msgSend_setNeedsResetSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsResetSync");
}

id objc_msgSend_setNeedsToFetchChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeedsToFetchChanges");
}

id objc_msgSend_setNeighborGroup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeighborGroup:");
}

id objc_msgSend_setNeighborType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNeighborType:");
}

id objc_msgSend_setNetworkAccessAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNetworkAccessAllowed:");
}

id objc_msgSend_setNewCriteria_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNewCriteria:");
}

id objc_msgSend_setNextFireDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireDelay:");
}

id objc_msgSend_setNextFireDelay_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireDelay:interval:");
}

id objc_msgSend_setNextFireTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireTime:");
}

id objc_msgSend_setNextFireTime_interval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNextFireTime:interval:");
}

id objc_msgSend_setNid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNid:");
}

id objc_msgSend_setNordicCrash_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNordicCrash:");
}

id objc_msgSend_setNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotification:");
}

id objc_msgSend_setNotificationsInCompanionQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationsInCompanionQueue:");
}

id objc_msgSend_setNotificationsInGizmoQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotificationsInGizmoQueue:");
}

id objc_msgSend_setNotifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifier:");
}

id objc_msgSend_setNotifyOnEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyOnEntry:");
}

id objc_msgSend_setNotifyOnExit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyOnExit:");
}

id objc_msgSend_setNotifyValue_forCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNotifyValue:forCharacteristic:");
}

id objc_msgSend_setNpnCsgIdEf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNpnCsgIdEf:");
}

id objc_msgSend_setNpnNwIdEf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNpnNwIdEf:");
}

id objc_msgSend_setNr5GCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNr5GCellTowers:");
}

id objc_msgSend_setNrarfcn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNrarfcn:");
}

id objc_msgSend_setNumProactiveAttempts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumProactiveAttempts:");
}

id objc_msgSend_setNumWorkoutsContrToEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumWorkoutsContrToEstimate:");
}

id objc_msgSend_setNumberOfConsecutiveSyncSessionRetries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfConsecutiveSyncSessionRetries:");
}

id objc_msgSend_setNumberOfRebaseBtwRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfRebaseBtwRefresh:");
}

id objc_msgSend_setNumberOfSteps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfSteps:");
}

id objc_msgSend_setNumberOfSurroundingCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfSurroundingCells:");
}

id objc_msgSend_setNumberOfSurroundingWifis_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfSurroundingWifis:");
}

id objc_msgSend_setNumberOfTrackEndedBtwRefresh_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNumberOfTrackEndedBtwRefresh:");
}

id objc_msgSend_setNwActivityDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNwActivityDomain:");
}

id objc_msgSend_setNwActivityLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setNwActivityLabel:");
}

id objc_msgSend_setObfuscatedIdentifierTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObfuscatedIdentifierTaskWithIdentifier:");
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:atIndexedSubscript:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setObjectIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObjectIdentifier:");
}

id objc_msgSend_setObservationValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObservationValue:");
}

id objc_msgSend_setObservedTransitAccessPointsCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObservedTransitAccessPointsCache:");
}

id objc_msgSend_setOdometer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOdometer:");
}

id objc_msgSend_setOdometerTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOdometerTarget:");
}

id objc_msgSend_setOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOffset:");
}

id objc_msgSend_setOnConditionUpdateCallbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOnConditionUpdateCallbackHandler:");
}

id objc_msgSend_setOobKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOobKeys:");
}

id objc_msgSend_setOperationMemoryThresholdBytes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationMemoryThresholdBytes:");
}

id objc_msgSend_setOperationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperationType:");
}

id objc_msgSend_setOperatorName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOperatorName:");
}

id objc_msgSend_setOptedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOptedIn:");
}

id objc_msgSend_setOption_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOption:forKey:");
}

id objc_msgSend_setOtaSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOtaSettings:");
}

id objc_msgSend_setOutdoorConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutdoorConfidence:");
}

id objc_msgSend_setOutdoorUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutdoorUpdate:");
}

id objc_msgSend_setOutputDeviceIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOutputDeviceIDs:");
}

id objc_msgSend_setOverrideAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setOverrideAction:");
}

id objc_msgSend_setPace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPace:");
}

id objc_msgSend_setPacebin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPacebin:");
}

id objc_msgSend_setPairedDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDevice:");
}

id objc_msgSend_setPairedDeviceID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceID:");
}

id objc_msgSend_setPairedDeviceLastSeenTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceLastSeenTimestamp:");
}

id objc_msgSend_setPairedDeviceRegistry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceRegistry:");
}

id objc_msgSend_setPairedDeviceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedDeviceUUID:");
}

id objc_msgSend_setPairedModelId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedModelId:");
}

id objc_msgSend_setPairedSyncSessionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPairedSyncSessionActive:");
}

id objc_msgSend_setPal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPal:");
}

id objc_msgSend_setPassSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassSource:");
}

id objc_msgSend_setPassTypeId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPassTypeId:");
}

id objc_msgSend_setPasscodeLocked_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPasscodeLocked:");
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayload:");
}

id objc_msgSend_setPayloadIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadIdentifier:");
}

id objc_msgSend_setPayloadOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPayloadOffset:");
}

id objc_msgSend_setPd2vtecDphi2D2vtecDphi2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPd2vtecDphi2D2vtecDphi2:");
}

id objc_msgSend_setPd2vtecDtheta2D2vtecDtheta2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPd2vtecDtheta2D2vtecDtheta2:");
}

id objc_msgSend_setPd2vtecDthetadphiD2vtecDthetadphi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPd2vtecDthetadphiD2vtecDthetadphi:");
}

id objc_msgSend_setPdvtecDphiDvtecDphi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPdvtecDphiDvtecDphi:");
}

id objc_msgSend_setPdvtecDthetaDvtecDtheta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPdvtecDthetaDvtecDtheta:");
}

id objc_msgSend_setPeakPowerAtEndOfCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeakPowerAtEndOfCall:");
}

id objc_msgSend_setPeakPowerAtStartOfCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeakPowerAtStartOfCall:");
}

id objc_msgSend_setPendingConnectionAttempt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingConnectionAttempt:");
}

id objc_msgSend_setPendingDisconnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingDisconnect:");
}

id objc_msgSend_setPendingMaterials_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPendingMaterials:");
}

id objc_msgSend_setPerMessageTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPerMessageTimeout:");
}

id objc_msgSend_setPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPeripheral:");
}

id objc_msgSend_setPersistenceUnavailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistenceUnavailable:");
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreCoordinator:");
}

id objc_msgSend_setPersistentStoreDescriptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreDescriptions:");
}

id objc_msgSend_setPersistentStoreDictionary_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersistentStoreDictionary:forClient:");
}

id objc_msgSend_setPersonalizationBVERCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationBVERCharacteristic:");
}

id objc_msgSend_setPersonalizationBoardIDCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationBoardIDCharacteristic:");
}

id objc_msgSend_setPersonalizationBootNonceHashCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationBootNonceHashCharacteristic:");
}

id objc_msgSend_setPersonalizationChipIDCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationChipIDCharacteristic:");
}

id objc_msgSend_setPersonalizationECIDCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationECIDCharacteristic:");
}

id objc_msgSend_setPersonalizationProdModeCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationProdModeCharacteristic:");
}

id objc_msgSend_setPersonalizationSecDomainCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationSecDomainCharacteristic:");
}

id objc_msgSend_setPersonalizationSecModeCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPersonalizationSecModeCharacteristic:");
}

id objc_msgSend_setPfYieldStatusBeforeCalculatePose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPfYieldStatusBeforeCalculatePose:");
}

id objc_msgSend_setPhmaxHmaxKm2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhmaxHmaxKm2:");
}

id objc_msgSend_setPhoneNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPhoneNumber:");
}

id objc_msgSend_setPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPid:");
}

id objc_msgSend_setPilotPhase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPilotPhase:");
}

id objc_msgSend_setPipelineDiagnosticReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPipelineDiagnosticReport:");
}

id objc_msgSend_setPipelinedDidStartLocalizing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPipelinedDidStartLocalizing:");
}

id objc_msgSend_setPipelinedSeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPipelinedSeeded:");
}

id objc_msgSend_setPipelinedVenues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPipelinedVenues:");
}

id objc_msgSend_setPmax_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPmax:");
}

id objc_msgSend_setPnoffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPnoffset:");
}

id objc_msgSend_setPointCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPointCount:");
}

id objc_msgSend_setPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPort:");
}

id objc_msgSend_setPortAddressingScheme_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPortAddressingScheme:");
}

id objc_msgSend_setPoshNonOwnerCharacteristic_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPoshNonOwnerCharacteristic:");
}

id objc_msgSend_setPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPower:");
}

id objc_msgSend_setPowerSaveMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerSaveMode:");
}

id objc_msgSend_setPowerSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPowerSource:");
}

id objc_msgSend_setPrbCoarseIndoorSaysIndoor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbCoarseIndoorSaysIndoor:");
}

id objc_msgSend_setPrbGpsSaysIndoor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbGpsSaysIndoor:");
}

id objc_msgSend_setPrbInjectionGainRetryLimitOk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbInjectionGainRetryLimitOk:");
}

id objc_msgSend_setPrbInjectionOccupancyRetryLimitOk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbInjectionOccupancyRetryLimitOk:");
}

id objc_msgSend_setPrbInlierEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbInlierEstimate:");
}

id objc_msgSend_setPrbLocalizerIoWrapperSaysWifiOk_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbLocalizerIoWrapperSaysWifiOk:");
}

id objc_msgSend_setPrbOnFloorsEstimate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbOnFloorsEstimate:");
}

id objc_msgSend_setPrbParticleFilterSaysYield_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbParticleFilterSaysYield:");
}

id objc_msgSend_setPrbPipelinedSaysYield_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbPipelinedSaysYield:");
}

id objc_msgSend_setPrbWifiSaysIndoor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrbWifiSaysIndoor:");
}

id objc_msgSend_setPreDaytonaMapping_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreDaytonaMapping:");
}

id objc_msgSend_setPrecipitationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrecipitationType:");
}

id objc_msgSend_setPrecision_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrecision:");
}

id objc_msgSend_setPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicate:");
}

id objc_msgSend_setPredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPredicates:");
}

id objc_msgSend_setPreferStaleData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreferStaleData:");
}

id objc_msgSend_setPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressure:");
}

id objc_msgSend_setPressureLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressureLocation:");
}

id objc_msgSend_setPressureMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPressureMeasurement:");
}

id objc_msgSend_setPrevLoc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrevLoc:");
}

id objc_msgSend_setPreviousCumulativeDeltaIOSTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousCumulativeDeltaIOSTime:");
}

id objc_msgSend_setPreviousLocationAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousLocationAccuracy:");
}

id objc_msgSend_setPreviousLocationAge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousLocationAge:");
}

id objc_msgSend_setPreviousLocationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPreviousLocationProvider:");
}

id objc_msgSend_setPrior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrior:");
}

id objc_msgSend_setPriority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPriority:");
}

id objc_msgSend_setPrivacyTimeOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivacyTimeOffset:");
}

id objc_msgSend_setPrivateMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPrivateMode:");
}

id objc_msgSend_setProactiveMaintenanceCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProactiveMaintenanceCount:");
}

id objc_msgSend_setProductData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductData:");
}

id objc_msgSend_setProductId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProductId:");
}

id objc_msgSend_setProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperties:");
}

id objc_msgSend_setProperty_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProperty:forKey:");
}

id objc_msgSend_setProtobufAction_forIncomingRequestsOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtobufAction:forIncomingRequestsOfType:");
}

id objc_msgSend_setProtocolImplementation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolImplementation:");
}

id objc_msgSend_setProtocolVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProtocolVersion:");
}

id objc_msgSend_setProvenance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProvenance:");
}

id objc_msgSend_setProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProvider:");
}

id objc_msgSend_setProviderIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProviderIdentifier:");
}

id objc_msgSend_setProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setProxy:");
}

id objc_msgSend_setPsc_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPsc:");
}

id objc_msgSend_setPvtec0Vtec0_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPvtec0Vtec0:");
}

id objc_msgSend_setQuality_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuality:");
}

id objc_msgSend_setQuantizedDistChangeSinceLastCalibrationM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuantizedDistChangeSinceLastCalibrationM:");
}

id objc_msgSend_setQuantizedTimeChangeSinceLastCalibrationS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuantizedTimeChangeSinceLastCalibrationS:");
}

id objc_msgSend_setQuarterHourDisconnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuarterHourDisconnect:");
}

id objc_msgSend_setQuaternion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQuaternion:");
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQueue:");
}

id objc_msgSend_setQzss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setQzss:");
}

id objc_msgSend_setRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRadius:");
}

id objc_msgSend_setRadiusMeters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRadiusMeters:");
}

id objc_msgSend_setRangingRateWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRangingRateWithConfiguration:");
}

id objc_msgSend_setRapportStreamingLink_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRapportStreamingLink:");
}

id objc_msgSend_setRat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRat:");
}

id objc_msgSend_setRawCoordinateLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawCoordinateLatitude:");
}

id objc_msgSend_setRawCoordinateLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawCoordinateLongitude:");
}

id objc_msgSend_setRawGradeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawGradeType:");
}

id objc_msgSend_setRawMotionActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawMotionActivity:");
}

id objc_msgSend_setRawSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawSpeed:");
}

id objc_msgSend_setRawSpeedToKValueBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRawSpeedToKValueBins:");
}

id objc_msgSend_setReach_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReach:");
}

id objc_msgSend_setReachability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachability:");
}

id objc_msgSend_setReachabilityStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReachabilityStatus:");
}

id objc_msgSend_setReadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadData:");
}

id objc_msgSend_setReadHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadHandler:");
}

id objc_msgSend_setReadHandler_maxDatagrams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadHandler:maxDatagrams:");
}

id objc_msgSend_setReadyForSubmission(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReadyForSubmission");
}

id objc_msgSend_setRealTimeHarvestTriggered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRealTimeHarvestTriggered:");
}

id objc_msgSend_setReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReason:");
}

id objc_msgSend_setReceivedMessageHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivedMessageHandler:");
}

id objc_msgSend_setReceivingEndUnacknowledgedMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReceivingEndUnacknowledgedMessages:");
}

id objc_msgSend_setRecentLastPublishDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecentLastPublishDate:");
}

id objc_msgSend_setRecentVisits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecentVisits:");
}

id objc_msgSend_setReconnecting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReconnecting:");
}

id objc_msgSend_setRecordId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordId:");
}

id objc_msgSend_setRecordIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordIdentifier:");
}

id objc_msgSend_setRecordingTriggerMap_outputPathBase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecordingTriggerMap:outputPathBase:");
}

id objc_msgSend_setRecoverable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecoverable:");
}

id objc_msgSend_setRecoverySyncInProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRecoverySyncInProgress:");
}

id objc_msgSend_setReferenceAltM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferenceAltM:");
}

id objc_msgSend_setReferenceAltUncM_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferenceAltUncM:");
}

id objc_msgSend_setReferenceFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReferenceFrame:");
}

id objc_msgSend_setRefinement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefinement:");
}

id objc_msgSend_setRefreshGeotag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRefreshGeotag:");
}

id objc_msgSend_setRegionCenterLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegionCenterLocation:");
}

id objc_msgSend_setRegionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegionId:");
}

id objc_msgSend_setRegisteredXPCTaskElevationProfile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegisteredXPCTaskElevationProfile:");
}

id objc_msgSend_setRegisteredXPCTaskMSLP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegisteredXPCTaskMSLP:");
}

id objc_msgSend_setRegularEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRegularEntry:");
}

id objc_msgSend_setRelevance_forInterestZoneWithId_registeredForClientKey_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRelevance:forInterestZoneWithId:registeredForClientKey:withReply:");
}

id objc_msgSend_setReliability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReliability:");
}

id objc_msgSend_setRemainingBOMScansTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemainingBOMScansTo:");
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRemoteObjectInterface:");
}

id objc_msgSend_setReport_payload_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReport:payload:length:");
}

id objc_msgSend_setReport_reportLength_withIdentifier_forType_error_timeout_callback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReport:reportLength:withIdentifier:forType:error:timeout:callback:");
}

id objc_msgSend_setRequestReceivedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestReceivedTime:");
}

id objc_msgSend_setRequestStatusAtFirstUserResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestStatusAtFirstUserResponse:");
}

id objc_msgSend_setRequestTransmissionTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestTransmissionTime:");
}

id objc_msgSend_setRequestedScanType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestedScanType:");
}

id objc_msgSend_setRequiresMutex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresMutex:");
}

id objc_msgSend_setRequiresPowerPluggedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresPowerPluggedIn:");
}

id objc_msgSend_setRequiresSecureCoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequiresSecureCoding:");
}

id objc_msgSend_setResendMotionStateTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResendMotionStateTimer:");
}

id objc_msgSend_setResendTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResendTimer:");
}

id objc_msgSend_setResetRecoveryMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResetRecoveryMode:");
}

id objc_msgSend_setResourceValue_forKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setResourceValue:forKey:error:");
}

id objc_msgSend_setRestrictedMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRestrictedMode:");
}

id objc_msgSend_setRetrocomputeStatusClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetrocomputeStatusClients:");
}

id objc_msgSend_setRetryTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRetryTimer:");
}

id objc_msgSend_setReunionSyncListPaths_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReunionSyncListPaths:");
}

id objc_msgSend_setReunionSyncLists_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReunionSyncLists:");
}

id objc_msgSend_setRevertToUnknownTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRevertToUnknownTimer:");
}

id objc_msgSend_setRoseRangingParametersCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoseRangingParametersCommandWithParameters:");
}

id objc_msgSend_setRoseRangingParametersNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoseRangingParametersNonOwnerCommandWithParameters:");
}

id objc_msgSend_setRoseRangingParametersTaskWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoseRangingParametersTaskWithParameters:");
}

id objc_msgSend_setRotationInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRotationInterval:");
}

id objc_msgSend_setRouteHintWatchdogTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRouteHintWatchdogTimer:");
}

id objc_msgSend_setRoutineMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoutineMode:");
}

id objc_msgSend_setRoutineMonitor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRoutineMonitor:");
}

id objc_msgSend_setRowingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRowingModel:");
}

id objc_msgSend_setRscp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRscp:");
}

id objc_msgSend_setRssi_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRssi:");
}

id objc_msgSend_setRunInertialIntegrator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunInertialIntegrator:");
}

id objc_msgSend_setRunMapIntegrator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRunMapIntegrator:");
}

id objc_msgSend_setSatReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSatReport:");
}

id objc_msgSend_setScanDeliveryDelayTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanDeliveryDelayTimer:");
}

id objc_msgSend_setScanFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanFlags:");
}

id objc_msgSend_setScanRate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanRate:");
}

id objc_msgSend_setScanTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanTimestamp:");
}

id objc_msgSend_setScanType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScanType:");
}

id objc_msgSend_setScannerDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScannerDelegate:");
}

id objc_msgSend_setScdmaCellTowers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScdmaCellTowers:");
}

id objc_msgSend_setScenarioTriggerClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScenarioTriggerClients:");
}

id objc_msgSend_setSchoolLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSchoolLocations:");
}

id objc_msgSend_setScore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScore:");
}

id objc_msgSend_setScs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setScs:");
}

id objc_msgSend_setSecond_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecond:");
}

id objc_msgSend_setSecondaryFileHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryFileHandle:");
}

id objc_msgSend_setSecondaryPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSecondaryPath:");
}

id objc_msgSend_setSectorLatitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectorLatitude:");
}

id objc_msgSend_setSectorLongitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectorLongitude:");
}

id objc_msgSend_setSectorid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSectorid:");
}

id objc_msgSend_setSedentaryAlarmData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSedentaryAlarmData:");
}

id objc_msgSend_setSedentaryAlarmDataDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSedentaryAlarmDataDeprecated:");
}

id objc_msgSend_setSelectionFeatureValue_value_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelectionFeatureValue:value:");
}

id objc_msgSend_setSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSelector:");
}

id objc_msgSend_setSensorRecorder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSensorRecorder:");
}

id objc_msgSend_setSerializer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSerializer:");
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setService:");
}

id objc_msgSend_setServiceMaskOperator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceMaskOperator:");
}

id objc_msgSend_setServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceName:");
}

id objc_msgSend_setServiceProviderName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceProviderName:");
}

id objc_msgSend_setServiceReplacementMap_missBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceReplacementMap:missBehavior:");
}

id objc_msgSend_setServiceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceType:");
}

id objc_msgSend_setServiceUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setServiceUUID:");
}

id objc_msgSend_setSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSession:");
}

id objc_msgSend_setSessionAttributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionAttributes:");
}

id objc_msgSend_setSessionCatherineData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionCatherineData:");
}

id objc_msgSend_setSessionId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionId:");
}

id objc_msgSend_setSessionMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionMetadata:");
}

id objc_msgSend_setSessionSendsLaunchEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionSendsLaunchEvents:");
}

id objc_msgSend_setSessionStalenessInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionStalenessInterval:");
}

id objc_msgSend_setSessionTimer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionTimer:");
}

id objc_msgSend_setSessionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionType:");
}

id objc_msgSend_setSessionVo2Max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSessionVo2Max:");
}

id objc_msgSend_setSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSet:");
}

id objc_msgSend_setSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettings:");
}

id objc_msgSend_setSettingsChangeHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettingsChangeHandler:");
}

id objc_msgSend_setSettingsDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettingsDictionary:");
}

id objc_msgSend_setSettingsResetFollowUpState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettingsResetFollowUpState:");
}

id objc_msgSend_setSettledState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSettledState:");
}

id objc_msgSend_setSharedURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSharedURLCache:");
}

id objc_msgSend_setShouldAddStoreAsynchronously_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldAddStoreAsynchronously:");
}

id objc_msgSend_setShouldConfirmHandlingPairingNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldConfirmHandlingPairingNotification:");
}

id objc_msgSend_setShouldConfirmHandlingQuickSwitchNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldConfirmHandlingQuickSwitchNotification:");
}

id objc_msgSend_setShouldInferMappingModelAutomatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldInferMappingModelAutomatically:");
}

id objc_msgSend_setShouldMigrateStoreAutomatically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldMigrateStoreAutomatically:");
}

id objc_msgSend_setShouldResetAuthDbOnFullSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldResetAuthDbOnFullSync:");
}

id objc_msgSend_setShouldSendMoreDataInCurrentSyncSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setShouldSendMoreDataInCurrentSyncSession:");
}

id objc_msgSend_setSid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSid:");
}

id objc_msgSend_setSignalEnvironmentType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignalEnvironmentType:");
}

id objc_msgSend_setSignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignature:");
}

id objc_msgSend_setSignificantFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSignificantFence:");
}

id objc_msgSend_setSilo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSilo:");
}

id objc_msgSend_setSimpleBeacons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimpleBeacons:");
}

id objc_msgSend_setSimulationEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSimulationEnabled:");
}

id objc_msgSend_setSlope_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSlope:");
}

id objc_msgSend_setSmoothedGPSAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmoothedGPSAltitude:");
}

id objc_msgSend_setSmoothedGPSAltitudeUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmoothedGPSAltitudeUncertainty:");
}

id objc_msgSend_setSmoothingRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmoothingRequired:");
}

id objc_msgSend_setSmsType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmsType:");
}

id objc_msgSend_setSmscAddress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSmscAddress:");
}

id objc_msgSend_setSoftwareBuild_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoftwareBuild:");
}

id objc_msgSend_setSoftwareVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSoftwareVersion:");
}

id objc_msgSend_setSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSource:");
}

id objc_msgSend_setSourceBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSourceBundleIdentifier:");
}

id objc_msgSend_setSpanLat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpanLat:");
}

id objc_msgSend_setSpanLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpanLon:");
}

id objc_msgSend_setSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeed:");
}

id objc_msgSend_setSpeedAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedAccuracy:");
}

id objc_msgSend_setSpeedMean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedMean:");
}

id objc_msgSend_setSpeedMps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedMps:");
}

id objc_msgSend_setSpeedUncMps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedUncMps:");
}

id objc_msgSend_setSpeedVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSpeedVariance:");
}

id objc_msgSend_setSrcPort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSrcPort:");
}

id objc_msgSend_setStairClimbingModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStairClimbingModel:");
}

id objc_msgSend_setStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStart:");
}

id objc_msgSend_setStartAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartAt:");
}

id objc_msgSend_setStartDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartDate:");
}

id objc_msgSend_setStartScanningAwaitingResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartScanningAwaitingResponse:");
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTime:");
}

id objc_msgSend_setStartTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStartTimestamp:");
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setState:");
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateDescriptor:");
}

id objc_msgSend_setStateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateHandler:");
}

id objc_msgSend_setStateInfoChangedBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStateInfoChangedBlock:");
}

id objc_msgSend_setStationaryTimeInSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStationaryTimeInSeconds:");
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatus:");
}

id objc_msgSend_setStatusBarIconForEntityClass_visible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusBarIconForEntityClass:visible:");
}

id objc_msgSend_setStatusHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusHandler:");
}

id objc_msgSend_setStatusInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusInfo:");
}

id objc_msgSend_setStatusString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStatusString:");
}

id objc_msgSend_setSteadinessClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSteadinessClients:");
}

id objc_msgSend_setStepCadenceToStrideLengthBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStepCadenceToStrideLengthBins:");
}

id objc_msgSend_setStepCountData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStepCountData:");
}

id objc_msgSend_setSteps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSteps:");
}

id objc_msgSend_setStepsSinceNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStepsSinceNMinusOneStateChange:");
}

id objc_msgSend_setStepsSinceNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStepsSinceNMinusTwoStateChange:");
}

id objc_msgSend_setStewieSupported_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStewieSupported:");
}

id objc_msgSend_setStopScanningAwaitingResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStopScanningAwaitingResponse:");
}

id objc_msgSend_setStopTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStopTime:");
}

id objc_msgSend_setStopTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStopTimestamp:");
}

id objc_msgSend_setStreamingConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStreamingConnection:");
}

id objc_msgSend_setStrideCalData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrideCalData:");
}

id objc_msgSend_setStrideCalDataDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrideCalDataDeprecated:");
}

id objc_msgSend_setString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:");
}

id objc_msgSend_setString_forKey_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setString:forKey:atKeyPath:");
}

id objc_msgSend_setStrokeAmp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeAmp:");
}

id objc_msgSend_setStrokeFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokeFrequency:");
}

id objc_msgSend_setStrokePower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setStrokePower:");
}

id objc_msgSend_setSubjectToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubjectToken:");
}

id objc_msgSend_setSubjectUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubjectUUID:");
}

id objc_msgSend_setSubmersionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSubmersionState:");
}

id objc_msgSend_setSumest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSumest:");
}

id objc_msgSend_setSummaries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSummaries:");
}

id objc_msgSend_setSupervised_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSupervised:");
}

id objc_msgSend_setSurfacePressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSurfacePressure:");
}

id objc_msgSend_setSyncCoordinator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncCoordinator:");
}

id objc_msgSend_setSyncRestriction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncRestriction:");
}

id objc_msgSend_setSyncService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncService:");
}

id objc_msgSend_setSyncSessionRetryInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSyncSessionRetryInterval:");
}

id objc_msgSend_setSystemServicesMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemServicesMap:");
}

id objc_msgSend_setTaUnknownBeacon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaUnknownBeacon:");
}

id objc_msgSend_setTac_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTac:");
}

id objc_msgSend_setTacID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTacID:");
}

id objc_msgSend_setTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTag:");
}

id objc_msgSend_setTagTypeCommandWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTagTypeCommandWithType:");
}

id objc_msgSend_setTagTypeTaskWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTagTypeTaskWithType:");
}

id objc_msgSend_setTarget_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTarget:");
}

id objc_msgSend_setTargetQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetQueue:");
}

id objc_msgSend_setTargetUserSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTargetUserSession:");
}

id objc_msgSend_setTaskDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskDescription:");
}

id objc_msgSend_setTemperature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemperature:");
}

id objc_msgSend_setTemperatureUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemperatureUncertainty:");
}

id objc_msgSend_setTemporaryAuthorizationStatusInfoForClient_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTemporaryAuthorizationStatusInfoForClient:data:");
}

id objc_msgSend_setThermalLevel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThermalLevel:");
}

id objc_msgSend_setThermalLevelAtEndOfCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThermalLevelAtEndOfCall:");
}

id objc_msgSend_setThermalLevelAtStartOfCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setThermalLevelAtStartOfCall:");
}

id objc_msgSend_setTiles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTiles:");
}

id objc_msgSend_setTimeBetweenReconstructedPointsSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeBetweenReconstructedPointsSeconds:");
}

id objc_msgSend_setTimeEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeEnd:");
}

id objc_msgSend_setTimeEndGpsLocationSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeEndGpsLocationSegment:");
}

id objc_msgSend_setTimeFenceExit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeFenceExit:");
}

id objc_msgSend_setTimeFenceStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeFenceStart:");
}

id objc_msgSend_setTimeOfCurrentStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeOfCurrentStateChange:");
}

id objc_msgSend_setTimeOfNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeOfNMinusOneStateChange:");
}

id objc_msgSend_setTimeOfNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeOfNMinusTwoStateChange:");
}

id objc_msgSend_setTimeSinceDominantActivityChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeSinceDominantActivityChange:");
}

id objc_msgSend_setTimeSinceMotionActivityChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeSinceMotionActivityChange:");
}

id objc_msgSend_setTimeSinceNMinusOneStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeSinceNMinusOneStateChange:");
}

id objc_msgSend_setTimeSinceNMinusTwoStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeSinceNMinusTwoStateChange:");
}

id objc_msgSend_setTimeSinceWifiRoam_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeSinceWifiRoam:");
}

id objc_msgSend_setTimeStampLastBeepOnMoveScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStampLastBeepOnMoveScan:");
}

id objc_msgSend_setTimeStart_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStart:");
}

id objc_msgSend_setTimeStartGpsLocationSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStartGpsLocationSegment:");
}

id objc_msgSend_setTimeStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeStyle:");
}

id objc_msgSend_setTimeToInitialStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeToInitialStateChange:");
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeZone:");
}

id objc_msgSend_setTimeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutInterval:");
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutIntervalForResource:");
}

id objc_msgSend_setTimeoutSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimeoutSeconds:");
}

id objc_msgSend_setTimerForGPSOff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimerForGPSOff");
}

id objc_msgSend_setTimerForWifiOff(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimerForWifiOff");
}

id objc_msgSend_setTimerWithInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimerWithInterval:");
}

id objc_msgSend_setTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestamp:");
}

id objc_msgSend_setTimestampGps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestampGps:");
}

id objc_msgSend_setTimestampLastBOMDailyLimitResetDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestampLastBOMDailyLimitResetDate:");
}

id objc_msgSend_setTimestampOfCalibrationS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimestampOfCalibrationS:");
}

id objc_msgSend_setTimingAdvance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimingAdvance:");
}

id objc_msgSend_setTimoutBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTimoutBlock:");
}

id objc_msgSend_setTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTitle:");
}

id objc_msgSend_setTotalAdvertisementBuffersAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTotalAdvertisementBuffersAvailable:");
}

id objc_msgSend_setTouristApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTouristApp:");
}

id objc_msgSend_setTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrack:");
}

id objc_msgSend_setTrackRunHint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrackRunHint:");
}

id objc_msgSend_setTransactionAuthor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransactionAuthor:");
}

id objc_msgSend_setTransmit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransmit:");
}

id objc_msgSend_setTransport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTransport:");
}

id objc_msgSend_setTremorDetectionService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTremorDetectionService:");
}

id objc_msgSend_setTrigger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTrigger:");
}

id objc_msgSend_setTriggerEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerEvent:");
}

id objc_msgSend_setTriggerLocalizationScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerLocalizationScan:");
}

id objc_msgSend_setTriggerRecordingScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerRecordingScan:");
}

id objc_msgSend_setTriggerSubType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerSubType:");
}

id objc_msgSend_setTriggerTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerTimestamp:");
}

id objc_msgSend_setTriggerType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTriggerType:");
}

id objc_msgSend_setTripId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTripId:");
}

id objc_msgSend_setTripSegmentRecorderLoggingDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTripSegmentRecorderLoggingDirectory:");
}

id objc_msgSend_setTripTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTripTimestamp:");
}

id objc_msgSend_setTropicalSavannaBranchCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTropicalSavannaBranchCount:");
}

id objc_msgSend_setTropicalSavannaProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTropicalSavannaProximity:");
}

id objc_msgSend_setTropicalSavannaTreeId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTropicalSavannaTreeId:");
}

id objc_msgSend_setTruthMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTruthMets:");
}

id objc_msgSend_setTruthMetsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTruthMetsSource:");
}

id objc_msgSend_setTunnelBridgeAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTunnelBridgeAssistance:");
}

id objc_msgSend_setTunnelEndPointPositionAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTunnelEndPointPositionAssistance:");
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setType:");
}

id objc_msgSend_setURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURL:");
}

id objc_msgSend_setUarfcn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUarfcn:");
}

id objc_msgSend_setUlCenterFrequency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUlCenterFrequency:");
}

id objc_msgSend_setUnacknowledgedMessages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnacknowledgedMessages:");
}

id objc_msgSend_setUnauthorizedPlaySoundRateLimitCommand_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnauthorizedPlaySoundRateLimitCommand:");
}

id objc_msgSend_setUnauthorizedPlaySoundRateLimitTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnauthorizedPlaySoundRateLimitTask:");
}

id objc_msgSend_setUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUncertainty:");
}

id objc_msgSend_setUncertaintyInMeters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUncertaintyInMeters:");
}

id objc_msgSend_setUnderlyingDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingDictionary:");
}

id objc_msgSend_setUnderlyingQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnderlyingQueue:");
}

id objc_msgSend_setUndoManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUndoManager:");
}

id objc_msgSend_setUniqueCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUniqueCount:");
}

id objc_msgSend_setUniqueIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUniqueIdentifier:");
}

id objc_msgSend_setUniverse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUniverse:");
}

id objc_msgSend_setUnownedBeacon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUnownedBeacon:");
}

id objc_msgSend_setUpAggregationOnTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpAggregationOnTimer");
}

id objc_msgSend_setUpClassificationActivityWithDeferral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpClassificationActivityWithDeferral:");
}

id objc_msgSend_setUpCloudKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpCloudKit");
}

id objc_msgSend_setUpGPSSubscriptionForSurfaceCal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpGPSSubscriptionForSurfaceCal");
}

id objc_msgSend_setUpMobilityCompanionSyncActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpMobilityCompanionSyncActivity");
}

id objc_msgSend_setUpProcessBoutsActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpProcessBoutsActivity");
}

id objc_msgSend_setUpRepeatingActivityToDownloadTiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpRepeatingActivityToDownloadTiles");
}

id objc_msgSend_setUpSyncActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpSyncActivity");
}

id objc_msgSend_setUpdateCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateCount:");
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateHandler:");
}

id objc_msgSend_setUpdateStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdateStartTime:");
}

id objc_msgSend_setUpdater_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdater:");
}

id objc_msgSend_setUpdating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUpdating:");
}

id objc_msgSend_setUseCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseCase:");
}

id objc_msgSend_setUseDeviceToDeviceEncryption_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseDeviceToDeviceEncryption:");
}

id objc_msgSend_setUseParticleMapMatcherForSnappingInMapIntegrator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseParticleMapMatcherForSnappingInMapIntegrator:");
}

id objc_msgSend_setUseXPCService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseXPCService:");
}

id objc_msgSend_setUseZoneWidePCS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUseZoneWidePCS:");
}

id objc_msgSend_setUserDataPreferred_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDataPreferred:");
}

id objc_msgSend_setUserDefaultVoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserDefaultVoice:");
}

id objc_msgSend_setUserHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserHeight:");
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInfo:");
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserInitiated:");
}

id objc_msgSend_setUserMets_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserMets:");
}

id objc_msgSend_setUserMetsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserMetsSource:");
}

id objc_msgSend_setUserProfile_merge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserProfile:merge:");
}

id objc_msgSend_setUserProfileFromCMNatalimeter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserProfileFromCMNatalimeter:");
}

id objc_msgSend_setUserRecordIDName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserRecordIDName:");
}

id objc_msgSend_setUserVisible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUserVisible:");
}

id objc_msgSend_setUtcHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUtcHawkeyeTask");
}

id objc_msgSend_setUuid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setUuid:");
}

id objc_msgSend_setValid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValid:");
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setValue_forPragmaNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forPragmaNamed:");
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValues:");
}

id objc_msgSend_setVariance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVariance:");
}

id objc_msgSend_setVectorClocks_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVectorClocks:");
}

id objc_msgSend_setVehicleGyroAssistance_vehicleGyro_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVehicleGyroAssistance:vehicleGyro:");
}

id objc_msgSend_setVehicleSpeedAssistance_vehicleSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVehicleSpeedAssistance:vehicleSpeed:");
}

id objc_msgSend_setVehicleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVehicleType:");
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVersion:");
}

id objc_msgSend_setVerticalAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticalAccuracy:");
}

id objc_msgSend_setVerticalSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVerticalSpeed:");
}

id objc_msgSend_setViewInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewInformation:");
}

id objc_msgSend_setViewName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewName:");
}

id objc_msgSend_setViewUUID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setViewUUID:");
}

id objc_msgSend_setVioEstimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVioEstimation:");
}

id objc_msgSend_setVisionNotificationProxy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisionNotificationProxy:");
}

id objc_msgSend_setVisitClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisitClients:");
}

id objc_msgSend_setVisitDoubleTravelDirectionRoadsTwice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVisitDoubleTravelDirectionRoadsTwice:");
}

id objc_msgSend_setVlLocalizationResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVlLocalizationResult:");
}

id objc_msgSend_setVo2MaxModelSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2MaxModelSource:");
}

id objc_msgSend_setVo2Mean_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2Mean:");
}

id objc_msgSend_setVo2Variance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2Variance:");
}

id objc_msgSend_setVo2max_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVo2max:");
}

id objc_msgSend_setVtec0_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setVtec0:");
}

id objc_msgSend_setWatchProductVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWatchProductVersion:");
}

id objc_msgSend_setWaterTempCoefficients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaterTempCoefficients");
}

id objc_msgSend_setWaterTempEst_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaterTempEst:");
}

id objc_msgSend_setWaterTempUncertainty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWaterTempUncertainty:");
}

id objc_msgSend_setWeatherEstimateInMeter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeatherEstimateInMeter:");
}

id objc_msgSend_setWeatherPressure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeatherPressure:");
}

id objc_msgSend_setWeekday_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeekday:");
}

id objc_msgSend_setWeightKG_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWeightKG:");
}

id objc_msgSend_setWifi2GHzCriticalState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifi2GHzCriticalState:");
}

id objc_msgSend_setWifiAltitudeScale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiAltitudeScale:");
}

id objc_msgSend_setWifiAssociated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiAssociated:");
}

id objc_msgSend_setWifiAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiAvailable:");
}

id objc_msgSend_setWifiPower_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiPower:");
}

id objc_msgSend_setWifiPowered_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiPowered:");
}

id objc_msgSend_setWifiScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWifiScan:");
}

id objc_msgSend_setWildKeyBase_interval_fallback_forBeacon_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWildKeyBase:interval:fallback:forBeacon:completion:");
}

id objc_msgSend_setWildKeyBase_interval_fallback_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWildKeyBase:interval:fallback:forDevice:");
}

id objc_msgSend_setWildModeConfigurationCommandWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWildModeConfigurationCommandWithConfiguration:");
}

id objc_msgSend_setWildModeConfigurationTaskWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWildModeConfigurationTaskWithConfiguration:");
}

id objc_msgSend_setWirelessAPs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWirelessAPs:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObject:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithSet:");
}

id objc_msgSend_setWorkLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkLocations:");
}

id objc_msgSend_setWorkingDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkingDirectory:");
}

id objc_msgSend_setWorkoutCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutCount:");
}

id objc_msgSend_setWorkoutEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutEvent:");
}

id objc_msgSend_setWorkoutEventDeprecated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutEventDeprecated:");
}

id objc_msgSend_setWorkoutMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutMode:");
}

id objc_msgSend_setWorkoutSuggestedStopTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutSuggestedStopTimeout:");
}

id objc_msgSend_setWorkoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWorkoutType:");
}

id objc_msgSend_setWriter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWriter:");
}

id objc_msgSend_setX_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setX:");
}

id objc_msgSend_setXPCActivityToDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXPCActivityToDone");
}

id objc_msgSend_setXpcActivityCriteriaOverrides_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setXpcActivityCriteriaOverrides:");
}

id objc_msgSend_setY_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setY:");
}

id objc_msgSend_setYear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYear:");
}

id objc_msgSend_setYieldStatusBeforeCalculatePose_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYieldStatusBeforeCalculatePose:");
}

id objc_msgSend_setYieldType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setYieldType:");
}

id objc_msgSend_setZ_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZ:");
}

id objc_msgSend_setZoneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneIdentifier:");
}

id objc_msgSend_setZoneType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneType:");
}

id objc_msgSend_setZoneid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setZoneid:");
}

id objc_msgSend_set_requiresPowerPluggedIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_requiresPowerPluggedIn:");
}

id objc_msgSend_settings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settings");
}

id objc_msgSend_settingsDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settingsDictionary");
}

id objc_msgSend_settingsVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settingsVersion");
}

id objc_msgSend_settleToTemperatureFromStart_toStop_withCurrent_withDecrement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settleToTemperatureFromStart:toStop:withCurrent:withDecrement:");
}

id objc_msgSend_settledState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "settledState");
}

id objc_msgSend_setup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setup");
}

id objc_msgSend_setupAccessory_withListenerCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAccessory:withListenerCall:");
}

id objc_msgSend_setupAltimeterReleaseTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupAltimeterReleaseTimer");
}

id objc_msgSend_setupCLNotifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupCLNotifiers");
}

id objc_msgSend_setupConfigurationTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupConfigurationTimer");
}

id objc_msgSend_setupDaemonPartOfConditionWithAuthContext_clientKeyPath_universe_identifier_stopMonitoring_callbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDaemonPartOfConditionWithAuthContext:clientKeyPath:universe:identifier:stopMonitoring:callbackHandler:");
}

id objc_msgSend_setupDbCleanupActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDbCleanupActivity");
}

id objc_msgSend_setupDictionary_atKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupDictionary:atKeyPath:");
}

id objc_msgSend_setupEphemeris(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupEphemeris");
}

id objc_msgSend_setupHealthKitQueries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupHealthKitQueries");
}

id objc_msgSend_setupListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupListener");
}

id objc_msgSend_setupListeners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupListeners");
}

id objc_msgSend_setupManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupManager");
}

id objc_msgSend_setupModuleWriters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupModuleWriters");
}

id objc_msgSend_setupQueryTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupQueryTimer");
}

id objc_msgSend_setupService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupService");
}

id objc_msgSend_setupStoreCacheTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupStoreCacheTimer");
}

id objc_msgSend_setupSyncActivity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupSyncActivity");
}

id objc_msgSend_setupTimers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setupTimers");
}

id objc_msgSend_shareDuringEmergency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shareDuringEmergency");
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shared");
}

id objc_msgSend_sharedAVSystemController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedAVSystemController");
}

id objc_msgSend_sharedAccessoryManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedAccessoryManager");
}

id objc_msgSend_sharedBacklight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedBacklight");
}

id objc_msgSend_sharedClockManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedClockManager");
}

id objc_msgSend_sharedConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConfiguration");
}

id objc_msgSend_sharedConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedConnection");
}

id objc_msgSend_sharedDeviceConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedDeviceConnection");
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInstance");
}

id objc_msgSend_sharedInterface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedInterface");
}

id objc_msgSend_sharedMessageCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedMessageCenter");
}

id objc_msgSend_sharedRegistrar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedRegistrar");
}

id objc_msgSend_sharedSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sharedSession");
}

id objc_msgSend_shiftCoordinate_accuracy_shiftedCoordinate_shiftedAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:");
}

id objc_msgSend_shiftLocation_referenceLocation_latitudeShift_longitudeShift_directionShift_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shiftLocation:referenceLocation:latitudeShift:longitudeShift:directionShift:");
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shortValue");
}

id objc_msgSend_shouldActivateDevicePostConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldActivateDevicePostConnection");
}

id objc_msgSend_shouldAttemptForcedHeleMaintenanceOnDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldAttemptForcedHeleMaintenanceOnDevice:");
}

id objc_msgSend_shouldCompleteOnPreemptionByTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldCompleteOnPreemptionByTask:");
}

id objc_msgSend_shouldConfirmHandlingPairingNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldConfirmHandlingPairingNotification");
}

id objc_msgSend_shouldConfirmHandlingQuickSwitchNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldConfirmHandlingQuickSwitchNotification");
}

id objc_msgSend_shouldConnectUsingLeashToDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldConnectUsingLeashToDevice:");
}

id objc_msgSend_shouldDisconnectReconnectForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDisconnectReconnectForDevice:");
}

id objc_msgSend_shouldDiscoverHawkeyeServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDiscoverHawkeyeServices");
}

id objc_msgSend_shouldDiscoverPoshServices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDiscoverPoshServices");
}

id objc_msgSend_shouldDisplayEEDUIWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldDisplayEEDUIWithReply:");
}

id objc_msgSend_shouldEnableGPSAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEnableGPSAtTime:");
}

id objc_msgSend_shouldEnableWifiAtTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEnableWifiAtTime:");
}

id objc_msgSend_shouldEvictForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldEvictForDevice:");
}

id objc_msgSend_shouldFetchLocationsOfInterest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldFetchLocationsOfInterest");
}

id objc_msgSend_shouldForceWriteSampleToHealthKit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldForceWriteSampleToHealthKit");
}

id objc_msgSend_shouldHoldLeashForDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHoldLeashForDevice:");
}

id objc_msgSend_shouldHoldPowerAssertionForScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldHoldPowerAssertionForScan:");
}

id objc_msgSend_shouldKeepLocalDataOnAccountChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldKeepLocalDataOnAccountChange");
}

id objc_msgSend_shouldLockoutNilr_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldLockoutNilr:");
}

id objc_msgSend_shouldMigrate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldMigrate");
}

id objc_msgSend_shouldPlayAudioDuringCountdown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPlayAudioDuringCountdown");
}

id objc_msgSend_shouldPreemptTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldPreemptTask:");
}

id objc_msgSend_shouldRecompute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRecompute:");
}

id objc_msgSend_shouldResetAuthDbOnFullSync(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldResetAuthDbOnFullSync");
}

id objc_msgSend_shouldRunManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldRunManager");
}

id objc_msgSend_shouldSendMoreDataInCurrentSyncSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSendMoreDataInCurrentSyncSession");
}

id objc_msgSend_shouldSendResetNotificationDuringMigrationSyncIgnoringCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSendResetNotificationDuringMigrationSyncIgnoringCache:");
}

id objc_msgSend_shouldServiceQuery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldServiceQuery");
}

id objc_msgSend_shouldStartNewTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldStartNewTrack:");
}

id objc_msgSend_shouldStartSpecialScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldStartSpecialScan");
}

id objc_msgSend_shouldSubmit_calibrationType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldSubmit:calibrationType:");
}

id objc_msgSend_shouldThrottleNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldThrottleNotification");
}

id objc_msgSend_shouldTriggerFloorTransitionHarvest_atTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldTriggerFloorTransitionHarvest:atTime:");
}

id objc_msgSend_shouldUseAggressiveSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseAggressiveSettings");
}

id objc_msgSend_shouldUseIDSForLocationStreaming(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shouldUseIDSForLocationStreaming");
}

id objc_msgSend_showEngineeringUIForOwnerUT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showEngineeringUIForOwnerUT:");
}

id objc_msgSend_showSAUserFeedbackDialogue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "showSAUserFeedbackDialogue:");
}

id objc_msgSend_shutdown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "shutdown");
}

id objc_msgSend_sid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sid");
}

id objc_msgSend_signData_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signData:withCompletion:");
}

id objc_msgSend_signalEnvironmentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signalEnvironmentType");
}

id objc_msgSend_signatureWithDomain_type_subType_subtypeContext_detectedProcess_triggerThresholdValues_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureWithDomain:type:subType:subtypeContext:detectedProcess:triggerThresholdValues:");
}

id objc_msgSend_significantFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "significantFence");
}

id objc_msgSend_silo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "silo");
}

id objc_msgSend_simpleBeacons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simpleBeacons");
}

id objc_msgSend_simplifiedLength_threshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simplifiedLength:threshold:");
}

id objc_msgSend_simulateBeaconWithProximityUUID_major_minor_eventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateBeaconWithProximityUUID:major:minor:eventType:");
}

id objc_msgSend_simulateEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateEvent:");
}

id objc_msgSend_simulateFenceWithBundleID_andFenceID_eventType_atLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateFenceWithBundleID:andFenceID:eventType:atLocation:");
}

id objc_msgSend_simulateSignificantLocationChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateSignificantLocationChange:");
}

id objc_msgSend_simulateTriggerWithDelay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateTriggerWithDelay:");
}

id objc_msgSend_simulateTriggerWithDelay_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateTriggerWithDelay:forMode:");
}

id objc_msgSend_simulateTrustedCrashVerification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateTrustedCrashVerification");
}

id objc_msgSend_simulateVisit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "simulateVisit:");
}

id objc_msgSend_singleConnTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleConnTime");
}

id objc_msgSend_singleVisitDetectionMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "singleVisitDetectionMetrics");
}

id objc_msgSend_sinkWithCompletion_receiveInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sinkWithCompletion:receiveInput:");
}

id objc_msgSend_sizeOfType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sizeOfType");
}

id objc_msgSend_skipUpdatingRegulatoryDomain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "skipUpdatingRegulatoryDomain");
}

id objc_msgSend_slamOrigin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slamOrigin");
}

id objc_msgSend_slamTrackDescriptors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slamTrackDescriptors");
}

id objc_msgSend_slamTrackImageIndices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slamTrackImageIndices");
}

id objc_msgSend_slamTrackObservations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slamTrackObservations");
}

id objc_msgSend_slamTracks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slamTracks");
}

id objc_msgSend_slamTracks2D(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slamTracks2D");
}

id objc_msgSend_slamTracksCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slamTracksCount");
}

id objc_msgSend_sleepDuration_ms(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepDuration_ms");
}

id objc_msgSend_slope(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slope");
}

id objc_msgSend_slotID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slotID");
}

id objc_msgSend_slotId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "slotId");
}

id objc_msgSend_snapLocation_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapLocation:withReply:");
}

id objc_msgSend_snapshotWithSignature_delay_events_payload_actions_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snapshotWithSignature:delay:events:payload:actions:reply:");
}

id objc_msgSend_snr(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "snr");
}

id objc_msgSend_sortDescriptorWithKey_ascending_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDescriptorWithKey:ascending:");
}

id objc_msgSend_sortDevicesBasedOnConnectionlikelihood_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortDevicesBasedOnConnectionlikelihood:");
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingComparator:");
}

id objc_msgSend_sortUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingComparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingComparator:");
}

id objc_msgSend_sortedArrayUsingDescriptors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingDescriptors:");
}

id objc_msgSend_sortedArrayUsingSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sortedArrayUsingSelector:");
}

id objc_msgSend_sosState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sosState");
}

id objc_msgSend_source(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "source");
}

id objc_msgSend_sourceAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceAccuracy");
}

id objc_msgSend_sourceEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceEvent");
}

id objc_msgSend_sourceEventMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceEventMetadata");
}

id objc_msgSend_sourceId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceId");
}

id objc_msgSend_sourceInformation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceInformation");
}

id objc_msgSend_sourceRevision(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceRevision");
}

id objc_msgSend_sourceUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sourceUpdated:");
}

id objc_msgSend_southEastLatitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "southEastLatitude");
}

id objc_msgSend_southEastLongitude(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "southEastLongitude");
}

id objc_msgSend_southLat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "southLat");
}

id objc_msgSend_speed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speed");
}

id objc_msgSend_speedAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedAccuracy");
}

id objc_msgSend_speedCurrent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedCurrent");
}

id objc_msgSend_speedInstant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedInstant");
}

id objc_msgSend_speedLB(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedLB");
}

id objc_msgSend_speedLimit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedLimit");
}

id objc_msgSend_speedLimitIsMPH(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedLimitIsMPH");
}

id objc_msgSend_speedMean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedMean");
}

id objc_msgSend_speedUB(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedUB");
}

id objc_msgSend_speedVariance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "speedVariance");
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ssid");
}

id objc_msgSend_stableIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stableIdentifier");
}

id objc_msgSend_stageFirmwareUpdateOnAccessoryList_withUserIntent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stageFirmwareUpdateOnAccessoryList:withUserIntent:");
}

id objc_msgSend_stairClimbingModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stairClimbingModel");
}

id objc_msgSend_stalenessTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stalenessTime");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start");
}

id objc_msgSend_start_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start:");
}

id objc_msgSend_start_recentLocation_triggerDelay_recentWeatherData_maxFileCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "start:recentLocation:triggerDelay:recentWeatherData:maxFileCount:");
}

id objc_msgSend_startAdvertising_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAdvertising:");
}

id objc_msgSend_startAggressiveAdvertisingTaskWithTimeout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAggressiveAdvertisingTaskWithTimeout:");
}

id objc_msgSend_startAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAggressiveScan");
}

id objc_msgSend_startAt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAt");
}

id objc_msgSend_startAt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startAt:");
}

id objc_msgSend_startBTFindingScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBTFindingScan");
}

id objc_msgSend_startBackgroundInertialOdometryUpdatesForClient_withIdentifier_usingReferenceFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBackgroundInertialOdometryUpdatesForClient:withIdentifier:usingReferenceFrame:");
}

id objc_msgSend_startBuffering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startBuffering");
}

id objc_msgSend_startCatalogDownload_options_then_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startCatalogDownload:options:then:");
}

id objc_msgSend_startCoexFriendlyAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startCoexFriendlyAggressiveScan");
}

id objc_msgSend_startConnectionEventCounterForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startConnectionEventCounterForPeripheral:");
}

id objc_msgSend_startConnectionlessScanningWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startConnectionlessScanningWithData:");
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDate");
}

id objc_msgSend_startDayOfWeek(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDayOfWeek");
}

id objc_msgSend_startDem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDem");
}

id objc_msgSend_startDeviceDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDeviceDiscovery");
}

id objc_msgSend_startDeviceDiscoveryCommon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDeviceDiscoveryCommon");
}

id objc_msgSend_startDownload_then_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startDownload:then:");
}

id objc_msgSend_startElevationSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startElevationSpectatorUpdates");
}

id objc_msgSend_startElevationUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startElevationUpdates");
}

id objc_msgSend_startEventCounter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startEventCounter");
}

id objc_msgSend_startFactoryGYTT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFactoryGYTT");
}

id objc_msgSend_startFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startFirmwareUpdate:");
}

id objc_msgSend_startGeoFenceWithRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startGeoFenceWithRadius:");
}

id objc_msgSend_startGpsOdometerSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startGpsOdometerSpectatorUpdates");
}

id objc_msgSend_startGpsOdometerUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startGpsOdometerUpdates");
}

id objc_msgSend_startHKCollector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startHKCollector:");
}

id objc_msgSend_startHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startHawkeyeLowEnergyScan");
}

id objc_msgSend_startJunction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startJunction");
}

id objc_msgSend_startLeechingLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingLocation");
}

id objc_msgSend_startLeechingLowConfidenceVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingLowConfidenceVisitsForClient:");
}

id objc_msgSend_startLeechingLowConfidenceVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingLowConfidenceVisitsWithHandler:");
}

id objc_msgSend_startLeechingVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingVisitsForClient:");
}

id objc_msgSend_startLeechingVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLeechingVisitsWithHandler:");
}

id objc_msgSend_startLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLocation");
}

id objc_msgSend_startLocationUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startLocationUpdates");
}

id objc_msgSend_startMaintenanceTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMaintenanceTimer");
}

id objc_msgSend_startMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoring");
}

id objc_msgSend_startMonitoringAvengerAdvertisementsForClient_clientName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringAvengerAdvertisementsForClient:clientName:");
}

id objc_msgSend_startMonitoringCapabilityChangeForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringCapabilityChangeForClient:");
}

id objc_msgSend_startMonitoringConnectionStateChangeForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringConnectionStateChangeForClient:");
}

id objc_msgSend_startMonitoringDeviceForFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringDeviceForFirmwareUpdate:");
}

id objc_msgSend_startMonitoringEmergencyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringEmergencyState:");
}

id objc_msgSend_startMonitoringEventType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringEventType:error:");
}

id objc_msgSend_startMonitoringForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringForRegion:");
}

id objc_msgSend_startMonitoringPlaceInferencesForCache(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringPlaceInferencesForCache");
}

id objc_msgSend_startMonitoringPlaceInferencesWithOptions_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringPlaceInferencesWithOptions:handler:");
}

id objc_msgSend_startMonitoringRelayLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringRelayLocation:");
}

id objc_msgSend_startMonitoringScenarioTriggerOfType_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringScenarioTriggerOfType:forClient:");
}

id objc_msgSend_startMonitoringScenarioTriggerOfType_withHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringScenarioTriggerOfType:withHandler:");
}

id objc_msgSend_startMonitoringTransitStateForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringTransitStateForClient:");
}

id objc_msgSend_startMonitoringVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringVisitsForClient:");
}

id objc_msgSend_startMonitoringVisitsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMonitoringVisitsWithHandler:");
}

id objc_msgSend_startMotionDataListenerWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startMotionDataListenerWithOptions:");
}

id objc_msgSend_startNewMaintEventWithCount_leashable_deviceTypes_coex_loiType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNewMaintEventWithCount:leashable:deviceTypes:coex:loiType:");
}

id objc_msgSend_startNonOwnerAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNonOwnerAggressiveAdvertisingTask");
}

id objc_msgSend_startNonOwnerPoshAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNonOwnerPoshAggressiveAdvertisingTask");
}

id objc_msgSend_startNonOwnerShortSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNonOwnerShortSoundHawkeyeTask");
}

id objc_msgSend_startNonOwnerShortSoundPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNonOwnerShortSoundPoshTask");
}

id objc_msgSend_startNonOwnerSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNonOwnerSoundHawkeyeTask");
}

id objc_msgSend_startNonOwnerSoundPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startNonOwnerSoundPoshTask");
}

id objc_msgSend_startOfDayForDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startOfDayForDate:");
}

id objc_msgSend_startPacketCapture_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPacketCapture:");
}

id objc_msgSend_startPermanentDeviceDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startPermanentDeviceDiscovery");
}

id objc_msgSend_startRanging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRanging");
}

id objc_msgSend_startRangingHawkeyeTaskWithTargetEventCounter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRangingHawkeyeTaskWithTargetEventCounter:");
}

id objc_msgSend_startRangingNonOwnerTaskWithTargetEventCounter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRangingNonOwnerTaskWithTargetEventCounter:");
}

id objc_msgSend_startRoseRangingCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRoseRangingCommandWithParameters:");
}

id objc_msgSend_startRoseRangingNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRoseRangingNonOwnerCommandWithParameters:");
}

id objc_msgSend_startRoseRangingTaskWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startRoseRangingTaskWithParameters:");
}

id objc_msgSend_startScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScan");
}

id objc_msgSend_startScanForBeaconTypes_updateHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanForBeaconTypes:updateHandler:");
}

id objc_msgSend_startScanningAwaitingResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanningAwaitingResponse");
}

id objc_msgSend_startScanningWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanningWithOptions:");
}

id objc_msgSend_startScanningWithUseCase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanningWithUseCase:");
}

id objc_msgSend_startScanningWithUseCase_isScanUpgrade_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startScanningWithUseCase:isScanUpgrade:");
}

id objc_msgSend_startService_interface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startService:interface:");
}

id objc_msgSend_startSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSession");
}

id objc_msgSend_startSessionForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionForClient:");
}

id objc_msgSend_startSessionForClient_sequenceNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionForClient:sequenceNumber:");
}

id objc_msgSend_startSessionForClient_withIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionForClient:withIdentifier:");
}

id objc_msgSend_startSessionMetricsWithTime_session_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionMetricsWithTime:session:");
}

id objc_msgSend_startSessionWithState_fromClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSessionWithState:fromClient:");
}

id objc_msgSend_startShortSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startShortSoundHawkeyeTask");
}

id objc_msgSend_startSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSoundHawkeyeTask");
}

id objc_msgSend_startSoundSequenceCommandWithSequence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSoundSequenceCommandWithSequence:");
}

id objc_msgSend_startSoundSequenceTaskWithEncodedSequence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSoundSequenceTaskWithEncodedSequence:");
}

id objc_msgSend_startSubmersionPowerAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startSubmersionPowerAssertion");
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTime");
}

id objc_msgSend_startTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTrack:");
}

id objc_msgSend_startTrackingZone_forStates_transitionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startTrackingZone:forStates:transitionHandler:");
}

id objc_msgSend_startUDPListner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUDPListner");
}

id objc_msgSend_startUnauthorizedShortSoundCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUnauthorizedShortSoundCommand");
}

id objc_msgSend_startUnauthorizedShortSoundTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUnauthorizedShortSoundTask");
}

id objc_msgSend_startUnauthorizedSoundCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUnauthorizedSoundCommand");
}

id objc_msgSend_startUnauthorizedSoundTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUnauthorizedSoundTask");
}

id objc_msgSend_startUnlocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUnlocked");
}

id objc_msgSend_startUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUpdates");
}

id objc_msgSend_startUpdatesforAnalyzer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUpdatesforAnalyzer:");
}

id objc_msgSend_startUpdatingLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUpdatingLocation");
}

id objc_msgSend_startUpdatingLocationAtLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUpdatingLocationAtLocation:");
}

id objc_msgSend_startUpdatingSimpleBeaconsWithContext_collectionDifference_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startUpdatingSimpleBeaconsWithContext:collectionDifference:completion:");
}

id objc_msgSend_startVisitMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startVisitMonitoring");
}

id objc_msgSend_startWatchAdvertisementBufferScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWatchAdvertisementBufferScan");
}

id objc_msgSend_startWatchAdvertisementBufferScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWatchAdvertisementBufferScan:");
}

id objc_msgSend_startWatchAdvertisementBufferScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWatchAdvertisementBufferScanning");
}

id objc_msgSend_startWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWithError:");
}

id objc_msgSend_startWsbClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startWsbClient");
}

id objc_msgSend_startedAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startedAggressiveDiscoveryScan");
}

id objc_msgSend_startedBTFindingDiscoveryScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startedBTFindingDiscoveryScan");
}

id objc_msgSend_startedHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "startedHawkeyeLowEnergyScan");
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "state");
}

id objc_msgSend_stateFromDepth_forceSubmersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateFromDepth:forceSubmersion:");
}

id objc_msgSend_stateHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateHandler");
}

id objc_msgSend_stateInfoWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateInfoWithCompletion:");
}

id objc_msgSend_stateSerialization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateSerialization");
}

id objc_msgSend_stateUpdateEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stateUpdateEvent");
}

id objc_msgSend_staticFlag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "staticFlag");
}

id objc_msgSend_stationary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stationary");
}

id objc_msgSend_stationaryTimeInSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stationaryTimeInSeconds");
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "status");
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusCode");
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusFlags");
}

id objc_msgSend_statusHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusHandler");
}

id objc_msgSend_statusInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "statusInfo");
}

id objc_msgSend_steadinessClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "steadinessClients");
}

id objc_msgSend_steadyStateHR(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "steadyStateHR");
}

id objc_msgSend_stepCadenceCurrent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepCadenceCurrent");
}

id objc_msgSend_stepCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepCount");
}

id objc_msgSend_stepCountData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepCountData");
}

id objc_msgSend_stepCountElevationNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepCountElevationNotification:");
}

id objc_msgSend_stepCountGPS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepCountGPS");
}

id objc_msgSend_stepLength(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepLength");
}

id objc_msgSend_steps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "steps");
}

id objc_msgSend_stepsInWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepsInWindow");
}

id objc_msgSend_stepsSinceNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepsSinceNMinusOneStateChange");
}

id objc_msgSend_stepsSinceNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stepsSinceNMinusTwoStateChange");
}

id objc_msgSend_stewieSupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stewieSupported");
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stop");
}

id objc_msgSend_stopActiveLocationRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopActiveLocationRequest");
}

id objc_msgSend_stopAdvertising(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAdvertising");
}

id objc_msgSend_stopAggressiveAdvertisingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAggressiveAdvertisingTask");
}

id objc_msgSend_stopAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopAggressiveScan");
}

id objc_msgSend_stopBTFindingScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopBTFindingScan");
}

id objc_msgSend_stopBTFindingScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopBTFindingScan:");
}

id objc_msgSend_stopBackgroundInertialOdometryUpdatesForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopBackgroundInertialOdometryUpdatesForClient:");
}

id objc_msgSend_stopCircularZoneMonitoringForClient_withZoneId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopCircularZoneMonitoringForClient:withZoneId:");
}

id objc_msgSend_stopCoexFriendlyAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopCoexFriendlyAggressiveScan");
}

id objc_msgSend_stopConnectionEventCounterForPeripheral_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopConnectionEventCounterForPeripheral:");
}

id objc_msgSend_stopConnectionlessScanningWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopConnectionlessScanningWithData:");
}

id objc_msgSend_stopDataCollection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopDataCollection");
}

id objc_msgSend_stopDem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopDem");
}

id objc_msgSend_stopDeviceDiscovery(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopDeviceDiscovery");
}

id objc_msgSend_stopElevationSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopElevationSpectatorUpdates");
}

id objc_msgSend_stopElevationUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopElevationUpdates");
}

id objc_msgSend_stopEventCounter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopEventCounter");
}

id objc_msgSend_stopFrom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopFrom");
}

id objc_msgSend_stopGeoFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopGeoFence");
}

id objc_msgSend_stopGpsOdometerSpectatorUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopGpsOdometerSpectatorUpdates");
}

id objc_msgSend_stopGpsOdometerUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopGpsOdometerUpdates");
}

id objc_msgSend_stopHKCollector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopHKCollector");
}

id objc_msgSend_stopHealthKitQueries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopHealthKitQueries");
}

id objc_msgSend_stopID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopID");
}

id objc_msgSend_stopLeechingLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLeechingLocation");
}

id objc_msgSend_stopLeechingLowConfidenceVisits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLeechingLowConfidenceVisits");
}

id objc_msgSend_stopLeechingLowConfidenceVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLeechingLowConfidenceVisitsForClient:");
}

id objc_msgSend_stopLeechingVisits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLeechingVisits");
}

id objc_msgSend_stopLeechingVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLeechingVisitsForClient:");
}

id objc_msgSend_stopListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopListener");
}

id objc_msgSend_stopListeningForForScheduledTileDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopListeningForForScheduledTileDownload:");
}

id objc_msgSend_stopLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLocation");
}

id objc_msgSend_stopLocationSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLocationSession");
}

id objc_msgSend_stopLocationUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLocationUpdates");
}

id objc_msgSend_stopLogging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopLogging");
}

id objc_msgSend_stopMaintenanceTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMaintenanceTimer");
}

id objc_msgSend_stopMonitoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoring");
}

id objc_msgSend_stopMonitoringAllConditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringAllConditions");
}

id objc_msgSend_stopMonitoringAvengerAdvertisementsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringAvengerAdvertisementsForClient:");
}

id objc_msgSend_stopMonitoringCapabilityChangeForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringCapabilityChangeForClient:");
}

id objc_msgSend_stopMonitoringConnectionStateChangeForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringConnectionStateChangeForClient:");
}

id objc_msgSend_stopMonitoringDeviceForFirmwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringDeviceForFirmwareUpdate:");
}

id objc_msgSend_stopMonitoringEmergencyState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringEmergencyState:");
}

id objc_msgSend_stopMonitoringEventType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringEventType:");
}

id objc_msgSend_stopMonitoringForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringForClient:");
}

id objc_msgSend_stopMonitoringForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringForRegion:");
}

id objc_msgSend_stopMonitoringHomeKitAccessoryForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringHomeKitAccessoryForClient:");
}

id objc_msgSend_stopMonitoringHomeKitSceneForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringHomeKitSceneForClient:");
}

id objc_msgSend_stopMonitoringNowPlayingForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringNowPlayingForClient:");
}

id objc_msgSend_stopMonitoringPlaceInferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringPlaceInferences");
}

id objc_msgSend_stopMonitoringRelayLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringRelayLocation:");
}

id objc_msgSend_stopMonitoringScenarioTriggerOfType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringScenarioTriggerOfType:");
}

id objc_msgSend_stopMonitoringScenarioTriggerOfType_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringScenarioTriggerOfType:forClient:");
}

id objc_msgSend_stopMonitoringTransitStateForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringTransitStateForClient:");
}

id objc_msgSend_stopMonitoringVisits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringVisits");
}

id objc_msgSend_stopMonitoringVisitsForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMonitoringVisitsForClient:");
}

id objc_msgSend_stopMotionAlarm(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMotionAlarm");
}

id objc_msgSend_stopMotionDataListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMotionDataListener");
}

id objc_msgSend_stopMotionDataProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopMotionDataProvider");
}

id objc_msgSend_stopNonOwnerSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopNonOwnerSoundHawkeyeTask");
}

id objc_msgSend_stopNonOwnerSoundPoshTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopNonOwnerSoundPoshTask");
}

id objc_msgSend_stopPacketCapture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopPacketCapture");
}

id objc_msgSend_stopQuery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopQuery:");
}

id objc_msgSend_stopRanging(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRanging");
}

id objc_msgSend_stopRangingHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRangingHawkeyeTask");
}

id objc_msgSend_stopRangingNonOwnerTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRangingNonOwnerTask");
}

id objc_msgSend_stopRoseCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRoseCommandWithParameters:");
}

id objc_msgSend_stopRoseNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRoseNonOwnerCommandWithParameters:");
}

id objc_msgSend_stopRoseRangingCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRoseRangingCommand");
}

id objc_msgSend_stopRoseRangingNonOwnerCommandWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRoseRangingNonOwnerCommandWithParameters:");
}

id objc_msgSend_stopRoseRangingTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRoseRangingTask");
}

id objc_msgSend_stopRoseTaskWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopRoseTaskWithParameters:");
}

id objc_msgSend_stopScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopScan");
}

id objc_msgSend_stopScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopScanning");
}

id objc_msgSend_stopScanningAwaitingResponse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopScanningAwaitingResponse");
}

id objc_msgSend_stopScanningForType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopScanningForType:");
}

id objc_msgSend_stopService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopService");
}

id objc_msgSend_stopSoundCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSoundCommand");
}

id objc_msgSend_stopSoundHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSoundHawkeyeTask");
}

id objc_msgSend_stopSoundTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSoundTask");
}

id objc_msgSend_stopSyncing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopSyncing:");
}

id objc_msgSend_stopTemporaryLongAggressiveScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTemporaryLongAggressiveScan");
}

id objc_msgSend_stopTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTime");
}

id objc_msgSend_stopTo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTo");
}

id objc_msgSend_stopTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrack:");
}

id objc_msgSend_stopTrackingZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrackingZone:");
}

id objc_msgSend_stopTrackingZones(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopTrackingZones");
}

id objc_msgSend_stopUnauthorizedSoundCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopUnauthorizedSoundCommand");
}

id objc_msgSend_stopUpdatingLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopUpdatingLocation");
}

id objc_msgSend_stopUpdatingSimpleBeaconsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopUpdatingSimpleBeaconsWithCompletion:");
}

id objc_msgSend_stopWatchAdvertisementBufferScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopWatchAdvertisementBufferScan");
}

id objc_msgSend_stopWatchAdvertisementBufferScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopWatchAdvertisementBufferScan:");
}

id objc_msgSend_stopWatchAdvertisementBufferScanning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stopWatchAdvertisementBufferScanning");
}

id objc_msgSend_stoppedAggressiveDiscoveryScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stoppedAggressiveDiscoveryScan");
}

id objc_msgSend_stoppedBTFindingDiscoveryScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stoppedBTFindingDiscoveryScan");
}

id objc_msgSend_stoppedHawkeyeLowEnergyScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stoppedHawkeyeLowEnergyScan");
}

id objc_msgSend_storeCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeCache:");
}

id objc_msgSend_storeDataInPersistentStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeDataInPersistentStore");
}

id objc_msgSend_storeFrontIdentifierPromise(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeFrontIdentifierPromise");
}

id objc_msgSend_storeHRRecoveryToHealthKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeHRRecoveryToHealthKit:");
}

id objc_msgSend_storeLastAWDTimestamps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeLastAWDTimestamps");
}

id objc_msgSend_storeRsrpUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeRsrpUpdate:");
}

id objc_msgSend_storeWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "storeWithDictionary:");
}

id objc_msgSend_streamingBitrate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamingBitrate");
}

id objc_msgSend_streamingConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamingConnection");
}

id objc_msgSend_streamingFPS(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "streamingFPS");
}

id objc_msgSend_strideCalData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideCalData");
}

id objc_msgSend_strideCalibrationDatabase_didInsertEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideCalibrationDatabase:didInsertEntry:");
}

id objc_msgSend_strideCalibratorSetSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideCalibratorSetSession:");
}

id objc_msgSend_strideLengthForStepCadence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideLengthForStepCadence:");
}

id objc_msgSend_strideLengthFromStartDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "strideLengthFromStartDate:endDate:");
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "string");
}

id objc_msgSend_stringByAddingPercentEncodingWithAllowedCharacters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAddingPercentEncodingWithAllowedCharacters:");
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathExtension:");
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingString:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByDeletingLastPathComponent");
}

id objc_msgSend_stringByDeletingPathExtension(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByDeletingPathExtension");
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringByResolvingSymlinksInPath(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByResolvingSymlinksInPath");
}

id objc_msgSend_stringByTrimmingCharactersInSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByTrimmingCharactersInSet:");
}

id objc_msgSend_stringForKey_atKeyPath_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:atKeyPath:defaultValue:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringValue");
}

id objc_msgSend_stringWithCString_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCString:encoding:");
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithCapacity:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithString:");
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithUTF8String:");
}

id objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithValidatedFormat:validFormatSpecifiers:error:");
}

id objc_msgSend_subAdministrativeArea(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subAdministrativeArea");
}

id objc_msgSend_subIdentityId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subIdentityId");
}

id objc_msgSend_subIdentityIdWithType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subIdentityIdWithType");
}

id objc_msgSend_subIdentityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subIdentityType");
}

id objc_msgSend_subLocality(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subLocality");
}

id objc_msgSend_subThoroughfare(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subThoroughfare");
}

id objc_msgSend_subarrayWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subarrayWithRange:");
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_subjectToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subjectToken");
}

id objc_msgSend_subjectUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subjectUUID");
}

id objc_msgSend_submersionMeasurementUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submersionMeasurementUpdate:");
}

id objc_msgSend_submersionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submersionState");
}

id objc_msgSend_submersionStateMachine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submersionStateMachine");
}

id objc_msgSend_submersionStateUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submersionStateUpdate:");
}

id objc_msgSend_submitAWDMetric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitAWDMetric");
}

id objc_msgSend_submitAllMetricsFromNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitAllMetricsFromNotification:");
}

id objc_msgSend_submitBOMMetricsBoot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitBOMMetricsBoot");
}

id objc_msgSend_submitBOMMetricsScansCompleted_andTimeSinceLastDisable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitBOMMetricsScansCompleted:andTimeSinceLastDisable:");
}

id objc_msgSend_submitBufferEmptyAnalyticsCounts_numNOApplePosh_numNONonApplePosh_numWildAppleType18_numWildApplePosh_numWildNonApplePosh_totalNearOwnerAdv_totalWildAdv_timeSinceLastBufferEmpty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitBufferEmptyAnalyticsCounts:numNOApplePosh:numNONonApplePosh:numWildAppleType18:numWildApplePosh:numWildNonApplePosh:totalNearOwnerAdv:totalWildAdv:timeSinceLastBufferEmpty:");
}

id objc_msgSend_submitCAConnectionMetrics_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCAConnectionMetrics:forDevice:");
}

id objc_msgSend_submitCAMaintenanceMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCAMaintenanceMetrics:");
}

id objc_msgSend_submitCarMaintConnectionMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCarMaintConnectionMetrics:");
}

id objc_msgSend_submitCarMaintMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCarMaintMetrics:");
}

id objc_msgSend_submitClientRequestsEvent_client_scanType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitClientRequestsEvent:client:scanType:");
}

id objc_msgSend_submitCoexMetricToCAWithBatteryLevelAtCallStart_batteryLevelAtCallEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCoexMetricToCAWithBatteryLevelAtCallStart:batteryLevelAtCallEnd:");
}

id objc_msgSend_submitCompletedMaintenanceMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitCompletedMaintenanceMetrics:");
}

id objc_msgSend_submitConnectionAttemptEvent_numberBTConnectionAttempts_connectionReason_deviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitConnectionAttemptEvent:numberBTConnectionAttempts:connectionReason:deviceType:");
}

id objc_msgSend_submitConnectionAttemptSuccessEvent_krMaterial_connectionReason_deviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitConnectionAttemptSuccessEvent:krMaterial:connectionReason:deviceType:");
}

id objc_msgSend_submitData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitData");
}

id objc_msgSend_submitEmptyFinalResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEmptyFinalResult");
}

id objc_msgSend_submitEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitEvent:");
}

id objc_msgSend_submitFalseDetectionMetricsWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitFalseDetectionMetricsWithType:");
}

id objc_msgSend_submitIntervalMetrics_forEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitIntervalMetrics:forEvent:");
}

id objc_msgSend_submitKeyFetchEvent_numberMaterials_isDrift_deviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitKeyFetchEvent:numberMaterials:isDrift:deviceType:");
}

id objc_msgSend_submitLatencyMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitLatencyMetrics");
}

id objc_msgSend_submitMaintenanceMetrics_forDevice_withReason_andCategory_andDuration_leashable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitMaintenanceMetrics:forDevice:withReason:andCategory:andDuration:leashable:");
}

id objc_msgSend_submitMetricsIfPossible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitMetricsIfPossible:");
}

id objc_msgSend_submitNonTimerMaintenanceMetricsForDevice_proactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitNonTimerMaintenanceMetricsForDevice:proactive:");
}

id objc_msgSend_submitPercentageMetricsForEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitPercentageMetricsForEvent:");
}

id objc_msgSend_submitPowerLogEvent_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitPowerLogEvent:data:");
}

id objc_msgSend_submitRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitRequest:");
}

id objc_msgSend_submitScanTypeChangeEvent_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitScanTypeChangeEvent:type:");
}

id objc_msgSend_submitTaskMetricsForDevice_task_completed_errorCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitTaskMetricsForDevice:task:completed:errorCode:");
}

id objc_msgSend_submitUnexpectedMissingBeaconMetrics_disconnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitUnexpectedMissingBeaconMetrics:disconnected:");
}

id objc_msgSend_submitUserStats_payload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitUserStats:payload:");
}

id objc_msgSend_submitUtObservationActionOfType_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitUtObservationActionOfType:forDevice:");
}

id objc_msgSend_submitWifiAvailabilityEventToBiome(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitWifiAvailabilityEventToBiome");
}

id objc_msgSend_submitWowChangeEventToBiome(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitWowChangeEventToBiome");
}

id objc_msgSend_subpathsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subpathsAtPath:");
}

id objc_msgSend_subscribeOn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscribeOn:");
}

id objc_msgSend_subscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscription");
}

id objc_msgSend_subscriptionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionType");
}

id objc_msgSend_subscriptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptions");
}

id objc_msgSend_subscriptionsInUse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "subscriptionsInUse");
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringFromIndex:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_sufficientTimeElapsedSinceDisconnectionOfDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sufficientTimeElapsedSinceDisconnectionOfDevice:");
}

id objc_msgSend_sufficientTimeElapsedSinceLastProactiveMaintenanceOfDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sufficientTimeElapsedSinceLastProactiveMaintenanceOfDevice:");
}

id objc_msgSend_sumQuantity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sumQuantity");
}

id objc_msgSend_summaries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summaries");
}

id objc_msgSend_summariesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summariesAtIndex:");
}

id objc_msgSend_summariesCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "summariesCount");
}

id objc_msgSend_supervised(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supervised");
}

id objc_msgSend_supportedRat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportedRat");
}

id objc_msgSend_supportsCapability_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCapability:");
}

id objc_msgSend_supportsCarPlay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsCarPlay");
}

id objc_msgSend_supportsDeviceToDeviceEncryption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsDeviceToDeviceEncryption");
}

id objc_msgSend_supportsFragmentationForOpcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsFragmentationForOpcode:");
}

id objc_msgSend_supportsLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "supportsLocation");
}

id objc_msgSend_suppressShowingInSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suppressShowingInSettings");
}

id objc_msgSend_surfacePressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "surfacePressure");
}

id objc_msgSend_surroundingWifiBands(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "surroundingWifiBands");
}

id objc_msgSend_surroundingWifiBandsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "surroundingWifiBandsAtIndex:");
}

id objc_msgSend_surroundingWifiBandsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "surroundingWifiBandsCount");
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspend");
}

id objc_msgSend_suspiciousDeviceContainsKoreaLocations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "suspiciousDeviceContainsKoreaLocations:");
}

id objc_msgSend_swimWorkoutInstance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "swimWorkoutInstance:");
}

id objc_msgSend_sync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sync:");
}

id objc_msgSend_syncCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncCoordinator");
}

id objc_msgSend_syncCoordinatorWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncCoordinatorWithServiceName:");
}

id objc_msgSend_syncDidComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncDidComplete");
}

id objc_msgSend_syncDidFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncDidFailWithError:");
}

id objc_msgSend_syncKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncKey");
}

id objc_msgSend_syncRestriction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncRestriction");
}

id objc_msgSend_syncService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncService");
}

id objc_msgSend_syncSessionRetryInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncSessionRetryInterval");
}

id objc_msgSend_syncSessionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncSessionType");
}

id objc_msgSend_syncgetActiveCall_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetActiveCall:");
}

id objc_msgSend_syncgetActiveGnssBands_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetActiveGnssBands:");
}

id objc_msgSend_syncgetActiveTechs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetActiveTechs:");
}

id objc_msgSend_syncgetActivityOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetActivityOverride");
}

id objc_msgSend_syncgetAddFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAddFence:");
}

id objc_msgSend_syncgetAddProximityZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAddProximityZone:");
}

id objc_msgSend_syncgetAirplaneMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAirplaneMode:");
}

id objc_msgSend_syncgetAltitude_rel_undulation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAltitude:rel:undulation:");
}

id objc_msgSend_syncgetAltitude_rel_undulation_feedToAltFilter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAltitude:rel:undulation:feedToAltFilter:");
}

id objc_msgSend_syncgetAndSetOrChangeAppClipAuthorizationTime_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAndSetOrChangeAppClipAuthorizationTime:forClient:");
}

id objc_msgSend_syncgetAppAvailabilityForLocation_radius_searchContext_availabilityList_includeRegionalApps_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAppAvailabilityForLocation:radius:searchContext:availabilityList:includeRegionalApps:");
}

id objc_msgSend_syncgetApplyArchivedAuthorizationDecisionsAndDie_unlessTokenMatches_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetApplyArchivedAuthorizationDecisionsAndDie:unlessTokenMatches:");
}

id objc_msgSend_syncgetArchivedAuthorizationDecisions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetArchivedAuthorizationDecisions");
}

id objc_msgSend_syncgetAssociatedNetwork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAssociatedNetwork:");
}

id objc_msgSend_syncgetAuthorizationContextIfClientIsNonZonal_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetAuthorizationContextIfClientIsNonZonal:");
}

id objc_msgSend_syncgetBatterySaverMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetBatterySaverMode");
}

id objc_msgSend_syncgetBestMatchLocation_forCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetBestMatchLocation:forCell:");
}

id objc_msgSend_syncgetBiasFit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetBiasFit:");
}

id objc_msgSend_syncgetCanBundle_performFenceOperationFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetCanBundle:performFenceOperationFor:");
}

id objc_msgSend_syncgetClientEffectiveRegistrationResultWithTransientAwareness_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetClientEffectiveRegistrationResultWithTransientAwareness:");
}

id objc_msgSend_syncgetControlPlaneStatusReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetControlPlaneStatusReport:");
}

id objc_msgSend_syncgetCopyClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetCopyClients");
}

id objc_msgSend_syncgetCopyRawSpeedToKValueBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetCopyRawSpeedToKValueBins");
}

id objc_msgSend_syncgetCopyServingOperator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetCopyServingOperator:");
}

id objc_msgSend_syncgetCopyServingProviderFromCarrierBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetCopyServingProviderFromCarrierBundle:");
}

id objc_msgSend_syncgetCopyStepCadenceToStrideLengthBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetCopyStepCadenceToStrideLengthBins");
}

id objc_msgSend_syncgetDataAvailability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetDataAvailability");
}

id objc_msgSend_syncgetDbUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetDbUUID");
}

id objc_msgSend_syncgetDeleteTileFile_atPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetDeleteTileFile:atPath:");
}

id objc_msgSend_syncgetDeviceUnlockedSinceFirstBoot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetDeviceUnlockedSinceFirstBoot");
}

id objc_msgSend_syncgetDoSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetDoSync:");
}

id objc_msgSend_syncgetEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetEnabled");
}

id objc_msgSend_syncgetFences_forBundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetFences:forBundle:");
}

id objc_msgSend_syncgetFences_forBundle_onBehalfOf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetFences:forBundle:onBehalfOf:");
}

id objc_msgSend_syncgetFences_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetFences:forKey:");
}

id objc_msgSend_syncgetFetchColdStorageConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetFetchColdStorageConfiguration");
}

id objc_msgSend_syncgetForegroundApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetForegroundApp:");
}

id objc_msgSend_syncgetHasLingerClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetHasLingerClients");
}

id objc_msgSend_syncgetHasMonitoredFences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetHasMonitoredFences:");
}

id objc_msgSend_syncgetHasMonitoredRegions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetHasMonitoredRegions:");
}

id objc_msgSend_syncgetIconState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIconState");
}

id objc_msgSend_syncgetInsertWithBias_variance_temperature_timestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetInsertWithBias:variance:temperature:timestamp:");
}

id objc_msgSend_syncgetIsApplicationInstalledLocally_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsApplicationInstalledLocally:");
}

id objc_msgSend_syncgetIsRegisteredOnCell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsRegisteredOnCell");
}

id objc_msgSend_syncgetIsSimulationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsSimulationEnabled");
}

id objc_msgSend_syncgetIsSleeping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsSleeping");
}

id objc_msgSend_syncgetIsStrideCalibrationConvergedMedianForSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsStrideCalibrationConvergedMedianForSpeed:");
}

id objc_msgSend_syncgetIsTimerArmed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsTimerArmed");
}

id objc_msgSend_syncgetIsTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetIsTracking");
}

id objc_msgSend_syncgetLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetLocation:");
}

id objc_msgSend_syncgetLocationClientKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetLocationClientKeys");
}

id objc_msgSend_syncgetLocationPrivate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetLocationPrivate:");
}

id objc_msgSend_syncgetMicroLocationInternalVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetMicroLocationInternalVersion:");
}

id objc_msgSend_syncgetMonitoredRegions_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetMonitoredRegions:forClient:");
}

id objc_msgSend_syncgetName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetName");
}

id objc_msgSend_syncgetNonFactoryRoundCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetNonFactoryRoundCount");
}

id objc_msgSend_syncgetNonSystemLocationClientKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetNonSystemLocationClientKey");
}

id objc_msgSend_syncgetNonSystemLocationClientKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetNonSystemLocationClientKeys");
}

id objc_msgSend_syncgetNumTemperatures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetNumTemperatures");
}

id objc_msgSend_syncgetQueryExerciseMinuteDataSince_records_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryExerciseMinuteDataSince:records:");
}

id objc_msgSend_syncgetQueryLocationsForCells_useCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryLocationsForCells:useCache:");
}

id objc_msgSend_syncgetQueryNatalieDataSince_records_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryNatalieDataSince:records:");
}

id objc_msgSend_syncgetQueryNearbys_forFenceKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryNearbys:forFenceKeys:");
}

id objc_msgSend_syncgetQueryPedometerDataSince_withResponseArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryPedometerDataSince:withResponseArray:");
}

id objc_msgSend_syncgetQueryStartTime_andStopTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetQueryStartTime:andStopTime:");
}

id objc_msgSend_syncgetRawSpeedToKValueDefaultBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRawSpeedToKValueDefaultBins");
}

id objc_msgSend_syncgetReachability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetReachability");
}

id objc_msgSend_syncgetReferenceTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetReferenceTime:");
}

id objc_msgSend_syncgetRefreshCellMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRefreshCellMonitor");
}

id objc_msgSend_syncgetRegisterPowerKeepAlive_client_dbgMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRegisterPowerKeepAlive:client:dbgMessage:");
}

id objc_msgSend_syncgetRegistrationResultToAuthorizationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRegistrationResultToAuthorizationStatus:");
}

id objc_msgSend_syncgetRemoveFence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRemoveFence:");
}

id objc_msgSend_syncgetRemoveProximityZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetRemoveProximityZone:");
}

id objc_msgSend_syncgetResultReady_ForAnalyzer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetResultReady:ForAnalyzer:");
}

id objc_msgSend_syncgetScanResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetScanResult");
}

id objc_msgSend_syncgetSedentaryAlarmData_since_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetSedentaryAlarmData:since:");
}

id objc_msgSend_syncgetServingCells_addNeighborCells_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetServingCells:addNeighborCells:");
}

id objc_msgSend_syncgetSetLocationServicesEnabledStatically_withEventSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetSetLocationServicesEnabledStatically:withEventSource:");
}

id objc_msgSend_syncgetStartScanWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartScanWithParameters:");
}

id objc_msgSend_syncgetStartScanWithType_lowPriority_lowLatency_passive_requester_channels_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartScanWithType:lowPriority:lowLatency:passive:requester:channels:");
}

id objc_msgSend_syncgetStartScanWithType_lowPriority_passive_requester_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartScanWithType:lowPriority:passive:requester:");
}

id objc_msgSend_syncgetStartTimerForClient_andOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartTimerForClient:andOptions:");
}

id objc_msgSend_syncgetStartTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStartTracking");
}

id objc_msgSend_syncgetStatusBarIconForEntityClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStatusBarIconForEntityClass:");
}

id objc_msgSend_syncgetStepCadenceToStrideLengthDefaultBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStepCadenceToStrideLengthDefaultBins");
}

id objc_msgSend_syncgetStopTimerForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStopTimerForClient:");
}

id objc_msgSend_syncgetStopTracking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetStopTracking");
}

id objc_msgSend_syncgetSupportsMiniCalibration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetSupportsMiniCalibration");
}

id objc_msgSend_syncgetTemporaryAuthorizationStatusForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetTemporaryAuthorizationStatusForClient:");
}

id objc_msgSend_syncgetThermalLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetThermalLevel");
}

id objc_msgSend_syncgetTileFilePath_latitude_longitude_isFileAccessible_isTileNotExistingOnServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetTileFilePath:latitude:longitude:isFileAccessible:isTileNotExistingOnServer:");
}

id objc_msgSend_syncgetTransitMacAddressesAmong_nearLatitude_longitude_resultMacAddresses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetTransitMacAddressesAmong:nearLatitude:longitude:resultMacAddresses:");
}

id objc_msgSend_syncgetUserProfile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetUserProfile");
}

id objc_msgSend_syncgetUserProfileInternal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetUserProfileInternal");
}

id objc_msgSend_syncgetWipeDatabase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetWipeDatabase");
}

id objc_msgSend_syncgetZaxisStats_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetZaxisStats:");
}

id objc_msgSend_syncget_prepareSessionEndForSessionType_atEndTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncget_prepareSessionEndForSessionType:atEndTime:");
}

id objc_msgSend_syncgetadvertiseSelfAsBeaconForRegion_power_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "syncgetadvertiseSelfAsBeaconForRegion:power:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronize");
}

id objc_msgSend_synchronizeUserDefaultsDomain_keys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronizeUserDefaultsDomain:keys:");
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:");
}

id objc_msgSend_systemCoexImpact_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemCoexImpact:toState:");
}

id objc_msgSend_systemConnectivity_isConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemConnectivity:isConnected:");
}

id objc_msgSend_systemMetricHeartbeat(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemMetricHeartbeat");
}

id objc_msgSend_systemServicesMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemServicesMap");
}

id objc_msgSend_systemVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemVersion");
}

id objc_msgSend_systemWillSleep_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "systemWillSleep:");
}

id objc_msgSend_taUnknownBeacon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taUnknownBeacon");
}

id objc_msgSend_tac(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tac");
}

id objc_msgSend_tacID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tacID");
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tag");
}

id objc_msgSend_tagSeparationSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagSeparationSession");
}

id objc_msgSend_tagSeparationStateChanged_beaconUUID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tagSeparationStateChanged:beaconUUID:completion:");
}

id objc_msgSend_takeAccuracyEnablementAssertionForClient_withDesiredAccuracy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeAccuracyEnablementAssertionForClient:withDesiredAccuracy:");
}

id objc_msgSend_takeAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeAssertion");
}

id objc_msgSend_takeInUseAssertionForClientKey_reason_assertionLevel_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeInUseAssertionForClientKey:reason:assertionLevel:withReply:");
}

id objc_msgSend_takeMaintenancePowerAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takeMaintenancePowerAssertion");
}

id objc_msgSend_takePower(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takePower");
}

id objc_msgSend_takePowerAndScheduleRelease_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takePowerAndScheduleRelease:");
}

id objc_msgSend_takePowerAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "takePowerAssertion");
}

id objc_msgSend_targetIsInProximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetIsInProximity");
}

id objc_msgSend_targetPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetPressure");
}

id objc_msgSend_targetWithPid_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "targetWithPid:");
}

id objc_msgSend_taskDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskDescription");
}

id objc_msgSend_taskIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskIdentifier");
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskState");
}

id objc_msgSend_tearDownKeyReconciler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownKeyReconciler");
}

id objc_msgSend_tearDownLocationAuthPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tearDownLocationAuthPrompt:");
}

id objc_msgSend_teardownCLNotifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownCLNotifiers");
}

id objc_msgSend_teardownClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownClient:");
}

id objc_msgSend_teardownListeners(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownListeners");
}

id objc_msgSend_teardownManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownManager");
}

id objc_msgSend_teardownService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownService");
}

id objc_msgSend_teardownTimers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "teardownTimers");
}

id objc_msgSend_technology(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "technology");
}

id objc_msgSend_temperature(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temperature");
}

id objc_msgSend_temperatureUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "temperatureUncertainty");
}

id objc_msgSend_terminateActiveLocationRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateActiveLocationRequest");
}

id objc_msgSend_terminateBeaconing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateBeaconing");
}

id objc_msgSend_terminateFinalCrossValidation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateFinalCrossValidation");
}

id objc_msgSend_terminateScanSessionFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateScanSessionFor:");
}

id objc_msgSend_terminateTemporaryLongAggressiveScan_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terminateTemporaryLongAggressiveScan:");
}

id objc_msgSend_terrainElevation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "terrainElevation");
}

id objc_msgSend_testMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testMode");
}

id objc_msgSend_testModeTask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "testModeTask:");
}

id objc_msgSend_thermal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermal");
}

id objc_msgSend_thermalHeavyDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalHeavyDuration");
}

id objc_msgSend_thermalLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalLevel");
}

id objc_msgSend_thermalLevelAtEndOfCall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalLevelAtEndOfCall");
}

id objc_msgSend_thermalLevelAtStartOfCall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalLevelAtStartOfCall");
}

id objc_msgSend_thermalLightDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalLightDuration");
}

id objc_msgSend_thermalModerateDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalModerateDuration");
}

id objc_msgSend_thermalNominalDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalNominalDuration");
}

id objc_msgSend_thermalSleepingDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalSleepingDuration");
}

id objc_msgSend_thermalTrappingDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thermalTrappingDuration");
}

id objc_msgSend_thoroughfare(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thoroughfare");
}

id objc_msgSend_threshold(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "threshold");
}

id objc_msgSend_thresholdBoundsForElevation_andAccuracy_upperBound_lowerBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thresholdBoundsForElevation:andAccuracy:upperBound:lowerBound:");
}

id objc_msgSend_thresholdUpdated_initialized_above_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "thresholdUpdated:initialized:above:");
}

id objc_msgSend_tick_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tick:");
}

id objc_msgSend_tickleArrow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tickleArrow");
}

id objc_msgSend_tilePrefetchPredictionActivityCycleAllowance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tilePrefetchPredictionActivityCycleAllowance");
}

id objc_msgSend_tilePrefetchRelevancyWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tilePrefetchRelevancyWindow");
}

id objc_msgSend_tileSetStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tileSetStyle");
}

id objc_msgSend_tileType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tileType");
}

id objc_msgSend_tileX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tileX");
}

id objc_msgSend_tileY(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tileY");
}

id objc_msgSend_tiles(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tiles");
}

id objc_msgSend_tilesAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tilesAtIndex:");
}

id objc_msgSend_tilesCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tilesCount");
}

id objc_msgSend_timeBetweenHKUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeBetweenHKUpdates");
}

id objc_msgSend_timeBetweenTriggers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeBetweenTriggers");
}

id objc_msgSend_timeEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeEnd");
}

id objc_msgSend_timeEndGpsLocationSegment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeEndGpsLocationSegment");
}

id objc_msgSend_timeFenceExit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeFenceExit");
}

id objc_msgSend_timeFenceStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeFenceStart");
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSince1970");
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceDate:");
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceNow");
}

id objc_msgSend_timeIntervalSinceReferenceDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeIntervalSinceReferenceDate");
}

id objc_msgSend_timeOfCurrentStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeOfCurrentStateChange");
}

id objc_msgSend_timeOfNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeOfNMinusOneStateChange");
}

id objc_msgSend_timeOfNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeOfNMinusTwoStateChange");
}

id objc_msgSend_timeRange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeRange");
}

id objc_msgSend_timeSinceDominantActivityChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeSinceDominantActivityChange");
}

id objc_msgSend_timeSinceMotionActivityChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeSinceMotionActivityChange");
}

id objc_msgSend_timeSinceNMinusOneStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeSinceNMinusOneStateChange");
}

id objc_msgSend_timeSinceNMinusTwoStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeSinceNMinusTwoStateChange");
}

id objc_msgSend_timeSinceWifiRoam(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeSinceWifiRoam");
}

id objc_msgSend_timeStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeStart");
}

id objc_msgSend_timeStartGpsLocationSegment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeStartGpsLocationSegment");
}

id objc_msgSend_timeToActiveGiveup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeToActiveGiveup");
}

id objc_msgSend_timeToInitialStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeToInitialStateChange");
}

id objc_msgSend_timeToRequestCheapActiveLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeToRequestCheapActiveLocation");
}

id objc_msgSend_timeToUnknown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeToUnknown");
}

id objc_msgSend_timeUserGetCloseToVisitLocation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeUserGetCloseToVisitLocation");
}

id objc_msgSend_timeZoneForSecondsFromGMT_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneForSecondsFromGMT:");
}

id objc_msgSend_timeZoneWithAbbreviation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeZoneWithAbbreviation:");
}

id objc_msgSend_timeoutSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timeoutSeconds");
}

id objc_msgSend_timer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timer");
}

id objc_msgSend_timestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestamp");
}

id objc_msgSend_timestampGps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestampGps");
}

id objc_msgSend_timestampOfLastBOMDailyLimitResetDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestampOfLastBOMDailyLimitResetDate");
}

id objc_msgSend_timestampOfLastBeepOnMoveScanDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timestampOfLastBeepOnMoveScanDate");
}

id objc_msgSend_timoutBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "timoutBlock");
}

id objc_msgSend_toCLEEDRequestType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toCLEEDRequestType:");
}

id objc_msgSend_toHex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toHex:");
}

id objc_msgSend_toNSDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toNSDictionary");
}

id objc_msgSend_toggleIntervalTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleIntervalTimer");
}

id objc_msgSend_toggleLocationUpdates_inFitnessSession_inAirborneSession_emergencyEnablementAssertionActive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleLocationUpdates:inFitnessSession:inAirborneSession:emergencyEnablementAssertionActive:");
}

id objc_msgSend_toggleManagerBySettingFlag_toState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleManagerBySettingFlag:toState:");
}

id objc_msgSend_toggleProactiveVehicleDetection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleProactiveVehicleDetection:");
}

id objc_msgSend_toggleSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleSession");
}

id objc_msgSend_toggleUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleUpdates");
}

id objc_msgSend_toggleVehicleStateListener_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleVehicleStateListener:");
}

id objc_msgSend_toggleVehicleStateProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toggleVehicleStateProvider:");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "token");
}

id objc_msgSend_topHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topHeight");
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "topic");
}

id objc_msgSend_totalActiveContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalActiveContexts");
}

id objc_msgSend_totalAttributionCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalAttributionCount");
}

id objc_msgSend_totalConnectionCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalConnectionCount");
}

id objc_msgSend_totalCountIncludingAllSubArchives(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalCountIncludingAllSubArchives");
}

id objc_msgSend_totalDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalDistance");
}

id objc_msgSend_totalDistanceFused(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalDistanceFused");
}

id objc_msgSend_totalDistanceOdometer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalDistanceOdometer");
}

id objc_msgSend_totalDistanceStepCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalDistanceStepCount");
}

id objc_msgSend_totalDistanceStepCountMobility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalDistanceStepCountMobility");
}

id objc_msgSend_totalDistinctVisitCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalDistinctVisitCount");
}

id objc_msgSend_totalEnergyBurned(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalEnergyBurned");
}

id objc_msgSend_totalExpected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalExpected");
}

id objc_msgSend_totalInterVisitMetric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalInterVisitMetric");
}

id objc_msgSend_totalInterval(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalInterval");
}

id objc_msgSend_totalObservationsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalObservationsCount");
}

id objc_msgSend_totalSecondaryPointsUnderAllSubArchives(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalSecondaryPointsUnderAllSubArchives");
}

id objc_msgSend_totalStepCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalStepCount");
}

id objc_msgSend_totalVisitCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalVisitCount");
}

id objc_msgSend_totalWritten(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "totalWritten");
}

id objc_msgSend_touristApp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "touristApp");
}

id objc_msgSend_traceEndpoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "traceEndpoint");
}

id objc_msgSend_track(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "track");
}

id objc_msgSend_trackId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackId");
}

id objc_msgSend_trackedTransportType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackedTransportType");
}

id objc_msgSend_trackingState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trackingState");
}

id objc_msgSend_transform(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transform");
}

id objc_msgSend_transientAwareRegistrationResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transientAwareRegistrationResult");
}

id objc_msgSend_transitionToState_event_task_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionToState:event:task:");
}

id objc_msgSend_transitionWithEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transitionWithEvent:");
}

id objc_msgSend_translateCompanionSyncAuthObjectsInPlace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translateCompanionSyncAuthObjectsInPlace:");
}

id objc_msgSend_translatedKeyForSimulator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedKeyForSimulator:");
}

id objc_msgSend_translatedOpcode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "translatedOpcode");
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "transportType");
}

id objc_msgSend_travelDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "travelDirection");
}

id objc_msgSend_travelTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "travelTime");
}

id objc_msgSend_tremorDetectionService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tremorDetectionService");
}

id objc_msgSend_trigger(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trigger");
}

id objc_msgSend_trigger_metaData_start_end_response_resolution_isNearFall_isFallSubmissionAllowed_isNearFallSubmissionAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trigger:metaData:start:end:response:resolution:isNearFall:isFallSubmissionAllowed:isNearFallSubmissionAllowed:");
}

id objc_msgSend_triggerAnalyticsCollect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerAnalyticsCollect");
}

id objc_msgSend_triggerClearAppClipAuthorizationIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerClearAppClipAuthorizationIfNecessary");
}

id objc_msgSend_triggerKappaWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerKappaWithCompletion:");
}

id objc_msgSend_triggerMetricHeartbeatNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerMetricHeartbeatNotification");
}

id objc_msgSend_triggerRetrocomputeWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerRetrocomputeWithReply:");
}

id objc_msgSend_triggerTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerTimestamp");
}

id objc_msgSend_triggerType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerType");
}

id objc_msgSend_triggerWorkoutLocationEventForTesting_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "triggerWorkoutLocationEventForTesting:withReply:");
}

id objc_msgSend_tripId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tripId");
}

id objc_msgSend_tripLocations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tripLocations");
}

id objc_msgSend_tripSegmentID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tripSegmentID");
}

id objc_msgSend_tripTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tripTimestamp");
}

id objc_msgSend_tropicalSavannaBranchCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tropicalSavannaBranchCount");
}

id objc_msgSend_tropicalSavannaProximity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tropicalSavannaProximity");
}

id objc_msgSend_tropicalSavannaTreeId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "tropicalSavannaTreeId");
}

id objc_msgSend_truncateAtOffset_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "truncateAtOffset:error:");
}

id objc_msgSend_truncatedReason(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "truncatedReason");
}

id objc_msgSend_trustedTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "trustedTimestamp");
}

id objc_msgSend_txPower(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "txPower");
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "type");
}

id objc_msgSend_typeSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "typeSource");
}

id objc_msgSend_uarfcn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uarfcn");
}

id objc_msgSend_uarpAssetLocationType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uarpAssetLocationType");
}

id objc_msgSend_uarpPacketCaptureEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uarpPacketCaptureEnabled");
}

id objc_msgSend_ulCenterFrequency(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ulCenterFrequency");
}

id objc_msgSend_unacknowledgedMessages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unacknowledgedMessages");
}

id objc_msgSend_unarchivedArrayOfObjectsOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedArrayOfObjectsOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClass_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClass:fromData:error:");
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:");
}

id objc_msgSend_unauthorizedTrackingTypeWithCompletion_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unauthorizedTrackingTypeWithCompletion:completion:");
}

id objc_msgSend_uncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uncertainty");
}

id objc_msgSend_uncertaintyInMeters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uncertaintyInMeters");
}

id objc_msgSend_underlyingDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingDictionary");
}

id objc_msgSend_underlyingQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "underlyingQueue");
}

id objc_msgSend_uninstallCurrentFence(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uninstallCurrentFence");
}

id objc_msgSend_unionSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unionSet:");
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uniqueIDOverride");
}

id objc_msgSend_unitFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unitFromString:");
}

id objc_msgSend_universe(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "universe");
}

id objc_msgSend_unixTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unixTime");
}

id objc_msgSend_unknown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unknown");
}

id objc_msgSend_unknownBeaconsForUUIDs_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unknownBeaconsForUUIDs:completion:");
}

id objc_msgSend_unload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unload");
}

id objc_msgSend_unlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unlock");
}

id objc_msgSend_unownedBeacon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unownedBeacon");
}

id objc_msgSend_unpairCommand(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpairCommand");
}

id objc_msgSend_unpairHawkeyeTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpairHawkeyeTask");
}

id objc_msgSend_unpairTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unpairTask");
}

id objc_msgSend_unregister_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregister:forNotification:");
}

id objc_msgSend_unregisterAlarm_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterAlarm:withReply:");
}

id objc_msgSend_unregisterAllDeviceChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterAllDeviceChanges");
}

id objc_msgSend_unregisterAllLocationNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterAllLocationNotifications");
}

id objc_msgSend_unregisterAllZoneChanges(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterAllZoneChanges");
}

id objc_msgSend_unregisterClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient");
}

id objc_msgSend_unregisterClient_forElevationThreshold_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient:forElevationThreshold:");
}

id objc_msgSend_unregisterClient_forNotification_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient:forNotification:");
}

id objc_msgSend_unregisterClient_systemClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterClient:systemClient:");
}

id objc_msgSend_unregisterDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterDevice");
}

id objc_msgSend_unregisterForAlgorithmSources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForAlgorithmSources");
}

id objc_msgSend_unregisterForAppMonitorNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForAppMonitorNotification");
}

id objc_msgSend_unregisterForAvengerScanner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForAvengerScanner");
}

id objc_msgSend_unregisterForBluetoothServiceNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForBluetoothServiceNotification");
}

id objc_msgSend_unregisterForClientManagerNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForClientManagerNotification");
}

id objc_msgSend_unregisterForCompanionConnectionUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForCompanionConnectionUpdate");
}

id objc_msgSend_unregisterForCompanionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForCompanionNotification");
}

id objc_msgSend_unregisterForCyclingWorkoutDistanceUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForCyclingWorkoutDistanceUpdates:");
}

id objc_msgSend_unregisterForDaemonStatusNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDaemonStatusNotification");
}

id objc_msgSend_unregisterForData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForData:");
}

id objc_msgSend_unregisterForDataProtectionManagerNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDataProtectionManagerNotification");
}

id objc_msgSend_unregisterForDataProtectionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDataProtectionNotification");
}

id objc_msgSend_unregisterForDeviceMatching_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDeviceMatching:");
}

id objc_msgSend_unregisterForDurianConnectionStateChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDurianConnectionStateChange");
}

id objc_msgSend_unregisterForDurianService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForDurianService");
}

id objc_msgSend_unregisterForGeoCountryCodeConfigurationNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForGeoCountryCodeConfigurationNotification");
}

id objc_msgSend_unregisterForGeoNavListener(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForGeoNavListener");
}

id objc_msgSend_unregisterForGnssNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForGnssNotification");
}

id objc_msgSend_unregisterForHKNanoLifestylePrivacyPreferencesChangedNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForHKNanoLifestylePrivacyPreferencesChangedNotification");
}

id objc_msgSend_unregisterForLocalNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForLocalNotifications");
}

id objc_msgSend_unregisterForLocationNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForLocationNotification");
}

id objc_msgSend_unregisterForMiloPredictionEventUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMiloPredictionEventUpdates:");
}

id objc_msgSend_unregisterForMiloServiceEventUpdatesForClient_withToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMiloServiceEventUpdatesForClient:withToken:");
}

id objc_msgSend_unregisterForMobileAssetNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMobileAssetNotification");
}

id objc_msgSend_unregisterForMobilityBoutMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMobilityBoutMetrics:");
}

id objc_msgSend_unregisterForMotionNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMotionNotification");
}

id objc_msgSend_unregisterForMotionStateMediatorNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForMotionStateMediatorNotification");
}

id objc_msgSend_unregisterForNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForNotifications");
}

id objc_msgSend_unregisterForOTASettingsNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForOTASettingsNotification");
}

id objc_msgSend_unregisterForRSSIUpdatesForClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForRSSIUpdatesForClient:");
}

id objc_msgSend_unregisterForRetrocomputeStatusUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForRetrocomputeStatusUpdates:");
}

id objc_msgSend_unregisterForRoutineMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForRoutineMonitor");
}

id objc_msgSend_unregisterForSignalEnvironmentNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForSignalEnvironmentNotification");
}

id objc_msgSend_unregisterForTelephonyNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForTelephonyNotification");
}

id objc_msgSend_unregisterForTrackRunEnablementNotifications(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForTrackRunEnablementNotifications");
}

id objc_msgSend_unregisterForUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForUpdates:");
}

id objc_msgSend_unregisterForUsageMetricsUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForUsageMetricsUpdates:");
}

id objc_msgSend_unregisterForVehicleStateNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForVehicleStateNotification");
}

id objc_msgSend_unregisterForWeatherUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForWeatherUpdates:");
}

id objc_msgSend_unregisterForWifiServiceNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForWifiServiceNotification");
}

id objc_msgSend_unregisterForWorkoutSessionUpdates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForWorkoutSessionUpdates:");
}

id objc_msgSend_unregisterForZoneChanges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterForZoneChanges:");
}

id objc_msgSend_unregisterNotificationForKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterNotificationForKeys:");
}

id objc_msgSend_unregisterXPCActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unregisterXPCActivity:");
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedCharValue");
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntValue");
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedIntegerValue");
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongLongValue");
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedLongValue");
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "unsignedShortValue");
}

id objc_msgSend_updateActiveDeviceId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateActiveDeviceId:");
}

id objc_msgSend_updateActivePairedDeviceInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateActivePairedDeviceInfo");
}

id objc_msgSend_updateAdjacentBin_withAlpha_valueOut_nativeBin_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAdjacentBin:withAlpha:valueOut:nativeBin:");
}

id objc_msgSend_updateAirborneActivity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAirborneActivity:");
}

id objc_msgSend_updateAnalyticsWithAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAnalyticsWithAltitude:");
}

id objc_msgSend_updateAuthorizationContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAuthorizationContext:");
}

id objc_msgSend_updateAvailabilityStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateAvailabilityStatus");
}

id objc_msgSend_updateBatteryStatus_beaconUUID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBatteryStatus:beaconUUID:completion:");
}

id objc_msgSend_updateBatteryStatus_forDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBatteryStatus:forDevice:");
}

id objc_msgSend_updateBeaconObservations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBeaconObservations:completion:");
}

id objc_msgSend_updateBeaconUUID_firmwareUpdateState_systemVersion_error_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBeaconUUID:firmwareUpdateState:systemVersion:error:completion:");
}

id objc_msgSend_updateBiasUncertaintyWithAbsSigElevation_withCompanion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBiasUncertaintyWithAbsSigElevation:withCompanion:");
}

id objc_msgSend_updateBiasUncertaintyWithPressure_andTime_andLat_andLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBiasUncertaintyWithPressure:andTime:andLat:andLon:");
}

id objc_msgSend_updateBinsWithTrack_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBinsWithTrack:");
}

id objc_msgSend_updateBinsWithValueOut_valueIn_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBinsWithValueOut:valueIn:alpha:");
}

id objc_msgSend_updateBypassParameters(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateBypassParameters");
}

id objc_msgSend_updateCalibrationBins_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCalibrationBins:");
}

id objc_msgSend_updateCallbackHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCallbackHandler:");
}

id objc_msgSend_updateCameraRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCameraRunning:");
}

id objc_msgSend_updateClientEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientEvent:");
}

id objc_msgSend_updateClientEvent_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientEvent:forIdentifier:");
}

id objc_msgSend_updateClientsSubmersionMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientsSubmersionMeasurement:");
}

id objc_msgSend_updateClientsSubmersionState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientsSubmersionState:");
}

id objc_msgSend_updateClientsWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientsWithDictionary:");
}

id objc_msgSend_updateClientsWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateClientsWithHandler:");
}

id objc_msgSend_updateCoexMetricDict_forCASubmission_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCoexMetricDict:forCASubmission:");
}

id objc_msgSend_updateCompanionConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCompanionConnected:");
}

id objc_msgSend_updateComputeDemFlatnessMetric_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateComputeDemFlatnessMetric:");
}

id objc_msgSend_updateConfidence_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateConfidence:");
}

id objc_msgSend_updateContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateContext:");
}

id objc_msgSend_updateCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCount");
}

id objc_msgSend_updateCurrentLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCurrentLocation:");
}

id objc_msgSend_updateCurrentState_previousState_location_locationReceivedTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCurrentState:previousState:location:locationReceivedTime:");
}

id objc_msgSend_updateCyclingWorkout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateCyclingWorkout:");
}

id objc_msgSend_updateDaemonEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDaemonEvent:");
}

id objc_msgSend_updateDaemonEvent_forIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDaemonEvent:forIdentifier:");
}

id objc_msgSend_updateDesiredFireTimeToHour_minute_second_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDesiredFireTimeToHour:minute:second:");
}

id objc_msgSend_updateDeviceConnectionState_state_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDeviceConnectionState:state:");
}

id objc_msgSend_updateDiagnosticMask_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDiagnosticMask:");
}

id objc_msgSend_updateDurationInformationForCA_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateDurationInformationForCA:");
}

id objc_msgSend_updateElevationBiasBetweenStartTime_andEndTime_andNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateElevationBiasBetweenStartTime:andEndTime:andNextTrackStartTime:");
}

id objc_msgSend_updateElevationBiasUnderDEMOrLatchedHighBetweenStartTime_andEndTime_andNextTrackStartTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateElevationBiasUnderDEMOrLatchedHighBetweenStartTime:andEndTime:andNextTrackStartTime:");
}

id objc_msgSend_updateEndpoint_withKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEndpoint:withKey:");
}

id objc_msgSend_updateEntryDistanceAndPace_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEntryDistanceAndPace:");
}

id objc_msgSend_updateEstimatedLocationMetrics_currentLocation_estimatedLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEstimatedLocationMetrics:currentLocation:estimatedLocation:");
}

id objc_msgSend_updateEstimatedWeatherWithCumulativeAscendingDelta_andDescendingDelta_andIosTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEstimatedWeatherWithCumulativeAscendingDelta:andDescendingDelta:andIosTimestamp:");
}

id objc_msgSend_updateEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEvent:");
}

id objc_msgSend_updateEvent_bounce_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateEvent_bounce:");
}

id objc_msgSend_updateGpsLocationBuffer_gpsSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGpsLocationBuffer:gpsSource:");
}

id objc_msgSend_updateGpsOdometerBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGpsOdometerBuffer:");
}

id objc_msgSend_updateGradient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateGradient:");
}

id objc_msgSend_updateHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHandler");
}

id objc_msgSend_updateHistoricalFenceStateWithNotificationData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHistoricalFenceStateWithNotificationData:");
}

id objc_msgSend_updateHistoricalMslpArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHistoricalMslpArray:");
}

id objc_msgSend_updateHistoricalMslpArray_from_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateHistoricalMslpArray:from:");
}

id objc_msgSend_updateICloudManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateICloudManagedAppleID");
}

id objc_msgSend_updateIDSStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIDSStatus");
}

id objc_msgSend_updateIDSStatusAndNotify(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateIDSStatusAndNotify");
}

id objc_msgSend_updateITunesManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateITunesManagedAppleID");
}

id objc_msgSend_updateInitializedThresholdsWithAltitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInitializedThresholdsWithAltitude:");
}

id objc_msgSend_updateInputSystemFields_inputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInputSystemFields:inputRecord:");
}

id objc_msgSend_updateInstalledEducationProfile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateInstalledEducationProfile");
}

id objc_msgSend_updateLastSampleInMeanSeaLevelPressureArray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLastSampleInMeanSeaLevelPressureArray");
}

id objc_msgSend_updateLocationAuthorization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLocationAuthorization");
}

id objc_msgSend_updateLocationDictionaryCachedCapabilities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLocationDictionaryCachedCapabilities");
}

id objc_msgSend_updateLocationUnknown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLocationUnknown");
}

id objc_msgSend_updateLocationsOfInterestFetchTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLocationsOfInterestFetchTimestamp");
}

id objc_msgSend_updateLoiInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateLoiInfo:");
}

id objc_msgSend_updateMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMetadata");
}

id objc_msgSend_updateMonitoringState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMonitoringState:");
}

id objc_msgSend_updateMotion_conf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateMotion:conf:");
}

id objc_msgSend_updateNativeBin_withAlpha_valueOut_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNativeBin:withAlpha:valueOut:");
}

id objc_msgSend_updateNearbyStatusWithCompanionLinkDevice_didConnect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNearbyStatusWithCompanionLinkDevice:didConnect:");
}

id objc_msgSend_updateNearbyStatusWithDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNearbyStatusWithDevices:");
}

id objc_msgSend_updateNextFireTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateNextFireTime");
}

id objc_msgSend_updateOutputSystemFields_outputRecord_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateOutputSystemFields:outputRecord:");
}

id objc_msgSend_updatePAL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePAL:");
}

id objc_msgSend_updatePedometerBuffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePedometerBuffer:");
}

id objc_msgSend_updatePhoneWorkoutElevationSubscription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePhoneWorkoutElevationSubscription:");
}

id objc_msgSend_updatePillButtonChoiceForOutstandingPrompt_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePillButtonChoiceForOutstandingPrompt:");
}

id objc_msgSend_updatePrefetchParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePrefetchParameters:");
}

id objc_msgSend_updatePressureUncertaintyWithPressure_andTime_andLat_andLon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePressureUncertaintyWithPressure:andTime:andLat:andLon:");
}

id objc_msgSend_updatePromptedLatitude_longitude_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatePromptedLatitude:longitude:");
}

id objc_msgSend_updateProperty_value_forAccessory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateProperty:value:forAccessory:");
}

id objc_msgSend_updateQuickSwitchMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateQuickSwitchMode");
}

id objc_msgSend_updateRate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRate");
}

id objc_msgSend_updateRegulatoryDomainEstimates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRegulatoryDomainEstimates");
}

id objc_msgSend_updateRequestWithMediaItemList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRequestWithMediaItemList:");
}

id objc_msgSend_updateRetrocomputeHistory_withResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeHistory:withResult:");
}

id objc_msgSend_updateRetrocomputeHistoryPostProcessing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeHistoryPostProcessing:");
}

id objc_msgSend_updateRetrocomputeLastTimestampToHealthKit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeLastTimestampToHealthKit:");
}

id objc_msgSend_updateRetrocomputeStatus_unavailableReasons_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrocomputeStatus:unavailableReasons:");
}

id objc_msgSend_updateRetrySyncInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateRetrySyncInterval:");
}

id objc_msgSend_updateReunionSyncListsWithAuthSyncMessageKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateReunionSyncListsWithAuthSyncMessageKey:");
}

id objc_msgSend_updateSensorRecorderSubscription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSensorRecorderSubscription");
}

id objc_msgSend_updateSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSession:");
}

id objc_msgSend_updateStartTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStartTime");
}

id objc_msgSend_updateStatsWithNVP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStatsWithNVP:");
}

id objc_msgSend_updateStatusBarLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStatusBarLabel");
}

id objc_msgSend_updateStrideLengthRun(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStrideLengthRun");
}

id objc_msgSend_updateStrideLengthStepCadenceWalk(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateStrideLengthStepCadenceWalk");
}

id objc_msgSend_updateSubmersionStateFromAOPState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSubmersionStateFromAOPState:");
}

id objc_msgSend_updateSubmersionStateFromMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSubmersionStateFromMeasurement:");
}

id objc_msgSend_updateSupervised(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSupervised");
}

id objc_msgSend_updateSurfaceCalWithSource_andPressureQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSurfaceCalWithSource:andPressureQueue:");
}

id objc_msgSend_updateSyncStoreState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSyncStoreState:");
}

id objc_msgSend_updateSyncStoreStateForVersionedKey_withUpdateReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSyncStoreStateForVersionedKey:withUpdateReason:");
}

id objc_msgSend_updateSystemLoiType_isEntry_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateSystemLoiType:isEntry:");
}

id objc_msgSend_updateTAInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTAInfo:");
}

id objc_msgSend_updateTargetDemoDepth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTargetDemoDepth");
}

id objc_msgSend_updateTimeToInitialStateChangeForFence_previousStatus_timeOfStateChange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimeToInitialStateChangeForFence:previousStatus:timeOfStateChange:");
}

id objc_msgSend_updateTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimer");
}

id objc_msgSend_updateTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTimestamp");
}

id objc_msgSend_updateTunnelBridgeAssistance_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTunnelBridgeAssistance:");
}

id objc_msgSend_updateUncertinatyAndSendCurrentEstimateMslpFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUncertinatyAndSendCurrentEstimateMslpFrom:");
}

id objc_msgSend_updateUserHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateUserHeight:");
}

id objc_msgSend_updateVisitState_arrivalTime_departureTime_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVisitState:arrivalTime:departureTime:");
}

id objc_msgSend_updateVolatileData_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateVolatileData:completion:");
}

id objc_msgSend_updateWetState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWetState");
}

id objc_msgSend_updateWithAltitude_andAccuracy_upperBound_lowerBound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithAltitude:andAccuracy:upperBound:lowerBound:");
}

id objc_msgSend_updateWithTDot_andTempMeasurement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWithTDot:andTempMeasurement:");
}

id objc_msgSend_updateWorkoutReminderMuteSetting_mute_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWorkoutReminderMuteSetting:mute:");
}

id objc_msgSend_updateWorseMitigationsFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWorseMitigationsFrom:");
}

id objc_msgSend_updateWsbClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateWsbClient:");
}

id objc_msgSend_updateZoneMonitorLocation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateZoneMonitorLocation:");
}

id objc_msgSend_updater(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updater");
}

id objc_msgSend_updating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updating");
}

id objc_msgSend_updatingHK(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatingHK");
}

id objc_msgSend_updatingSurfacePressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updatingSurfacePressure");
}

id objc_msgSend_uploadBeaconPayloadsIfAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadBeaconPayloadsIfAllowed");
}

id objc_msgSend_uploadMigitation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadMigitation");
}

id objc_msgSend_uploadPayloadSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadPayloadSize");
}

id objc_msgSend_uploadTaskWithRequest_fromData_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadTaskWithRequest:fromData:completionHandler:");
}

id objc_msgSend_uploadTaskWithRequest_fromFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadTaskWithRequest:fromFile:");
}

id objc_msgSend_uploadURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadURL");
}

id objc_msgSend_upperQuartile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "upperQuartile");
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uppercaseString");
}

id objc_msgSend_useDefaultFirmwareAssetSourceForProductGroup_andProductNumber_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useDefaultFirmwareAssetSourceForProductGroup:andProductNumber:forClient:");
}

id objc_msgSend_useLocalFirmwareAssetFromUrl_forProductGroup_forProductNumber_withSandboxExtension_forClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "useLocalFirmwareAssetFromUrl:forProductGroup:forProductNumber:withSandboxExtension:forClient:");
}

id objc_msgSend_userDataPreferred(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDataPreferred");
}

id objc_msgSend_userDefaultVoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDefaultVoice");
}

id objc_msgSend_userDismissedWorkoutAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userDismissedWorkoutAlert");
}

id objc_msgSend_userFocusComputedMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userFocusComputedMode");
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userInfo");
}

id objc_msgSend_userMets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userMets");
}

id objc_msgSend_userMetsSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userMetsSource");
}

id objc_msgSend_userName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userName");
}

id objc_msgSend_userStatsData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userStatsData");
}

id objc_msgSend_userTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userTask");
}

id objc_msgSend_userType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userType");
}

id objc_msgSend_userTypeSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "userTypeSource");
}

id objc_msgSend_utAccelCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "utAccelCount");
}

id objc_msgSend_utLongSoundCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "utLongSoundCount");
}

id objc_msgSend_utShortSoundCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "utShortSoundCount");
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uuid");
}

id objc_msgSend_valid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valid");
}

id objc_msgSend_validMUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validMUID");
}

id objc_msgSend_validateAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateAccount");
}

id objc_msgSend_validateBodyMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateBodyMetrics");
}

id objc_msgSend_validateClientMonitoringRecordsByIdenitifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateClientMonitoringRecordsByIdenitifier:");
}

id objc_msgSend_validateRemoteDeviceForStreaming_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validateRemoteDeviceForStreaming:");
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "value");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_valueForHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForHTTPHeaderField:");
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKey:");
}

id objc_msgSend_valueForKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForKeyPath:");
}

id objc_msgSend_valueForProperty_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForProperty:");
}

id objc_msgSend_valueOut(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueOut");
}

id objc_msgSend_valueOutForValueIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueOutForValueIn:");
}

id objc_msgSend_vanBurenVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vanBurenVersion");
}

id objc_msgSend_variance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "variance");
}

id objc_msgSend_vectorClocks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vectorClocks");
}

id objc_msgSend_vectorClocksAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vectorClocksAtIndex:");
}

id objc_msgSend_vectorClocksCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vectorClocksCount");
}

id objc_msgSend_vehicleBluetoothAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vehicleBluetoothAddress");
}

id objc_msgSend_vehicleModelName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vehicleModelName");
}

id objc_msgSend_vehicleName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vehicleName");
}

id objc_msgSend_vehicularHints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vehicularHints");
}

id objc_msgSend_vehicularState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vehicularState");
}

id objc_msgSend_vehicularStateHint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vehicularStateHint");
}

id objc_msgSend_vendor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vendor");
}

id objc_msgSend_vendorId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vendorId");
}

id objc_msgSend_venueGroupDistance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "venueGroupDistance");
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "version");
}

id objc_msgSend_versionIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "versionIdentifiers");
}

id objc_msgSend_vertexs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vertexs");
}

id objc_msgSend_verticalAccuracy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalAccuracy");
}

id objc_msgSend_verticalUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verticalUncertainty");
}

id objc_msgSend_vioEstimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vioEstimation");
}

id objc_msgSend_visionNotificationProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visionNotificationProxy");
}

id objc_msgSend_visitClients(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visitClients");
}

id objc_msgSend_visitDetectionMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visitDetectionMetrics");
}

id objc_msgSend_visitEntryDelay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visitEntryDelay");
}

id objc_msgSend_visitExitDelay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visitExitDelay");
}

id objc_msgSend_visits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "visits");
}

id objc_msgSend_vlLocalizationResult(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vlLocalizationResult");
}

id objc_msgSend_vo2MaxModelSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vo2MaxModelSource");
}

id objc_msgSend_vo2Mean(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vo2Mean");
}

id objc_msgSend_vo2Variance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vo2Variance");
}

id objc_msgSend_wakeOnWirelessEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakeOnWirelessEnabled");
}

id objc_msgSend_wakeUpLaunchdManagedClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wakeUpLaunchdManagedClient:");
}

id objc_msgSend_walkBinCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "walkBinCount");
}

id objc_msgSend_walkableSide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "walkableSide");
}

id objc_msgSend_walking(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "walking");
}

id objc_msgSend_walkingSpeed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "walkingSpeed");
}

id objc_msgSend_wasCancelled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wasCancelled");
}

id objc_msgSend_watchMigrationDidEnd(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "watchMigrationDidEnd");
}

id objc_msgSend_watchMigrationDidStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "watchMigrationDidStart");
}

id objc_msgSend_watchNeedsDeltaSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "watchNeedsDeltaSync:");
}

id objc_msgSend_watchNeedsFullSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "watchNeedsFullSync:");
}

id objc_msgSend_watchProductVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "watchProductVersion");
}

id objc_msgSend_waterTempEst(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waterTempEst");
}

id objc_msgSend_waterTempUncertainty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "waterTempUncertainty");
}

id objc_msgSend_wattUnit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wattUnit");
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weakToStrongObjectsMapTable");
}

id objc_msgSend_weatherEstimateInMeter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weatherEstimateInMeter");
}

id objc_msgSend_weatherPressure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weatherPressure");
}

id objc_msgSend_website(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "website");
}

id objc_msgSend_weight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weight");
}

id objc_msgSend_weightModifiedDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "weightModifiedDate");
}

id objc_msgSend_westLng(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "westLng");
}

id objc_msgSend_wetStateUpdated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wetStateUpdated:");
}

id objc_msgSend_whitespaceAndNewlineCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceAndNewlineCharacterSet");
}

id objc_msgSend_whitespaceCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "whitespaceCharacterSet");
}

id objc_msgSend_width(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "width");
}

id objc_msgSend_wifi2GHzCriticalState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifi2GHzCriticalState");
}

id objc_msgSend_wifiAssociated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiAssociated");
}

id objc_msgSend_wifiAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiAvailable");
}

id objc_msgSend_wifiBands(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiBands");
}

id objc_msgSend_wifiBandsAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiBandsAtIndex:");
}

id objc_msgSend_wifiBandsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiBandsCount");
}

id objc_msgSend_wifiPowered(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiPowered");
}

id objc_msgSend_wifiScan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wifiScan");
}

id objc_msgSend_wildTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wildTime");
}

id objc_msgSend_willFetchRecordZoneChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willFetchRecordZoneChangesEvent");
}

id objc_msgSend_willSendChangesEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willSendChangesEvent");
}

id objc_msgSend_willStart(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "willStart");
}

id objc_msgSend_wirelessAPAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wirelessAPAtIndex:");
}

id objc_msgSend_wirelessAPs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wirelessAPs");
}

id objc_msgSend_wirelessAPsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "wirelessAPsCount");
}

id objc_msgSend_withClients_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "withClients:");
}

id objc_msgSend_workArchive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workArchive");
}

id objc_msgSend_workQ(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workQ");
}

id objc_msgSend_workingDirectoryHasSufficientFreeSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workingDirectoryHasSufficientFreeSpace");
}

id objc_msgSend_workout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workout");
}

id objc_msgSend_workoutActivityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutActivityType");
}

id objc_msgSend_workoutEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutEvent");
}

id objc_msgSend_workoutEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutEvents");
}

id objc_msgSend_workoutIsTypeRunning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutIsTypeRunning:");
}

id objc_msgSend_workoutIsTypeWalking_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutIsTypeWalking:");
}

id objc_msgSend_workoutLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutLabel");
}

id objc_msgSend_workoutLocationTypeFromCMWorkoutType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutLocationTypeFromCMWorkoutType:");
}

id objc_msgSend_workoutName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutName:");
}

id objc_msgSend_workoutSessionId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutSessionId");
}

id objc_msgSend_workoutSnapshotWithReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutSnapshotWithReply:");
}

id objc_msgSend_workoutType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workoutType");
}

id objc_msgSend_workouts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "workouts");
}

id objc_msgSend_writeAdvertisement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeAdvertisement:");
}

id objc_msgSend_writeAnomalyInfoToFileWithLastFallEvent_writeMask_fallNotifierConfig_stateLogger_statsLogger_sensorsLogger_pressureLogger_heartRateLogger_wristStateLogger_odometerLogger_falsePositiveSuppressionFeaturesLogger_hgalLogger_logDirectory_logFilePrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeAnomalyInfoToFileWithLastFallEvent:writeMask:fallNotifierConfig:stateLogger:statsLogger:sensorsLogger:pressureLogger:heartRateLogger:wristStateLogger:odometerLogger:falsePositiveSuppressionFeaturesLogger:hgalLogger:logDirectory:logFilePrefix:");
}

id objc_msgSend_writeBigEndianFixed16_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBigEndianFixed16:");
}

id objc_msgSend_writeBigEndianFixed32_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBigEndianFixed32:");
}

id objc_msgSend_writeBigEndianShortThenString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBigEndianShortThenString:");
}

id objc_msgSend_writeBodyMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeBodyMetrics");
}

id objc_msgSend_writeData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeData:");
}

id objc_msgSend_writeData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeData:error:");
}

id objc_msgSend_writeData_forTag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeData:forTag:");
}

id objc_msgSend_writeDataOnUnlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeDataOnUnlock");
}

id objc_msgSend_writeFTPToHK_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeFTPToHK:");
}

id objc_msgSend_writeHealthKitInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeHealthKitInfo");
}

id objc_msgSend_writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeInitialHistoricalMeanSeaLevelPressureToMslwithTimestamp:");
}

id objc_msgSend_writeJSONObject_toStream_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeJSONObject:toStream:options:error:");
}

id objc_msgSend_writeMeta_toHandle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeMeta:toHandle:");
}

id objc_msgSend_writeOtherFallLoggerData_otherLoggerDirectory_otherLoggerFilePrefix_destinationLogger_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeOtherFallLoggerData:otherLoggerDirectory:otherLoggerFilePrefix:destinationLogger:");
}

id objc_msgSend_writeSecondaryObject_collectedAt_toField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeSecondaryObject:collectedAt:toField:");
}

id objc_msgSend_writeSecondaryObject_toField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeSecondaryObject:toField:");
}

id objc_msgSend_writeSteadinessEvent_startDate_endDate_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeSteadinessEvent:startDate:endDate:source:");
}

id objc_msgSend_writeStrideCalBins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeStrideCalBins");
}

id objc_msgSend_writeTo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeTo:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeToHealthKitAppleWalkingSteadiness_startDate_endDate_source_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthKitAppleWalkingSteadiness:startDate:endDate:source:");
}

id objc_msgSend_writeToHealthKitPrediction_estimateTime_earliestTimeUsed_calibrationStatus_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthKitPrediction:estimateTime:earliestTimeUsed:calibrationStatus:");
}

id objc_msgSend_writeToHealthKitType_value_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthKitType:value:startDate:endDate:");
}

id objc_msgSend_writeToHealthKitType_value_startDate_endDate_deviceSide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthKitType:value:startDate:endDate:deviceSide:");
}

id objc_msgSend_writeToHealthRunningGroundContactTime_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningGroundContactTime:startDate:endDate:");
}

id objc_msgSend_writeToHealthRunningPower_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningPower:startDate:endDate:");
}

id objc_msgSend_writeToHealthRunningSpeed_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningSpeed:startDate:endDate:");
}

id objc_msgSend_writeToHealthRunningStrideLength_startDate_endDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToHealthRunningStrideLength:startDate:endDate:");
}

id objc_msgSend_writeToURL_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:atomically:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToURL:options:error:");
}

id objc_msgSend_writeValue_forCharacteristic_type_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeValue:forCharacteristic:type:");
}

id objc_msgSend_writeWatchOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeWatchOrientation");
}

id objc_msgSend_writeWorkoutEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeWorkoutEvent:");
}

id objc_msgSend_year(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "year");
}

id objc_msgSend_zipperedStoredLocationsBetweenStartTime_endTime_apartFromEachOther_lyingWithinTimeIntervals_custeredWithVisits_withReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zipperedStoredLocationsBetweenStartTime:endTime:apartFromEachOther:lyingWithinTimeIntervals:custeredWithVisits:withReply:");
}

id objc_msgSend_zoneID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneID");
}

id objc_msgSend_zoneIDForZoneName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIDForZoneName:");
}

id objc_msgSend_zoneIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIDs");
}

id objc_msgSend_zoneId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneId");
}

id objc_msgSend_zoneIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneIdentifier");
}

id objc_msgSend_zoneName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneName");
}

id objc_msgSend_zoneType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneType");
}

id objc_msgSend_zoneid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "zoneid");
}

